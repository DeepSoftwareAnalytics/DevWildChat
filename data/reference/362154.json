[
    {
        "link": "https://nextjs.org/docs/app/getting-started/project-structure",
        "document": "This page provides an overview of the folder and file conventions in Next.js, as well as tips for organizing your project.\n\nTop-level folders are used to organize your application's code and static assets.\n\nTop-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables.\n\nThe React components defined in special files of a route segment are rendered in a specific hierarchy:\n\nIn a nested route, the components of a segment will be nested inside the components of its parent segment.\n\nApart from folder and file conventions, Next.js is unopinionated about how you organize and colocate your project files. But it does provide several features to help you organize your project.\n\nIn the directory, nested folders define route structure. Each folder represents a route segment that is mapped to a corresponding segment in a URL path.\n\nHowever, even though route structure is defined through folders, a route is not publicly accessible until a or file is added to a route segment.\n\nAnd, even when a route is made publicly accessible, only the content returned by or is sent to the client.\n\nThis means that project files can be safely colocated inside route segments in the directory without accidentally being routable.\n\nPrivate folders can be created by prefixing a folder with an underscore:\n\nThis indicates the folder is a private implementation detail and should not be considered by the routing system, thereby opting the folder and all its subfolders out of routing.\n\nSince files in the directory can be safely colocated by default, private folders are not required for colocation. However, they can be useful for:\n• Consistently organizing internal files across a project and the Next.js ecosystem.\n\nRoute groups can be created by wrapping a folder in parenthesis:\n\nThis indicates the folder is for organizational purposes and should not be included in the route's URL path.\n\nRoute groups are useful for:\n• Organizing routes into groups e.g. by site section, intent, or team.\n• Enabling nested layouts in the same route segment level:\n• Creating multiple nested layouts in the same segment, including multiple root layouts\n• Adding a layout to a subset of routes in a common segment\n\nNext.js supports storing application code (including ) inside an optional directory. This separates application code from project configuration files which mostly live in the root of a project.\n\nThe following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project.\n\nThis strategy stores all application code in shared folders in the root of your project and keeps the directory purely for routing purposes.\n\nThis strategy stores all application code in shared folders in the root of the directory.\n\nThis strategy stores globally shared application code in the root directory and splits more specific application code into the route segments that use them."
    },
    {
        "link": "https://nextjs.org/docs/pages/getting-started/project-structure",
        "document": "This page provides an overview of the folder and file conventions in Next.js, as well as tips for organizing your project.\n\nTop-level folders are used to organize your application's code and static assets.\n\nTop-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables."
    },
    {
        "link": "https://medium.com/@mertenercan/nextjs-13-folder-structure-c3453d780366",
        "document": "The presented approach should not be regarded as the definitive or mandatory method for establishing a folder structure. While it has proven effective in my own experience, it is important to acknowledge that the organization of folders may not always adhere to a fixed or immutable framework. Its suitability is contingent upon the specific project requirements and the technology stack employed.\n\nThis is the folder three that i use most of the NextJS projects. Here is the descriptions of some of the folders:\n\nThis folder is the main feature of Next.js 13. You can handle all the page and API routes within this folder. I prefer to create a separate folder named “api” for API routes. I feel more organized this way. There is tons of options that you can use in the “app” folder. Fore detailed information, take a look at the offical NextJS documantation.\n\nServer actions are the experimental feature (hello from future, now it’s stable) that provides a built-in solution for server mutations. You may use server-side form action within this folder. For more information, vist the offical docs!\n\nI believe there’s no need for an elaborate description, I suppose xD. The only point I would like to make is that you can include “style” and “test” files within a component folder. In this particular case, I prefer to maintain them in separate folders.\n\nWell, I especially want to talk about the ‘containers’ folder. This folder essentially serves as a container for your route sections. For example, in the ‘hero-section’ folder, I have an ‘index.tsx’ file, and this file represents a ‘section’ on my home page. With this way, you may have more control over your page sections.\n\nAnd you can render those sections in the associated ‘page.tsx’ file like this:\n\nYou may choose to place the database configuration inside the ‘libs’ folder, I guess? I have optionally decided to store the database configurations in a separate folder named ‘db’.\n\nThis folder serves as the repository where I store my global states. In this project, I have employed Zustand. You have the option to utilize libraries such as Redux or manage your files within this folder as per your preference.\n\nIndeed, the nomenclature of this folder aligns with its intended purpose. Within, I have housed all the TypeScript types that are employed throughout the project."
    },
    {
        "link": "https://geeksforgeeks.org/nextjs-14-folder-structure",
        "document": "Next.js, a powerful React framework developed by Vercel, continues to evolve, bringing new features and improvements with each release. Version 14 of Next.js introduces enhancements to the folder structure, making it more efficient for developers to organize their projects. In this article, we’ll explore the standard folder structure of a Next.js 14 project.\n\nThe folder structure contains various files and directories present in the project directory, such as \"public,\" \"src,\" \"styles,\" \"context,\" \"services,\" \"layouts,\" etc.\n\nStep 1: Open the terminal, go to the path where you want to create the project and run the command with the project name to create the project.nd navigate to that folder using following commands.\n\nStep 2: Now after project folder has been created, go inside the folder using the following command.\n\nStep 3: Install the required dependencies for your project (if any) using the following command.\n\nStep 4: Lets create a file with extension .env which will contain the sensitive information and credentials of the project such as api keys.\n\nStep 5 :check this must present basic dependencies in package.json file\n\nFor managing the project in more concise way we can create these folder for more manageable code.\n\nThis folder contains reusable UI components used throughout the application, such as buttons, cards, navigation bars, or form elements.\n\nThe layouts folder contains layout components that define the overall structure or layout shared across multiple pages in the application. These layout components often include common elements like headers, footers, or sidebars.\n\nThe lib folder contains utility functions, helper classes, or modules used across the application. These utilities might include custom hooks, data manipulation functions, or third-party libraries that are used globally.\n\nThe services folder holds modules or classes responsible for interacting with external services such as APIs, databases, or authentication services. These services encapsulate communication logic and keep it separate from UI components.\n\nThis folder contains utility functions or helper classes used across the application for common tasks such as data manipulation, date formatting, validation, or other operations.\n\nThe assets folder stores static assets such as images, fonts, icons, or other files used in the application's UI. These assets are referenced in the code and displayed to users.\n\nThe hooks folder contains custom React hooks used throughout the NextJS application. Custom hooks encapsulate reusable logic and promote code reusability across different components.\n\nThe Next.js project structure is important for keeping everything organized and easy to manage. It helps developers work together smoothly and allows the application to expand without getting confusion. With a clear structure, it's simpler to find and modify different parts of the code. Plus, it ensures that the project remains consistent and high-quality, leading to smoother development and deployment processes. Ultimately, a well-thought-out structure sets the stage for successful development and long-term maintenance of Next.js applications.\n\nCreating a clear project structure in Next.js is key for smooth development. When you organize files by what they do and put them in the right folders, it makes everything easier to understand and maintain. For example, if you have components that you'll use in different parts of your app, keep them in the components folder. Also, using consistent names for files and folders makes it simpler to check if everything's there and working right. These simple steps help keep your codebase clean, speed up development, and ensure your Next.js project is top-notch.\n\nCreating a structured folder layout is important for maintaining a Next.js project. It enhances readability, maintainability, and scalability, making it easier to manage the codebase effectively. By implementing a clear structure, developer can navigate through the project, ensuring efficient management and as the application grows."
    },
    {
        "link": "https://stackoverflow.com/questions/76214501/nextjs-13-folder-structure-best-practice",
        "document": "I think reading this section in Next docs helps you organize the project folders:\n\nI tried with many different structures and I finally chose this one:\n• None Everything (all folders and files) will be in the directory because the directory accepts colocation and it’s different from directory which was only for routing purposes. In this way directory can be assumed the new directory.\n• None All the non-routes folders will be Private Folders by prefixing their name with an underscore (as stated in the link above). This tells the Next router that this folder is not part of the routes. (e.g. , , ...)\n• None To this point we established that every folder with underscore is not route and other folders without it are a part of the routing system (although having a or file in the folder is another condition for being a part of the routing system), but I used another Next 13 feature and it is Route Groups (as stated in the link above). It is wrapping a folder name in parenthesis, so that it shows the folder is for organizational purposes (grouping folders) and should not be included in the route’s URL path, e.g. (routes).\n\nWith these principles, I have all my required folders in directory, and with Route Groups all my routes are grouped in a folder, and with Private Folders by prefixing non-route folders with underscore, everything is isolated.\n\nThe image below is the summary of all the points above.\n\nHope the link and my way of organizing project folders help you."
    },
    {
        "link": "https://nextjs.org/docs/pages/building-your-application/routing",
        "document": "The Pages Router has a file-system based router built on concepts of pages. When a file is added to the pages directory it's automatically available as a route. Learn more about routing in the Pages Router:\n\nCreate your first page and shared layout with the Pages Router.\n\nDynamic Routes are pages that allow you to add custom params to your URLs. Start creating Dynamic Routes and learn more here.\n\nLearn how navigation works in Next.js, and how to use the Link Component and `useRouter` hook.\n\nLearn the different ways to handle redirects in Next.js.\n\nControl page initialization and add a layout that persists for all pages by overriding the default App component used by Next.js.\n\nNext.js supports API Routes, which allow you to build your API without leaving your Next.js app. Learn how it works here.\n\nOverride and extend the built-in Error page to handle custom errors.\n\nNext.js has built-in support for internationalized routing and language detection. Learn more here.\n\nLearn how to use Middleware to run code before a request is completed."
    },
    {
        "link": "https://nextjs.org/docs/app/getting-started/project-structure",
        "document": "This page provides an overview of the folder and file conventions in Next.js, as well as tips for organizing your project.\n\nTop-level folders are used to organize your application's code and static assets.\n\nTop-level files are used to configure your application, manage dependencies, run middleware, integrate monitoring tools, and define environment variables.\n\nThe React components defined in special files of a route segment are rendered in a specific hierarchy:\n\nIn a nested route, the components of a segment will be nested inside the components of its parent segment.\n\nApart from folder and file conventions, Next.js is unopinionated about how you organize and colocate your project files. But it does provide several features to help you organize your project.\n\nIn the directory, nested folders define route structure. Each folder represents a route segment that is mapped to a corresponding segment in a URL path.\n\nHowever, even though route structure is defined through folders, a route is not publicly accessible until a or file is added to a route segment.\n\nAnd, even when a route is made publicly accessible, only the content returned by or is sent to the client.\n\nThis means that project files can be safely colocated inside route segments in the directory without accidentally being routable.\n\nPrivate folders can be created by prefixing a folder with an underscore:\n\nThis indicates the folder is a private implementation detail and should not be considered by the routing system, thereby opting the folder and all its subfolders out of routing.\n\nSince files in the directory can be safely colocated by default, private folders are not required for colocation. However, they can be useful for:\n• Consistently organizing internal files across a project and the Next.js ecosystem.\n\nRoute groups can be created by wrapping a folder in parenthesis:\n\nThis indicates the folder is for organizational purposes and should not be included in the route's URL path.\n\nRoute groups are useful for:\n• Organizing routes into groups e.g. by site section, intent, or team.\n• Enabling nested layouts in the same route segment level:\n• Creating multiple nested layouts in the same segment, including multiple root layouts\n• Adding a layout to a subset of routes in a common segment\n\nNext.js supports storing application code (including ) inside an optional directory. This separates application code from project configuration files which mostly live in the root of a project.\n\nThe following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project.\n\nThis strategy stores all application code in shared folders in the root of your project and keeps the directory purely for routing purposes.\n\nThis strategy stores all application code in shared folders in the root of the directory.\n\nThis strategy stores globally shared application code in the root directory and splits more specific application code into the route segments that use them."
    },
    {
        "link": "https://nextjs.org/docs/app/getting-started/installation",
        "document": "How to set up a new Next.js project\n\nWe recommend starting a new Next.js app using , which sets up everything automatically for you. To create a project, run:\n\nOn installation, you'll see the following prompts:\n\nWhat is your project named? my-app Would you like to use TypeScript? No / Yes Would you like to use ESLint? No / Yes Would you like to use Tailwind CSS? No / Yes Would you like your code inside a `src/` directory? No / Yes Would you like to use App Router? (recommended) No / Yes Would you like to use Turbopack for `next dev`? No / Yes Would you like to customize the import alias (`@/*` by default)? No / Yes What import alias would you like configured? @/*\n\nAfter the prompts, will create a folder with your project name and install the required dependencies.\n\nTo manually create a new Next.js app, install the required packages:\n\nOpen your file and add the following :\n\nThese scripts refer to the different stages of developing an application:\n• : runs to build the application for production usage.\n\nNext.js uses file-system routing, which means the routes in your application are determined by how you structure your files.\n\nCreate an folder, then add a and file. These will be rendered when the user visits the root of your application ( ).\n\nCreate a root layout inside with the required and tags:\n\nYou can optionally create a folder at the root of your project to store static assets such as images, fonts, etc. Files inside can then be referenced by your code starting from the base URL ( ).\n• Edit the file and save it to see the updated result in your browser.\n\nNext.js comes with built-in TypeScript support. To add TypeScript to your project, rename a file to / . Run , Next.js will automatically install the necessary dependencies and add a file with the recommended config options.\n\nNext.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion.\n\nYou can enable the plugin in VS Code by:\n\nNow, when editing files, the custom plugin will be enabled. When running , the custom type checker will be used.\n\nSee the TypeScript configuration page for more information on how to use TypeScript in your project.\n\nNext.js comes with built-in ESLint, automatically installing the necessary packages and configuring the proper settings when you create a new project with .\n\nTo add ESLint to an existing project, add as a script to :\n\nThen, run and you will be guided through the installation and configuration process.\n\nYou'll see a prompt like this:\n• Strict: Includes Next.js' base ESLint configuration along with a stricter Core Web Vitals rule-set. This is the recommended configuration for developers setting up ESLint for the first time.\n• Cancel: Does not include any ESLint configuration. Only select this option if you plan on setting up your own custom ESLint configuration.\n\nIf either of the two configuration options are selected, Next.js will automatically install and as dependencies in your application and create an file in the root of your project that includes your selected configuration.\n\nYou can now run every time you want to run ESLint to catch errors. Once ESLint has been set up, it will also automatically run during every build ( ). Errors will fail the build, while warnings will not.\n\nSee the ESLint Plugin page for more information on how to configure ESLint in your project.\n\nNext.js has in-built support for the and options of and files. These options allow you to alias project directories to absolute paths, making it easier to import modules. For example:\n\nTo configure absolute imports, add the configuration option to your or file. For example:\n\nIn addition to configuring the path, you can use the option to module paths.\n\nFor example, the following configuration maps to :\n\nEach of the are relative to the location. For example:"
    },
    {
        "link": "https://nextjs.org/docs",
        "document": "Welcome to the Next.js documentation!\n\nNext.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations.\n\nUnder the hood, Next.js also abstracts and automatically configures tooling needed for React, like bundling, compiling, and more. This allows you to focus on building your application instead of spending time with configuration.\n\nWhether you're an individual developer or part of a larger team, Next.js can help you build interactive, dynamic, and fast React applications.\n\nSome of the main Next.js features include:\n\nHow to Use These Docs\n\nOn the left side of the screen, you'll find the docs navbar. The pages of the docs are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your application. However, you can read them in any order or skip to the pages that apply to your use case.\n\nOn the right side of the screen, you'll see a table of contents that makes it easier to navigate between sections of a page. If you need to quickly find a page, you can use the search bar at the top, or the search shortcut ( or ).\n\nTo get started, check out the Installation guide.\n\nNext.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React's latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications.\n\nAt the top of the sidebar, you'll notice a dropdown menu that allows you to switch between the App Router and the Pages Router features. Since there are features that are unique to each directory, it's important to keep track of which tab is selected.\n\nThe breadcrumbs at the top of the page will also indicate whether you're viewing App Router docs or Pages Router docs.\n\nAlthough our docs are designed to be beginner-friendly, we need to establish a baseline so that the docs can stay focused on Next.js functionality. We'll make sure to provide links to relevant documentation whenever we introduce a new concept.\n\nTo get the most out of our docs, it's recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out our React Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js by building a dashboard application.\n\nFor optimal accessibility when using a screen reader while reading the docs, we recommend using Firefox and NVDA, or Safari and VoiceOver.\n\nIf you have questions about anything related to Next.js, you're always welcome to ask our community on GitHub Discussions , Discord , X (Twitter) , and Reddit ."
    },
    {
        "link": "https://nextjs.org/docs/app/building-your-application/routing",
        "document": "Learn how navigation works in Next.js, and how to use the Link Component and `useRouter` hook.\n\nBuilt on top of Suspense, Loading UI allows you to create a fallback for specific route segments, and automatically stream content as it becomes ready.\n\nLearn the different ways to handle redirects in Next.js.\n\nRoute Groups can be used to partition your Next.js application into different sections.\n\nDynamic Routes can be used to programmatically generate route segments from dynamic data.\n\nSimultaneously render one or more pages in the same view that can be navigated independently. A pattern for highly dynamic applications.\n\nUse intercepting routes to load a new route within the current layout while masking the browser URL, useful for advanced routing patterns such as modals.\n\nCreate custom request handlers for a given route using the Web's Request and Response APIs.\n\nLearn how to use Middleware to run code before a request is completed."
    }
]