[
    {
        "link": "https://medium.com/codex/even-better-styled-html-css-checkboxes-7e9345b5bffd",
        "document": "*** WARNING *** An earlier version of this article was based on incorrect information about the need for browser prefixes for Safari, as well as assuming that Safari didn’t use a broken and nonsensical implementation of checkboxes where it will apply a margin around generated content that can’t be turned off. I have rewritten the demo to use absolute positioning of the child element fixing Safari support.\n\nAbout a year and a half ago I wrote about how one can create fancier easy to size checkboxes using EM and an extra tag after the INPUT itself. At the time I wrote that it was the best way IMHO of handling it. However…\n\nThis is now 2022, and there’s a CSS property that is increasingly real-world deployable that lets us do away with using any extra elements altogether!\n\nNow warning, if you need to support versions of Firefox made before 2017 (v54) this isn’t gonna fly. The laugh being even IE beat FF to market on this one. But honestly anyone using browsers that old deserves to have a non-working web, given the security holes those browsers have ALONE.\n\nThere’s also the simple fact that whilst Microsoft and Firefox dragged their heels on this, Safari — and by extension Chrome — has had this since version 3.x way the devil back in 2007! Thus if you’re using it with something like Electron, no hassles at…"
    },
    {
        "link": "https://stackoverflow.com/questions/29136021/css-responsive-with-checkbox",
        "document": "I got a problem with checkbox and label. When I re-size screen the label split line, and checkbox should split follow label also.currently, when label stay in new line, but checkbox not stay in the same place of label. What I need is pair new line when responsive.\n\nAnyone have any idea? Thanks in advance for your helping!\n\nBelow is my code"
    },
    {
        "link": "https://forum.freecodecamp.org/t/create-a-set-of-checkboxes-need-help/233718",
        "document": "Tell us what’s happening:\n\n please i need help, it telling me\n\n each of your three checkbox elements should be nested in its own element.\n\n and Give your checkboxes the attribute of\n\nYour code so far"
    },
    {
        "link": "https://stackoverflow.com/questions/73926220/making-checkboxes-inside-div-responsive",
        "document": "I want to have six checkboxes with text in this div, which I need to make responsive as well. Problem I am facing is when I reduce screen size checkboxes coming outside of div and making screen unresponsive. How can In fix this?\n\nI want to have checkboxes as shown in below image"
    },
    {
        "link": "https://blog.logrocket.com/styling-checkboxes-css-properties",
        "document": "Editor’s note: David Omotayo last updated this article on 21 August 2024 to provide information about HTML checked attributes and answer some popular questions about them, as well as to offer information about conditionally styling checkboxes using pseudo selectors like and to style elements based on specific conditions.\n\nCheckboxes are a commonly used element in forms and surveys. Whether you’re using a checkbox as part of a form for booking flight reservations, accepting user inputs, or receiving feedback from an online product survey, checkboxes are an easy way to record a user’s choices.\n\nOn webpages, we can use the HTML input element to render a checkbox. Like other HTML elements, you can also style checkboxes with CSS to make them look more appealing. However, CSS properties like color, font, border, width, and height do not apply to checkboxes.\n\nIn this article, we’ll discuss the CSS properties you can apply to checkboxes and the scenarios where they make useful additions to your UI/UX. Let’s get started!\n\nHTML checked attributes and popular questions about them\n\nBefore diving into the details, let us take a quick primer on one of the attributes that gives the HTML checkbox element its magic, the attribute, and address some misconceptions about it.\n\nThe attribute is used with elements of type or to specify that the element should be preselected (ticked) when the page loads. The attribute is a Boolean attribute, meaning it doesn’t need a value — just adding it to a checkbox element is enough to mark the element as checked.\n\nDespite this, the attribute also accepts string values, which has caused a decade-old confusion among developers about the correct way to use the attribute — although, according to the specs, the correct to assign the attribute is as follows:\n\nHowever, the browser would accept just about any value between the quotes and still exhibit the same behavior as the former. The following would also be considered valid HTML attributes:\n\nSee the Pen \n\n Checkbox values by david omotayo (@david4473)\n\n on CodePen.\n\nHow you use the attribute is up to you, but it is advised to provide a descriptive value like or simply set the attribute without a value or with empty quotes: or .\n\nAnother popular question often asked among developers is the difference between and . While both properties can be used to preselect a checkbox on page load, is a property that can only be set using JavaScript, while is an HTML attribute. Here’s an example:\n\nOne of the simplest and most common ways to style a checkbox is to use or pseudo selectors to set the style with CSS properties based on a specific state.\n\nIn the example below, we styled the outline of every checkbox, regardless of its state, to a black color with a width of .\n\nHere is the HTML markup:\n\nAnd here is the CSS code:\n\nThe output will look like the following CodePen:\n\nSee the Pen CSS Checkbox Styling Demo1A by Mamta Dalal (@mamta_d) on CodePen.\n\nBy using the pseudo selector, we can also set a specific style for the checkbox when it is checked. In the code below, we’ve retained the same HTML markup from the previous example, but we tweaked the CSS style to add the following code in place of :\n\nIn the CodePen below, you can observe the yellow tints around the selected checkboxes:\n\nSee the Pen \n\n CSS Checkbox Styling Demo1B by Mamta Dalal (@mamta_d)\n\n on CodePen.\n\nWe can also use the pseudo-class, although not specific to the checkbox element, to set custom styles for the checkbox when it is hovered upon:\n\nSee the Pen \n\n Checkbox:hover pseudo class by david omotayo (@david4473)\n\n on CodePen.\n\nSimilar to and , and allow you to style elements based on specific conditions. These pseudo-classes can be creatively used to style checkboxes and their related elements based on their checked state or the state of sibling elements.\n• : This targets elements based on the presence of specific child elements that match the provided selector in the pseudo-class. For example, to style a label when its associated checkbox is checked, the process would be as follows:\n\nThis rule translates: If the element contains a checked checkbox, change its text color to and make the font bold.\n• : This targets elements that do not match the provided selector. For example, we can style the label from the previous example to exhibit different behavior when the checkbox is checked:\n\nThis rule translates: If the element doesn’t contain a checked checkbox, change its text color to and use the default font-weight.\n\nAdditionally, we can chain both pseudo-classes to apply even complex styling rules. For example, if we want to highlight a container when all checkboxes inside it are checked, we can chain the and pseudo-classes as follows:\n\nHere, the first rule applies a red background to if any of the checkboxes inside it are not checked, while the second rule applies a green background to only if all checkboxes inside are checked:\n\nSee the Pen \n\n conditional checkboxes by david omotayo (@david4473)\n\n on CodePen.\n\nBesides the checked and unchecked states for checkboxes, a third state is also possible — the indeterminate state. In this state, it’s impossible to determine whether the item is checked or not.\n\nYou can only set this state via JavaScript; it cannot be set using an HTML attribute. To enable the indeterminate state in JavaScript, you can set the property of an HTML input element to . Instead of the checkmark or tick seen in most browsers, in the indeterminate state, a checkbox has a horizontal line in the box.\n\nLet’s say you’re asking the user to select the number of levels they’ve cleared in a game. When you check or uncheck a level’s checkbox, a JavaScript function reviews the total number of checked levels:\n• If none are checked, the level name’s checkbox is set to\n• If one or two are checked, the level name’s checkbox is set to\n• If all three are checked, the level name’s checkbox is set to\n\nIn this case, the indeterminate state is used to indicate that the user has started collecting levels but hasn’t completed all of them yet.\n\nSuppose you want to style the odd-numbered indeterminate levels. You can do so with the following code:\n\nThe output will look like the following:\n\nSee the Pen \n\n CSS Checkbox Styling Demo 2 by Mamta Dalal (@mamta_d)\n\n on CodePen.\n\nUsing the property on checkboxes\n\nSince 2021, the property has been available for HTML input elements, including checkboxes. At the time of writing, most recent versions of popular browsers support .\n\nWhen applied to checkboxes, enables developers to override and customize the default checkmark color. When done right, this can greatly improve accessibility. By using their internal algorithms, browsers can automatically arrive at the best-suited color for the checkmark at render time, ensuring sufficient color contrast:\n\nThe code above will generate the following output:\n\nSee the Pen \n\n CSS Checkbox Styling Demo 3 by Mamta Dalal (@mamta_d)\n\n on CodePen.\n\nThe property can be useful if you have two or more forms or fieldsets on a page and you want to style their respective checkboxes in different colors.\n\nDevelopers and web designers sometimes customize checkboxes to override the default behavior. For example, let’s say you want to completely override the default checkbox’s UI and not just the checkmark associated with the element. You could either render it by writing some lengthy CSS code, or you could use an HTML checkbox to implement a cool feature like a toggle button.\n\nThe code below shows a simple example with custom dimensions, color, and font size for the checkbox and its checkmark:\n\nHere is the result:\n\nSee the Pen \n\n CustomCheckboxStyling by Mamta Dalal (@mamta_d)\n\n on CodePen.\n\nIn modern CSS, layouts are important for web designers when creating complicated designs. Flexbox and Grid are two popular layouts used in modern CSS.\n\nWhile Flexbox provides a one-dimensional layout and defines the layout for either a row or a column, Grid provides a two-dimensional layout, defining the layout for both the row and column simultaneously. Let’s understand the basics of the grid layout so that we can use it to style checkboxes.\n\nA grid layout has one parent element with one or more child elements. Items in a grid container are called grid items. All grid items are placed inside columns and rows. The image below shows an example of a grid layout container with six grid items:\n\nLet’s review the various terminologies that are associated with the CSS grid layout:\n• Grid container: Holds elements of a grid, like a row, column, or cell\n• Grid item: Child elements of a grid container, which is the parent of all grid items\n• Grid line: The dividing lines that define the structure of the grid. A vertical grid line refers to the column grid line, and a horizontal grid line refers to the row grid line\n• Grid cell: The single unit of a grid that is bound by two-row grid lines and two-column grid lines\n• Grid gap: The gap between rows and columns\n• Grid column: The space between two adjacent vertical grid lines\n• Grid row: The space between two adjacent horizontal grid lines\n\nTo convert an HTML element into a grid container, you can set the display property to with the following code:\n\nTo generate an inline-level grid, you can also set the display property to :\n\nYou can control the layout of the grid using the grid container properties. For example, you can specify the number of columns or rows as well as the height of rows. You can also align the grid inside of the container. Let’s review a few properties of the grid container:\n• defines the number and size of columns. indicates that all columns should have the same width:\n• defines the height of the rows:\n• allows us to use both the and the properties together:\n• helps to align grid items along the inline row axis\n• provides the columns with an equal amount of space between and around them\n• provides the columns with an equal amount of space around them\n• provides the columns with an equal amount of space between them\n• aligns the grid in the middle of the container\n• and align the grid at the beginning and end of the container, respectively:\n• helps to vertically align the whole grid along the block column axis:\n\nIn the example above, provides rows with an equal amount of space between and around them, while provides rows with an equal amount of space around them. Similarly, provides rows with an equal amount of space between them. , , and align rows in the middle, beginning, and end of the container, respectively.\n\nNow, we’ll learn how to use the , , and properties together with checkbox controls:\n\nThe CSS code should look like the following:\n\nThe output will look like the following:\n\nSee the Pen \n\n Checkbox Grid 1 by Mamta Dalal (@mamta_d)\n\n on CodePen.\n\nWe can use the property as follows:\n\nOur HTML code will remain the same as earlier; the output is as follows:\n\nSee the Pen \n\n Checkbox Grid 2 by Mamta Dalal (@mamta_d)\n\n on CodePen.\n\nLet’s learn how to organize the checkboxes properly in rows and columns like a matrix using the various grid properties:\n\nThe corresponding CSS code looks like the following:\n\nThe outcome depicts the checkboxes neatly arranged in a matrix-like grid:\n\nSee the Pen \n\n Checkbox Grid 3 by Mamta Dalal (@mamta_d)\n\n on CodePen.\n\nWe can style grid items with grid-style properties, as seen in the following example using the and properties:\n\nThe CSS code will look like the following:\n\nSee the Pen \n\n Checkbox Grid 4 by Mamta Dalal (@mamta_d)\n\n on CodePen.\n\nIntroduced in CSS Grid Layout Module Level 2, CSS subgrid is a powerful UI tool that has the ability to produce outstanding layouts.\n\nWithout the use of the subgrid, when the grid is stretched or resized, nested grids can lead to the erratic placement of items. All of the grids have different-sized content, which influences the layout and makes each element act independently.\n\nAdditionally, nested grids lack support for responsive web design. With a variety of common screen sizes in today’s digital world, support for a responsive webpage is imperative. The CSS subgrid feature causes child grid containers to align with the parent grid. The CSS subgrid allows the child grid to inherit the grid structure of the parent container, simplifying the creation of intricate layouts.\n\nNowadays, developers are no longer required to design the grid template or grid lines for the child grid container. Instead, they are automatically inherited from the parent grid container.\n\nTo apply the CSS subgrid to a project, it must be activated in the nested grid container by specifying the subgrid value for the or property. To establish its own grid, the child grid container applies the grid tracks of the parent grid container.\n\nThis enables the creation of nested grids with consistent track alignment, making it easier to design flexible and complex layouts. Let’s see this in action:\n\nNow, the CSS code will look like the following:\n\nSee the Pen \n\n Checkbox Grid 6 by Mamta Dalal (@mamta_d)\n\n on CodePen.\n\nAlthough this styling isn’t very pretty or optimal, it should give you a fair idea of how subgrids work.\n\nUsing the property on your checkbox\n\nSometimes, you might want to style a checkbox so that it takes on the existing color of the element or the parent element. Let’s say that we have a form with checkboxes defined on it, and you want the checkbox outline to be the same as the font color of the form elements.\n\nIn this case, you would use the property of the child element, which is the checkbox. Consider the following HTML markup and its corresponding CSS code, respectively:\n\nAs a result of the CSS styling, the outline of the checkboxes will be magenta, which is the current color in the form:\n\nSee the Pen \n\n Checkbox Grid 5 by Mamta Dalal (@mamta_d)\n\n on CodePen.\n\nInstead of using the bare-bones HTML checkbox input element, you can render it in a more visually appealing manner by applying a variety of CSS styles.\n\nIn this article, we discussed how you can apply different CSS styles to customize and override a checkbox’s default look and feel. Using the different styling features covered in this article, developers and web designers can provide users with a rich visual experience using checkboxes.\n\nI hope you enjoyed this article, and be sure to leave a comment if you have any questions. Happy coding!"
    },
    {
        "link": "https://w3schools.com/jsref/event_onclick.asp",
        "document": "The event occurs when the user clicks on an HTML element.\n\nIn JavaScript, using the addEventListener() method:\n\n<h3 id=\"demo\" onclick=\"myFunction()\">Click me to change my color.</h3> <script> function myFunction() { document.getElementById(\"demo\").style.color = \"red\"; } </script>\n\nAnother example on how to change the color of an element:\n\n<h3 onclick=\"myFunction(this, 'red')\">Click me to change my color.</h3>\n\n\n\n<script>\n\n function myFunction(element, color) {\n\n element.style.color = color;\n\n}\n\n</script>"
    },
    {
        "link": "https://stackoverflow.com/questions/55798300/how-to-execute-onclick-before-navigating-to-a-different-page",
        "document": "I am working in React and I have the following scenario.\n\nNow, I want the onclick to execute before the link has been clicked. However I do not see it happening.\n\nHow to work around this issue ? Thanks."
    },
    {
        "link": "https://stackoverflow.com/questions/20374603/navigation-with-onclick-javascript-not-working",
        "document": "I have created a menu for my website which you can find here:\n\nWhen click a category on the menu it opens that category on my main navigation?\n\nIs something conflicting or have I placed my Javascript in the wrong place?\n\nSo I want to be able to click a category and show the sub-categories but it just won't work. Also is there a way to keep open the category you clicked after you change page?"
    },
    {
        "link": "https://w3schools.com/js/js_events.asp",
        "document": "HTML events are \"things\" that happen to HTML elements.\n\nWhen JavaScript is used in HTML pages, JavaScript can \"react\" on these events.\n\nAn HTML event can be something the browser does, or something a user does.\n\nHere are some examples of HTML events:\n\nOften, when events happen, you may want to do something.\n\nJavaScript lets you execute code when events are detected.\n\nHTML allows event handler attributes, with JavaScript code, to be added to HTML elements.\n\nIn the following example, an attribute (with code), is added to a element:\n\nIn the example above, the JavaScript code changes the content of the element with id=\"demo\".\n\nIn the next example, the code changes the content of its own element (using ):\n\nHere is a list of some common HTML events:\n\nThe list is much longer: W3Schools JavaScript Reference HTML DOM Events.\n\nEvent handlers can be used to handle and verify user input, user actions, and browser actions:\n• Things that should be done every time a page loads\n• Things that should be done when the page is closed\n• Action that should be performed when a user clicks a button\n• Content that should be verified when a user inputs data\n\nMany different methods can be used to let JavaScript work with events:\n• You can assign your own event handler functions to HTML elements\n• You can prevent events from being sent or being handled"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/NavigateEvent",
        "document": "Returns if the navigation can be intercepted, or otherwise (e.g. you can't intercept a cross-origin navigation). Returns a object representing the destination being navigated to. Returns the filename of the file requested for download, in the case of a download navigation (e.g. an or element with a attribute), or otherwise. Returns the object representing the submitted data in the case of a form submission, or otherwise. Returns if the navigation is a fragment navigation (i.e. to a fragment identifier in the same document), or otherwise. Returns if the user agent performed a visual transition for this navigation before dispatching this event, or otherwise. Returns the data value passed by the initiating navigation operation (e.g. , or ), or if no data was passed. Returns the type of the navigation — , , , or . Returns an , which will become aborted if the navigation is cancelled (e.g. by the user pressing the browser's \"Stop\" button, or another navigation starting and thus cancelling the ongoing one). Returns if the navigation was initiated by the user (e.g. by clicking a link, submitting a form, or pressing the browser's \"Back\"/\"Forward\" buttons), or otherwise.\n\nIntercepts this navigation, turning it into a same-document navigation to the URL. It can accept a handler function that defines what the navigation handling behavior should be, plus and options to control behavior as desired. Can be called to manually trigger the browser-driven scrolling behavior that occurs in response to the navigation, if you want it to happen before the navigation handling has completed.\n\nnavigation.addEventListener(\"navigate\", (event) => { // Exit early if this navigation shouldn't be intercepted, // e.g. if the navigation is cross-origin, or a download request if (shouldNotIntercept(event)) return; const url = new URL(event.destination.url); if (url.pathname.startsWith(\"/articles/\")) { event.intercept({ async handler() { // The URL has already changed, so show a placeholder while // fetching the new content, such as a spinner or loading page renderArticlePagePlaceholder(); // Fetch the new content and display when ready const articleContent = await getArticleContent(url.pathname); renderArticlePage(articleContent); }, }); } }); Note: Before the Navigation API was available, to do something similar you'd have to listen for all click events on links, run , perform the appropriate call, then set up the page view based on the new URL. And this wouldn't handle all navigations — only user-initiated link clicks.\n\nIn this example of intercepting a navigation, the function starts by fetching and rendering some article content, but then fetches and renders some secondary content afterwards. It makes sense to scroll the page to the main article content as soon as it is available so the user can interact with it, rather than waiting until the secondary content is also rendered. To achieve this, we have added a call between the two. navigation.addEventListener(\"navigate\", (event) => { if (shouldNotIntercept(navigateEvent)) return; const url = new URL(event.destination.url); if (url.pathname.startsWith(\"/articles/\")) { event.intercept({ async handler() { const articleContent = await getArticleContent(url.pathname); renderArticlePage(articleContent); event.scroll(); const secondaryContent = await getSecondaryContent(url.pathname); addSecondaryContent(secondaryContent); }, }); } });"
    }
]