[
    {
        "link": "https://docs.unity3d.com/Packages/com.unity.ads@3.3/manual/AdvertisingOptimizationVideoAdsBestPractices.html",
        "document": "These best practices are compiled from the Unity Ads network, based on proven success for rewarded video. We encourage you to review them and run multiple content types simultaneously to drive the best engagement and reach the widest possible audience. Additionally, once your videos are live, Unity Ads’ machine-learning algorithm evaluates which videos are most appropriate and engaging for each user and optimizes for them to drive the best results.\n\nGive the user an idea of the real app experience instead of focusing on cutscenes or marketing assets (although a balanced mix of these can be very effective). It helps user retention if the app experience is what was expected after seeing the trailer.\n\nAdding hand interaction or touch indicators can help make the content more understandable. Experiment with different styles (live action hands, animated hands, hot spot indicator etc).\n\nMake your video ad stand out by experimenting with different creatives. For example, showcase a real commentator in the ad or create a fictional character with a memorable and engaging storyline.\n\nIn general, the more you can show instead of tell, the better. However, using text elements can be a very powerful way to make your point quickly and highlight the unique features of your app.\n\nShorter videos tend to drive higher engagement and video completion rates. As a best practice, advertisers should keep the length between 10 and 30 seconds. Front load your video with the best content to keep users engaged. To depict more complex gameplay, you might need longer videos, whereas casual apps may require shorter creative. We recommend testing different lengths because they can drive different metrics. For example, while one creative may drive higher video completion rates, the other may drive better lifetime value (LTV). You should iterate on the creative that meets your campaign goals.\n\nTry to provide a video for both landscape and portrait orientations for each campaign. Repurposing content from one orientation to the other can be tricky though. Do your best to keep the experience about the same in both orientations.\n\nIf you need to show portrait footage in a landscape video or vice versa, embedding the footage on a device screen can be a visually pleasing way to do it, and it also lets you re-frame content in a convincing way. Using devices definitely gives you more design options but sometimes all you need is some full-screen action without any distracting elements. Test to see what works best to showcase your app.\n\nKnow exactly what you want the user to focus on and animate accordingly.\n\nPace it for clarity and excitement\n\nKeep the pacing exciting but make sure players have time to understand the content. Clarity is often the most important element. Focus on one message at a time, and use text elements to support the visuals – don’t mention something that is not currently happening on the screen.\n\nMany users choose to watch trailers without sound but when they do, tightly cutting footage to music helps it hit harder. Use music from the app if possible. Add sound effects for emphasis, but keep them subtle, and preferably use sounds from the app too.\n\nTry to create a story with the soundtrack that has a beginning, a middle and an end. A cohesive soundtrack works better than just a random song that fades out. Use the soundtrack to set the length of the trailer.\n\nIf there are prominent characters or famous actors for example in your app, show them.\n\nReach users in their own language. Chinese and Russian are good languages to start experimenting with.\n\nIf there is any kind of hype around your release, show it."
    },
    {
        "link": "https://discussions.unity.com/t/how-to-make-responsive-ui-in-unity/706858",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/Packages/com.unity.ads@3.4/manual/AdvertisingOptimizationVideoAdsBestPractices.html",
        "document": "These best practices are compiled from the Unity Ads network, based on proven success for rewarded video. We encourage you to review them and run multiple content types simultaneously to drive the best engagement and reach the widest possible audience. Additionally, once your videos are live, Unity Ads’ machine-learning algorithm evaluates which videos are most appropriate and engaging for each user and optimizes for them to drive the best results.\n\nGive the user an idea of the real app experience instead of focusing on cutscenes or marketing assets (although a balanced mix of these can be very effective). It helps user retention if the app experience is what was expected after seeing the trailer.\n\nAdding hand interaction or touch indicators can help make the content more understandable. Experiment with different styles (live action hands, animated hands, hot spot indicator etc).\n\nMake your video ad stand out by experimenting with different creatives. For example, showcase a real commentator in the ad or create a fictional character with a memorable and engaging storyline.\n\nIn general, the more you can show instead of tell, the better. However, using text elements can be a very powerful way to make your point quickly and highlight the unique features of your app.\n\nShorter videos tend to drive higher engagement and video completion rates. As a best practice, advertisers should keep the length between 10 and 30 seconds. Front load your video with the best content to keep users engaged. To depict more complex gameplay, you might need longer videos, whereas casual apps may require shorter creative. We recommend testing different lengths because they can drive different metrics. For example, while one creative may drive higher video completion rates, the other may drive better lifetime value (LTV). You should iterate on the creative that meets your campaign goals.\n\nTry to provide a video for both landscape and portrait orientations for each campaign. Repurposing content from one orientation to the other can be tricky though. Do your best to keep the experience about the same in both orientations.\n\nIf you need to show portrait footage in a landscape video or vice versa, embedding the footage on a device screen can be a visually pleasing way to do it, and it also lets you re-frame content in a convincing way. Using devices definitely gives you more design options but sometimes all you need is some full-screen action without any distracting elements. Test to see what works best to showcase your app.\n\nKnow exactly what you want the user to focus on and animate accordingly.\n\nPace it for clarity and excitement\n\nKeep the pacing exciting but make sure players have time to understand the content. Clarity is often the most important element. Focus on one message at a time, and use text elements to support the visuals – don’t mention something that is not currently happening on the screen.\n\nMany users choose to watch trailers without sound but when they do, tightly cutting footage to music helps it hit harder. Use music from the app if possible. Add sound effects for emphasis, but keep them subtle, and preferably use sounds from the app too.\n\nTry to create a story with the soundtrack that has a beginning, a middle and an end. A cohesive soundtrack works better than just a random song that fades out. Use the soundtrack to set the length of the trailer.\n\nIf there are prominent characters or famous actors for example in your app, show them.\n\nReach users in their own language. Chinese and Russian are good languages to start experimenting with.\n\nIf there is any kind of hype around your release, show it."
    },
    {
        "link": "https://medium.com/@hardikparmarexpert/responsive-design-and-adaptive-ui-in-unity-bab765055c4d",
        "document": "\n• As game development continues to evolve, so do the design techniques used to create compelling and immersive user interfaces.\n• One of the most critical aspects of creating an engaging UI in Unity is using advanced layout techniques, such as responsive design and adaptive UI.\n• This blog will explore these advanced techniques and how to implement them in your Unity projects.\n• Responsive design is a design approach that focuses on creating interfaces that adapt to different screen sizes and resolutions.\n• The goal is to ensure that the UI is optimized for all devices, from desktop computers to mobile phones, without sacrificing the user experience.\n• In Unity, responsive design is achieved by using flexible layout techniques such as anchor points, content size fitters, and layout groups.\n• Let’s say you’re designing a mobile game that has a HUD (heads-up display) with various UI elements such as a score counter, health bar, and ammo counter.\n• You want to ensure that the HUD looks good and is functional on different mobile devices with different screen sizes and resolutions.\n• First, you can use anchor points to ensure that the HUD elements stay in the right position on the screen regardless of the device’s screen size.\n• For example, you might anchor the score counter to the top-left corner of the screen, the health bar to the top center, and the ammo counter to the top right.\n• Next, you can use content size fitters to ensure that the elements resize appropriately based on the screen size.\n• For example, you might set the score counter’s content size fitter to “preferred size” so that it resizes based on the size of the score text.\n• You might set the health bar’s content size fitter to “min size” so that it doesn’t become too small on smaller screens.\n• Finally, you can use layout groups to ensure that the elements stay organized and maintain their relative positions on different screen sizes.\n• For example, you might use a horizontal layout group to arrange the health bar and ammo counter in a row on larger screens but switch to a vertical layout group on smaller screens to prevent overlapping.\n• Anchor points are an essential tool for creating a responsive UI in Unity.\n• They allow you to specify which edges of a UI element should be anchored to specific positions on the screen.\n• This means that the element will automatically adjust its size and position based on the screen size.\n• To use anchor points, select the UI element you want to adjust and open the Rect Transform component in the Inspector panel.\n• From there, you can specify which edges of the element should be anchored and to which positions on the screen.\n• Content size fitters are another useful tool for creating a responsive UI in Unity.\n• They allow you to automatically adjust the size of a UI element based on the content inside it.\n• For example, if you have a text box that contains a variable amount of text, you can use a content size fitter to ensure that the box expands or contracts to fit the text.\n• To use a content size fitter, select the UI element you want to adjust and open the Content Size Fitter component in the Inspector panel.\n• From there, you can specify whether the element should expand or contract based on the content inside it.\n• Layout groups are a powerful tool for creating a responsive UI in Unity.\n• They allow you to control the layout of multiple UI elements at once, ensuring that they adjust to different screen sizes and resolutions.\n• For example, you can use a layout group to align a group of buttons in a row or column, and then specify how they should adjust when the screen size changes.\n• To use a layout group, select the parent object that contains the UI elements you want to adjust and open the Layout Group component in the Inspector panel.\n• From there, you can specify how the elements should be arranged and how they should adjust to different screen sizes.\n• Adaptive UI is a design approach that focuses on creating interfaces that adapt to the needs and preferences of individual users.\n• The goal is to provide a personalized and customized user experience that enhances engagement and improves user satisfaction.\n• In Unity, adaptive UI is achieved using techniques such as user data collection, user interface customization, and data-driven design.\n• Let’s say you’re designing a puzzle game that has a tutorial system to teach players how to play.\n• You want to ensure that the tutorial system adapts to each player’s skill level and learning style.\n• First, you can use user data collection to gather information about the player’s performance in the game.\n• For example, you might collect data on which puzzles the player struggles with and how long it takes them to solve each puzzle.\n• Next, you can use user interface customization to allow the player to adjust the tutorial system to their preferences.\n• For example, you might allow the player to adjust the speed of the tutorial messages or the level of detail in the instructions.\n• Finally, you can use data-driven design to analyze the user data and make informed decisions about how to improve the tutorial system.\n• For example, you might notice that many players struggle with a particular type of puzzle and adjust the tutorial system to provide more detailed instructions for that puzzle.\n• User data collection is an essential aspect of adaptive UI design.\n• By collecting data on user behavior, preferences, and interactions, you can tailor the UI to the needs and preferences of individual users.\n• For example, you can collect data on which features users use most often and adjust the UI to make those features more prominent.\n• To collect user data, you can use Unity’s analytics tools, which allow you to track user behavior and interactions within your game.\n• From there, you can analyze the data and use it to inform your UI design decisions.\n• User interface customization is another important aspect of adaptive UI design.\n• By allowing users to customize the UI to their preferences, you can provide a personalized and engaging user experience.\n• For example, you can allow users to adjust the color scheme, font size, and layout of the UI to their liking.\n• To implement user interface customization, you can create a settings menu within your game that allows users to adjust various UI elements.\n• From there, you can save the user’s preferences and use them to adjust the UI accordingly.\n• Data-driven design is a design approach that uses data analysis to inform design decisions.\n• By analyzing user data and behavior, you can identify areas where the UI can be improved and make informed design decisions based on that data.\n• To implement the data-driven design, you can use analytics tools to collect user data and analyze it to identify areas for improvement.\n• From there, you can use that data to inform your design decisions and make changes to the UI as needed.\n• Advanced UI layout techniques such as responsive design and adaptive UI are essential for creating compelling and engaging user interfaces in Unity.\n• By using these techniques, you can create a UI that adapts to different screen sizes and resolutions and provides a personalized and customized user experience.\n• Whether you’re designing a mobile game or a puzzle game, these techniques can help you create a UI that enhances engagement and improves user satisfaction.\n• Implementing advanced UI layout techniques in Unity can be complex and time-consuming, especially for larger and more complex UI systems.\n• Therefore, it’s important to plan and design your UI carefully before beginning implementation, and to test your UI thoroughly on different devices and screen sizes to ensure it looks and functions as intended.\n• In addition, Unity provides several tools and resources to help you implement advanced UI layout techniques, such as the Unity UI system, which includes various components and tools for designing and implementing UI elements, as well as tutorials and documentation to guide you through the process.\n• Finally, it’s important to keep in mind that advanced UI layout techniques should always serve the needs and preferences of your users, and should be designed with user experience and usability in mind.\n• By prioritizing user needs and preferences, you can create a UI that enhances engagement, improves user satisfaction, and ultimately leads to a more successful game or application.\n\nReady to elevate your Unity mobile game development experience? Consider hiring a Unity developer from Expert App Devs! Our skilled developers from India offer competitive rates and bring expertise to ensure your project’s success.\n• Cost-Effective Rates: Access top-tier Unity development talent for just $22 hourly or $2500 monthly, making your project budget-friendly.\n• Free Shared Project Manager: Benefit from professional project management without incurring extra costs. Our experienced project managers ensure smooth workflow and timely delivery.\n• Data Security: Your project is our priority. We prioritize confidentiality and ensure your project’s safety through a Non-Disclosure Agreement (NDA).\n• Risk-Free Trial: Test our services with confidence! We offer a 1-week risk-free trial, allowing you to experience our expertise before committing to a long-term partnership.\n\nTake your Unity game development to new heights with Expert App Devs. Contact us today to discuss your project requirements and explore the possibilities of creating immersive, engaging games with our skilled Unity developers.\n\nTransform your vision into reality. Hire Unity developers from Expert App Devs and bring your game to life!"
    },
    {
        "link": "https://stackoverflow.com/questions/79181618/adaptive-screen-layout-in-unity",
        "document": "How can I go about creating this layout for a (2D) screen in Unity?\n• None middle area is 50% height of the screen\n• None top and bottom areas are 25% of the screen each\n• None When I add a game object to the middle container, I want to scale it such that it will scale to either 80% of the container height (if it’s a tall object), or 75% of the container width (if it’s a wide object).\n• None Add four game objects to the bottom container, equally spaced. Each object should scale to 85% height of the bottom container.\n\nCan you add objects to containers like this in Unity? I know everything is a game object with a transform (position), but it’s not clear to me how to have them take up areas of the screen, or which APIs to use when adding objects to have them respect parent containers. I tried things like horizontal and vertical layout groups but those didn’t seem to have any effect."
    },
    {
        "link": "https://docs.unity3d.com/Packages/com.unity.ugui@1.0/manual/UICanvas.html",
        "document": "The Canvas is the area that all UI elements should be inside. The Canvas is a Game Object with a Canvas component on it, and all UI elements must be children of such a Canvas.\n\nCreating a new UI element, such as an Image using the menu GameObject > UI > Image, automatically creates a Canvas, if there isn't already a Canvas in the scene. The UI element is created as a child to this Canvas.\n\nThe Canvas area is shown as a rectangle in the Scene View. This makes it easy to position UI elements without needing to have the Game View visible at all times.\n\nCanvas uses the EventSystem object to help the Messaging System.\n\nUI elements in the Canvas are drawn in the same order they appear in the Hierarchy. The first child is drawn first, the second child next, and so on. If two UI elements overlap, the later one will appear on top of the earlier one.\n\nTo change which element appear on top of other elements, simply reorder the elements in the Hierarchy by dragging them. The order can also be controlled from scripting by using these methods on the Transform component: SetAsFirstSibling, SetAsLastSibling, and SetSiblingIndex.\n\nThe Canvas has a Render Mode setting which can be used to make it render in screen space or world space.\n\nThis render mode places UI elements on the screen rendered on top of the scene. If the screen is resized or changes resolution, the Canvas will automatically change size to match this.\n\nThis is similar to Screen Space - Overlay, but in this render mode the Canvas is placed a given distance in front of a specified Camera. The UI elements are rendered by this camera, which means that the Camera settings affect the appearance of the UI. If the Camera is set to Perspective, the UI elements will be rendered with perspective, and the amount of perspective distortion can be controlled by the Camera Field of View. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well.\n\nIn this render mode, the Canvas will behave as any other object in the scene. The size of the Canvas can be set manually using its Rect Transform, and UI elements will render in front of or behind other objects in the scene based on 3D placement. This is useful for UIs that are meant to be a part of the world. This is also known as a \"diegetic interface\"."
    },
    {
        "link": "https://learn.unity.com/tutorial/creating-a-screen-space-overlay-ui",
        "document": "Unity features several different types of User Interface options that allow users to create UI that precisely fit their application’s needs. There are two main types of UI categories: Screen Space and World Space. In this tutorial, you will learn to create a Screen Space UI."
    },
    {
        "link": "https://docs.unity3d.com/2020.1/Documentation/Manual/UICanvas.html",
        "document": "The Canvas is the area that all UI(User Interface) Allows a user to interact with your application. More info\n\nSee in Glossary elements should be inside. The Canvas is a Game Object with a Canvas component on it, and all UI elements must be children of such a Canvas.\n\nCreating a new UI element, such as an Image using the menu GameObject > UI > Image, automatically creates a Canvas, if there isn’t already a Canvas in the scene. The UI element is created as a child to this Canvas.\n\nThe Canvas area is shown as a rectangle in the SceneA Scene contains the environments and menus of your game. Think of each unique Scene file as a unique level. In each Scene, you place your environments, obstacles, and decorations, essentially designing and building your game in pieces. More info\n\nSee in Glossary View. This makes it easy to position UI elements without needing to have the Game View visible at all times.\n\nCanvas uses the EventSystem object to help the Messaging System.\n\nUI elements in the Canvas are drawn in the same order they appear in the Hierarchy. The first child is drawn first, the second child next, and so on. If two UI elements overlap, the later one will appear on top of the earlier one.\n\nTo change which element appear on top of other elements, simply reorder the elements in the Hierarchy by dragging them. The order can also be controlled from scripting by using these methods on the Transform componentA Transform component determines the Position, Rotation, and Scale of each object in the scene. Every GameObject has a Transform. More info\n\nSee in Glossary: SetAsFirstSibling, SetAsLastSibling, and SetSiblingIndex.\n\nThe Canvas has a Render Mode setting which can be used to make it render in screen space or world space.\n\nThis render mode places UI elements on the screen rendered on top of the scene. If the screen is resized or changes resolution, the Canvas will automatically change size to match this.\n\nThis is similar to Screen Space - Overlay, but in this render mode the Canvas is placed a given distance in front of a specified CameraA component which creates an image of a particular viewpoint in your scene. The output is either drawn to the screen or captured as a texture. More info\n\nSee in Glossary. The UI elements are rendered by this camera, which means that the Camera settings affect the appearance of the UI. If the Camera is set to Perspective, the UI elements will be rendered with perspective, and the amount of perspective distortion can be controlled by the Camera Field of View. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well.\n\nIn this render mode, the Canvas will behave as any other object in the scene. The size of the Canvas can be set manually using its Rect Transform, and UI elements will render in front of or behind other objects in the scene based on 3D placement. This is useful for UIs that are meant to be a part of the world. This is also known as a “diegetic interface”."
    },
    {
        "link": "https://medium.com/coinmonks/introduction-to-ui-elements-in-unity3d-b2c8701e378b",
        "document": "The User Interface (UI) is the medium through which user interacts with the application. A well-defined user interface enables effective interaction between the user and the application. It not only focuses on the aesthetics, but also maximizes accessibility, efficiency, responsiveness of an application.\n\nUnity3D is a powerful game engine that comes with a UI toolkit for developing user interfaces for your games. It makes UI design quite easy where we use the drag and drop mechanism to include the UI elements into the scene. \n\nIn this session, we will learn the basic UI elements in Unity3D. Follow the steps to create a sample Unity3D project in your machine.\n• Open the UnityHub and Click on New button.\n• Select the Unity version (This tutorial is setup with 2019.4.17 version, recommend using 2019+ versions).\n\nLet’s switch the view mode from 3D to 2D before adding UI elements to the scene so as to arrange the UI elements easily in the scene in 2D view. Canvas is a rectangular area in the scene view. It acts as a container which holds all UI elements as its child gameobjects. If there is no canvas in the scene, it is automatically generated when a new UI element is added. To add Canvas to the scene, right click on Hierarchy and select UI → Canvas. Canvas gameobject contains three components — , , . Canvas component has properties that change where and how the Canvas is rendered on the screen. is used to set the scaling and sorting order of UI elements according to various screen sizes. defines where the canvas is rendered on the screen.\n• Screen Space — Overlay\n\nIt places UI elements at the top of the screen of the scene. It scales UI elements in the Canvas to the required size as per the screen size.\n• Screen Space — Camera\n\nIt is similar to the Overlay mode, but user has to specify the camera which renders the UI. The change in camera properties such as area of coverage, shape and size will change the way the UI looks on the screen.\n• World Space\n\nThe UI elements are considered as gameObjects in the scene. It is useful to position the UI elements in the 3D space. Panel acts as a container which defines an area that will stretch to fit its parent dimensions. To add Panel to the scene, select a gameObject then right click on Hierarchy and select UI → Panel. You can change the panel color or modify the image from the Inspector. Use attributes of the Image component to change the panel background image and color. Text is used to display textual data in the scene. There are three types of text components in Unity — UI Text (default), 3D Text Mesh, and Text Mesh Pro. To add Text to the scene, right click on Hierarchy and select UI → Text.\n• Font Style — Defines the text style as normal (default), bold, italic or bold and italic.\n• Font Size — Defines the size of the text.\n• Alignment — Defines the alignment of the text as left, right or center. Let’s have a look at the UI scripting for the text component. Refer the into the script and assign the desired text as the text attribute value as follows,\n• Create a folder named under folder. Right click on folder, select Create → C# Script and name it as .\n• Add the following code to it. using System.Collections;\n\nusing System.Collections.Generic;\n\nusing UnityEngine;\n\nusing UnityEngine.UI;\n\npublic class TextDemo : MonoBehaviour\n\n{\n\n [SerializeField]\n\n Text txtMessage; \n\n // Start is called before the first frame update\n\n void Start()\n\n {\n\n txtMessage.text = \"Hello World\"; \n\n } \n\n // Update is called once per frame\n\n void Update()\n\n {\n\n }\n\n}\n• Interactable — Boolean value, used to enable / disable the input field.\n• Line Type — Defines the line type. Single line, Multiline submit, Multiline newline are the acceptable values.\n• OnValueChanged() — Event invokes when the input field value is changed. Let’s have a look at the UI scripting for the input field component. Refer the into the script and assign the desired text as the text attribute value as follows,\n• Create a folder named under folder. Right click on folder, select Create → C# Script and name it as .\n• Add the following code to it. using UnityEngine;\n\nusing UnityEngine.UI;\n\npublic class InputFieldDemo : MonoBehaviour\n\n{\n\n [SerializeField]\n\n InputField inputField; \n\n // Start is called before the first frame update\n\n void Start()\n\n {\n\n inputField.text = \"Hello World\"; \n\n } \n\n // Update is called once per frame\n\n void Update()\n\n { \n\n } \n\n public void OnValueChanged() {\n\n Debug.Log(\"InputField value changed to \" + inputField.text);\n\n }\n\n}\n• Attach the script into the UI Controller gameObject and provide reference for the input field.\n• Select input field and click on + in event trigger.\n• Refer UI Controller gameObject and the method from the dropdown.\n\nButton is designed to trigger an action when pressed. Every button has an event called that triggers when the user clicks on it. To add Button to the scene, right click on Hierarchy and select UI → Button.\n• Interactable — Boolean value, used to enable / disable the button.\n• Transition — Determines the way the control responds to user actions.\n• Navigation — Properties that determine the sequence of controls.\n• OnClick() —Event invokes when a user clicks on the button.\n• Create a C# script named in Scripts folder and assign it into the UI Controller object.\n• Add the following code to it. using System.Collections;\n\nusing System.Collections.Generic;\n\nusing UnityEngine;\n\npublic class ButtonDemo : MonoBehaviour\n\n{\n\n // Start is called before the first frame update\n\n void Start()\n\n { \n\n } \n\n // Update is called once per frame\n\n void Update()\n\n { \n\n } \n\n public void DisplayMessage() {\n\n Debug.Log(\"Hello World\");\n\n }\n\n}\n• Assign the custom method in the event. Drag UI Controller object into the event in the inspector, select method from the dropdown.\n• Run the application by clicking on the Play button. You will get Hello World message when you click on the button. Image control is used to display an image in the UI. It is useful for adding images, icons, logos, backgrounds to the scene. It is similar to the Raw Image control but offers more options for animating the image. Image control requires its Texture to be a Sprite, while the Raw Image can accept any Texture. To add Image to the scene, right click on Hierarchy and select UI → Image or select UI → Raw Image.\n• Source Image — Texture that represents the image to be displayed.\n• Color — The color to apply on the image.\n• Material — The Material used to render the image.\n• Image Type — The means to display image. It accepts values Simple, Sliced, Tiled and Filled.\n• Preserve Aspect — Boolean value, ensures the image preserves its aspect ratio.\n• Set Native Size — Set the image dimension to the original size of the image. Provide 2D Sprites in the property to add an image to the image gameObject. Organize the project folders before importing assets into the project. Create a folder named Sprites under Assets folder and place all images in it. Follow the steps to convert those images into a 2D sprite.\n• Click on the image in the project window.\n• Change the from to\n\nSlider control allows user to select a numeric value from a range of values. It helps us to reduce the efforts to input numerical values in our applications. To add Slider to the scene, right click on Hierarchy and select UI → Slider.\n• Interactable — Boolean value, used to enable / disable the slider.\n• Direction — Defines the direction of the slider value. It accepts values as Left To Right, Right To Left, Bottom To Top and Top To Bottom.\n• Min Value —Minimum value of the slider.\n• Max Value — Maximum value of the slider.\n• Whole Numbers — If true, the slider takes only integer values.\n• Value — Returns the current numeric value of the slider.\n• OnValueChanged() — Event invokes when the current value of the slider is changed.\n• Create a C# script named in Scripts folder and assign it into the UI Controller object.\n• Add the following code to it. using UnityEngine;\n\nusing UnityEngine.UI;\n\npublic class SliderDemo : MonoBehaviour\n\n{\n\n [SerializeField]\n\n Slider slider; \n\n void Start()\n\n {\n\n Debug.Log(\"Initial slider value: \" + slider.value);\n\n }\n\n void Update()\n\n {\n\n } \n\n public void OnValueChanged() {\n\n Debug.Log(\"Slider value: \" + slider.value);\n\n }\n\n}\n• Assign the custom method ( ) into the event. Drag UI Controller object into the event in the inspector and select method from the dropdown.\n• Drag UI Controller object into the event in the inspector and select function from the dropdown.\n• Run the application by clicking on the Play button. You can see the float values on slider change in your console. Toggle control is a checkbox that allows user to turn an option on or off. It has event that responds when the user changes the current value. Toggle control is useful for,\n• Switching an option on or off (play / pause a game).\n• Choosing one from a set of options (a day of the week). To add Toggle to the scene, right click on Hierarchy and select UI → Toggle.\n• Is On — If true, set toggle as on initially.\n• Transition — The way toggle reacts graphically when its value is changed. It accepts None or Fade as values.\n• Graphic — The image used for the checkmark.\n• Group — The Toggle Group that the toggle belongs to.\n• — Returns the status of the toggle as true or false.\n• — Returns the on / off state of the toggle. Dropdown is a list used to provide a list of options for the user to choose from. It shows the current chosen option as default. You can select a different option by clicking on the dropdown and selecting the option of your choice. To add Dropdown to the scene, right click on Hierarchy and select UI → Dropdown."
    },
    {
        "link": "https://stackoverflow.com/questions/66814254/how-to-make-ui-element-render-behind-object-in-unity",
        "document": "I have a badge animation that has a child of text and then a button that decreases the level that should always appear behind the score badge.\n\nI have tried a lot of things(like sorting layer component but then the badge renders over all UI elements even its child text) but fundamentally I changed the Decrease level and Text to just be Default for the layer option and set the Z position and scale to 0. I have then changed the Score Badge and its child to be layer UI and negative coordinates so they appear in front of the camera but the issue still persists.\n\nHere is the editor hierarchy\n\nThe issue I am having is the rendering looks like this:"
    }
]