[
    {
        "link": "https://mongodb.com/community/forums/t/updating-nested-array-of-objects/173893",
        "document": "Welcome to the community!\n\nI notice you haven’t had a response to this topic yet - were you able to find a solution?\n\n If not, then you can try below.\n\nYour particular use case includes Array within an Array, below is the explanation of the query.\n• db.collection.updateOne() : Updates a single document within the collection based on the filter.\n• The $set operator replaces the value of a field with the specified value.\n• The filtered positional operator identifies the array elements that match the conditions for an update operation. In the example above, it was used in conjunction with the option to update all elements that match the conditions.\n\n For more details, please see Update Nested Arrays in Conjunction with $[]\n\nLet me know if you have any more questions. Happy to help!"
    },
    {
        "link": "https://stackoverflow.com/questions/66307024/updating-a-nested-array-in-using-updateone",
        "document": "I'm having an issue updating a nested Array in a document. Reading around the topic i've come across various method, one that i've tweaked below, however nothing seems to work for me!\n\nI'm trying to update the field which is in a parent Array called and a child array called . I'm referring to the object in the child array using the key of the parent array and key in the child array.\n\nHow do I update the of the respective object?\n\nA document in the collection looks like:\n\nMy Update Query looks like:"
    },
    {
        "link": "https://mongodb.com/docs/drivers/node/current/fundamentals/crud/write-operations/embedded-arrays",
        "document": "For a list of array update operators, see Update Operators in the Server Manual documentation.\n\nIn this guide, you can learn how to use the following array update operators to modify an array embedded within a document:\n\nPositional operators specify which array elements to update. You can use these operators to apply updates to the first element, all elements, or certain elements of an array that match a criteria.\n\nTo specify elements in an array with positional operators, use dot notation. Dot notation is a property access syntax for navigating BSON objects. To learn more, see dot notation .\n\nTo update the first array element of each document that matches your query, use the positional operator . The positional operator references the array matched by the query. You cannot use this operator to reference a nested array. If you want to access a nested array, use the filtered positional operator . Do not use the operator in an call because the driver treats as a field name in the insert document. This example uses the following sample document to show how to update the first matching array element: The following code shows how to increment a value in the first array element that matches a query. The query matches elements in the array where the value of is a type. The update increases the value by in the first matching element. After you run the update operation, the document resembles the following: The example includes the field in the query to match the array that the operator applies an update to. If you omit the field from the query while using the operator in an update, the driver is unable to identify the matching array and raises the following error: MongoServerError: The positional operator did not find the match needed from the query.\n\nTo perform the update on all array elements of each document that matches your query, use the all positional operator . This example uses the following sample documents, which describe phone call logs, to show how to update all matching array elements: The following code shows how to remove the field from all array entries in the document whose is : After you run the update operation, the documents resemble the following:\n\nTo perform an update on all embedded array elements of each document that matches your query, use the filtered positional operator . The filtered positional operator specifies the matching array elements in the update document. To identify which array elements to match, pair this operator with in an object. The placeholder represents an element of the array field. You must select a value for that starts with a lowercase letter and contains only alphanumeric characters. You can use a filtered positional operator in an update operation. An update operation takes a query, an update document, and optionally, an options object as its parameters. The following steps describe how to use a filtered positional operator in an update operation:\n• None Format your update document as follows: This update document contains the following placeholders:\n• None : The array in the document to update\n• None : The identifier for the filtered positional operator\n• None : The field in the array element to update\n• None : The value that describes the update\n• None Add the matching criteria in the object. This object is an array of queries that specify which array elements to include in the update. Set this object in an parameter:\n• None Pass the query, the update document, and options to an update method. The following sample code shows how to call the method with these parameters: This example uses the following sample documents, which describe shopping lists for specific recipes, to show how to update certain matching array elements: Suppose you want to increase the quantity of items you purchase for a recipe on your grocery trip. You want to double the quantity if the item meets all the following criteria:\n• None The item is for the recipe.\n• None The item name does not include the word . To double the value in the matching array entries, use the filtered positional operator as shown in the following code: The update multiplied the value by for items that matched the criteria. The item did not match the criteria in the object and therefore was excluded from the update. The following documents reflect these changes:"
    },
    {
        "link": "https://stackoverflow.com/questions/34431435/mongodb-update-an-object-in-nested-array",
        "document": "Apply the operator together with the positional operator in your update to change the field.\n\nThe positional operator will identify the correct element in the array to update without explicitly specifying the position of the element in the array, thus your final update statement should look like:\n\nTo update multiple elements in an array when more than one element matches the filter, you can use the syntax with the option. The following will update all matching elements in the \"friends\" array:\n\nThe syntax identifies array elements that match the specified filter in the option. The option is added to update all matching documents instead of just the first one."
    },
    {
        "link": "https://mongodb.com/docs/manual/reference/method/db.collection.updateOne",
        "document": "The collection contains the following documents: The following operation updates a single document where with the field: If no matches were found, the operation instead returns: Setting would insert the document if no match was found. See Update with Upsert The can use an aggregation pipeline for the update. The pipeline can consist of the following stages: Using the aggregation pipeline allows for a more expressive update statement, such as expressing conditional updates based on current field values or updating one field using the value of another field(s). The following examples uses the aggregation pipeline to modify a field using the values of the other fields in the document. Create a collection with the following documents: Assume that instead of separate and fields in the first document, you want to gather these into a field, like the second document. The following update operation uses an aggregation pipeline to:\n• None add the new field and set the field.\n• None remove the and fields for all documents in the collection. Make sure that the filter in the update command targets a unique document. The field in the code below is an example of such a filter: The and used in the pipeline refers to the aggregation stages and respectively, and not the update operators and .\n• None creates a new array field whose elements are the current content of the and fields and\n• None sets the field to the value of the aggregation variable . The aggregation variable resolves to the current datetime value and remains the same throughout the pipeline. To access aggregation variables, prefix the variable with double dollar signs and enclose in quotes. The stage removes the and fields. After the command, the collection contains the following documents: Note that after introducing a sort, only the first document encountered in the sort order is modified and the remaining documents are left untouched. The aggregation pipeline allows the update to perform conditional updates based on the current field values as well as use current field values to calculate a separate field value. For example, create a collection with the following documents: The third document is missing the and fields. Using an aggregation pipeline, you can update the document with the calculated grade average and letter grade. The used in the pipeline refers to the aggregation stage , and not the update operators .\n• None calculates a new field based on the average of the field. See for more information on the aggregation operator and for more information on the truncate aggregation operator.\n• None sets the field to the value of the aggregation variable . The aggregation variable resolves to the current datetime value and remains the same throughout the pipeline. To access aggregation variables, prefix the variable with double dollar signs and enclose in quotes. The stage calculates a new field based on the field calculated in the previous stage. See for more information on the aggregation operator. After the command, the collection contains the following documents: The collection contains the following documents: The following operation attempts to update the document with , while : Since the document is based on the and criteria. The operation returns: The collection now contains the following documents: The field was filled in using the criteria, while the operators were used to create the rest of the document. The following operation updates the first document with that are greater than : The collection now contains the following documents: Since no documents matched the filter, and was , inserted the document with a generated and the criteria only. Given a three member replica set, the following operation specifies a of , of : If the primary and at least one secondary acknowledge each write operation within 100 milliseconds, it returns: If the acknowledgment takes longer than the limit, the following exception is thrown: The following table explains the possible values of : The write concern was specified in the application. The write concern originated from a custom defined default value. See . The write concern originated from the replica set's field. The write concern originated from the server in absence of all other write concern specifications. The following example deactivates the lowest rated active user: Collation allows users to specify language-specific rules for string comparison, such as rules for lettercase and accent marks. A collection has the following documents: The following operation includes the collation option: Specify for an Array Update Operations When updating an array field, you can specify that determine which array elements to update. Create a collection with the following documents: To modify all elements that are greater than or equal to in the array, use the filtered positional operator with the option in the method: The operation updates the field of a single document, and after the operation, the collection has the following documents: Update Specific Elements of an Array of Documents Create a collection with the following documents: To modify the value of the field for all elements in the array where the grade is greater than or equal to , use the filtered positional operator with the in the method: The operation updates the array of a single document, and after the operation, the collection has the following documents: Create a sample collection with the following documents: Create the following indexes on the collection: The following update operation explicitly hints to use the index : If you specify an index that does not exist, the operation errors. The update command returns the following: Even though 3 documents match the criteria of the update, only modifies the first document it finds. Therefore, even though the students Richard, Ronan, and Adam all meet the criteria, only Richard will be updated. To see the index used, run on the operation: Starting in MongoDB 7.0, you can use the new system variable to return user roles . The example in this section shows updates to fields in a collection containing medical information. The example reads the current user roles from the system variable and only performs the updates if the user has a specific role. To use a system variable, add to the start of the variable name. Specify the system variable as . The example creates these users: Perform the following steps to create the roles, users, and collection: Create roles named and with the required privileges and resources. Create users named and with the required roles. Log in as as , who has the role, and perform an update: The previous example uses to return documents where the intersection between the string and the user roles from is not empty. has the role, so the update is performed. Next, log in as as , who does not have the role, and attempt to perform the same update: The previous example does not update any documents."
    },
    {
        "link": "https://stackoverflow.com/questions/47225132/update-nested-subdocuments-in-mongodb-with-arrayfilters",
        "document": "So the option with positional filtered does actually work properly with the development release series since MongoDB 3.5.12 and also in the current release candidates for the MongoDB 3.6 series, where this will actually be officially released. The only problem is of course is that the \"drivers\" in use have not actually caught up to this yet.\n\nRe-iterating the same content I have already placed on Updating a Nested Array with MongoDB:\n\nNOTE Somewhat ironically, since this is specified in the \"options\" argument for and like methods, the syntax is generally compatible with all recent release driver versions. However this is not true of the shell, since the way the method is implemented there ( \"ironically for backward compatibility\" ) the argument is not recognized and removed by an internal method that parses the options in order to deliver \"backward compatibility\" with prior MongoDB server versions and a \"legacy\" API call syntax. So if you want to use the command in the shell or other \"shell based\" products ( notably Robo 3T ) you need a latest version from either the development branch or production release as of 3.6 or greater.\n\nAll this means is that the current \"driver\" implementation of actually \"removes\" the necessary arguments with the definition of . For NodeJS this will be addressed in the 3.x release series of the driver, and of course \"mongoose\" will then likely take some time after that release to implement it's own dependencies on the updated driver, which would then no longer \"strip\" such actions.\n\nYou can however still run this on a supported server instance, by dropping back to the basic \"update command\" syntax usage, since this bypassed the implemented driver method:\n\nSince that sends the \"command\" directly through to the server, we see the expected update does in fact take place:\n\nSo right \"now\"[1] the drivers available \"off the shelf\" don't actually implement or it's other implementing counterparts in a way that is compatible with actually passing through the necessary argument. So if you are \"playing with\" a development series or release candiate server, then you really should be prepared to be working with the \"bleeding edge\" and unreleased drivers as well.\n\nBut you can actually do this as demonstrated in any driver, in the correct form where the command being issued is not going to be altered."
    },
    {
        "link": "https://mongodb.com/community/forums/t/nested-arrays-how-to-do-query-and-update/3302",
        "document": "I have a collection with 5000k documents with multiple nested arrays. I want to update the prodId key from old to new value. Some of the documents have only 1 prodId value and other documents have one or more multiple prodId values and few of the documents have no prodId value.\n• If I query like mentioned below–> I get all the prodId values available in that particular document and also the same value available in the other documents including other prodId.\n• If i query like below i get the required prodId value for that value queried from all the documents. --> multiple $unwind command is used: I feel the 2nd method of querying is correct for this type of nested arrays. Correct me if I am wrong and based on this how to update one single prodId in all the documents where that prodId is available? for example how to update prodId value from VU0074 to AC0067 available in all the 5000k documents? How to add a modifier to a nested document with mongodb\n\nWelcome to the community @Mamatha_M ! There are 2-3 errors on your queries. But infact you don’t need the Aggregation Framework for a problem like this. You rather need the updateMany() command. We are typically requesting a data schema with an attribute pattern. First, you didn’t specify if in your “custOrdSubItems” array there could be several sub-documents with the same value for the “prodId” field. So there are actually 2 solutions.\n• If you are sure, really sure, that there are no duplicates as explained above you can use the $(update) operator. If there are duplicates in the array it will just update the first subdocument.\n\n Here is the query:\n• If you have duplicates, or maybe one day you will, the safest method is to use the $[identifier] operator like this. More elegant than an aggregation query, right ? If you have any questions don’t hesitate.\n\nfor example how to update prodId value from VU0074 to AC0067 available in all the 5000k documents? If you are sure , really sure , that there are no duplicates as explained above you can use the $(update) operator. If there are duplicates in the array it will just update the first subdocument. This is about the solution 1. This will not work. The operator cannot be applied for nested arrays. From the documentation: Nested Arrays\n\n The positional $ operator cannot be used for queries which traverse more than one array, such as queries that traverse arrays nested within other arrays, because the replacement for the $ placeholder is a single value\n\nI did miss something in the update solution 2 by @Gaetan_MORLET . The correct way to do it is as follows. Note the usage of the and the array update operators.\n• positional operator works fine with an array - not on nested arrays.\n• all positional operator is to update all elements of a nested array.\n• filtered positional operator is used to update nested array, based upon a specific condition on the array element. The latter two operators must be used with update operations on nested arrays. The is used in conjunction with the update method option.\n\nI will try the 2nd query.Also can i get the find query for both these options? You can just do that to find the documents to change. Can you also send a sample document from your collection @Mamatha_M ? We just have the return of the aggregation queries for the moment. It will allow us to see more clearly.\n\n@Gaetan_MORLET If you see the following first query and output in the original post by @Mamatha_M : Note the output has an array field . This is after the aggregation’s stage: . This clearly tells that the is an array (the is applied only on arrays). So, the structure of the document has nested arrays. The outer array and the inner array - and that is a nested array.\n\nThe find query which i had provided was returning almost 944 docs from that collection.\n\n The update query which provided also updated 944 docs.\n\n I guess it works but still i trying the same approach on the other nested arrays.\n\n Now i would like to understand what it the function of this [] , [e] actually does?\n\n and in arrayFilters u have provided e.prodId --> that point i didnt get it as I am new to mongodb. Can you please help me here?\n\nAssume your input document is as following. There is an outer array within the sub-document; the array’s path is . Then, there is the array , and this is referred as nested array (an array within an array, the inner array). Now, you want to update the nested array 's element, which is a sub-document . The update has the condition that this sub-document’s field value must be “VU0074”, and this is to be updated to a new value. The update operations on nested arrays with condition use the method’s option . The specifies the condition by which the nested array is to be updated - in this case the condition is that the 's value must be equal to “VU0074”. And, what about the condition for the outer array ? There are no conditions there, and it means all the elements of this array are updateable. The update operator updates a field’s value. In this case, we have to update the inner array’s field value based upon the condition (as discussed above). The update field’s path is specified as . The two array update operators, the and the are used here. The operator is used when there is no condition on the array element, in this case the outer array. The portion of the update field path says that. The remaining part of the path, says that the inner array element’s field to be updated. The of the specifies the sub-document’s field for the condition, which is used with the . The can be of any name (it is user defined, it could be for example). The string “AC0067” is the new value to be updated with. Please go thru the documentation (the links I had provided earlier), and browse the details and the examples within."
    },
    {
        "link": "https://stackoverflow.com/questions/65498904/updating-multiple-items-in-nested-array-when-condition-matched",
        "document": "I started learning MongoDB a few days ago and trying to wrap my head around update operator.\n\nI'm writing a command that is supposed to update .\n\nMy intent is to use flag — if it is set to we update the value field, e.g. multiplying it by 10. We ignore items with being .\n\nI expect to get the following items of array updated like this:\n\nBUT it just updates 2 records, instead of 3. The following record is not updated:\n\nIt is the second item with being located in the second document's collection — seems like the query only updates the first matching item of subrecords array in any document. And ignores other records that are subsequent to first.\n\nI tried tweaking my command adding to (positional operator):\n\nBut in this case literally every single item in subrecords array of any document gets affected.\n\nAnyone knows how to write a command which loops through all records and updates each item of the nested array with field being set to ?\n\nAlso, am I right in thinking\n• None that implies that ALL record documents in collection will be affected?\n• None that (query part) literally means that WE ONLY UPDATE subrecords ARRAY WHEN A DOCUMENT HAS AT LEAST ONE ITEM IN subrecords ARRAY WITH FIELD BEING SET TO ?"
    },
    {
        "link": "https://mongodb.com/community/forums/t/updating-nested-array-of-objects/173893",
        "document": "Welcome to the community!\n\nI notice you haven’t had a response to this topic yet - were you able to find a solution?\n\n If not, then you can try below.\n\nYour particular use case includes Array within an Array, below is the explanation of the query.\n• db.collection.updateOne() : Updates a single document within the collection based on the filter.\n• The $set operator replaces the value of a field with the specified value.\n• The filtered positional operator identifies the array elements that match the conditions for an update operation. In the example above, it was used in conjunction with the option to update all elements that match the conditions.\n\n For more details, please see Update Nested Arrays in Conjunction with $[]\n\nLet me know if you have any more questions. Happy to help!"
    },
    {
        "link": "https://geeksforgeeks.org/mongodb-updatemany-method-db-collection-updatemany",
        "document": "MongoDB updateMany method is a powerful feature used to update multiple documents in a collection that match a specified filter. This method allows developers to efficiently perform bulk update operations, reducing network overhead and improving performance\n\nIn this comprehensive guide, we will explore the method in detail, including its syntax, behavior, options, and examples.\n\nWhat is the\n\nThe MongoDB updateMany is used to update multiple documents in a collection that match a specified filter. It applies the specified modifications to every matching document in a single operation, making it a highly efficient tool for bulk updates. In this method, if the value of upsert is set to true for the sharded collection, then we must include the full shard key in the filter/selection criteria.\n• None Can be used inside multi-document transactions.\n• None : A query that matches the documents to update.\n• None : The modifications to apply. This can include update operators like ,\n• None , creates a new document if no documents match the filter. The default is\n• None (optional): Specifies the collation to use for the operation.\n• None (optional): An array of filter documents that determines which array elements to modify for an update operation on an array field.\n• None (optional): The index to use for the query\n• Bulk Updates: updates all documents that match the specified filter criteria. This method performs a bulk update operation, applying the specified update to each document that meets the filter conditions\n• Efficient and Reliable : It provides the ability to update multiple documents in a single command, which can significantly improve performance\n• Flexible Options : The operation is atomic for each document, ensuring data MongoDB write concerns collation , allowing for customized and reliable updates that adhere to locale specific\n\nTo understand MongoDB we need a collection called students on which we will perform various operations and queries.\n\nLet’s Update the age of the student named “aaksh” to 20 using MongoDB run the following query:\n\nEven though is designed for bulk updates, it can also update a single document if the filter matches only one document. In this case, only the document where is “aaksh” will be updated.\n\nTo set the “eligible” field to “true” for all students whose age is 18, use the following query:\n\nThe method applies the operator to all documents that match the filter . This ensures that every student with an age of 18 will now have an field added (or updated) with the value . This is an efficient way to update multiple documents in a single operation.\n\nLet’s Update all documents matching the condition to set “eligible” to false and create a new document if no match is found, use the following query:\n\nThe option ensures that if no documents match the filter , a new document will be created with the specified values. This query updates all existing documents where is 18, setting the field to , and if no such documents exist, it creates a new document with the field set to 18 and set to . This combines update and insert operations efficiently.\n\nTo update the age of all students aged 18 to 20 with a write concern that requires majority acknowledgment, use the following query:\n\nThe option specifies the level of acknowledgment required for the write operation. In this case, ensures that the update is acknowledged by the majority of replica set members, providing reliability. The option sets a timeout of 5000 milliseconds to prevent indefinite waiting for acknowledgment\n\nTo update the age of all students aged 18 to 20 with a write concern and collation settings for locale-specific rules, use the following query:\n\nThis query updates all documents where is 18, changing it to 20, while adhering to the specified collation and acknowledgment rules. This ensures that updates are handled according to locale-specific settings.\n• Atomicity : Ensures that each document is updated atomically.\n• Index Optimization option ensures queries are optimized with the appropriate index.\n\nThe method in MongoDB is a highly efficient tool for performing bulk updates on multiple documents. It offers flexibility with options like , , and , allowing developers to customize updates based on their needs. By mastering the method, you can handle large-scale updates while ensuring data integrity and performance. Whether you are updating a few documents or applying changes across an entire dataset, is a critical feature for managing MongoDB collections effectively.\n\nWhat is in MongoDB?\n\nWhat is the difference between , , and ?\n\nHow to update data in a collection in MongoDB?"
    }
]