[
    {
        "link": "https://openvpn.net/as-docs/first-time-setup.html",
        "document": "A walk-through of the setup and configuration of Access Server and the Admin Web UI.\n\nThe topics in this section walk you through your first use and configuration of Access Server's Admin Web UI. When you've installed the software on your Linux server, you can configure it using the web-based GUI, the Admin Web UI.\n\nUse the sections here to find the URL, sign in with your administrative user, and configure your VPN server."
    },
    {
        "link": "https://openvpn.net/community-resources/how-to",
        "document": "OpenVPN is a full-featured SSL VPN which implements OSI layer 2 or 3 secure network extension using the industry standard SSL/TLS protocol, supports flexible client authentication methods based on certificates, smart cards, and/or username/password credentials, and allows user or group-specific access control policies using firewall rules applied to the VPN virtual interface. OpenVPN is not a web application proxy and does not operate through a web browser.\n\nOpenVPN 2.0 expands on the capabilities of OpenVPN 1.x by offering a scalable client/server mode, allowing multiple clients to connect to a single OpenVPN server process over a single TCP or UDP port. OpenVPN 2.3 includes a large number of improvements, including full IPv6 support and PolarSSL support.\n\nThis document provides step-by-step instructions for configuring an OpenVPN 2.x client/server VPN, including:\n\nThe impatient may wish to jump straight to the sample configuration files:\n\nThis HOWTO assumes that readers possess a prior understanding of basic networking concepts such as IP addresses, DNS names, netmasks, subnets, IP routing, routers, network interfaces, LANs, gateways, and firewall rules.\n\nPlease take a look at the OpenVPN books page.\n\nThe original OpenVPN 1.x HOWTO is still available, and remains relevant for point-to-point or static-key configurations.\n\nFor additional documentation, see the articles page and the OpenVPN wiki.\n\nWhile this HOWTO will guide you in setting up a scalable client/server VPN using an X509 PKI (public key infrastruction using certificates and private keys), this might be overkill if you are only looking for a simple VPN setup with a server that can handle a single client.\n\nIf you would like to get a VPN running quickly with minimal configuration, you might check out the Static Key Mini-HOWTO.\n\nOpenVPN source code and Windows installers can be downloaded here. Recent releases (2.2 and later) are also available as Debian and RPM packages; see the OpenVPN wiki for details.\n\nFor security, it's a good idea to check the file release signature after downloading.\n\nThe OpenVPN executable should be installed on both server and client machines, since the single executable provides both client and server functions.\n\nIf you are using a Linux distribution which supports RPM packages (SuSE, Fedora, Redhat, etc.), it's best to install using this mechanism. The easiest method is to find an existing binary RPM file for your distribution. You can also build your own binary RPM file:\n\nOnce you have the .rpm file, you can install it with the usual\n\nor upgrade an existing installation with\n\nInstalling OpenVPN from a binary RPM package has these dependencies:\n\nFurthermore, if you are building your own binary RPM package, there are several additional dependencies:\n\nSee the openvpn.spec file for additional notes on building an RPM package for Red Hat Linux 9 or building with reduced dependencies.\n\nIf you are using Debian, Gentoo, or a non-RPM-based Linux distribution, use your distro-specific packaging mechanism such as apt-get on Debian or emerge on Gentoo.\n\nIt is also possible to install OpenVPN on Linux using the universal ./configure method. First expand the .tar.gz file:\n\nThen cd to the top-level directory and type:\n\nOpenVPN for Windows can be installed from the self-installing exe file on the OpenVPN download page. Remember that OpenVPN will only run on Windows XP or later. Also note that OpenVPN must be installed and run by a user who has administrative privileges (this restriction is imposed by Windows, not OpenVPN). The restriction can be sidestepped by running OpenVPN in the background as a service, in which case even non-admin users will be able to access the VPN, once it is installed. More discussion on OpenVPN + Windows privilege issues.\n\nOfficial OpenVPN Windows installers include OpenVPN-GUI, which allows managing OpenVPN connections from a system tray applet. Other GUI applications are also available.\n\nAfter you've run the Windows installer, OpenVPN is ready for use and will associate itself with files having the .ovpn extension. To run OpenVPN, you can:\n\nOnce running in a command prompt window, OpenVPN can be stopped by the F4 key.\n\nAngelo Laub and Dirk Theisen have developed an OpenVPN GUI for OS X.\n\nSome notes are available in the INSTALL file for specific OSes. In general, the\n\nmethod can be used, or you can search for an OpenVPN port or package which is specific to your OS/distribution.\n\nSee FAQ for an overview of Routing vs. Ethernet Bridging. See also the OpenVPN Ethernet Bridging page for more notes and details on bridging.\n\nOverall, routing is probably a better choice for most people, as it is more efficient and easier to set up (as far as the OpenVPN configuration itself) than bridging. Routing also provides a greater ability to selectively control access rights on a client-specific basis.\n\nI would recommend using routing unless you need a specific feature which requires bridging, such as:\n\nSetting up a VPN often entails linking together private subnets from different locations.\n\nThe Internet Assigned Numbers Authority (IANA) has reserved the following three blocks of the IP address space for private internets (codified in RFC 1918):\n\nWhile addresses from these netblocks should normally be used in VPN configurations, it's important to select addresses that minimize the probability of IP address or subnet conflicts. The types of conflicts that need to be avoided are:\n\nFor example, suppose you use the popular 192.168.0.0/24 subnet as your private LAN subnet. Now you are trying to connect to the VPN from an internet cafe which is using the same subnet for its WiFi LAN. You will have a routing conflict because your machine won't know if 192.168.0.1 refers to the local WiFi gateway or to the same address on the VPN.\n\nAs another example, suppose you want to link together multiple sites by VPN, but each site is using 192.168.0.0/24 as its LAN subnet. This won't work without adding a complexifying layer of NAT translation, because the VPN won't know how to route packets between multiple sites if those sites don't use a subnet which uniquely identifies them.\n\nThe best solution is to avoid using 10.0.0.0/24 or 192.168.0.0/24 as private LAN network addresses. Instead, use something that has a lower probability of being used in a WiFi cafe, airport, or hotel where you might expect to connect from remotely. The best candidates are subnets in the middle of the vast 10.0.0.0/8 netblock (for example 10.66.77.0/24).\n\nAnd to avoid cross-site IP numbering conflicts, always use unique numbering for your LAN subnets.\n\nThe first step in building an OpenVPN 2.x configuration is to establish a PKI (public key infrastructure). The PKI consists of:\n\nOpenVPN supports bidirectional authentication based on certificates, meaning that the client must authenticate the server certificate and the server must authenticate the client certificate before mutual trust is established.\n\nBoth server and client will authenticate the other by first verifying that the presented certificate was signed by the master certificate authority (CA), and then by testing information in the now-authenticated certificate header, such as the certificate common name or certificate type (client or server).\n\nThis security model has a number of desirable features from the VPN perspective:\n\nNote that the server and client clocks need to be roughly in sync or certificates might not work properly.\n\nIn this section we will generate a master CA certificate/key, a server certificate/key, and certificates/keys for 3 separate clients.\n\nFor PKI management, we will use easy-rsa 2, a set of scripts which is bundled with OpenVPN 2.2.x and earlier. If you're using OpenVPN 2.3.x, you need to download easy-rsa 2 separately from here.\n\nFor PKI management, we will use easy-rsa 2, a set of scripts which is bundled with OpenVPN 2.2.x and earlier. If you're using OpenVPN 2.3.x, you may need to download easy-rsa 2 separately from the easy-rsa-old project page. On *NIX platforms you should look into using easy-rsa 3 instead; refer to its own documentation for details.\n\nIf you are using Linux, BSD, or a unix-like OS, open a shell and cd to the easy-rsa subdirectory. If you installed OpenVPN from an RPM or DEB file, the easy-rsa directory can usually be found in /usr/share/doc/packages/openvpn or /usr/share/doc/openvpn(it's best to copy this directory to another location such as /etc/openvpn, before any edits, so that future OpenVPN package upgrades won't overwrite your modifications). If you installed from a .tar.gz file, the easy-rsa directory will be in the top level directory of the expanded source tree.\n\nIf you are using Windows, open up a Command Prompt window and cd to \\Program Files\\OpenVPN\\easy-rsa. Run the following batch file to copy configuration files into place (this will overwrite any preexisting vars.bat and openssl.cnf files):\n\nNow edit the vars file (called vars.bat on Windows) and set the KEY_COUNTRY, KEY_PROVINCE, KEY_CITY, KEY_ORG, and KEY_EMAIL parameters. Don't leave any of these parameters blank.\n\nNext, initialize the PKI. On Linux/BSD/Unix:\n\nThe final command (build-ca) will build the certificate authority (CA) certificate and key by invoking the interactive opensslcommand:\n\nNote that in the above sequence, most queried parameters were defaulted to the values set in the varsor vars.bat files. The only parameter which must be explicitly entered is the Common Name. In the example above, I used \"OpenVPN-CA\".\n\nNext, we will generate a certificate and private key for the server. On Linux/BSD/Unix:\n\nAs in the previous step, most parameters can be defaulted. When the Common Name is queried, enter \"server\". Two other queries require positive responses, \"Sign the certificate? [y/n]\" and \"1 out of 1 certificate requests certified, commit? [y/n]\".\n\nGenerating client certificates is very similar to the previous step. On Linux/BSD/Unix:\n\nIf you would like to password-protect your client keys, substitute the build-key-pass script.\n\nRemember that for each client, make sure to type the appropriate Common Name when prompted, i.e. \"client1\", \"client2\", or \"client3\". Always use a unique common name for each client.\n\nDiffie Hellman parameters must be generated for the OpenVPN server. On Linux/BSD/Unix:\n\nNow we will find our newly-generated keys and certificates in the keys subdirectory. Here is an explanation of the relevant files:\n\nThe final step in the key generation process is to copy all files to the machines which need them, taking care to copy secret files over a secure channel.\n\nNow wait, you may say. Shouldn't it be possible to set up the PKI without a pre-existing secure channel?\n\nThe answer is ostensibly yes. In the example above, for the sake of brevity, we generated all private keys in the same place. With a bit more effort, we could have done this differently. For example, instead of generating the client certificate and keys on the server, we could have had the client generate its own private key locally, and then submit a Certificate Signing Request (CSR) to the key-signing machine. In turn, the key-signing machine could have processed the CSR and returned a signed certificate to the client. This could have been done without ever requiring that a secret .key file leave the hard drive of the machine on which it was generated.\n\nIt's best to use the OpenVPN sample configuration files as a starting point for your own configuration. These files can also be found in\n\nNote that on Linux, BSD, or unix-like OSes, the sample configuration files are named server.conf and client.conf. On Windows they are named server.ovpn and client.ovpn.\n\nThe sample server configuration file is an ideal starting point for an OpenVPN server configuration. It will create a VPN using a virtual TUN network interface (for routing), will listen for client connections on UDP port 1194 (OpenVPN's official port number), and distribute virtual addresses to connecting clients from the 10.8.0.0/24 subnet.\n\nBefore you use the sample configuration file, you should first edit the ca, cert, key, and dh parameters to point to the files you generated in the PKI section above.\n\nAt this point, the server configuration file is usable, however you still might want to customize it further:\n\nIf you want to run multiple OpenVPN instances on the same machine, each using a different configuration file, it is possible if you:\n\nThe sample client configuration file (client.conf on Linux/BSD/Unix or client.ovpn on Windows) mirrors the default directives set in the sample server configuration file.\n\nFirst, make sure the OpenVPN server will be accessible from the internet. That means:\n\nNext, make sure that the TUN/TAP interface is not firewalled.\n\nTo simplify troubleshooting, it's best to initially start the OpenVPN server from the command line (or right-click on the .ovpn file on Windows), rather than start it as a daemon or service:\n\nA normal server startup should look like this (output will vary across platforms):\n\nAs in the server configuration, it's best to initially start the OpenVPN server from the command line (or on Windows, by right-clicking on the client.ovpn file), rather than start it as a daemon or service:\n\nA normal client startup on Windows will look similar to the server output above, and should end with the Initialization Sequence Completed message.\n\nNow, try a ping across the VPN from the client. If you are using routing (i.e. dev tun in the server config file), try:\n\nIf you are using bridging (i.e. dev tap in the server config file), try to ping the IP address of a machine on the server's ethernet subnet.\n\nIf the ping succeeds, congratulations! You now have a functioning VPN.\n\nIf the ping failed or the OpenVPN client initialization failed to complete, here is a checklist of common symptoms and their solutions:\n• You get the error message: TLS Error: TLS key negotiation failed to occur within 60 seconds (check your network connectivity). This error indicates that the client was unable to establish a network connection with the server.Solutions:\n• Make sure the client is using the correct hostname/IP address and port number which will allow it to reach the OpenVPN server.\n• If the OpenVPN server machine is a single-NIC box inside a protected LAN, make sure you are using a correct port forward rule on the server's gateway firewall. For example, suppose your OpenVPN box is at 192.168.4.4 inside the firewall, listening for client connections on UDP port 1194. The NAT gateway servicing the 192.168.4.x subnet should have a port forward rule that says forward UDP port 1194 from my public IP address to 192.168.4.4.\n• Open up the server's firewall to allow incoming connections to UDP port 1194 (or whatever TCP/UDP port you have configured in the server config file).\n• You get the error message: Initialization Sequence Completed with errors-- This error can occur on Windows if (a) You don't have the DHCP client service running, or (b) You are using certain third-party personal firewalls on XP SP2.Solution: Start the DHCP client server and make sure that you are using a personal firewall which is known to work correctly on XP SP2.\n• You get the Initialization Sequence Completedmessage but the ping test fails -- This usually indicates that a firewall on either server or client is blocking VPN network traffic by filtering on the TUN/TAP interface.Solution: Disable the client firewall (if one exists) from filtering the TUN/TAP interface on the client. For example on Windows XP SP2, you can do this by going to Windows Security Center -> Windows Firewall -> Advanced and unchecking the box which corresponds to the TAP-Windows adapter (disabling the client firewall from filtering the TUN/TAP adapter is generally reasonable from a security perspective, as you are essentially telling the firewall not to block authenticated VPN traffic). Also make sure that the TUN/TAP interface on the server is not being filtered by a firewall (having said that, note that selective firewalling of the TUN/TAP interface on the server side can confer certain security benefits. See the access policies section below).\n• The connection stalls on startup when using a proto udpconfiguration, the server log file shows this line:\n\n however the client log does not show an equivalent line. Solution: You have a one-way connection from client to server. The server to client direction is blocked by a firewall, usually on the client side. The firewall can either be (a) a personal software firewall running on the client, or (b) the NAT router gateway for the client. Modify the firewall to allow returning UDP packets from the server to reach the client.\n\nSee the FAQ for additional troubleshooting information.\n\nThe lack of standards in this area means that most OSes have a different way of configuring daemons/services for autostart on boot. The best way to have this functionality configured by default is to install OpenVPN as a package, such as via RPM on Linux or using the Windows installer.\n\nIf you install OpenVPN via an RPM or DEB package on Linux, the installer will set up an initscript. When executed, the initscript will scan for .conf configuration files in /etc/openvpn, and if found, will start up a separate OpenVPN daemon for each file.\n\nThe Windows installer will set up a Service Wrapper, but leave it turned off by default. To activate it, go to Control Panel / Administrative Tools / Services, select the OpenVPN service, right-click on properties, and set the Startup Type to Automatic. This will configure the service for automatic start on the next reboot.\n\nWhen started, the OpenVPN Service Wrapper will scan the \\Program Files\\OpenVPN\\config folder for .ovpn configuration files, starting a separate OpenVPN process on each file.\n\nUse the writepid directive to write the OpenVPN daemon's PID to a file, so that you know where to send the signal (if you are starting openvpn with an initscript, the script may already be passing a --writepid directive on the openvpn command line).\n\nOn Windows, you can start OpenVPN by right clicking on an OpenVPN configuration file (.ovpn file) and selecting \"Start OpenVPN on this config file\".\n\nOnce running in this fashion, several keyboard commands are available:\n\nWhen OpenVPN is started as a service on Windows, the only way to control it is:\n• Via the service control manager (Control Panel / Administrative Tools / Services) which gives start/stop control.\n• Via the management interface (see below).\n\nWhile most configuration changes require you to restart the server, there are two directives in particular which refer to files which can be dynamically updated on-the-fly, and which will take immediate effect on the server without needing to restart the server process.\n\nclient-config-dir -- This directive sets a client configuration directory, which the OpenVPN server will scan on every incoming connection, searching for a client-specific configuration file (see the the manual page for more information). Files in this directory can be updated on-the-fly, without restarting the server. Note that changes in this directory will only take effect for new connections, not existing connections. If you would like a client-specific configuration file change to take immediate effect on a currently connected client (or one which has disconnected, but where the server has not timed-out its instance object), kill the client instance object by using the management interface (described below). This will cause the client to reconnect and use the new client-config-dir file.\n\ncrl-verify -- This directive names a Certificate Revocation List file, described below in the Revoking Certificates section. The CRL file can be modified on the fly, and changes will take effect immediately for new connections, or existing connections which are renegotiating their SSL/TLS channel (occurs once per hour by default). If you would like to kill a currently connected client whose certificate has just been added to the CRL, use the management interface (described below).\n\nwhich will output a list of current client connections to the file openvpn-status.log once per minute.\n\nThe OpenVPN management interface allows a great deal of control over a running OpenVPN process. You can use the management interface directly, by telneting to the management interface port, or indirectly by using an OpenVPN GUI which itself connects to the management interface.\n\nTo enable the management interface on either an OpenVPN server or client, add this to the configuration file:\n\nThis tells OpenVPN to listen on TCP port 7505 for management interface clients (port 7505 is an arbitrary choice -- you can use any free port).\n\nOnce OpenVPN is running, you can connect to the management interface using a telnet client. For example:\n\nFor more information, see the OpenVPN Management Interface Documentation.\n\nExpanding the scope of the VPN to include additional machines on either the client or server subnet.\n\nIncluding multiple machines on the server side when using a routed VPN (dev tun)\n\nOnce the VPN is operational in a point-to-point capacity between client and server, it may be desirable to expand the scope of the VPN so that clients can reach multiple machines on the server network, rather than only the server machine itself.\n\nFor the purpose of this example, we will assume that the server-side LAN uses a subnet of 10.66.0.0/24and the VPN IP address pool uses 10.8.0.0/24 as cited in the server directive in the OpenVPN server configuration file.\n\nFirst, you must advertise the 10.66.0.0/24 subnet to VPN clients as being accessible through the VPN. This can easily be done with the following server-side config file directive:\n\nNext, you must set up a route on the server-side LAN gateway to route the VPN client subnet (10.8.0.0/24) to the OpenVPN server (this is only necessary if the OpenVPN server and the LAN gateway are different machines).\n\nMake sure that you've enabled IP and TUN/TAP forwarding on the OpenVPN server machine.\n\nIncluding multiple machines on the server side when using a bridged VPN (dev tap)\n\nOne of the benefits of using ethernet bridging is that you get this for free without needing any additional configuration.\n\nIncluding multiple machines on the client side when using a routed VPN (dev tun)\n\nIn a typical road-warrior or remote access scenario, the client machine connects to the VPN as a single machine. But suppose the client machine is a gateway for a local LAN (such as a home office), and you would like each machine on the client LAN to be able to route through the VPN.\n\nFor this example, we will assume that the client LAN is using the 192.168.4.0/24 subnet, and that the VPN client is using a certificate with a common name of client2. Our goal is to set up the VPN so that any machine on the client LAN can communicate with any machine on the server LAN through the VPN.\n\nBefore setup, there are some basic prerequisites which must be followed:\n• The client LAN subnet (192.168.4.0/24 in our example) must not be exported to the VPN by the server or any other client sites which are using the same subnet. Every subnet which is joined to the VPN via routing must be unique.\n• The client must have a unique Common Name in its certificate (\"client2\" in our example), and the duplicate-cn flag must not be used in the OpenVPN server configuration file.\n\nFirst, make sure that IP and TUN/TAP forwarding is enabled on the client machine.\n\nNext, we will deal with the necessary configuration changes on the server side. If the server configuration file does not currently reference a client configuration directory, add one now:\n\nIn the above directive, ccd should be the name of a directory which has been pre-created in the default directory where the OpenVPN server daemon runs. On Linux this tends to be /etc/openvpn and on Windows it is usually \\Program Files\\OpenVPN\\config. When a new client connects to the OpenVPN server, the daemon will check this directory for a file which matches the common name of the connecting client. If a matching file is found, it will be read and processed for additional configuration file directives to be applied to the named client.\n\nThe next step is to create a file called client2 in the ccd directory. This file should contain the line:\n\nThis will tell the OpenVPN server that the 192.168.4.0/24 subnet should be routed to client2.\n\nNext, add the following line to the main server config file (not the ccd/client2 file):\n\nWhy the redundant route and iroute statements, you might ask? The reason is that route controls the routing from the kernel to the OpenVPN server (via the TUN interface) while iroute controls the routing from the OpenVPN server to the remote clients. Both are necessary.\n\nNext, ask yourself if you would like to allow network traffic between client2's subnet (192.168.4.0/24) and other clients of the OpenVPN server. If so, add the following to the server config file.\n\nThis will cause the OpenVPN server to advertise client2's subnet to other connecting clients.\n\nThe last step, and one that is often forgotten, is to add a route to the server's LAN gateway which directs 192.168.4.0/24 to the OpenVPN server box (you won't need this if the OpenVPN server box is the gateway for the server LAN). Suppose you were missing this step and you tried to ping a machine (not the OpenVPN server itself) on the server LAN from 192.168.4.8? The outgoing ping would probably reach the machine, but then it wouldn't know how to route the ping reply, because it would have no idea how to reach 192.168.4.0/24. The rule of thumb to use is that when routing entire LANs through the VPN (when the VPN server is not the same machine as the LAN gateway), make sure that the gateway for the LAN routes all VPN subnets to the VPN server machine.\n\nSimilarly, if the client machine running OpenVPN is not also the gateway for the client LAN, then the gateway for the client LAN must have a route which directs all subnets which should be reachable through the VPN to the OpenVPN client machine.\n\nIncluding multiple machines on the client side when using a bridged VPN (dev tap)\n\nThis requires a more complex setup (maybe not more complex in practice, but more complicated to explain in detail):\n• You must bridge the client TAP interface with the LAN-connected NIC on the client.\n• You must manually set the IP/netmask of the TAP interface on the client.\n• You must configure client-side machines to use an IP/netmask that is inside of the bridged subnet, possibly by querying a DHCP server on the OpenVPN server side of the VPN.\n\nThe OpenVPN server can push DHCP options such as DNS and WINS server addresses to clients (some caveats to be aware of). Windows clients can accept pushed DHCP options natively, while non-Windows clients can accept them by using a client-side up script which parses the foreign_option_nenvironmental variable list. See the man page for non-Windows foreign_option_n documentation and script examples.\n\nFor example, suppose you would like connecting clients to use an internal DNS server at 10.66.0.4 or 10.66.0.5 and a WINS server at 10.66.0.8. Add this to the OpenVPN server configuration:\n\nTo test this feature on Windows, run the following from a command prompt window after the machine has connected to an OpenVPN server:\n\nThe entry for the TAP-Windows adapter should show the DHCP options which were pushed by the server.\n\nSuppose we are setting up a company VPN, and we would like to establish separate access policies for 3 different classes of users:\n• System administrators -- full access to all machines on the network\n\nThe basic approach we will take is (a) segregate each user class into its own virtual IP address range, and (b) control access to machines by setting up firewall rules which key off the client's virtual IP address.\n\nIn our example, suppose that we have a variable number of employees, but only one system administrator, and two contractors. Our IP allocation approach will be to put all employees into an IP address pool, and then allocate fixed IP addresses for the system administrator and contractors.\n\nNote that one of the prerequisites of this example is that you have a software firewall running on the OpenVPN server machine which gives you the ability to define specific firewall rules. For our example, we will assume the firewall is Linux iptables.\n\nFirst, let's create a virtual IP address map according to user class:\n\nNext, let's translate this map into an OpenVPN server configuration. First of all, make sure you've followed the steps above for making the 10.66.4.0/24 subnet available to all clients (while we will configure routing to allow client access to the entire 10.66.4.0/24 subnet, we will then impose access restrictions using firewall rules to implement the above policy table).\n\nFirst, define a static unit number for our tun interface, so that we will be able to refer to it later in our firewall rules:\n\nIn the server configuration file, define the Employee IP address pool:\n\nAdd routes for the System Administrator and Contractor IP ranges:\n\nBecause we will be assigning fixed IP addresses for specific System Administrators and Contractors, we will use a client configuration directory:\n\nNow place special configuration files in the ccd subdirectory to define the fixed IP address for each non-Employee VPN client.\n\nEach pair of ifconfig-push addresses represent the virtual client and server IP endpoints. They must be taken from successive /30 subnets in order to be compatible with Windows clients and the TAP-Windows driver. Specifically, the last octet in the IP address of each endpoint pair must be taken from this set:\n\nThis completes the OpenVPN configuration. The final step is to add firewall rules to finalize the access policy. For this example, we will use firewall rules in the Linux iptables syntax:\n\nOpenVPN 2.0 and later include a feature that allows the OpenVPN server to securely obtain a username and password from a connecting client, and to use that information as a basis for authenticating the client.\n\nTo use this authentication method, first add the auth-user-pass directive to the client configuration. It will direct the OpenVPN client to query the user for a username/password, passing it on to the server over the secure TLS channel.\n\nNext, configure the server to use an authentication plugin, which may be a script, shared object, or DLL. The OpenVPN server will call the plugin every time a VPN client tries to connect, passing it the username/password entered on the client. The authentication plugin can control whether or not the OpenVPN server allows the client to connect by returning a failure (1) or success (0) value.\n\nScript plugins can be used by adding the auth-user-pass-verify directive to the server-side configuration file. For example:\n\nwill use the auth-pam.pl perl script to authenticate the username/password of connecting clients. See the description of auth-user-pass-verify in the manual page for more information.\n\nThe auth-pam.pl script is included in the OpenVPN source file distribution in the sample-scriptssubdirectory. It will authenticate users on a Linux server using a PAM authentication module, which could in turn implement shadow password, RADIUS, or LDAP authentication. auth-pam.pl is primarily intended for demonstration purposes. For real-world PAM authentication, use the openvpn-auth-pamshared object plugin described below.\n\nShared object or DLL plugins are usually compiled C modules which are loaded by the OpenVPN server at run time. For example if you are using an RPM-based OpenVPN package on Linux, the openvpn-auth-pam plugin should be already built. To use it, add this to the server-side config file:\n\nThis will tell the OpenVPN server to validate the username/password entered by clients using the loginPAM module.\n\nFor real-world production use, it's better to use the openvpn-auth-pam plugin, because it has several advantages over the auth-pam.pl script:\n• The shared object openvpn-auth-pam plugin uses a split-privilege execution model for better security. This means that the OpenVPN server can run with reduced privileges by using the directives user nobody, group nobody, and chroot, and will still be able to authenticate against the root-readable-only shadow password file.\n• OpenVPN can pass the username/password to a plugin via virtual memory, rather than via a file or the environment, which is better for local security on the server machine.\n\nIf you would like more information on developing your own plugins for use with OpenVPN, see the README files in the plugin subdirectory of the OpenVPN source distribution.\n\nTo build the openvpn-auth-pam plugin on Linux, cd to the plugin/auth-pam directory in the OpenVPN source distribution and run make.\n\nUsing username/password authentication as the only form of client authentication\n\nBy default, using auth-user-pass-verify or a username/password-checking plugin on the server will enable dual authentication, requiring that both client-certificate and username/password authentication succeed in order for the client to be authenticated.\n\nWhile it is discouraged from a security perspective, it is also possible to disable the use of client certificates, and force username/password authentication only. On the server:\n\nSuch configurations should usually also set:\n\nwhich will tell the server to use the username for indexing purposes as it would use the Common Name of a client which was authenticating via a client certificate.\n\nNote that client-cert-not-required will not obviate the need for a server certificate, so a client connecting to a server which uses client-cert-not-required may remove the cert and key directives from the client configuration file, but not the ca directive, because it is necessary for the client to verify the server certificate.\n\nHow to add dual-factor authentication to an OpenVPN configuration using client-side smart cards\n• How to modify an OpenVPN configuration to make use of cryptographic tokens\n\nDual-factor authentication is a method of authentication that combines two elements: something you have and something you know.\n\nSomething you have should be a device that cannot be duplicated; such a device can be a cryptographic token that contains a private secret key. This private key is generated inside the device and never leaves it. If a user possessing this token attempts to access protected services on a remote network, the authorization process which grants or denies network access can establish, with a high degree of certainty, that the user seeking access is in physical possession of a known, certified token.\n\nSomething you know can be a password presented to the cryptographic device. Without presenting the proper password you cannot access the private secret key. Another feature of cryptographic devices is to prohibit the use of the private secret key if the wrong password had been presented more than an allowed number of times. This behavior ensures that if a user lost his device, it would be infeasible for another person to use it.\n\nCryptographic devices are commonly called \"smart cards\" or \"tokens\", and are used in conjunction with a PKI (Public Key Infrastructure). The VPN server can examine a X.509 certificate and verify that the user holds the corresponding private secret key. Since the device cannot be duplicated and requires a valid password, the server is able to authenticate the user with a high degree of confidence.\n\nDual-factor authentication is much stronger than password-based authentication, because in the worst-case scenario, only one person at a time can use the cryptographic token. Passwords can be guessed and can be exposed to other users, so in the worst-case scenario an infinite number of people could attempt to gain unauthorized access when resources are protected using password-only authentication.\n\nIf you store the secret private key in a file, the key is usually encrypted by a password. The problem with this approach is that the encrypted key is exposed to decryption attacks or spyware/malware running on the client machine. Unlike when using a cryptographic device, the file cannot erase itself automatically after several failed decryption attempts.\n\nThis standard specifies an API, called Cryptoki, to devices which hold cryptographic information and perform cryptographic functions. Cryptoki, pronounced \"crypto-key\" and short for cryptographic token interface, follows a simple object-based approach, addressing the goals of technology independence (any kind of device) and resource sharing (multiple applications accessing multiple devices), presenting to applications a common, logical view of the device called a cryptographic token.\n\nTo summarize, PKCS#11 is a standard that can be used by application software to access cryptographic tokens such as smart cards and other devices. Most device vendors provide a library that implements the PKCS#11 provider interface -- this library can be used by applications in order to access these devices. PKCS#11 is a cross-platform, vendor-independent free standard.\n\nThe first thing you need to do is to find the provider library, it should be installed with the device drivers. Each vendor has its own library. For example, the OpenSC PKCS#11 provider is located at /usr/lib/pkcs11/opensc-pkcs11.so on Unix or at opensc-pkcs11.dll on Windows.\n\nYou should follow an enrollment procedure:\n• Create a certificate request based on the key pair, you can use OpenSC and OpenSSL in order to do that.\n• Submit the certificate request to a certificate authority, and receive a certificate.\n• Load the certificate onto the token, while noting that the id and label attributes of the certificate must match those of the private key.\n\nA configured token is a token that has a private key object and a certificate object, where both share the same id and label attributes.\n\nA simple enrollment utility is Easy-RSA 2.0 which is part of OpenVPN 2.1 series. Follow the instructions specified in the README file, and then use the pkitool in order to enroll.\n\nInitialize a token using the following command:\n\nEnroll a certificate using the following command:\n\nHow to modify an OpenVPN configuration to make use of cryptographic tokens\n\nYou should have OpenVPN 2.1 or above in order to use the PKCS#11 features.\n\nEach PKCS#11 provider can support multiple devices. In order to view the available object list you can use the following command:\n\nEach certificate/private key pair have unique \"Serialized id\" string. The serialized id string of the requested certificate should be specified to the pkcs11-id option using single quote marks.\n\nThis will select the object which matches the pkcs11-id string.\n\nThis will load two providers into OpenVPN, use the certificate specified on pkcs11-id option, and use the management interface in order to query passwords. The daemon will resume into hold state on the event when token cannot be accessed. The token will be used for 300 seconds after which the password will be re-queried, session will disconnect if management session disconnects.\n\nMany PKCS#11 providers make use of threads, in order to avoid problems caused by implementation of LinuxThreads (setuid, chroot), it is highly recommend to upgrade to Native POSIX Thread Library (NPTL) enabled glibc if you intend to use PKCS#11.\n\nOpenSC PKCS#11 provider is located at /usr/lib/pkcs11/opensc-pkcs11.so on Unix or at opensc-pkcs11.dll on Windows.\n\nPKCS#11 is a free, cross-platform vendor independent standard. CryptoAPI is a Microsoft specific API. Most smart card vendors provide support for both interfaces. In the Windows environment, the user should select which interface to use.\n\nThe current implementation of OpenVPN that uses the MS CryptoAPI (cryptoapicert option) works well as long as you don't run OpenVPN as a service. If you wish to run OpenVPN in an administrative environment using a service, the implementation will not work with most smart cards because of the following reasons:\n• Most smart card providers do not load certificates into the local machine store, so the implementation will be unable to access the user certificate.\n• If the OpenVPN client is running as a service without direct interaction with the end-user, the service cannot query the user to provide a password for the smart card, causing the password-verification process on the smart card to fail.\n\nUsing the PKCS#11 interface, you can use smart cards with OpenVPN in any implementation, since PKCS#11 does not access Microsoft stores and does not necessarily require direct interaction with the end-user.\n\nRouting all client traffic (including web-traffic) through the VPN\n\nBy default, when an OpenVPN client is active, only network traffic to and from the OpenVPN server site will pass over the VPN. General web browsing, for example, will be accomplished with direct connections that bypass the VPN.\n\nIn certain cases this behavior might not be desirable -- you might want a VPN client to tunnel all network traffic through the VPN, including general internet web browsing. While this type of VPN configuration will exact a performance penalty on the client, it gives the VPN administrator more control over security policies when a client is simultaneously connected to both the public internet and the VPN at the same time.\n\nAdd the following directive to the server configuration file:\n\nIf your VPN setup is over a wireless network, where all clients and the server are on the same wireless subnet, add the local flag:\n\nPushing the redirect-gateway option to clients will cause all IP network traffic originating on client machines to pass through the OpenVPN server. The server will need to be configured to deal with this traffic somehow, such as by NATing it to the internet, or routing it through the server site's HTTP proxy.\n\nOn Linux, you could use a command such as this to NAT the VPN client traffic to the internet:\n\nThis command assumes that the VPN subnet is 10.8.0.0/24 (taken from the server directive in the OpenVPN server configuration) and that the local ethernet interface is eth0.\n\nWhen redirect-gateway is used, OpenVPN clients will route DNS queries through the VPN, and the VPN server will need handle them. This can be accomplished by pushing a DNS server address to connecting clients which will replace their normal DNS server settings during the time that the VPN is active. For example:\n\nwill configure Windows clients (or non-Windows clients with some extra server-side scripting) to use 10.8.0.1 as their DNS server. Any address which is reachable from clients may be used as the DNS server address.\n\nRedirecting all network traffic through the VPN is not entirely a problem-free proposition. Here are some typical gotchas to be aware of:\n• Many OpenVPN client machines connecting to the internet will periodically interact with a DHCP server to renew their IP address leases. The redirect-gateway option might prevent the client from reaching the local DHCP server (because DHCP messages would be routed over the VPN), causing it to lose its IP address lease.\n• Issues exist with respect to pushing DNS addresses to Windows clients.\n• Web browsing performance on the client will be noticably slower.\n\nFor more information on the mechanics of the redirect-gateway directive, see the manual page.\n\nWhile OpenVPN clients can easily access the server via a dynamic IP address without any special configuration, things get more interesting when the server itself is on a dynamic address. While OpenVPN has no trouble handling the situation of a dynamic server, some extra configuration is required.\n\nThe first step is to get a dynamic DNS address which can be configured to \"follow\" the server every time the server's IP address changes. There are several dynamic DNS service providers available, such as dyndns.org.\n\nThe next step is to set up a mechanism so that every time the server's IP address changes, the dynamic DNS name will be quickly updated with the new IP address, allowing clients to find the server at its new IP address. There are two basic ways to accomplish this:\n• Use a NAT router appliance with dynamic DNS support (such as the Linksys BEFSR41). Most of the inexpensive NAT router appliances that are widely available have the capability to update a dynamic DNS name every time a new DHCP lease is obtained from the ISP. This setup is ideal when the OpenVPN server box is a single-NIC machine inside the firewall.\n• Use a dynamic DNS client application such as ddclient to update the dynamic DNS address whenever the server IP address changes. This setup is ideal when the machine running OpenVPN has multiple NICs and is acting as a site-wide firewall/gateway. To implement this setup, you need to set up a script to be run by your DHCP client software every time an IP address change occurs. This script should (a) run ddclientto notify your dynamic DNS provider of your new IP address and (b) restart the OpenVPN server daemon.\n\nThe OpenVPN client by default will sense when the server's IP address has changed, if the client configuration is using a remote directive which references a dynamic DNS name. The usual chain of events is that (a) the OpenVPN client fails to receive timely keepalive messages from the server's old IP address, triggering a restart, and (b) the restart causes the DNS name in the remote directive to be re-resolved, allowing the client to reconnect to the server at its new IP address.\n\nMore information can be found in the FAQ.\n\nConnecting to an OpenVPN server via an HTTP proxy.\n\nOpenVPN supports connections through an HTTP proxy, with the following authentication modes:\n\nFirst of all, HTTP proxy usage requires that you use TCP as the tunnel carrier protocol. So add the following to both client and server configurations:\n\nMake sure that any proto udp lines in the config files are deleted.\n\nNext, add the http-proxy directive to the client configuration file (see the manual page for a full description of this directive).\n\nFor example, suppose you have an HTTP proxy server on the client LAN at 192.168.4.1, which is listening for connections on port 1080. Add this to the client config:\n\nThe two authentication examples above will cause OpenVPN to prompt for a username/password from standard input. If you would instead like to place these credentials in a file, replace stdin with a filename, and place the username on line 1 of this file and the password on line 2.\n\nThis example is intended show how OpenVPN clients can connect to a Samba share over a routed dev tun tunnel. If you are ethernet bridging (dev tap), you probably don't need to follow these instructions, as OpenVPN clients should see server-side machines in their network neighborhood.\n\nFor this example, we will assume that:\n• the server-side LAN uses a subnet of 10.66.0.0/24,\n• the VPN IP address pool uses 10.8.0.0/24 (as cited in the server directive in the OpenVPN server configuration file),\n• the Samba server has an IP address of 10.66.0.4, and\n• the Samba server has already been configured and is reachable from the local LAN.\n\nIf the Samba and OpenVPN servers are running on different machines, make sure you've followed the section on expanding the scope of the VPN to include additional machines.\n\nNext, edit your Samba configuration file (smb.conf). Make sure the hosts allow directive will permit OpenVPN clients coming from the 10.8.0.0/24 subnet to connect. For example:\n\nIf you are running the Samba and OpenVPN servers on the same machine, you may want to edit the interfaces directive in the smb.conf file to also listen on the TUN interface subnet of 10.8.0.0/24:\n\nIf you are running the Samba and OpenVPN servers on the same machine, connect from an OpenVPN client to a Samba share using the folder name:\n\nIf the Samba and OpenVPN servers are on different machines, use folder name:\n\nFor example, from a command prompt window:\n\nThe OpenVPN client configuration can refer to multiple servers for load balancing and failover. For example:\n\nwill direct the OpenVPN client to attempt a connection with server1, server2, and server3 in that order. If an existing connection is broken, the OpenVPN client will retry the most recently connected server, and if that fails, will move on to the next server in the list. You can also direct the OpenVPN client to randomize its server list on startup, so that the client load will be probabilistically spread across the server pool.\n\nIf you would also like DNS resolution failures to cause the OpenVPN client to move to the next server in the list, add the following:\n\nThe 60 parameter tells the OpenVPN client to try resolving each remote DNS name for 60 seconds before moving on to the next server in the list.\n\nThe server list can also refer to multiple OpenVPN server daemons running on the same machine, each listening for connections on a different port, for example:\n\nIf your servers are multi-processor machines, running multiple OpenVPN daemons on each server can be advantageous from a performance standpoint.\n\nOpenVPN also supports the remote directive referring to a DNS name which has multiple A records in the zone configuration for the domain. In this case, the OpenVPN client will randomly choose one of the A records every time the domain is resolved.\n\nThe simplest approach to a load-balanced/failover configuration on the server is to use equivalent configuration files on each server in the cluster, except use a different virtual IP address pool for each server. For example:\n\nOne of the often-repeated maxims of network security is that one should never place so much trust in a single security component that its failure causes a catastrophic security breach. OpenVPN provides several mechanisms to add additional security layers to hedge against such an outcome.\n\nThe tls-auth directive adds an additional HMAC signature to all SSL/TLS handshake packets for integrity verification. Any UDP packet not bearing the correct HMAC signature can be dropped without further processing. The tls-auth HMAC signature provides an additional level of security above and beyond that provided by SSL/TLS. It can protect against:\n• DoS attacks or port flooding on the OpenVPN UDP port.\n• Port scanning to determine which server UDP ports are in a listening state.\n• SSL/TLS handshake initiations from unauthorized machines (while such handshakes would ultimately fail to authenticate, tls-auth can cut them off at a much earlier point).\n\nUsing tls-auth requires that you generate a shared-secret key that is used in addition to the standard RSA certificate/key:\n\nThis command will generate an OpenVPN static key and write it to the file ta.key. This key should be copied over a pre-existing secure channel to the server and all client machines. It can be placed in the same directory as the RSA .key and .crt files.\n\nWhile OpenVPN allows either the TCP or UDP protocol to be used as the VPN carrier connection, the UDP protocol will provide better protection against DoS attacks and port scanning than TCP:\n\nOpenVPN has been very carefully designed to allow root privileges to be dropped after initialization, and this feature should always be used on Linux/BSD/Solaris. Without root privileges, a running OpenVPN server daemon provides a far less enticing target to an attacker.\n\nOn Linux OpenVPN can be run completely unprivileged. This configuration is a little more complex, but provides best security.\n\nIn order to work with this configuration, OpenVPN must be configured to use iproute interface, this is done by specifying --enable-iproute2 to configure script. sudo package should also be available on your system.\n\nThis configuration uses the Linux ability to change the permission of a tun device, so that unprivileged user may access it. It also uses sudo in order to execute iproute so that interface properties and routing table may be modified.\n• \n• Write the following script and place it at: /usr/local/sbin/unpriv-ip:\n• \n• Execute visudo, and add the followings to allow user 'user1' to execute /sbin/ip:\n• You can also enable a group of users with the following command:\n• \n• Add the following to your OpenVPN configuration:\n• Please note that you must select constant X and specify tun or tap not both.\n• As root add persistant interface, and permit user and/or group to manage it, the following create tunX (replace with your own) and allow user1 and group users to access it.\n• Run OpenVPN in the context of the unprivileged user.\n\nFurther security constraints may be added by examining the parameters at the /usr/local/sbin/unpriv-ip script.\n\nThe chroot directive allows you to lock the OpenVPN daemon into a so-called chroot jail, where the daemon would not be able to access any part of the host system's filesystem except for the specific directory given as a parameter to the directive. For example,\n\nwould cause the OpenVPN daemon to cd into the jail subdirectory on initialization, and would then reorient its root filesystem to this directory so that it would be impossible thereafter for the daemon to access any files outside of jail and its subdirectory tree. This is important from a security perspective, because even if an attacker were able to compromise the server with a code insertion exploit, the exploit would be locked out of most of the server's filesystem.\n\nCaveats: because chroot reorients the filesystem (from the perspective of the daemon only), it is necessary to place any files which OpenVPN might need after initialization in the jail directory, such as:\n\nThe RSA key size is controlled by the KEY_SIZE variable in the easy-rsa/vars file, which must be set before any keys are generated. Currently set to 1024 by default, this value can reasonably be increased to 2048 with no negative impact on VPN tunnel performance, except for a slightly slower SSL/TLS renegotiation handshake which occurs once per client per hour, and a much slower one-time Diffie Hellman parameters generation process using the easy-rsa/build-dh script.\n\nOpenVPN automatically supports any cipher which is supported by the OpenSSL library, and as such can support ciphers which use large key sizes. For example, the 256-bit version of AES (Advanced Encryption Standard) can be used by adding the following to both server and client configuration files:\n\nKeep the root key (ca.key) on a standalone machine without a network connection\n\nOne of the security benefits of using an X509 PKI (as OpenVPN does) is that the root CA key (ca.key) need not be present on the OpenVPN server machine. In a high security environment, you might want to specially designate a machine for key signing purposes, keep the machine well-protected physically, and disconnect it from all networks. Floppy disks can be used to move key files back and forth, as necessary. Such measures make it extremely difficult for an attacker to steal the root key, short of physical theft of the key signing machine.\n\nRevoking a certificate means to invalidate a previously signed certificate so that it can no longer be used for authentication purposes.\n• The private key associated with the certificate is compromised or stolen.\n• The user of an encrypted private key forgets the password on the key.\n• You want to terminate a VPN user's access.\n\nAs an example, we will revoke the client2 certificate, which we generated above in the \"key generation\" section of the HOWTO.\n\nFirst open up a shell or command prompt window and cd to the easy-rsa directory as you did in the \"key generation\" section above. On Linux/BSD/Unix:\n\nYou should see output similar to this:\n\nNote the \"error 23\" in the last line. That is what you want to see, as it indicates that a certificate verification of the revoked certificate failed.\n\nThe revoke-full script will generate a CRL (certificate revocation list) file called crl.pem in the keyssubdirectory. The file should be copied to a directory where the OpenVPN server can access it, then CRL verification should be enabled in the server configuration:\n\nNow all connecting clients will have their client certificates verified against the CRL, and any positive match will result in the connection being dropped.\n• When the crl-verify option is used in OpenVPN, the CRL file will be re-read any time a new client connects or an existing client renegotiates the SSL/TLS connection (by default once per hour). This means that you can update the CRL file while the OpenVPN server daemon is running, and have the new CRL take effect immediately for newly connecting clients. If the client whose certificate you are revoking is already connected, you can restart the server via a signal (SIGUSR1 or SIGHUP) and flush all clients, or you can telnet to the management interfaceand explicitly kill the specific client instance object on the server without disturbing other clients.\n• While the crl-verify directive can be used on both the OpenVPN server and clients, it is generally unnecessary to distribute a CRL file to clients unless a server certificate has been revoked. Clients don't need to know about other client certificates which have been revoked because clients shouldn't be accepting direct connections from other clientsin the first place.\n• The CRL file is not secret, and should be made world-readable so that the OpenVPN daemon can read it after root privileges have been dropped.\n• If you are using the chrootdirective, make sure to put a copy of the CRL file in the chroot directory, since unlike most other files which OpenVPN reads, the CRL file will be read after the chroot call is executed, not before.\n• A common reason why certificates need to be revoked is that the user encrypts their private key with a password, then forgets the password. By revoking the original certificate, it is possible to generate a new certificate/key pair with the user's original common name.\n\nImportant Note on possible \"Man-in-the-Middle\" attack if clients do not verify the certificate of the server they are connecting to.\n\nTo avoid a possible Man-in-the-Middle attack where an authorized client tries to connect to another client by impersonating the server, make sure to enforce some kind of server certificate verification by clients. There are currently five different ways of accomplishing this, listed in the order of preference:\n• [OpenVPN 2.1 and above]Build your server certificates with specific key usage and extended key usage. The RFC3280 determine that the following attributes should be provided for TLS connections:\n\n You can build your server certificates with the build-key-server script (see the easy-rsadocumentation for more info). This will designate the certificate as a server-only certificate by setting the right attributes. Now add the following line to your client configuration:\n• [OpenVPN 2.0 and below] Build your server certificates with the build-key-server script (see the easy-rsa documentation for more info). This will designate the certificate as a server-only certificate by setting nsCertType=server. Now add the following line to your client configuration:\n\n This will block clients from connecting to any server which lacks the nsCertType=server designation in its certificate, even if the certificate has been signed by the ca file in the OpenVPN configuration file.\n• Use the tls-remotedirective on the client to accept/reject the server connection based on the common name of the server certificate.\n• Use a tls-verifyscript or plugin to accept/reject the server connection based on a custom test of the server certificate's embedded X509 subject details.\n• Sign server certificates with one CA and client certificates with a different CA. The client configuration ca directive should reference the server-signing CA file, while the server configuration cadirective should reference the client-signing CA file."
    },
    {
        "link": "https://reddit.com/r/OpenVPN/comments/15d1vdp/configuring_openvpn_to_access_serverside_lan",
        "document": "The purpose of this post is to document my third attempt to setup an OpenVPN server that would allow me to access my server-side LAN resources.\n\nMy previous two attempts - one in 2018 and another in 2021 - were successful, but I took a \"throw the kitchen sink at it\" approach and I generally had no clue why they worked. I would spend days trying to get things working, that by the time things were, I was just glad to be done with it.\n\nThis time, I documented each step, what worked and didn't work, and formed assumptions that I could test to explain why something worked or did not. My hope is that this helps someone else, or at the very least, helps me in 2026 or so when I inevitably have to go through this experience again.\n\nAll of the following IP addresses and semi-identifiable information have been modified slightly for privacy purposes, but are consistently so.\n• \n• Sends external IP address to the following router that is behind it\n• \n• \n• The range of 10.17.9.2 - 10.17.9.9 are reserved for access points\n• The range of 10.17.9.10 - 10.17.9.20 are reserved for static assignment on various client devices\n• \n• DHCP Pool: 10.89.17.2 - 10.89.17.255 (the latter is an assumption)\n• DNS: no clue, wish I knew what it was or how it is set\n\nInstall and Configure OpenVPN Server and Clients on Windows 10 Host\n• Open the Command Prompt with \"Run as administrator\"\n• Copy the ta.key file from ~\\OpenVPN\\bin to ~\\OpenVPN\\easy-rsa\\pki\n• Enter the server name of\n• Generate the server certificate and key with\n• Generate the client certificates with where \"#\" is 1, 2, 3, etc.\n• Copy files for the server to config-auto\n• Copy files for the clients to config\n• Rename client.ovpn to client-0#.ovpn where \"#\" is 1, 2, 3, etc.\n• Update to (i.e comment it out)\n• Update to (i.e comment it out)\n• Update to (i.e comment it out)\n• Update to (i.e comment it out)\n• At the end of the file add the incline certificates and keys\n• Copy over the certificate authority and paste within\n• Copy over the client certificate and paste within\n• Copy over the client key and paste within\n• Copy over the tls authority key and paste within\n• Copy the client-0#.ovpn file and repeat from Steps 44 through 57 for the number of clients desired\n• Check the Allow other network users to connect... checkbox\n• Select the TAP adapter (e.g. OpenVPN TAP-Windows6) for the Home networking connection\n• Keep \"Allow other network users to control... checkbox selected\n• \n• Change IPEnableRouter value from to\n• Add a static route on to the OpenVPN Virtual Network\n\n(Re-)Start the OpenVPNService on the Windows 10 Host\n• Ensure the OpenVPNService is set to start up automatically\n• Ensure there are no errors in the ~\\OpenVPN\\config-auto\\openvpn.log file\n• Test connection on the same wireless network as the Windows 10 Host\n• Ensure connection is successful with no errors\n• Ensure that server-side LAN resources (e.g. the router admin interface at 10.17.9.1) resolve\n• \n• Ensure that server-side LAN resources (e.g. the router admin interface at 10.17.9.1) resolve\n• Test connection on another wireless network (e.g. a neighbor or McDonald's) with cellular data disabled\n• Ensure that server-side LAN resources (e.g. the router admin interface at 10.17.9.1) resolve\n\nExplanation of Why and How It Works\n\nDisclaimer: I am not an expert. I actually loathe networking. Dealing with it is just a necessary evil. I believe I know more than the average person, but I'd still consider myself an intermediate at best. In the following, I may be making poor assumptions or simply misunderstanding how something works.\n\nMy understanding and experience is that the many guides that you can find online about how to install OpenVPN on Windows does not include the steps necessary to grant server-side LAN access. And when you find the one that does, it is often geared towards Linux or is vague on why certain configurations are necessary. From my perspective, these are the key changes that need to be made and why from most other guides:\n• Remove \";\" from in the server.ovpn file per Step 29 in the \"Install and Configure OpenVPN Server and Clients on Windows 10\" section above. This let's the OpenVPN virtual gateway know that there are other networks it can access on the server-side LAN.\n• Add in the server.ovpn file per Step 29 in the \"Install and Configure OpenVPN Server and Clients on Windows 10\" section above. This let's the OpenVPN virtual gateway know what are the other networks it can access on the server-side LAN.\n• The entire \"Enable Local Network Access through OpenVPN on Windows 10 Host\" section above. This allows the OpenVPN virtual gateway and clients to access network resources on the 10.17.9.0 server-side LAN beyond the Windows 10 Host. An example would be my printer at 10.17.9.11.\n• Adding port 1194 to the Windows Firewall per Step 1 in the \"Configure Firewall and IP Route Tunnling Windows 10 OpenVPN Server Host\" section above. This ensures that the OpenVPN server is accessible by devices on the 10.17.9.0 server-side LAN.\n• Enabling IP tunnel routing on the Windows 10 Host per Step 2 in the \"Configure Firewall and IP Route Tunnling Windows 10 OpenVPN Server Host\" section above. This ensure that if the Windows 10 host on 10.17.9.10 receives a packet for an OpenVPN client on 10.89.17.0, it can send it to the 10.89.17.1 OpenVPN virtual gateway so it may in turn route it to the appropriate client. It works in conjunction with 7 below.\n• Adding the static route to the server-side LAN router / gateway for the OpenVPN virtual network per Step 2 in the \"Configure Local Area Network (LAN) Router / Gateway\" section above. This ensures that if the server-side LAN router / gateway receives a packet for an OpenVPN client on 10.89.17.0, it can send it to the 10.17.9.10 Windows 10 Host. This is the precursor to 5 in this section.\n• Restart the router and Windows 10 Host. It ensures that network changes take effect. Otherwise, it \"seems\" that I was testing with cached configurations.\n\nThese seven things allow for the following scenario to be possible:\n• The OpenVPN virtual client sends the packet destined for the server-side LAN 10.17.9.11 resource to OpenVPN virtual gateway at 10.89.17.1.\n• The OpenVPN virtual gateway sends the packet destined for 10.17.9.11 to the Windows 10 Host at 10.17.9.10. This is made possible by 1 and 2 in this section.\n• The Windows 10 Host sends the packet destined for 10.17.9.11 to the server-side LAN router / gateway at 10.17.9.1. This is made possible by 3 in this section.\n• The server-side LAN router / gateway sends the packet to server-side LAN 10.17.9.11 resource on its network.\n• The server-side LAN 10.17.9.11 resource receives the packet and sends a return packet destined for the 10.89.17.2 OpenVPN virtual client to the server-side LAN router / gateway at 10.17.9.1.\n• The server-side LAN router / gateway sends the packet destined for 10.89.17.2 to the Windows 10 Host at 10.17.9.10. This is made possible by 3, 4, and 6 in this section.\n• The Windows 10 Host sends the packet destined for 10.89.17.2 to the OpenVPN virtual gateway at 10.89.17.1. This is made possible by 5 in this section.\n• The OpenVPN virtual gateway sends the packet to the 10.89.17.2 OpenVPN virtual client on its network, completing the loop.\n• I have IPv6 enabled on all of my network devices. However, I have no clue how it affects things as I haven't spent the time to learn about it. All of my configuration and testing focuses on IPv4.\n• For whatever reason, the public, insecure \"xfinitywifi\" wireless network that every Xfinity owned access point broadcast refuses to allow connection to the server-side LAN resources. I don't know if it is Comcast locking that network down or the fact that it assigns an IP address of 172.##.##.## or something else.\n• For whatever reason, if I specify a Private DNS provider host name (e.g. dns.adguard.com) on my Google Pixel 5, it conflicts with OpenVPN and causes Internet websites to be unreachable. However, I can still access server-side LAN resources.\n• For whatever reason, the combination of iOS and T-Mobile on my iPhone X causes problems with OpenVPN. Therefore, to access server-side LAN resources, I have created an alternative client-01-iOS.ovpn configuration that includes the line of \"redirect-gateway autolocal def1\". The drawback is that while connected to the OpenVPN Virtual Network, it will not connect to Internet resources."
    },
    {
        "link": "https://openvpn.net/as-docs/tutorials/tutorial--configure-access-server.html",
        "document": "This tutorial provides an overview of the Access Server Client Web UI, Admin Web UI, and command line interface (CLI). Once you are familiar with these, these links provide more information on configuring your server:\n\nUse these links to configure Access Server. They provide information about finalizing the initial configuration, purchasing a subscription, adding users, and more:\n\nAccess Server provides web services to run Admin and Client Web UIs. The Client Web UI provides your users with pre-configured VPN clients, simplifying connecting to your VPN server.\n\nTo access the Client Web UI, use either the IP address or hostname of your Access Server. For example:\n\nThe IP address is the external IP address of your server. A custom hostname can be set up using the Admin Web UI and a DNS ‘A’ record. You can follow the steps to set up a custom hostname here: Tutorial: Setting up your Access Server Hostname\n\nThis Client Web UI provides an interface for your users to sign in and retrieve pre-configured downloads of OpenVPN Connect. Users can download and install OpenVPN Connect with a personalized and bundled user profile configuration or download a configuration profile to import into any VPN client that supports .ovpn.\n\nIn our documentation, we use example IPv4 addresses and subnets reserved for documentation, such as , , and . Ensure you replace them with valid IPv4 addresses and subnets for your network(s)."
    },
    {
        "link": "https://reddit.com/r/OpenVPN/comments/13gdq9p/remote_access_to_a_local_web_server",
        "document": "Hello , I am quite new to this and I need help , I have a 3d printer which hosts a web interface on the local network. So when I go on my pc that is connected to the same wifi I can type in 192.168.x.x and I have access to an interface that let's me control my printer. Problem is that is local and I want to be able to access this ip address when I am let's say at work on my phone or computer . I want to use openVPN because it has SSL . Now I cannot find a tutorial that shows me how to configure openVPN to access local ip hosted on my network. Second problem I cannot install openVPN on the same machine that is hosting the server I can only install it on a computer that is connected to the same wifi. Is this doable or am I just plain stupid."
    },
    {
        "link": "https://documentation.meraki.com/MR/Encryption_and_Authentication/Configuring_RADIUS_Authentication_with_WPA2-Enterprise",
        "document": "Cisco Meraki MR access points (APs) offer a number of authentication methods for wireless association, including the use of external authentication servers to support WiFi Protected Access 2 - Enterprise (WPA2-Enterprise). This article outlines dashboard configuration to use a RADIUS server for WPA2-Enterprise authentication, RADIUS server requirements, and an example server configuration using Windows Network Policy Server (NPS).\n\nWPA2-Enterprise with 802.1X authentication can be used to authenticate users or computers in a domain. The supplicant (wireless client) authenticates against the RADIUS server (authentication server) using an Extensible Authentication Protocol (EAP) method configured on the RADIUS server. The gateway access point (authenticator) sends authentication messages between the supplicant and authentication server. This means the RADIUS server is responsible for authenticating users. Access points perform Extensible Authentication Protocol Over LAN (EAPOL) exchanges between the supplicant and convert these to RADIUS Access-Requests messages, which are sent to the RADIUS server's IP address and UDP port specified in dashboard. Gateway access points need to receive a RADIUS Access-Accept message from the RADIUS server in order to grant the supplicant access to the network. To achieve the best performance, we recommend placing the RADIUS server and gateway access points within the same layer-2 broadcast domain to avoid firewall, routing, or authentication delays. Keep in mind the access point is not responsible for authenticating wireless clients and acts as an intermediary between clients and the RADIUS server. The following image provides a detailed breakdown of the Protected Extensible Authentication Protocol (PEAP) with the Microsoft Challenge Handshake Authentication Protocol version 2 (MSCHAPv2) association process: When WPA2-Enterprise with 802.1X authentication is configured, the following attributes are present in the Access-Request messages sent from the Cisco Meraki access point to the customer's RADIUS server. Note: Please refer to RFC 2865 for details on these attributes, additional notes for certain attributes are included below.\n• : Contains (1) the Meraki access point's MAC address (all caps, octets separated by hyphens) and (2) the Service Set Identifier (SSID) on which the wireless device is connecting. These 2 fields are separated by a colon. Example: \"AA-BB-CC-DD-EE-FF:SSID_NAME\". Note: SSIDs broadcasted by repeater access points in a mesh deployment can't use NAS-IP-Address attribute because repeater access points do not have IP addresses assigned. You can use NAS-ID attribute instead, which by default carries NODE_MAC:VAP_NUM.\n• : Contains the MAC address of the wireless device (all caps, octets separated by hyphens). Example: \"AA-BB-CC-DD-EE-FF\".\n• Meraki-Device-Name: Name of the Meraki device as configured in the dashboard The following attributes are honored by Cisco Meraki when received in an Access-Accept message from the customer's RADIUS server to the Cisco Meraki access point:\n• : Contains the VLAN ID that should be applied to a wireless user or device. (This can be configured to override VLAN settings that an administrator has configured for a particular SSID in the Cisco Meraki Cloud Controller.)\n• : Sets the transport medium type used to create the tunnel. Example: 802 (which includes 802.11).\n• / / / : Any of these attributes can be used to convey a policy that should be applied to a wireless user or device. (Please ensure that the attribute type matches what is configured on the Network-wide > Configure > Group policies page in the Cisco Meraki Cloud Controller, and the attribute value matches the name of the group policy configured on that page.)\n\nThe most common EAP configuration is PEAP with MSCHAPv2, which prompts users for credentials (either user or machine authentication). Note: Certificate-based authentication using EAP-TLS is also supported by the Meraki platform, but is outside the scope of this document. For more information, refer to the documentation on RADIUS: WPA2-Enterprise With EAP-TLS. There are many server options available for RADIUS, which should work with MR access points if configured correctly. Please refer to your RADIUS server documentation for specifics, but the key requirements for WPA2-Enterprise with Meraki are as follows:\n• The server must host a certificate from a Certificate Authority (CA) trusted by clients on the network.\n• All gateway access points broadcasting the WPA2-Enterprise SSID must be configured as RADIUS clients/authenticators on the server with a shared secret.\n• The RADIUS server must have a user base to authenticate against. Once the RADIUS server is configured, refer to the Dashboard Configuration section below for instructions on how to add your RADIUS server to dashboard. The most common method of authentication with PEAP-MSCHAPv2 is user authentication, in which clients are prompted to enter their domain credentials. It is also possible to configure RADIUS for machine authentication, in which the computers themselves are authenticated against RADIUS, so the user doesn't need to provide any credentials to gain access. Typically, you can use EAP-TLS to configure machine authentication. However, some RADIUS server options make it simple to use PEAP-MSCHAPv2 to configure machine authentication (including Windows NPS, outlined in the example configuration below). Note: \"Machine Authentication\" is not the same as MAC-based authentication, which is another configuration option in dashboard under Wireless > Configure > Access Control. Machine authentication, specifically, refers to devices authenticating against RADIUS. The following example configuration outlines how to set up Windows NPS as a RADIUS server, with Active Directory (AD) acting as a userbase:\n• Add APs as RADIUS clients on the NPS server.\n• (Optional for machine auth) Deploy PEAP-MSCHAPv2 wireless network settings to domain member computers using Group Policy. Microsoft's RADIUS server offering for Windows Server 2008 and later is their NPS. Please refer to the following two Microsoft documents for instructions on adding the NPS role to Windows Server, and registering the new NPS server in Active Directory (allowing it to use AD as its userbase): A RADIUS server must host a certificate that allows both network clients and Meraki access points to validate the server's identity. There are three options for this certificate:\n• Acquire a certificate from a trusted Certificate Authority\n\n As long as the CA used is trusted by clients on the network, a certificate can be purchased and uploaded to NPS to verify server identity (required by clients). Common examples of trusted CAs include GoDaddy and VeriSign.\n• Implement a Public Key Infrastructure (PKI) and generate a certificate (advanced)\n\n A PKI can be used on the network to issue certificates trusted by clients on the network. We recommend you have a strong understanding of PKI for this option.\n• Generate a self-signed certificate and turn off client server validation (insecure)\n\n You may generate a self-signed certificate for testing/lab purposes. However, clients will not trust a self-signed certificate and you will need to disable server validation to connect.\n\n We do not recommend this option for production deployment, due to dramatically reduced security. Once a certificate is acquired, refer to the Import a Certificate section of Microsoft's documentation for instructions on how to import a certificate. Add Access points as RADIUS Clients on the NPS Server In this scenario, access points communicate with clients and receive their domain credentials, which the access point then forwards to NPS. In order for the NPS to process an access point's RADIUS access-request message, you must first add the access point as a RADIUS client/authenticator by its IP address. Since only gateway access points have an IP address on the LAN, all gateway access points in the network must be added to NPS as RADIUS clients. To quickly gather all gateway access point's LAN IP addresses, navigate to Wireless > Monitor > Access points in dashboard, ensure that the \"LAN IP\" column has been added to the table, and take note of all LAN IPs listed. Access points with a LAN IP of \"N/A\" are repeaters and they do not need to be added as RADIUS clients: Once a list of gateway access point's LAN IPs has been gathered, please refer to Microsoft's documentation for instructions on adding each access point as a client in NPS. Take note of the shared secret configured in NPS, which is referenced in the dashboard. Note: To save time, entire subnets can also be added to NPS as RADIUS clients, and any requests coming from that subnet will be processed by NPS. This is only recommended if all access points are on their own management VLAN and subnet, to reduce security risks. In many cases each RADIUS authenticator must be added to the RADIUS authentication server such as Microsoft NPS or Cisco ISE. For VPN concentration and concentrated Layer 3 roaming SSIDs, only concentrators would need to be added to the RADIUS authentication server. NPS must be configured to support PEAP-MSCHAPv2 as its authentication method. This is accomplished in three steps, outlined below for NPS in Windows Server 2008:\n• Select NPS(Local), so you see the Getting Started pane.\n• Select RADIUS server for 802.1X Wireless or Wired Connections in the Standard Configuration drop down.\n• When the Select 802.1X Connections Type window appears select the radio button Secure Wireless Connections and type a Name: for your policy or use the default. Click Next.\n• Verify the access points you added as RADIUS clients on the Specify 802.1X switches window. Click Next.\n• Click Configure to review the Edit Protected EAP Properties. The server certificate should be in the Certificate issued drop down. Make sure Enable Fast Reconnect is checked and EAP type is Secure password (EAP-MSCHAPv2). Click OK. Click Next.\n• When the Specify User Groups window appears click Add.\n• Type or find the Domain Users group. This group should be located in the same domain as your RADIUS server.\n\n Note: If RADIUS is being used for Machine Authentication, find the Domain Computers group instead.\n• When the group is added click OK. Click Next.\n• When then Completing New IEEE 802.1X Secure Wired and Wireless Connections and RADIUS clients appears click Finish.\n• Navigate to Policies>Connection Request Policies. Right click the wireless policy and Move Up so it is process first.\n• Navigate to Policies>Network Policies. Right click the wireless policy and Move Up so it is process first.\n• Navigate to Policies>Network Policies. Right click the wireless policy and select Properties.\n• On the Setting tab for the policy uncheck the box Enable auto-remediation of client computers and click OK. The following image outlines an example of an NPS policy that supports user authentication with PEAP-MSCHAPv2: For a seamless user experience, it may be ideal to deploy a PEAP wireless profile to domain computers so users can easily associate with the SSID. Though optional for user auth, this is strongly recommended for machine authentication. The following instructions explain how to push a PEAP wireless profile to domain computers using a GPO, on a Domain Controller running Windows Server 2008:\n• Create a new GPO or use an existing GPO.\n• Edit the GPO and navigate to Computer Configuration > Policies > Windows Settings > Security Settings > Public Key Policies > Wireless Network (IEEE 801.X) Policies.\n• Right Click Wireless Network (IEEE 801.X) Policies and choose Create a New Windows Vista Policy.\n• Click Add for Connect to available networks.\n• On the Connection tab, provide a Profile Name and enter the SSID of the wireless network for Network Name(s). Click Add.\n• Click the Security tab. Configure the following:\n• For Trusted Root Certification Authorities select the check box next to the appropriate Certificate Authorities and click OK.\n• Click OK to close out and click Apply on wireless policy page to save the settings.\n• Apply the GPO to the domain or OU containing the domain member computers (refer to Microsoft's Deploying Group Policy documentation for details).\n\nWhen a RADIUS Server is added to the configuration, it will disconnect current clients connected to the SSID. Once a RADIUS server has been set up with the appropriate requirements to support authentication, the following instructions explain how to configure an SSID to support WPA2-Enterprise, and authenticate against the RADIUS server:\n• Select your desired SSID from the SSID drop down (or navigate to Wireless > Configure > SSIDs to create a new SSID first).\n• For Security choose Enterprise with my RADIUS server.\n• Enter the following information in the table:\n• Host IP or FQDN*: IP address or FQDN of your RADIUS server, reachable from the access points.\n• Auth port: UDP port of the RADIUS server listens on for Access-Requests; 1812 by default. *The network and all the access points must be running MR28.0+ to support FQDN. Aside from the RADIUS server requirements outlined above, all authenticating access points will need to be able to contact the IP address and port specified in dashboard. Make sure that your access points all have network connectivity to the RADIUS server and no firewalls are preventing access. Dashboard offers a number of options to tag client traffic from a particular SSID with a specific VLAN tag. Most commonly, the SSID will be associated with a VLAN ID (see VLAN Tagging on MR Access Points), so all client traffic from that SSID will be sent on that VLAN. With RADIUS integration, a VLAN ID can be embedded within the RADIUS server's response. This allows for dynamic VLAN assignment based on the RADIUS server's configuration. Please refer to our documentation regarding Per-User VLAN tagging for configuration specifics.\n\nCisco Meraki access points can be configured to provide enterprise WPA2 authentication for wireless networks using Cisco Identity Services Engine (ISE) as a RADIUS server. This article will cover instructions for basic integration with this platform. For more detailed information on how to configure Cisco ISE, please refer to the Cisco Identity Services Engine User Guide.\n• Cisco ISE installed and reachable from the access points\n• An SSID configured to use WPA2-Enterprise pointing to the Cisco ISE server After installation, Cisco ISE generates, by default, a self-signed local certificate and private key, and stores them on the server. This certificate will be used by default for WPA2-Enterprise. In a self-signed certificate, the hostname of Cisco ISE is used as the common name (CN) because it is required for HTTPS communication. Note: Using a self-signed certificate is not recommended for RADIUS. In order to use the default self-signed cert, clients will need to have RADIUS server's identity validation disabled in order to connect. For certificate options on the RADIUS server you may refer to the RADIUS configuration section in this document.\n• From the Network Devices navigation pane on the left, click Network Devices.\n• Add: Select Add. Alternatively, click Add new device from the action icon on the Network Devices navigation pane.\n• Edit: Select the check box next to a device and click Edit. Alternatively, click a device name from the list to edit.\n• Duplicate: select the check box next to a device and click Duplicate. 4. In the right pane, enter the Name and IP Address. 5. Check the Authentication Settings check box and define a Shared Secret for RADIUS authentication. This must match the Secret entered for the RADIUS server when configuring the SSID in dashboard. Cisco ISE supports policy sets (see Cisco ISE: Introduction to Policy Sets), which allows grouping sets of authentication and authorization policies, as opposed to the basic authentication and authorization policy model, which is a flat list of authentication and authorization rules. Policy sets allow for logically defining an organization's IT business use cases into policy groups or services, such as VPN and 802.1X. This makes configuration, deployment, and troubleshooting much easier.\n• Click the Default policy. The default policy is displayed in the right.\n• Click the plus (+) sign on top and choose Create Above.\n• Enter the Name, Description and a Condition for this group policy.\n• Click Submit. After configuring a policy set, Cisco ISE will log out any administrators. Log in again to access the Admin portal.\n• In Cisco ISE, select the Actions menu and click Insert New Rule Above.\n• Give the sub-rule a Name (Example: Dot1X).\n• Click the small window icon to open the Conditions menu.\n• In the last box select EAP-MSCHAPv2.\n• In the Use field, select Active Directory as the identity store( see Managing External Identity Sources). Configure the Active Directory integration as appropriate for the desired deployment."
    },
    {
        "link": "https://campus.barracuda.com/product/cloudgenfirewall/doc/170819885/how-to-configure-a-radius-eap-server-for-wi-fi-authentication",
        "document": ""
    },
    {
        "link": "https://support.onelogin.com/onelogin/kb/4271380/configure-the-radius-server-interface",
        "document": "\n• A device that supports the RADIUS protocol using either PAP, EAP-TTLS/PAP, or EAP-PEAP/MSCHAPv2. These devices are known as Network Access Servers, or NAS. Examples are: Note: OneLogin supports the RADIUS PAP, EAP-TTLS/PAP, and EAP-PEAP/MSCHAPv2 authentication methods. Other RADIUS authentication methods such as MS-CHAP, MSCHAPv2 (without EAP-PEAP), and EAP-TLS aren't supported. Please submit a request through the button in your OneLogin admin portal for authentication methods you would like to see supported.\n• A basic understanding of how to configure the RADIUS protocol on your NAS.\n• Every RADIUS configuration requires a unique routable IP address. For example, for 3 RADIUS configs, you need 3 unique routable IP addresses.\n• Access to your NAS IP address and shared secret.\n• Log in to OneLogin as an administrator.\n• Enter a Name to identify this configuration; for example, My Cisco ASA.\n• In the Secret field, enter the string defined as the shared secret in your NAS. If you create a new shared secret, it can take up to an hour to be usable due to caching. Note: There is a 30 character limit for shared secrets. Shared secrets support the following special characters: ~ ! @ # $ % ^ & *( ) _ + | \\ = - ' { } [ ] : \" ' ; < > ? / . ,\n• Enter the Internet routable IP address of your NAS. You can enter more than one, separated by spaces.\n• (Optional) If you want to restrict access to users in certain OneLogin roles, select the role from the Role Restriction drop-down.\n• (Optional) If your NAS supports two-step authentication, select Require OTP verification as a 2nd step. Use this option to require users to provide a one-time password (OTP) as a second step after entering the user name and password. If you enable this option, users must register their OTP device in their OneLogin profile before they can authenticate and must use OneLogin Protect, Symantec VIP, Google Authenticator, or Yubikey as their OTP provider. This option is not supported if you are using the EAP-PEAP/MSCHAPv2 authentication method. Note: Instead of this option, you can incorporate second-factor authentication as a single step by requiring a concatenated password + one-time password (OTP). To set up single-step authentication with OTP, skip this step and go to step 9, below. When you have selected the Require OTP verification option, two additional options appear. Select for all users to require all users to provide an OTP after they have entered their username and password. Select if user's OneLogin policy requires OTP (recommended) to require this second authentication step only for users who have been assigned a security policy that requires multi-factor authentication. For more information about policies requiring multi-factor authentication, see User Policies. Important Note: You must configure your NAS for RADIUS challenge authentication. After validating the user name and password, OneLogin RADIUS returns a RADIUS Access-Challenge to your NAS, which prompts the user. Consult your NAS provider for guidance. NAS must support Access-Challenge to use this feature. Access-Challenge is only supported by OneLogin with PAP authentication. If OneLogin Protect is the user's default MFA device, you can send push notifications to their registered default Protect device. Users receive a OneLogin Protect push notification if the following conditions are met:\n• OneLogin Protect is registered as the default MFA device, and;\n• Password+OTP is required and the user only enters their password, or;\n• OTP is required and the user enters the keyword push, or;\n• Challenge is required and the user enters the keyword push.\n• (Optional) In the Password section, select the Enable Password Expiration Policy Enforcement setting to have the OneLogin RADIUS server enforce the user's OneLogin password expiration policy. You can enable NT Hash for EAP-PEAP/MSCHAPv2. RADIUS EAP-PEAP/MSCHAPv2 authentication is commonly used with enterprise WiFi access services. Because a oneway NT Hash of the user's password is sent by the client, OneLogin must compare the NT Hash against a stored NT hash. Enabling this feature allows OneLogin to store an NT Hash of the user password. Users must log in or change their OneLogin password at least once before the NT hash is captured and available to use.\n• After you click Save, the Credentials section displays the mapping of RADIUS attributes (left) to OneLogin attributes (right). Confirm or modify your attribute mappings. By default, the OneLogin RADIUS service uses the OneLogin Email as the RADIUS User-Name and the OneLogin Password as the RADIUS User-Password.\n• OneLogin Password only (default), if your'e using OTP verification as a 2nd step (see step 8), or if you don't need OTP.\n• OTP only- Users don't provide their password. Note. This is typical of RADIUS implementations that use PAP only. Passwords can be compromised. If you use OTP only, with OTP codes that change with each authentication request, the vulnerability is removed.\n• Password+OTP- Users enter both password and OTP as a concatenated string (mypassword12345, where 12345 is the OTP) or use an optional comma delimiter (which looks like mypassword,12345) Click any row to change the attribute mapping. Click Save if you edited mappings.\n• The RADIUS specification includes standardized attributes used to communicate information between a client and a server. Because these attributes are standardized, the attribute data is predefined and recognized by RADIUS clients and servers. RADIUS Vendor-Specific Attributes (VSAs) are derived from a single , attribute 26. Attribute 26 allows a registered vendor to create additional attributes in any way. You can set your OneLogin RADIUS configuration to return VSAs and some standard attributes (such as Filter-ID attribute 11) with the RADIUS Access-Accept message. Support for both static values and dynamically matched OneLogin role values is provided. OneLogin RADIUS only returns VSAs and values defined by the FreeRADIUS 3 dictionary files. The name match isn't case sensitive. If the VSAs return unexpected results, please check your NAS documentation to verify that you entered the names and values correctly. We only support VSAs that are found in the FreeRADIUS Dictionary.\n\n \n\n Note: In order to enable this feature you will need to contact your Account Manager. Use the same steps to configure both standard RADIUS attributes and VSAs, as described below.\n• In the Attributes section of your RADIUS configuration, click the Add Attribute button and enter the name and value of a static attribute in the dialog. Click Save. A new attribute name and value appears in the attributes table.\n• If the attribute you added is dynamically selected from matching OneLogin roles, check the Attribute has dynamic group value checkbox. When checked, the dialog changes to enable selection of OneLogin roles to match against. Any roles selected, that match an authenticating user’s roles, will be returned with this attribute using the delimiter you specify, or a space delimiter by default. Click Save. A new attribute name, with the matching roles, appears in the attributes table. Note: You may find it helpful to create and assign OneLogin Roles specific to your NAS configuration.\n• Upon completion, your configuration displays the attributes you entered. Click on an attribute row to edit or delete in the dialog. We recommend you use a RADIUS test client such as radtest to easily verify that the attributes you expect are returned with the Access-Accept message. For the configuration above, a successful authentication for a user with all matching roles, would return: $ sudo radtest donald xxxxxx radius.us.onelogin.com 0 test123 Sent Access-Request Id 41 from 0.0.0.0:56852 to 62.44.255.206:1812 length 76 User-Name = \"donald\" User-Password = \"xxxxxx\" NAS-IP-Address = 10.13.10.251 NAS-Port = 0 Message-Authenticator = 0x00 Cleartext-Password = \"xxxxxx\" Received Access-Accept Id 41 from 62.44.255.206:1812 to 10.13.10.251:56852 length 100 Tunnel-Private-Group-Id:0 = \"Default;Administrator;IT Systems\" Tunnel-Type:0 = VLAN Tunnel-Medium-Type:0 = IPv4 Filter-Id = \"Default;Administrator;IT Systems\" Note: You must use PAP to see the attributes in the command-line while testing or via a wire sniffer.\n• OneLogin RADIUS Attributes sent in the Access-Accept are only currently supported with the PAP and EAP-TTLS/PAP authentication methods. Support for the EAP-PEAP/MSCHAPv2 authentication method is on the near-term product roadmap.\n• If the attribute value contains HTML characters, it will be HTML encoded in the Access-Accept message. Please inform OneLogin support you are experiencing this issue.\n\nConfigure RADIUS for authentication on your device using the following settings:\n\nNote. If you don't know whether your OneLogin account is on the US or EU region, contact OneLogin support.\n\nWhen possible, use the RADIUS server domain name rather than the IP address, as IP addresses may change.\n\nWhy is authentication failing against the OneLogin RADIUS service?\n\nYou may have configured the RADIUS service in OneLogin to use the wrong RADIUS User-Name value. The default configuration in OneLogin uses the OneLogin email value as the RADIUS User-Name. However, your NAS may be passing sAMAccountName or the value held in the OneLogin Username field instead, in which case authentication fails.\n\nCheck to see what value is being passed by your NAS. Then go to Settings > RADIUS, select your RADIUS service, and go to the Attributes section to confirm that the OneLogin attribute is the same. If not (let's say your NAS uses sAMAccountName and it's set to OneLogin Email in the Attributes section), change the OneLogin attribute and save the page."
    },
    {
        "link": "https://watchguard.com/help/docs/help-center/en-US/Content/en-US/WG-Cloud/Devices/access_point/ap_auth_radius.html",
        "document": "RADIUS (Remote Authentication Dial-In User Service) authenticates local and remote users on a company network. RADIUS is a client/server system that keeps the authentication information for users, remote access servers, VPN gateways, and other resources in one central database.\n\nTo configure a Wi-Fi in WatchGuard Cloud access point to use RADIUS authentication, you can add a RADIUS server to an authentication domain, and configure access points in your account to use that domain for authentication.\n\nYou can then configure a wireless network SSID with WPA2 Enterprise or WPA3 Enterprise to authenticate wireless clients to the RADIUS server.\n\nThe wireless client authenticates with the RADIUS server using any EAP-based method configured on the RADIUS server.\n\nBefore you configure your access point to use a RADIUS authentication server, you must have this information for each RADIUS server:\n• RADIUS Server — IP address and RADIUS port for the RADIUS Authentication Server.\n• Shared Secret — This is a case-sensitive password that must be the same on the WatchGuard Cloud authentication domain configuration and on the RADIUS server.\n• RADIUS Accounting Server (optional) — IP address and RADIUS port of the RADIUS Accounting Server. In many deployments, the Authentication and Accounting services are on the same RADIUS server and run on different ports. \n\nA RADIUS Accounting Server monitors RADIUS traffic and collects data about client sessions, such as when sessions begin and end. For example, you must configure a RADIUS accounting server for RADIUS Single Sign-on (SSO) deployments. For more information on how to configure RADIUS SSO with WatchGuard access points and a Firebox, see About RADIUS Single Sign-On.\n• Authentication methods — Configure your RADIUS server to allow the authentication method (any EAP-based method), that your access point and clients use.\n\nNAS (Network Access Server) attributes are data included in the request packet sent by the access point to the RADIUS server to identify specific elements about the access point and client to the RADIUS server. These attributes enable the RADIUS server to use this data for authentication, authorization, accounting, and dynamic client profile assignment features.\n\nIn access point firmware v2.1 and higher, you can customize the Called Station ID and NAS ID in the advanced settings of an SSID. For more information, go to Configure Access Point SSID Settings.\n• Called Station ID — The default Called Station ID is the name of the SSID and the MAC address of the access point [SSID]-[MAC address]. \n\nFor example: \n\nYou can also customize the Called Station ID in the SSID advanced settings. You can enter custom text in combination with the predefined variables. The maximum length for the field is 32 characters. With variable expansion, the maximum length of the Called Station ID is 84 characters.\n• NAS ID — The default NAS ID is the name of the SSID and the MAC address of the access point [SSID]-[MAC address]. For example: \n\nYou can also customize the NAS ID in the SSID advanced settings. You can enter custom text in combination with the predefined variables. The maximum length for the field is 32 characters. With variable expansion, the maximum length of the NAS ID is 84 characters.\n• NAS IP Address — The IP address of the access point. This can be a static or DHCP IP address. We recommend you use static or reserved DHCP IP addresses for access points that communicate with RADIUS servers.\n• NAS Port — The NAS port is set to 0 by default and cannot be modified.\n\nIn access point firmware v2.0 or lower, you cannot modify the default RADIUS attributes.\n• Called Station ID — The Called Station ID is the MAC address of the access point. \n\nFor example:\n• NAS ID — The NAS ID is the name of the SSID. \n\nFor example:\n• NAS IP Address — The IP address of the access point. This can be a static or DHCP IP address. We recommend you use static or reserved DHCP IP addresses for access points that communicate with RADIUS servers.\n• NAS Port — The NAS port is set to 0 by default and cannot be modified.\n\nTo use RADIUS server authentication with a WatchGuard Cloud-managed access point, you must:\n• Add the IP address of the access point to the RADIUS server to configure the device as a RADIUS client. We recommend you use static or reserved DHCP IP addresses for access points that communicate with RADIUS servers.\n• Add the RADIUS server to a WatchGuard Cloud authentication domain, and specify the server IP address and shared secret. For more information, see Add an Authentication Domain to WatchGuard Cloud.\n• If you have a RADIUS accounting server, add it to the same authentication domain. For more information, see Add Servers to an Authentication Domain.\n• Add the authentication domain to the access point configuration. For more information, see Access Point Authentication Domains.\n• Configure an SSID with WPA2 Enterprise or WPA3 Enterprise security, and select an Authentication Domain with a configured RADIUS server. \n\n\n\nWith WPA3 Enterprise, you can also enable 192-bit mode (WPA3 Enterprise Suite B) to increase encryption security in sensitive enterprise environments. WPA3 Enterprise 192-bit mode requires access point firmware v2.1 or higher. For more information, see Configure Access Point SSID Settings.\n\n\n\nWhen you configure WPA2 or WPA3 Enterprise authentication on access points with firmware v2.2 and higher, you can also enable Dynamic VLANs that enables you to dynamically assign VLAN IDs to the wireless client based on the user information provided by the RADIUS server after successful authentication. For more information, go to Configure Access Point Dynamic VLANs.\n\nFor information on how to configure RADIUS Single Sign-On (SSO) with WatchGuard access points and a Firebox, see About RADIUS Single Sign-On.\n\nFor information on how to integrate RADIUS authentication and Microsoft Active Directory and NPS, see Authenticate Wi-Fi in WatchGuard Cloud Clients with Microsoft Active Directory and NPS."
    },
    {
        "link": "https://cisco.com/c/en/us/td/docs/ios/12_4t/wlan/configuration/guide/wlcgsrvr.html",
        "document": ""
    }
]