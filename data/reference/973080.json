[
    {
        "link": "https://stackoverflow.com/questions/2906745/networking-code-sometimes-throws-unknownhostexception",
        "document": "This may occur if a hiccup in DNS server has occurred. Apart from making the DNS server more robust or looking for another one, you can also just use the full IP address instead of the hostname. This way it doesn't need to lookup the IP address based on the hostname. However, I would rather fix the DNS issue and prefer the DNS since IP addresses may change from time to time."
    },
    {
        "link": "https://stackoverflow.com/questions/24188992/unknownhostexception-from-java-but-host-resolves-with-ping-nslookup-curl",
        "document": "This is most likely a network management, change / configuration management or general system administration problem rather than a programming problem.\n\nOne approach is to try to figure out what changed to cause it to stop working. This is not the kind of thing that would happen spontaneously. Someone or something has changed some software or configurations to make this happen. Start with when it stopped (or when you noticed) and work back through your change logs.\n\nIt sounds like it is an issue with the Java DNS resolution procedure. It appears that the resolver is either not trying to talk to the normal DNS servers, or it is trying and failing.\n\nWe can't debug it for you, but I found these resources that help to explain what should be happening when you do a name lookup in Java, and offer some ideas on trouble-shooting."
    },
    {
        "link": "https://community.boomi.com/s/article/java-net-UnknownHostException-Methods-To-Resolve-The-Exception",
        "document": ""
    },
    {
        "link": "https://repost.aws/knowledge-center/route-53-fix-unknownhostexception-error",
        "document": "I want to troubleshoot the UnknownHostException error in my Java application.\n\nUnknownHostException is a common error message in Java applications. This error is usually caused by a DNS resolution failure. If a Java application fails to get a valid DNS answer, then it might throw an UnknownHostException error.\n\nIn addition to a DNS issue, the root cause of this error might be:\n\nNote: If you receive errors when you run AWS Command Line Interface (AWS CLI) commands, then see Troubleshoot AWS CLI errors. Also, make sure that you're using the most recent AWS CLI version.\n\nDetermine the root cause of the error\n• Use the Windows Remote Desktop Protocol (RDP) or Secure Shell (SSH) protocol to connect to the server that hosts your Java application.\n• Run a dig command (Linux) or nslookup command (Windows) on the DNS name that caused the error.\n• Based on the output, review the following scenarios.\n\nYou might get valid answers from the dig or nslookup commands, but receive UnknownHostException errors in your Java application. This is likely because of application level issues.\n\nTo resolve application level issues, do the following:\n• Confirm that your Java application doesn't have a bad DNS cache. Configure your application to adhere to the DNS time-to-live (TTL). To use a fixed TTL, specify 60 seconds or less. For more information, see Set the JVM TTL for DNS name lookups.\n\nIn the following example, there's a networking issue at the server or the DNS resolver. The application fails to connect, and then times out:\n\nIf the dig command from Amazon EC2 instances show no servers could be reached, then verify if the DNS support option is turned on for the source VPC. For more information, see DNS attributes for your VPC.\n\nIn following example, DNS support is turned off at the VPC level. The first dig command that is used to query the VPC resolver (10.1.1.2) fails, as does the Telnet connection to the VPC Resolver (10.1.1.2). However, the second dig command used to query the Cloudflare DNS server (1.1.1.1) resolves to an answer.\n\nThis error commonly occurs when there's a geolocation routing policy, but the record doesn't have a DNS answer for the server's geographic location. You can either create a record and define the geolocation records, or create a default record.\n\nThe following is an example output of this scenario:\n\nIf the DNS record isn't created in a public hosted zone and Domain Name System Security Extensions (DNSSEC) is turned on, then NOERROR - NOANSWER is returned instead of NXDOMAIN.\n\nTo verify the status of DNSSEC, run the following dig command.\n\nThe output looks similar to the following example:\n\nIn the following example, the dig output shows NXDOMAIN for DNS records that aren't created and DNSSEC isn't turned on:\n\nNXDOMAIN or NOERROR (without an answer) response\n\nCheck your DNS public hosted zone to confirm that the DNS record is correctly configured.\n\nSERVFAIL status\n\n -or-\n\n Can't connect to the DNS resolver or server\n\nIf you use an Amazon EC2 instance for your Java application, then network outages are rare but can happen. The dig or nslookup responses show that you repeatedly can't connect to the DNS resolver or server. In this case, check for active network outages in your AWS Region.\n\nIf all of the following are true, then check the configuration of the endpoint on the VPC:\n• You use an on-premises server.\n• The on-premise server connects to a Route 53 private hosted zone through a Route 53 resolver endpoint.\n\nReview settings for the security group, network access control list (network ACL), and route table. For instructions, see How do I troubleshoot Amazon EC2 instance connection timeout errors from the internet?\n\nIn this example, the output has a SERVFAIL status:\n\nCheck if private hosted zone and resolver rule are associated to source VPC\n\nThe Amazon-provided DNS resolver evaluates the most specific match, in the following priority order:\n\nIf DNS query matches the resolver rule, then confirm that the target IP address replies back with the correct answer. If you use a private hosted zone, then be sure that the DNS record is created in your private hosted zone. If DNS record isn't present in private hosted zone, then it doesn't fallback to a public hosted zone and returns NXDOMAIN.\n\nFor more information, see Resolving DNS queries between VPCs and your network.\n\nVerify the proper sub-domain delegation is created between parent, child, and grandchild zone. If grandchild zone name servers (NS) are present in the parent zone but not present in the child zone, then intermittent NXDOMAIN is expected. Every child zone NS record must be present in its parent hosted zone.\n\nThe following is an example of domain delegation:\n\nWhen the grandchild zone (api.today.example.com) NS record is present in parent zone (example.com), then be sure it's also present in child zone (today.example.com). For more information, see How do I test if my delegated subdomain resolves correctly?\n\nIf you intermittently get the UnknownHostException error, then Amazon EC2 DNS limits might be a factor. The limit is 1,024 packets per second per network interface, and that limit can't be increased. The number of DNS queries per second supported by the Amazon-provided DNS server varies by query type, response size, and protocol type. For more information, see How can I determine whether my DNS queries to the Amazon-provided DNS server are failing due to VPC DNS throttling?"
    },
    {
        "link": "https://rollbar.com/blog/java-unknownhostexception",
        "document": "The is an exception in Java that is thrown to indicate that the IP address of a host could not be determined.\n\nSince the is a checked exception, it either needs to be thrown or surrounded by a try-catch block in code.\n\nThe occurs when trying to connect to a remote host using its hostname, but the IP address of the host could not be determined. This usually happens because of a typo in the hostname, or because of a DNS misconfiguration or propagation delay.\n\nHere is an example of an thrown when trying to connect to an unknown host:\n\nThe above code attempts to connect to a remote host, but has a typo in the hostname. Therefore, running the code throws an exception:\n\nSince is a checked exception, it can be handled by surrounding it with a try-catch block. The earlier example can be updated to handle the exception:\n\nIn the above example, the code that can throw the is surrounded in a try-catch block. A block is also included to close the connection if the occurs. This is good practice since too many open connections can cause the application to run out of memory.\n\nThe can be avoided with the following checks:\n• Valid hostname - The hostname should be double checked to make sure it does not contain any typos or whitespaces.\n• DNS settings - The system DNS settings should be checked to ensure that the DNS server is reachable. If the hostname is new, it may take some time for the DNS server to catch up.\n\nManaging errors and exceptions in your code is challenging. It can make deploying production code an unnerving experience. Being able to track, analyze, and manage errors in real-time can help you to proceed with more confidence. Rollbar automates error monitoring and triaging, making fixing Java errors easier than ever. Sign Up Today!"
    },
    {
        "link": "https://github.com/DV8FromTheWorld/JDA/issues/111",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/33120817/what-is-the-best-practice-to-reconnect-websocket",
        "document": "What is the best practice to reconnect websocket when the network fall. because I close and open the connection and the websocket is not reusable. If I create a new websocket connection Then, the server is received two connections.\n\nthanks to @TripeHound : If the connection has failed, it's should have failed at the server as well, so the server should just discard the original (knowing that the client will reconnect when next it needs to).\n\ni did managed to do what @TripeHound sayed .\n\nif there is better practice for reconnecting i'll let you know ."
    },
    {
        "link": "https://github.com/DV8FromTheWorld/JDA/issues/2448",
        "document": ""
    },
    {
        "link": "https://jda.wiki/using-jda/troubleshooting",
        "document": "This is a collection of common issues and recommended solutions.\n\nDidn't find an answer? Try asking in our Discord server\n\nWhen you call or the JDA instance will stop all of its threads. However, if HTTP/2 was used by the instance it will keep the JVM running due to a timeout thread for http connections. This can be terminated by shutting it down manually:\n\nAn error like or similar means you are not including your dependencies or transitive dependencies in the archive.\n\nThis exception indicates that the token you have used in your is not a valid bot token. Usually, this means you tried using the secret instead of the bot token. To get your token, follow these steps:\n• On the left side, click the Bot tab\n• If you don't have a bot yet, you must create one\n• Once you have a bot, there is a token section. Click COPY.\n• The token is now in your clipboard and you can paste it into your code\n\nIf you follow these steps and you still get the same exception, it could be due to one of these problems:\n• You included excess whitespace in your string. The token string should not include any newlines or spaces.\n• You were banned from the API or your server is hosted on a public hosting platform like Glitch or Heroku.\n• The token is not for a bot account, we do not support client accounts.\n\nA valid token looks like this:\n\nCan't get emoji from message¶\n\nMethods such as and only include custom emoji which have to be uploaded to a guild by a moderator. Unicode emoji such as 👍 are not included and require using a 3rd party library to be located in a string. You can use emoji-java to extract unicode emoji from a message.\n\nAn example use-case including a code sample can be found in this answer to a related question on StackOverflow\n\nWhen JDA encounters an issue while executing a it will emit an error through the failure callback. You can handle this by adding a second callback to , for example: .\n\nYou can use ErrorHandler to handle or ignore specific ErrorResponse failures.\n\nNothing happens when using X¶\n\nIn JDA we make use of async rate-limit handling through the use of the common RestAction class. \n\nWhen you have code such as or nothing actually happens. This is because both as well as return a instance. You are not done here since that class is only an intermediate step to executing your request. Here you can decide to use async (recommended) or or the blocking (not recommended).\n\nYou might notice that returns . This is because it's async and uses callbacks instead. Read More\n\nIf you do have a then maybe your code doesn't even run? Try putting a right before and after your code and see if it prints. If not, then read this My event listener code is not executed.\n\nMy event listener code is not executed¶\n\nThere are many reasons why your event listener might not be executed but here are the most common issues:\n• You are using a deprecated or removed part of JDA, such as . \n\nUse the replacement that is documented, for example .\n• You are using the wrong login token. \n\nIf the token is for another bot which doesn't have access to the desired guilds then the event listener code cannot run.\n• Your bot is not actually in the guild. \n\nMake sure your bot is online and has access to the resource you are trying to interact with.\n• You never registered your listener. \n\nUse on either the or instance\n• You did not override the correct method. \n\nUse and see if it fails. Your method has to use the correct name and parameter list defined in . Read More.\n• You don't actually extend or . \n\nYour class should either use or .\n• You are missing a required for this event. \n\nMake sure that you on the to allow the events to be received.\n• The event has other requirements that might not be satisfied such as the cache not being enabled. \n\nPlease check the requirements on the event documentation.\n\nIf none of the above apply to you then you might have an issue in your listener's code, at that point you should use a debugger.\n\nThis warning implies your event thread is too busy and will block critical events from being received. You should try to limit blocking calls and make sure your event handlers don't take up too much time. Do profiling to figure out what takes so long or create a thread dump when you get this warning to see where the issue is.\n\nBy default, all events are handled on the same thread they get received and handled on. If you block this thread for too long then JDA cannot keep up with important lifecycle events sent by Discord. Either you start writing non-blocking code (replace with etc.) or you use a thread pool for your event handling.\n\nWhen you get an exception like this, that means one of the event listeners you registered does not implement the interface provided by JDA.\n\nThis is not a valid event listener class:\n\nYou can either use ListenerAdapter or EventListener:\n\nWhen using EventListener make sure you actually imported the correct interface from JDA and not :\n\nThis error can occur when trying to reload a plugin in various minecraft frameworks. The cause of this error is a quirk with how plugin loading works, where it disables class loading when disabling the plugin. This causes problems when JDA hasn't finished shutting down all of its internal threads yet.\n\nThe best way to handle this is to use :\n\nAlternatively, you can also use immediately and then use . This will prevent any currently queued requests from executing and immediately stop the threads.\n\nIn general, using is frowned upon due to its unsafe and buggy nature. It is recommended to use alternative measures to reload your plugin, as recommended in this article by the WorldEdit author.\n\nWhen Discord emits a or they only provide the new content of the message. Since JDA does not keep a cache of messages it is unable to provide the previous content. Instead you will have to track content of messages yourself.\n\nPreventing use of complete() in callback threads¶\n\nThe following code will illustrate an issue where callbacks might cause a deadlock\n\nSince we decided to use a single-thread pool (1) we only have one thread to execute callbacks. This thread is used by the first callback (2) and cannot be used for the second callback (3).\n\nDue to this reason we simply don't allow using in any callback threads at all. If you use callbacks you should use .\n\nWhen you update your game or online status you emit a socket message to Discord. If you do that often enough you hit a limit and JDA has to backoff for 60 seconds.\n\nThings that contribute to the WebSocket RateLimit include:\n\nIt is also possible that you get spammed by this warning if you use (this is done when using ). If your bot is in more than 120 guilds then this warning is unavoidable when using member chunking. It is recommended to use to reduce the startup time and get rid of this warning. If chunking on startup is absolutely necessary, you have to accept this warning.\n\nThere are many ways to retrieve members: Loading Members\n\nI explained this in a bit more detail in issue #1290\n\nTo make chunking a little more efficient, you can additionally enable the . This will load all online members for each guild directly, instead of relying on additional member chunk requests, which can be a significant boost to reduce startup time and potentially reduce these warnings.\n\nWhen the internal jda rate-limiter fails to predict a rate limit bucket the HTTP response is . This means the request has to be retried. If you see this a lot (many times per minute), then JDA might have an issue with the rate limit handling of that route. If you use it could also mean that your clock is not properly synchronizing with NTP.\n\nEncountering the global rate-limit is something JDA cannot predict or prevent. This rate-limit implies you sent too many requests in total across all routes. Discord limits how much HTTP traffic a client is allowed to do and will tell us to limit all requests for a specified time interval. You should avoid hitting this too often.\n\nCannot get reference as it has already been Garbage Collected¶\n\nDue to how we structure cache we sometimes have to invalidate our entire cache (that's just how Discord works). When you store references to JDA entities for a long period of time such as a field you will suffer with the error java.lang.IllegalStateException: Cannot get reference as it has already been Garbage Collected once the entity was removed from the JDA cache. We highly recommend to store only the parts you actually need of the specific entity such as and use something like .\n\nEntities that should not be stored for a long period of time include:\n\nInstead store IDs of the entities, or for messages simply the parts you need such as content.\n\nThe default behavior in is to only cache members connected to voice channels. If you need members to be cached, for example to lookup users by roles, then you have to enable this explicitly.\n\nI explained this in this wiki page and this stackoverflow answer.\n\nThere are many ways you can retrieve members dynamically: Loading Members\n\nCannot get message content / Attempting to access message content without GatewayIntent¶\n\nWhen you receive this warning, that means you tried to access the content of a message without the privileged .\n\nAs of JDA version 5.0.0-alpha.14, you are required to enable this intent explicitly with on your or .\n\nThis affects anyone who accesses these methods on messages:\n\nYou are also required to enable this in your application dashboard. Note, however, that this is a privileged intent and will require a valid use-case for your bot to be verified in over 75 servers.\n\nThis means you tried to use , , or without enabling it in your application dashboard. To use these privileged intents you first have to enable them.\n• Under the Privileged Gateway Intents section, enable the intents that you are using in your bot. Toggle on SERVER MEMBERS INTENT, PRESENCE INTENT, or MESSAGE CONTENT INTENT depending on your needs.\n\nIf you use these intents you are limited to 100 guilds on your bot. To allow the bot to join more guilds while using this intent you have to verify your bot. This will be available in your application dashboard when the bot joins at least 75 guilds.\n\nThe application did not respond¶\n\nThis means you didn't acknowledge or reply to an interaction in time. You only have 3 seconds to reply or acknowledge. You have to use , , , or . (If you don't it won't do it) \n\nMake sure your event listener code is executed.\n\nThis exception can happen due to two reasons:\n\nThe interaction took longer than 3 seconds to be acknowledged¶\n\nPossible reasons why your response was too slow:\n• JDA's WebSocket thread was blocked for too long, when you see the This application did not respond on Discord, make a thread dump and look at the stack trace around to see where it may have blocked\n• Your interaction took too long to acknowledge, you can use to extend the response time to 15 minutes\n\nThe interaction was acknowledged by another process running the same bot¶\n\nYou can confirm this by checking if your bot replied, or the three dots in a button disappeared without saying , or you see '[Bot] is thinking...' for more than 3 seconds.\n\nTo resolve this, try stopping all current processes for the bot that could be responsible, or resetting your bot token.\n\nThis means you sent followup messages through or similar but never acknowledged the interaction."
    },
    {
        "link": "https://stackoverflow.com/questions/64562258/discord-bot-connected-to-websocket-but-not-finished-loading",
        "document": "I am working on a discord bot like for 2 weeks and all the time there were no problems... but now when i was starting the bot, there is just standing this:\n\nbut normally there is at least one more line with something like \"finished loading\" and this is not there anymore... but i dont know why\n\nThe Bot is online but nothin works (commands, etc.)"
    }
]