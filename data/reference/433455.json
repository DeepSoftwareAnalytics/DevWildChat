[
    {
        "link": "https://learn.microsoft.com/en-us/sql/relational-databases/database-mail/configure-database-mail?view=sql-server-ver16",
        "document": "This article describes how to enable and configure Database Mail using the Database Mail Configuration Wizard, and create a Database Mail Configuration script using templates.\n\nUse the DatabaseMail XPs option to enable Database Mail on this server. For more information, see Database Mail XPs Server Configuration Option reference article.\n\nEnabling SQL Server Service Broker in any database requires a database lock. If Service Broker was deactivated in , to enable Database Mail, first stop SQL Server Agent so Service Broker can obtain the necessary lock.\n\nTo configure Database Mail, you must be a member of the sysadmin fixed server role. To send an email with Database Mail, you must be a member of the DatabaseMailUserRole database role in the database.\n\nThe following steps use SQL Server Management Studio (SSMS). Download the latest version of SSMS at aka.ms/ssms.\n• None In Object Explorer, expand the node for the instance where you want to configure Database Mail.\n\nThis page describes the steps to configuring Database Mail.\n\nDo not show this page again - Check this to skip this welcome page from displaying in the future.\n\nNext - Proceeds to the Select a configuration task page.\n\nUse the Select Configuration Task page, to indicate which task you complete each time you use the wizard. If you change your mind before you complete the wizard, use the Back button to return to this page and select a different task.\n\nSet up Database Mail by performing the following tasks\n\n Perform all of the tasks required to set up Database Mail for the first time. This option includes all of the other three options.\n\nManage Database Mail accounts and profiles\n\n Create new Database Mail accounts and profiles or to view, change, or delete existing Database Mail accounts and profiles.\n\nManage profile security\n\n Configure which users have access to Database Mail profiles.\n\nView or change system parameters\n\n Configure Database Mail system parameters such as the maximum file size for attachments.\n\nUse this page to create a new Database Mail account. A Database Mail account contains information for sending e-mail to an SMTP server.\n\nA Database Mail account contains the information that SQL Server uses to send e-mail messages to an SMTP server. Each account contains information for one e-mail server.\n\nA Database Mail account is only used for Database Mail. A Database Mail account doesn't correspond to a SQL Server account or a Microsoft Windows account. Database Mail can be sent using the credentials of the SQL Server Database Engine, using other credentials that you supply, or anonymously. When using basic authentication, the user name and password in a Database Mail account are only used for authentication with the e-mail server. An account does not need to correspond to a SQL Server user or a user on the computer running SQL Server.\n\nAccount name\n\n Type the name of the new account.\n\nDescription\n\n Type a description of the account. The description is optional.\n\nE-mail address\n\n Type the name of the e-mail address for the account. This is the e-mail address that e-mail is sent from. For example, an account for SQL Server Agent can send e-mail from the address SqlAgent@Adventure-Works.com.\n\nDisplay name\n\n Type the name to show on e-mail messages sent from this account. The display name is optional. This is the name displayed on messages sent from this account. For example, an account for SQL Server Agent can display the name \"SQL Server Agent Automated Mailer\" on e-mail messages.\n\nReply e-mail\n\n Type the e-mail address that is used for replies to e-mail messages sent from this account. The reply e-mail is optional. For example, replies to an account for SQL Server Agent can go to the database administrator, danw@Adventure-Works.com.\n\nServer name\n\n Type the name or IP address of the SMTP server the account uses to send e-mail. Typically this is in a format similar to . For help with this, consult your mail administrator.\n\nPort number\n\n Type the port number of the SMTP server for this account. Most SMTP servers use port 25 or 587, or port 465 for SSL connections.\n\nWindows Authentication using Database Engine service credentials\n\n Connection is made to the SMTP server using the credentials configured for the SQL Server Database Engine service. Authentication to the mail server with the service credentials is performed via NTLM authentication, an option only available to Exchange on-premises. For more information, see Authentication and EWS in Exchange.\n\nBasic Authentication\n\n Specify the user name and password required by the SMTP server.\n\nUser name\n\n Type the user name that Database Mail uses to sign in to the SMTP server. The user name is required if the SMTP server requires basic authentication.\n\nPassword\n\n Type the password that Database Mail uses to sign in to the SMTP server. The password is required if the SMTP server requires basic authentication.\n\nConfirm password\n\n Type the password again to confirm the password. The password is required if the SMTP server requires basic authentication.\n\nAnonymous authentication\n\n Mail is sent to the SMTP server without login credentials. Use this option when the SMTP server doesn't require authentication.\n\nUse this page to manage an existing Database Mail account.\n\nAccount name\n\n Select the account to view, update or delete.\n\nDelete\n\n Delete the selected account. You must remove this account from associated profiles, or delete such profiles, before you delete the selected account.\n\nDescription\n\n View or update the description of the account. The description is optional.\n\nE-mail address\n\n View or update the name of the e-mail address for the account. This is the e-mail address that e-mail is sent from. For example, an account for Microsoft SQL Server Agent can send e-mail from the address SqlAgent@Adventure-Works.com.\n\nDisplay name\n\n View or update the name to show on e-mail messages sent from this account. The display name is optional. This is the name displayed on messages sent from this account. For example, an account for SQL Server Agent can display the name SQL Server Agent Automated Mailer on e-mail messages.\n\nReply e-mail\n\n View or update the e-mail address that will be used for replies to e-mail messages sent from this account. The reply e-mail is optional. For example, replies to an account for SQL Server Agent can go to the database administrator, danw@Adventure-Works.com.\n\nServer name\n\n View or update the name of the SMTP server the account uses to send e-mail. Typically this is in a format similar to . For help with this, consult your mail administrator.\n\nPort number\n\n View or update the port number of the SMTP server for this account. Most SMTP servers use port 25 or 587, or port 465 for SSL connections.\n\nWindows Authentication using Database Engine service credentials\n\n Connection is made to the SMTP server using the credentials configured for the SQL Server Database Engine service.\n\nBasic Authentication\n\n Specify the user name and password required by the SMTP server.\n\nUser name\n\n View or update the user name that Database Mail uses to sign in to the SMTP server. The user name is required if the SMTP server requires basic authentication.\n\nPassword\n\n Change the password that Database Mail uses to sign in to the SMTP server. The password is required if the SMTP server requires basic authentication.\n\nConfirm password\n\n Type the password again to confirm the password. The password is required if the SMTP server requires basic authentication.\n\nAnonymous authentication\n\n Mail is sent to the SMTP server without login credentials. Use this option when the SMTP server doesn't require authentication.\n\nUse this page to create a Database Mail profile. A Database Mail profile is a collection of Database Mail accounts. Profiles improve reliability in cases where an e-mail server becomes unreachable, by providing alternative Database Mail accounts. At least one Database Mail account is required. For more information about setting the priority of Database Mail accounts in the profile, see Create a Database Mail Profile.\n\nUse the Move Up and Move Down buttons to change the order in which Database Mail accounts are used. This order is determined by a value called the sequence number. Move Up lowers the sequence number and Move Down increases the sequence number. The sequence number determines the order in which Database Mail uses accounts in the profile. For a new e-mail message, Database Mail starts with the account that has the lowest sequence number. Should that account fail, Database Mail uses the account with the next highest sequence number, and so on, until either Database Mail sends the message successfully, or the account with the highest sequence number fails. If the account with the highest sequence number fails, the Database Mail pauses attempts to send the mail for the amount of time configured in the Database Mail AccountRetryDelay parameter, then starts the process of attempting to send the mail again, starting with the lowest sequence number. Use the Database Mail AccountRetryAttempts parameter, to configure the number of times that the external mail process attempts to send the e-mail message using each account in the specified profile. You can configure the AccountRetryDelay and AccountRetryAttempts parameters on the Configure System Parameters page of the Database Mail Configuration Wizard.\n\nProfile name\n\n Type the name for the new profile. The profile is created with this name. Do not use the name of an existing profile.\n\nDescription\n\n Type a description for the profile. The description is optional.\n\nSMTP accounts\n\n Choose one or more accounts for the profile. The priority sets the order in which Database Mail uses the accounts. If no accounts are listed, you must select Add to continue, and add a new SMTP account.\n\nAdd\n\n Add an account to the profile.\n\nRemove\n\n Remove the selected account from the profile.\n\nMove Up\n\n Increase the priority of the selected account.\n\nMove Down\n\n Decrease the priority of the selected account.\n\nUse this page to manage an existing Database Mail profile. A Database Mail profile is a collection of Database Mail accounts. Profiles improve reliability in cases where an e-mail server becomes unreachable, by providing alternative Database Mail accounts. At least one Database Mail account is required. For more information about setting the priority of Database Mail accounts in the profile, see Create a Database Mail Profile.\n\nUse the Move Up and Move Down buttons to change the order in which Database Mail accounts are used. This order is determined by a value called the sequence number. Move Up lowers the sequence number and Move Down increases the sequence number. The sequence number determines the order in which Database Mail uses accounts in the profile. For a new e-mail message, Database Mail starts with the account that has the lowest sequence number. Should that account fail, Database Mail uses the account with the next highest sequence number, and so on, until either Database Mail sends the message successfully, or the account with the highest sequence number fails. If the account with the highest sequence number fails, the Database Mail pauses attempts to send the mail for the amount of time configured in the Database Mail AccountRetryDelay parameter, then starts the process of attempting to send the mail again, starting with the lowest sequence number. Use the Database Mail AccountRetryAttempts parameter, to configure the number of times that the external mail process attempts to send the e-mail message using each account in the specified profile. You can configure the AccountRetryDelay and AccountRetryAttempts parameters on the Configure System Parameters page of the Database Mail Configuration Wizard.\n\nProfile name\n\n Select the name of the profile to manage.\n\nDelete\n\n Delete the selected profile. You'll be prompted to select Yes to delete the selected profile and to fail any unsent messages, or to select No to delete the selected profile only if there are no unsent messages.\n\nDescription\n\n View or change the description of the selected profile. The description is optional.\n\nSMTP accounts\n\n Choose one or more accounts for the profile. The failover priority sets the order in which Database Mail uses the account in case of a failover.\n\nAdd\n\n Add an account to the profile.\n\nRemove\n\n Remove the selected account from the profile.\n\nMove Up\n\n Increase the failover priority of the selected account.\n\nMove Down\n\n Decrease the failover priority of the selected account.\n\nPriority\n\n View the current failover priority of the account.\n\nAccount name\n\n View the name of the account.\n\nE-mail Address\n\n View the e-mail address of the account.\n\nUse this page to choose the account to add to the profile. Either choose an existing account from the Account name box, or select New Account.\n\nAccount name\n\n Select the name of the account to add to the profile.\n\nE-mail address\n\n View the e-mail address for the selected account. You can't change the e-mail address from this page. To change the e-mail address for the account, go back to the main page of the wizard and select the Manage Database Mail accounts and profiles option.\n\nServer name\n\n View the mail server name for the selected account. You can't change the server name from this page. To change the server name for the account, go back to the main page of the wizard and select the Manage Database Mail accounts and profiles option.\n\nUse this page to choose a task for managing a profile or account.\n\nView, change or delete an existing account\n\n Manage or delete an existing account.\n\nView, change or delete an existing profile. You can also manage accounts associated with the profile.\n\n Update or delete an existing profile. This option also allows you to manage accounts associated with the profile.\n\nUse this page to configure a public profile.\n\nProfiles are either public or private. A private profile is accessible only to specific users or roles. A public profile allows any user or role with access to the mail host database ( ) to send e-mail using that profile.\n\nA profile can be a default profile. In this case, users or roles can send e-mail using the profile without explicitly specifying the profile. If the user or role sending the e-mail message has a default private profile, Database Mail uses that profile. If the user or role has no default private profile, uses the default public profile for the database. If there's no default private profile for the user or role and no default public profile for the database, returns an error. Only one profile can be marked as the default profile.\n\nPublic\n\n Select this option to make the specified profile public.\n\nProfile Name\n\n Displays the name of the profile.\n\nDefault Profile\n\n Select this option to make the specified profile the default profile.\n\nShow only existing public profiles\n\n Select this option to show only public profiles in the specified database.\n\nUse this page to configure a private profile.\n\nProfiles are either public or private. A private profile is accessible only to specific users or roles. A public profile allows any user or role with access to the mail host database ( ) to send e-mail using that profile.\n\nA profile can be a default profile. In this case, users or roles can send e-mail using the profile without explicitly specifying the profile. If the user or role sending the e-mail message has a default private profile, Database Mail uses that profile. If the user or role has no default private profile, uses the default public profile for the database. If there's no default private profile for the user or role and no default public profile for the database, returns an error.\n\nUser name\n\n Select the name of a user or role in the database.\n\nAccess\n\n Select whether the user or role has access to the specified profile.\n\nProfile name\n\n View the name of the profile.\n\nIs Default Profile\n\n Select whether the profile is the default profile for the user or role. Each user or role can have only one default profile.\n\nShow only existing private profiles for this user\n\n Select this option to display only profiles that the specified user or role already has access to.\n\nUse this page to specify Database Mail system parameters. View the system parameters and the current value of each parameter. Select a parameter to view a short description in the information pane.\n\nAccount Retry Attempts\n\n The number of times that the external mail process attempts to send the e-mail message using each account in the specified profile.\n\nAccount Retry Delay (seconds)\n\n The amount of time, in seconds, for the external mail process to wait after it tries to deliver a message using all accounts in the profile before it attempts all accounts again.\n\nMaximum File Size (Bytes)\n\n The maximum size of an attachment, in bytes.\n\nProhibited Attachment File Extensions\n\n A comma-separated list of extensions that can't be sent as an attachment to an e-mail message. Select the browse button (...) to add additional extensions.\n\nDatabase Mail Executable Minimum Lifetime (seconds)\n\n The minimum amount of time, in seconds, that the external mail process remains active. The process remains active as long as there are e-mails in the Database Mail queue. This parameter specifies the time the process remains active if there are no messages to process.\n\nLogging level\n\n Specify which messages are recorded in the Database Mail log. Possible values are:\n• None Verbose - logs errors, warnings, informational messages, success messages, and additional internal messages. Use verbose logging for troubleshooting.\n\nReset All\n\n Select this option to reset the values on the page to the default values.\n\nUse this page to review the actions that Database Mail Configuration Wizard performs. No changes are made until you finish the wizard.\n\nFor a quick tutorial to sending a test email, see Send a test email with database mail.\n\nUse the Send Test E-Mail from<instance_name> page to send an e-mail message using the specified Database Mail profile. Only members of the sysadmin fixed server role can send test e-mail using this page.\n\nDatabase Mail Profile\n\n Select a Database Mail profile from the list. This is a required field. If no profiles are shown, there are no profiles or you don't have permission to a profile. Use the Database Mail Configuration Wizard to create and configure profiles. If no profiles are listed, use the Database Mail Configuration Wizard to create a profile for your use.\n\nTo\n\n The e-mail address of the message recipients. At least one recipient is required.\n\nSubject\n\n The subject line for the test e-mail. Change the default subject to better identify your email for troubleshooting.\n\nBody\n\n The body of the test e-mail. Change the default subject to better identify your email for troubleshooting.\n\nThe Database Mail Test E-Mail dialog box confirms that the test message that Database Mail attempted to send the message and provides the mailitem_id for the test e-mail message. Check with the recipient to determine if the e-mail arrived. Normally e-mail is received in a few minutes, but the e-mail can be delayed because of slow network performance, a backlog of messages at the mail server, or if the server is temporarily unavailable. Use the mailitem_id for troubleshooting.\n\nThe mailitem_id of the test e-mail message.\n\nSelecting this button brings you to this document, Configure Database Mail.\n• None In SQL Server Management Studio (SSMS), on the View menu, select Template Explorer.\n• None In the Template Explorer window, expand the Database Mail folder.\n• None Double-click Simple Database Mail Configuration. The template opens in a new query window.\n• None On the Query menu, select Specify Values for Template Parameters. The Replace Template Parameters window opens.\n• None Type values for the profile_name, account_name, SMTP_servername, email_address, and display_name. SQL Server Management Studio fills in the template with the values you provide.\n• None Execute the script to create the configuration.\n• None The script doesn't grant any database users access to the profile. Therefore, by default, the profile can only be used by members of the sysadmin fixed security role. For more information about granting access to profiles, see sysmail_add_principalprofile_sp (Transact-SQL)"
    },
    {
        "link": "https://mssqltips.com/sqlservertip/1100/setting-up-database-mail-for-sql-server",
        "document": "SQL Server allows you to do many things including automating tasks and sending notifications. You can configure SQL Server to use Database Mail to send emails from SQL Server and include content in the email body as well as send attachments. In this article, we look at how to setup Database Mail using SQL Server Management Studio.\n\nThere are two ways that you can setup Database Mail, either by using the stored procedures that are included with SQL Server or by using SQL Server Management Studio (SSMS). For this exercise we will walk through how to setup Database Mail by using the SSMS.\n\nTo setup Database Mail, connect to your server and expand the Management node of the tree and then right click on “Database Mail”.\n\nThen select “Configure Database Mail’ and you will get the following welcome screen and then click “Next”.\n\nThe following screen will appear and select “Set up Database Mail by performing…” and click “Next”.\n\nIf Database Mail has not been enabled, you will get this following screen. Just click “Yes” to enable it. If it has already been enabled this screen will not appear.\n\nEnter in a name for the Profile and also a description and click “Add…”\n\nThe following screen will appear. Fill out the details for your mail account that will be used to send out email from SQL Server. When you are done click “OK”. You can send email using SSL or not, so configure accordingly. There are also several options for SMTP authentication. In this example, we will just use “Basic authentication”.\n\nAfter you click “OK” you will be brought back to this screen and the SMTP details will now show for the account you just setup. Click “Next” to continue.\n\nOn the next screen you will see the name of the profile that you just setup. Click on the checkbox to allow this to be a Public profile and also select “Yes” for the default profile and then click “Next”.\n\nThe following screen has some additional parameters that can be set to control how mail is sent. You can make changes or leave the defaults. When you are done click “Next”.\n\nA summary screen will appear that shows you all of the options that were selected. If everything is correct click “Finish” or click “Back” to go back and make changes.\n\nWhen you click “‘Finish” the next screen will appear that shows you the status of installing Database Mail. When this has finished just click “Close” to close this screen.\n\nTo test Database Mail, right click on Database Mail and select “Send Test E-Mail”.\n\nFill in a “To:” email address and change the body of the email if you want and then click “Send Test E-Mail”.\n\nAfter you have sent the email you will get this message box to confirm if the email was received or not. If it was, you can click “OK” to close the screen or click “Troubleshoot” which will launch the help information to see what the issue may be and how it can be resolved.\n\nThat’s all there is to it. As I mentioned before this can also be setup by using stored procedures. To look at this approach take a look at this article Database Mail in SQL Server.\n• Setting up Database Mail is not that complicated and can be very useful.\n• After you setup Database Mail don’t forget to setup your operators, alerts and SQL Agent alert settings"
    },
    {
        "link": "https://sqlshack.com/configure-database-mail-sql-server",
        "document": "Database Mail, as you would expect from its name, is a solution for sending e-mail messages from the SQL Server Database Engine to users. Using Database Mail, database applications can send e-mail messages that can, for example, contain query results or simply alert a user about an event that occurred in the database.\n\nThe process of Database Mail configuration has three main steps. In order to complete this successfully, we need to:\n• and configure those two to work together\n\nTo create a Database Mail profile, we can use either the Database Mail Configuration Wizard or T-SQL code. Using Configuration Wizard is easier, but bear in mind that Database Mail is turned off in SQL Server Express editions.\n\nUsually, all we need to do is go in Object Explorer, connect to the SQL Server instance we want to configure Database Mail on and expand the server tree. Then expand the Management node and double-click Database Mail or right-click and choose Configure Database Mail to open the Database Mail Configuration Wizard:\n\nSince Microsoft SQL Server 2016 Express edition is used in this article as an example, the Management node does not have Database Mail:\n\nThis doesn’t mean we cannot use it because it’s only not available as an interface, but it’s still available in the SQL Server Database Engine itself. We just need to enable it using T-SQL.\n\nTo enable Database Mail, run the following code:\n\nIn this case, running the code triggered an error:\n\nMsg 15123, Level 16, State 1, Procedure sp_configure, Line 62 [Batch Start Line 0] The configuration option ‘Database Mail XPs’ does not exist, or it may be an advanced option.\n\nThis is going to happen from time to time because this is an advanced option. To fix this, we need to change the show advanced options default value from 0 to 1.\n\nTo do this run the following code:\n\nThis time, the query is executed successfully. Once these two options are changed from ‘0’ to ‘1’, Database Mail is turned on:\n\nNow we can get back to setting up the e-mail profile and adding an e-mail account. To do this we will use some stored procedures in msdb database.\n\nTo create a new Database Mail profile named ‘Notifications’ we will use the sysmail_add_profile_sp stored procedure and the following code:\n\nTo grant permission for a database user or role to use this Database Mail profile, we will use the sysmail_add_principalprofile_sp stored procedure and the following code:\n\nTo create a new Database Mail account holding information about an SMTP account, we will use the sysmail_add_account_sp stored procedure and the following code:\n\nTo add the Database Mail account to the Database Mail profile, we will use the sysmail_add_profileaccount_sp stored procedure and the following code:\n\nExecute the code from all stored procedures, and you should get the message that the whole code is executed successfully:\n\nIf for some reason, execution of the code above returns an error, use the following code to roll back the changes:\n\nIf anything goes wrong, executing the stored procedures individually could help in troubleshooting the issue. Just make sure to execute the ‘sysmail_add_profileaccount_sp’ stored procedure after the Database Account, and a Database Profile are created.\n\nOkay, now we’ve set up an email account, so what’s next? Well, let’s send a test e-mail and see if it works.\n\nAs we mentioned before, we could send an e-mail to alert a user about an event that occurred in the database and this is exactly what we are going to do later on using a simple DML trigger. For now, let’s just send an e-mail to the specified recipient using the sp_send_dbmail stored procedure.\n\nThe Results grid will show the message that the e-mail is queued and ID number:\n\nThe code above should send an e-mail using the profile that was previously created to a recipient specified @recipients argument. The subject and body are specified @body and @subject arguments.\n\nPretty simple, right? Well, not exactly. In this case and in most situations in the real world the mail will not be sent successfully even though every step during the configuration was successful.\n\nIn this case, the e-mail message was successfully queued, but the message was not delivered.\n\nFirst things first, check if Database Mail is enabled by executing the following code:\n\nIn the Results grid, make sure that the ‘run_value’ column for Database Mail XPs is set to 1:\n\nTo send e-mails, the user must also be a member of the DatabaseMailUserRole server role. Members of the sysadmin fixed server role and msdb db_owner role are members automatically. This can be easily checked by going to Security > Logins, right-click the current user and select Properties. In the Login Properties dialog click the ‘Server Roles’ page and make sure that the ‘sysadmin’ server role is checked:\n\nThe Database Mail system logs e-mail activity in the ‘msdb’ database. To view the error messages returned by Database Mail, execute the following code:\n\nThe statement will return logs and in a case like ours when e-mails are not delivered look for the errors under the ‘event_type’ column:\n\nThese logs have all sorts of useful information that could help in troubleshooting, and we are in particular interested in the ‘description’ column as it holds detailed information about the error and what went wrong.\n\nThe very first error logged says:\n\n2 error 2017-11-13 00:18:27.800 The mail could not be sent to the recipients because of the mail server failure. (Sending Mail using Account 5 (2017-11-13T00:18:27). Exception Message: Cannot send mails to mail server. (The SMTP server requires a secure connection or the client was not authenticated. The server response was: 5.5.1 Authentication Required. Learn more at). ) 12092 1 NULL 2017-11-13 00:18:27.800 sa\n\nHowever, this information won’t be useful unless there is some documentation e.g. in the TechNet library. There is an article about Troubleshooting Database Mail that provides information for users to quickly isolate and correct common problems with Database Mail, but going through the documentation was not helpful in this case and it took a long time without success.\n\nOne other message that was logged of this type was:\n\n28 error 2017-11-14 16:20:01.107 The mail could not be sent to the recipients because of the mail server failure. (Sending Mail using Account 6 (2017-11-14T16:20:01). Exception Message: Cannot send mails to mail server. (Failure sending mail.). ) 14452 8 NULL 2017-11-14 16:20:01.107 sa\n\nThe problem, in general, is not with the Database Mail itself and its functionality. The error description messages are not predefined in the SQL Server Engine. This explains the missing Microsoft documentation. Those messages are usually authentication responses from SMTP servers that are required before allowing access to mail services.\n\nTo troubleshoot this further, we need to approach the problem from another perspective.\n\nSo far in troubleshooting, we have verified the following general steps:\n• The user is properly configured to send Database Mail\n• No TechNet library documentation could be found for the error messages logged\n\nAnother approach could be to setup an e-mail account used for sending outgoing notifications on another e-mail client like Microsoft Outlook. This should be fairly simple as both Gmail and MS Outlook are well-known services that should work together and there’s online documentation available on official websites.\n\nTo use the Gmail account with MS Outlook, we have to configure it to work with POP3 or IMAP.\n\nLog onto your Gmail account at www.gmail.com and click the Settings in the top right corner:\n\nChoose the Forwarding and POP/IMAP tab at the top of the page:\n\nIn the IMAP Access section, make sure that Enable IMAP option is selected and click the Configuration instructions link at the bottom:\n\nThis will open an instruction webpage on how to set up IMAP. Skip the 1st step as we already checked and verified that IMAP is turned on.\n\nFire up Outlook client to add the Gmail email account to it. Once Outlook is opened, click the File tab, and select Add Account:\n\nIn the Add Account dialog, select the Manual setup or additional server types option and click the Next button:\n\nIn the next step, choose the POP or IMAP option and click the Next button:\n\nUse the information from the table below to set up Outlook client with the correct settings:\n\nUnder User Information section, make sure to enter a valid e-mail address. The e-mail address entered here will be automatically set as User Name for the Logon Information once the Account Type is selected from the drop-down box. Once finished, click the More Settings button on the right to configure additional settings before continuing further:\n\nThis will open the Internet e-mail settings dialog. Leave everything as it is under the General tab. Next, click the Outgoing Server tab, check the My outgoing server (SMTP) requires authentication check-box and select the Use same settings as my incoming mail server option:\n\nMove on to the Advanced tab. Once again, use the information from the table above to set server port numbers. Set the incoming server (IMAP) to 993, and the outgoing server (SMTP) to 465. From the drop-down boxes select the SSL/TLS type of encrypted connection for both IMAP and SMTP servers. Leave the rest as it is and click the OK button to confirm settings:\n\nNow it’s the time to test e-mail account settings to ensure that the entries are correct. Click the Next button and this will pop-up two additional dialogs. In the first dialog, Outlook will perform two tasks:\n\nThis step is crucial as this task previously failed for Database Mail. In the second dialog, Outlook will ask for the username and password. This was already configured, optionally check the Save this password in your password lint option if your Windows user account is password-protected, and no other person has access to it:\n\nNote: The credential dialog can pop-up more than one time. Just click the OK button each time, until the server stops asking for login information. This usually happens when something is not configured right e.g. username or password, port numbers, etc.\n\nIn this case, the first task failed and sending test e-mail message failed as well right afterward:\n\nSome applications and devices use less secure sign-in technology, which makes their respective accounts more vulnerable and Gmail will block these sign-in requests. By default, access for these applications is turned off, but we can also turn access on to use them despite the risks. In this case, we also have to.\n\nThis can be solved by logging into Gmail account and making sure that Less secure apps option is enabled for the desired account. Go to the Less secure apps section of the Gmail account and enable access for less secure applications.\n\nNote: This setting is not available for accounts with 2-Step Verification enabled. Such accounts require an application-specific password for less secure apps access.\n\nSince this account has 2-Step Verification enabled, we have to turn it off, so we can continue further.\n\nGo to ’Sign in & security’ section of My Account, select 2-Step Verification, sign in using your credentials, and enter verification code if asked received via text message with a 6-digit verification code or phone call, and click the Turn off button:\n\nA pop-up dialog will appear informing the user about security and vulnerability. We are aware of this, so just click the Turn off button to continue:\n\nNow we can go back to the Less secure apps section and allow access for less secure applications:\n\nBack to Outlook, click the Next button once again to test e-mail account settings and finally a message without errors. Both tasks completed successfully:\n\nThe test e-mail message is also delivered successfully which means that sending another test e-mail from Database Mail should work this time:\n\nThere is only one way to find out. Go back to SSMS and execute the code for sending the test e-mail:\n\nUnfortunately, even after all this trouble, the test e-mail is not getting through. A quick look at the log files shows another error message of another type:\n\n51 error 2017-11-18 16:21:22.803 The mail could not be sent to the recipients because of the mail server failure. (Sending Mail using Account 10 (2017-11-18T16:21:22). Exception Message: Cannot send mails to the mail server. (Failure sending mail.). ) 3564 14 NULL 2017-11-18 16:21:22.803 sa\n\nAt this point, let’s do a quick look up, just to make sure that the e-mail profile is configured the same as it is for Outlook. Execute the code from below:\n\nThis will return settings for account name, server type, server address, and port number:\n\nEverything looks good, but the e-mail is still not getting out. A quick online lookup of the error message leads to a Stack Overflow thread in which the user has the exact same error message. In the comment section, another user says that changing the port number to 587 instead of 465, even though information from Gmail says otherwise, fixed the issue for him. As we are running out of options here, let’s try that and see what happens.\n\nWe will use the sysmail_update_account_sp stored procedure to change the port number in the existing Database Mail account.\n\nExecute the code from the previous step to verify that the change is applied. The port number will change leaving all other account information intact:\n\nFor some reason configuration instructions for SSL provided by Google does not work on port 465 for Database Mail system, but port 587 that is specified for TLS/STARTTLS worked like a charm.\n\nFinally, after giving it another try there is a new e-mail in the inbox sent from the Database Mail system:\n\nTo demonstrate how to send an e-mail notification to a user when a specific event occurred in the database, we can create a simple trigger.\n\nUse the code below to create a trigger named iProductNotification on the Product table which is contained in the Production schema:\n\nThis trigger will fire when an Insert statement is run against the Product table. The idea behind it is to collect basic information about a new product that is available like name and price and to wrap that information up in a simple e-mail message that will be sent to desired addresses using the Database Mail profile previously configured:\n\nOnce the trigger is created, refresh the ‘Triggers’ node under the ‘Product’ table just to make sure that the trigger is created on the right table:\n\nRather than typing the code for the Insert statement and because it’s easier, use the ‘Edit Top 200 Rows’ option from the right-click context menu on the table with the trigger. Fill in some information like working with Excel sheets. Once done, hit the Enter key to continue:\n\nThis will issue an Insert statement in the background and fire the trigger. As a result, the trigger will collect some information about the Insert statement, invoke the Database Mail profile, and use it send e-mail to the desired recipient:\n\nAnother example could be sending an e-mail message that contains query results. Execute the following code:\n\nThis SELECT statement returns a list of products with a specific condition in mind:\n\nBut more importantly, it sends an e-mail with results of that Select statement as an attachment to the e-mail recipients:\n\nAnd if we open the attachment, there it is, the result of our query:"
    },
    {
        "link": "https://brentozar.com/blitz/database-mail-configuration",
        "document": "You always want to configure Database Mail in SQL Server so that it can send you important notifications right away:\n\nYou can also use Database Mail to email query results and reports, and you can even send attachments, but don’t mistake it for an application server. You pay too much in licensing for that.\n\nHow to Fix the Problem\n\nSet aside some time immediately to follow the steps below.\n\nIf this is your first time doing this, expect it to take at least half an hour. It’s well worth your time, and nothing is hard, there’s just a few steps in the process.\n\nHow to Configure Database Mail and Enable it on the SQL Server Agent\n\nSMTP Server Info: you’re going to need the fully qualified name, port information, and authentication information for your smtp server. Get this from your sysadmin so you don’t stall out along the way.\n\nSQL Agent Operator: you may want to create an operator before you set this all up. You’ll use it here in your final test. (Don’t worry, that’s fast.)\n\nSetting Checks: There are a couple things we like to look at before trying to configure Database Mail that can throw a real monkey in your wrench.\n• Make sure Service Broker is still enabled in msdb (it is by default)\n• Make sure SQL is configured to use the Database Mail XPs (it is NOT by default)\n\nHere’s an example of the results that come back:\n\nWhat if Someone Turned Off Service Broker in msdb?\n\nIf for some reason Service Broker isn’t enabled, you may have larger issues than this to worry about:\n• Are you using an Edition of SQL Server that supports Database Mail?\n• Was msdb ever restored from backup?\n\nYou need to ask these questions before enabling it.\n\nReconfiguring your server to use the Database Mail XPs is straightforward. You can do this using TSQL, or you can walk through the wizard below. (It will prompt you if you need to make this change.)\n\nIn Object Explorer, expand Management and right click Database Mail:\n\nClick ‘Next’, then click the first option to set up Database Mail.\n\nName your profile, then click ‘Add’ to add an account:\n\nWhen adding an account, specify:\n• Display name: Most people use the SQL Server’s name here, like SQLSERVER01\n• Server name: this is the smtp server you’re using. Don’t use gmail for production servers, the screenshot is just an example. Seriously.\n• Port and your authentication options. This varies by email service.\n\nAsk your sysadmin for the details of your Exchange server.\n\nRemember to use a smpt server or service you trust; these emails will be vital to monitoring your server’s health.\n\nRight click on “Database Mail” in Object Explorer. Select “Send a Test Email.” Fill out the helpful little form and make sure it works.\n\nIf it doesn’t work, there’s a problem in your setup. Right click “Database Mail” again and select “View Database Mail Log” to go hunting and find out where the issue is.\n\nYou’re almost there, we promise. At this point your SQL Server can send mail, but the SQL Server Agent can’t yet. You need to tell it how you want it to use Database Mail for it to have powers to alert you about problems.\n\nRight click on the SQL Server Agent and select properties, like this:\n\nNow Click on the Alert System Tab\n\nThis is where you tell the SQL Server Agent what database mail profile to use. Enable the mail profile, then select your mail profile. You may also want to set up your failsafe operator right now. Then click OK.\n\nRestart the SQL Server Agent Service to Make That Take Effect\n\nThe SQL Server Agent is a little slow to learn: it won’t be able to use database mail until you restart the Agent service. Important reminders:\n• Note that we aren’t talking about the whole SQL Server itself: only the Agent service\n• Check if any jobs are running before restarting the SQL Server Agent Service. It will kill the jobs, and won’t automatically restart them, so you may want to wait until a quiet time when jobs aren’t running to do this step.\n\nYou’ve come a long way. Here’s how to revel in your success:\n• Set the step to notify an operator on completion of the job"
    },
    {
        "link": "https://linkedin.com/pulse/configuring-aws-ses-smtp-mail-microsoft-sql-server-2014-2022-fuller-lx7ye",
        "document": "Amazon Simple Email Service (SES) is a cost-effective, flexible, and scalable email service that enables developers to send mail from within any application. This guide will walk you through setting up AWS SES with Microsoft SQL Server versions 2014 to 2022.\n• AWS Account: Ensure you have an active AWS account.\n• Enter the email address you want to use and follow the verification steps.\n• Server Name: email-smtp.us-east-1.amazonaws.com (or the appropriate endpoint for your region)\n\nAdditional Configuration for .NET Framework and TLS 1.2 For SQL Server versions 2014 to 2022, ensure that the .NET Framework uses strong cryptography and that TLS 1.2 is enabled. AWS SES requires at least TLS 1.2 or TLS 1.3 for secure communication.\n• Navigate to the TLS 1.2 Registry Keys: Go to HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols.\n• Create Keys for TLS 1.2: Right-click on Protocols, select New > Key, and name it TLS 1.2. Under TLS 1.2, create two subkeys named Client and Server.\n• Set the Values: For both Client and Server, create two DWORD values: DisabledByDefault and set it to 0. Enabled and set it to 1.\n• Navigate to HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319. Create a DWORD value named SchUseStrongCrypto and set it to 1.\n• Navigate to HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\.NETFramework\\v4.0.30319. Create a DWORD value named SchUseStrongCrypto and set it to 1.\n\nBy following these steps, you can configure AWS SES to work with Microsoft SQL Server versions 2014 to 2022, ensuring secure and reliable email delivery from your SQL Server instance. Configuring the TLS 1.2 and .NET encryption registry settings ensures secure communication with AWS SES. I know this information is a bit dated, but I wanted to share it in case it’s helpful for anyone dealing with similar issues."
    },
    {
        "link": "https://mailtrap.io/blog/sending-emails-from-sql-server",
        "document": "Very often, we’re asked to extract some data from a database. If the request repeats regularly, it’s worth looking into automating it so you don’t have to perform this boring procedure over and over again. For this reason, you’ll probably want to send emails from SQL Server with the predefined content. And it’s not that hard to set up.\n\nOf course, emailing in SQL Server doesn’t need to only be about exporting data. You may simply want to keep yourself (or a colleague of yours) updated when, for example, a backup is finished or a programmed job fails miserably. With built-in functionalities, this can easily be done too.\n\nWe cover several different approaches and let you choose which works best for your needs.\n\nThe first approach doesn’t require any code as you’re guided through the entire setup by a built-in Wizard.\n\nThe first thing you need to take care of is email infrastructure. For that, you’ll have to set up a Database Mail functionality in SQL Server. If you’re using SQL Server Express, you’ll need to enable Database Mail first as it’s disabled by default.\n\nSkip this part if you’re not on SQL Server Express but, for example, SQL Server 2017.\n\nWe’ll use T-SQL to enable Database Mail. First of all, try the following code:\n\nIf it works, you’re good to go. Often, you may hit an error informing you that ‘Database Mail XPs don’t exist’. There’s a simple fix to that. Since it’s an advanced feature, we need to change the “show advanced options” from 0 to 1:\n\nIf it’s executed properly, try the earlier code and proceed when both values are set to ‘1’.\n\nFind the ‘Management’ folder in SQL server management console and right-click on ‘Configure Database Mail’.\n\nThe Wizard will launch and welcome you with some details. Proceed to the next page by clicking on ‘Next’.\n\nOn the following screen, you need to choose what to do. Since we are assuming Database Mail hasn’t been created before, go with the first option as in the screenshot below.\n\nTo set up Database Mail, you’ll need to enable it first. If you haven’t done so before, a popup will appear asking whether you want to enable Database Mail. Go for it.\n\nOn the new screen, you’ll see that no accounts are setup. Go ahead and add one by hitting the ‘Add’ button.\n\nA window will appear so you can quickly add the necessary details of your mail account. If you want replies to be sent to a different email address, put it under ‘Reply e-mail’. If you leave it blank, responders will reply to the email address specified in the ‘E-mail address’ field. ‘Description’ is optional.\n\nOnce you save the new profile, you’ll see it on the list in the previous window. You can add more accounts if you wish and prioritize them. If the first from the list fails to send an email, for whatever reason, the next account from the list will be used.\n\nThe following screen will bring you to the list of profiles, split into public and private ones.\n• Private Profiles are available to any user or role with access to the database.\n• Private Profiles can be restricted to specific users only.\n\nAfter clicking on “Next”, you’ll see the list of default settings. You can modify them here or keep them intact. Each option is pretty well documented in Microsoft’s documentation.\n\nFinally, you’ll see the summary of everything you just configured. If you’re happy with it, hit ‘Finish’ to wrap up the process.\n\nYou can test whether sending emails works straightaway. Right-click on Database Mail and select ‘Send Test E-mail’ from the list.\n\nHere, type in the email address you want to send the test to along with the desired content and send!\n\nThe most straightforward way to send emails from SQL Server is by creating a new SQL Agent Job and setting SQL to send emails about the job’s status. For that, you can use the profile you just created.\n\nTo set up, you can use another simple Wizard. Right-click on SQL Server Agent and pick ‘Properties’ from the list.\n\nHere, you’ll need to modify some settings. In the ‘Alert System’ tab nested under ‘Select a page’, do the following:\n• In this section, choose ‘Database Mail’ from the dropdown list for ‘Mail system’ and pick the profile you just created from the ‘Mail profile’ dropdown.\n• Tick ‘Replace tokens for all job responses to alerts’.\n\nNow, you need to set up an Operator that will be a recipient of your emails. Head back to the list under SQL Server Agent, right-click on ‘Operators’ and pick ‘New Operator’.\n\nIn the new menu, you simply need to insert the recipient’s email address, a. Adding a ‘Pager e-mail name’ is optional.\n\nTo apply the changes, you’ll need to restart the service of SQL Server Agent and then pick ‘Start’ to resume our project.\n\nOnce you’re back, it’s time to create a new SQL Job. Right-click on ‘Jobs’ and pick ‘New Job…” from the top of the list.\n\nHere, tick the box to the left of ‘E-mail’ field. Choose your newly created profile from the dropdown list and then select the condition. In our example, we’ll want to send an email to ‘Operator’ when the job completes.\n\nSave and move on to the last stage. You should have a profile set up along with an Operator and a Job. Now you only need to create a Maintenance Plan. To no surprise, you can do it with yet another Wizard.\n\nFind the ‘Maintenance Plans’ menu and right-click on ‘New Maintenance Plan…”. The new screen gives you some ideas about the kind of things you’ll be able to set up.\n\nYou can name it right away and then move on.\n\nIn the next step, you can specify exactly what the task this time will be.\n\nYou’ll see your newly created task on the list. If you created some before, you’ll be able to prioritize them at this stage.\n\nAt the next stage, you can select which databases you want the task to be performed on. On the same screen, you can also choose where backups should be saved.\n\nIn the ‘Destination’ tab, you can choose exactly where on your drive backups should be saved. Use ‘Options’ tab to review the default options and adjust them to your liking.\n\nOn the following screen, you can choose to create a report to a text file (and pick a path where it should be saved). But what interests us the most is sending an e-mail report. Here, pick the profile you want to use for sending these reports.\n\nAt the last step, you’ll see all the settings you just set up. If everything checks out, click on ‘Finish’ and just wait for the first email to arrive in the specified inbox.\n\nAnother method for sending emails is with a system stored procedure called sp_send_dbmail. This way, you can send emails to specified recipients and include in the email query results, attachments or both.\n\nFirst things first, if you didn’t follow the first, wizard-based method we covered and you’re using SQL Server Express, you’ll need to enable Database Mail first. Kindly follow the instructions from the earlier paragraph.\n\nNow we’ll need to set up a Mail Account. In this example, we used standard Gmail credentials but of course, you’re free to use any account you have access to. If you need help deciding on which port you should use, check out our article on SMTP Ports.\n\nImmediately after this is executed, you can view the new records in the and tables.\n\nWe now have an account. Now we need to set up a new profile in Database Mail and attach it to our new account.\n\nYou’ll notice quickly that the sysmail_profile and sysmail_profileaccount tables have been updated.\n\nNow that we have everything set up, we can proceed with a test email:\n\nOnce you hit ‘ENTER’, the email will appear in the queue in the tables and move to table shortly after regardless of the result. Of course, if you have set everything up properly, it should also land in the inbox of your recipients.\n\nOK, that was easy, but we came here to set up emails that are a bit more sophisticated. Let’s look at some of the available arguments we can use in such emails.\n\nYou can add any attachments to your email by specifying their absolute paths here. Each file can be a maximum of 1MB in size.\n\nThis way you can execute any Transact-SQL query and attach it in the email body. Be aware that the query you specify here is executed in a separate session so you can’t use any local variables specified in the script on this occasion.\n\nIf you specify a query, you can also use an argument to specify a database on which the stored procedure will run the query\n\nTo specify if the results of a query should be sent as an attachment or be inserted into an email body, use an argument. The value of ‘0’ indicates that the results should go into the body – this is also what will happen if this argument is skipped. The value of ‘1’ indicates an attachment.\n\nThere are a number of further customizations you can perform on the query results to, for example, include or exclude headers or decide how to handle errors. Review them all in Microsoft’s Documentation.\n\nThe third approach to the problem is with CLR Stored Procedure. There can be a number of reasons why you would want to do this. For example, maybe you’re using SQL Server Express which doesn’t offer support for Transact-SQL and you’re not able to run sp_send_dbmail. Or maybe you need more control of the email sending process or lack sufficient rights on the instance level.\n\nWhatever the reason, setting up a SQLCLR Stored Procedure for sending emails is fairly easy.\n\nIf you haven’t written any CLR procedures before, be sure to review Microsoft’s Documentation for tips on getting started and basic examples.\n\nAlso, you need to enable CLR first to use the following procedures. CLR integration in SQL Server is off by default. Here’s how to enable it.\n\nYou’re free to use either VB.NET or C#.NET to write the procedure. We’ll stick with the first one here.\n• We created a procedure that’s supposed to send an email with defined ‘Subject’ and ‘Body’, using ‘From’ and ‘To’ variables as a sender and a recipient, respectively\n• We also added our example credentials, including the SMTP port, login, and password. Of course, Gmail is just an example here.\n\nNow, let’s compile it on the machine the code will run on. An example command link may look as follows if you used vbc.exe application:\n\nIn the following step, you’ll need to create the assembly and the stored procedure in SQL Server.\n\nIf you’re seeing an error when trying to compile, try to alter the code with the following and try again:\n\nFinally, test whether everything works as expected. Here’s an example code using the same parameters we indicated above:\n\nOf course, you can use a lot more sophisticated arguments in your procedures, such as:\n• @fileAttachments – include attachments in your email, specifying their absolute paths. 1MB per file allowed.\n• @replyAddress – accept responses at another address than specified in the ‘From’ field. One address allowed.\n• @bodyHtml – allow or disallow HTML. Allowed by default.\n\nHere’s an example using some of these arguments:\n\nIf you encountered any problems when executing an SQL procedure, first things first, check whether the SMTP server is set up properly. Verify your credentials and try sending a test email with another account (preferably from another provider too). If everything’s fine on this end, launch Visual Studio and start debugging your code.\n\nWhen using either of the first two methods, Database Mail could be the source of the problem. There are a lot of things that could have gone wrong. This guy has a compelling list of 21 troubleshooting steps you should consider.\n\nFinally, if emails are sent but you’re not entirely sure whether they’re set up as expected, you probably want to route them to a dedicated environment for testing. One such example is Mailtrap Email Testing, a pre-production email testing solution.\n\nWith Mailtrap, you can gather all your emails sent from SQL Server in a single inbox. Here, you can check them for possible HTML issues, and validate the links or attachments. You can also bcc Mailtrap on all your outgoing emails. This way, you’ll get a copy of each email sent so you can quickly inspect these emails and fix them right away."
    },
    {
        "link": "https://learn.microsoft.com/en-us/sql/relational-databases/database-mail/database-mail?view=sql-server-ver16",
        "document": "Database Mail is an enterprise solution for sending e-mail messages from the SQL Server Database Engine or Azure SQL Managed Instance. Your applications can send e-mail messages to users using Database Mail via an external SMTP server. The messages can contain query results, and can also include files from any resource on your network.\n\nDatabase Mail is designed for reliability, scalability, security, and supportability.\n• None Database Mail uses the standard Simple Mail Transfer Protocol (SMTP) to send mail. You can use Database Mail without installing an Extended MAPI client on the computer that runs SQL Server.\n• None Process isolation. To minimize the impact on SQL Server, the component that delivers e-mail runs outside of SQL Server, in a separate process. SQL Server will continue to queue e-mail messages even if the external process stops or fails. The queued messages will be sent once the outside process or SMTP server comes online.\n• None Failover accounts. A Database Mail profile allows you to specify more than one SMTP server. Should an SMTP server be unavailable, mail can still be delivered to another SMTP server.\n• None Cluster support. Database Mail is cluster-aware and is fully supported on a cluster.\n• None Background Delivery: Database Mail provides background, or asynchronous, delivery. When you call to send a message, Database Mail adds a request to a Service Broker queue. The stored procedure returns immediately. The external e-mail component receives the request and delivers the e-mail.\n• None Multiple profiles: Database Mail allows you to create multiple profiles within a SQL Server instance. Optionally, you can choose the profile that Database Mail uses when you send a message.\n• None Multiple accounts: Each profile can contain multiple failover accounts. You can configure different profiles with different accounts to distribute e-mail across multiple e-mail servers.\n• None 64-bit compatibility: Database Mail is fully supported on 64-bit installations of SQL Server.\n• None Off by default: To reduce the surface area of SQL Server, Database Mail stored procedures are disabled by default.\n• None Mail Security:To send Database Mail, you must be a member of the DatabaseMailUserRole database role in the database.\n• None Profile security: Database Mail enforces security for mail profiles. You choose the database users or groups that have access to a Database Mail profile. You can grant access to either specific users, or all users in . A private profile restricts access to a specified list of users. A public profile is available to all users in a database.\n• None Attachment size governor: Database Mail enforces a configurable limit on the attachment file size. You can change this limit by using the sysmail_configure_sp stored procedure.\n• None Prohibited file extensions: Database Mail maintains a list of prohibited file extensions. Users cannot attach files with an extension that appears in the list. You can change this list by using sysmail_configure_sp.\n• None Database Mail runs under the SQL Server Engine service account. To attach a file from a folder to an email, the SQL Server engine account should have permissions to access the folder with the file.\n• None Integrated configuration: Database Mail maintains the information for e-mail accounts within SQL Server Database Engine. There is no need to manage a mail profile in an external client application. Database Mail Configuration Wizard provides a convenient interface for configuring Database Mail. You can also create and maintain Database Mail configurations using Transact-SQL.\n• None Logging. Database Mail logs e-mail activity to SQL Server, the Microsoft Windows application event log, and to tables in the database.\n• None Auditing: Database Mail keeps copies of messages and attachments sent in the database. You can easily audit Database Mail usage and review the retained messages.\n• None Support for HTML: Database Mail allows you to send e-mail formatted as HTML.\n\nDatabase Mail is designed on a queued architecture that uses service broker technologies. When users execute , the stored procedure inserts an item into the mail queue and creates a record that contains the e-mail message. Inserting the new entry in the mail queue starts the external Database Mail process (DatabaseMail.exe). The external process reads the e-mail information and sends the e-mail message to the appropriate e-mail server or servers. The external process inserts an item in the Status queue for the outcome of the send operation. Inserting the new entry in the status queue starts an internal stored procedure that updates the status of the e-mail message. Besides storing the sent, or unsent, e-mail message, Database Mail also records any e-mail attachments in the system tables. Database Mail views provide the status of messages for troubleshooting, and stored procedures allow for administration of the Database Mail queue.\n\nDatabase Mail consists of the following main components:\n• Database Mail stores configuration and security information in the database. Configuration and security objects create profiles and accounts used by Database Mail.\n• The database acts as the mail-host database that holds the messaging objects that Database Mail uses to send e-mail. These objects include the stored procedure and the data structures that hold information about messages.\n• The Database Mail executable is an external program that reads from a queue in the database and sends messages to e-mail servers.\n• Database Mail records logging information in the database and the Microsoft Windows application event log.\n\nSQL Server Agent can be configured to use Database Mail. This is required for alert notifications and automatic notification when a job completes.\n\nYou can configure SQL Server Agent to send e-mail messages to predefined operators when:\n• None An alert is triggered. Alerts can be configured to send e-mail notification of specific events that occur. For example, alerts can be configured to notify an operator of a particular database event or operating system condition that may need immediate action. For more information about configuring alerts, see Alerts.\n• None A scheduled task, such as a database backup or replication event, succeeds or fails. For example, you can use SQL Server Agent Mail to notify operators if an error occurs during processing at the end of a month."
    },
    {
        "link": "https://stackoverflow.com/questions/53730214/how-can-i-set-sp-send-dbmail-to-email-the-query-results",
        "document": "I've been tasked with creating a list of departed users that we need to archive in an in-house app.\n\nI've written the select statement (SQL Server 2012) and it works fine. I can get the email to send from but the email only has the line I put in the body. When I change the info, it still just uses the original line I entered. It's not changing for what I've added there, and I can't get it to send the results of the .\n\nHere what I have so far:\n\nI've also tried adding to the and putting the into the :"
    },
    {
        "link": "https://dba.stackexchange.com/questions/168395/execute-sql-statement-and-send-result-to-email",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-send-dbmail-transact-sql?view=sql-server-ver16",
        "document": "Sends an e-mail message to the specified recipients. The message might include a query result set, file attachments, or both. When mail is successfully placed in the Database Mail queue, returns the of the message. This stored procedure is in the database.\n\nThe name of the profile to send the message from. The @profile_name is of type sysname, with a default of . The @profile_name must be the name of an existing Database Mail profile. When no @profile_name is specified, uses the default private profile for the current user. If the user doesn't have a default private profile, uses the default public profile for the database. If the user doesn't have a default private profile and there's no default public profile for the database, @profile_name must be specified.\n\nA semicolon-delimited list of e-mail addresses to send the message to. The recipients list is of type varchar(max). Although this parameter is optional, at least one of @recipients, @copy_recipients, or @blind_copy_recipients must be specified, or returns an error.\n\nA semicolon-delimited list of e-mail addresses to carbon copy the message to. The copy recipients list is of type varchar(max). Although this parameter is optional, at least one of @recipients, @copy_recipients, or @blind_copy_recipients must be specified, or returns an error.\n\nA semicolon-delimited list of e-mail addresses to blind carbon copy the message to. The blind copy recipients list is of type varchar(max). Although this parameter is optional, at least one of @recipients, @copy_recipients, or @blind_copy_recipients must be specified, or returns an error.\n\nThe value of the 'from address' of the email message. This is an optional parameter used to override the settings in the mail profile. This parameter is of type varchar(max). SMTP security settings determine if these overrides are accepted. If no parameter is specified, the default is .\n\nThe value of the 'reply to address' of the email message. It accepts only one email address as a valid value. This is an optional parameter used to override the settings in the mail profile. This parameter is of type varchar(max). SMTP security settings determine if these overrides are accepted. If no parameter is specified, the default is .\n\nThe subject of the e-mail message. The subject is of type nvarchar(255). If no subject is specified, the default is 'SQL Server Message'.\n\nThe body of the e-mail message. The message body is of type nvarchar(max), with a default of .\n\nThe format of the message body. The parameter is of type varchar(20), with a default of . When specified, the headers of the outgoing message are set to indicate that the message body has the specified format. The parameter might contain one of the following values:\n\nThe importance of the message. The parameter is of type varchar(6). The parameter might contain one of the following values:\n\nThe sensitivity of the message. The parameter is of type varchar(12). The parameter might contain one of the following values:\n\nA semicolon-delimited list of file names to attach to the e-mail message. Files in the list must be specified as absolute paths. The attachments list is of type nvarchar(max). By default, Database Mail limits file attachments to 1 MB per file.\n\nA query to execute. The results of the query can be attached as a file, or included in the body of the e-mail message. The query is of type nvarchar(max), and can contain any valid Transact-SQL statements. The query is executed in a separate session, so local variables in the script calling aren't available to the query.\n\nWhen you use the @query parameter, the principal which executes must be connected as an individual, not as part of a group, whether a Microsoft Entra ID (formerly Azure Active Directory) or Windows Active Directory group. SQL Server logins, Windows identities, and Microsoft Entra identities can execute the query, but group members can't, due to Azure SQL Managed Instance impersonation and EXECUTE AS limitations.\n\nThe database context within which the stored procedure runs the query. The parameter is of type sysname, with a default of the current database. This parameter is only applicable if @query is specified.\n\nSpecifies whether the result set of the query is returned as an attached file. @attach_query_result_as_file is of type bit, with a default of .\n\nWhen the value is , the query results are included in the body of the e-mail message, after the contents of the @body parameter. When the value is , the results are returned as an attachment. This parameter is only applicable if @query is specified.\n\nSpecifies the file name to use for the result set of the query attachment. @query_attachment_filename is of type nvarchar(255), with a default of . This parameter is ignored when @attach_query_result_as_file is . When @attach_query_result_as_file is and this parameter is , Database Mail creates an arbitrary filename.\n\nSpecifies whether the query results include column headers. The query_result_header value is of type bit. When the value is , query results contain column headers. When the value is , query results don't include column headers. This parameter defaults to . This parameter is only applicable if @query is specified.\n\nThe following error might occur when setting @query_result_header to and setting @query_no_truncate to :\n\nThe line width, in characters, to use for formatting the results of the query. The @query_result_width is of type int, with a default of . The value provided must be between and . This parameter is only applicable if @query is specified.\n\nThe character used to separate columns in the query output. The separator is of type char(1). Defaults to (space).\n\nSpecifies whether to return the output of the query execution in the e-mail message. @exclude_query_output is bit, with a default of . When this parameter is , the execution of the stored procedure prints the message returned as the result of the query execution on the console. When this parameter is , the execution of the stored procedure doesn't print any of the query execution messages on the console.\n\nSpecifies whether to send the e-mail when an error returns from the query specified in the @query argument. @append_query_error is bit, with a default of . When this parameter is , Database Mail sends the e-mail message and includes the query error message in the body of the e-mail message. When this parameter is , Database Mail doesn't send the e-mail message, and ends with return code , indicating failure.\n\nSpecifies whether to execute the query with the option that avoids truncation of large variable length data types (varchar(max), nvarchar(max), varbinary(max), xml, text, ntext, image, and user-defined data types). When set, query results don't include column headers. The @query_no_truncate value is of type bit. When the value is or not specified, columns in the query truncate to 256 characters. When the value is , columns in the query aren't truncated. This parameter defaults to .\n\nThe type is bit. The default is . When you set to , the query results aren't padded, possibly reducing the file size. If you set @query_result_no_padding to and you set the @query_result_width parameter, the @query_result_no_padding parameter overwrites the @query_result_width parameter.\n\nIn this case, no error occurs.\n\nThe following error might occur when setting @query_result_no_padding to and providing a parameter for @query_no_truncate:\n\nIf you set the @query_result_no_padding to and you set the @query_no_truncate parameter, an error is raised.\n\nOptional output parameter returns the of the message. @mailitem_id is of type int.\n\nA return code of means success. Any other value means failure. The error code for the statement that failed is stored in the variable.\n\nBefore use, Database Mail must be enabled using the Database Mail Configuration Wizard, or .\n\nstops Database Mail by stopping the Service Broker objects that the external program uses. still accepts mail when Database Mail is stopped using . To start Database Mail, use .\n\nWhen @profile isn't specified, uses a default profile. If the user sending the e-mail message has a default private profile, Database Mail uses that profile. If the user has no default private profile, uses the default public profile. If there's no default private profile for the user and no default public profile, returns an error.\n\ndoesn't support e-mail messages with no content. To send an e-mail message, you must specify at least one of @body, @query, @file_attachments, or @subject. Otherwise, returns an error.\n\nDatabase Mail uses the Windows security context of the current user to control access to files. Therefore, users who are authenticated with SQL Server Authentication can't attach files using @file_attachments. Windows doesn't allow SQL Server to provide credentials from a remote computer to another remote computer. Therefore, Database Mail might not be able to attach files from a network share in cases where the command is run from a computer other than the computer that SQL Server runs on.\n\nIf both @query and @file_attachments are specified and the file can't be found, the query is still executed but the e-mail isn't sent.\n\nWhen a query is specified, the result set is formatted as inline text. Binary data in the result is sent in hexadecimal format.\n\nThe parameters @recipients, @copy_recipients, and @blind_copy_recipients are semicolon-delimited lists of e-mail addresses. At least one of these parameters must be provided, or returns an error.\n\nWhen executing without a transaction context, Database Mail starts and commits an implicit transaction. When executing from within an existing transaction, Database Mail relies on the user to either commit or roll back any changes. It doesn't start an inner transaction.\n\nExecute permissions for default to all members of the DatabaseMailUserRole database role in the database. However, when the user sending the message doesn't have permission to use the profile for the request, returns an error and doesn't send the message.\n\nThis example sends an e-mail message to your friend using the e-mail address . The message has the subject . The body of the message contains the sentence .\n\nB. Send an e-mail message with the results of a query\n\nThis example sends an e-mail message to your friend using the e-mail address . The message has the subject , and executes a query that shows the number of work orders with a less than two days after April 30, 2022. Database Mail attaches the result as a text file.\n\nThis example sends an e-mail message to your friend using the e-mail address . The message has the subject , and contains an HTML document that shows the work orders with a less than two days after April 30, 2022. Database Mail sends the message in HTML format."
    }
]