[
    {
        "link": "https://docs.luanti.org/for-creators/modding-tips",
        "document": "This page is a random collection of various tips and tricks, and solutions to common tasks/problems that occur frequently in mod/game development. See also: Modding FAQ\n\nIf your game or mod crashes due to an OOM error, it means that Luanti has ran out of memory (=OOM). This happens if your Lua code somewhere uses up a large amount of memory. This can happen if you construct large tables and fill them with lots of data and never free them, or you got a nice memory leak. Badly coded mapgens are a likely cause of OOM errors, if you implement a Lua API, you should always apply all Mapgen memory optimizations.\n\nIf you debug log level is set to “warning” or lower, you probably ran into the warning “Irrlicht: PNG warning: iCCP: known incorrect sRGB profile” quite often.\n\nIf you want to track down which PNGs are broken, set the debug level ( ) to “verbose”. Now the log will show the PNG file name right above the warning. Now just fix the offending PNGs with your favorite image editor to get rid of these warnings.\n\nAs Luanti develops, some API functions fall out of use and become deprecated in favour of newer functions with different names. Looking at console log or debug log output should give you the deprecation warnings that your mod throws. See the warning, which might give the name of the new function, and the Lua API for any eventual change in behavior it has.\n\nWhen upgrading your mod from version 0.4.x to 5.x, you may use the MT-replace-deprecated.sh script (forum thread) which can automatically rename some deprecated functions.\n\nTo abort on any execution of a deprecated function, you can set the “deprecated_lua_api_handling” setting to “error”, useful during development to clearly see any deprecated functions being used.\n\nPositional sounds are either full volume or completely silent #\n\nProblem: You want to play a sound at a position, but it’s always at full volume when you’re in range or completely silent if you’re not. For example, you have a zombie that growls, but when it growls, somehow its growl is either at full volume or not hearable at all (if you’re out of the sound range); there’s no gradient at all. This can be annoying.\n\nReason: Your audio file is probably stereo. The fix is to make all positional sounds mono. You probably want to check ALL audio files then, it’s very likely this wasn’t the only one.\n\nNote that non-positional sounds do not have to be mono, so you don’t have to touch them.\n\nThe mapgen generates some nodes that let me see through the world but I still collide and/or interact with them #\n\nThis can happen in the mapgen v6 if you forgot to set some mapgen aliases, or a mapgen alias is set to a non-existing node. What is happening here is that these “broken” nodes are ignore nodes because the v6 mapgen doesn’t know which node to place here (because the given node name was invalid or undefined).\n\nIf you are using the mapgen v6, you must make sure that the mapgen aliases are set to a valid value. See for a list.\n\nThe lighting of my node is all-dark / messed up #\n\nThis is probably because they don’t have set. Some node drawtypes like “mesh” require it for the lighting to work correctly (see for details). If this case applies to you, you need to add .\n\nNote that updating the node definition will not immediately fix nodes in existing worlds, the lighting of those nodes needs to be updated as well. This can be done by calling the command\n\nIf you have plant decorations that for some inexplicable reason float in the air, there are multiple possible reasons for this, but here are some of the common ones:\n• The v6 mapgen is a little buggy\n• Other decorations accidentally have plants on the floor and the schematic author overlooked them when saving the schematic\n\nBy default, warnings are only seen in the debug log file and the program’s console. For developers, it is very helpful to make all warnings visible in the chat as well so you won’t miss them. Many warnings are about stuff like deprecated code, so it’s a good idea to have them always highly visible.\n\nSet the setting to to enable this.\n\nIf you created a Lua mapgen, it is strongly recommended to make sure you optimize the memory performance, otherwise you could quickly run into OOM (out-of-memory) errors. See Mapgen memory optimizations.\n\nFor more optimization tips, go to Lua Optimization Tips.\n\nIf you want to check if a mod named “example” is currently loaded and actively used, use this code:\n\nNow will be true if the mod exists and false otherwise.\n\nThis works because returns nil if the mod is not loaded.\n\nA good mod is one that still works when a lot of other mods are used. Read Mod_interoperability for a lot of useful hints.\n\nHere’s a list of things to check in your game or mod to improve general quality and to avoid common pitfalls. Not all things might apply for your game, always use good judgement.\n\nNote: Some of these can be checked quickly with QA-Block. See also: Development Tools.\n• In , do you consider that any external variable or object might become nil or disappear in the meantime?\n• In formspecs, did you check for all Time Of Check is not Time Of Use vulnerabilities?\n• In formspecs, do you Never Trust User-Provided Data?\n• In formspecs, do you enclose all variable, unpredictable text in ?\n• Does the game behave properly when restarted?\n• Did you check if implementing mod security is necessary? If yes, did you implement it?\n• For singleplayer games: Do you error out if someone tries to run your game in multiplayer?\n• Do you restrict detached inventories to players, where necessary?\n• Does the game/mod avoid polluting the global namespace with tons of identifiers?\n• Are all APIs (that are intended for external use) documented?\n• Do you use the “buffer” argument in the LuaVoxelManip and Perlin noise functions (like or )?\n• Do you avoid re-creating the same Perlin noise over and over again?\n• Do all entities still behave properly when they unload, and then load again?\n• If you change player physics ( ) anywhere, will it still work when another mod changes it?\n• Is set to false for all nodes that the cavegen should not destroy?\n• Do all nodes have appropriate sounds?\n• Do all nodes have appropriate selection boxes?\n• Do all items intended for use only in Creative Inventory have set the group?\n• For games: Are all unsupported mapgens disabled in game.conf?\n• Does your game/mod have a name?\n• Is the name of the game/mod used consistently everywhere?\n• Does the UI still work in higher scaling/DPI?\n• Do your leaves still look okay when simple leaves are used ( )\n• Do all items that the player can legitimately get have set?\n• Do all chat commands have and parameter list set?\n• In the parameter list of chat commands, does it follow the format defined in ?\n• Do all items have unique descriptions (=no confusing duplicates, unless intentional for some reason)\n• Is the writing style consistent across the entire game?\n• Do you use instead of a custom transparent image?\n• Do all items have an appropriate item image that helps in keeping items apart?\n• Does the UI provide reasonably enough space for translations?\n• Was at least one translation play-tested?\n• Do you avoid using string concatenation to include variable text?\n• Can all user-facing texts be translated?\n• Have all in-game images with baked-in, untranslatable texts, been replaced with text?"
    },
    {
        "link": "http://mrob.com/pub/vidgames/minetest.html",
        "document": "Where the *%$& are the screenshots?\n\nOn MacOS versions of minetest, the F12 button puts the screen shot in a folder deep within the minetest application itself. On my sytem, the screenshots are saved to:\n\nIn bin/builtin/common/serialize.lua is the following line:\n\nwhich causes the lua virtual machine to die with the errors\n\nwhenever an attempt is made to minetest.serialize something containing a lua userdata type data block (for example, a player object as returned by minetest.get_player_by_name will do this). To fix it, \"t\" should be changed to \"tp\":\n\nThis bug is present in minetest 0.4.11 and was fixed on 2015 Jan 15 by kaeza (see file history at github.com/minetest/minetest/blob/master/builtin/common/serialize.lua )\n\nIf you install a mod then remove it, or try to rename a mod's directory, minetest will usually display useless errors at startup referring to the old name of the renamed or removed mod:\n\nThe following mods could not be found: \"old_mod_name\"\n\nTo fix this, edit worlds/WORLD-NAME/world.mt and find and remove the line that says\n\nUsing ffmpeg to change the audio volume of the sheep bleat sound:\n\nThe sound made by the sheep in the mobs (simple mods) mod by PilzAdam is way too loud.\n• # If you're playing, (Escape then \"Exit to Menu\", but you don't have to \"Exit to OS\")\n\nIf you see error messages like these in \"\n\nIrrlicht log: Could not open file of texture: character.png Irrlicht log: Could not open file of texture: mobs_sheep.png Irrlicht log: Could not open file of texture: UV_rat.png\n\nIt might be caused by un-needed TextureFilename lines in the \".x\" files used to define the 3-D appearance of mobs. For example, the error ending in \"mobs_sheep.png\" was caused by the following section of MINETEST_FOLDER/mods/mobs/models/mobs_sheep.x :\n\nto remove the bogus error messages all I had to do was comment out the \"TextureFilename\" line (by adding \"//\" in front of it).\n\nI have colleceted some useful pages here and added to some.\n\nA day in Minetest (uses other world times than in the \"Important times of day\" section)\n\nTime of day determines the position of the sun, moon and stars in the day-night cycle. It is represented as a number which is between 0 and 24000 (24000 excluded), this range represents a full day. This number resembles the 24-hour system, where the full hours are multiplied by 1000. So, for example 12:00 would correspond to 12000 time of day (think of it only as a guide to get an idea how it works).\n\nThe world time can be set with the /time command by players who have the \"settime\" privilege. It takes the desired time of day as it's only parameter. Refer the the \"Important times of day\" section as a guide.\n\n/time 6000 - sets the time of day to morning (corresponds to 6:00)\n\n/time 12000 - sets the time of day to midday (corresponds to 12:00)\n\nThe following world times were taken from a case study. The numbers in brackets denote the brightness level compared to moonlight (higher is brighter, this number is only used for this article).\n• At 0 time of day (tod) the day begins; it is midnight and the moon is exactly at the zenith (1).\n• At 4500 tod, the first sun rays emit from the horizon, it gets brighter (2).\n• At 4750 tod, the sun rises and it gets brighter (3).\n• At 5001 tod, it gets brighter again (4).\n• At 5200 tod, the sun becomes fully visible (4).\n• At 5250 tod, it gets brighter again (5).\n• At 5500 tod, it gets brighter again (6).\n• At 12000 tod is midday; the sun is exactly at the zenith (7).\n• At 18250 tod, the day is going to end, it gets a bit darker (6).\n• At 18502 tod, it gets a bit darker again (5).\n• At 18600 tod, the sun begins to set (5).\n• At 18752 tod, it gets a bit darker yet again (4).\n• At 19000 tod, the sky gets even darker (3).\n• At 19252 tod, the sun is almost gone and the sky gets even darker (2).\n• At 19359 tod, the sun square is gone and the last sun rays emit from the horizon (2).\n• At 19500 tod, the sun rays stop from being visible (2).\n• At 19502 tod, the sky has the lowest brightness (1).\n• At 24000 tod, the day ends and the next one starts; it is midnight again (1).\n\nIn the world files in env_meta.txt, the time of day is stored as \"time_of_day\".\n\nMods like the beds mod change the time of day with an API call like \"minetest.set_timeofday(0.23)\" (documented below)\n\nFollowing are a few pages of reference material on minetest programming, that I want to keep all in one place (becaue the Wikis are terrible)\n\nSpawns Lua entitiy at pos. Returns ObjectRef or nil if failed.\n\nReturns time of day on a scale of 0.0 to 1.0. Note that the console /time command uses a scale of 0 to 24000, so this example prints the time on that scale:\n\nThese are non-player moving things in the game. It inherits all the properties of ObjectRef.\n\nNew entity types are registered using minetest.register_entity(...) and the prototype definitions indexed using minetest.registered_entities[\"name\"]. Instances are created using minetest.add_entity(...) and may be indexed using minetest.luaentities[objectID]\n\nget_entity_name() DEPRECATED: Will be removed in a future version\n\nIn place of this, use object.get_luaentity().name\n\nsetsprite(p={x=0,y=0}, num_frames=1, framelength=0.2, select_horiz_by_yawpitch=false) — Select sprite from spritesheet with optional animation and DM-style texture selection based on yaw relative to camera\n\nNote: Documented in lua_api.txt but not yet implemented as of version 0.4.4\n\nget_inventory() — returns the InvRef of the object.\n\nget_wielded_item() — returns the wielded item (ItemStack). This is essentially just a pseudonym for object:get_inventory():get_stack(object:get_wield_list(), object:get_wield_index()) so please note the caveats for inventory manipulation (changes will need to be \"committed\" by calling object:set_wielded_item(modifiedStack) after modifying the stack unless they are done in the context of a callback that implicitly modifies the stack; see minetest.register_node#on_use).\n\nget_wield_index() — returns the index of the wielded item\n\nget_wield_list() — returns the name of the inventory list the wielded item is in\n\ntime_from_last_punch — time since last punch action of the puncher\n\nEach LuaEntitySAO object is backed by a Lua entity copied from the prototype definition given to minetest.register_entity(...). This Lua entity is the place where a mod should store the data and methods it uses to implement custom entities.\n\nThe Lua entity's properties are initialized from the prototype's properties. In addition it has the following added properties:\n\nname — The registered name passed to minetest.register_entity(...).\n\nThe Lua entity object may be obtained from the LuaEntitySAO using get_luaentity().\n\nUser code may include arbitrary fields and methods in the Lua entity by adding them to the prototype. Runtime values may then be set for each instance individually inside the on_activate(self, staticdata) callback (see below) or by the code causing the entity to be spawned. The following properties are treated specially by the engine if included:\n\ninitial_properties — Initial values for the ObjectRef properties (hp_max, physical, collisionbox, etc.).\n\non_activate(self, staticdata) — Callback method called by the engine when a new entity is instantiated (spawned) using minetest.add_entity(...) or re-instantiated after the object is deactivated.\n\nstaticdata — String obtained from get_staticdata() when the entity is saved for later re-instantiation. For a newly created entity (i.e. created using minetest.add_entity(...)), this is the empty string (not nil).\n\ndtime — time since last call (usually 0.05 seconds)\n\non_punch(self, puncher, time_from_last_punch, tool_capabilities, dir) — Called by the engine when somebody punches the object. Note that you probably want to handle most punches using the automatic armor group system (See Entity Damage below).\n\ntime_from_last_punch — Can be used to calculate damage. Can be nil.\n\ntool_capabilities — Capability table of used tool. Can be nil.\n\ndir — Unit vector in the direction of the punch. Points from the puncher to the entity, and is always defined.\n\non_rightclick(self, clicker) — Callback method called when entity is right-clicked by player.\n\nget_staticdata(self) — Used to serialize the entity state when the entity is being deactivated. It must return a string, and this string will be passed to on_activate(self, staticdata) when the entity is re-instantiated.\n\nBy default damage to entities is handled automatically by the engine in a way that is designed to be generic enough to mix use of tools both to dig nodes and act as weapons against entities. This relies heavily on the Groups mechanism. For a tool to damage an entity, the tool's capabilities must specify that it can damage things belonging to a group that the entity has a rating for (the armor_groups field). For example, in the default game living things usually have a rating from 1 to 3 in the \"fleshy\" group, and a weapon will specify that it can damage \"fleshy\" things, whereas a shovel can only dig/damage \"crumbly\" things.\n\nThe way the amount of damage is actually determined is by calculating how many nodes with the matching group the tool could dig in the time between swings (with the initial and maximum time being the tool's \"full punch interval\"), and applying this directly as hit point loss (TODO: figure out what happens when MULTIPLE groups match; is the best one taken, or are results added, or...?). This calculation is done based on the entity's rating in the matching group, with lower values representing the toughest/least damaged nodes/entities. It is also influenced by some special group ratings for the entity:\n• immortal — If the entity belongs to this group (has a rating greater than 0) it is not damaged at all by the default damage mechanism.\n• level — Used to give both entities and tools a progression in the game, with ratings starting at 0 and increasing for tougher, more powerful things. A tool cannot damage an entity with a level over its specified maximum level for a matching group, and can damage the entity more/faster if the tool's maximum level exceeds the entity's level.\n• punch_operable — Special armor group for an entity which disables the damage mechanism for players punching by hand or with a non-tool item, so that it can do something other than taking damage in this circumstance. (NOTE: This only works if the entity does not also belong to a normal armor group like 'fleshy')\n\nTo punch an entity or object programmatically, call ObjectRef:punch(...). This ties in with the automatic damage mechanism and entity on_punch(...) callback, whereas a simple HP adjustment using ObjectRef:set_hp(...) does not.\n\nFor details about the automatic damage and dig time calculations, see the \"lua_api.txt\" file included with the game's documentation.\n\nFor example Lua entity code see the \"item_entity.lua\" file included with the game. This file implements the \"__builtin:item\" entity type, which is used by the game for items dropped on the ground (e.g. when leaves drop saplings or a player drops an item instead of using it to build a node).\n\nMoving things in the game are generally these (basically reference to a C++ ServerActiveObject).\n\nNote that all ObjectRefs except player are actually LuaEntitySAO.\n\nNote: Documented in lua_api.txt but not yet implemented as of version 0.4.4\n\nget_inventory() — returns the InvRef of the object.\n\nget_wielded_item() — returns the wielded item (ItemStack). This is essentially just a pseudonym for object:get_inventory():get_stack(object:get_wield_list(), object:get_wield_index()) so please note the caveats for inventory manipulation (changes will need to be \"committed\" by calling object:set_wielded_item(modifiedStack) after modifying the stack unless they are done in the context of a callback that implicitly modifies the stack; see minetest.register_node#on_use).\n\nget_wield_index() — returns the index of the wielded item\n\nget_wield_list() — returns the name of the inventory list the wielded item is in\n\ntime_from_last_punch — time since last punch action of the puncher\n\n{ hp_max = 1, physical = true, weight = 5, collisionbox = {-0.5,-0.5,-0.5, 0.5,0.5,0.5}, visual = \"cube\"/\"sprite\"/\"upright_sprite\"/\"mesh\"/\"wielditem\", visual_size = {x=1, y=1}, mesh = \"model\", textures = {}, -- number of required textures depends on visual colors = {}, -- number of required colors depends on visual spritediv = {x=1, y=1}, initial_sprite_basepos = {x=0, y=0}, is_visible = true, makes_footstep_sound = false, automatic_rotate = false, }\n\n- Always looks at you (like the dropped items in 0.4.9)\n\n- You can go around it like a normal player\n\nsimilar to a wielded or dropped item; is like upright_sprite, but extruded.\n\nOverrides fields of an item registered with minetest.register_node / minetest.register_tool / minetest.register_craftitem. Item must already be defined, (opt)depend on the mod defining it.\n\nThe Active Block Modifier consists of a function that is executed at a specific interval for single nodes.\n\nabm_defintion_table is a table which can contain following fields: nodenames, neighbors, interval, chance, action\n\nnodenames is a list of the nodenames that should execute the function. \"group:groupname\" is also possible.\n\nneighbors is a list of nodenames. At least one of these nodes has to be near node that executes the function (can be nil). \"group:groupname\" is also possible.\n\ninterval is the interval in seconds that specifies when the function is executed. Minimuim is 1.0.\n\nchance is the inverted chance for each node to execute the function.\n\naction is the function that is executed. The parameters are (pos, node, active_object_count, active_object_count_wider) The object counts are useful for preventing overcrowding of spawned entities.\n\npos is the position of the node\n\nactive_object_count is the amount of objects inside the node\n\nactive_object_count is the amount of objects inside the node and its neighbours\n\nabms only work in active chunks. When a player enters an old chunk, abm functions are called at once, though farming plants grow a lot slower if seldom someone enters the chunk because the plant only grows one time/abm function call\n\nRegisters a LuaEntity that can be spawned as a LuaEntitySAO using mineteset.env:add_entity(...).\n\nentity_name — The registered name of the entity, used as the hash key for minetest.regsitered_entities and as the name property of each instantiated LuaEntity.\n\nThis article is incomplete. This article is missing examples, feel free to add them.\n\n{ hp_max = 1, physical = true, weight = 5, collisionbox = {-0.5,-0.5,-0.5, 0.5,0.5,0.5}, visual = \"cube\"/\"sprite\"/\"upright_sprite\"/\"mesh\"/\"wielditem\", visual_size = {x=1, y=1}, mesh = \"model\", textures = {}, -- number of required textures depends on visual colors = {}, -- number of required colors depends on visual spritediv = {x=1, y=1}, initial_sprite_basepos = {x=0, y=0}, is_visible = true, makes_footstep_sound = false, automatic_rotate = false, }\n\nRegisters a new node named \"name\". The node properties are specified in the Node definition (see below).\n\nNote that the node is not \"created\" immediately; it is stored in the minetest.registered_nodes list to be processed when all the mods have been loaded.\n\ndrawtype — Specifies how the game engine is to draw the node. See Node Drawtypes for more information.\n\nvisual_scale — Specifies the scale at which the item is drawn when it is wielded. Default is 1.0 (normal scale). 2.0 is double, 0.5 is half, and so on.\n\ntiles — Specifies the textures used for the node's faces. It's an array (table) of either one or six elements. If only one texture is needed, it can be specified directly as a string instead of a table. The textures are specified as strings as either \"texturename.png\" or \"texturename\". The order of the textures is +Y, -Y, +X, -X, +Z, -Z. In English: top, bottom, right, left, front, back.\n\nspecial_tiles — Specifies certain textures used in things like texture animations. [This text needs further expansion]\n\nuse_texture_alpha — Set this to true for the texture's alpha channel to be used.\n\nalpha — Alpha value (transparency) of the node, with 255 being fully opaque and 0 being fully transparent. Values in-between specify partial transparency. This only has an effect on liquid nodes.\n\npost_effect_color — Whenever a player is \"inside\" the node, the screen is tinted using this color. It is specified as a table with fields 'r', 'g', 'b', and 'a', which represent the Red, Green, and Blue components, and the effect transparency (Alpha). For example: { r=255, g=0, b=0, a=128 }.\n\ninventory_image — This texture will be used for every state except when placed in the world (i.e. it will be used in inventory and when dropped). If undefined (nil) an image will be automatically constructed from tiles.\n\nwield_image — The texture to display in place of the hand texture when the node is wielded. If undefined (nil), the inventory image will be used.\n\nparamtype — Specifies what the node's param1 should hold. Possible values are:\n\nnone — The engine does not use the param1 field, and it is free to be used for other purposes.\n\nlight — The value stored in param1 is the light level with and without sun in it's upper and lower 4 bits respectively.\n\nparamtype2 — Specifies what the node's param2 should hold. Possible values are:\n\nwallmounted — param2 field contains the wall to which this node is \"mounted\". See minetest.dir_to_wallmounted(dir).\n\nfacedir — param2 field contains the node's facing direction. Required to be able to orient nodes depending on the direction the player is facing. minetest.dir_to_facedir(dir).\n\nis_ground_content — If true, caves will carve through this\n\nsunlight_propagates — If true, sunlight will go infinitely through this\n\npointable — If true, can be pointed at\n\ndiggable — If false, can never be dug\n\nclimbable — If true, can be climbed on (ladder)\n\nbuildable_to — If true, placed nodes can replace this node\n\nliquid_renewable — If true, when placing two or more sources so that there's air between them, a new liquid source will be created.\n\nlight_source — Amount of light emitted by node, where 0 is no light, and 14 is sunlight-like light.\n\ndamage_per_second — If player is inside node, this damage is caused. This is used for example, by lava.\n\nlegacy_facedir_simple — Support maps made in and before January 2012\n\nlegacy_wallmounted — Support maps made in and before January 2012\n\nsounds — A table that specifies which sound to play when some events occur. See SimpleSoundSpec for details. The following events are defined for nodes:\n\nfootstep — Played when a player walks on the node.\n\ndig — Played while the player is digging the node. If it is \"__group\" is specified as value, it uses the group-based sound. [This text needs further expansion]\n\ndug — Played when the player finishes digging the node.\n\nWhen an inventory image or explicit wield image is selected by the engine to display in first-person view on the client, some processing is done to actually display it on the screen. The game takes the rightmost pixels in the image that are not 100% transparent (alpha=0) and duplicates them several times to the right to give the image a \"3D\" appearance. This can cause artifacts if those right-most pixels are partially transparent, or if anti-aliasing results in some of the pixels being partially transparent.\n\nHowever, you can use a trick to effectively turn this feature off: add some pixels of your own to the right of all \"real\" pixels in your image, and make them very close to fully transparent (alpha=1 when alpha ranges from 0 to 255, or alpha=0.005 when alpha ranges from 0.0 to 1.0, or alpha = 0.5% when alpha ranges from 0% to 100%; alpha and opacity are generally interchangeable terms in image editors, so setting the opacity of a layer in GIMP to 0.5% accomplishes this for all fully opaque pixels in the layer). This will cause these buffer pixels, which are generally invisible to the eye, to be duplicated instead of the \"real\" pixels of your image. This will allow you to have full control over the wielded item images and even use anti-aliasing for them.\n\nMust be used with a drawtype that does not perform backface culling.\n\nThere are currently two known, difficult-to-solve issues with this feature.\n\nWith shaders enabled, the faces of other transparent nodes are sometimes not drawn, depending on viewing angle. This is most noticable when a liquid is behind a node that uses the texture's alpha channel.\n\nWith shaders disabled, transparent objects farther away from the camera that should be occluded will be drawn over the node with this attribute. This is caused by the lack of transparency sorting, and is also the cause of water being drawn in front of clouds.\n\nWhen the following methods are defined in the node definition, the core engine will call them as callback methods as a result of direct events in the game such as a player punching the node or the node being added to the environment. Much of the default behavior of the game, such as adding a node to the environment when it is \"placed\", or adding an entity for an item when it is \"dropped\" can be replaced by overriding these callback methods. See src/scriptapi.cpp for more info.\n\nNode Constructor. This function is called after putting the node in the world. It can be used to set up the node's metadata.\n\npos — Position of the new node\n\nNode destructor. This function is called before removing the node.\n\npos — Position of the node being destroyed.\n\nNode destructor. This function is called after removing the node.\n\noldnode — A reference to the node that has been removed (TODO: verify this from C++ source; no documentation or examples are evident).\n\nCalled when a player places a node in-world. Returns itemstack modified according to the logic of the method (e.g. with one node removed from the count).\n\n1. Checks whether the destination can be built to (contains no node or one with the buildable_to flag turned on).\n\n3. Adds the node to the environment using minetest.add_node(...).\n\n4. Calls the after_place_node(...) and game-wide on_placement (see minetest.register_on_placenode) callbacks.\n\nitemstack — The ItemStack that contains the node being placed.\n\nplacer — The Player object for the player placing the node.\n\npointed_thing — The pointed_thing acting as a reference for where to place the node (i.e. what the player's crosshair is pointing at).\n\nCalled when a player drops a node item (as in drops its stack on the ground--with the Q button by default--not placing it in-world as a node). Returns itemstack modified according to the logic of the method (e.g. emptied of all contents).\n\nDefault: Reference to minetest.item_drop which calculates a point 1m in front of the camera, places an item entity (type \"__builtin:item\") there using minetest.add_item(...), and gives it a small \"push\" away from the camera using LuaEntitySAO.setvelocity(...).\n\nitemstack — The ItemStack that contains the node being dropped.\n\ndropper — The Player object for the player dropping the node.\n\npos — The position of the player dropping the node item. Note that this is not the place where the item is dropped in-world; it is up to this method to calculate that based on factors like which way the player is looking.\n\nCalled when player wields and uses the node item. Returns itemstack modified according to the logic of the method, or nil if no item is to be removed from inventory.\n\nitemstack — The ItemStack that contains the node being used.\n\nuser — The Player object for the player using the node item.\n\npointed_thing — The pointed_thing acting as a reference for where the player's crosshair is pointing.\n\nCalled when node is punched by player or using minetest.punch_node(...).\n\npos — Position of the node being punched.\n\nnode — Copy of the node being punched.\n\npuncher — Reference to an object indicating who or what is punching the node.\n\npointed_thing — Copy of pointed_thing (only in 0.4.10+).\n\nCalled when node is dug by player or using minetest.dig_node(...).\n\n2. Adds wear to the digger's wielded item, if any.\n\n4. Removes the node from the environment with minetest.remove_node(pos).\n\n5. Calls after_dig_node (if defined) and game-wide on_dignodes (see minetest.register_on_dignode) callbacks.\n\npos — Position of the node being punched.\n\nnode — Reference to the node being dug.\n\ndigger — Reference to an ObjectRef indicating who or what doing the digging.\n\nCalled by node timers. Should return a boolean indicating whether to run the timer for another cycle using the same timeout value.\n\npos — Position of the node for which the timer has elapsed.\n\nelapsed — Total time that has passed since the timer was started.\n\nCalled when a UI form on a node (e.g. sign text input) returns data. See formspec and NodeMetaRef.\n\npos — Position of the node whose form fields are submitted.\n\nformname — (TODO: Check meaning and use, because its only used by minetest.show_formspec(playername, formname, formspec) and minetest.register_on_player_receive_fields(func(player, formname, fields)))\n\nfields — The names and values of the form's fields, as a table: {name1 = value1, name2 = value2, ...}\n\nsender — Reference to a Player object indicating who submitted the form.\n\nCalled when a player attempts to move an item or items from one inventory slot to another within the node's inventory. Should return the actual number of items allowed to move from 0 (if the move is not allowed) to count (if all items may be moved), inclusive.\n\nExample: Used by locked chests to ensure only the owner can modify them.\n\npos — The position of the node whose inventory is being modified.\n\nfrom_list — The inventory list from which the item or items are being moved (e.g. \"fuel\", \"dst\", or \"src\" for a furnace in the default game).\n\nfrom_index — The index of the slot from which the item or items are being moved within from_list.\n\nto_list — The inventory list to which the item or items are being moved (e.g. \"fuel\", \"dst\", or \"src\" for a furnace in the default game).\n\nto_index — The index of the slot to which the item or items are being moved within to_list.\n\ncount — The number of items the player is attempting to move.\n\nplayer — The player attempting to modify the node inventory.\n\nCalled when a player attempts to move an item or items into the node's inventory from another inventory (e.g. the player's own inventory). Should return either -1 to allow all items to be moved but leave the node inventory unchanged, or the actual number of items allowed to move from 0 (if the move is not allowed) to count (if all items may be moved), inclusive.\n\nExample: Used by locked chests to ensure only the owner can modify them.\n\npos — The position of the node whose inventory is being modified.\n\nlistname — The inventory list to which the item or items are being moved (e.g. \"fuel\", \"dst\", or \"src\" for a furnace in the default game).\n\nindex — The index of the slot to which the item or items are being moved within listname.\n\nstack — Reference to an ItemStack describing what player is attempting to move.\n\nplayer — The player attempting to modify the node inventory.\n\nCalled when a player attempts to move an item or items out of the node's inventory to another inventory (e.g. the player's own inventory). Should return either -1 to allow all items to be moved but leave the node inventory unchanged (copy items out), or the actual number of items allowed to move from 0 (if the move is not allowed) to count (if all items may be moved), inclusive.\n\nExample: Used by locked chests to ensure only the owner can modify them.\n\npos — The position of the node whose inventory is being modified.\n\nlistname — The inventory list from which the item or items are being moved (e.g. \"fuel\", \"dst\", or \"src\" for a furnace in the default game).\n\nindex — The index of the slot from which the item or items are being moved within listname.\n\nstack — Reference to an ItemStack describing what player is attempting to move.\n\nplayer — The player attempting to modify the node inventory.\n\nCallback called after a player has moved an item or items from one inventory slot to another within the node's inventory. Called after allow_metadata_inventory_move(pos, from_list, from_index, to_list, to_index, count, player) if the inventory move is allowed, with identical arguments except for a count updated to reflect the actual allowed number of items.\n\nCallback called after a player has moved an item or items into the node's inventory from another inventory (e.g. the player's own inventory). Called after allow_metadata_inventory_put(pos, listname, index, stack, player) if the inventory move is allowed, with identical arguments except for a stack updated to reflect the actual allowed number of items.\n\nCallback called after a player has moved an item or items out of the node's inventory to another inventory (e.g. the player's own inventory). Called after allow_metadata_inventory_take(pos, listname, index, stack, player) if the inventory move is allowed, with identical arguments except for a stack updated to reflect the actual allowed number of items.\n\nRather than being used by the core game engine itself the following callbacks are called indirectly by the default implementations of the above primary callbacks, so installing a callback for the primary events may result in these methods not being called. For example, if you implement on_place with a custom event handler callback, then after_place_node will not be called unless you explicitly call it, since it is the default on_place callback (minetest.item_place) that calls after_place_node. The default implementation of these secondary callbacks for a new node type does nothing (though several node types used by the default game mods do install behavior; e.g. chests). This means overriding them for your custom node simply adds new behavior instead of replacing existing default behavior. See builtin/item.lua for more info.\n\nCalled after constructing node when node was placed using minetest.item_place_node(...) / minetest.place_node(...) (for example, locked chests use this to determine the owner).\n\nReturn a true value to indicate modification of itemstack (if any) has been handled by the callback. Otherwise (return nothing, false, or nil) the caller will remove one item from itemstack. Note that it is not generally possible for one global on_placenode callback to know what values were returned by others or by this callback (one should thus be careful to avoid double-removal of items).\n\npos — Position of the new node.\n\npointed_thing — Copy of the pointed_thing (only in 0.4.10+).\n\nCalled by minetest.node_dig(...) / minetest.node_dig(...) to determine if player can dig the node in its current state. Returns a boolean (true if node can be dug).\n\nExample: Chests and furnaces use this to allow digging only if they are empty.\n\npos — Position of the node to be dug.\n\nplayer — Reference to an object indicating who or what is trying to dig the node.\n\nCalled after node is destroyed as a result of minetest.node_dig(...) / minetest.node_dig(...).\n\npos — Position of node that was dug.\n\noldmetadata — Copy of old metadata in table format.\n\nWhen defined (not nil), this method is called by minetest.on_place(...) instead of minetest.item_place_node(...). Returns itemstack modified according to the logic of the method (e.g. with one node removed from the count). (New in 0.4.5)\n\nDefault: nil (not defined; try to place a node instead)\n\npos — Position of the node that was right-clicked on.\n\nnode — Node that was right-clicked on.\n\nplayer — Reference to the Player who right-clicked on the node.\n\nitemstack — The item (stack) wielded by the player when right-clicking.\n\npointed_thing pointed_thing. Can be nil if called by a mod (only in 0.4.10+).\n\nThese callbacks have been mentioned very briefly in the game documentation (e.g. in lua_api.txt), but few details are available other than a hint at their design and purpose, so it is unknown where they fit in the scheme of engine vs. mod code.\n\nIf defined, called when an explosion touches the node, instead of removing the node. It does not have any use in the engine yet, but should be used by mods.\n\npos — The position of the node being affected the the explosion.\n\nintensity — Describes the intensity of the blast affecting the node. According the lua_api.txt: 1.0 = mid range of regular TNT\n\nname The name of the tool, for example: tutorial:decowood_pick.\n\nOnly OGG files are supported. For positional playing of sounds, only single-channel (mono) files are supported. Otherwise OpenAL will play them non-positionally.\n\nSimpleSoundSpec can be a string with the filename (without the file extention) or a table with the fields name=\"name\" and gain=float.\n\nSoundParameters is a table with the following fields:\n\nloop = bool: Sound is looped. Only sounds connected to objects can be looped. default = false\n\nThe location can be specified with one of the following fields in the SoundParameters (if none is used, its played locationless to all players):\n\nto_player = \"playername\": Sound is played locationless to the player\n\npos = position: Sound is played at this position\n\nobject = ObjectRef: Sound is played connected to the object\n\nThe function returns a sound handle that can be passed to minetest.sound_stop(handle) to stop the sound.\n\nYou can play random sound using filename convention modname_soundname.N.ogg (see examples)\n\nTo play the sound \"testmod_testsound.ogg\" at position 0,0,0:\n\nTo play the sound \"testmod_foobar.ogg\" to player \"foo\":\n\nTo play a sound selected at random from the files with basename \"testmod_foobar\":\n\nContent and functionality can be added to Minetest 0.4 by using Lua scripting in run-time loaded mods.\n\nA mod is a self-contained bunch of scripts, textures and other related things that is loaded by and interfaces with Minetest.\n\nMods are contained and ran solely on the server side. Definitions and media files are automatically transferred to the client.\n\nIf you see a deficiency in the API, feel free to attempt to add the functionality in the engine and API. You can send such improvements as source code patches to\n\nIf you have any difficulty in understanding this, please read:\n\nMods are loaded during server startup from the mod load paths by running the init.lua scripts in a shared environment.\n\nGames are looked up from:\n\n$path_user/games/gameid/ where gameid is unique to each game.\n\nThe game directory contains the file game.conf, which contains these fields:\n\nThe game directory can contain the file minetest.conf, which will be used to set default settings when running the particular game.\n\nOn an installed version on Linux:\n\nIt is possible to include a game in a world; in this case, no mods or games are loaded or checked from anywhere else.\n\nThis is useful for e.g. adventure worlds.\n\nThis happens if the following directory exists:\n\nMods should be then be placed in:\n\nMods can be put in a subdirectory, if the parent directory, which otherwise should be a mod, contains a file named modpack.txt. This file shall be empty, except for lines starting with #, which are comments.\n\nThe location of this directory can be fetched by using\n\nList of mods that have to be loaded before loading this mod.\n\nOptional dependencies can be defined by appending a question mark to a single modname. Their meaning is that if the specified mod is missing, that does not prevent this mod from being loaded.\n\nFile containing description to be shown within mainmenu.\n\nThe main Lua script. Running this script should register everything it\n\nwants to register. Subsequent execution depends on minetest calling the\n\nminetest.setting_get(name) and minetest.setting_getbool(name) can be used to read custom or existing settings at load time, if necessary.\n\nMedia files (textures, sounds, whatever) that will be transferred to the\n\nclient and will be available for use by the mod.\n\nRegistered names should generally be in this format:\n\nThis is to prevent conflicting names from corrupting maps and is enforced by the mod loader.\n\n-> the name should be \"experimental:tnt\".\n\nEnforcement can be overridden by prefixing the name with \":\". This can be used for overriding the registrations of some other mod.\n\nExample: Any mod can redefine experimental:tnt by using the name\n\n\":experimental:tnt\" when registering it. (also that mod is required to have \"experimental\" as a dependency)\n\nThe \":\" prefix can also be used for maintaining backwards compatibility.\n\nAliases can be added by using minetest.register_alias(name, convert_to)\n\nThis will make Minetest to convert things called name to things called convert_to.\n\nThis can be used for maintaining backwards compatibility.\n\nThis can be also used for setting quick access names for things, e.g. if you have an item called epiclylongmodname:stuff, you could do\n\nminetest.register_alias(\"stuff\", \"epiclylongmodname:stuff\") and be able to use \"/giveme stuff\".\n\nMods should generally prefix their textures with modname_, e.g. given the mod name \"foomod\", a texture could be called\n\nTextures are referred to by their complete name, or alternatively by stripping out the file extension:\n\nThere are various texture modifiers that can be used to generate textures on-the-fly.\n\nTextures can be overlaid by putting a ^ between them.\n\nTextures can be grouped together by enclosing them in ( and ).\n\nA texture for 'thing1.png^thing2.png' is created and the resulting\n\nDraw a step of the crack animation on the texture.\n\n[combine:WxH:x1,y1=file1:x2,y2=file2 W = width, x is a literal character 'x', H = height, x1/x2 = x position, y1/y1 = y position, file1/file2 = texture to combine Create a texture of size w * h and blit file1 to (x1,y1) and blit file2 to (x2,y2). Example: [combine:16x32:0,0=default_cobble.png:0,16=default_wood.png\n\n[makealpha:r,g,b Convert one color to transparency. Example: default_cobble.png^[makealpha:128,128,128\n\n[transformt t = transformation(s) to apply Rotates and/or flips the image. t can be a number (between 0 and 7) or a transform name. Rotations are counter-clockwise. 0 I identity 1 R90 rotate by 90 degrees 2 R180 rotate by 180 degrees 3 R270 rotate by 270 degrees 4 FX flip X 5 FXR90 flip X then rotate by 90 degrees 6 FY flip Y 7 FYR90 flip Y then rotate by 90 degrees Example: default_stone.png^[transformFXR90\n\n[inventorycube{top{left{right '^' is replaced by '&' in texture names Create an inventory cube texture using the side textures. Example: [inventorycube{grass.png{dirt.png\n\ngrass_side.png Creates an inventorycube with 'grass.png', 'dirt.png^grass_side.png' and 'dirt.png^grass_side.png' textures\n\n[lowpart:percent:file Blit the lower percent% part of file on the texture: Example: base.png^[lowpart:25:overlay.png\n\n[verticalframe:t:n t = animation frame count, n = current animation frame Crops the texture to a frame of a vertical animation. Example: default_torch_animated.png^[verticalframe:16:8\n\n[mask:file Apply a mask to the base image. The mask is applied using binary AND.\n\n[colorize:color Colorize the textures with given color color as ColorString\n\nFor positional playing of sounds, only single-channel (mono) files are supported. Otherwise OpenAL will play them non-positionally.\n\nMods should generally prefix their sounds with modname_, e.g. given the mod name \"foomod\", a sound could be called\n\nSounds are referred to by their name with a dot, a single digit and the file extension stripped out. When a sound is played, the actual sound file is chosen randomly from the matching sounds.\n\nWhen playing the sound \"foomod_foosound\", the sound is chosen randomly from the available ones of the following files:\n\nExamples of sound parameter tables: — Play location-less on all clients {\n\nloop = true, — only sounds connected to objects can be looped }\n\nAnything added using certain minetest.register_* functions get added to the global minetest.registered_* tables.\n\nNote that in some cases you will stumble upon things that are not contained in these tables (e.g. when a mod has been removed). Always check for existence before trying to access the fields.\n\nExample: If you want to check the drawtype of a node, you could do:\n\nif not minetest.registered_nodes[nodename] then\n\nExample: minetest.get_item_group(name, group) has been implemented as:\n\nif not minetest.registered_items[name] or not\n\nNodes are the bulk data of the world: cubes and other things that take the space of a cube. Huge amounts of them are handled efficiently, but they are quite static.\n\nThe definition of a node is stored and can be accessed by name in\n\nNodes are passed by value between Lua and the engine. They are represented by a table:\n\nparam1 and param2 are 8 bit integers. The engine uses them for certain automated functions. If you don't use these functions, you can use them to store arbitrary values.\n\nThe functions of param1 and param2 are determined by certain fields in the node definition: param1 is reserved for the engine when paramtype != \"none\":\n\n^ The value stores light with and without sun in it's\n\nupper and lower 4 bits. param2 is reserved for the engine when any of these are used:\n\n^ The level and some flags of the liquid is stored in param2\n\n^ The drawn liquid level is read from param2\n\n^ The rotation of the node is stored in param2. You can make this value\n\n^ The rotation of the node is stored in param2. Furnaces and chests are\n\nrotated this way. Can be made by using minetest.dir_to_facedir().\n\nfacedir's two less significant bits are rotation around the axis\n\n^ defines list of collision boxes for the node. If empty, collision boxes\n\nwill be the same as nodeboxes, in case of any other nodes will be full cube\n\nas in the example above.\n\nNodes can also contain extra data. See \"Node Metadata\".\n\nThere are a bunch of different looking node types.\n\nLook for examples in games/minimal or games/minetest_game.\n\n- normal - airlike - liquid - flowingliquid - glasslike - glasslike_framed - glasslike_framed_optional - allfaces - allfaces_optional - torchlike - signlike - plantlike - firelike - fencelike - raillike - nodebox — See below. EXPERIMENTAL - mesh — use models for nodes\n\n*_optional drawtypes need less rendering time if deactivated (always client side)\n\nThe \"nodebox\" node drawtype allows defining visual of nodes consisting of arbitrary number of boxes. It allows defining stuff like stairs. Only the \"fixed\" and \"leveled\" box type is supported for these. ^ Please note that this is still experimental, and may be incompatibly\n\nA nodebox is defined as any of: {\n\n— A normal cube; the default in most things\n\n— A fixed box (facedir param2 is used, if applicable)\n\n— A box like the selection box for torches\n\n— (wallmounted param2 is used, if applicable)\n\n{x1, y1, z1, x2, y2, z2} A box of a regular node would look like:\n\ntype = \"leveled\" is same as \"fixed\", but y2 will be automatically set to level from param2\n\nIf drawtype \"mesh\" is used tiles should hold model materials textures.\n\nNoise Parameters, or commonly called NoiseParams, define the properties of perlin noise.\n\nOffset that the noise is translated by (i.e. added) after calculation.\n\nFactor that the noise is scaled by (i.e. multiplied) after calculation.\n\nVector containing values by which each coordinate is divided by before calculation.\n\nA value of {x=250, y=250, z=250} is common.\n\nRandom seed for the noise. Add the world seed to a seed offset for world-unique noise.\n\nIn the case of minetest.get_perlin(), this value has the world seed automatically added.\n\nNumber of times the noise gradient is accumulated into the noise.\n\nIncrease this number to increase the amount of detail in the resulting noise.\n\nA value of 6 is common.\n\nFactor by which the effect of the noise gradient function changes with each successive octave.\n\nValues less than 1 make the details of successive octaves' noise diminish, while values\n\nA value of 0.6 is common.\n\nFactor by which the noise feature sizes change with each successive octave.\n\nA value of 2.0 is common.\n\nLeave this field unset for no special handling.\n\nSpecify this if you would like to keep auto-selection of eased/not-eased while specifying\n\nThis results in smooth, rolling noise. Disable this (\"noeased\") for sharp-looking noise.\n\nIf no flags are specified (or defaults is), 2D noise is eased and 3D noise is not eased.\n\nAccumulates the absolute value of each noise gradient result.\n\nNoise parameters format example for 2D or 3D perlin noise or perlin noise maps:\n\n^ A single noise parameter table can be used to get 2D or 3D noise,\n\nwhen getting 2D noise spread.z is ignored.\n\nThese tell in what manner the ore is generated. All default ores are of the uniformly-distributed scatter type.\n\n- scatter Randomly chooses a location and generates a cluster of ore. If noise_params is specified, the ore will be placed if the 3d perlin noise at that point is greater than the noise_threshold, giving the ability to create a non-equal distribution of ore. - sheet Creates a sheet of ore in a blob shape according to the 2d perlin noise described by noise_params. The relative height of the sheet can be controlled by the same perlin noise as well, by specifying a non-zero 'scale' parameter in noise_params. IMPORTANT: The noise is not transformed by offset or scale when comparing against the noise threshold, but scale is used to determine relative height. The height of the blob is randomly scattered, with a maximum height of clust_size. clust_scarcity and clust_num_ores are ignored. This is essentially an improved version of the so-called \"stratus\" ore seen in some unofficial mods. - claylike - NOT YET IMPLEMENTED Places ore if there are no more than clust_scarcity number of specified nodes within a Von Neumann neighborhood of clust_size radius.\n\nAlso produce this same ore between the height range of -height_max and -height_min.\n\nUseful for having ore in sky realms without having to duplicate ore entries.\n\nThe varying types of decorations that can be placed. The default value is simple, and is currently the only type supported.\n\nCreates a 1xHx1 column of a specified node (or a random node from a list, if a decoration\n\nlist is specified). Can specify a certain node it must spawn next to, such as water or lava,\n\nfor example. Can also generate a decoration of random height between a specified lower and\n\nupper bound. This type of decoration is intended for placement of grass, flowers, cacti,\n\npapyrus, and so on. - schematic\n\nCopies a box of MapNodes from a specified schematic file (or raw description). Can specify a\n\nprobability of a node randomly appearing when placed. This decoration type is intended to be used\n\nfor multi-node sized discrete structures, such as trees, cave spikes, rocks, and so on.\n\nA schematic specifier identifies a schematic by either a filename to a Minetest Schematic file (.mts) or through raw data supplied through Lua, in the form of a table. This table must specify two fields:\n\n- The 'size' field is a 3d vector containing the dimensions of the provided schematic.\n\n- The 'data' field is a flat table of MapNodes making up the schematic, in the order of [z [y [x]]]. Important: The default value for param1 in MapNodes here is 255, which represents \"always place\".\n\nIn the bulk MapNode data, param1, instead of the typical light values, instead represents the probability of that node appearing in the structure. When passed to minetest.create_schematic, probability is an integer value ranging from 0 to 255:\n\n- A probability value of 0 means that node will never appear (0% chance).\n\n- A probability value of 255 means the node will always appear (100% chance).\n\n- If the probability value p is greater than 0, then there is a (p / 256 * 100)% chance that node will appear when the schematic is placed on the map.\n\nImportant note: Node aliases cannot be used for a raw schematic provided when registering as a decoration.\n\nPlacement of this decoration is centered along the X axis.\n\nPlacement of this decoration is centered along the Y axis.\n\nPlacement of this decoration is centered along the Z axis.\n\nThe position field is used for all element types. To account for differing resolutions, the position coordinates are the percentage of the screen, ranging in value from 0 to 1. The name field is not yet used, but should contain a description of what the HUD element represents. The direction field is the direction in which something is drawn. 0 draws from left to right, 1 draws from right to left, 2 draws from top to bottom, and 3 draws from bottom to top. The alignment field specifies how the item will be aligned. It ranges from -1 to 1, with 0 being the center, -1 is moved to the left/up, and 1 is to the right/down. Fractional values can be used. The offset field specifies a pixel offset from the position. Contrary to position, the offset is not scaled to screen size. This allows for some precisely-positioned items in the HUD. Note offset WILL adapt to screen dpi as well as user defined scaling factor! Below are the specific uses for fields in each type; fields not listed for that type are ignored.\n\nNote: Future revisions to the HUD API may be incompatible; the HUD API is still in the experimental stages.\n\nDisplays an image on the HUD.\n\n- scale: The scale of the image, with 1 being the original texture size.\n\nOnly the X coordinate scale is used (positive values)\n\nNegative values represent that percentage of the screen it\n\n- text: The name of the texture that is displayed.\n\n- alignment: The alignment of the image.\n\n- scale: Defines the bounding rectangle of the text.\n\nA value such as {x=100, y=100} should work.\n\n- text: The text to be displayed in the HUD element.\n\n- number: An integer containing the RGB value of the color used to draw the text.\n\nSpecify 0xFFFFFF for white text, 0xFF0000 for red, and so on.\n\n- alignment: The alignment of the text.\n\n- text: The name of the texture that is used.\n\n- number: The number of half-textures that are displayed.\n\nIf odd, will end with a vertically center-split texture.\n\n- size: If used will force full-image size to this value (override texture pack image size) - inventory\n\n- text: The name of the inventory list to be displayed.\n\n- number: Number of items in the inventory to be displayed.\n\n- item: Position of item that is selected.\n\n- name: The name of the waypoint.\n\n- number: An integer containing the RGB value of the color used to draw the text.\n\nFlags using the standardized flag specifier format can be specified in either of two ways, by string or table. The string format is a comma-delimited set of flag names; whitespace and unrecognized flag fields are ignored. Specifying a flag in the string sets the flag, and specifying a flag prefixed by the string \"no\" explicitly clears the flag from whatever the default may be. In addition to the standard string flag format, the schematic flags field can also be a table of flag names to boolean values representing whether or not the flag is set. Additionally, if a field with the flag name prefixed with \"no\" is present, mapped to a boolean of any value, the specified flag is unset.\n\n{place_center_x = true, noplace_center_y=true, place_center_z=true} which is equivalent to\n\n\"place_center_x, place_center_z\" since, by default, no schematic attributes are set.\n\nA tool/weapon that can dig and damage things according to tool_capabilities Craftitem (register_craftitem):\n\nItems and item stacks can exist in three formats:\n\nSerialized; This is called stackstring or itemstring: e.g. 'default:dirt 5' e.g. 'default:pick_wood 21323' e.g. 'default:apple'\n\nItemStack: C++ native format with many helper methods. Useful for converting between formats. See the Class reference section for details.\n\nWhen an item must be passed to a function, it can usually be in any of these formats.\n\nIn a number of places, there is a group table. Groups define the properties of a thing (item, node, armor of entity, capabilities of tool) in such a way that the engine and other mods can can interact with the thing without actually knowing what the thing is.\n\nUsage: - Groups are stored in a table, having the group names with keys and the\n\ngroup ratings as values. For example:\n\n^ A more special dirt-kind of thing - Groups always have a rating associated with them. If there is no\n\nuseful meaning for a rating for an enabled group, it shall be 1. - When not defined, the rating of a group defaults to 0. Thus when you\n\nread groups, you must interpret nil and 0 as the same value, 0.\n\nYou can read the rating of a group for an item or a node by using\n\nGroups of items can define what kind of an item it is (e.g. wool).\n\nIn addition to the general item things, groups are used to define whether a node is destroyable and how long it takes to destroy by a tool.\n\nFor entities, groups are, as of now, used only for calculating damage. The rating is the percentage of damage caused by tools with this damage group. See \"Entity damage mechanism\".\n\nGroups in tools define which groups of nodes and entities they are effective towards.\n\nAn example: Make meat soup from any meat, any water and any bowl {\n\n— preserve = {'group:bowl'}, — Not implemented yet (TODO) } An another example: Make red wool from white wool and red dye {\n\n- immortal: Disables the group damage system for an entity - level: Can be used to give an additional sense of progression in the game.\n\n- A larger level will cause e.g. a weapon of a lower level make much less\n\ndamage, and get worn out much faster, or not be able to get drops\n\n- 0 is something that is directly accessible at the start of gameplay\n\n- There is no upper limit - dig_immediate: (player can always pick up node without tool wear)\n\n- 2: node is removed without tool wear after 0.5 seconds or so\n\n- 3: node is removed without tool wear immediately (torch) - disable_jump: Player (and possibly other things) cannot jump from node - fall_damage_add_percent: damage speed = speed * (1 + value/100) - bouncy: value is bounce speed in percent - falling_node: if there is no walkable block under the node it will fall - attached_node: if the node under it is not a walkable block the node will be\n\ndropped as an item. If the node is wallmounted the\n\nwallmounted direction is checked. - soil: saplings will grow on nodes in this group - connect_to_raillike: makes nodes of raillike drawtype connect to\n\nother group members with same drawtype\n\n- crumbly: dirt, sand - cracky: tough but crackable stuff like stone. - snappy: something that can be cut using fine tools; e.g. leaves, small\n\nplants, wire, sheets of metal - choppy: something that can be cut using force; e.g. trees, wooden planks - fleshy: Living things like animals and the player. This could imply\n\nsome blood effects when hitting. - explody: Especially prone to explosions - oddly_breakable_by_hand:\n\nCan be added to nodes that shouldn't logically be breakable by the\n\nhand but are. Somewhat similar to dig_immediate, but times are more\n\nlike {[1]=3.50,[2]=2.00,[3]=0.70} and this does not override the\n\nspeed of a tool if the tool can dig at a faster speed than this\n\nItem groups are often used for defining, well, //groups of items//. - meat: any meat-kind of a thing (rating might define the size or healing\n\nability or be irrelevant - it is not defined as of yet) - eatable: anything that can be eaten. Rating might define HP gain in half\n\nhearts. - flammable: can be set on fire. Rating might define the intensity of the\n\nfire, affecting e.g. the speed of the spreading of an open fire. - wool: any wool (any origin, any color) - metal: any metal - weapon: any weapon - heavy: anything considerably heavy\n\nGroups such as crumbly, cracky and snappy are used for this purpose. Rating is 1, 2 or 3. A higher rating for such a group implies faster digging time.\n\nThe level group is used to limit the toughness of nodes a tool can dig and to scale the digging times / damage to a greater extent.\n\n^ PLEASE DO UNDERSTAND THIS, otherwise you cannot use the system to it's\n\nTools define their properties by a list of parameters for groups. They cannot dig other groups; thus it is important to use a standard bunch of groups to enable interaction with tools.\n• For an arbitrary list of groups:\n• Uses (until the tool breaks)\n\n: When used as a weapon, the tool will do full damage if this time is spent between punches. If e.g. half the time is spent, the tool will do half damage.\n\nMaximum drop level Suggests the maximum level of node, when dug with the tool, that will drop it's useful item. (e.g. iron ore to drop a lump of iron). - This is not automated; it is the responsibility of the node definition\n\nUses Determines how many uses the tool has when it is used for digging a node, of this group, of the maximum level. For lower leveled nodes, the use count is multiplied by 3^leveldiff. - uses=10, leveldiff=0 -> actual uses: 10 - uses=10, leveldiff=1 -> actual uses: 30 - uses=10, leveldiff=2 -> actual uses: 90\n\nMaximum level Tells what is the maximum level of a node of this group that the tool will be able to dig.\n\nDigging times List of digging times for different ratings of the group, for nodes of the maximum level.\n• For example, as a Lua table, ''times={2=2.00, 3=0.70}''. This would result in the tool to be able to dig nodes that have a rating of 2 or 3 for this group, and unable to dig the rating 1, which is the toughest. Unless there is a matching group that enables digging otherwise.\n\nList of damage for groups of entities. See \"Entity damage mechanism\".\n\nExample definition of the capabilities of a tool\n\nThis makes the tool be able to dig nodes that fulfil both of these: - Have the crumbly group - Have a level group less or equal to 2\n\nNotes: - At crumbly=0, the node is not diggable. - At crumbly=3, the level difference digging time divider kicks in and makes\n\neasy nodes to be quickly breakable. - At level > 2, the node is not diggable, because it's level > maxlevel\n\n— Where object.armor_groups[group] is 0 for inexistent values return damage\n\nClient predicts damage based on damage groups. Because of this, it is able to give an immediate response when an entity is damaged or dies; the response is pre-defined somehow (e.g. by defining a sprite animation) (not implemented; TODO). - Currently a smoke puff will appear when an entity dies.\n\nEntities can define a special armor group, which is punch__operable. This group disables the regular damage mechanism for players punching it by hand or a non-tool item, so that it can do something else than take damage.\n\nOn the Lua side, every punch calls ''entity:on_punch(puncher, time_from_last_punch, tool_capabilities, direction)''. This should never be called directly, because damage is usually not handled by the entity itself.\n• ''puncher'' is the object performing the punch. Can be nil. Should never be accessed unless absolutely required, to encourage interoperability.\n• ''time_from_last_punch'' is time from last punch (by puncher) or nil.\n• ''direction'' is a unit vector, pointing from the source of the punch to the punched object.\n• Parameters are equal to the above callback.\n• If ''direction'' is nil and ''puncher'' is not nil, ''direction'' will be automatically filled in based on the location of ''puncher''.\n\nTo punch an entity/object in Lua, call ''object:punch(puncher, time_from_last_punch, tool_capabilities, direction)''.\n\nThe instance of a node in the world normally only contains the three values mentioned in \"Nodes\". However, it is possible to insert extra data into a node. It is called \"node metadata\"; See \"NodeMetaRef\".\n\nMetadata contains two things: - A key-value store - An inventory\n\nSome of the values in the key-value store are handled specially: - formspec: Defines a right-click inventory menu. See \"Formspec\". - infotext: Text shown on the screen when the node is pointed at\n\nFormspec defines a menu. Currently not much else than inventories are supported. It is a string, with a somewhat strange format.\n\nSpaces and newlines can be inserted between the blocks, as is used in the examples.\n\nsize[ , , ] ^ Define the size of the menu in inventory slots ^ fixed_size true/false (optional) ^ deprecated: invsize[\n\nlistcolors[ ; ] ^ Sets background color of slots as ColorString ^ Sets background color of slots on mouse hovering\n\nlistcolors[ ; ; ] ^ Sets background color of slots as ColorString ^ Sets background color of slots on mouse hovering ^ Sets color of slots border\n\nlistcolors[ ; ; ; ; ] ^ Sets background color of slots as ColorString ^ Sets background color of slots on mouse hovering ^ Sets color of slots border ^ Sets default background color of tooltips ^ Sets default font color of tooltips\n\nimage[ , ; , ; ] ^ Show an image ^ Position and size units are inventory slots\n\nitem_image[ , ; , ; ] ^ Show an inventory image of registered item/node ^ Position and size units are inventory slots\n\nbgcolor[ ; ] ^ Sets background color of formspec as ColorString ^ If true the background color is drawn fullscreen (does not effect the size of the formspec)\n\nbackground[ , ; , ; ] ^ Use a background. Inventory rectangles are not drawn then. ^ Position and size units are inventory slots ^ Example for formspec 8x4 in 16x resolution: image shall be sized 8*16px x 4*16px\n\nbackground[ , ; , ; ; ] ^ Use a background. Inventory rectangles are not drawn then. ^ Position and size units are inventory slots ^ Example for formspec 8x4 in 16x resolution: image shall be sized 8*16px x 4*16px ^ If true the background is clipped to formspec size (x and y are used as offset values, w and h are ignored)\n\npwdfield[ , ; , ; ; ] ^ Textual password style field; will be sent to server when a button is clicked ^ x and y position the field relative to the top left of the menu ^ w and h are the size of the field ^ fields are a set height, but will be vertically centred on h ^ Position and size units are inventory slots ^ name is the name of the field as returned in fields to on_receive_fields ^ label, if not blank, will be text printed on the top left above the field\n\nfield[ , ; , ; ; ; ] ^ Textual field; will be sent to server when a button is clicked ^ x and y position the field relative to the top left of the menu ^ w and h are the size of the field ^ fields are a set height, but will be vertically centred on h ^ Position and size units are inventory slots ^ name is the name of the field as returned in fields to on_receive_fields ^ label, if not blank, will be text printed on the top left above the field ^ default is the default value of the field\n\n^ default may contain variable references such as '${text}' which\n\nwill fill the value from the metadata value 'text'\n\n^ Note: no extra text or more than a single variable is supported ATM.\n\nfield[ ; ; ] ^ as above but without position/size units ^ special field for creating simple forms, such as sign text input ^ must be used without a size[] element ^ a 'Proceed' button will be added automatically\n\ntextarea[ , ; , ; ; ; ] ^ same as fields above, but with multi-line input\n\nlabel[ , ; ] ^ x and y work as per field ^ label is the text on the label ^ Position and size units are inventory slots\n\nvertlabel[ , ; ] ^ Textual label drawn vertically ^ x and y work as per field ^ label is the text on the label ^ Position and size units are inventory slots\n\nbutton[ , ; , ; ; ] ^ Clickable button. When clicked, fields will be sent. ^ x, y and name work as per field ^ w and h are the size of the button ^ label is the text on the button ^ Position and size units are inventory slots\n\nimage_button[ , ; , ; ; ; ] ^ x, y, w, h, and name work as per button ^ texture name is the filename of an image ^ Position and size units are inventory slots\n\nimage_button[ , ; , ; ; ; ; ; ; ] ^ x, y, w, h, and name work as per button ^ texture name is the filename of an image ^ Position and size units are inventory slots ^ noclip=true means imagebutton doesn't need to be within specified formsize ^ drawborder draw button border or not ^ pressed texture name is the filename of an image on pressed state\n\nitem_image_button[ , ; , ; ; ; ] ^ x, y, w, h, name and label work as per button ^ item name is the registered name of an item/node,\n\ntooltip will be made out of its description\n\nto override it use tooltip element ^ Position and size units are inventory slots\n\nbutton_exit[ , ; , ; ; ] ^ When clicked, fields will be sent and the form will quit.\n\nimage_button_exit[ , ; , ; ; ; ] ^ When clicked, fields will be sent and the form will quit.\n\ntextlist[ , ; , ; ; , ,..., ] ^ Scrollable item list showing arbitrary text elements ^ x and y position the itemlist relative to the top left of the menu ^ w and h are the size of the itemlist ^ name fieldname sent to server on doubleclick value is current selected element ^ listelements can be prepended by #color in hexadecimal format RRGGBB (only), ^ if you want a listelement to start with # write #\n\ntextlist[ , ; , ; ; , ,..., ; ; ] ^ Scrollable itemlist showing arbitrary text elements ^ x and y position the itemlist relative to the top left of the menu ^ w and h are the size of the itemlist ^ name fieldname sent to server on doubleclick value is current selected element ^ listelements can be prepended by #RRGGBB (only) in hexadecimal format ^ if you want a listelement to start with # write # ^ index to be selected within textlist ^ true/false draw transparent background ^ see also minetest.explode_textlist_event (main menu: engine.explode_textlist_event)\n\ntabheader[ , ; ; , ,..., ; ; ; ] ^ show a tabHEADER at specific position (ignores formsize) ^ x and y position the itemlist relative to the top left of the menu ^ name fieldname data is transferred to Lua ^ caption 1... name shown on top of tab ^ current_tab index of selected tab 1... ^ transparent (optional) show transparent ^ draw_border (optional) draw border\n\nbox[ , ; , ; ] ^ simple colored semitransparent box ^ x and y position the box relative to the top left of the menu ^ w and h are the size of box ^ color as ColorString\n\ndropdown[ , ; ; ; , , ..., ; ] ^ show a dropdown field ^ IMPORTANT NOTE: There are two different operation modes: ^ 1) handle directly on change (only changed dropdown is submitted) ^ 2) read the value on pressing a button (all dropdown values are available) ^ x and y position of dropdown ^ width of dropdown ^ fieldname data is transferred to Lua ^ items to be shown in dropdown ^ index of currently selected dropdown item\n\ncheckbox[ , ; ; ; ; ] ^ show a checkbox ^ x and y position of checkbox ^ name fieldname data is transferred to Lua ^ label to be shown left of checkbox ^ selected (optional) true/false ^ tooltip (optional)\n\nscrollbar[ , ; , ; ; ; ] ^ show a scrollbar ^ there are two ways to use it: ^ 1) handle the changed event (only changed scrollbar is available) ^ 2) read the value on pressing a button (all scrollbars are available) ^ x and y position of trackbar ^ width and height ^ orientation vertical/horizontal ^ fieldname data is transferred to lua ^ value this trackbar is set to (0-1000) ^ see also minetest.explode_scrollbar_event (main menu: engine.explode_scrollbar_event)\n\ntable[ , ; , ; ; , ,..., ; ] ^ show scrollable table using options defined by the previous tableoptions[] ^ displays cells as defined by the previous tablecolumns[] ^ x and y position the itemlist relative to the top left of the menu ^ w and h are the size of the itemlist ^ name fieldname sent to server on row select or doubleclick ^ cell 1...n cell contents given in row-major order ^ selected idx: index of row to be selected within table (first row = 1) ^ see also minetest.explode_table_event (main menu: engine.explode_table_event)\n\ntableoptions[ ; ;...] ^ sets options for table[]: ^ color=#RRGGBB ^^ default text color (ColorString), defaults to #FFFFFF ^ background=#RRGGBB ^^ table background color (ColorString), defaults to #000000 ^ border= ^^ should the table be drawn with a border? (default true) ^ highlight=#RRGGBB ^^ highlight background color (ColorString), defaults to #466432 ^ highlight_text=#RRGGBB ^^ highlight text color (ColorString), defaults to #FFFFFF ^ opendepth= ^^ all subtrees up to depth < value are open (default value = 0) ^^ only useful when there is a column of type \"tree\"\n\ntablecolumns[ , , ,...; , , ;...] ^ sets columns for table[]: ^ types: text, image, color, indent, tree ^^ text: show cell contents as text ^^ image: cell contents are an image index, use column options to define images ^^ color: cell contents are a ColorString and define color of following cell ^^ indent: cell contents are a number and define indentation of following cell ^^ tree: same as indent, but user can open and close subtrees (treeview-like) ^ column options: ^^ align= for \"text\" and \"image\": content alignment within cells ^^ available values: left (default), center, right, inline ^^ width= for \"text\" and \"image\": minimum width in em (default 0) ^^ for \"indent\" and \"tree\": indent width in em (default 1.5) ^^ padding= padding left of the column, in em (default 0.5) ^^ exception: defaults to 0 for indent columns ^^ tooltip= tooltip text (default empty) ^ \"image\" column options: ^^ 0= sets image for image index 0 ^^ 1= sets image for image index 1 ^^ 2= sets image for image index 2 ^^ and so on; defined indices need not be contiguous ^^ empty or non-numeric cells are treated as 0 ^ \"color\" column options: ^^ span= number of following columns to affect (default infinite)\n\nNote: do NOT use a element name starting with \"key_\" those names are reserved to pass key press events to formspec!\n\n- \"context\": Selected node metadata (deprecated: \"current_name\") - \"current_player\": Player to whom the menu is shown - \"player:\n\n#RGB ^ defines a color in hexadecimal format #RGBA ^ defines a color in hexadecimal format and alpha channel #RRGGBB ^ defines a color in hexadecimal format #RRGGBBAA ^ defines a color in hexadecimal format and alpha channel\n\nNamed colors are also supported and are equivalent to \"CSS Color Module Level 4\" (http://dev.w3.org/csswg/css-color/#named-colors). To specify the value of the alpha channel, append AA to the end of the color name (e.g. colorname08). For named colors the hexadecimal string representing the alpha value must (always) be two hexadecimal digits.\n\n^ x is a table or the x position. vector.direction(p1, p2) -> vector vector.distance(p1, p2) -> number vector.length(v) -> number vector.normalize(v) -> vector vector.round(v) -> vector vector.apply(v, func) -> vector vector.equals(v1, v2) -> bool For the following functions x can be either a vector or a number. vector.add(v, x) -> vector vector.subtract(v, x) -> vector vector.multiply(v, x) -> vector vector.divide(v, x) -> vector\n\ndump2(obj, name=\"_\", dumped={}) ^ Return object serialized as a string, handles reference loops dump(obj, dumped={}) ^ Return object serialized as a string math.hypot(x, y) ^ Get the hypotenuse of a triangle with legs x and y.\n\nUseful for distance calculation. math.sign(x, tolerance) ^ Get the sign of a number\n\nOptional: Also returns 0 when the absolute value is within the tolerance (default 0) string:split(separator) ^ e.g. string:split(\"a,b\", \",\") = {\"a\",\"b\"} string:trim() ^ e.g. string.trim(\"\n\n \\t\\tfoo bar\\t \") = \"foo bar\" minetest.pos_to_string({x=X,y=Y,z=Z}) -> \"(X,Y,Z)\" ^ Convert position to a printable string minetest.string_to_pos(string) -> position ^ Same but in reverse. Returns nil if the string can't be parsed to a position. minetest.formspec_escape(string) -> string ^ escapes characters [ ] \\ , ; that can not be used in formspecs minetest.is_yes(arg) ^ returns whether arg can be interpreted as yes minetest.get_us_time() ^ returns time with microsecond precision table.copy(table) -> table ^ returns a deep copy of a table\n\nUtilities: minetest.get_current_modname() -> string minetest.get_modpath(modname) -> e.g. \"/home/user/.minetest/usermods/modname\" ^ Useful for loading additional .lua modules or static data from mod minetest.get_modnames() -> list of installed mods ^ Return a list of installed mods, sorted alphabetically minetest.get_worldpath() -> e.g. \"/home/user/.minetest/world\" ^ Useful for storing custom data minetest.is_singleplayer() minetest.features ^ table containing API feature flags: {foo=true, bar=true} minetest.has_feature(arg) -> bool, missing_features ^ arg: string or table in format {foo=true, bar=true} ^ missing_features: {foo=true, bar=true} minetest.get_player_information(playername) ^ table containing information about player peer: { address = \"127.0.0.1\", -- IP address of client ip_version = 4, -- IPv4 / IPv6 min_rtt = 0.01, -- minimum round trip time max_rtt = 0.2, -- maximum round trip time avg_rtt = 0.02, -- average round trip time min_jitter = 0.01, -- minimum packet time jitter max_jitter = 0.5, -- maximum packet time jitter avg_jitter = 0.03, -- average packet time jitter connection_uptime = 200, -- seconds since client connected -- following information is available on debug build only!!! -- DO NOT USE IN MODS --ser_vers = 26, -- serialization version used by client --prot_vers = 23, -- protocol version used by client --major = 0, -- major version number --minor = 4, -- minor version number --patch = 10, -- patch version number --vers_string = \"0.4.9-git\", -- full version string --state = \"Active\" -- current client state }\n\nLogging: minetest.debug(line) ^ Always printed to stderr and logfile (print() is redirected here) minetest.log(line) minetest.log(loglevel, line) ^ loglevel one of \"error\", \"action\", \"info\", \"verbose\"\n\nRegistration functions: (Call these only at load time) minetest.register_entity(name, prototype table) minetest.register_abm(abm definition) minetest.register_node(name, node definition) minetest.register_tool(name, item definition) minetest.register_craftitem(name, item definition) minetest.register_alias(name, convert_to) minetest.register_craft(recipe) minetest.register_ore(ore definition) minetest.register_decoration(decoration definition) minetest.override_item(name, redefinition) ^ Overrides fields of an item registered with register_node/tool/craftitem. ^ Note: Item must already be defined, (opt)depend on the mod defining it. ^ Example: minetest.override_item(\"default:mese\", {light_source=LIGHT_MAX})\n\nGlobal callback registration functions: (Call these only at load time) minetest.register_globalstep(func(dtime)) ^ Called every server step, usually interval of 0.1s minetest.register_on_shutdown(func()) ^ Called before server shutdown ^ WARNING: If the server terminates abnormally (i.e. crashes), the registered\n\ncallbacks WILL LIKELY NOT BE RUN. Data should be saved at\n\nsemi-frequent intervals as well as on server shutdown. minetest.register_on_placenode(func(pos, newnode, placer, oldnode, itemstack, pointed_thing)) ^ Called when a node has been placed ^ If return true no item is taken from itemstack ^ Not recommended; use on_construct or after_place_node in node definition ^ whenever possible minetest.register_on_dignode(func(pos, oldnode, digger)) ^ Called when a node has been dug. ^ Not recommended: Use on_destruct or after_dig_node in node definition ^ whenever possible minetest.register_on_punchnode(func(pos, node, puncher, pointed_thing)) ^ Called when a node is punched minetest.register_on_generated(func(minp, maxp, blockseed)) ^ Called after generating a piece of world. Modifying nodes inside the area\n\nis a bit faster than usually. minetest.register_on_newplayer(func(ObjectRef)) ^ Called after a new player has been created minetest.register_on_dieplayer(func(ObjectRef)) ^ Called when a player dies minetest.register_on_respawnplayer(func(ObjectRef)) ^ Called when player is to be respawned ^ Called _before_ repositioning of player occurs ^ return true in func to disable regular player placement minetest.register_on_prejoinplayer(func(name, ip)) ^ Called before a player joins the game ^ If it returns a string, the player is disconnected with that string as reason minetest.register_on_joinplayer(func(ObjectRef)) ^ Called when a player joins the game minetest.register_on_leaveplayer(func(ObjectRef)) ^ Called when a player leaves the game minetest.register_on_cheat(func(ObjectRef, cheat)) ^ Called when a player cheats ^ cheat: {type=\"moved_too_fast\"/\"interacted_too_far\"/\"finished_unknown_dig\"/\"dug_unbreakable\"/\"dug_too_fast\"} minetest.register_on_chat_message(func(name, message)) ^ Called always when a player says something minetest.register_on_player_receive_fields(func(player, formname, fields)) ^ Called when a button is pressed in player's inventory form ^ Newest functions are called first ^ If function returns true, remaining functions are not called minetest.register_on_mapgen_init(func(MapgenParams)) ^ Called just before the map generator is initialized but before the environment is initialized ^ MapgenParams consists of a table with the fields mgname, seed, water_level, and flags minetest.register_on_craft(func(itemstack, player, old_craft_grid, craft_inv)) ^ Called when player crafts something ^ itemstack is the output ^ old_craft_grid contains the recipe (Note: the one in the inventory is cleared) ^ craft_inv is the inventory with the crafting grid ^ Return either an ItemStack, to replace the output, or nil, to not modify it minetest.register_craft_predict(func(itemstack, player, old_craft_grid, craft_inv)) ^ The same as before, except that it is called before the player crafts, to make ^ craft prediction, and it should not change anything. minetest.register_on_protection_violation(func(pos, name)) ^ Called by builtin and mods when a player violates protection at a position\n\n(eg, digs a node or punches a protected entity). ^ The registered functions can be called using minetest.record_protection_violation ^ The provided function should check that the position is protected by the mod\n\ncalling this function before it prints a message, if it does, to allow for\n\nmultiple protection mods. minetest.register_on_item_eat(func(hp_change, replace_with_item, itemstack, user, pointed_thing)) ^ Called when an item is eaten, by minetest.item_eat ^ Return true or itemstack to cancel the default item eat response (ie: hp increase)\n\n} minetest.register_authentication_handler(handler) ^ See minetest.builtin_auth_handler in builtin.lua for reference\n\nSetting-related: minetest.setting_set(name, value) minetest.setting_get(name) -> string or nil minetest.setting_setbool(name, value) minetest.setting_getbool(name) -> boolean value or nil minetest.setting_get_pos(name) -> position or nil minetest.setting_save() -> nil, save all settings to config file\n\nAuthentication: minetest.notify_authentication_modified(name) ^ Should be called by the authentication handler if privileges change. ^ To report everybody, set name=nil. minetest.get_password_hash(name, raw_password) ^ Convert a name-password pair to a password hash that minetest can use minetest.string_to_privs(str) -> {priv1=true,...} minetest.privs_to_string(privs) -> \"priv1,priv2,...\" ^ Convert between two privilege representations minetest.set_player_password(name, password_hash) minetest.set_player_privs(name, {priv1=true,...}) minetest.get_player_privs(name) -> {priv1=true,...} minetest.auth_reload() ^ These call the authentication handler minetest.check_player_privs(name, {priv1=true,...}) -> bool, missing_privs ^ A quickhand for checking privileges minetest.get_player_ip(name) -> IP address string\n\nminetest.set_node(pos, node) minetest.add_node(pos, node): alias set_node(pos, node) ^ Set node at position (node = {name=\"foo\", param1=0, param2=0}) minetest.swap_node(pos, node) ^ Set node at position, but don't remove metadata minetest.remove_node(pos) ^ Equivalent to set_node(pos, \"air\") minetest.get_node(pos) ^ Returns {name=\"ignore\", ...} for unloaded area minetest.get_node_or_nil(pos) ^ Returns nil for unloaded area minetest.get_node_light(pos, timeofday) -> 0...15 or nil ^ timeofday: nil = current time, 0 = night, 0.5 = day\n\nminetest.place_node(pos, node) ^ Place node with the same effects that a player would cause minetest.dig_node(pos) ^ Dig node with the same effects that a player would cause\n\nReturns true if successful, false on failure (e.g. protected location) minetest.punch_node(pos) ^ Punch node with the same effects that a player would cause\n\nminetest.get_meta(pos) — Get a NodeMetaRef at that position minetest.get_node_timer(pos) — Get NodeTimerRef\n\nminetest.add_entity(pos, name): Spawn Lua-defined entity at position ^ Returns ObjectRef, or nil if failed minetest.add_item(pos, item): Spawn item ^ Returns ObjectRef, or nil if failed minetest.get_player_by_name(name) — Get an ObjectRef to a player minetest.get_objects_inside_radius(pos, radius) minetest.set_timeofday(val): val: 0...1; 0 = midnight, 0.5 = midday minetest.get_timeofday() minetest.get_gametime(): returns the time, in seconds, since the world was created minetest.find_node_near(pos, radius, nodenames) -> pos or nil ^ nodenames: e.g. {\"ignore\", \"group:tree\"} or \"default:dirt\" minetest.find_nodes_in_area(minp, maxp, nodenames) -> list of positions ^ nodenames: e.g. {\"ignore\", \"group:tree\"} or \"default:dirt\" minetest.get_perlin(noiseparams) minetest.get_perlin(seeddiff, octaves, persistence, scale) ^ Return world-specific perlin noise (int(worldseed)+seeddiff) minetest.get_voxel_manip() ^ Return voxel manipulator object minetest.set_gen_notify(flags, {deco_ids}) ^ Set the types of on-generate notifications that should be collected ^ flags is a flag field with the available flags: ^ dungeon, temple, cave_begin, cave_end, large_cave_begin, large_cave_end, decoration ^ The second parameter is a list of IDS of decorations which notification is requested for minetest.get_mapgen_object(objectname) ^ Return requested mapgen object if available (see Mapgen objects) minetest.set_mapgen_params(MapgenParams) ^ Set map generation parameters ^ Function cannot be called after the registration period; only initialization and on_mapgen_init ^ Takes a table as an argument with the fields mgname, seed, water_level, and flags. ^ Leave field unset to leave that parameter unchanged ^ flags contains a comma-delimited string of flags to set, or if the prefix \"no\" is attached, clears instead. ^ flags is in the same format and has the same options as 'mg_flags' in minetest.conf minetest.set_noiseparams(name, noiseparams, set_default) ^ Sets the noiseparams setting of 'name' to the noiseparams table specified in 'noiseparams'. ^ 'set_default', is an optional boolean (default of true) that specifies whether the setting ^ should be applied to the default config or current active config minetest.clear_objects() ^ clear all objects in the environments minetest.line_of_sight(pos1, pos2, stepsize) -> true/false, pos ^ Check if there is a direct line of sight between pos1 and pos2 ^ Returns the position of the blocking node when false ^ pos1 First position ^ pos2 Second position ^ stepsize smaller gives more accurate results but requires more computing\n\ntime. Default is 1. minetest.find_path(pos1,pos2,searchdistance,max_jump,max_drop,algorithm) ^ -> table containing path ^ returns a table of 3d points representing a path from pos1 to pos2 or nil ^ pos1: start position ^ pos2: end position ^ searchdistance: number of blocks to search in each direction ^ max_jump: maximum height difference to consider walkable ^ max_drop: maximum height difference to consider droppable ^ algorithm: A*_noprefetch(default), A*, Dijkstra minetest.spawn_tree (pos, {treedef}) ^ spawns L-System tree at given pos with definition in treedef table minetest.transforming_liquid_add(pos) ^ add node to liquid update queue minetest.get_node_max_level(pos) ^ get max available level for leveled node minetest.get_node_level(pos) ^ get level of leveled node (water, snow) minetest.set_node_level(pos, level) ^ set level of leveled node, default level = 1, if totallevel > maxlevel returns rest (total-max). minetest.add_node_level(pos, level) ^ increase level of leveled node by level, default level = 1, if totallevel > maxlevel returns rest (total-max). can be negative for decreasing\n\n{type=\"detached\", name=\"creative\"} minetest.create_detached_inventory(name, callbacks) -> InvRef ^ callbacks: See \"Detached inventory callbacks\" ^ Creates a detached inventory. If it already exists, it is cleared.\n\nFormspec: minetest.show_formspec(playername, formname, formspec) ^ playername: name of player to show formspec ^ formname: name passed to on_player_receive_fields callbacks ^ should follow \"modname: \" naming convention ^ formspec: formspec to display minetest.formspec_escape(string) -> string ^ escapes characters [ ] \\ , ; that can not be used in formspecs minetest.explode_table_event(string) -> table ^ returns e.g. {type=\"CHG\", row=1, column=2} ^ type: \"INV\" (no row selected), \"CHG\" (selected) or \"DCL\" (double-click) minetest.explode_textlist_event(string) -> table ^ returns e.g. {type=\"CHG\", index=1} ^ type: \"INV\" (no row selected), \"CHG\" (selected) or \"DCL\" (double-click) minetest.explode_scrollbar_event(string) -> table ^ returns e.g. {type=\"CHG\", value=500} ^ type: \"INV\" (something failed), \"CHG\" (has been changed) or \"VAL\" (not changed)\n\nItem handling: minetest.inventorycube(img1, img2, img3) ^ Returns a string for making an image of a cube (useful as an item image) minetest.get_pointed_thing_position(pointed_thing, above) ^ Get position of a pointed_thing (that you can get from somewhere) minetest.dir_to_facedir(dir, is6d) ^ Convert a vector to a facedir value, used in param2 for paramtype2=\"facedir\"; passing something non-nil/false for the optional second parameter causes it to take the y component into account minetest.facedir_to_dir(facedir) ^ Convert a facedir back into a vector aimed directly out the \"back\" of a node minetest.dir_to_wallmounted(dir) ^ Convert a vector to a wallmounted value, used for paramtype2=\"wallmounted\" minetest.get_node_drops(nodename, toolname) ^ Returns list of item names. ^ Note: This will be removed or modified in a future version. minetest.get_craft_result(input) -> output, decremented_input ^ input.method = 'normal' or 'cooking' or 'fuel' ^ input.width = for example 3 ^ input.items = for example { stack 1, stack 2, stack 3, stack 4,\n\nstack 5, stack 6, stack 7, stack 8, stack 9 } ^ output.item = ItemStack, if unsuccessful: empty ItemStack ^ output.time = number, if unsuccessful: 0 ^ decremented_input = like input minetest.get_craft_recipe(output) -> input ^ returns last registered recipe for output item (node) ^ output is a node or item type such as 'default:torch' ^ input.method = 'normal' or 'cooking' or 'fuel' ^ input.width = for example 3 ^ input.items = for example { stack 1, stack 2, stack 3, stack 4,\n\nstack 5, stack 6, stack 7, stack 8, stack 9 } ^ input.items = nil if no recipe found minetest.get_all_craft_recipes(query item) -> table or nil ^ returns indexed table with all registered recipes for query item (node)\n\nor nil if no recipe was found\n\noutput = string with item name and quantity\n\nExample query for default:gold_ingot will return table:\n\n} minetest.handle_node_drops(pos, drops, digger) ^ drops: list of itemstrings ^ Handles drops from nodes after digging: Default action is to put them into\n\ndigger's inventory ^ Can be overridden to get different functionality (e.g. dropping items on\n\nRollback: minetest.rollback_get_node_actions(pos, range, seconds, limit) -> {{actor, pos, time, oldnode, newnode}, ...} ^ Find who has done something to a node, or near a node ^ actor: \"player: \", also \"liquid\". minetest.rollback_revert_actions_by(actor, seconds) -> bool, log messages ^ Revert latest actions of someone ^ actor: \"player:\n\nDefaults for the on_* item definition functions: (These return the leftover itemstack) minetest.item_place_node(itemstack, placer, pointed_thing, param2) ^ Place item as a node ^ param2 overrides facedir and wallmounted param2 ^ returns itemstack, success minetest.item_place_object(itemstack, placer, pointed_thing) ^ Place item as-is minetest.item_place(itemstack, placer, pointed_thing, param2) ^ Use one of the above based on what the item is. ^ Calls on_rightclick of pointed_thing.under if defined instead ^ Note: is not called when wielded item overrides on_place ^ param2 overrides facedir and wallmounted param2 ^ returns itemstack, success minetest.item_drop(itemstack, dropper, pos) ^ Drop the item minetest.item_eat(hp_change, replace_with_item) ^ Eat the item. replace_with_item can be nil.\n\nDefaults for the on_punch and on_dig node definition callbacks: minetest.node_punch(pos, node, puncher, pointed_thing) ^ Calls functions registered by minetest.register_on_punchnode() minetest.node_dig(pos, node, digger) ^ Checks if node can be dug, puts item into inventory, removes node ^ Calls functions registered by minetest.registered_on_dignodes()\n\nTiming: minetest.after(time, func, ...) ^ Call function after time seconds ^ Optional: Variable number of arguments that are passed to func\n\nBans: minetest.get_ban_list() -> ban list (same as minetest.get_ban_description(\"\")) minetest.get_ban_description(ip_or_name) -> ban description (string) minetest.ban_player(name) -> ban a player minetest.unban_player_or_ip(name) -> unban player or IP address minetest.kick_player(name, [reason]) -> disconnect a player with a optional reason\n\nminetest.add_particlespawner(particlespawner definition) ^ Add a particlespawner, an object that spawns an amount of particles over time seconds ^ Returns an id ^ Deprecated: minetest.add_particlespawner(amount, time,\n\nminetest.delete_particlespawner(id, player) ^ Delete ParticleSpawner with id (return value from add_particlespawner) ^ If playername is specified, only deletes on the player's client, ^ otherwise on all clients\n\nSchematics: minetest.create_schematic(p1, p2, probability_list, filename, slice_prob_list) ^ Create a schematic from the volume of map specified by the box formed by p1 and p2. ^ Apply the specified probability values to the specified nodes in probability_list.\n\n^ probability_list is an array of tables containing two fields, pos and prob.\n\n^ pos is the 3d vector specifying the absolute coordinates of the node being modified,\n\n^ and prob is the integer value from 0 to 255 of the probability (see: Schematic specifier).\n\n^ If there are two or more entries with the same pos value, the last entry is used.\n\n^ If pos is not inside the box formed by p1 and p2, it is ignored.\n\n^ If probability_list is nil, no probabilities are applied.\n\n^ Slice probability works in the same manner, except takes a field called ypos instead which indicates\n\n^ the y position of the slice with a probability applied.\n\n^ If slice probability list is nil, no slice probabilities are applied. ^ Saves schematic in the Minetest Schematic format to filename.\n\nminetest.place_schematic(pos, schematic, rotation, replacements, force_placement) ^ Place the schematic specified by schematic (see: Schematic specifier) at pos. ^ Rotation can be \"0\", \"90\", \"180\", \"270\", or \"random\". ^ If the rotation parameter is omitted, the schematic is not rotated. ^ replacements = {[\"old_name\"] = \"convert_to\", ...} ^ force_placement is a boolean indicating whether nodes other than air and ^ ignore are replaced by the schematic\n\nMisc.: minetest.get_connected_players() -> list of ObjectRefs minetest.hash_node_position({x=,y=,z=}) -> 48-bit integer ^ Gives a unique hash number for a node position (16+16+16=48bit) minetest.get_position_from_hash(hash) -> position ^ Inverse transform of minetest.hash_node_position minetest.get_item_group(name, group) -> rating ^ Get rating of a group of an item. (0 = not in group) minetest.get_node_group(name, group) -> rating ^ Deprecated: An alias for the former. minetest.get_content_id(name) -> integer ^ Gets the internal content ID of name minetest.get_name_from_content_id(content_id) -> string ^ Gets the name of the content with that content ID minetest.parse_json(string[, nullvalue]) -> something ^ Convert a string containing JSON data into the Lua equivalent ^ nullvalue: returned in place of the JSON null; defaults to nil ^ On success returns a table, a string, a number, a boolean or nullvalue ^ On failure outputs an error message and returns nil ^ Example: parse_json(\"[10, {\\\"a\\\":false}]\") -> {10, {a = false}} minetest.write_json(data[, styled]) -> string or nil and error message ^ Convert a Lua table into a JSON string ^ styled: Outputs in a human-readable format if this is set, defaults to false ^ Unserializable things like functions and userdata are saved as null. ^ Warning: JSON is more strict than the Lua table format.\n\n1. You can only use strings and positive integers of at least one as keys.\n\n2. You can not mix string and integer keys.\n\nThis is due to the fact that JSON has two distinct array and object values. ^ Example: write_json({10, {a = false}}) -> \"[10, {\\\"a\\\": false}]\" minetest.serialize(table) -> string ^ Convert a table containing tables, strings, numbers, booleans and nils\n\ninto string form readable by minetest.deserialize ^ Example: serialize({foo='bar'}) -> 'return { [\"foo\"] = \"bar\" }' minetest.deserialize(string) -> table ^ Convert a string returned by minetest.deserialize into a table ^ String is loaded in an empty sandbox environment. ^ Will load functions, but they cannot access the global environment. ^ Example: deserialize('return { [\"foo\"] = \"bar\" }') -> {foo='bar'} ^ Example: deserialize('print(\"foo\")') -> nil (function call fails)\n\n^ error:[string \"print(\"foo\")\"]:1: attempt to call global 'print' (a nil value) minetest.compress(data, method, ...) -> compressed_data ^ Compress a string of data. ^ \n\n method\n\n is a string identifying the compression method to be used. ^ Supported compression methods: ^ Deflate (zlib): \"deflate\" ^ \n\n ...\n\n indicates method-specific arguments. Currently defined arguments are: ^ Deflate: \n\n level\n\n - Compression level, 0-9 or nil. minetest.decompress(compressed_data, method, ...) -> data ^ Decompress a string of data (using ZLib). ^ See documentation on minetest.compress() for supported compression methods. ^ currently supported. ^ \n\n ...\n\n indicates method-specific arguments. Currently, no methods use this. minetest.is_protected(pos, name) -> bool ^ This function should be overridden by protection mods and should be used to\n\ncheck if a player can interact at a position. ^ This function should call the old version of itself if the position is not\n\nprotected by the mod. ^ Example:\n\nif mymod:position_protected_from(pos, name) then\n\nend minetest.record_protection_violation(pos, name) ^ This function calls functions registered with\n\nminetest.register_on_protection_violation. minetest.rotate_and_place(itemstack, placer, pointed_thing, infinitestacks, orient_flags) ^ Attempt to predict the desired orientation of the facedir-capable node\n\ndefined by itemstack, and place it accordingly (on-wall, on the floor, or\n\nhanging from the ceiling). Stacks are handled normally if the infinitestacks\n\nfield is false or omitted (else, the itemstack is not changed). orient_flags\n\nis an optional table containing extra tweaks to the placement code:\n\ninvert_wall: if true, place wall-orientation on the ground and ground-\n\nforce_wall: if true, always place the node in wall orientation.\n\nforce_ceiling: if true, always place on the ceiling.\n\nforce_floor: if true, always place the node on the floor.\n\nThe above four options are mutually-exclusive; the last in the list takes precedence over the first.\n\nforce_facedir: if true, forcefully reset the facedir to north when placing on the floor or ceiling\n\nminetest.rotate_node(itemstack, placer, pointed_thing) ^ calls rotate_and_place() with infinitestacks set according to the state of\n\nthe creative mode setting, and checks for \"sneak\" to set the invert_wall\n\nminetest.forceload_block(pos) ^ forceloads the position pos. ^ returns true if area could be forceloaded\n\nPlease note that forceloaded areas are saved when the server restarts.\n\nGlobal objects: minetest.env - EnvRef of the server environment and world. ^ Any function in the minetest namespace can be called using the syntax\n\nminetest.somefunction(somearguments) ^ Deprecated, but support is not to be dropped soon\n\nGlobal tables: minetest.registered_items ^ List of registered items, indexed by name minetest.registered_nodes ^ List of registered node definitions, indexed by name minetest.registered_craftitems ^ List of registered craft item definitions, indexed by name minetest.registered_tools ^ List of registered tool definitions, indexed by name minetest.registered_entities ^ List of registered entity prototypes, indexed by name minetest.object_refs ^ List of object references, indexed by active object id minetest.luaentities ^ List of Lua entities, indexed by active object id\n\nin a node - Can be gotten via minetest.get_meta(pos) methods: - set_string(name, value) - get_string(name) - set_int(name, value) - get_int(name) - set_float(name, value) - get_float(name) - get_inventory() -> InvRef - to_table() -> nil or {fields = {...}, inventory = {list1 = {}, ...}} - from_table(nil or {})\n\nNodeTimerRef: Node Timers - a high resolution persistent per-node timer - Can be gotten via minetest.get_node_timer(pos) methods: - set(timeout,elapsed)\n\n^ timeout is in seconds, and supports fractional values (0.1 etc)\n\n^ elapsed is in seconds, and supports fractional values (0.1 etc)\n\n^ will trigger the node's on_timer function after timeout-elapsed seconds - start(timeout)\n\n^ if timeout is 0, timer is inactive - get_elapsed() -> current elapsed time in seconds\n\n^ the node's on_timer function will be called after timeout-elapsed seconds - is_started() -> boolean state of timer\n\n^ returns true if timer is started, otherwise false\n\nObjectRef: Moving things in the game are generally these (basically reference to a C++ ServerActiveObject) methods: - remove(): remove object (after returning from Lua) - getpos() -> {x=num, y=num, z=num} - setpos(pos); pos={x=num, y=num, z=num} - moveto(pos, continuous=false): interpolated move - punch(puncher, time_from_last_punch, tool_capabilities, direction)\n\n^ time_from_last_punch = time since last punch action of the puncher\n\n^ direction: can be nil - right_click(clicker); clicker = an another ObjectRef - get_hp(): returns number of hitpoints (2 * number of hearts) - set_hp(hp): set number of hitpoints (2 * number of hearts) - get_inventory() -> InvRef - get_wield_list(): returns the name of the inventory list the wielded item is in - get_wield_index(): returns the index of the wielded item - get_wielded_item() -> ItemStack - set_wielded_item(item): replaces the wielded item, returns true if successful - set_armor_groups({group1=rating, group2=rating, ...}) - set_animation({x=1,y=1}, frame_speed=15, frame_blend=0) - set_attach(parent, bone, position, rotation)\n\n^ Select sprite from spritesheet with optional animation and DM-style\n\ntexture selection based on yaw relative to camera - get_entity_name() (DEPRECATED: Will be removed in a future version)\n\nIn place of this, use object.get_luaentity().name - get_luaentity() Player-only: (no-op for other objects) - is_player(): true for players, false for others - get_player_name(): returns \"\" if is not a player - get_look_dir(): get camera direction as a unit vector - get_look_pitch(): pitch in radians - get_look_yaw(): yaw in radians (wraps around pretty randomly as of now) - set_look_pitch(radians): sets look pitch - set_look_yaw(radians): sets look yaw - get_breath() : returns players breath - set_breath(value) : sets players breath\n\n^ Should usually be called in on_joinplayer - get_inventory_formspec() -> formspec string - get_player_control(): returns table with player pressed keys\n\nsneak_glitch = true, — whether player can use the sneak glitch\n\n}) - hud_add(hud definition): add a HUD element described by HUD def, returns ID number on success - hud_remove(id): remove the HUD element of the specified id - hud_change(id, stat, value): change a value of a previously added HUD element\n\n^ element stat values: position, name, scale, text, number, item, dir - hud_get(id): gets the HUD element definition structure of the specified ID - hud_set_flags(flags): sets specified HUD flags to true/false\n\n^ pass a table containing a true/false value of each flag to be set or unset\n\n^ if a flag is nil, the flag is not modified - hud_get_flags(): returns a table containing status of hud flags\n\n^ count: number of items, must be between 1 and 23 - hud_set_hotbar_image(texturename)\n\n^ Note: currently does not work directly in on_joinplayer; use\n\nminetest.after(0) in there. - override_day_night_ratio(ratio or nil)\n\n^ nil: Disables override, defaulting to sunlight based on day-night cycle - set_local_animation({x=0, y=79}, {x=168, y=187}, {x=189, y=198}, {x=200, y=219}, frame_speed=30): set animation for player model in third person view\n\n^ animation frame speed - set_eye_offset({x=0,y=0,z=0},{x=0,y=0,z=0}): defines offset value for camera per player\n\nInvRef: Reference to an inventory methods: - is_empty(listname): return true if list is empty - get_size(listname): get size of a list - set_size(listname, size): set size of a list\n\n^ returns false on error (e.g. invalid listname or listsize) - get_width(listname): get width of a list - set_width(listname, width): set width of list; currently used for crafting - get_stack(listname, i): get a copy of stack index i in list - set_stack(listname, i, stack): copy stack to index i in list - get_list(listname): return full list - set_list(listname, list): set full list (size will not change) - get_lists(): returns list of inventory lists - set_lists(lists): sets inventory lists (size will not change) - add_item(listname, stack): add item somewhere in list, returns leftover ItemStack - room_for_item(listname, stack): returns true if the stack of items\n\ncan be fully added to the list - contains_item(listname, stack): returns true if the stack of items\n\ncan be fully taken from the list - remove_item(listname, stack): take as many items as specified from the list,\n\nreturns the items that were actually removed (as an ItemStack) - note that\n\nany item metadata is ignored, so attempting to remove a specific unique\n\nitem this way will likely remove the wrong one - to do that use set_stack\n\nwith an empty ItemStack - get_location() -> location compatible to minetest.get_inventory(location)\n\n-> {type=\"undefined\"} in case location is not known\n\nItemStack: A stack of items. - Can be created via ItemStack(itemstack or itemstring or table or nil) methods: - is_empty(): return true if stack is empty - get_name(): returns item name (e.g. \"default:stone\") - set_name(itemname) - get_count(): returns number of items on the stack - set_count(count) - get_wear(): returns tool wear (0-65535), 0 for non-tools - set_wear(wear) - get_metadata(): returns metadata (a string attached to an item stack) - set_metadata(metadata) - clear(): removes all items from the stack, making it empty - replace(item): replace the contents of this stack (item can also\n\nbe an itemstring or table) - to_string(): returns the stack in itemstring form - to_table(): returns the stack in Lua table form - get_stack_max(): returns the maximum size of the stack (depends on the item) - get_free_space(): returns get_stack_max() - get_count() - is_known(): returns true if the item name refers to a defined item type - get_definition(): returns the item definition table - get_tool_capabilities(): returns the digging properties of the item,\n\n^ or those of the hand if none are defined for this item type - add_wear(amount): increases wear by amount if the item is a tool - add_item(item): put some item or stack onto this stack,\n\n^ returns leftover ItemStack - item_fits(item): returns true if item or stack can be fully added to this one - take_item(n): take (and remove) up to n items from this stack\n\n^ if n is omitted, n=1 is used - peek_item(n): copy (don't remove) up to n items from this stack\n\n^ if n is omitted, n=1 is used\n\nPseudoRandom: A pseudorandom number generator - Can be created via PseudoRandom(seed) methods: - next(): return next integer random number [0...32767] - next(min, max): return next integer random number [min...max]\n\n(max - min) must be 32767 or <= 6553 due to the simple\n\nPerlinNoise: A perlin noise generator - Can be created via PerlinNoise(seed, octaves, persistence, scale) or PerlinNoise(noiseparams) - Also minetest.get_perlin(seeddiff, octaves, persistence, scale) or minetest.get_perlin(noiseparams) methods: - get2d(pos) -> 2d noise value at pos={x=,y=} - get3d(pos) -> 3d noise value at pos={x=,y=,z=}\n\nPerlinNoiseMap: A fast, bulk perlin noise generator - Can be created via PerlinNoiseMap(noiseparams, size) - Also minetest.get_perlin_map(noiseparams, size) - Format of 'size' for 3D perlin maps: {x=dimx, y=dimy, z=dimz} - Format of 'size' for 2D perlin maps: {x=dimx, y=dimy}\n\n^ where dimx, dimy, dimz are the array dimensions\n\n^ for 3D perlin maps the z component of 'size' must be larger than 1 otherwise 'nil' is returned methods: - get2dMap(pos) -> X 2d array of 2d noise values starting at pos={x=,y=} - get3dMap(pos) -> X X 3d array of 3d noise values starting at pos={x=,y=,z=} - get2dMap_flat(pos) -> Flat element array of 2d noise values starting at pos={x=,y=} - get3dMap_flat(pos) -> Same as get2dMap_flat, but 3d noise\n\nVoxelManip: An interface to the MapVoxelManipulator for Lua - Can be created via VoxelManip() - Also minetest.get_voxel_manip() methods: - read_from_map(p1, p2): Reads a chunk of map from the map containing the region formed by p1 and p2.\n\n^ returns actual emerged pmin, actual emerged pmax - write_to_map(): Writes the data loaded from the VoxelManip back to the map.\n\n^ important: data must be set using VoxelManip:set_data before calling this - get_node_at(pos): Returns a MapNode table of the node currently loaded in the VoxelManip at that position - set_node_at(pos, node): Sets a specific MapNode in the VoxelManip at that position - get_data(): Gets the data read into the VoxelManip object\n\n^ returns raw node data is in the form of an array of node content ids - set_data(data): Sets the data contents of the VoxelManip object - update_map(): Update map after writing chunk back to map.\n\n^ To be used only by VoxelManip objects created by the mod itself; not a VoxelManip that was\n\n^ retrieved from minetest.get_mapgen_object - set_lighting(light, p1, p2): Set the lighting within the VoxelManip to a uniform value\n\n^ To be used only by a VoxelManip object from minetest.get_mapgen_object\n\n^ (p1, p2) is the area in which lighting is set; defaults to the whole area if left out - get_light_data(): Gets the light data read into the VoxelManip object\n\n^ Returns an array (indices 1 to volume) of integers ranging from 0 to 255\n\n^ Each value is the bitwise combination of day and night light values (0..15 each)\n\n^ light = day + (night * 16) - set_light_data(light_data): Sets the param1 (light) contents of each node in the VoxelManip\n\n^ expects lighting data in the same format that get_light_data() returns - get_param2_data(): Gets the raw param2 data read into the VoxelManip object - set_param2_data(param2_data): Sets the param2 contents of each node in the VoxelManip - calc_lighting(p1, p2): Calculate lighting within the VoxelManip\n\n^ To be used only by a VoxelManip object from minetest.get_mapgen_object\n\n^ (p1, p2) is the area in which lighting is set; defaults to the whole area if left out - update_liquids(): Update liquid flow - was_modified(): Returns true or false if the data in the voxel manipulator had been modified since\n\nthe last read from map, due to a call to minetest.set_data() on the loaded area elsewhere\n\nVoxelArea: A helper class for voxel areas - Can be created via VoxelArea:new{MinEdge=pmin, MaxEdge=pmax} - Coordinates are inclusive, like most other things in Minetest methods: - getExtent(): returns a 3d vector containing the size of the area formed by MinEdge and MaxEdge - getVolume(): returns the volume of the area formed by MinEdge and MaxEdge - index(x, y, z): returns the index of an absolute position in a flat array starting at 1\n\n^ useful for things like VoxelManip, raw Schematic specifiers, PerlinNoiseMap:get2d/3dMap, and so on - indexp(p): same as above, except takes a vector - position(i): returns the absolute position vector corresponding to index i - contains(x, y, z): check if (x,y,z) is inside area formed by MinEdge and MaxEdge - containsp(p): same as above, except takes a vector - containsi(i): same as above, except takes an index - iter(minx, miny, minz, maxx, maxy, maxz): returns an iterator that returns indices\n\n^ from (minx,miny,minz) to (maxx,maxy,maxz) in the order of [z [y [x]]] - iterp(minp, maxp): same as above, except takes a vector\n\nSettings: An interface to read config files in the format of minetest.conf - Can be created via Settings(filename) methods: - get(key) -> value - get_bool(key) -> boolean - set(key, value) - remove(key) -> success - get_names() -> {key1,...} - write() -> success\n\nA mapgen object is a construct used in map generation. Mapgen objects can be used by an on_generate callback to speed up operations by avoiding unnecessary recalculations; these can be retrieved using the minetest.get_mapgen_object() function. If the requested Mapgen object is unavailable, or get_mapgen_object() was called outside of an on_generate() callback, nil is returned.\n\nThe following Mapgen objects are currently available:\n\nThis returns three values; the VoxelManip object to be used, minimum and maximum emerged position, in that order. All mapgens support this object.\n\nReturns an array containing the y coordinates of the ground levels of nodes in the most recently generated chunk by the current mapgen.\n\nReturns an array containing the biome IDs of nodes in the most recently generated chunk by the current mapgen.\n\nReturns an array containing the temperature values of nodes in the most recently generated chunk by the current mapgen.\n\nReturns an array containing the humidity values of nodes in the most recently generated chunk by the current mapgen.\n\nReturns a table mapping requested generation notification types to arrays of positions at which the corresponding generated structures are located at within the current chunk. To set the capture of positions of interest to be recorded on generate, use minetest.set_gen_notify(). Possible fields of the table returned are:\n\ndungeon, temple, cave_begin, cave_end, large_cave_begin, large_cave_end, decoration Decorations have a key in the format of \"decoration#id\", where id is the numeric unique decoration ID.\n\n- It has the member .name, which is the registered name (\"mod:thing\")\n\n- It has the member .object, which is an ObjectRef pointing to the object\n\n- The original prototype stuff is visible directly via a metatable - Callbacks:\n\n^ Called when the object is instantiated.\n\n^ Called on every server tick, after movement and collision processing.\n\ndtime is usually 0.1 seconds, as per the dedicated_server_step setting\n\n^ Called when somebody punches the object.\n\n^ Note that you probably want to handle most punches using the\n\n^ time_from_last_punch: Meant for disallowing spamming of clicks (can be nil)\n\n^ tool_capabilities: capability table of used tool (can be nil)\n\n^ dir: unit vector of direction of punch. Always defined. Points from\n\nthe puncher to the punched.\n\n^ Should return a string that will be passed to on_activate when\n\nthe object is instantiated the next time.\n\nrandom_level, - num factor to lower nr of iterations, usually 0 - 3\n\ntrunk_type, - string single/double/crossed) type of trunk: 1 node, 2x2 nodes or 3x3 in cross shape\n\nseed, - num random seed; if no seed is provided, the engine will create one\n\nKey for Special L-System Symbols used in Axioms\n\nG - move forward one unit with the pen up\n\nF - move forward one unit with the pen down drawing trunks and branches\n\nf - move forward one unit with the pen down drawing leaves (100% chance)\n\nT - move forward one unit with the pen down drawing trunks only\n\nR - move forward one unit with the pen down placing fruit\n\nC - replace with rules set C\n\nc - replace with rules set C, chance 70%\n\n+ - yaw the turtle right by angle parameter\n\n& - pitch the turtle down by angle parameter\n\n^ - pitch the turtle up by angle parameter\n\n/ - roll the turtle to the right by angle parameter\n\n* - roll the turtle to the left by angle parameter\n\ncollide_with_objects = true, — collide with other objects if physical=true\n\n^ automatically set yaw to movement direction; offset in degrees; false to disable }\n\non_activate = function(self, staticdata, dtime_s), on_step = function(self, dtime), on_punch = function(self, hitter), on_rightclick = function(self, clicker), get_staticdata = function(self), ^ Called sometimes; the string returned is passed to on_activate when the entity is re-activated from static state\n\n# Also you can define arbitrary member variables here myvariable = whatever,\n\n— In the following two fields, also group:groupname will work.\n\nneighbors = {\"default:water_source\", \"default:water_flowing\"}, — (any of these)\n\n^ If left out or empty, any neighbor will do\n\nif rating not applicable, use 1.\n\n^ If nil and item is node, prediction is made automatically\n\n^ If nil and item is not a node, no prediction is made\n\n^ If \"\" and item is anything, no prediction is made\n\n^ Otherwise should be name of node which the client immediately places\n\non ground when the player places the item. Server will always update\n\non_place = func(itemstack, placer, pointed_thing), ^ Shall place item and return the leftover itemstack ^ default: minetest.item_place on_drop = func(itemstack, dropper, pos), ^ Shall drop item and return the leftover itemstack ^ default: minetest.item_drop on_use = func(itemstack, user, pointed_thing), ^ default: nil ^ Function must return either nil if no item shall be removed from inventory, or an itemstack to replace the original itemstack. e.g. itemstack:take_item(); return itemstack ^ Otherwise, the function is free to do what it wants. ^ The default functions handle regular use cases. after_use = func(itemstack, user, node, digparams), ^ default: nil ^ If defined, should return an itemstack and will be called instead of wearing out the tool. If returns nil, does nothing. If after_use doesn't exist, it is the same as: function(itemstack, user, node, digparams) itemstack:add_wear(digparams.wear) return itemstack end\n\n^ backface culling only supported in special tiles - deprecated still supported field names:\n\ndrawtype = \"normal\", — See \"Node drawtypes\" visual_scale = 1.0, ^ Supported for drawtypes \"plantlike\", \"signlike\", \"torchlike\", \"mesh\". ^ For plantlike, the image will start at the bottom of the node; for the ^ other drawtypes, the image will be centered on the node. ^ Note that positioning for \"torchlike\" may still change. tiles = {tile definition 1, def2, def3, def4, def5, def6}, ^ Textures of node; +Y, -Y, +X, -X, +Z, -Z (old field name: tile_images) ^ List can be shortened to needed length special_tiles = {tile definition 1, Tile definition 2}, ^ Special textures of node; used rarely (old field name: special_materials) ^ List can be shortened to needed length alpha = 255, use_texture_alpha = false, — Use texture's alpha channel post_effect_color = {a=0, r=0, g=0, b=0}, — If player is inside node paramtype = \"none\", — See \"Nodes\" paramtype2 = \"none\", — See \"Nodes\" is_ground_content = true, — If false, the cave generator will not carve through this sunlight_propagates = false, — If true, sunlight will go infinitely through this walkable = true, — If true, objects collide with node pointable = true, — If true, can be pointed at diggable = true, — If false, can never be dug climbable = false, — If true, can be climbed on (ladder) buildable_to = false, — If true, placed nodes can replace this node liquidtype = \"none\", — \"none\"/\"source\"/\"flowing\" liquid_alternative_flowing = \"\", — Flowing version of source liquid liquid_alternative_source = \"\", — Source version of flowing liquid liquid_viscosity = 0, — Higher viscosity = slower flow (max. 7) liquid_renewable = true, — Can new liquid source be created by placing two or more sources nearby? freezemelt = \"\", — water for snow/ice, ice/snow for water leveled = 0, — Block contain level in param2. value - default level, used for snow. Don't forget use \"leveled\" type nodebox liquid_range = 8, — number of flowing nodes around source (max. 8) drowning = 0, — Player will take this amount of damage if no bubbles are left light_source = 0, — Amount of light emitted by node damage_per_second = 0, — If player is inside node, this damage is caused node_box = {type=\"regular\"}, — See \"Node boxes\" mesh = \"model\", selection_box = {type=\"regular\"}, — See \"Node boxes\" ^ If drawtype \"nodebox\" is used and selection_box is nil, then node_box is used legacy_facedir_simple = false, — Support maps made in and before January 2012 legacy_wallmounted = false, — Support maps made in and before January 2012 sounds = { footstep = , dig = , — \"__group\" = group-based sound (default) dug = , place = , }, drop = \"\", — Name of dropped node when dug. Default is the node itself. — Alternatively: drop = { max_items = 1, — Maximum number of items to drop. items = { — Choose max_items randomly from this list. { items = {\"foo:bar\", \"baz:frob\"}, — Choose one item randomly from this list. rarity = 1, — Probability of getting is 1 / rarity. }, }, },\n\non_construct = func(pos), ^ Node constructor; always called after adding node ^ Can set up metadata and stuff like that ^ default: nil on_destruct = func(pos), ^ Node destructor; always called before removing node ^ default: nil after_destruct = func(pos, oldnode), ^ Node destructor; always called after removing node ^ default: nil\n\nafter_place_node = func(pos, placer, itemstack, pointed_thing) ^ Called after constructing node when node was placed using minetest.item_place_node / minetest.place_node ^ If return true no item is taken from itemstack ^ default: nil after_dig_node = func(pos, oldnode, oldmetadata, digger), ^ oldmetadata is in table format ^ Called after destructing node when node was dug using minetest.node_dig / minetest.dig_node ^ default: nil can_dig = function(pos,player) ^ returns true if node can be dug, or false if not ^ default: nil\n\non_punch = func(pos, node, puncher, pointed_thing), ^ default: minetest.node_punch ^ By default: Calls minetest.register_on_punchnode callbacks on_rightclick = func(pos, node, clicker, itemstack, pointed_thing), ^ default: nil ^ if defined, itemstack will hold clicker's wielded item ^ Shall return the leftover itemstack ^ Note: pointed_thing can be nil, if a mod calls this function\n\non_dig = func(pos, node, digger), ^ default: minetest.node_dig ^ By default: checks privileges, wears out tool and removes node\n\non_timer = function(pos,elapsed), ^ default: nil ^ called by NodeTimers, see minetest.get_node_timer and NodeTimerRef ^ elapsed is the total time passed since the timer was started ^ return true to run the timer for another cycle with the same timeout value\n\nallow_metadata_inventory_move = func(pos, from_list, from_index, to_list, to_index, count, player), ^ Called when a player wants to move items inside the inventory ^ Return value: number of items allowed to move\n\nallow_metadata_inventory_put = func(pos, listname, index, stack, player), ^ Called when a player wants to put something into the inventory ^ Return value: number of items allowed to put ^ Return value: -1: Allow and don't modify item count in inventory\n\nallow_metadata_inventory_take = func(pos, listname, index, stack, player), ^ Called when a player wants to take something out of the inventory ^ Return value: number of items allowed to take ^ Return value: -1: Allow and don't modify item count in inventory\n\non_metadata_inventory_move = func(pos, from_list, from_index, to_list, to_index, count, player), on_metadata_inventory_put = func(pos, listname, index, stack, player), on_metadata_inventory_take = func(pos, listname, index, stack, player), ^ Called after the actual action has happened, according to what was allowed. ^ No return value\n\non_blast = func(pos, intensity), ^ intensity: 1.0 = mid range of regular TNT ^ If defined, called when an explosion touches the node, instead of removing the node\n\nreplacements = replace one input item with another item on crafting> } replacements = replace one input item with another item on crafting> } ^ a list of nodenames is supported too ^ Ore has a 1 out of clust_scarcity chance of spawning in a node ^ This value should be MUCH higher than your intuition might tell you! ^ Size of the bounding box of the cluster ^ In this example, there is a 3x3x3 cluster where 8 out of the 27 nodes are coal ore ^ If noise is above this threshold, ore is placed. Not needed for a uniform distribution ^ NoiseParams structure describing the perlin noise used for ore distribution. ^ Needed for sheet ore_type. Omit from scatter ore_type for a uniform ore distribution } ^ Node that decoration can be placed on ^ Size of divisions made in the chunk being generated. ^ If the chunk size is not evenly divisible by sidelen, sidelen is made equal to the chunk size. ^ Ratio of the area to be uniformly filled by the decoration. ^ Used only if noise_params is not specified. ^ NoiseParams structure describing the perlin noise used for decoration distribution. ^ The result of this is multiplied by the 2d area of the division being decorated. ^ List of biomes in which this decoration occurs. Occurs in all biomes if this is omitted, ^ and ignored if the Mapgen being used does not support biomes. ----- Simple-type parameters decoration = \"default:grass\", ^ The node name used as the decoration. ^ If instead a list of strings, a randomly selected node from the list is placed as the decoration. height = 1, ^ Number of nodes high the decoration is made. ^ If height_max is not 0, this is the lower bound of the randomly selected height. height_max = 0, ^ Number of nodes the decoration can be at maximum. ^ If absent, the parameter 'height' is used as a constant. spawn_by = \"default:water\", ^ Node that the decoration only spawns next to, in a 1-node square radius. num_spawn_by = 1, ^ Number of spawn_by nodes that must be surrounding the decoration position to occur. ^ If absent or -1, decorations occur next to any nodes. ----- Schematic-type parameters schematic = \"foobar.mts\", ^ If schematic is a string, it is the filepath relative to the current working directory of the ^ specified Minetest schematic file. ^ - OR -, could instead be a table containing two mandatory fields, size and data, ^ and an optional table yslice_prob: schematic = { size = {x=4, y=6, z=4}, data = { {name=\"cobble\", param1=255, param2=0}, {name=\"dirt_with_grass\", param1=255, param2=0}, ... }, yslice_prob = { {ypos=2, prob=128}, {ypos=5, prob=64}, ... }, }, ^ See 'Schematic specifier' for details. replacements = {[\"oldname\"] = \"convert_to\", ...}, flags = \"place_center_x, place_center_z\", ^ Flags for schematic decorations. See 'Schematic attributes'. rotation = \"90\" — rotate schematic 90 degrees on placement ^ Rotation can be \"0\", \"90\", \"180\", \"270\", or \"random\". ^ Called when a player wants to move items inside the inventory ^ Return value: number of items allowed to move allow_put = func(inv, listname, index, stack, player), ^ Called when a player wants to put something into the inventory ^ Return value: number of items allowed to put ^ Return value: -1: Allow and don't modify item count in inventory allow_take = func(inv, listname, index, stack, player), ^ Called when a player wants to take something out of the inventory ^ Return value: number of items allowed to take ^ Return value: -1: Allow and don't modify item count in inventory on_move = func(inv, from_list, from_index, to_list, to_index, count, player), on_put = func(inv, listname, index, stack, player), on_take = func(inv, listname, index, stack, player), ^ Called after the actual action has happened, according to what was allowed. ^ No return value ^ type of HUD element, can be either of \"image\", \"text\", \"statbar\", or \"inventory\" ^ Selected item in inventory. 0 for no item selected. ^ Spawn particle at pos with velocity and acceleration ^ vertical: if true faces player using y axis only ^ optional, if specified spawns particle only on the player's client } ^ If time is 0 has infinite lifespan and spawns the amount on a per-second base ^ The particle's properties are random values in between the bounds: ^ vertical: if true faces player using y axis only ^ Playername is optional, if specified spawns particle only on the player's client } Minetest-c55 is a Minecraft clone, developed by the Finnish programmer 'celeron55' and contributors. Minetest has been built with the intention of making it easy for anyone to program Mods (Modifications), extending its features and adding new items. In this tutorial we'll show you how to get started writing Mods for Minetest using Lua. Along the way you'll start learning how to write programs in Lua. If you already know a programming language like Java, Javascript, Python, etc., then you should find it reasonably easy to get started in Lua. If you are new to programming, don't worry. We'll go slowly and show you exactly what to do. If you would like to learn more about programming in Lua there are lots of places on the web that can help. We've put a list of suggested programming resources at the end of this tutorial. Why Would You Want to Write a Mod? The computer program that runs Minetest is split into two main parts. First, there is the \"Engine\". This looks after drawing the world on the screen, keeping track of players and objects in the game, all the communications in a multiplayer game, etc. Second, there are the \"Mods\". Mods decide what things in the game look like and how they work. Mods deal with all the crafting. Mods define what happens when you hit things. Without the Mods the game would run, but it wouldn't be very interesting. The people who wrote Minetest have made it really easy for you to change how the game works by writing your own Mods. This means that with a little bit of knowledge of how to write small bits of computer programs you can change Minetest to work in any way that you can imagine. Really. You want trees to fly? No problem. You want to have a working farm? Someone's already done that one. You want chests to send tweets to Twitter whenever someone takes something out of them? That one will take a little work. To get ourselves started, let's write a simple Mod. What we'll do is change the game so that when you hit a brick block it complains at the injustice you have just caused it. Follow these steps to get yourself started:\n• Create a new single player world. Make sure it is a \"Minetest\" world and not a \"Build\" world\n• Play the Modding Tutorial — remember to put a check in the \"Creative Mode\" box\n• Hit the brick block and check that nothing unusual happens In order to write computer programs, you are going to need to use a text editor. If you already know what a text editor is, then you probably have a favourite one ready to go. If you don't know what a text editor is and you are using Windows, then Notepad++ is a good choice. You can download and install a copy from http://notepad-plus-plus.org/. Finding Where to Put Your Mods The next bit can be a bit fiddly. If you get stuck ask someone for some help. You need to find the folder where you installed Minetest. I unpacked my Minetest on my \"C:\\\" folder on Windows. If I open the \"Computer\" folder in Windows and click on \"Local Disk (C:)\", I can find a folder called \"minetest-0.4.6\". This is the where I installed Minetest. Make sure you can find the folder where you installed Minetest as this is the place you need to go to write your Mods. If you are stuck, ask someone for help. Now that you have found the folder where you installed Minetest, let's write our first Mod. This will be a simple, but polite, Mod that will say hello to us as we start the game. Inside the folder where you installed Minetest double click to open the folder called \"mods\". Double click again to open the folder called \"minetest\". We now need to make a new folder in this minetest directory for our new Mod. In Windows right-click the empty space in the folder and choose \"New => Folder\". Change the name of the folder to \"chatty_bricks\". So far so good. We've created a folder to hold our new Mod. Now we actually need to write some code. Open up your text editor (Notepad++ or your favorite) and tell it to create a new blank text document. Type the following lines into the new text document: print(\"++++++++ Hello from me +++++++++\") Now you need to save the document. Save it in the \"chatty_bricks\" folder that you just made. Call the document \"init.lua\". Be careful not to save it as \"init.lua.txt\" by mistake. We have reached the moment of truth. Go and fire up Minetest. As you start the program you should see a console window pop up behind the main Minetest window. Move the windows around so that you can see the console window. Keep one eye on the console window as you double click to open a single player world. Did you see your hello line appear? If you did, perform a celebratory dance of your own choosing. If you didn't, ask the person sitting next to you to see if they can help you figure out what went wrong. Challenge: Try changing your program to make it say something different. Be polite!!! While I was impressed by that, I've a feeling your friends may be somewhat underwhelmed if you brought them round specially to show them your new Minetest Mod. Let's improve on it a bit. Open up your editor again and edit the init.lua file. After the print statement you created in the previous step, on a new line add the following: minetest.after(5, function(params) minetest.chat_send_all(\"BEWARE THIS GAME HAS BEEN MOD'ED!\") end ) Save your init.lua. Close your single player world in Minetest and then reopen it. Five seconds after you start the game you should get the message appear as a chat in the main game. Challenge:The number 5 in the code tells Minetest how many seconds to wait before sending the message. Add some more \"after\" functions so that Minetest does a count-down from 10 to 1. Now For Those Chatty Bricks We're nearly there. The last thing for us to do is add some code to our Mod that makes bricks complain when you hit them. We've already seen the chat_send_all function that sends a message. What we need to use now is register_on_punchnode function to tell the game what to do when someone hits a brick. Add this to your init.lua file: minetest.register_on_punchnode( function(pos, node, puncher) if node.name == \"default:brick\" then minetest.chat_send_all(\"Hey!! Stop it!! That hurts\") end end ) Challenge: Add some more code to do make a different type of block say something. Challenge: Change the message so that the brick uses the name of the person who punched it. Challenge (Tricky!): See if you can use the minetest.sound_play function to make the brick make a noise when you hit it. Where to Look for More Help List of all the minetest._____ functions: http://dev.minetest.net/Global_Minetest_object This is page is adapted from Jeija's Modding tutorial by Dave Potts (davegoopot on GitHub).\n\nMinetest-c55 is a Minecraft clone, developed by the Finnish programmer 'celeron55' and contributors.\n\nMinetest has a ScriptAPI (Applictation Programming Interface), which is used to program Mods (Modifications) for the game, extending its features and adding new items.\n\nThis ScriptAPI is accessed using an easy-to-use programming langauge called Lua.\n\nHere are the three types of items you can define in Minetest:\n• Tool (register_tool): A tool/weapon that can dig and damage things according to tool_capabilities\n\nThe type of the object is important as it plays a part in the properties of that object.\n\nIn minetest, each node, tool and item needs a unique name to identify it in the api. The name's format is like this:\n\nIn this case, the mod is called 'modname' (name is preset by the folder name) and the block is called 'itemname', so it's tutorial:decowood. so for example, default:dirt is the unique name for dirt.\n\n1) Create a new folder with the name of your mod in the mod folder\n\nminetest* The place where minetest was installed/extracted to.\n\n2) In the new folder, create a file called 'init.lua'. This is the file that will contain the source code for the mod.\n\nTo do this on Windows, use WordPad.\n\nClick file>save as, dropdown to all files, and type 'init.lua' in the file name box.\n\nOr you can use a lua compatible editor, a few examples: 'Context', 'luaedit', 'Geany (linux)', 'Bluefish (linux)'\n\nWARNING: DO NOT USE NOTEPAD\n\n3) Next make another sub folder called 'textures'. This is where you will place the textures\n\nWe are going to make a mod that adds a special kind of wood that can only be used for decoration. For this, create a new mod called 'tutorial' using the method described in Chapter 0.\n\n2) Copy the file 'tutorial_decowood.png' supplied with this Document to the textures folder in the mod.\n\nTry it) Launch the game now, and notice that the mods are automatically loaded and compiled. This means when changing the code you simply have to 'Exit to Menu' and 'Start Game/Connect' again to try out the changes.\n\nLet's try out our first mod! Open the chat window ingame (press t) and enter \"/giveme tutorial:decowood 99\" (Without \"\" of course). This will add 99 blocks of the decorative wood to your inventory!\n\nThe \"give\" privilage is required for the /giveme command to work\n\nTo grant yourself the \"give\" privilage, go to worlds/gamename/auth.txt and open it. Add \",give\" after \"shout,interact\" to make it \"shout,interact,give\"\n\nLet's have a look at the source code:\n\nThe function minetest.register_node(name, table) is responsible for adding new blocks to the game (node=block, but also torches, rails, ...)\n\nIt takes 2 Parameters: The name of the new block (\"tutorial:decowood\", the string before : MUST be the name of the mod folder) and a table with several properties of the block.\n\nIn this case we use 2 properties:\n• tile_images: Sets the texture of the block; You can use only 1 texture or multiple textures, seperated by commas {\"tex1.png\", \"tex2.png\", ...}. The game checks for the texture files in ALL textures folders of the game.\n• group: This sets the time it takes to destroy the block, and the tool required See more\n\nCrafting does not only play an important role in Minecraft, Minetest also uses different crafting recipes. Therefore it is important to know what crafting means and how to code it!\n\nCrafting means to creating Tools, Blocks and Other Objects. In minetest you have a 3x3 crafting area by default with a 1x1 output field.\n\nFor example, a stone pickaxe can be made out of 2 Sticks and 3 Cobblestones:\n\nS=Stick C=Cobblestone; Looks quite logic, doesn't it?\n\nSo let's make a crafting recipe for the decorative wood of Chapter 0!\n\nJust append (add) this to your init.lua file:\n\nThe function minetest.register_craft() registers a crafting process, it defines the recipe for something.\n\nIt takes 1 parameter which is a table that contains 2 properties: (and an optional third)\n\n1, output - which sets the outcome of the crafting process and recipe which is the actual recipe for the output.\n\n2. recipe must be a table with other tables inside. Every of the 3 tables defines another row of the crafting field. Every row contains 3 columns. In this case The crafting recipe is like this:\n\n\n\n [image] The craft recipe for our decowood\n\n3. [optional] type - if you want to make it a furnace craft add type=\"cook\" before the \"output\" property\n\nEasy, isn't it? You may also try out some other combinations!\n\nWhat is the mod \"default\"?\n\nSo what is default? 'default' is the most important \"mod\" of minetest, in fact minetest itself is more like just a game engine, all the contents, materials, and other stuff are in several mods, like 'default' (standard tools/blocks), 'bucket' (Buckets: Lava/Water),...\n\nIf you want to find out more about these mods and maybe use features they contain, just have a look in their init.lua!\n\nFor Windows & Linux run-in-place these mods are in minetest/games/minetest_game/\n\nFor Linux systemwide installation, these mods are in /usr/share/minetest/games/minetest_game\n\nABMs stands for \"Active Block Modifiers\" and they add actions to blocks. For instance, the tutorial-wood could become normal wood after a few seconds.\n\nAppend this code to your init.lua:\n\nTry it out! It's really annoying to see all your decowood creations destroyed after 30 seconds, they simply become normal wood.\n\nBut how does this work?\n\nThe function minetest.register_abm registers an action for each block of the same type.\n\nnodenames = {\"tutorial:decowood'} means that the action is processed for each decowood block.\n\nYou could also try \"default:stone\" instead of that to turn all stone blocks into wood.\n\ninterval = 30 means that the action is performed every 30 seconds. It starts counting at the beginning of the game. After 30 seconds all actions are processed, it doesn't matter when the block was placed.\n\nThis is not a per-block timer!\n\nchance = 1 means that the probability of the action is 1:1, it happens in every case. A higher value means that it's less probable.\n\naction = function(pos) is the function that is actually performed.\n\nIt contains the command minetest.env:add_node. More about it in the next section\n\nThis is a function that is used to add/replace a node the given place\n• The position parameter (more information later)\n• A table which defines the properties of the block, e.g. the name, the direction it faces, ...\n\nIn this case the name is enough to define what block you can see.\n\nSo let's assume we want to create a mod that makes junglegrass grow above every dirt-with-grass block. This should be a slow process, one dirt-with-grass block after the other should be grown over. This is what we do:\n\nYou should already know everything else but the line \"pos.y=pos.y+1\".\n\nTo understand the position variable, you need to know that in 3d space, positions are determind by three co-ordinates: x,y,z The player usually spawns near 0,0,0.\n\nThe line pos.y=pos.y+1 manipulates the position to 1 Block above the dirt-with-grass node.\n\nThere are some small other differences to our first abm.\n\nThe interval is 1 in this case, but the chance (probability) is 100.Therefore the function is executed every second, but only in 1 of 100 cases.\n\nThis makes your minetest garden slowly been overgrown by junglegrass.\n\nSometimes you have so much code, a single init.lua file is too hard to maintain.\n\nBut there is a solution! dofile(minetest.get_modpath(\"tutorial\")..\"/anotherfile.lua\") will tell Minetest to look for anotherfile.lua in the same folder as init.lua, and load its contents.\n\nAs with most programming, when you develop you tend to get what are called \"bugs\" and errors, which are basically human mistakes.\n\nThere are three types of bugs/errors\n• Compile Time Errors - These occur when Minetest is loading the mods, and are caused by syntax errors (a simple mistake like leaving a \"}\" out)\n• Runtime Errors - These occur while the game is being played, and often crash the game. (eg: mod \"modname:blockname\" is not defined)\n• Runtime Bugs - These bugs cause the mod not to work as planned\n\nTo help avoid syntax mistakes, make sure your code is easy to read.\n\nWhich one of these codes is easier to read?\n\nAlso you should check your work and put comments in\n\npos.y=pos.y+1 --This line increases the position's y axis by 1\n\nThe Console is the black window with writing in that appears when Minetest runs.\n\nLUA has a function called \"print\" and it displays a message to the console.\n\nYou should the print function so you know how far Minetest gets in a program.\n\nFor example, you have a mistake in the code:\n\ncheck_something(1) function check_something(value) if value=0 then print(\"it ends up here\") else print(\"but you are certern that value=1\") end end\n\nThe aboves Runtime bug was caused by a single \"=\" instead of double \"=\", and so instead of checking if value was equal to 0, it set it to 0 resulting in true And so having print helps point out your mistake.\n\nDon't have any knowledge? Use the following to learn:\n\nCodecademy -Learn the basics of programming (it is Javascript (not Java) but still helps)\n\nUpdated, Rewriten and Reformated for english by \"Rubenwardy\".\n\nCheck for new version at GitHub.\n\nFor more advanced (and often cryptic) information about minetest modding have a look at this reference: Lua_api.txt\n\nFor generic modding questions or specific questions, feel free to ask in the minetest forum: minetest.net/forum\n\nFor questions about this tutorial, ask in the thread for this tutorial: minetest.net/forum/...\n\nThanks you for reading! Good luck in creating your amazing dream mod!\n\nMinetest uses Lua scripts to provide modding support. This online book aims to teach you how to create your own mods, starting from the basics.\n\nWhat you will need\n• A Code Editor. Talked about in the Lua Scripts chapter.\n• A copy of Minetest in the 0.4 series. (eg: 0.4.13)\n• The ability to work independently, without pestering other developers to write your code for you.\n• Motivation to keep trying when things go wrong.\n\nSo, go on then.\n\nStart reading. Use the navigation bar on the left (or on the top on mobiles) to open a chapter.\n\nNoticed a mistake, or want to give feedback? Tell us about it using one of these methods:\n• Send me a PM on the Forum.\n\nYou can contribute to this project on GitHub.\n\nIn this chapter we will learn the basic structure of a mod's folder. This is an essential skill when creating mods.\n\nEach mod has its own folder, where all its Lua code, textures, models and sounds are placed. These folders need to be placed in a mod location, such as minetest/mods. Mods can be grouped into mod packs, which are explained below.\n\nA \"mod name\" is used to refer to a mod. Each mod should have a unique mod name, which you can choose - a good mod name can describes what the mod does. Mod names can be make up of letters, numbers or underscores. The folder a mod is in needs to be called the same as the mod name.\n\nMod name (eg: \"mymod\") - init.lua - the main scripting code file, which is run when the game loads. - (optional) depends.txt - a list of mod names that needs to be loaded before this mod. - (optional) textures/ - place images here, commonly in the format modname__itemname.png - (optional) sounds/ - place sounds in here - (optional) models/ - place 3d models in here ...and any other lua files to be included by init.lua\n\nOnly the init.lua file is required in a mod for it to run on game load, however the other items are needed by some mods to perform their functionality.\n\nThe depends text file allows you to specify what mods this mod requires to run, and what needs to be loaded before this mod.\n\nAs you can see, each modname is on its own line.\n\nMod names with a question mark following them are optional dependencies. If an optional dependency is installed, it is loaded before the mod. However, if the dependency is not installed, the mod still loads. This is in contrast to normal dependencies, which will cause the current mod not to work if the dependency is not installed.\n\nModpacks allow multiple mods to be packaged together, and move together. They are useful if you want to supply multiple mods to a player but don't want to make them download each one individually.\n\nmodpackfolder/ - modone/ - modtwo/ - modthree/ - modfour/ - modpack.txt - signals that this is a mod pack, content does not matter\n\nAre you confused? Don't worry, here is an example putting all of this together.\n\nprint(\"This file will be run at load time!\") minetest.register_node(\"mymod:node\", { description = \"This is a node\", tiles = { \"mymod_node.png\", \"mymod_node.png\", \"mymod_node.png\", \"mymod_node.png\", \"mymod_node.png\", \"mymod_node.png\" }, groups = {cracky = 1} })\n\nOur mod has a name of \"mymod\". It has two text files: init.lua and depends.txt.\n\nThe script prints a message and then registers a node - which will be explained in the next chapter.\n\nThe depends text file adds a dependency to the default mod, which is in minetest_game.\n\nThere is also a texture in textures/ for the node.\n\nIn this chapter we will talk about scripting in Lua, the tools required, and go over some techniques which you will probably find useful.\n\nTools Recommended Editors Integrated Programming Environments Coding in Lua Selection Programming Local and Global Including other Lua Scripts\n\nA text editor with code highlighting is sufficient for writing scripts in Lua. Code highlighting gives different colors to different words and characters depending on what they mean. This allows you to spot mistakes.\n\nfunction ctf.post(team,msg) if not ctf.team(team) then return false end if not ctf.team(team).log then ctf.team(team).log = {} end table.insert(ctf.team(team).log,1,msg) ctf.save() return true end\n\nFor example, keywords in the above snippet are highlighted, such as if, then, end, return. table.insert is a function which comes with Lua by default.\n\nOther editors are available, of course.\n\nIDEs allow you to debug code like a native application. These are harder to set up than just a text editor.\n\nOne such IDE is Eclipse with the Koneki Lua plugin:\n• Create a new Lua project from existing source (specify Minetest's base directory).\n• Follow instructions from Koneki wiki how to do \"Attach to remote Application\" debugging (just a few steps).\n• It is suggested to add those lines from wiki at beginning of builtin.lua.\n• Start the debugger (set \"Break on first line\" in debugger configuration to see if it is working).\n\nThis section is a Work in Progress. May be unclear.\n\nPrograms are a series of commands that run one after another. We call these commands \"statements.\"\n\nProgram flow is important, it allows you to direct or skip over statements. There are three main types of flow:\n• Sequence: Just run one statement after another, no skipping.\n• Iteration: Repeating, looping. Keep running the same statements until a condition is met.\n\nSo, what do statements in Lua look like?\n\nlocal a = 2 -- Set 'a' to 2 local b = 2 -- Set 'b' to 2 local result = a + b -- Set 'result' to a + b, which is 4 a = a + 10 print(\"Sum is \"..result)\n\nWoah, what happened there? a, b and result are variables. They're like what you get in mathematics, A = w * h. The equals signs are assignments, so \"result\" is set to a + b. Variable names can be longer than one character unlike in maths, as seen with the \"result\" variable. Lua is case sensitive. A is a different variable to a.\n\nThe word \"local\" before they are first used means that they have local scope, I'll discuss that shortly.\n\nType Description Example Integer Whole number local A = 4 Float Decimal local B = 3.2, local C = 5 / 2 String A piece of text local D = \"one two three\" Boolean True or False local is_true = false, local E = (1 == 1) Table Lists Explained below Function Can run. May require inputs and may return a value local result = func(1, 2, 3)\n\nNot an exhaustive list. Doesn't contain every possible type.\n\nA string in programming terms is a piece of text.\n\nNot an exhaustive list. Doesn't contain every possible operator.\n\nThe most basic selection is the if statement. It looks like this:\n\nlocal random_number = math.random(1, 100) -- Between 1 and 100. if random_number > 50 then print(\"Woohoo!\") else print(\"No!\") end\n\nThat example generates a random number between 1 and 100. It then prints \"Woohoo!\" if that number is bigger than 50, otherwise it prints \"No!\". What else can you get apart from '>'?\n\nSymbol Purpose Example A == B Equals 1 == 1 (true), 1 == 2 (false) A ~= B Doesn't equal 1 ~= 1 (false), 1 ~= 2 (true) A > B Greater than 5 > 2 (true), 1 > 2 (false), 1 > 1 (false) A < B Less than 1 < 3 (true), 3 < 1 (false), 1 < 1 (false) A >= B Greater than or equals 5 >= 5 (true), 5 >= 3 (true), 5 >= 6 (false) A <= B Less than or equals 3 <= 6 (true), 3 <= 3 (true) A and B And (both must be correct) (2 > 1) and (1 == 1) (true), (2 > 3) and (1 == 1) (false) A or B either or. One or both must be true. (2 > 1) or (1 == 2) (true), (2 > 4) or (1 == 3) (false) not A not true not (1 == 2) (true), not (1 == 1) (false)\n\nif not A and B then print(\"Yay!\") end\n\nWhich prints \"Yay!\" if A is false and B is true.\n\nLogical and arithmetic operators work exactly the same, they both accept inputs and return a value which can be stored.\n\nEach of the following loops do the same thing (printing out the numbers from 0 to 10 inclusive)\n\ni = 0; while i < 10 do print i i = i + 1 end i = 0 repeat print i i = i + 1 until i > 10 -- \"numeric loop\" for i = 0, 10, 1 do print i end -- \"generic loop\" list = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10} for _,i in pairs(list) do print i end\n\nThe last two (\"numeric\" and \"generic\") types of loop share two properties: The loop variables are local to the loop body and you should not assign any value to the loop variables within the loop. (This is different from some languages where you could, for example, do \"if (i = 7) then i = 11\" to make it exit a numeric loop early)\n\nProgramming is the action of talking a problem, such as sorting a list of items, and then turning it into steps that a computer can understand.\n\nTeaching you the logical process of programming is beyond the scope of this book, however the following websites are quite useful in developing this:\n\nCodecademy is one of the best resources for learning to 'code', it provides an interactive tutorial experience.\n\nScratch is a good resource when starting from absolute basics, learning the problem solving techniques required to program.\n\nScratch is designed to teach children how to program, it isn't a serious programming language.\n\nWhether a variable is local or global determines where it can be written to or read to. A local variable is only accessible from where it is defined. Here are some examples:\n\n-- Accessible from within this script file local one = 1 function myfunc() -- Accessible from within this function local two = one + one if two == one then -- Accessible from within this if statement local three = one + two end end\n\nWhereas global variables can be accessed from anywhere in the script file, and from any other mod.\n\nmy_global_variable = \"blah\" function one() my_global_variable = \"three\" end print(my_global_variable) -- Output: \"blah\" one() print(my_global_variable) -- Output: \"three\"\n\nLocals should be used as much as possible\n\nLua is global by default (unlike most other programming languages). Local variables must be identified as such.\n\nfunction one() foo = \"bar\" end function two() print(dump(foo)) -- Output: \"bar\" end one() two()\n\ndump() is a function that can turn any variable into a string so the programmer can see what it is. The foo variable will be printed as \"bar\", including the quotes which show it is a string.\n\nThis is sloppy coding, and Minetest will in fact warn you about this:\n\nTo correct this, use \"local\":\n\nfunction one() local foo = \"bar\" end function two() print(dump(foo)) -- Output: nil end one() two()\n\nNil means not initalised. The variable hasn't been assigned a variable yet, doesn't exist or has been uninitialised (ie: set to nil)\n\nThe same goes for functions. Functions are variables of a special type. You should make functions as local as much as possible, as other mods could have functions of the same name.\n\nIf you want your functions to be accessible from other scripts or mods, it is recommended that you add them all into a table with the same name as the mod:\n\nmymod = {} function mymod.foo(bar) return \"foo\" .. bar end -- In another mod, or script: mymod.foo(\"foobar\")\n\nYou can include Lua scripts from your mod, or another mod like this:\n\n\"local\" variables declared outside of any functions in a script file will be local to that script. You won't be able to access them from any other scripts.\n\nAs for how you divide code up into files, it doesn't matter that much. The most important thing is your code is easy to read and edit. You won't need to use it for smaller projects.\n\nIn this chapter we will learn how to register a new node or craftitem, and create craft recipes.\n\nEach item, whether that be a node, craftitem, tool or entity, has an item string.\n\nThis is sometimes referred to as registered name or just name. A string in programming terms is a piece of text.\n\nThe modname is the name of the folder your mod is in. You may call the itemname any thing you like, however it should be relevant to what the item is, and it can't already be registered.\n\nOverriding allows you to:\n• Use an item string with a different modname.\n\nTo override, you prefix the item string with a colon, :. Declaring an item as :default:dirt will override the default:dirt in the default mod.\n\nTextures are usually 16 by 16 pixels. They can be any resolution, but it is recommended that they are in the order of 2 (eg, 16, 32, 64, 128, etc), as other resolutions may not be supported correctly on older devices.\n\nTextures should be placed in textures/. Their name should match modname_itemname.png.\n\nJPEGs are supported, but they do not support transparency and are generally bad quality at low resolutions.\n\nCraftitems are the simplest items in Minetest. Craftitems cannot be placed in the world. They are used in recipes to create other items, or they can be used be the player, such as food.\n\nItem definitions like seen above are usually made up of an unique item string and a definition table. The definition table contains attributes which affect the behaviour of the item.\n\nFoods are items that cure health. To create a food item, you need to define the on_use property like this:\n\nThe number supplied to the minetest.item_eat function is the number of hit points that are healed by this food. Two hit points make one heart, and because there are 10 hearts there are 20 hitpoints. Hitpoints don't have to be integers (whole numbers), they can be decimals.\n\nSometimes you may want a food to be replaced with another item when being eaten, for example smaller pieces of cake or bones after eating meat. To do this, use:\n\nWhere replace_with_item is an item string.\n\nHow about if you want to do more than just eat the item, such as send a message to the player?\n\nminetest.register_craftitem(\"mymod:mudpie\", { description = \"Alien Mud Pie\", inventory_image = \"myfood_mudpie.png\", on_use = function(itemstack, user, pointed_thing) hp_change = 20 replace_with_item = nil minetest.chat_send_player(user:get_player_name(), \"You ate an alien mud pie!\") -- Support for hunger mods using minetest.register_on_item_eat for _ , callback in pairs(minetest.registered_on_item_eats) do local result = callback(hp_change, replace_with_item, itemstack, user, pointed_thing) if result then return result end end if itemstack:take_item() ~= nil then user:set_hp(user:get_hp() + hp_change) end return itemstack end })\n\nIf you are creating a hunger mod, or if you are affecting foods outside of your mod, you should consider using minetest.register_on_item_eat\n\nIn Minetest, a node is an item that you can place. Most nodes are 1m x 1m x 1m cubes, however the shape doesn't have to be a cube - as we will explore later.\n\nLet's get onto it. A node's definition table is very similar to a craftitem's definition table, however you need to set the textures for the faces of the cube.\n\nLet's ignore groups for now, and take a look at the tiles. The tiles property is a table of texture names the node will use. When there is only one texture, this texture is used on every side.\n\nWhat if you would like a different texture for each side? Well, you give a table of 6 texture names, in this order:\n\nup (+Y), down (-Y), right (+X), left (-X), back (+Z), front (-Z). (+Y, -Y, +X, -X, +Z, -Z)\n\nRemember: +Y is upwards in Minetest, along with most video games. A plus direction means that it is facing positive co-ordinates, a negative direction means that it is facing negative co-ordinates.\n\nThe is_ground_content attribute allows caves to be generated over the stone.\n\nThere are several different types of crafting, identified by the type property.\n\nshaped - Ingredients must be in the correct position.\n\nshapeless - It doesn't matter where the ingredients are, just that there is the right amount.\n\ncooking - Recipes for the furnace to use.\n\nfuel - Defines items which can be burned in furnaces.\n\ntool_repair - Used to allow the repairing of tools.\n\nCraft recipes do not use Item Strings to uniquely identify themselves.\n\nShaped recipes are the normal recipes - the ingredients have to be in the right place. For example, when you are making a pickaxe the ingredients have to be in the right place for it to work.\n\nThis is pretty self-explanatory. You don't need to define the type, as shaped crafts are default. The 99 after the itemname in output makes the craft create 99 chairs rather than one.\n\nIf you notice, there is a blank column at the far end. This means that the craft must always be exactly that. In most cases, such as the door recipe, you don't care if the ingredients are always in an exact place, you just want them correct relative to each other. In order to do this, delete any empty rows and columns. In the above case, there is an empty last column, which, when removed, allows the recipe to be crafted if it was all moved one place to the right.\n\nShapeless recipes are a type of recipe which is used when it doesn't matter where the ingredients are placed, just that they're there. For example, when you craft a bronze ingot, the steel and the copper do not need to be in any specific place for it to work.\n\nWhen you are crafting the diamond, the three diamond fragments can be anywhere in the grid.\n\nNote: You can still use options like the number after the result, as mentioned earlier.\n\nRecipes with the type \"cooking\" are not made in the crafting grid, but are cooked in furnaces, or other cooking tools that might be found in mods. For example, you use a cooking recipe to turn ores into bars.\n\nAs you can see from this example, the only real difference in the code is that the recipe is just a single item, compared to being in a table (between braces). They also have an optional \"cooktime\" parameter, which defines how long the item takes to cook. If this is not set it defaults to 3.\n\nThe recipe above works when the coal block is in the input slot, with some form of a fuel below it. It creates diamond fragments after 10 seconds!\n\nThis type is an accompaniment to the cooking type, as it defines what can be burned in furnaces and other cooking tools from mods.\n\nThey don't have an output like other recipes, but they have a burn time which defines how long they will last as fuel, in seconds. So, the diamond is good as fuel for 300 seconds!\n\nItems can be members of many groups, and groups can have many members. Groups are usually identified using group:group_name There are several reason you use groups.\n\nGroups can be used in crafting recipes to allow interchangeability of ingredients. For example, you may use group:wood to allow any wood item to be used in the recipe.\n\nLet's look at our above mymod:diamond definition. You'll notice this line:\n\nCracky is a digtype. Dig types specify what type of the material the node is physically, and what tools are best to destroy it.\n\nsnappy something that can be cut using fine tools; e.g. leaves, smallplants, wire, sheets of metal\n\nchoppy something that can be cut using force; e.g. trees, wooden planks\n\nfleshy Living things like animals and the player. This could imply some blood effects when hitting.\n\nIn this chapter we will learn how to create and optimise textures for Minetest. We will use techniques relevant for pixel art.\n\nYou need to be aware that MS Paint does not support transparency. This won't matter if you're making textures for the side of nodes, but generally you need transparency for craft items, etc.\n\nIMP is commonly used in the Minetest community. It has quite a high learning curve as lots of its features are hidden away.\n\nUse the pencil tool to edit individual pixels\n\nFor the most part, you want to manipulate pixels on an individual basis. The tool for this in most editors is the pencil tool.\n\nSome drawtypes have not been explained yet, and placeholder images are being used.\n\nIn this chapter we explain all the different types of node drawtypes there are.\n\nFirst of all, what is a drawtype? A drawtype defines how the node is to be drawn. A torch looks different to water, water looks different to stone.\n\nThe string you use to determine the drawtype in the node definition is the same as the title of the sections, except in lower case.\n\nThis article is not complete yet. These drawtypes are missing:\n\nThis is, well, the normal drawtypes. Nodes that use this will be cubes with textures for each side, simple-as.\n\nHere is the example from the Nodes, Items and Crafting chapter. Notice how you don't need to declare the drawtype.\n\nThese nodes are see through, and thus have no textures.\n\nminetest.register_node(\"myair:air\", { description = \"MyAir (you hacker you!)\", drawtype = \"airlike\", paramtype = \"light\", -- ^ Allows light to propagate through the node with the -- light value falling by 1 per node. sunlight_propagates = true, -- Sunlight shines through walkable = false, -- Would make the player collide with the air node pointable = false, -- You can't select the node diggable = false, -- You can't dig the node buildable_to = true, -- Nodes can be replace this node. -- (you can place a node and remove the air node -- that used to be there) air_equivalent = true, drop = \"\", groups = {not_in_creative_inventory=1} })\n\nThese nodes are complete liquid nodes, the liquid flows outwards from position using the flowing liquid drawtype. For each liquid node you should also have a flowing liquid node.\n\n-- Some properties have been removed as they are beyond the scope of this chapter. minetest.register_node(\"default:water_source\", { drawtype = \"liquid\", paramtype = \"light\", inventory_image = minetest.inventorycube(\"default_water.png\"), -- ^ this is required to stop the inventory image from being animated tiles = { { name = \"default_water_source_animated.png\", animation = { type = \"vertical_frames\", aspect_w = 16, aspect_h = 16, length = 2.0 } } }, special_tiles = { -- New-style water source material (mostly unused) { name = \"default_water_source_animated.png\", animation = {type = \"vertical_frames\", aspect_w = 16, aspect_h = 16, length = 2.0}, backface_culling = false, } }, -- -- Behavior -- walkable = false, -- The player falls through pointable = false, -- The player can't highlight it diggable = false, -- The player can't dig it buildable_to = true, -- Nodes can be replace this node alpha = 160, -- -- Liquid Properties -- drowning = 1, liquidtype = \"source\", liquid_alternative_flowing = \"default:water_flowing\", -- ^ when the liquid is flowing liquid_alternative_source = \"default:water_source\", -- ^ when the liquid is a source liquid_viscosity = WATER_VISC, -- ^ how fast liquid_range = 8, -- ^ how far post_effect_color = {a=64, r=100, g=100, b=200}, -- ^ color of screen when the player is submerged })\n\nSee default:water_flowing in the default mod in minetest_game, it is mostly the same as the above example\n\nWhen you place multiple glasslike nodes together, you'll notice that the internal edges are hidden, like this:\n\nThis makes the node's edge go around the whole thing with a 3D effect, rather than individual nodes, like the following:\n\nminetest.register_node(\"default:glass\", { description = \"Glass\", drawtype = \"glasslike_framed\", tiles = {\"default_glass.png\", \"default_glass_detail.png\"}, inventory_image = minetest.inventorycube(\"default_glass.png\"), paramtype = \"light\", sunlight_propagates = true, -- Sunlight can shine through block is_ground_content = false, -- Stops caves from being generated over this node. groups = {cracky = 3, oddly_breakable_by_hand = 3}, sounds = default.node_sound_glass_defaults() })\n\n\"optional\" drawtypes need less rendering time if deactivated on the client's side.\n\nAllfaces nodes are partially transparent nodes - they have holes on the faces - which show every single face of the cube, even if sides are up against another node (which would normally be hidden). Leaves in vanilla minetest_game use this drawtype.\n\nAllows clients to disable it using new_style_leaves = 0, requiring less rendering time.\n\nTorchLike nodes are 2D nodes which allow you to have different textures depending on whether they are placed against a wall, on the floor or on the ceiling.\n\nTorchLike nodes are not restricted to torches, you could use the for switches or other items which need to have different textures depending on where they are placed.\n\nminetest.register_node(\"foobar:torch\", { description = \"Foobar Torch\", drawtype = \"torchlike\", tiles = { {\"foobar_torch_floor.png\"}, {\"foobar_torch_ceiling.png\"}, {\"foobar_torch_wall.png\"} }, inventory_image = \"foobar_torch_floor.png\", wield_image = \"default_torch_floor.png\", light_source = LIGHT_MAX-1, -- Determines how the torch is selected, ie: the wire box around it. -- each value is { x1, y1, z1, x2, y2, z2 } -- (x1, y1, y1) is the bottom front left corner -- (x2, y2, y2) is the opposite - top back right. -- Similar to the nodebox format. selection_box = { type = \"wallmounted\", wall_top = {-0.1, 0.5-0.6, -0.1, 0.1, 0.5, 0.1}, wall_bottom = {-0.1, -0.5, -0.1, 0.1, -0.5+0.6, 0.1}, wall_side = {-0.5, -0.3, -0.1, -0.5+0.3, 0.3, 0.1}, } })\n\nNodeboxes allow you to create a node which is not cubic, but is instead made out of as many cuboids as you like.\n\nThe most important part is the nodebox table:\n\nEach row is a cubiod which are joined to make a single node. The first three numbers are the co-ordinates, from -0.5 to 0.5 inclusive, of the bottom front left most corner, the last three numbers are the opposite corner. They are in the form X, Y, Z, where Y is up.\n\nYou can use the NodeBoxEditor to create node boxes by dragging the edges, it is more visual than doing it by hand.\n\nSometimes you want different nodeboxes for when it is place on the floor, wall and ceiling, like with torches.\n\nIn this chapter you will learn how to manipulate a node's metadata.\n\nMetadata is data about data. So Node Metadata is data about a node.\n\nYou may use metadata to store:\n• a node's inventory (such as in a chest).\n• progress on crafting (such as in a furnace).\n• who owns the node (such as in a locked chest).\n\nThe node's type, light levels and orientation are not stored in the metadata, but are rather part of the data itself.\n\nMetadata is stored in a key value relationship.\n\nOnce you have a position of a node, you can do this:\n\nlocal value = meta:get_string(\"key\") if value then print(value) else -- value == nil -- metadata of key \"key\" does not exist print(value) end\n\nHere are all the get functions you can use, as of writing:\n\nIn order to do booleans, you should use get_string and minetest.is_yes:\n\nlocal value = minetest.is_yes(meta:get_string(\"key\")) if value then print(\"is yes\") else print(\"is no\") end\n\nSetting meta data works pretty much exactly the same way.\n\nlocal value = \"one\" meta:set_string(\"key\", value) meta:set_string(\"foo\", \"bar\")\n\nHere are all the set functions you can use, as of writing:\n\nYou can convert to and from lua tables using to_table and from_table:\n\nThe Minetest Engine reads the field infotext in order to make text appear on mouse-over. This is used by furnaces to show progress and signs to show their text.\n\nmeta:set_string(\"infotext\", \"Here is some text that will appear on mouse over!\")\n\nMake a block which disappears after it has been punched 5 times. (use on_punch in the node def and minetest.set_node)\n\nIn this chapter we will learn how to create an Active Block Modifier (ABM). An active block modifier allows you to run code on certain nodes at certain intervals. Please be warned, ABMs which are too frequent or act on too many nodes cause massive amounts of lag. Use them lightly.\n\nWe are now going to make a mod (yay!). It will add a type of grass called alien grass - it grows near water on grassy blocks.\n\nminetest.register_node(\"aliens:grass\", { description = \"Alien Grass\", light_source = 3, -- The node radiates light. Values can be from 1 to 15 tiles = {\"aliens_grass.png\"}, groups = {choppy=1}, on_use = minetest.item_eat(20) }) minetest.register_abm({ nodenames = {\"default:dirt_with_grass\"}, neighbors = {\"default:water_source\", \"default:water_flowing\"}, interval = 10.0, -- Run every 10 seconds chance = 50, -- Select every 1 in 50 nodes action = function(pos, node, active_object_count, active_object_count_wider) minetest.set_node({x = pos.x, y = pos.y + 1, z = pos.z}, {name = \"aliens:grass\"}) end })\n\nEvery ten seconds the ABM is run. Each node which has the correct nodename and the correct neighbors then has a 1 in 5 chance of being run. If a node is run on, an alien grass block is placed above it. Please be warned, that will delete any blocks above grass blocks - you should check there is space by doing minetest.get_node.\n\nThat's really all there is to ABMs. Specifying a neighbor is optional, so is chance.\n• Midas touch: Make water turn to gold blocks with a 1 in 100 chance, every 5 seconds.\n• Decay: Make wood turn into dirt when water is a neighbor.\n• Burnin': Make every air node catch on fire. (Tip: \"air\" and \"fire:basic_flame\"). Warning: expect the game to crash.\n\nIn this chapter we will learn how to interact with player chat, including sending messages, intercepting messages and registering chat commands.\n\nIt's as simple as calling the chat_send_all function, as so:\n\nminetest.chat_send_all(\"This is a chat message to all players\")\n\nHere is an example of how it would appear ingame (there are other messages around it).\n\n<player1> Look at this entrance This is a chat message to all players <player2> What about it?\n\nIt's as simple as calling the chat_send_player function, as so:\n\nminetest.chat_send_player(\"player1\", \"This is a chat message for player1\")\n\nOnly player1 can see this message, and it's displayed the same as above.\n\nOccasionally you'll see mods with code like this:\n\nminetest.chat_send_player(\"player1\", \"This is a server message\", true) minetest.chat_send_player(\"player1\", \"This is a server message\", false)\n\nThe boolean at the end was documented thus:\n\nminetest.chat_send_player(name, text, prepend) -^ prepend: optional, if it is set to false \"Server -!- \" will not be prepended to the message\n\nIt has been depreciated so the third parameter is now ignored and has no effect.\n\nIn order to register a chat command, such as /foo, use register_chatcommand:\n\nCalling /foo bar will result in You said bar! in the chat console.\n\nThis makes it so that only players with the interact privilege can run the command. Other players will see an error message informing them which privilege they're missing.\n\nThis returns two values, firstly a boolean which says that the command succeeded and secondly the chat message to send to the player.\n\nYou can use register_on_chat_message, like so:\n\nBy returning false, we're allowing the chat message to be sent by the default handler. You can actually miss out the line return false, and it would still work the same.\n\nWARNING: CHAT COMMANDS ARE ALSO INTERCEPTED. If you only want to catch player messages, you need to do this:\n\nminetest.register_on_chat_message(function(name, message) if message:sub(1, 1) == \"/\" then print(name .. \" ran chat command\") return false end print(name .. \" said \" .. message) return false end)\n\nPlayer physics can be modified using physics overrides. Physics overrides can set the walking speed, jump speed and gravity constants. Physics overrides are set on a player by player basis, and are multipliers - a value of 2 for gravity would make gravity twice as strong.\n\nHere is an example which adds an antigravity command, which puts the caller in low G:\n\nminetest.register_chatcommand(\"antigravity\", func = function(name, param) local player = minetest.get_player_by_name(name) player:set_physics_override({ gravity = 0.1 -- set gravity to 10% of its original value -- (0.1 * 9.81) }) end })\n\nplayer:set_physics_override() is given a table of overrides.\n\nAccording to lua_api.txt, these can be:\n• sneak_glitch: whether player can use the sneak glitch (default: true)\n\nThe sneak glitch allows the player to climb an 'elevator' made out of a certain placement of blocks by sneaking (pressing shift) and pressing space to ascend. It was originally a bug in Minetest, but was kept as it is used on many servers to get to higher levels. They added the option above so you can disable it.\n\nPlease be warned that mods that override the physics of a player tend to be incompatible with each other. When setting an override, it overwrites and override that has been set before, by your or anyone else's mod.\n• sonic: Set the speed multiplayer to a high value (at least 6) when a player joins the game.\n• super bounce: Increase the jump value so that the player can jump up 20 meters (1 meter is 1 block).\n• space: Make the gravity decrease as the player gets higher and higher up.\n\nIn this chapter we will learn how to create a formspec and display it to the user. A formspec is the specification code for a form. In Minetest, forms are windows like the Inventory which allow you to move your mouse and enter information. You should consider using Heads Up Display (HUD) elements if you do not need to get user input - notifications, for example - as unexpected windows tend to disrupt game play.\n\nFormspecs have a rather weird syntax. They consist of a series of tags which are in the following form:\n\nFirstly the element type is declared, and then the attributes are given in square brackets.\n\n(An element is an item such as a text box or button, or it is meta data such as size or background).\n\nHere are two elements, of types foo and bar.\n\nNearly all forms have a size tag. They are used to declare the size of the window required. Forms don't use pixels as co-ordinates, they use a grid, based on inventories. A size of (1, 1) means the form is big enough to host a 1x1 inventory. The reason this is used is because it is independent on screen resolution - The form should work just as well on large screens as small screens. You can use decimals in sizes and co-ordinates.\n\nCo-ordinates and sizes only use one attribute. The x and y values are separated by a comma, as you can see above.\n\nThis is a textbox element. Most other elements have a similar style of attributes. The \"name\" attribute is used in callbacks to get the submitted information. The others are pretty self-explaintary.\n\nIt is perfectly valid to not define an attribute, like above.\n\nYou should look in lua_api.txt for a list of all possible elements, just search for \"Formspec\". It is near line 1019, at time of writing.\n\nHere is a generalized way to show a formspec\n\nFormnames should be itemnames, however that is not enforced. There is no need to override a formspec here, formspecs are not registered like nodes and items are, instead the formspec code is sent to the player's client for them to see, along with the formname. Formnames are used in callbacks to identify which form has been submitted, and see if the callback is relevant.\n\n-- Show form when the /formspec command is used. minetest.register_chatcommand(\"formspec\", { func = function(name, param) minetest.show_formspec(name, \"mymod:form\", \"size[4,3]\" .. \"label[0,0;Hello, \" .. name .. \"]\" .. \"field[1,1.5;3,1;name;Name;]\" .. \"button_exit[1,2;2,1;exit;Save]\") end })\n\nThe above example shows a formspec to a player when they use the /formspec command.\n\nNote: the .. is used to join two strings together. The following two lines are equivalent:\n\nLet's expand on the above example.\n\n-- Show form when the /formspec command is used. minetest.register_chatcommand(\"formspec\", { func = function(name, param) minetest.show_formspec(name, \"mymod:form\", \"size[4,3]\" .. \"label[0,0;Hello, \" .. name .. \"]\" .. \"field[1,1.5;3,1;name;Name;]\" .. \"button_exit[1,2;2,1;exit;Save]\") end }) -- Register callback minetest.register_on_player_receive_fields(function(player, formname, fields) if formname ~= \"mymod:form\" then -- Formname is not mymod:form, -- exit callback. return false end -- Send message to player. minetest.chat_send_player(player:get_player_name(), \"You said: \" .. fields.name .. \"!\") -- Return true to stop other minetest.register_on_player_receive_fields -- from receiving this submission. return true end)\n\nThe function given in minetest.register_on_player_receive_fields is called everytime a user submits a form. Most callbacks will check the formname given to the function, and exit if it is not the right form. However, some callbacks may need to work on multiple forms, or all forms - it depends on what you want to do.\n\nThe fields parameter to the function is a table, index by string, of the values submitted by the user. You can access values in the table by doing fields.name, where 'name' is the name of the element.\n\nAs well as having the values of each element, you can also get which button was clicked. In this case, the button called 'exit' was clicked, so fields.exit will be true.\n\nSome elements can submit the form without the user having to click a button, such as a check box. You can detect for these cases by looking for a clicked button.\n\n-- An example of what fields could contain, -- using the above code { name = \"Foo Bar\", exit = true }\n\nIn quite a lot of cases you want your minetest.show_formspec to give information to the callback which you don't want to have to send to the client. Information such as what a chat command was called with, or what the dialog is about.\n\nLet's say you are making a form to handle land protection information.\n\n-- -- Step 1) set context when player requests the formspec -- -- land_formspec_context[playername] gives the player's context. local land_formspec_context = {} minetest.register_chatcommand(\"land\", { func = function(name, param) if param == \"\" then minetest.chat_send_player(name, \"Incorrect parameters - supply a land ID\") return end -- Save information land_formspec_context[name] = {id = param} minetest.show_formspec(name, \"mylandowner:edit\", \"size[4,4]\" .. \"field[1,1;3,1;plot;Plot Name;]\" .. \"field[1,2;3,1;owner;Owner;]\" .. \"button_exit[1,3;2,1;exit;Save]\") end }) -- -- Step 2) retrieve context when player submits the form -- minetest.register_on_player_receive_fields(function(player, formname, fields) if formname ~= \"mylandowner:edit\" then return false end -- Load information local context = land_formspec_context[player:get_player_name()] if context then minetest.chat_send_player(player:get_player_name(), \"Id \" .. context.id .. \" is now called \" .. fields.plot .. \" and owned by \" .. fields.owner) -- Delete context if it is no longer going to be used land_formspec_context[player:get_player_name()] = nil return true else -- Fail gracefully if the context does not exist. minetest.chat_send_player(player:get_player_name(), \"Something went wrong, try again.\") end end)\n\nminetest.show_formspec is not the only way to show a formspec, you can also add formspecs to a node's meta data. This is used on nodes such as chests to allow for faster opening times - you don't need to wait for the server to send the player the chest formspec.\n\nminetest.register_node(\"mymod:rightclick\", { description = \"Rightclick me!\", tiles = {\"mymod_rightclick.png\"}, groups = {cracky = 1}, after_place_node = function(pos, placer) -- This function is run when the chest node is placed. -- The following code sets the formspec for chest. -- Meta is a way of storing data onto a node. local meta = minetest.get_meta(pos) meta:set_string(\"formspec\", \"size[5,5]\".. \"label[1,1;This is shown on right click]\".. \"field[1,2;2,1;x;x;]\") end, on_receive_fields = function(pos, formname, fields, player) if(fields.quit) then return end print(fields.x) end })\n\nFormspecs set this way do not trigger the same callback. In order to receive form input for meta formspecs, you must include an on_receive_fields entry when registering the node.\n\nThis style of callback can trigger the callback when you press enter in a field, which is impossible with minetest.show_formspec, however, this kind of form can only be shown by right-clicking on a node. It cannot be triggered programmatically.\n\nThe HUD feature will probably be rewritten in an upcoming Minetest release. Be aware that you may need to update your mods if the API is changed.\n\nHeads Up Display (HUD) elements allow you to show text, images, and other graphical elements.\n\nHUD doesn't accept user input. For that, you should use a Formspec.\n\nHUD elements are created using a player object. You can get the player object from a username like this:\n\nOnce you have the player object, you can create an element:\n\nThis attributes in the above table and what they do vary depending on the hud_elem_type.\n\nA number is returned by the hud_add function which is needed to identify the HUD element at a later time, if you wanted to change or delete it.\n\nYou can change an attribute after creating a HUD element, such as what the text says:\n\nYou can also delete the element:\n\nScreens come in different sizes, and HUD elements need to work well on all sizes. You locate an element using a combination of a position and an offset.\n\nThe position is a co-ordinate between (0, 0) and (1, 1) which determines where, relative to the screen width and height, the element goes. For example, an element with a position of (0.5, 0.5) will be in the center of the screen.\n\nThe offset applies a pixel offset to the position.\n\nAn element with a position of (0, 0) and an offset of (10, 10) will end up at the screen co-ordinates (0 * width + 10, 0 * height + 10).\n\nPlease note that offset scales to DPI and a user defined factor.\n\nA text element is the simplest form of a HUD element.\n\nHere is our earlier example, but with comments to explain each part:\n\nlocal idx = player:hud_add({ hud_elem_type = \"text\", -- This is a text element position = {x = 1, y = 0}, offset = {x=-100, y = 20}, scale = {x = 100, y = 100}, -- Maximum size of text, crops off any out of these bounds text = \"My Text\" -- The actual text shown })\n\nYou can apply colors to the text, using the number attribute. Colors are in Hexadecimal form.\n\nDisplays an image on the HUD.\n\nThe X co-ordinate of the scale attribute is the scale of the image, with 1 being the original texture size. Negative values represent that percentage of the screen it should take; e.g. x=-100 means 100% (width).\n\nUse text to specify the name of the texture.\n\nHave a look at lua_api.txt for a complete list of HUD elements.\n\nIn this chapter you will learn how to use ItemStacks.\n\nAn item stack is a... stack of items. It's basically just an item type with a count of items in the stack.\n\nYou can create a stack like so:\n\nYou could alternatively create a blank ItemStack and fill it using methods:\n\nlocal items = ItemStack() if items:set_name(\"default:dirt\") then items:set_count(99) else print(\"An error occured!\") end\n\nAnd you can copy stacks like this:\n\nlocal items = ItemStack(\"default:stone\") print(items:get_name()) -- default:stone print(items:get_count()) -- 1 items:set_count(99) print(items:get_name()) -- default:stone print(items:get_count()) -- 99 if items:set_name(\"default:dirt\") then print(items:get_name()) -- default:dirt print(items:get_count()) -- 99 else error(\"This shouldn't happen\") end\n\nUse add_item to add items to an ItemStack. An ItemStack of the items that could not be added is returned.\n\nlocal items = ItemStack(\"default:stone 50\") local to_add = ItemStack(\"default:stone 100\") local leftovers = items:add_item(to_add) print(\"Could not add\" .. leftovers:get_count() .. \" of the items.\") -- ^ will be 51\n\nThe following code takes up to 100. If there aren't enough items in the stack, it will take as much as it can.\n\nlocal taken = items:take_item(100) -- taken is the ItemStack taken from the main ItemStack print(\"Took \" .. taken:get_count() .. \" items\")\n\nItemStacks also have wear on them. Wear is a number out of 65535, the higher is more warn.\n\nYou use add_wear(), get_wear() and set_wear(wear).\n\nlocal items = ItemStack(\"default:dirt\") local max_uses = 10 -- This is done automatically when you use a tool that digs things -- It increases the wear of an item by one use. items:add_wear(65535 / (max_uses - 1))\n\nWhen digging a node, the amount of wear a tool gets may depends on the node being dug. So max_uses varies depending on what is being dug.\n\nItemStacks can also have a single field of metadata attached to them.\n\nHave a look at the list of methods for an ItemStack. There are a lot more available than talked about here.\n\nIn this chapter we will find out how to publish a mod so that other users can use it.\n\nBefore you release your mod, there are some things to think about:\n• Is there another mod that does the same thing? If so, how does yours differ or improve on it?\n• Is your mod useful?\n\nYou need to specify a license for your mod. Public domain is not a valid licence, as the definition varies in different countries.\n\nFirst thing you need to note is that your code and your art need different things from the license they use. Creative Commons licenses shouldn't be used with source code, but rather with artistic works such as images, text and meshes.\n\nYou are allowed any license, however mods which disallow derivatives are banned from the forum. (Other developers must be able to take your mod, modify it, and release it again.)\n\nThis is a common license combination in the Minetest community, as it is what Minetest and minetest_game use. You license your code under LGPL 2.1 and your art under CC-BY-SA.\n• Anyone can modify, redistribute and sell modified or unmodified versions.\n• If someone modifies your mod, they must give their version the same license.\n• Your copyright notice must be kept.\n\nAdd this copyright notice to your README.txt, or as a new file called LICENSE.txt\n\nLicense for Code ~~~~~~~~~~~~~~~~ Copyright (C) 2010-2013 Your Name <emailaddress> This program is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. License for Textures, Models and Sounds ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CC-BY-SA 3.0 UNPORTED. Created by Your Name\n\nThese licenses allows anyone to do what they want with your mod. Modify, redistribute, sell, leave out attribution. They can be used for both code and art.\n\nThere are some files that we recommend you include in your mod when you release it.\n\nYou should provide a readme file. This should state:\n• What the mod does.\n• What the license is.\n• How to install the mod.\n• What dependencies there are / what the user needs to install.\n• Where to report problems/bugs or get help.\n\nMy Super Special Mod =~=~=~=~=~=~=~=~=~== Adds magic, rainbows and other special things. Version: 1.1 License: LGPL 2.1 or later Dependencies: default mod (found in minetest_game) Report bugs or request help on the forum topic. Installation ~~~~~~~~~~~~ Unzip the archive, rename the folder to to modfoldername and place it in minetest/mods/minetest/ ( GNU/Linux: If you use a system-wide installation place it in ~/.minetest/mods/minetest/. ) ( If you only want this to be used in a single world, place the folder in worldmods/ in your worlddirectory. ) For further information or help see: http://wiki.minetest.com/wiki/Installing_Mods\n\nWrite a sentence or two explaining what your mod does. Be concise without being too vague. This is displayed in the mod store.\n\nGOOD: Adds soups, cakes, bakes and juices. The food mod which supports the most ingredients. BAD: The food mod for Minetest.\n\nScreenshots should have 4 pixels of width for every 3 pixels of height, and be at least 200 by 150. This is displayed in the mod store.\n\nIn order for a potential user to download your mod, you need to upload it to somewhere which is publicly accessible.\n\nI will outline several methods you can use, but really you should use the one that works best for you, as long as it mets these requirements:\n• Stable - the hosting website should not just shutdown randomly.\n• Direct link - you should be able to click a link on the forum and download the file, without having to view another page.\n\nIt is recommended that you use a Version Control System for the following reasons:\n• Allows other developers to submit changes (easily).\n• Allows the code to be previewed before downloading.\n\nHowever, such systems may be hard to understand when you first start out.\n\nThe majority of Minetest developers use GitHub as a website to host their code, however that doesn't matter that much.\n\nUsing Git - Basic concepts. Using the command line.\n\nGitHub for Windows - Use a graphical interface on Windows to upload your code.\n\nYou could use forum attachments instead. This is done when creating a mod's topic - covered below.\n\nFirst, you need to zip the files into a single file. This varies from operating system to operating system.\n\nOn Windows, go to the mod's folder. Select all the files. Right click, Send To > Compressed (zipped) folder. Rename the resulting zip file to the name of your modfolder.\n\nOn the create a topic page, see below, go to the \"Upload Attachment\" tab at the bottom. Click browse and select the zipped file. I suggest that you enter the version of your mod in the comment field.\n\nYou can now create a forum topic. You should create it in the \"WIP Mods\" (Work In Progress) forum.\n\nWhen you consider your mod no longer a work in progress, you can request that it be moved to \"Mod Releases.\"\n\nThe requirements of a forum topic are mostly the same as what is recommended for a README.txt\n• What the mod does.\n• What the license is.\n• How to install the mod.\n• What dependencies there are.\n• Where to report problems/bugs or get help.\n• Link to download, or an attachment.\n\nYou should also include screenshots of your mod in action, if relevant.\n\nHere is an example. The Minetest forum uses bbcode for formating.\n\nAdds magic, rainbows and other special things. See download attached. [b]Version:[/b] 1.1 [b]License:[/b] LGPL 2.1 or later Dependencies: default mod (found in minetest_game) Report bugs or request help on the forum topic. [h]Installation[/h] Unzip the archive, rename the folder to to modfoldername and place it in minetest/mods/minetest/ ( GNU/Linux: If you use a system-wide installation place it in ~/.minetest/mods/minetest/. ) ( If you only want this to be used in a single world, place the folder in worldmods/ in your worlddirectory. ) For further information or help see: [url]http://wiki.minetest.com/wiki/Installing_Mods[/url]\n\nIf you modify the above example for your mod topic, remember to change \"modfldername\" to the name of the folder your mod should be in.\n\nSubject of topic must be in one of these formats:\n\nAfter you’ve read this book, take a look at the following"
    },
    {
        "link": "https://wiki.minetest.org/Mods",
        "document": "Mods (short for modifications or modules) are user-created modifications to a game in such a way that adds to or alters the gameplay. Some larger mods may add a lot of content to the game, while other smaller mods may add more settings/customization options or tweak the gameplay in small ways. Server mods or plugins mainly give server admins more options and ease of use, and all mods for singleplayer can also be used in multiplayer.\n\nWhile Minetest mods are generally safe to install as they run by default in a sandboxed environment, one should exercise caution with mods as they may modify your world data in an undesired way. A good way to protect your game from such problems is to regularily back up your world folder(s) when installing new mods.\n\nThere are many mods or plugins available to complement the original Minetest game or give server admins more options and control over their servers.\n\nA modpack (short: “MP”) is a collection of mods to group them together. Basically, a modpack is just special directory containing the actual mod directories. It's purely a logical grouping and is done mostly for convenience and to group closely-related mods together. The main difference is that they will be displayed as a openable blue text item in the minetest mod selector containing the component mods to allow granular control. Apart from that, there is nothing special about modpacks or mods inside a modpack. Individual mods in a modpack can still be enabled and disabled as if they were standalone mods.\n\nA Client-Side Mod (short: “CSM”) is a mod used to customize your Minetest client. Client-Side Mods can be used when connected to a Minetest server because they are loaded locally. Client-Side mods require at least Minetest 0.4.15-dev from sources, compiled after April 1st, 2017. Please note that the API is currently not stable and can change.\n\nGenerally, all mods you would want are available on ContentDB nowadays. They can be installed from the main menu by going to the Content tab and clicking on the Browse online content button.\n\nFor old or experimental mods, check the Mods subforum.\n\nStarting with Mintest version 5.0.0 mods can be installed using the Content tab in the Minetest launcher.\n\nTo manually install content for Minetest see also Installing Mods and Installing Client-Side Mods.\n\nMods are written in the scripting language Lua. The official Lua API documentation can be found at lua_api.txt or in HTML format here.\n• Minetest Modding Book by rubenwardy with editing by Shara.\n• Intro to modding on the developer wiki\n\nThe ingame server command /mods will list the active mods of the actual running game."
    },
    {
        "link": "https://thejeshgn.com/2018/10/01/howto-write-your-first-minetest-mod",
        "document": "I am a big fan of Minecraft. I remember buying it in 2011 from Mojang for 15 euros. It's one of the few games I bought. It's also one of those games I visit once in a while. My recent experiments with it has been using Minecraft pi and Minecraft API mostly around the concept of teaching programming using games. It's free (as in beer) and comes with API to play. On a non-Pi installations you need setup plugins to get access. Also since the license is unclear, I am not sure if I can use it liberally like I would use a Free and Open Source Software. Hence the exploration began and I found Minetest.\n\nIts FOSS, meant for moding and runs on all platforms. Everything I wanted. So quickly I started playing Minetest. It's not bad. You will face an issue here and there but on my Ubuntu it felt great. Next thing was to test how easy it is to mod and introduce a new feature. I started by coding a new type of block. Here are the notes from that exercise.\n\nOn Ubuntu installation is straight forward. It's not difficult for other platforms too.\n\nMinetest can host a server where you and your friends can share games and save work. But here we are going to play a local game in creative mode with no damages. You can create a world if there are no worlds. By clicking on New.\n\nOnce you start. You can play like usual. At any point you can exit by pressing ESC key. You can restart by selecting the same world.\n\nOn Ubuntu, Minetest configurations are stored under users home folder - ~/.minetest. The mods are stored inside the mod folder i.e ~/.minetest/mods/ each mod will have its own folder under mods. Usually installing mod means copying the mod code to this folder. With expanded mods folder with two mods mod_1 and mod_2 this is how your ~/.minetest folder will look\n\nAs you see mod_1 has couple of folders and files.\n• init.lua - This is the only REQUIRED file. This will run as soon as the game loads.\n• mod.conf - Not a must but it's good to have. It will contain the configuration\n• depends.txt - To be compatible with 0.4.x you need to mention other mods your mod depends on. It's just a listing. For modern version he dependency is part of mod.conf\n• textures folder with images - If you want images as part of your game\n• sounds folder with sound - if you want sound files\n\nBefore you start writing your first mod, please do know all the mods are written in Lua Scripting language. It's easy to learn and code. You can try this 15 mins tutorial if you are short on time. With that let's start our first mod which is just an introduction of a new block type into the game.\n\nWe will create a new mod called 'thej', so start with creating a folder called 'thej' under mods folder, i.e ~/.minetest/mods/thej and then create a mod.conf file to define our mod. mod.conf is a simple key value configuration file. Add name, description and depends. Our module is dependent only on 'default' mod. The contents of mod.conf will look like this\n\nNext we need define our block. For this we will create init.lua and define our block there.\n\nHere as you can see we are defining an item for the mod thej and name of it is squares. Then we are defining images for the tiles. That's it, the block is ready to be used.\n\nBut wait we have used minetest_block.png in our tiles set. A block has six sides and hence one has to define six images in the tiles. The order is shown below. To keep it simple, I have used the same image on all sides. I created the image using an online tool called piskelapp . I created a 16x16 pixel art and then exported into 100px X 100px png image. Then added it under the folder called textures. At this point my folder structure looks like this\n\nAt this point our mod is ready to be used. Of course you can do a lot more. But this is an intro how-to.\n\nInclude and use your mod\n\nSince your mod is already under ~/.minetest/mods you don't have to do anything else to be loaded. So start the minteset and then enable the mode for specific world you are going to play."
    },
    {
        "link": "https://reddit.com/r/Minetest/comments/we1eu9/start_developing_content_for_minetest",
        "document": "are there any tutorials on how to start making mods and games for minetest?"
    },
    {
        "link": "https://wildfiregames.com/forum/topic/126050-question-on-0-ads-modding-capabilities",
        "document": "Long time enthusiast of 0 A.D. here. This game is still one of my favourite RTS to play and I'm super thankful to everyone making it a reality.\n\n That being said, I was wondering lately - could I bring it a bit closer to my ideal? My biggest love in strategies were always economy and deep gameplay during peace. But ironically enough, every game with economies lacked good fight, and military strategies tend to avoid too complex economic features (the latter for good reasons, to clarify).\n\nSo, my question is as follows - I know there are mods adding new troops or even civilisations, but would it be possible to make mod that is major overhaul, touching a lot of aspects of the game and introducing whole new mechanics? How far one can go with such attempt?\n\n I'm asking because there's rising urge in me to create game that would fill that great balance, but I'm also curious if it was possible to achieve by modifying one of my favourite strategy games - given 0 A.D. was made with modding in mind. If it won't suffice I can always work on the game itself, but there's no harm in trying.\n\n For context, I never modded 0 A.D. before, but I have experience in modding other games (Minecraft, Morrowind) and programming, so I'm hoping this won't be particularly harder than my past experiences ^^"
    },
    {
        "link": "https://trac.wildfiregames.com/wiki/Modding_Guide",
        "document": "If you're looking for how to play 0 A.D. or are not otherwise familiar with it, see the Getting Started page.\n\nThis guide is intended for users who have experience playing 0 A.D. and want to take that knowledge to the next level by \"modding\" or modifying the game. As 0 A.D. is still in alpha stages and under constant development, the documentation is also in early stages. Features are likely to change drastically, even the process for modding is subject to change. Those interested in modding the game at this point will almost need to be \"developers\" in the sense of solving problems and researching the means of modding, and will often need to be familiar with multiple facets of the game. Also at this stage, completing the game's core functionality is a priority, so well made mods could become part of the official game, if the contributor desires.\n\nThe best resources for modding advice are the forums (there is a ​subforum dedicated to modding) and IRC: ​#0ad-dev on QuakeNet. But some of the most common questions or problems will hopefully be answered here.\n\nWhat can be modded?\n\n0 A.D. has been designed from the beginning for ease of modding. Not just art and sound, but also the code which makes the game come to life. All the textures, 3D models, animations, sounds, fonts, and scenarios found in the game are packaged into \"mods\" (modifications). Additionally, a large amount of the game's logic (written in JavaScript) is packaged in mods. Some of the software behind 0 A.D. is called the Pyrogenesis \"engine\", written in C++. The engine does not change with mods. The game itself is actually one or more mods bundled together with the engine. As 0 A.D. is free open source software, the engine can certainly be modified by those interested, but we don't call this a \"mod\" in the strict sense because it might break compatibility with existing content.\n\nWhere are the mods?\n\nMods distributed with, or as part of, 0 A.D. are located within the game's installation directory, under .\n\nUser created mods should be located in a user's mods directory. The exact location differs depending on which Operating System you're running:\n• On Linux: (may be found in GUI via Home/.local/share/0ad/mods/)\n\nEach mod is contained within its own folder, which should have the same name as the mod. Thus, a mod named would be placed in the folder .\n\nThis folder then contains all files belonging to the mod, either as a collection of subfolders and files:\n\nOr, once ready for distribution, packaged as a single or file:\n\nFiles are expected in certain locations, so a mod should follow the same structure as the mod included with the game. See the mod layout or Finding Your Way Around pages for more details.\n\nMod files can be directly opened with 0 A.D. for installation or updating. files should be associated with 0 A.D., if not or if the mod is a file you can install that way: right-click on them and open them with 0 A.D.\n\nFor those preferring the command line, that operation is equivalent to running\n\nYou will then land in the mod selection screen, described in the next section.\n\nYou can manually place mods into your mods folder but you have to ensure the folder and zip base name match the mod name in mod.json. If you extract the mod so you can further work on it beware a properly packaged mod is a zip-bomb. You can also clone a repository if such exists or create a symlink to such in an other place.\n\nHow are mods used?\n\nThe game has a mod selection screen, which can be accessed through the main menu: Tools & Options > Mod Selection\n\nOr if you prefer, mods can be selected via command line arguments. You can run the game with the option, like so:\n\nThis will load the mod first, then add all files from , then adding all files from (replacing all already present files) and so on.\n\nThe mod is currently always loaded by default. Any files or folders in the mod might be replaced or added to in a new mod. In fact by replacing the main menu page, it's possible to achieve a totally different game experience, without reusing any of the mod (though it would require a lot of work).\n\nSay you have an awesome idea for a 0 A.D. mod. What else do you need (besides the game)? There are many choices depending on your focus. Do you want to add textures? Or maybe you want to modify AI scripts? The following list gives a few tools that are handy for modding 0 A.D.:\n\nMany consider ​Photoshop to be the gold standard for editing images, but there are other choices. ​GIMP is a popular, free image editing tool which supports a wide range of features and formats. The main required features for modding 0 A.D. textures are the ability to handle PNG images including alpha transparency and, for older textures, a plugin for ​DDS format (textures are automatically converted from PNG to DDS by the engine, but PNG is a more widely supported format).\n\n0 A.D. supports the ​COLLADA format for importing new models into the game, whether static or animated. A number of 3D modeling suites support COLLADA, but only a few are used in practice and have been confirmed to work with the game:\n• Blender: free, open source alternative. COLLADA support varies from one version to another, we recommend 2.6+ for animations.\n\nThe game uses ​OGG Vorbis, a widely supported encoding format, for music and sound effects. Sound effects are \"grouped\" which allows the game to adjust volume, pitch, and other parameters, and to play them randomly. Groups are defined by XML data files placed next to the sound files (see the audio mod directory for examples).\n\nMany text editors exist for editing basic text and scripts, so this mostly boils down to platform and user preference. The main features to look for in an editor are syntax highlighting, handling of different line endings and encodings, customizable tabbing, and anything else that makes life easier. Some choices:\n• Notepad++: Windows text editor with enhanced features (the Notepad included with Windows is a very poor choice)\n\nAdditionally, if you want to mod the latest greatest version of the game, you might consider getting the latest data from SVN. For Windows users we provide a precompiled version of the game in SVN, so programming/compiling knowledge is not required. Still you will be expected to have a working knowledge of Windows, file management, and basic troubleshooting. See the build instructions for details on acquiring the latest version of the game for your OS.\n\nHow to make your mod show up in the mod selection screen\n\nYou need to add a file to your mod folder. See the public (0 A.D.) mod's mod.json​ file for a real world example of an standalone mod.\n\nThe following is a (nearly minimal) sample:\n• A mod is identified by the directory name.\n• A mod must define the \"name\", \"version\", \"label\", \"description\" and \"dependencies\" property.\n• The property \"name\" can consist alphanumeric characters, underscore and dash.\n• The name is used for version comparison of mod dependencies.\n• The property \"version\" may only contain numbers and up to two periods.\n• The property \"label\" is a human-readable name of the mod.\n• The property \"description\" is a human-readable summary of the features of the mod.\n• The property \"url\" is reference to a website about the mod.\n• The property \"dependencies\" is an array of strings. Each string is either a modname or a mod version comparison.\n• A mod version comparison is a modname, followed by an operator (=, <, >, <= or >=), followed by a mod version. This allows mods to express upwards and downwards compatibility.\n\nFor details of how the dependency checking is done please read the function comments in modmod.js​.\n\nMost art files are released under ​CC-BY-SA-3.0, while most code is released under ​GPLv2. You can use the link above (LICENSE.txt) to see exactly what asset is released under what license. So if you copy art/ code originating from Wildfire Games (e.g. from 0 A.D.), you need to specify the correct license and explicitly mention which files are licensed under it. A simple .txt file listing these files is sufficient, again you can see how in the link above (LICENSE.txt).\n\nAlthough this is not really necessary, it is common practice to include the relevant licence files in your mod (e.g license_gpl-2.0.txt).\n\nYou can publish art or code under any license if you created it yourself. Make sure that files that are not yours or Wildfire Games are properly licensed.\n\nThe pyrogenesis binary also has an archive builder, to compile your mod into a zip file and pre-cache your textures (so users don't see grey textures on the first run). The zip isn't compressed by default, but if your mod becomes big, and you don't compress it afterwards (i.e. to distribute with an autoinstaller exe), it's advised to compress your mod with the archive builder.\n\nThe command line arguments to build the archive look as following:\n\nOn windows you'll have to be careful with dots and '/' the command will be more like:\n\nThis produces the distributable mymod.pyromod in your working directory. If users now install it as explained above, they can run it with the \"-mod=mymod\" command line argument as explained above.\n\nYou may want to publish your mod on the ​mod.io platform. If you do so, your mod will be available in the 0 A.D. mod downloader. To avoid security issues, we take some extra validation steps: follow the guide on the forums.\n• Basic3DImplementation - Instructions on how to create a simple, static 3D model in Blender, texture it with GIMP, and import it into 0 A.D. as a new actor.\n• CreatingNewUnits - A simple beginner's guide about setting up a mod and editing actors and templates.\n• Modding GUI and Simulation - A guide on how to best mod the scripts of the game without ending in a maintenance hell.\n• Modding Resources - A Guide to Modding Resources (for now, adding and removing resources)"
    },
    {
        "link": "https://play0ad.com",
        "document": "Wildfire Games, an international group of volunteer game developers, proudly announces the release of 0 A.D. Alpha 27: “Agni”, the twenty-seventh and last alpha version of 0 A.D., a free, open-source real-time strategy game of ancient warfare. The release is named after the Hindu god of fire Agni (pronounced: /ˈɐgnɪ/).\n\nDownload and installation instructions are available for Windows, Linux, and macOS. 0 A.D. is free software. This means you can download, redistribute, modify and contribute to the application under the same licenses: GNU Public Licence version 2 (GPL v2) for code and Creative Commons Attribution Share-Alike 3.0 (CC-BY-SA 3.0) for artwork. Although you might find some people selling copies of 0 A.D., either over the internet or on physical media, you will always have the option to download 0 A.D. completely gratis, directly from the developers. No “freemium” model, no in-game advertising, no catch.\n\nDon’t forget to deactivate every mod before updating the game to avoid any risk of conflict. If you’re a mod creator, please look at this page on how to port your mod to the new version. As always feel free to reach out to us for assistance.\n\nMoving away from the Alpha label\n\n\n\nBefore presenting you with the new features of this new release, we would like to officially announce that this will be the latest version labeled Alpha. We have already updated the versioning scheme (this version being 0.27.0) and we will progressively stop using the Alpha label altogether up to the next release, which will be Release 28.\n\nTwo decades ago, at the beginning of the development of the game, and with the subsequent open-sourcing, a traditional software release life cycle was envisioned. 0 A.D. would go through Alpha releases while features would be implemented, then some Beta releases where all features would be present but needing some more polish, up to a final Gold release of 0 A.D. Empires Ascendant.\n\nYears later, 0 A.D. is polished in many aspects, sometimes more so than some released professional strategy games, but not feature-complete. Moreover, it is unlikely that a final release will mean the end of the development: we wish to keep maintaining the game, bringing you technical improvements and adaptation to new hardware and operating systems. The initial Alpha-Beta-Release plan does not seem relevant anymore.\n\nIn parallel, it looks like the gaming industry has also followed this path. Games now usually start in Early Access and may stay in this state for a few years while gathering a large community. The most successful early accesses are quite polished, without incapacitant bugs, but do miss a few planned features. It seems that this trend matches with our latest releases, so we will go with the flow. We hope to be seen, with the Early Access label, on mainstream gaming platforms, in one of our next releases.\n\nAs usual, for the next release, we welcome fan suggestions for words relating to the ancient world beginning with the letter B. This will serve as a compensation for the Beta label which will not be stapled to any future release as we would have thought! Keep it original and related to the time frame portrayed in 0 A.D. (c. 500 BC – 1 BC).\n• New random maps: Foothills, Migration, Coast Range; New skirmish map: Isthmus of Corinth; and updated skirmish maps: Watering Holes, Sporades Islands\n\nThe release features new maps on which to build and fight.\n\nThe new skirmish map Isthmus of Corinth, displaying the famous location in Greece, features a rich land and seas stocked with fish. Mercenary Camps can be found as well as large Metal Mine deposits… but also pirate ships and brigands, as war-torn Greece is not without its share of dangers.\n\nThree new random maps will bring you challenges in ever-changing environments.\n\n The Foothills map features rolling hills and no obstructions to the vision range of your armies. The Coast Range is a strip of land between the sea and the resource-rich mountains, balanced for team battles. Lastly, the Migration map will have you starting in a small island: you will have to take your share of the resources of the larger central island if you wish to dominate your enemies.\n\nThese maps were also added to the \"Demo campaign – new maps\".\n\nThe main feature of this release is the addition of a Vulkan backend to the Pyrogenesis engine. Vulkan is the next-generation open standard API for 3D graphics and computing, aiming, among numerous advantages, to offer higher performance and more efficient CPU and GPU usage compared to the older APIs by providing a considerably lower-level API for the application than theirs.\n\n Vulkan should make the performance of the game more stable and predictable. In some cases even faster, but only in some cases as we currently use it in a single thread.\n\nUpscaling/Downscaling support with FSR\n\n The new Resolution scale option, also called AMD FSR (FidelityFX Super Resolution) allows one to render the game at a higher resolution (eg. if you have a Full HD screen it could render the game at 4K), allowing for sharper visuals an better graphics at the expense of performance. You can also render at a lower resolution and then upscale the result, to reduce the graphical load and increase performance.\n\nGPU Skinning\n\n The new GPU Skinning config option allows you to delegate model skinning to your GPU, using shaders, instead of using your CPU for this operation. This is considerably faster and can bring you a performance boost of 10 to 20 more FPS.\n\n GPU Skinning also allows animated meshes such as elephants to make use of normal maps, improving the visual quality of models:\n\nMultiplayer Savegame\n\n As with single-player games, it's now possible to save and resume multiplayer games. When loading a savegame from the lobby or from the \"Multiplayer\" submenu you are led to the \"Match Setup\" page. There, you can assign yourself and other clients to player slots. Note that the AIs are fixed: it's not possible to take over a slot where an AI was, and it's not possible to let an AI take over a slot from a client.\n\n With this feature it is possible to try out a different strategy in a specific situation, to resume a game days later if you live a busy life, or to replace kicked or absent players for a rebalance of the teams.\n\nSpiderMonkey upgrades\n\n Throughout the release cycle, we have upgraded the SpiderMonkey JavaScript engine from version 78 to version 115. The various upgrades bring bugfixes, new features, and build support for more recent Python and C++ versions. The new SpiderMonkey versions also bring us new performance tooling which will allow us to identify and address more performance bottlenecks in the engine/scripts interface.\n\nSupport for JS Promises\n\n Modders can now use Promises and async/await features when writing GUI or simulation code. The support has been introduced to make it easier to handle results from GUI child pages, but the feature can be used for other purposes.\n\nFix lobby TLS connection on Windows\n\n With earlier versions of 0 A.D., it wasn't possible to connect to the multiplayer lobby while having TLS enabled on Windows. As that's the default, players had to find and disable the \"TLS encryption\" option in the settings and disable it, before being able to connect to the multiplayer lobby. This has been fixed now, so all players can now enjoy the benefits of TLS-encrypted connections with the multiplayer lobby.\n\nOther library upgrades and fixes\n\n Many other libraries were updated to bring security and usability fixes to 0 A.D.\n\nTips & Tricks page\n\n Our contributor Vantha has implemented a browsable Tips & Tricks page, accessible through the main menu. There, you will find all the tips that can be seen in the game loading screen. You will be able to learn new tricks at your leisure, while enjoying informative screenshots that can also be scrolled.\n\nChange lobby password\n\n Players are finally able to change their password for the multiplayer lobby. To do so, the player needs to log into the lobby and open the new \"Account Settings\" dialog, which can be accessed through a button in the lower left corner of the lobby screen.\n\nPhase indicators\n\n Our contributor abian has added visual indicators of the current phase you are at into the middle panel of selected units and buildings.\n\nHorizontal scrolling\n\n The GUI now supports horizontal scrollbars which allow displaying complex contents, such as the Structure Tree, at the lowest supported resolution. Work is under way to implement dynamic use of horizontal scrolling based on the window resolution, in the next release.\n\nMany improvements were made to models and textures, including new models for statues by our contributor nifa:\n\nIt can be hard to realize how many incremental visual improvements have been included into the game over the years, but here you can compare a screenshot of the game in 2010:\n\nand the same scene recreated inside Alpha 27, fifteen years later:\n\nWhat a journey! A big part of this visual improvement is brought by a fix for the orientation of the normal maps of terrains, included in Alpha 27. In prior releases and for several years, the lighting on the terrain normal maps was incorrect by 45 degrees. And while the game still looked nice, there was an underlying almost subconscious wrongness to the look of the terrain.\n\nAfter the release of a first album of the 0 A.D. Soundtrack in 2018 (available on Bandcamp as well as major streaming platforms) under the Materia Collective label, our composers Omri and Sam have been preparing a second 19-track album, including new music from Alpha 26, as well as remastered versions of classic tracks which will be included in the next release of the game.\n\nWe will keep you updated very soon with links, so you can enjoy this music outside of your game sessions.\n\nCivilization Differentiation\n\n Spartans, Romans, Athenians, and Macedonians are now more unique. Spartans focus on champion hoplites available from the village phase, with unique techs. Romans get the “Marian Reforms” tech, reshaping their roster at some economic risk. Athenian spearmen can promote to champions, and they gain Hippocrates as a town-phase hero. Macedonians can construct the Arsenal in the town phase, allowing earlier access to bolt shooters.\n\nPlayer-Controlled Building Arrows\n\n Players can now direct building arrows like any other unit using the hotkey ‘f’. By default, buildings target the nearest enemy.\n\nNaval Overhaul\n\n Warships are categorized as Scout, Arrow, Ram, Fire, or Siege ships. Garrisons no longer boost firepower but remain available for transporting soldiers. And the new tech tree for warships will fuel the arms race for supremacy over the sea.\n\nCapture Changes\n\n Following player feedback, units now attack buildings by default when right-clicking them, with the \"C\" modifier enabling capture instead.\n\n Capture defense now depends on the capture attack value of garrisoned units, making it harder to defend key buildings with weaker units. Cavalry units have been tweaked to be less effective at capturing or defending buildings.\n\nElephants\n\n Elephants are reworked into multi-purpose shock units with a hack splash attack, excelling against infantry and cavalry while still somewhat effective against buildings.\n\nNew Champion Variants\n\n Chariots: Expensive, less agile than ranged cavalry but more durable.\n\n Spear cavalry (\"Cataphracts\"): Heavily armored but slower.\n\n Longswords: More expansive than swordsmen but deal splash damage.\n\nMelee Rebalance\n\n Melee units now deal 50% more damage but have reduced armor, while ranged units deal 25% less damage. This makes melee units more threatening and less of a damage sponge.\n\n The promotion bonus for melee citizen soldiers have been reduced, while mercenaries now gain 10% more attack.\n\nTerritory Influence Changes\n\n The territory gain with each phase is decreased, and the cost of a new Civic Center or Colony is decreased. This makes expansion a more strategic and impactful part of gameplay.\n\nWall Buff\n\n Wall garrisons have been doubled, allowing two rows of units to be visible when fully garrisoned. This aims to make walls a more effective defensive tool, as they are currently limited mostly to blocking movement.\n\nSiege Balancing\n\n Ranged siege units have a faster prepare time to make them feel more responsive.\n\n Catapults gain a splash attack with a small radius.\n\n Pack and unpack times are significantly reduced, with bolt shooters having a slower movement speed to compensate.\n\n Battering rams take more damage from ranged attacks, reducing their effectiveness when unprotected. Garrisoning infantry inside rams increases their speed and acceleration.\n\nObserver flares and chat notifications for flares\n\n Observers can now send flares to other observers. Flaring is now also shown as a chat notification, which is clickable to center the view on the signaled area.\n\nSome fixes against cheating\n\n We have included some protections against some mods which would allow cheaters to reveal the map or exploit bugs against opponents.\n\nIncreased maximum selection size\n\n Thanks to regular performance improvements, we have decided to increase the maximum number of units in a selection to 300.\n\nYou can find a comprehensive list of all the changes on the page wiki:Alpha27.\n\nThis summer, we were able to perform a long-awaited migration to a git-based development environment. We had been using SVN as our version control system, which was adapted to our use and especially adapted to manipulating game assets. However, this limited the agility with which we could provide and accept code contributions. Our new environment also allows us to leverage powerful tools of Continuous Integration and Continuous Delivery, improving the stability and the quality of the game during development.\n\nYou can read more about the migration announcement on this forum topic.\n\nphosit, who joined the team during this long release cycle, is now a well-known programmer and almost an old team member (!), with contributions in many areas of the engine and the game. More recently, sera has joined the Programming team and has made numerous contributions to the build system in the context of the git migration. Last, but not least, real_tabasco_sauce has joined the team as Gameplay Developer after his invaluable help throughout the preparation of Alpha 27.\n\nNow is the time to contribute!\n\n\n\nWith our new developer environment and our plunge beyond the Alpha label, now is the time to join us and place 0 A.D. in the spotlight. We need your help to make the game flourish and to bring new features to life.\n\nWe are in sore need of contributors in the following areas:\n\nWe are also always looking for, and providing an improved contribution environment, for:\n• Translators (get started right away on Transifex)\n• and of course, Developers and Artists – the team will gladly welcome contributions in all areas.\n\nYou can also support us by simply donating.\n\nWe will be present at FOSDEM 2025, with a booth on the floor level of building K. Come and say hi!\n\nIf you experience a technical problem with the game, please report it at gitea.wildfiregames.com. This is also the first address to visit when you wish to dedicate some of your time to help patch the code. Got any further questions or suggestions? Discuss them with other players and developers at the forum or talk with us directly in the IRC chat rooms: #0ad and #0ad-dev on QuakeNet.\n\nSee our LinkTree. For press/media inquiries, please DM @play0ad on Twitter or webmaster at wildfiregames dot com."
    },
    {
        "link": "https://reddit.com/r/gamedev/comments/1cu3jfz/how_do_game_developers_enable_or_support_modding",
        "document": "I was doing some research on a game that heavily inspired the game im currently trying to develop, and I noticed theres a whole community of modders out there (on NexusMods) that are developing really cool texture/qol mods for the game...and it got me wondering -\n\nHow do people have mods for their games? Is it something that needs to be enabled/set up by the developer? Or is it more of an engine thing.\n\nPretty cool to see all the mods are out there, and I wonder how I could allow/enable that in a Godot game/if Godot event supports it. Any help is greatly appreciated!"
    },
    {
        "link": "https://reddit.com/r/feedthebeast/comments/srsmcv/pet_peeve_lack_of_proper_mod_documentation",
        "document": "This has been really grating on me lately. There are too many mods out there who rely on third-party Youtubers to make videos describing how their mods work, or worse yet have no documentation whatsoever; either in-game or otherwise.\n\nI want to be clear that I’m not suggesting all mods need specifically in-game documentation - it’s nice to have, but in many ways would represent scope creep. That, and I doubt anyone wants to carry around a bunch of manuals (even with Akashic Tome). I also understand that this is a free hobby done mostly by amateur programmers, so I don’t expect best practices all around.\n\nBut my god. Some mods, like the mods by Team Abnormal or Tetra - you go to their Github, and it’s basically just a pretty ad for their Discord or a bunch of half-hour video clips. If you’re putting more work into your social media presence than actually describing what your mod does in a clear and easily accessible way, your priorities are out of whack."
    }
]