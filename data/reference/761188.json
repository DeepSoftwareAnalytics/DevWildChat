[
    {
        "link": "https://selenium-python.readthedocs.io/api.html",
        "document": "This chapter covers all the interfaces of Selenium WebDriver.\n\nThe API definitions in this chapter show the absolute location of classes. However, the recommended import style is as given below:\n\nThen, you can access the classes like this:\n\nThe special keys class ( ) can be imported like this:\n\nThe exception classes can be imported like this (Replace the with the actual class name given below):\n\nConventions used in the API\n\nSome attributes are callable (or methods) and others are non-callable (properties). All the callable attributes are ending with round brackets.\n\nHere is an example for property:\n\nHere is an example of a method:\n\nExceptions that may happen in all the webdriver code. The Element Click command could not be completed because the element receiving the events is obscuring the element that was requested to be clicked. Thrown when an element is present in the DOM but interactions with that element will hit another element due to paint order. Thrown when trying to select an unselectable element. Thrown when an element is present on the DOM, but it is not visible, and so is not able to be interacted with. Most commonly encountered when trying to click or read text of an element that is hidden from view. Thrown when activating an IME engine has failed. Thrown when IME support is not available. This exception is thrown for every IME-related method call if IME support is not available on the machine. Navigation caused the user agent to hit a certificate warning, which is usually the result of an expired or invalid TLS certificate. The arguments passed to a command are either invalid or malformed. Thrown when attempting to add a cookie under a different domain than the current URL. The coordinates provided to an interaction’s operation are invalid. Thrown when a command could not be completed because the element is in an invalid state. This can be caused by attempting to clear an element that isn’t both editable and resettable. Thrown when the selector which is used to find an element does not return a WebElement. Currently this only happens when the selector is an xpath expression and it is either syntactically invalid (i.e. it is not a xpath expression) or the expression does not select WebElements (e.g. “count(//input)”). Occurs if the given session id is not in the list of active sessions, meaning the session either does not exist or that it’s not active. Thrown when frame or window target to be switched doesn’t exist. An error occurred while executing JavaScript supplied by the user. Thrown when the target provided to the move() method is invalid, i.e. out of document. Thrown when switching to no presented alert. This can be caused by calling an operation on the Alert() class when an alert is not yet on the screen. Thrown when the attribute of element could not be found. You may want to check if the attribute exists in the particular browser you are testing against. Some browsers may have different property names for the same property. (IE8’s .innerText vs. Firefox .textContent) No cookie matching the given path name was found amongst the associated cookies of the current browsing context’s active document. Raised when driver is not specified and cannot be located. Thrown when element could not be found. If you encounter this exception, you may want to check the following:\n• None Check your selector used in your find_by…\n• None Element may not yet be on the screen at the time of the find operation, (webpage is still loading) see selenium.webdriver.support.wait.WebDriverWait() for how to write a wait wrapper to wait for an element to appear. Thrown when frame target to be switched doesn’t exist. Thrown when trying to access the shadow root of an element when it does not have a shadow root attached. Thrown when window target to be switched doesn’t exist. To find the current set of active window handles, you can get a list of the active window handles in the following way: A new session could not be created. Thrown when a reference to an element is now “stale”. Stale means the element no longer appears on the DOM of the page. Possible causes of StaleElementReferenceException include, but not limited to:\n• None You are no longer on the same page, or the page may have refreshed since the element was located.\n• None The element may have been removed and re-added to the screen, since it was located. Such as an element being relocated. This can happen typically with a javascript framework when values are updated and the node is rebuilt.\n• None Element may have been inside an iframe or another context which was refreshed. Thrown when a command does not complete in enough time. Thrown when an unexpected alert has appeared. Usually raised when an unexpected modal is blocking the webdriver from executing commands. Thrown when a support class did not get an expected web element. The requested command matched a known URL but did not match any methods for that URL.\n\nABC’s allow custom implementations of Webdriver to be registered so that isinstance type checks will succeed. Controls a browser by sending commands to a remote server. This server is expected to be running the WebDriver wire protocol as defined at https://www.selenium.dev/documentation/legacy/json_wire_protocol/.\n• None session_id - String ID of the browser session started and controlled by this WebDriver.\n• None capabilities - Dictionary of effective capabilities of this browser session as returned by the remote server. See https://www.selenium.dev/documentation/legacy/desired_capabilities/ Create a new driver that will issue commands using the wire protocol.\n• None command_executor - Either a string representing URL of the remote server or a custom\n• None keep_alive - Whether to configure remote_connection.RemoteConnection to use\n• None file_detector - Pass custom file detector object during instantiation. If None, then default LocalFileDetector() will be used. Adds a virtual authenticator with the given options. Goes one step backward in the browser history. Creates a web element with the specified . Delete all cookies in the scope of the session. Deletes a single cookie with the given name. Downloads a file with the specified file name to the target directory. file_name: The name of the file to download. target_directory: The path to the directory to save the downloaded file. Sends a command to be executed by a command.CommandExecutor.\n• None driver_command: The name of the command to execute as a string.\n• None params: A dictionary of named parameters to send with the command.\n• None *args: Any applicable arguments for your JavaScript.\n• None *args: Any applicable arguments for your JavaScript. Overrides the current file detector (if necessary) in limited context. Ensures the original file detector is set afterwards.\n• None file_detector_class - Class of the desired file detector. If the class is different from the current file_detector, then the class is instantiated with args and kwargs and used as a file detector during the duration of the context manager.\n• None args - Optional arguments that get passed to the file detector class during\n• None kwargs - Keyword arguments, passed the same way as args. Find an element given a By strategy and locator. Find elements given a By strategy and locator. Goes one step forward in the browser history. Get a single cookie by name. Returns the cookie if found, None if not. Returns a set of dictionaries, corresponding to cookies visible in the current session. Returns the list of credentials owned by the authenticator. Retrieves the downloadable files as a map of file names and their corresponding URLs. Gets the log for a given log type.\n• None log_type: type of log that which will be returned Gets the screenshot of the current window as a base64 encoded string which is useful in embedded images in HTML. Saves a screenshot of the current window to a PNG image file. Returns False if there is any IOError, else returns True. Use full paths in your filename.\n• None filename: The full path you wish to save your screenshot to. This should end with a extension. Gets the screenshot of the current window as a binary data. Gets the x,y position of the current window. Gets the x, y coordinates of the window as well as height and width of the current window. Gets the width and height of the current window. Sets a sticky timeout to implicitly wait for an element to be found, or a command to complete. This method only needs to be called one time per session. To set the timeout for calls to execute_async_script, see set_script_timeout.\n• None time_to_wait: Amount of time to wait (in seconds) Maximizes the current window that webdriver is using. Store common javascript scripts to be executed later by a unique hashable ID. The driver makes a best effort to return a PDF based on the provided parameters. Quits the driver and closes every associated window. Removes all credentials from the authenticator. The authenticator is no longer valid after removal, so no methods may be called. Saves a screenshot of the current window to a PNG image file. Returns False if there is any IOError, else returns True. Use full paths in your filename.\n• None filename: The full path you wish to save your screenshot to. This should end with a extension. Set the amount of time to wait for a page load to complete before throwing an error.\n• None time_to_wait: The amount of time to wait Set the amount of time that the script should wait during an execute_async_script call before throwing an error.\n• None time_to_wait: The amount of time to wait (in seconds) Sets whether the authenticator will simulate success or fail on user verification. verified: True if the authenticator will pass user verification, False otherwise. Sets the x,y position of the current window. (window.moveTo)\n• None x: the x-coordinate in pixels to set the window position\n• None y: the y-coordinate in pixels to set the window position Sets the x, y coordinates of the window as well as height and width of the current window. This method is only supported for W3C compatible browsers; other browsers should use and . Sets the width and height of the current window. (window.resizeTo)\n• None width: the width in pixels to set the window to\n• None height: the height in pixels to set the window to This method may be overridden to define custom startup behavior. Creates a new session with the desired capabilities.\n• None capabilities - a capabilities dict to start the session with. This method may be overridden to define custom shutdown behavior. Returns the drivers current capabilities being used. Gets the URL of the current page. Returns the handle of the current window. Gets a list of the available log types. This only works with w3c compliant browsers. Returns the name of the underlying browser for this instance. Gets the current orientation of the device. Gets the source of the current page.\n• None SwitchTo: an object containing all options to switch focus into Get all the timeouts that have been set on the current session. Returns the title of the current page. Returns the id of the virtual authenticator. Returns the handles of all windows within the current session.\n\nABC’s will allow custom types to be registered as a WebElement to pass type checks. Generally, all interesting operations that interact with a document will be performed through this interface. All method calls will do a freshness check to ensure that the element reference is still valid. This essentially determines whether the element is still attached to the DOM. If this test fails, then an is thrown, and all future calls to this instance will fail. Find an element given a By strategy and locator. Find elements given a By strategy and locator. Gets the given attribute or property of the element. This method will first try to return the value of a property with the given name. If a property with that name doesn’t exist, it returns the value of the attribute with the same name. If there’s no attribute with that name, is returned. Values which are considered truthy, that is equals “true” or “false”, are returned as booleans. All other non- values are returned as strings. For attributes or properties which do not exist, is returned. To obtain the exact value of the attribute or property, use or methods respectively.\n• None name - Name of the attribute/property to retrieve. # Check if the \"active\" CSS class is applied to an element. Gets the given attribute of the element. Unlike , this method only returns attributes declared in the element’s HTML markup.\n• None name - Name of the attribute to retrieve. Gets the given property of the element.\n• None name - Name of the property to retrieve. Whether the element is visible to a user. Returns whether the element is enabled. Returns whether the element is selected. Can be used to check if a checkbox or radio button is selected. Saves a screenshot of the current element to a PNG image file. Returns False if there is any IOError, else returns True. Use full paths in your filename.\n• None filename: The full path you wish to save your screenshot to. This should end with a extension.\n• None value - A string for typing, or setting form fields. For setting file inputs, this could be a local file path. Use this to send simple key events or to fill out form fields: This can also be used to set file inputs. # Generally it's better to wrap the file path in one of the methods # in os.path to return the actual path to support cross OS testing. The value of a CSS property. Returns the ARIA Level of the current webelement. Returns the ARIA role of the current web element. This is mainly for internal use. Simple use cases such as checking if 2 webelements refer to the same element, can be done using : The location of the element in the renderable canvas. THIS PROPERTY MAY CHANGE WITHOUT WARNING. Use this to discover where on the screen an element is so that we can click it. This method should cause the element to be scrolled into view. Returns the top lefthand corner location on the screen, or zero coordinates if the element is not visible. Internal reference to the WebDriver instance this element was found from. A dictionary with the size and location of the element. Gets the screenshot of the current element as a base64 encoded string. Gets the screenshot of the current element as a binary data. Returns a shadow root of the element if there is one or an error. Only works from Chromium 96, Firefox 96, and Safari 16.4 onwards.\n• None NoSuchShadowRoot - if no shadow root was attached to element\n\nAn expectation for checking if an alert is currently present and switching to it. An expectation that all of multiple expected conditions is true. Equivalent to a logical ‘AND’. Returns: When any ExpectedCondition is not met: False. When all ExpectedConditions are met: A List with each ExpectedCondition’s return value. An expectation that any of multiple expected conditions is true. Equivalent to a logical ‘OR’. Returns results of the first matching condition, or False if none do. An expectation for checking if the given attribute is included in the specified element. An expectation to locate an element and check if the selection state specified is in that state. locator is a tuple of (by, path) is_selected is a boolean An expectation for the element to be located is selected. locator is a tuple of (by, path) An expectation for checking if the given element is selected. An Expectation for checking an element is visible and enabled such that you can click it. element is either a locator (text) or an WebElement An expectation for checking the selection is selected. An expectation for checking whether the given frame is available to switch to. If the frame is available it switches the given driver to the specified frame. An Expectation for checking that an element is either invisible or not present on the DOM. element is either a locator (text) or an WebElement An Expectation for checking that an element is either invisible or not present on the DOM. locator used to find the element An expectation that a new window will be opened and have the number of windows handles increase. An expectation that none of 1 or multiple expected conditions is true. An expectation for the number of windows to be a certain value. An expectation for checking that there is at least one element present on a web page. locator is used to find the element returns the list of WebElements once they are located An expectation for checking that an element is present on the DOM of a page. This does not necessarily mean that the element is visible. locator - used to find the element returns the WebElement once it is located Wait until an element is no longer attached to the DOM. element is the element to wait for. returns False if the element is still attached to the DOM, true otherwise. An expectation for checking if the given text is present in the specified element. An expectation for checking if the given text is present in the element’s attribute. An expectation for checking if the given text is present in the element’s value. An expectation for checking that the title contains a case-sensitive substring. title is the fragment of title expected returns True when the title matches, False otherwise An expectation for checking the title of a page. title is the expected title, which must be an exact match returns True if the title matches, false otherwise. An expectation for checking the current url. url is the expected url, which must not be an exact match returns True if the url is different, false otherwise. An expectation for checking that the current url contains a case- sensitive substring. url is the fragment of url expected, returns True when the url matches, False otherwise An expectation for checking the current url. pattern is the expected pattern. This finds the first occurrence of pattern in the current url and as such does not require an exact full match. An expectation for checking the current url. url is the expected url, which must be an exact match returns True if the url matches, false otherwise. An expectation for checking that an element, known to be present on the DOM of a page, is visible. Visibility means that the element is not only displayed but also has a height and width that is greater than 0. element is the WebElement returns the (same) WebElement once it is visible An expectation for checking that all elements are present on the DOM of a page and visible. Visibility means that the elements are not only displayed but also has a height and width that is greater than 0. locator - used to find the elements returns the list of WebElements once they are located and visible An expectation for checking that there is at least one element visible on a web page. locator is used to find the element returns the list of WebElements once they are located An expectation for checking that an element is present on the DOM of a page and visible. Visibility means that the element is not only displayed but also has a height and width that is greater than 0. locator - used to find the element returns the WebElement once it is located and visible"
    },
    {
        "link": "https://selenium.dev/documentation/webdriver/waits",
        "document": "Perhaps the most common challenge for browser automation is ensuring that the web application is in a state to execute a particular Selenium command as desired. The processes often end up in a race condition where sometimes the browser gets into the right state first (things work as intended) and sometimes the Selenium code executes first (things do not work as intended). This is one of the primary causes of flaky tests.\n\nAll navigation commands wait for a specific value based on the page load strategy (the default value to wait for is ) before the driver returns control to the code. The only concerns itself with loading assets defined in the HTML, but loaded JavaScript assets often result in changes to the site, and elements that need to be interacted with may not yet be on the page when the code is ready to execute the next Selenium command.\n\nSimilarly, in a lot of single page applications, elements get dynamically added to a page or change visibility based on a click. An element must be both present and displayed on the page in order for Selenium to interact with it.\n\nTake this page for example: https://www.selenium.dev/selenium/web/dynamic.html When the “Add a box!” button is clicked, a “div” element that does not exist is created. When the “Reveal a new input” button is clicked, a hidden text field element is displayed. In both cases the transition takes a couple seconds. If the Selenium code is to click one of these buttons and interact with the resulting element, it will do so before that element is ready and fail.\n\nThe first solution many people turn to is adding a sleep statement to pause the code execution for a set period of time. Because the code can’t know exactly how long it needs to wait, this can fail when it doesn’t sleep long enough. Alternately, if the value is set too high and a sleep statement is added in every place it is needed, the duration of the session can become prohibitive.\n\nSelenium provides two different mechanisms for synchronization that are better.\n\nSelenium has a built-in way to automatically wait for elements called an implicit wait. An implicit wait value can be set either with the timeouts capability in the browser options, or with a driver method (as shown below).\n\nThis is a global setting that applies to every element location call for the entire session. The default value is , which means that if the element is not found, it will immediately return an error. If an implicit wait is set, the driver will wait for the duration of the provided value before returning the error. Note that as soon as the element is located, the driver will return the element reference and the code will continue executing, so a larger implicit wait value won’t necessarily increase the duration of the session.\n\nWarning: Do not mix implicit and explicit waits. Doing so can cause unpredictable wait times. For example, setting an implicit wait of 10 seconds and an explicit wait of 15 seconds could cause a timeout to occur after 20 seconds.\n\nSolving our example with an implicit wait looks like this:\n\nExplicit waits are loops added to the code that poll the application for a specific condition to evaluate as true before it exits the loop and continues to the next command in the code. If the condition is not met before a designated timeout value, the code will give a timeout error. Since there are many ways for the application not to be in the desired state, explicit waits are a great choice to specify the exact condition to wait for in each place it is needed. Another nice feature is that, by default, the Selenium Wait class automatically waits for the designated element to exist.\n\nThe Wait class can be instantiated with various parameters that will change how the conditions are evaluated.\n• Changing how often the code is evaluated (polling interval)\n• Specifying which exceptions should be handled automatically\n\nFor instance, if the element not interactable error is retried by default, then we can add an action on a method inside the code getting executed (we just need to make sure that the code returns when it is successful):"
    },
    {
        "link": "https://selenium.dev/documentation/webdriver/elements/interactions",
        "document": "There are only 5 basic commands that can be executed on an element:\n• send keys (only applies to text fields and content editable elements)\n• clear (only applies to text fields and content editable elements)\n\nThese methods are designed to closely emulate a user’s experience, so, unlike the Actions API, it attempts to perform two things before attempting the specified action.\n• If it determines the element is outside the viewport, it scrolls the element into view, specifically it will align the bottom of the element with the bottom of the viewport.\n• It ensures the element is interactable before taking the action. This could mean that the scrolling was unsuccessful, or that the element is not otherwise displayed. Determining if an element is displayed on a page was too difficult to define directly in the webdriver specification, so Selenium sends an execute command with a JavaScript atom that checks for things that would keep the element from being displayed. If it determines an element is not in the viewport, not displayed, not keyboard-interactable, or not pointer-interactable, it returns an element not interactable error.\n\nThe element click command is executed on the center of the element. If the center of the element is obscured for some reason, Selenium will return an element click intercepted error.\n\nThe element send keys command types the provided keys into an editable element. Typically, this means an element is an input element of a form with a type or an element with a attribute. If it is not editable, an invalid element state error is returned.\n\nHere is the list of possible keystrokes that WebDriver Supports.\n\nThe element clear command resets the content of an element. This requires an element to be editable, and resettable. Typically, this means an element is an input element of a form with a type or an element with a attribute. If these conditions are not met, an invalid element state error is returned.\n\nIn Selenium 4 this is no longer implemented with a separate endpoint and functions by executing a script. As such, it is recommended not to use this method and to click the applicable form submission button instead."
    },
    {
        "link": "https://selenium-python.readthedocs.io/waits.html",
        "document": "These days, most of the web apps are using AJAX techniques. When a page is loaded by the browser, the elements within that page may load at different time intervals. This makes locating elements difficult: if an element is not yet present in the DOM, a locate function will raise an exception. Using waits, we can solve this issue. Waiting provides some slack between actions performed - mostly locating an element or any other operation with the element.\n\nSelenium Webdriver provides two types of waits - implicit & explicit. An explicit wait makes WebDriver wait for a certain condition to occur before proceeding further with execution. An implicit wait makes WebDriver poll the DOM for a certain amount of time when trying to locate an element.\n\nAn explicit wait is a code you define to wait for a certain condition to occur before proceeding further in the code. The extreme case of this is time.sleep(), which sets the condition to an exact time period to wait. There are some convenience methods provided that help you write code that will wait only as long as required. WebDriverWait in combination with ExpectedCondition is one way this can be accomplished. In the code above, Selenium will wait for a maximum of 10 seconds for an element matching the given criteria to be found. If no element is found in that time, a TimeoutException is thrown. By default, WebDriverWait calls the ExpectedCondition every 500 milliseconds until it returns success. ExpectedCondition will return (Boolean) in case of success or if it fails to locate an element. There are some common conditions that are frequently of use when automating web browsers. Listed below are the names of each. Selenium Python binding provides some convenience methods so you don’t have to code an expected_condition class yourself or create your own utility package for them. The expected_conditions module contains a set of predefined conditions to use with WebDriverWait. You can also create custom wait conditions when none of the previous convenience methods fit your requirements. A custom wait condition can be created using a class with method which returns when the condition doesn’t match. \"\"\"An expectation for checking that an element has a particular css class. locator - used to find the element returns the WebElement once it has the particular css class # Wait until an element with id='myNewInput' has class 'myCSSClass' You may also consider using polling2 library which you need to install separately.\n\nAn implicit wait tells WebDriver to poll the DOM for a certain amount of time when trying to find any element (or elements) not immediately available. The default setting is 0 (zero). Once set, the implicit wait is set for the life of the WebDriver object."
    },
    {
        "link": "https://stackoverflow.com/questions/59130200/selenium-wait-until-element-is-present-visible-and-interactable",
        "document": "Modern Python Selenium frameworks have smart-waiting already included before performing actions such as clicking. For example, here's a SeleniumBase script that tests a demo e-commerce website:\n\nIn addition, there are simple methods for waiting for certain things if you still want to use those. Eg:\n\nThe Selenium \"best practices\" now recommend using frameworks that include smart-waiting for you:\n\nThat means NOT USING a long line like this anymore:\n\nand instead, DO USE a framework where you can do something like this:\n\nIt's much cleaner, just as reliable, and displays better error messages if the element you're looking for never shows up within the default timeout.\n\nFrameworks, such as SeleniumBase, are listed on the Selenium Ecosystem page: https://www.selenium.dev/ecosystem/#frameworks"
    },
    {
        "link": "https://pytba.readthedocs.io",
        "document": "TeleBot is synchronous and asynchronous implementation of Telegram Bot API."
    },
    {
        "link": "https://pypi.org/project/pyTelegramBotAPI",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://github.com/eternnoir/pyTelegramBotAPI",
        "document": "A simple, but extensible Python implementation for the Telegram Bot API.\n• General API Documentation\n• General use of the API\n• Advanced use of the API\n• Controlling the amount of Threads used by TeleBot\n• F.A.Q.\n• How can I distinguish a User and a GroupChat in message.chat?\n\nThis API is tested with Python 3.9-3.13 and Pypy 3. There are two ways to install the library:\n\nIt is generally recommended to use the first option.\n\nWhile the API is production-ready, it is still under development and it has regular updates, do not forget to update it regularly by calling\n\nIt is presumed that you have obtained an API token with @BotFather. We will call this token . Furthermore, you have basic knowledge of the Python programming language and more importantly the Telegram Bot API.\n\nThe TeleBot class (defined in _init_.py) encapsulates all API calls in a single class. It provides functions such as ( , etc.) and several ways to listen for incoming messages.\n\nCreate a file called . Then, open the file and create an instance of the TeleBot class.\n\nNote: Make sure to actually replace TOKEN with your own API token.\n\nAfter that declaration, we need to register some so-called message handlers. Message handlers define filters which a message must pass. If a message passes the filter, the decorated function is called and the incoming message is passed as an argument.\n\nA function which is decorated by a message handler can have an arbitrary name, however, it must have only one parameter (the message).\n\nThis one echoes all incoming text messages back to the sender. It uses a lambda function to test a message. If the lambda returns True, the message is handled by the decorated function. Since we want all messages to be handled by this function, we simply always return True.\n\nNote: all handlers are tested in the order in which they were declared\n\nWe now have a basic bot which replies a static message to \"/start\" and \"/help\" commands and which echoes the rest of the sent messages. To start the bot, add the following to our source file:\n\nAlright, that's it! Our source file now looks like this:\n\nTo start the bot, simply open up a terminal and enter to run the bot! Test it by sending commands ('/start' and '/help') and arbitrary text messages.\n\nAll types are defined in types.py. They are all completely in line with the Telegram API's definition of the types, except for the Message's field, which is renamed to (because is a Python reserved token). Thus, attributes such as can be accessed directly with . Note that can be either an instance of or (see How can I distinguish a User and a GroupChat in message.chat?).\n\nThe Message object also has a attribute, which defines the type of the Message. can be one of the following strings: , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , .\n\nYou can use some types in one function. Example:\n\nAll API methods are located in the TeleBot class. They are renamed to follow common Python naming conventions. E.g. is renamed to and to .\n\nOutlined below are some general use cases of the API.\n\nA message handler is a function that is decorated with the decorator of a TeleBot instance. Message handlers consist of one or multiple filters. Each filter must return True for a certain message in order for a message handler to become eligible to handle that message. A message handler is declared in the following way (provided is an instance of TeleBot):\n\nis not bound to any restrictions. Any function name is permitted with message handlers. The function must accept at most one argument, which will be the message that the function must handle. is a list of keyword arguments. A filter is declared in the following manner: . One handler may have multiple filters. TeleBot supports the following filters:\n\nHere are some examples of using the filters and message handlers:\n\nImportant: all handlers are tested in the order in which they were declared\n\nHandle updates of a the bot's member status in a chat\n\nHandle updates of a chat member's status in a chat Note: \"chat_member\" updates are not requested by default. If you want to allow all update types, set in / to\n\nNow, you can use inline_handler to get inline queries in telebot.\n\nUse chosen_inline_handler to get chosen_inline_result in telebot. Don't forget to add the /setinlinefeedback command for @Botfather.\n\nA middleware handler is a function that allows you to modify requests or the bot context as they pass through the Telegram to the bot. You can imagine middleware as a chain of logic connection handled before any other handlers are executed. Middleware processing is disabled by default, enable it by setting .\n\nThere are other examples using middleware handler in the examples/middleware directory.\n\nThere are class-based middlewares. Basic class-based middleware looks like this:\n\nClass-based middleware should have two functions: post and pre process. So, as you can see, class-based middlewares work before and after handler execution. For more, check out in examples\n\nAlso, you can use built-in custom filters. Or, you can create your own filter.\n\nAlso, we have examples on them. Check this links:\n\nYou can check some built-in filters in source code\n\nExample of filtering by id\n\nExample of filtering by text\n\nIf you want to add some built-in filter, you are welcome to add it in custom_filters.py file.\n\nHere is example of creating filter-class:\n\nAll functions of TeleBot take an optional argument. This argument must be an instance of , or , which are defined in types.py.\n\nThe last example yields this result:\n\nThis object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. Attributes:\n\nHere's an Example: \n\n Here is the entity number or order of entity in a reply, for if incase there are multiple entities in the reply/message.\n\n returns a list of entities object. \n\n would give the type of the first entity\n\n Refer Bot Api for extra details\n\nSince version 5.0 of the Bot API, you have the possibility to run your own Local Bot API Server. pyTelegramBotAPI also supports this feature.\n\nImportant: Like described here, you have to log out your bot from the Telegram server before switching to your local API server. in pyTelegramBotAPI use\n\nNote: 4200 is an example port\n\nNew: There is an asynchronous implementation of telebot. To enable this behaviour, create an instance of AsyncTeleBot instead of TeleBot.\n\nNow, every function that calls the Telegram API is executed in a separate asynchronous task. Using AsyncTeleBot allows you to do the following:\n\nSee more in examples\n\nSometimes you must send messages that exceed 5000 characters. The Telegram API can not handle that many characters in one request, so we need to split the message in multiples. Here is how to do that using the API:\n\nOr you can use the new function to get more meaningful substrings:\n\nThe TeleBot constructor takes the following optional arguments:\n• threaded: True/False (default True). A flag to indicate whether TeleBot should execute message handlers on it's polling Thread.\n\nAs an alternative to the message handlers, one can also register a function as a listener to TeleBot.\n\nNOTICE: handlers won't disappear! Your message will be processed both by handlers and listeners. Also, it's impossible to predict which will work at first because of threading. If you use threaded=False, custom listeners will work earlier, after them handlers will be called. Example:\n\nWhen using webhooks telegram sends one Update per call, for processing it you should call process_new_messages([update.message]) when you recieve it.\n\nThere are some examples using webhooks in the examples/webhook_examples directory.\n\nYou can use the Telebot module logger to log debug info about Telebot. Use to get the logger of the TeleBot module. It is possible to add custom logging Handlers to the logger. Refer to the Python logging module page for more info.\n\nYou can use proxy for request. object will use by call proxies argument.\n\nIf you want to use socket5 proxy you need install dependency and make sure, that you have the latest version of , , , and .\n\nYou can disable or change the interaction with real Telegram server by using\n\nparameter. You can pass there your own function that will be called instead of requests.request.\n\nThen you can use API and proceed requests in your handler code.\n\nWe have a fully asynchronous version of TeleBot. This class is not controlled by threads. Asyncio tasks are created to execute all the stuff.\n\nAs you can see here, keywords are await and async.\n\nAsynchronous tasks depend on processor performance. Many asynchronous tasks can run parallelly, while thread tasks will block each other.\n\nAsyncTeleBot is asynchronous. It uses aiohttp instead of requests module.\n\nSee more examples in our examples folder\n\nBot instances that were idle for a long time might be rejected by the server when sending a message due to a timeout of the last used session. Add to your initialisation to force recreation after 5 minutes without any activity.\n\nJoin the News channel. Here we will post releases and updates.\n\nTemplate is a ready folder that contains architecture of basic project. Here are some examples of template:\n• SiteAlert bot (source) by ilteoood - Monitors websites and sends a notification on changes\n• Telegram LMGTFY_bot by GabrielRF - Let me Google that for you.\n• ComedoresUGRbot (source) by alejandrocq - Telegram bot to check the menu of Universidad de Granada dining hall.\n• DonantesMalagaBot - DonantesMalagaBot facilitates information to Malaga blood donors about the places where they can donate today or in the incoming days. It also records the date of the last donation so that it helps the donors to know when they can donate again. - by vfranch\n• DuttyBot by Dmytryi Striletskyi - Timetable for one university in Kiev.\n• wat-bridge by rmed - Send and receive messages to/from WhatsApp through Telegram\n• filmratingbot(source) by jcolladosp - Telegram bot using the Python API that gets films rating from IMDb and metacritic\n• RastreioBot (source) by GabrielRF - Bot used to track packages on the Brazilian Mail Service.\n• Spbu4UBot(link) by EeOneDown - Bot with timetables for SPbU students.\n• LearnIt(link) - A Telegram Bot created to help people to memorize other languages’ vocabulary.\n• VigoBusTelegramBot (GitHub) - Bot that provides buses coming to a certain stop and their remaining time for the city of Vigo (Galicia - Spain)\n• kaishnik-bot (source) by airatk - bot which shows all the necessary information to KNTRU-KAI students.\n• Robbie (source) by @FacuM - Support Telegram bot for developers and maintainers.\n• AsadovBot (source) by @DesExcile - Сatalog of poems by Eduard Asadov.\n• thesaurus_com_bot (source) by @LeoSvalov - words and synonyms from dictionary.com and thesaurus.com in the telegram.\n• InfoBot (source) by @irevenko - An all-round bot that displays some statistics (weather, time, crypto etc...)\n• Sporty (source) by @0xnu - Telegram bot for displaying the latest news, sports schedules and injury updates.\n• JoinGroup Silencer Bot (source) by @zeph1997 - A Telegram Bot to remove \"join group\" and \"removed from group\" notifications.\n• MyElizaPsychologistBot (source) by @Pablo-Davila - An implementation of the famous Eliza psychologist chatbot.\n• Frcstbot (source) by Mrsqd. A Telegram bot that will always be happy to show you the weather forecast.\n• MineGramBot by ModischFabrications. This bot can start, stop and monitor a minecraft server.\n• Tabletop DiceBot by dexpiper. This bot can roll multiple dices for RPG-like games, add positive and negative modifiers and show short descriptions to the rolls.\n• BarnameKon by Anvaari. This Bot make \"Add to google calendar\" link for your events. It give information about event and return link. It work for Jalali calendar and in Tehran Time. Source code\n• Translator bot by Areeg Fahad. This bot can be used to translate texts.\n• Digital Cryptocurrency bot by Areeg Fahad. With this bot, you can now monitor the prices of more than 12 digital Cryptocurrency.\n• Anti-Tracking Bot by Leon Heess (source). Send any link, and the bot tries its best to remove all tracking from the link you sent.\n• Developer Bot by Vishal Singh (source code) This telegram bot can do tasks like GitHub search & clone,provide c++ learning resources ,Stackoverflow search, Codeforces(profile visualizer,random problems)\n• oneIPO bot by Aadithya & Amol Soans This Telegram bot provides live updates , data and documents on current and upcoming IPOs(Initial Public Offerings)\n• CoronaGraphsBot (source) by TrevorWinstral - Gets live COVID Country data, plots it, and briefs the user\n• ETHLectureBot (source) by TrevorWinstral - Notifies ETH students when their lectures have been uploaded\n• Vlun Finder Bot by Resinprotein2333. This bot can help you to find The information of CVE vulnerabilities.\n• ETHGasFeeTrackerBot (Source by DevAdvik - Get Live Ethereum Gas Fees in GWEI\n• Google Sheet Bot by JoachimStanislaus. This bot can help you to track your expenses by uploading your bot entries to your google sheet.\n• GrandQuiz Bot by Carlosma7. This bot is a trivia game that allows you to play with people from different ages. This project addresses the use of a system through chatbots to carry out a social and intergenerational game as an alternative to traditional game development.\n• Diccionario de la RAE (source) This bot lets you find difinitions of words in Spanish using RAE's dictionary. It features direct message and inline search.\n• remoteTelegramShell by EnriqueMoran. Control your LinuxOS computer through Telegram.\n• Commerce Telegram Bot. Make purchases of items in a store with an Admin panel for data control and notifications.\n• Pyfram-telegram-bot Query wolframalpha.com and make use of its API through Telegram.\n• TranslateThisVideoBot This Bot can understand spoken text in videos and translate it to English\n• Zyprexa (source) Zyprexa can solve, help you solve any mathematical problem you encounter and convert your regular mathematical expressions into beautiful imagery using LaTeX.\n• Bincode-telegram-bot by tusharhero - Makes bincodes from text provides and also converts them back to text.\n• Gugumoe-bot (source) by 咕谷酱 GuXiaoJiang is a multi-functional robot, such as OSU game information query, IP test, animation screenshot search and other functions.\n• Feedback-bot A feedback bot for user-admin communication. Made on AsyncTeleBot, using template.\n• TeleServ by ablakely This is a Telegram to IRC bridge which links as an IRC server and makes Telegram users appear as native IRC users.\n• Simple Store Bot by Anton Glyzin This is a simple telegram-store with an admin panel. Designed according to a template.\n• Media Rating Bot (source)by CommanderCRM. This bot aggregates media (movies, TV series, etc.) ratings from IMDb, Rotten Tomatoes, Metacritic, TheMovieDB, FilmAffinity and also provides number of votes of said media on IMDb.\n• Spot Seek Bot (source) by Arashnm80. This is a free & open source telegram bot for downloading tracks, albums or playlists from spotify.\n• CalendarIT Bot (source)by CodeByZen. A simple, but extensible Python Telegram bot, can post acquainted with what is happening today, tomorrow or what happened 20 years ago to channel.\n• DownloadMusicBOT by Francisco Griman - It is a simple bot that downloads audio from YouTube videos on Telegram.\n• AwesomeChatGPTBot - Simple ChatGTP-3.5 bot. It is FREE and can remember chat history for a while With pre-defined roles!\n• QR-Code For You Bot (source) by Arashnm80. Telegram qrcode generator bot created with pyhton and telebot.\n• Best Instagram Downloader Bot (source) by Arashnm80. Free and open source telegram bot to download posts and reels from Instagram.\n• DrinkGenius-Bot (source) by Povladarchik. Your personal assistant in the world of cocktails.\n• Pytgpt-Bot (source) by Smartwa. AI powered bot for chatting, text-to-image and text-to-speech conversions.\n\nWant to have your bot listed here? Just make a pull request. Only bots with public source code are accepted."
    },
    {
        "link": "https://pytba.readthedocs.io/en/latest/sync_version",
        "document": "This is the main synchronous class for Bot.\n\nIt allows you to add handlers for different kind of updates.\n\nSee more examples in examples/ directory: https://github.com/eternnoir/pyTelegramBotAPI/tree/master/examples"
    },
    {
        "link": "https://github.com/eternnoir/pyTelegramBotAPI/blob/master/README.md",
        "document": "A simple, but extensible Python implementation for the Telegram Bot API.\n• General API Documentation\n• General use of the API\n• Advanced use of the API\n• Controlling the amount of Threads used by TeleBot\n• F.A.Q.\n• How can I distinguish a User and a GroupChat in message.chat?\n\nThis API is tested with Python 3.9-3.13 and Pypy 3. There are two ways to install the library:\n\nIt is generally recommended to use the first option.\n\nWhile the API is production-ready, it is still under development and it has regular updates, do not forget to update it regularly by calling\n\nIt is presumed that you have obtained an API token with @BotFather. We will call this token . Furthermore, you have basic knowledge of the Python programming language and more importantly the Telegram Bot API.\n\nThe TeleBot class (defined in _init_.py) encapsulates all API calls in a single class. It provides functions such as ( , etc.) and several ways to listen for incoming messages.\n\nCreate a file called . Then, open the file and create an instance of the TeleBot class.\n\nNote: Make sure to actually replace TOKEN with your own API token.\n\nAfter that declaration, we need to register some so-called message handlers. Message handlers define filters which a message must pass. If a message passes the filter, the decorated function is called and the incoming message is passed as an argument.\n\nA function which is decorated by a message handler can have an arbitrary name, however, it must have only one parameter (the message).\n\nThis one echoes all incoming text messages back to the sender. It uses a lambda function to test a message. If the lambda returns True, the message is handled by the decorated function. Since we want all messages to be handled by this function, we simply always return True.\n\nNote: all handlers are tested in the order in which they were declared\n\nWe now have a basic bot which replies a static message to \"/start\" and \"/help\" commands and which echoes the rest of the sent messages. To start the bot, add the following to our source file:\n\nAlright, that's it! Our source file now looks like this:\n\nTo start the bot, simply open up a terminal and enter to run the bot! Test it by sending commands ('/start' and '/help') and arbitrary text messages.\n\nAll types are defined in types.py. They are all completely in line with the Telegram API's definition of the types, except for the Message's field, which is renamed to (because is a Python reserved token). Thus, attributes such as can be accessed directly with . Note that can be either an instance of or (see How can I distinguish a User and a GroupChat in message.chat?).\n\nThe Message object also has a attribute, which defines the type of the Message. can be one of the following strings: , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , .\n\nYou can use some types in one function. Example:\n\nAll API methods are located in the TeleBot class. They are renamed to follow common Python naming conventions. E.g. is renamed to and to .\n\nOutlined below are some general use cases of the API.\n\nA message handler is a function that is decorated with the decorator of a TeleBot instance. Message handlers consist of one or multiple filters. Each filter must return True for a certain message in order for a message handler to become eligible to handle that message. A message handler is declared in the following way (provided is an instance of TeleBot):\n\nis not bound to any restrictions. Any function name is permitted with message handlers. The function must accept at most one argument, which will be the message that the function must handle. is a list of keyword arguments. A filter is declared in the following manner: . One handler may have multiple filters. TeleBot supports the following filters:\n\nHere are some examples of using the filters and message handlers:\n\nImportant: all handlers are tested in the order in which they were declared\n\nHandle updates of a the bot's member status in a chat\n\nHandle updates of a chat member's status in a chat Note: \"chat_member\" updates are not requested by default. If you want to allow all update types, set in / to\n\nNow, you can use inline_handler to get inline queries in telebot.\n\nUse chosen_inline_handler to get chosen_inline_result in telebot. Don't forget to add the /setinlinefeedback command for @Botfather.\n\nA middleware handler is a function that allows you to modify requests or the bot context as they pass through the Telegram to the bot. You can imagine middleware as a chain of logic connection handled before any other handlers are executed. Middleware processing is disabled by default, enable it by setting .\n\nThere are other examples using middleware handler in the examples/middleware directory.\n\nThere are class-based middlewares. Basic class-based middleware looks like this:\n\nClass-based middleware should have two functions: post and pre process. So, as you can see, class-based middlewares work before and after handler execution. For more, check out in examples\n\nAlso, you can use built-in custom filters. Or, you can create your own filter.\n\nAlso, we have examples on them. Check this links:\n\nYou can check some built-in filters in source code\n\nExample of filtering by id\n\nExample of filtering by text\n\nIf you want to add some built-in filter, you are welcome to add it in custom_filters.py file.\n\nHere is example of creating filter-class:\n\nAll functions of TeleBot take an optional argument. This argument must be an instance of , or , which are defined in types.py.\n\nThe last example yields this result:\n\nThis object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. Attributes:\n\nHere's an Example: \n\n Here is the entity number or order of entity in a reply, for if incase there are multiple entities in the reply/message.\n\n returns a list of entities object. \n\n would give the type of the first entity\n\n Refer Bot Api for extra details\n\nSince version 5.0 of the Bot API, you have the possibility to run your own Local Bot API Server. pyTelegramBotAPI also supports this feature.\n\nImportant: Like described here, you have to log out your bot from the Telegram server before switching to your local API server. in pyTelegramBotAPI use\n\nNote: 4200 is an example port\n\nNew: There is an asynchronous implementation of telebot. To enable this behaviour, create an instance of AsyncTeleBot instead of TeleBot.\n\nNow, every function that calls the Telegram API is executed in a separate asynchronous task. Using AsyncTeleBot allows you to do the following:\n\nSee more in examples\n\nSometimes you must send messages that exceed 5000 characters. The Telegram API can not handle that many characters in one request, so we need to split the message in multiples. Here is how to do that using the API:\n\nOr you can use the new function to get more meaningful substrings:\n\nThe TeleBot constructor takes the following optional arguments:\n• threaded: True/False (default True). A flag to indicate whether TeleBot should execute message handlers on it's polling Thread.\n\nAs an alternative to the message handlers, one can also register a function as a listener to TeleBot.\n\nNOTICE: handlers won't disappear! Your message will be processed both by handlers and listeners. Also, it's impossible to predict which will work at first because of threading. If you use threaded=False, custom listeners will work earlier, after them handlers will be called. Example:\n\nWhen using webhooks telegram sends one Update per call, for processing it you should call process_new_messages([update.message]) when you recieve it.\n\nThere are some examples using webhooks in the examples/webhook_examples directory.\n\nYou can use the Telebot module logger to log debug info about Telebot. Use to get the logger of the TeleBot module. It is possible to add custom logging Handlers to the logger. Refer to the Python logging module page for more info.\n\nYou can use proxy for request. object will use by call proxies argument.\n\nIf you want to use socket5 proxy you need install dependency and make sure, that you have the latest version of , , , and .\n\nYou can disable or change the interaction with real Telegram server by using\n\nparameter. You can pass there your own function that will be called instead of requests.request.\n\nThen you can use API and proceed requests in your handler code.\n\nWe have a fully asynchronous version of TeleBot. This class is not controlled by threads. Asyncio tasks are created to execute all the stuff.\n\nAs you can see here, keywords are await and async.\n\nAsynchronous tasks depend on processor performance. Many asynchronous tasks can run parallelly, while thread tasks will block each other.\n\nAsyncTeleBot is asynchronous. It uses aiohttp instead of requests module.\n\nSee more examples in our examples folder\n\nBot instances that were idle for a long time might be rejected by the server when sending a message due to a timeout of the last used session. Add to your initialisation to force recreation after 5 minutes without any activity.\n\nJoin the News channel. Here we will post releases and updates.\n\nTemplate is a ready folder that contains architecture of basic project. Here are some examples of template:\n• SiteAlert bot (source) by ilteoood - Monitors websites and sends a notification on changes\n• Telegram LMGTFY_bot by GabrielRF - Let me Google that for you.\n• ComedoresUGRbot (source) by alejandrocq - Telegram bot to check the menu of Universidad de Granada dining hall.\n• DonantesMalagaBot - DonantesMalagaBot facilitates information to Malaga blood donors about the places where they can donate today or in the incoming days. It also records the date of the last donation so that it helps the donors to know when they can donate again. - by vfranch\n• DuttyBot by Dmytryi Striletskyi - Timetable for one university in Kiev.\n• wat-bridge by rmed - Send and receive messages to/from WhatsApp through Telegram\n• filmratingbot(source) by jcolladosp - Telegram bot using the Python API that gets films rating from IMDb and metacritic\n• RastreioBot (source) by GabrielRF - Bot used to track packages on the Brazilian Mail Service.\n• Spbu4UBot(link) by EeOneDown - Bot with timetables for SPbU students.\n• LearnIt(link) - A Telegram Bot created to help people to memorize other languages’ vocabulary.\n• VigoBusTelegramBot (GitHub) - Bot that provides buses coming to a certain stop and their remaining time for the city of Vigo (Galicia - Spain)\n• kaishnik-bot (source) by airatk - bot which shows all the necessary information to KNTRU-KAI students.\n• Robbie (source) by @FacuM - Support Telegram bot for developers and maintainers.\n• AsadovBot (source) by @DesExcile - Сatalog of poems by Eduard Asadov.\n• thesaurus_com_bot (source) by @LeoSvalov - words and synonyms from dictionary.com and thesaurus.com in the telegram.\n• InfoBot (source) by @irevenko - An all-round bot that displays some statistics (weather, time, crypto etc...)\n• Sporty (source) by @0xnu - Telegram bot for displaying the latest news, sports schedules and injury updates.\n• JoinGroup Silencer Bot (source) by @zeph1997 - A Telegram Bot to remove \"join group\" and \"removed from group\" notifications.\n• MyElizaPsychologistBot (source) by @Pablo-Davila - An implementation of the famous Eliza psychologist chatbot.\n• Frcstbot (source) by Mrsqd. A Telegram bot that will always be happy to show you the weather forecast.\n• MineGramBot by ModischFabrications. This bot can start, stop and monitor a minecraft server.\n• Tabletop DiceBot by dexpiper. This bot can roll multiple dices for RPG-like games, add positive and negative modifiers and show short descriptions to the rolls.\n• BarnameKon by Anvaari. This Bot make \"Add to google calendar\" link for your events. It give information about event and return link. It work for Jalali calendar and in Tehran Time. Source code\n• Translator bot by Areeg Fahad. This bot can be used to translate texts.\n• Digital Cryptocurrency bot by Areeg Fahad. With this bot, you can now monitor the prices of more than 12 digital Cryptocurrency.\n• Anti-Tracking Bot by Leon Heess (source). Send any link, and the bot tries its best to remove all tracking from the link you sent.\n• Developer Bot by Vishal Singh (source code) This telegram bot can do tasks like GitHub search & clone,provide c++ learning resources ,Stackoverflow search, Codeforces(profile visualizer,random problems)\n• oneIPO bot by Aadithya & Amol Soans This Telegram bot provides live updates , data and documents on current and upcoming IPOs(Initial Public Offerings)\n• CoronaGraphsBot (source) by TrevorWinstral - Gets live COVID Country data, plots it, and briefs the user\n• ETHLectureBot (source) by TrevorWinstral - Notifies ETH students when their lectures have been uploaded\n• Vlun Finder Bot by Resinprotein2333. This bot can help you to find The information of CVE vulnerabilities.\n• ETHGasFeeTrackerBot (Source by DevAdvik - Get Live Ethereum Gas Fees in GWEI\n• Google Sheet Bot by JoachimStanislaus. This bot can help you to track your expenses by uploading your bot entries to your google sheet.\n• GrandQuiz Bot by Carlosma7. This bot is a trivia game that allows you to play with people from different ages. This project addresses the use of a system through chatbots to carry out a social and intergenerational game as an alternative to traditional game development.\n• Diccionario de la RAE (source) This bot lets you find difinitions of words in Spanish using RAE's dictionary. It features direct message and inline search.\n• remoteTelegramShell by EnriqueMoran. Control your LinuxOS computer through Telegram.\n• Commerce Telegram Bot. Make purchases of items in a store with an Admin panel for data control and notifications.\n• Pyfram-telegram-bot Query wolframalpha.com and make use of its API through Telegram.\n• TranslateThisVideoBot This Bot can understand spoken text in videos and translate it to English\n• Zyprexa (source) Zyprexa can solve, help you solve any mathematical problem you encounter and convert your regular mathematical expressions into beautiful imagery using LaTeX.\n• Bincode-telegram-bot by tusharhero - Makes bincodes from text provides and also converts them back to text.\n• Gugumoe-bot (source) by 咕谷酱 GuXiaoJiang is a multi-functional robot, such as OSU game information query, IP test, animation screenshot search and other functions.\n• Feedback-bot A feedback bot for user-admin communication. Made on AsyncTeleBot, using template.\n• TeleServ by ablakely This is a Telegram to IRC bridge which links as an IRC server and makes Telegram users appear as native IRC users.\n• Simple Store Bot by Anton Glyzin This is a simple telegram-store with an admin panel. Designed according to a template.\n• Media Rating Bot (source)by CommanderCRM. This bot aggregates media (movies, TV series, etc.) ratings from IMDb, Rotten Tomatoes, Metacritic, TheMovieDB, FilmAffinity and also provides number of votes of said media on IMDb.\n• Spot Seek Bot (source) by Arashnm80. This is a free & open source telegram bot for downloading tracks, albums or playlists from spotify.\n• CalendarIT Bot (source)by CodeByZen. A simple, but extensible Python Telegram bot, can post acquainted with what is happening today, tomorrow or what happened 20 years ago to channel.\n• DownloadMusicBOT by Francisco Griman - It is a simple bot that downloads audio from YouTube videos on Telegram.\n• AwesomeChatGPTBot - Simple ChatGTP-3.5 bot. It is FREE and can remember chat history for a while With pre-defined roles!\n• QR-Code For You Bot (source) by Arashnm80. Telegram qrcode generator bot created with pyhton and telebot.\n• Best Instagram Downloader Bot (source) by Arashnm80. Free and open source telegram bot to download posts and reels from Instagram.\n• DrinkGenius-Bot (source) by Povladarchik. Your personal assistant in the world of cocktails.\n• Pytgpt-Bot (source) by Smartwa. AI powered bot for chatting, text-to-image and text-to-speech conversions.\n\nWant to have your bot listed here? Just make a pull request. Only bots with public source code are accepted."
    }
]