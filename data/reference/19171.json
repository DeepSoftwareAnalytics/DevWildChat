[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.range.removeduplicates",
        "document": "The following code sample removes duplicates with the first 2 columns.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://learn.microsoft.com/pl-pl/office/vba/api/excel.range.removeduplicates",
        "document": "The following code sample removes duplicates with the first 2 columns.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://stackoverflow.com/questions/31631231/remove-duplicates-from-range-of-cells-in-excel-vba",
        "document": "You need to tell the Range.RemoveDuplicates method what column to use. Additionally, since you have expressed that you have a header row, you should tell the .RemoveDuplicates method that.\n\nYour original code seemed to want to remove duplicates from a single column while ignoring surrounding data. That scenario is atypical and I've included the surrounding data so that the .RemoveDuplicates process does not scramble your data. Post back a comment if you truly wanted to isolate the RemoveDuplicates process to a single column."
    },
    {
        "link": "https://learn.microsoft.com/sv-se/office/vba/api/excel.range.removeduplicates",
        "document": "The following code sample removes duplicates with the first 2 columns.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://trumpexcel.com/excel-vba/remove-duplicate-values",
        "document": "Dealing with duplicates is a regular task for people working with data in Excel.\n\nWhile there is already an in-built Remove Duplicate functionality in Excel, you can also do the same using VBA.\n\nThis could be useful if you’re already working with VBA and want to remove duplicates using your code or automate the process.\n\nIn this article, I will explain how to remove duplicate values using VBA and then cover some examples of VBA codes you can use in various scenarios.\n\nLet’s first understand the Range.RemoveDuplicates method, which allows us to remove duplicates in VBA.\n\nBelow is the syntax of Range.RemoveDuplicates method:\n• “YourRange” is the range you’re working with\n• Columns:=Array(1,2) specifies which columns to check for duplicates (in this case, columns 1 and 2). This is a mandatory argument, and RemoveDuplicates won’t work if you don’t provide this.\n• Header:=xlYes indicates whether the first row contains headers. This is an optional argument, and if you don’t provide it, Excel will consider that your dataset doesn’t have a header.\n\nThe RemoveDuplicates method compares rows within the selected range.\n\nIf a row has the same values as another row in the specified columns, Excel will consider it a duplicate and remove it. The first occurrence of a unique combination is kept, while subsequent duplicates are deleted.\n\nNow, let’s look at some examples of how to use VBA to remove duplicate values in Excel in various scenarios.\n\nBelow, I have a dataset where I have names in column A, and I want to remove any duplicate occurrence of the name and only keep the unique ones.\n\nHere is the VBA code that would do this:\n\nThe above VBA code removes duplicate values from the range A1:A11 in the worksheet named “Sheet1”.\n\nThe RemoveDuplicates method is used on the range, specifying Columns:=1 to indicate that the operation should consider the first column within the specified range.\n\nThe Header:=xlYes argument indicates that the first row in the range (A1) is treated as a header row and not part of the data to be de-duplicated.\n\nIn the above example, I specified the range From which I wanted to remove the duplicate values. You can use the VBA code below to do the same from an already selected range of cells.\n\nBelow, I have a data set where I have names in column, their state in column B, and their city in column C, and I want to remove any duplicate instance of the name.\n\nThis means that I want to remove any record where the name repeats, irrespective of whether the state and city names are the same or not.\n\nThe VBA code below would do this:\n\nThe above code considers the entire range A1:C11 but only uses column 1 to check for duplicates.\n\nSo when it encounters a repeat instance of a name, that entire record is deleted.\n\nBelow, I have a data set where I have names in column, their state in column B, and their city in column C, and I want to remove any duplicate instances where the name and the state name are the same.\n\nThe VBA code below would do this:\n\nThe above code considers the entire range A1:C11 and then checks columns 1 and 2 to assess the duplicate records.\n\nWhen it encounters the same instance of the name and state, it considers that record as duplicate and removes it (irrespective of what the city name is)\n\nIf you want to remove the entire duplicate row, you can do that by specifying all the column numbers in the VBA code.\n\nBelow is a data set from which I want to remove all the duplicate rows (where a duplicate row would be where all the values in the row are the same as that of some other row).\n\nThe VBA code below would do this:\n\nSince there are three columns in my data set, I have used Columns:=Array(1,2,3). You can adjust this parameter accordingly if your data has more columns.\n\nVBA can be useful when you want to remove duplicates across multiple sheets in one go.\n\nNow, there can be two situations:\n• Your data set is in the same range in all the sheets, and you want to remove duplicates from it.\n• All the sheets have data sets of different sizes, and you need to use VBA first to determine the size and then remove the duplicate records from it.\n\nRemove Duplicates From the Same Range Across Multiple Sheets\n\nLet’s say you have a workbook with multiple worksheets, and all these worksheets have data in the same range (say A1:D40)\n\nBelow is the VBA code that would remove duplicates from multiple sheets in this scenario:\n\nThe above code uses a For Next loop to go through each sheet and then uses the RemoveDuplicates method to remove duplicate records from the specified range (which is A1:D40).\n\nThis was a pretty straightforward VBA code since we had to remove duplicates from the same range in each worksheet.\n\nHowever, in most practical scenarios, your range is likely to be of varying length. So, let’s say how to remove duplicates from each sheet where the ranges are of different sizes.\n\nBelow is the VBA code that would go through each worksheet in the given workbook, determine the range size, and then remove duplicates from it.\n\nThe above VBA code removes duplicate rows from all worksheets in a workbook based on the entire range of used columns.\n\nIt loops through each worksheet, then identifies the last row and column containing data, and then checks if there is a valid range (more than one row and at least one column).\n\nThe subroutine then dynamically creates an array (columnsArray) based on the number of columns and uses this array to specify the columns for the RemoveDuplicates method.\n\nThis method is applied to the entire Used range of each worksheet, considering all the columns for duplicate identification.\n\nThe above VBA macro removes duplicate rows from a specified table named “MyTable” in a worksheet named “Table“.\n\nIt uses a predefined array (columnsArray) containing column indexes (in this case, columns 1 and 2) to identify duplicates.\n\nThe RemoveDuplicates method is applied to the entire range of the table, considering the specified columns for duplicate detection.\n\nThe Header:=xlYes parameter indicates that the table has headers, which are excluded from the duplicate check.\n\nIf you’re encountering issues with the RemoveDuplicates method in VBA for Excel, there could be several reasons why it’s not working as expected.\n\nHere are some potential causes:\n\nEnsure that the range you’ve selected for the RemoveDuplicates method is correct. If the range is not properly defined, it may not include all the columns you intend to duplicate.\n\nWhen specifying columns in the RemoveDuplicates method, ensure you are using the correct column indexes. Remember, column indexing starts from 1 and not 0.\n\nSometimes, data that looks identical may have different data types (e.g., text vs. numeric). Ensure that the data types are consistent across each column.\n\nIf there are hidden rows or columns, they might be causing unexpected results. Make sure to account for or unhide them before running the duplicate removal.\n\nCheck for leading or trailing spaces in your data. These can cause entries that look identical to be treated as different. You might want to use the Trim function to remove extra spaces.\n\nThe RemoveDuplicates method is not case-sensitive. Therefore, entries with different cases (e.g., “Excel” vs. “excel”) will be considered duplicates.\n\nIf your range includes merged cells, it might cause the RemoveDuplicates method to behave unexpectedly. Ensure that cells are not merged in the range you are working with.\n\nDouble-check the syntax and parameters of the RemoveDuplicates method. Incorrect parameters can lead to unexpected results.\n\nSometimes, high macro security settings can prevent VBA scripts from running correctly. Check your macro security settings to ensure they’re not too restrictive.\n\nOther Excel articles you may also like:\n• What is VBA in Excel?\n• How to Delete Entire Row in Excel Using VBA\n• How to Combine Duplicate Rows and Sum the Values in Excel"
    },
    {
        "link": "https://reddit.com/r/vba/comments/nuio9h/vba_best_practices_cheat_sheet",
        "document": "Next week I will be teaching a VBA course. I am self taught, so now I'm kinda nervous my way of doing stuff is not \"best practices.\" Or honestly, that there are just better ways of doing stuff. Like, I know I'll teach coding logic: If statements, For each, do while, etc... you know what I mean. That's the easy part (to teach) . Now, specifically my code... like 90% of everything I do is copy paste from here or stackoverflow and then edit it to serve my purpose.\n\nAny advice on how to make my course a success? And where can I find like a nice \"Best practices\" or \"This is what vba should look like\" article/sheet/whatever."
    },
    {
        "link": "https://medium.com/@hector-martingano/good-practices-for-excel-vba-abb3fd518da1",
        "document": "While describing some VBA code I wrote, I realized it would save me time in the long run if I explained my general approach to writing VBA code in Excel. That is a discussion on its own right, and since saving time is one reason to write code, it is also a good reason to write this note.\n\nShould you use VBA?\n\nVBA is not popular. The mere mention of code written for Excel makes some people cringe. Still, it is a powerful companion to Excel and you will be better off knowing how to use it well.\n\nIt does not have the range of libraries that exist for Python, but with VBA in Office you can access the object libraries of Excel, Word, Access, PowerPoint, and Outlook with their properties, methods, and events.\n\nNeed a plot? You can use Excel plotting functionality. Need to create a report or a presentation? You can create a Word document or a PowerPoint presentation from Excel, with the results and plots you have. Need to handle more data than Excel can hold? You can create an Access database to write, read, and query results. You can define your own objects if you need it, or you can just add a reference to other object libraries to benefit from them. You can find code on the web for a variety of problems, adapt code from Visual Basic, or other flavours of BASIC.\n\nIt can handle a wide range of problems, e.g. from making tedious Excel tasks more efficient to simple numerical simulation models — the United States Department of Energy had back in the day a black oil reservoir simulation program developed in Excel (see https://netl.doe.gov/node/7530).\n\nWhy is VBA so unpopular?\n\nMy take is that having VBA in Office favours the proliferation of undocumented code, just plain poor code (generated by the macro recorder!), and unhealthy dependencies between your code and the workbook it lives in. Dealing with an undocumented spreadsheet is difficult, and it becomes even more so when there’s code to navigate.\n\nVBA itself isn’t the problem; it’s the rushed way it’s often used — speaking from my own experience. When coding is not your day job, getting things done is not about having good code, it’s about delivering the results expected from you. Then, if you can automate or speed up something, and you cannot see that specific task repeating, there is no incentive to write anything other than the bare minimum code. The code could be better, but we are trying to get the right balance by spending time on something that is not our core job, to have more time to do our core job — illustrated by the cartoon below (from https://xkcd.com/1205/).\n\nYour boss will not check how elegant your code is. They want results.\n\nTips to better your code\n\nDespite your efforts, now and then you may run into your past work again and wish you had spent a little more time tidying it up. Making the code easier to revisit allows for progressive improvement when facing the same problem again: that is where these tips intend to help.\n\nThese are some of what I consider good practices in using Excel VBA. I’m sure the list is not complete — it’s just what is coming to mind at this time -, and while I think it is a good to follow them, on occasions you may have good reasons to do the opposite. Here is the list:\n• Write good, clear code — do not use the macro recorder.\n• For reference, use the macro recorder.\n• Make your code independent of your worksheet design.\n• Do not keep your code and your data in the same workbook.\n\nThere are two ideas behind these:\n• Minimize the time spent coding to what your work justifies. This doesn’t mean you can’t go all out for fun or learning, but in the context of it not being your job, it’s important to take a practical approach.\n• Progress the quality of your code from a simple extension of Excel to something that can stand on its own. Excel can be a great tool for taking quick and dirty code and refining it as needed, progressing all the way into a prototype for a full-blown tool outside Excel.\n\nGood, clear code is the starting point. If you did not include comments in the code the first time around, do it the first time you need to review it.\n\nThere is plenty of good advice on the web about writing good code and documenting it. I recommend you read it. What I would like to highlight is:\n• Comment your code as if you were explaining it to someone else. Also, explain the inputs, outputs, and the implicit assumptions in the code you have written (or omitted writing).\n• Use clear variable names and a consistent convention. There are several conventions out there, but unless there is a standard agreed by the team or company you are working with, being consistent is more important than following a specific convention.\n• Declare all your variables — force yourself to do it using ‘Option Explicit’ — and do not introduce unnecessary variables. Assign variable types.\n• Keep your code as simple as possible.\n\nUse the macro recorder for reference\n\nThe macro recorder does not generate a program — it just captures your actions in Excel, as you set object properties, trigger object events, and use object methods.\n\nUse the macro recorder as a quick reference for the code needed to do simple tasks for which you don’t remember the syntax. This can be more effective than a web search.\n\nIf all you are looking to get out of your VBA code is to automate a repetitive manual action in Excel, the recorder may give you 80% to 100% of the solution you want — but that is a very limited application of Excel VBA, and often that code can be improved.\n\nLearn to use the debugging tools, and before you run any code you expect will take some time, test it first on a few cases to make sure it works as you intended. Add breakpoints, watch variables, and use step-by-step execution.\n\nHowever, be mindful that the code will not run in the same way when you are in debugging mode and when you are running it. This was recently a bit of a headache for me since I had code which ran fine in debugging mode but did not produce the same results when running. AI assistants didn’t help, and neither did a web search — but the macro recorder rescued me: it recorded an activate method, while in debugging the activation was happening ‘naturally’, as I had not included it in my code.\n\nMake your code independent of your worksheet design\n\nDoes your code write or read values from specific cells in your worksheets? Are you performing operations on specific rows or columns? Those are recipes for future headaches: if you change the layout of your spreadsheet, you will probably need to update your code to reflect it.\n\nThere are several ways to mitigate that. The easiest thing is to create names for the ranges you refer, and this can be done within your code or using Excel named ranges.\n\nE.g. if you have several references in your code to the range “A12”, you could declare a string constant with the value and a descriptive name, like “Input_1”. Then wherever your code read “A12”, replace that with “Input_1”. That improves readability and reduces the edits needed to setting the value of the constant to the new address.\n\nEven better than that, is to use Excel named ranges: Excel will update the address for the names as you move cells around and you will never need to worry about updating the code for that reason. For the example above, you would just refer to the range “Input_1”.\n\nSeparate your code from your data\n\nCan you imagine saving a complete copy of Excel with each of your workbooks? It’s nonsense — on a smaller scale, the same is true for your code. If you have multiple data files, you can end up having to update multiple files when you decide a change to the code is needed. That is inconvenient and error prone.\n\nIn the same way that a well-designed spreadsheet aims to keep the inputs and results separate from the calculations, well-designed VBA lives separate from your data and results.\n\nWithout some thought in advance, this can be one of the most time-consuming exercises to improve your code… but the good news is that it looks like you will use it a lot.\n\nAs an initial approach to address this problem, create a ‘wrapper’ around your existing code and workbook. That should allow you to populate the current inputs from other sources, and write results outside of the workbook too, with minimal or no changes to the way it is working at present.\n\nDo not re-invent the wheel. Excel gives you a lot of tools that will be much faster than something written in VBA. E.g. if you need to sort a list, you do not need to write a sorting algorithm, use Excel’s sort; if you need a plot, do not create it from scratch using code, build it before-hand using Excel and then just make your code copy the data to the region where the plot is looking for data; if you need an interface, instead of creating a form, putting the controls on it, and writing the code to make sure it all works together, you may get away with building it on an Excel worksheet.\n\nYou can take that further and have part of your calculations done in Excel — there is nothing to say that your code must be independent of calculations being done in Excel cells. It is not ideal, but it can help you write something quick and clear that still performs complex calculations. This has the advantage that it is easier to test your calculations in Excel than when debugging code. The potential disadvantage is that without comments describing how the code works together with the spreadsheet calculations, your solution may look more ‘obscure’ that if it was just pure code.\n\nAs 2024 begins, I’ve had mixed results using AI assistants, but I decided sharing my experience so far.\n\nI should point out I have only tested ChatGPT, Bing and Bard, and no paid versions (so, no ChatGPT 4). I prefer Bing, as it gives you links to sources that have informed the answer, but in all cases I have seen similar problems:\n• Variables declared that are not used.\n• Logic that can be improved.\n• Inclusion in the code of objects, methods or functions that do not exist.\n\nTo their merit, once you enquire the assistants about those issues, they apologize and give you an alternative… and so you iterate a few times until you see something that works, or you decide to take matters into your own neural network.\n\nOverall, I think the assistants have saved me some time. When I would have been writing some pseudo code, I already had a ‘draft’ code I could review or test. On occasions, the AI failed to deliver working code, and I started from scratch. Sometimes they have proposed different approaches to what I would have done, helping me learn something new.\n\nMy reasons to recommend their use would be two:\n• They allow you to focus on solving the problem. Since the assistant takes care of writing the code, which requires a shift in focus from the solution of the problem to syntax and variables and writing, you can pay more attention to getting the solution you want.\n• You gain experience interacting with the assistants. This will be useful, as we can expect that to happen more in the future."
    },
    {
        "link": "https://excelmacromastery.com/excel-vba-worksheet",
        "document": "The Complete Guide To The VBA Worksheet\n\n\n\n “The visionary starts with a clean sheet of paper, and re-imagines the world” – Malcolm Gladwell\n\n\n\n This post provides a complete guide to using the Excel VBA Worksheet in Excel VBA. If you want to know how to do something quickly then check out the quick guide to the VBA Worksheet below.\n\nIf you are new to VBA then this post is a great place to start. I like to break things down into simple terms and explain them in plain English without the jargon.\n\nYou can read through the post from start to finish as it is written in a logical order. If you prefer, you can use the table of contents below and go directly to the topic of your choice.\n\nThe following table gives a quick run down to the different worksheet methods.\n\nNote: I use Worksheets in the table below without specifying the workbook i.e.Worksheets rather than ThisWorkbook.Worksheets, wk.Worksheets etc. This is to make the examples clear and easy to read. You should always specify the workbook when using Worksheets. Otherwise the active workbook will be used by default.\n\nThe three most important elements of VBA are the Workbook, the Worksheet and Cells. Of all the code your write, 90% will involve one or all of them.\n\nThe most common use of the worksheet in VBA is for accessing its cells. You may use it to protect, hide, add, move or copy a worksheet. However, you will mainly use it to perform some action on one or more cells on the worksheet.\n\n\n\n \n\n Using Worksheets is more straightforward than using workbooks. With workbooks you may need to open them, find which folder they are in, check if they are in use and so on. With a worksheet, it either exists in the workbook or it doesn’t.\n\nIn VBA, each workbook has a collection of worksheets. There is an entry in this collection for each worksheet in the workbook. This collection is simply called Worksheets and is used in a very similar way to the Workbooks collection. To get access to a worksheet all you have to do is supply the name.\n\n\n\n \n\n The code below writes “Hello World” in Cell A1 of Sheet1, Sheet2 and Sheet3 of the current workbook.\n\n\n\n \n\n The Worksheets collection is always belong to a workbook. If we don’t specify the workbook then the active workbook is used by default.\n\nThe following examples show how to hide and unhide a worksheet\n\n\n\n \n\n If you want to prevent a user accessing the worksheet, you can make it “very hidden”. This means it can only be made visible by the code.\n\nAnother example of using the worksheet is when you want to protect it\n\nWhen you use Worksheets you may get the error:\n\n\n\n \n\n This means you tried to access a worksheet that doesn’t exist. This may happen for the following reasons\n• The worksheet name given to Worksheets is spelled incorrectly.\n• The name of the worksheet has changed.\n• The index was to large e.g. You used Worksheets(5) but there are only four worksheets\n• The wrong workbook is being used e.g. Workbooks(“book1.xlsx”).Worksheets(“Sheet1”) instead of Workbooks(“book3.xlsx”).Worksheets(“Sheet1”).\n\n\n\n \n\n If you still have issues then use one of the loops from Loop Through The Worksheets section to print the names of all worksheets the collection.\n\nUsing the Index to Access the Worksheet\n\nSo far we have been using the sheet name to access the sheet. The index refers to the sheet tab position in the workbook. As the position can easily be changed by the user it is not a good idea to use this.\n\n\n\n \n\n The following code shows examples of using the index\n\n\n\n \n\n In the example above, I used Debug.Print to print to the Immediate Window. To view this window select View->Immediate Window(or Ctrl G)\n\nUsing the Code Name of a Worksheet\n\nThe best method of accessing the worksheet is using the code name. Each worksheet has a sheet name and a code name. The sheet name is the name that appears in the worksheet tab in Excel.\n\nChanging the sheet name does not change the code name meaning that referencing a sheet by the code name is a good idea.\n\n\n\n \n\n If you look in the VBE property window you will see both names. In the image you can see that the code name is the name outside the parenthesis and the sheet name is in the parenthesis.\n\n\n\n \n\n \n\n You can change both the sheet name and the code name in the property window of the sheet(see image below).\n\n\n\n \n\n If your code refers to the code name then the user can change the name of the sheet and it will not affect your code. In the example below we reference the worksheet directly using the code name.\n\n\n\n \n\n This makes the code easy to read and safe from the user changing the sheet name.\n\nCode Name in other Workbooks\n\nThere is one drawback to using the code name. It can only refer to worksheets in the workbook that contains the code i.e. ThisWorkbook.\n\n\n\n \n\n However, we can use a simple function to find the code name of a worksheet in a different workbook.\n\n\n\n \n\n Using the above code means that if the user changes the name of the worksheet then your code will not be affected.\n\nThere is another way of getting the sheet name of an external workbook using the code name. You can use the VBProject element of that Workbook.\n\n\n\n \n\n You can see how to do this in the example below. I have included this for completeness only and I would recommend using the method in the previous example rather than this one.\n\nThe following is a quick summary of using the Code Name\n• The code name of the worksheet can be used directly in the code e.g. Sheet1.Range\n• The code name will still work if the worksheet name is changed.\n• The code name can only be used for worksheets in the same workbook as the code.\n• Anywhere you see ThisWorkbook.Worksheets(“sheetname”) you can replace it with the code name of the worksheet.\n• You can use the SheetFromCodeName function from above to get the code name of worksheets in other workbooks.\n\nThe ActiveSheet object refers to the worksheet that is currently active. You should only use ActiveSheet if you have a specific need to refer to the worksheet that is active.\n\nOtherwise you should specify the worksheet you are using.\n\nIf you use a worksheet method like Range and don’t mention the worksheet, it will use the active worksheet by default.\n\nDeclaring a worksheet object is useful for making your code neater and easier to read.\n\nThe next example shows code for updating ranges of cells. The first Sub does not declare a worksheet object. The second sub declares a worksheet object and the code is therefore much clearer.\n\n\n\n \n\n You could also use the With keyword with the worksheet object as the next example shows.\n\nWith all the different ways to access a worksheet, you may be feeling overwhelmed or confused. So in this section, I am going to break it down into simple terms\n\n\n\n \n\n 1. If you want to use whichever worksheet is currently active then use ActiveSheet.\n\n\n\n \n\n 2. If the worksheet is in the same workbook as the code then use the Code Name.\n\n\n\n \n\n 3. If the worksheet is in a different workbook then first get workbook and then get the worksheet.\n\n\n\n \n\n If you want to protect against the user changing the sheet name then use the SheetFromCodeName function from the Code Name section.\n\nThe examples in this section show you how to add a new worksheet to a workbook. If you do not supply any arguments to the Add function then the new worksheet will be placed before the active worksheet.\n\nWhen you add a Worksheet, it is created with a default name like “Sheet4”. If you want to change the name then you can easily do this using the Name property.\n\n\n\n \n\n The following example adds a new worksheet and changes the name to “Accounts”. If a worksheet with the name “Accounts” already exists then you will get an error.\n\n\n\n \n\n In the previous example, you are adding worksheets in relation to the active worksheet. You can also specify the exact position to place the worksheet.\n\n\n\n \n\n To do this you need to specify which worksheet the new one should be inserted before or after. The following code shows you how to do this.\n\nTo delete a worksheet you simply call the Delete member.\n\n\n\n \n\n Excel will display a warning message when you delete a worksheet. If you want to hide this message you can use the code below\n\n\n\n \n\n There are two issues to watch out for when it comes to deleting worksheets.\n\nIf you try to access the worksheet after deleting it you will get the “Subscript out of Range” error we saw in the Accessing the Worksheet section.\n\n\n\n \n\n The second issue is when you assign a worksheet variable. If you try to use this variable after the worksheet is deleted then you will get an Automation error like this\n\nIf you are using the Code Name of the worksheet rather than a variable, then this will cause Excel to crash rather than give the automation error.\n\n\n\n \n\n The following example shows how an automation errors occurs\n\nIf you assign the Worksheet variable to a valid worksheet it will work fine\n\nThe Worksheets member of Workbooks is a collection of worksheets belonging to a workbook. You can go through each sheet in the worksheets collection using a For Each Loop or a For Loop.\n\n\n\n \n\n The following example uses a For Each loop.\n\n\n\n \n\n The next example uses the standard For loop\n\n\n\n \n\n You have seen how to access all open workbooks and how to access all worksheets in ThisWorkbook. Lets take it one step further. Lets access all worksheets in all open workbooks.\n\nNote: If you use code like this to write to worksheets then back everything up first as you could end up writing the incorrect data to all the sheets.\n\nThe workbook has another collection similar to Worksheets called Sheets. This causes confusion at times among users. To explain this first you need to know about a sheet type that is a chart.\n\n\n\n \n\n It is possible in Excel to have a sheet that is a chart. To do this\n• Right click on the chart and select Move.\n• Select the first option which is “New Sheet” and click Ok.\n\n\n\n \n\n Now you have a workbook with sheets of type worksheet and one of type chart.\n• The Worksheets collection refers to all worksheets in a workbook. It does not include sheets of type chart.\n• The Sheets collection refers to all sheets belonging to a workbook including sheets of type chart.\n\n\n\n \n\n There are two code examples below. The first goes through all the Sheets in a workbook and prints the name of the sheet and type of sheet it is. The second example does the same with the Worksheets collection.\n\n\n\n \n\n To try out these examples you should add a Chart sheet to your workbook first so you will see the difference.\n\n\n\n \n\n If do not have chart sheets then using the Sheets collection is the same as using the Worksheets collection.\n\nThis concludes the post on the VBA Worksheet. I hope you found it useful.\n\nThe three most important elements of Excel VBA are Workbooks, Worksheets and Ranges and Cells. These elements will be used in almost everything you do. Understanding them will make you life much easier and make learning VBA much simpler.\n\nFree VBA Tutorial If you are new to VBA or you want to sharpen your existing VBA skills then why not try out the The Ultimate VBA Tutorial.\n\nRelated Training: Get full access to the Excel VBA training webinars and all the tutorials."
    },
    {
        "link": "https://stackoverflow.com/questions/44649929/vba-how-to-address-the-correct-workbook-when-giving-a-worksheet-as-an-argument",
        "document": "I have a question regarding the correct address of Workbooks in VBA, which I am fairly new to.\n\nHere is what I have done so far:\n\n I have written a sub that, amongst other things, creates a worksheet with the CodeName \"table10\".\n\nThen I defined a function to manipulate the contents of said sheet: this function\n\nexpects a worksheet argument. I call the function from another sub using the following line:\n\nNow, here is my issue:\n\n The above works flawlessly when the only open workbook is the one I want to manipulate with my function. However, when I have multiple open workbooks, the function will try to manipulate a different workbook, resulting in an error.\n\nI am quite certain that there must be a way to specify the workbook to be used, but I am unable to find it. That being said, there is another complication: The name of the workbook which I would like to manipulate is machine generated, so it always has a different name. This means that using an explicit reference to the same file name time and again is not an option.\n\nCould anybody help me resolve this?"
    },
    {
        "link": "https://mrexcel.com/board/threads/vba-structure-best-practices-and-code-review.1180615",
        "document": ""
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/instr-function",
        "document": "Returns a Variant (Long) specifying the position of the first occurrence of one string within another.\n\nInterested in developing solutions that extend the Office experience across multiple platforms? Check out the new Office Add-ins model. Office Add-ins have a small footprint compared to VSTO Add-ins and solutions, and you can build them by using almost any web programming technology, such as HTML5, JavaScript, CSS3, and XML.\n\nThe InStr function syntax has these arguments:\n\nThe compare argument settings are as follows.\n\nThe InStrB function is used with byte data contained in a string. Instead of returning the character position of the first occurrence of one string within another, InStrB returns the byte position.\n\nThis example uses the InStr function to return the position of the first occurrence of one string within another.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/instr-function-85d3392c-3b1c-4232-bb18-77cd0cb8a55b",
        "document": "The InStrB function is used with byte data contained in a string. Instead of returning the character position of the first occurrence of one string within another, InStrB returns the byte position.\n\nTip: The Expression Builder has IntelliSense, so you can see what arguments your expression requires.\n\nOptional. Specifies the type of string comparison. If compare is Null, an error occurs. If compare is omitted, the Option Compare setting determines the type of comparison. Specify a valid LCID (LocaleID) to use locale-specific rules in the comparison.\n\nOptional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. If start contains Null, an error occurs. The start argument is required if compare is specified.\n\nReturns a Variant ( Long ) specifying the position of the first occurrence of one string within another.\n\nUse the InStr function in an expression You can use InStr wherever you can use expressions. For example, if you want to find the position of the first period (.) in a field that contains IP addresses (named IPAddress), you can use InStr to find it, like so:\n\nThe InStr function examines each value in the IPAddress field and returns the position of the first period. Hence, if the first portion of the IP address is 10., the function returns the value 3.\n\nYou can then use other functions, operating on the output of the InStr function, to extract the portion of the IP address that precedes the first period, like so:\n\nIn this example, InStr(1,[IPAddress],\".\") returns the position of the first period. Subtracting 1 determines how many characters precede the first period, in this case, 2. The Left function then extracts that many characters from the left portion of the IPAddress field, returning the value 10.\n\nThis example uses the InStr function to return the position of the first occurrence of one string within another."
    },
    {
        "link": "https://stackoverflow.com/questions/45215786/best-way-to-compare-strings-in-vba",
        "document": "I've been using VBA for the past month now (for my job) and since I've begun using this language/script, there have been several occurances where I have issues comparing strings.. the ways that I've compared strings so far are:\n\nSometimes, before using one of these comparison methods, I'll first apply UCase(str1), or even UCase(Trim(str1)). From my experience so far though, comparing strings in VBA seems to be a rather fickle thing, because I feel like I get inconsistent results.\n\nQUESTION: What is the best procedure for comparing two strings in VBA?\n\nFor example: Imagine there are two lists.. one list contains laptop models, the other contains parts numbers. The goal is to associate all part numbers with a model. My results produce only partial associations, meaning that if I have 10 part numbers that should associate with a model, only 5 or 6 actually are. I then take the strings that don't properly compare and compare again in seperate code, and will then get the correct result. This kind of behavior has been somewhat consistent throughout my use of VBA, and is where the \"feeling\" comes from."
    },
    {
        "link": "https://trumpexcel.com/excel-vba-instr",
        "document": "Yesterday, I got an email from one of my readers – June.\n\nShe wanted to know how to apply bold font format to a specific part of a string within a cell. For example, apply the bold format to only the word ‘Hello’ from ‘Hello World’.\n\nAnd she wanted to do this for hundreds of cell at once.\n\nSince there is no inbuilt functionality in Excel that can do that, I created a simple macro that uses the Excel VBA InStr function (you will see how to do this in Example 4 in this tutorial).\n\nBut first, let’s see how the Excel VBA InStr function works!\n\nIn this tutorial, I will explain the usage of InStr function in Excel VBA and see some practical examples where it can be used.\n\nInStr function finds the position of a specified substring within the string and returns the first position of its occurrence.\n\nFor example, if you want to find the position of ‘x’ in ‘Excel’, using the Excel VBA InStr function would return 2.\n• [Start] – (optional argument) this is an integer value that tells the InStr function the starting position from which it should start looking. For example, if I want the search to start from the beginning, I will enter the value as 1. If I want it to begin with the third character onwards, I will use 3. If omitted, the default value of 1 is taken.\n• String1 – This is the main string (or the parent string) in which you want to search. For example, if you’re looking for the position of x in Excel, String 1 would be “Excel”.\n• String2 – This is the substring that you are searching for. For example, if you’re looking for the position of x in Excel, String2 would be x.\n• [Compare] – (optional argument) You can specify one the following three values for [compare] argument:\n• vbBinaryCompare – This would do a character by character comparison. For example, if you’re looking for ‘x’ in ‘Excel’, it will return 2, but if you’re looking for ‘X’ in ‘Excel’, it will return 0 as X is in upper case. You can also use 0 instead of vbBinaryCompare. If the [Compare] argument is omitted, this is the taken as default.\n• vbTextCompare – This would do a textual comparison. For example, if you look for ‘x’ or ‘X’ in Excel, it would return 2 in both the cases. This argument ignores the letter case. You can also use 1 instead of vbTextCompare.\n• vbDatabaseCompare – This is used for Microsoft Access only. It uses the information in the database to perform the comparison. You can also use 2 instead of vbDatabaseCompare.\n• InStr is a VBA function and not a worksheet function. This means that you can not use it within the worksheet.\n• If String2 (which is the substring whose position you’re looking for) is empty, the function would return the value of the [Start] argument.\n• If the InStr function can not find the substring within the main string, it would return 0.\n\nNow let’s have a look at some example of using the Excel VBA InStr Function\n\nExample 1 – Finding the Position from the beginning\n\nIn this example, I will use the InStr function to find the position of ‘V’ in ‘Excel VBA’ from the beginning.\n\nThe code for this would be:\n\nWhen you run this code, it will show a message box with the value 7, which is the position of ‘V’ in the string ‘Excel VBA’.\n\nExample 2 – Finding the Position from the beginning of the Second Word\n\nSuppose, I want to find the position of ‘the’ in the sentence – ‘The quick brown fox jumps over the lazy dog’\n\nHowever, I want the search to begin with the second word onwards.\n\nIn this case, we need to change the [Start] argument to make sure it specifies the position from where the second word starts.\n\nHere is the code that will do this:\n\nThis code will show the message box with the value 32 as we have specified the starting position as 4. Hence it ignores the first ‘The’ and finds the second ‘the’ in the sentence.\n\nIf you want to make it more dynamic, you can enhance the code so that it automatically ignore the first word.\n\nHere is the enhanced code that will do this:\n\nThis code first finds the position of a space character and stores it in the variable StartingPosition.\n\nIt then uses this variable as the starting position to look for the word ‘the’.\n\nHence it returns 32 (which is the starting position of ‘the’ after the first word).\n\nExample 3 – Finding the Position of @ in Email Address\n\nYou can easily create a custom function to find the position of @ in an email address using the Excel VBA InStr function.\n\nHere is the code to create the custom function:\n\nNow you can use this custom function as any other worksheet function. It will take a cell reference as input and give you the position of @ in it.\n\nSimilarly, you can create a custom function to find the position of any substring within the main string.\n\nExample 4 – Highlighting a Part of String within Cells\n\nThis is the query that was asked by June (my reader who also inspired me to write this tutorial).\n\nHere is a sample data in the format June sent me:\n\nHer query was to make the numbers outside the bracket bold.\n\nHere is the code I created that does this:\n\nThe above code uses the For Each loop to go through each of the cells in the selection. It identifies the position of the opening bracket character using the InStr function. It then changes the font of the text before the bracket.\n\nTo use this code, you need to copy and paste in a module in the VB editor.\n\nOnce you have copy pasted the code, select the cells in which you want to do this formatting and run the macro (as shown below).\n\nYou May Also Like the following Excel VBA Tutorials:\n• A Beginner’s Guide to Using For Next Loop in Excel VBA.\n• How to Create and Use an Excel Add-in.\n• How to Combine Multiple Workbooks into One Excel Workbook.\n• How to Count Colored Cells in Excel.\n• How to Sort Data in Excel using VBA (A Step-by-Step Guide)"
    },
    {
        "link": "https://stackoverflow.com/questions/40552684/instr-or-find-function-in-vba",
        "document": "I am stuck with an issue. I've done my research and found out that I can use InSTR function to search for a specific character in a string.\n\nWhat I am trying to do is get a file name extracted from a file path.\n\nThe issue here is, it returns the first occurrence of slash, where as I want to get the last occurrence of the slash (so that I can use a 'right' function wrapped around the above code to capture the file name)\n\nAny help is appreciated on how to get the last slash in a string!"
    }
]