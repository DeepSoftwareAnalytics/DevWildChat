[
    {
        "link": "https://element-plus.org/en-US/component/table",
        "document": "Display multiple data with similar format. You can sort, filter, compare your data in a table.\n\nBasic table is just for data display.\n\nStriped table makes it easier to distinguish different rows.\n\nYou can highlight your table content to distinguish between \"success, information, warning, danger\" and other states.\n\nWhen the content is too long, it will break into multiple lines, you can use to keep it in one line.\n\nWhen there are too many rows, you can use a fixed header.\n\nWhen there are too many columns, you can fix some of them.\n\nWhen you have huge chunks of data to put in a table, you can fix the header and columns at the same time.\n\nWhen the the data is dynamically changed, you might want the table to have a maximum height rather than a fixed height and to show the scroll bar if needed.\n\nWhen the data structure is complex, you can use group header to show the data hierarchy.\n\nYou can also select multiple rows.\n\nAfter 2.8.3, supports the third parameter to determine whether to ignore the selectable attribute.\n\nSort the data to find or compare data quickly.\n\nCustomize table column so it can be integrated with other components.\n\nCustomize table header so it can be even more customized.\n\nWhen the row content is too long and you do not want to display the horizontal scroll bar, you can use the expandable row feature.\n\nAfter 2.9.7, is added to control whether to preserve expanded row content in DOM when collapsed.\n\nFor table of numbers, you can add an extra row at the table footer displaying each column's sum.\n\nConfiguring rowspan and colspan allows you to merge cells\n\nYou can customize row index in columns.\n\nThe table-layout property sets the algorithm used to lay out table cells, rows, and columns.\n\nYou can use to customize the tooltip content.\n\nHow to use image preview in the table? ​\n\nWhy column is not rendered when use DOM templates? ​\n\nThis is because the HTML spec only allows a few specific elements to omit closing tags, the most common being and . For all other elements, if you omit the closing tag, the native HTML parser will think you never terminated the opening tag\n\nFor more details please refer to vue docs"
    },
    {
        "link": "https://stackoverflow.com/questions/47665691/element-ui-table-with-nested-data-how-to-loop-a-property",
        "document": "I'm using last version of and whose documentation can be found here.\n\nI want to display a table containing some information about and people for a given and\n\nI do not manage to display the and for each and for each .\n\nThe main problem is how to loop through each room"
    },
    {
        "link": "https://stackoverflow.com/questions/54778338/element-ui-table-with-dynamic-columns",
        "document": "I'm looking for an example of using the Element UI table component without having to hard code all the columns. All the examples I have seen, including the official Element UI table docs show each and every column specified in the template.\n\nI'm trying to do something like this. In my old table component, this gives me all the columns and my extra end column with a button.\n\nIn contrast, the Element UI Table examples all use multiple repeated tags. Due to loading data with differing columns at runtime, I can't use this approach.\n\nI'm a beginner and struggling to understand how to accomplish my goal with the el-table."
    },
    {
        "link": "https://github.com/ElemeFE/element/issues/8597",
        "document": "Is it possible to get nested data in prop for table column?\n\n For example I get json like this:\n\nWhen I set for table column I get it in table but when I set I get error in console 'Cannot read property 'name' of null'"
    },
    {
        "link": "https://github.com/element-plus/element-plus/blob/dev/docs/en-US/component/table.md",
        "document": "Display multiple data with similar format. You can sort, filter, compare your data in a table.\n\nBasic table is just for data display.\n\n:::demo After setting attribute of with an object array, you can use (corresponding to a key of the object in array) in to insert data to table columns, and set the attribute to define the column name. You can also use the attribute to define the width of columns.\n\nStriped table makes it easier to distinguish different rows.\n\n:::demo Attribute accepts a . If , table will be striped.\n\n:::demo By default, Table has no vertical border. If you need it, you can set attribute to .\n\nYou can highlight your table content to distinguish between \"success, information, warning, danger\" and other states.\n\n:::demo Use in to add custom classes to a certain row. Then you can style it with custom classes.\n\nWhen the content is too long, it will break into multiple lines, you can use to keep it in one line.\n\n:::demo Attribute , which accepts a value. When set , the extra content will show in tooltip when hover on the cell.\n\nWhen there are too many rows, you can use a fixed header.\n\n:::demo By setting the attribute of , you can fix the table header without any other codes.\n\nWhen there are too many columns, you can fix some of them.\n\n:::demo Attribute is used in , it accepts a . If , the column will be fixed at left. It also accepts two string literals: 'left' and 'right', both indicating that the column will be fixed at corresponding direction.\n\nWhen you have huge chunks of data to put in a table, you can fix the header and columns at the same time.\n\n:::demo Fix columns and header at the same time by combining the above two examples.\n\nWhen the the data is dynamically changed, you might want the table to have a maximum height rather than a fixed height and to show the scroll bar if needed.\n\n:::demo By setting the attribute of , you can fix the table header. The table body scrolls only if the height of the rows exceeds the max height value.\n\nWhen the data structure is complex, you can use group header to show the data hierarchy.\n\n:::demo Only need to place el-table-column inside a el-table-column, you can achieve group header.\n\n:::demo The attribute of the group header is determined by the outermost\n\n:::demo Table supports single row selection. You can activate it by adding the attribute. An event called will be triggered when row selection changes, and its parameters are the rows after and before this change: and . If you need to display row index, you can add a new with its attribute assigned to , and you will see the index starting from 1.\n\nYou can also select multiple rows.\n\nAfter ^(2.8.3), supports the third parameter to determine whether to ignore the selectable attribute.\n\n:::demo Activating multiple selection is easy: simply add an with its set to .\n\nSort the data to find or compare data quickly.\n\n:::demo Set attribute in a certain column to sort the data based on this column. It accepts with a default value . Set table attribute to determine default sort column and order. To apply your own sorting rules, use or . If you need remote sorting from backend, set to , and listen to the event on Table. In the event handler, you have access to the sorting column and sorting order so that you can fetch sorted table data from API. In this example we use another attribute named to format the value of certain columns. It accepts a function which has two parameters: and . You can handle it according to your own needs.\n\n:::demo Set attribute and in makes this column filterable. is an array, and is a function deciding which rows are displayed. It has three parameters: , and .\n\nCustomize table column so it can be integrated with other components.\n\n:::demo You have access to the following data: row, column, $index and store (state management of Table) by slot.\n\nCustomize table header so it can be even more customized.\n\n:::demo You can customize how the header looks by header slots.\n\nWhen the row content is too long and you do not want to display the horizontal scroll bar, you can use the expandable row feature.\n\nAfter ^(2.9.7), is added to control whether to preserve expanded row content in DOM when collapsed.\n\n:::demo Activate expandable row by adding type=\"expand\" and slot. The template for el-table-column will be rendered as the contents of the expanded row, and you can access the same attributes as when you are using in custom column templates.\n\n:::demo You can display tree structure data. When row contains the field, it is treated as nested data. For rendering nested data, the prop is required. Also, child row data can be loaded asynchronously. Set property of Table to true and the function . Specify attribute in row to determine which row contains children. Both and can be configured via .\n\n:::demo When is true, the selection state of parent and child nodes is no longer associated, that is, when the parent node is selected, its child nodes will not be selected; when is false, the selection state of parent and child nodes will be associated with the selection state of child nodes, that is, when the parent node is selected, all its child nodes will be selected.\n\nFor table of numbers, you can add an extra row at the table footer displaying each column's sum.\n\n:::demo You can add the summary row by setting to . By default, for the summary row, the first column does not sum anything up but always displays 'Sum' (you can configure the displayed text using ), while other columns sum every number in that column up and display them. You can of course define your own sum behaviour. To do so, pass a method to , which returns an array, and each element of the returned array will be displayed in the columns of the summary row, It can be a VNode or string. The second table of this example is a detailed demo.\n\nConfiguring rowspan and colspan allows you to merge cells\n\n:::demo Use the attribute to configure rowspan and colspan. It accepts a method, and passes an object to that method including current row , current column , current row index and current column index . The method should return an array of two numbers, the first number being and second . It can also return an object with and props.\n\nYou can customize row index in columns.\n\n:::demo To customize row indices, use attribute on with . If it is assigned to a number, all indices will have an offset of that number. It also accepts a method with each index (starting from ) as parameter, and the returned value will be displayed as index.\n\nThe table-layout property sets the algorithm used to lay out table cells, rows, and columns.\n\nYou can use to customize the tooltip content.\n\nThis is because the HTML spec only allows a few specific elements to omit closing tags, the most common being and . For all other elements, if you omit the closing tag, the native HTML parser will think you never terminated the opening tag\n\nFor more details please refer to vue docs"
    },
    {
        "link": "https://stackoverflow.com/questions/54778338/element-ui-table-with-dynamic-columns",
        "document": "I'm looking for an example of using the Element UI table component without having to hard code all the columns. All the examples I have seen, including the official Element UI table docs show each and every column specified in the template.\n\nI'm trying to do something like this. In my old table component, this gives me all the columns and my extra end column with a button.\n\nIn contrast, the Element UI Table examples all use multiple repeated tags. Due to loading data with differing columns at runtime, I can't use this approach.\n\nI'm a beginner and struggling to understand how to accomplish my goal with the el-table."
    },
    {
        "link": "https://element-plus.org/en-US/component/table",
        "document": "Display multiple data with similar format. You can sort, filter, compare your data in a table.\n\nBasic table is just for data display.\n\nStriped table makes it easier to distinguish different rows.\n\nYou can highlight your table content to distinguish between \"success, information, warning, danger\" and other states.\n\nWhen the content is too long, it will break into multiple lines, you can use to keep it in one line.\n\nWhen there are too many rows, you can use a fixed header.\n\nWhen there are too many columns, you can fix some of them.\n\nWhen you have huge chunks of data to put in a table, you can fix the header and columns at the same time.\n\nWhen the the data is dynamically changed, you might want the table to have a maximum height rather than a fixed height and to show the scroll bar if needed.\n\nWhen the data structure is complex, you can use group header to show the data hierarchy.\n\nYou can also select multiple rows.\n\nAfter 2.8.3, supports the third parameter to determine whether to ignore the selectable attribute.\n\nSort the data to find or compare data quickly.\n\nCustomize table column so it can be integrated with other components.\n\nCustomize table header so it can be even more customized.\n\nWhen the row content is too long and you do not want to display the horizontal scroll bar, you can use the expandable row feature.\n\nAfter 2.9.7, is added to control whether to preserve expanded row content in DOM when collapsed.\n\nFor table of numbers, you can add an extra row at the table footer displaying each column's sum.\n\nConfiguring rowspan and colspan allows you to merge cells\n\nYou can customize row index in columns.\n\nThe table-layout property sets the algorithm used to lay out table cells, rows, and columns.\n\nYou can use to customize the tooltip content.\n\nHow to use image preview in the table? ​\n\nWhy column is not rendered when use DOM templates? ​\n\nThis is because the HTML spec only allows a few specific elements to omit closing tags, the most common being and . For all other elements, if you omit the closing tag, the native HTML parser will think you never terminated the opening tag\n\nFor more details please refer to vue docs"
    },
    {
        "link": "https://medium.com/better-programming/improving-performance-in-a-hierarchical-sql-table-structure-with-column-propagation-c57754f9c257",
        "document": "This article will show how column propagation can represent an easy approach to improving query performance when dealing with a hierarchical data structure.\n\nWe’ll do this with a real-world scenario based on a data-driven project involving a live data website developed for a startup operating in the sports industry. You’ll learn everything you need to know about column propagation as a solution to the performance issues inherent in hierarchical SQL table structures. Let’s begin.\n\nMy team and I recently worked on a website for soccer fans that had millions of pages. The idea of that website is to be the definitive resource for soccer supporters, especially when it comes to betting. The database and application architecture is not particularly complex. This is because a scheduler takes care of periodically recalculating complex data and storing it in tables so that the queries will not have to involve SQL aggregations. So, the real challenges lie in…"
    },
    {
        "link": "https://stackoverflow.com/questions/58292179/vue-element-ui-el-table-column-formatter-how-to-display-html",
        "document": "Ok, after a few hours of brainstorming I found pretty nice solution. I'm putting it here for others - I hope this helps somebody.\n\nValue displayed in custom column can be:\n• None formatted string (safe, without any html or components, via original formatter)\n\nIn order to achieve this, I had to create custom formatter components, which I put in folder i.e. /TableFormatters/\n\nFor this purpose, there is simple functional component DatetimeFormatter that display date-time with icon.\n\nNow it's time to define :\n\nThis works like a charm. What's going on here with formatter? First we check if the formatter is set as a . If so, the native formatter takes the control, because will not be created. Otherwise formatter component will be created (via attribute). However, it there is no formatter, the plain value for a row will be shown."
    },
    {
        "link": "https://stamen.com/data-hierarchy-best-practices-to-elevate-your-data-visualizations",
        "document": "At its very core, data visualization has two main components: representation and interaction.\n\nRepresentation (or how data looks) is the process of rendering data on a screen, after analyzing the data, transforming the data, and determining the appropriate method of mapping that data to visuals. Interaction (or how data behaves) involves the dialogue between your data visualization and the users who explore it to uncover insights or data stories. How you organize your information shapes both experiences.\n\nInformation hierarchy determines how data is grouped and aggregated. In design, and especially in data visualization, all aspects of a dataset cannot be equally emphasized. In order for any element to stand out, others must fade into the background. Effective data visualization often begins with gaining an understanding of the proper hierarchy (or hierarchies) to surface in your visualization and giving your users an appropriate interface for navigating that hierarchy.\n\nHowever, knowing where to begin when experimenting with various hierarchical structures in your datasets and visualizations can be overwhelming.\n\nCollaborating with a data visualization design studio elevates the power and possibilities of your project with four design-informed data hierarchy best practices.\n\n1. Look Beyond the Obvious\n\nFor example, suppose you want to create a data visualization examining peoples’ jobs. You might show how many people are cooks in restaurants, or you might group that population under the umbrella of food preparation or more generally, food. Each time you zoom out or in, you’re affecting how the data looks and the story you’re telling.\n\nIf you’re working with spatial data, there are similar questions to consider: Are you looking at the data for each individual? By building? By census tract? By city? By country? Every variation alters the way your data is viewed and impacts the way your users will interact with it.\n\nA data visualization design studio works with you during the discovery phase of your project to determine proper and compelling ways to group your data. These design technologists are well-versed in reaching beyond the obvious hierarchical conclusions and asking what if?. What if your data is grouped by population? What if it is grouped by usage? What if it is grouped spatially? What if it is grouped by time? This enthusiasm for experimentation empowers you to dig deep and explore all your data’s potential.\n\n2. Design From the Data, Not For the Data\n\nNot only can a data visualization design studio help you consider the most effective method of grouping your data, but they can also conceptualize how to design an intuitive user interface from your datasets.\n\nDesigning from the data, not for the data, is a critical data visualization practice. Whether or not you’ve already identified a clear hierarchical structure for your dataset, it’s a common misconception to assume you immediately know what visualization you want to render your project in for users. Maybe you’ve seen a compelling map or chart somewhere else and believe you want to visualize your data the same way. But beware: Approaching your project from this perspective inherently limits the possibilities you might uncover through more exploration.\n\nThere’s not a “one size fits all” solution to designing from datasets. What works in rendering a specific form of visualization for one dataset may not work for another. The levels of information in any dataset can be skewed in particular ways that inform different visualization forms and user interfaces. What is a compelling representation for one dataset can quickly become a misleading representation for another. For example, you may think you want to render data about four different countries on a world map. However, doing so would inadvertently highlight the 191 countries for which you do not have data.\n\nAn experienced data visualization design studio understands the variety of forms a visualization can take. They can help you consider the most effective method of grouping your data and match that to a user interface appropriate for your visualization. Better still, they can craft visualization prototypes that allow you to really see your data visualization interfaces and experience how others will see and use them.\n\n3. Play With Your Data Hierarchies Through Prototyping\n\nFor example, when Berggruen Institute came to Stamen intending to bring a fascinating global governance index dataset to life, they knew they wanted to tell rich and insightful stories about governance. Still, they had only seen their datasets appear in spreadsheets. In that form, the dataset, composed of 90 different score indicators from 38 countries gathered over six years, was multi-layered and complex, overwhelming and ineffective. The Berggruen team knew they had an important story to tell about the current global crisis of democracy, but how to surface that story in a way that users could understand and explore was a challenging matter.\n\nSometimes, there are so many layers of information in your data that the only way to create a successful design is to experiment with different forms and a variety of visual hierarchies.\n\nWorking with Stamen’s design team, the Berggruen Institute explored various ways to organize their data. As design technologists prototyped some preliminary, experimental models of how the institute’s global governance index could be visually rendered, the Berggruen team began to see how visualizing their complex datasets in simple, elegant ways communicated mounds of information in a single glance.\n\nIn the hands of experienced design technologists, data visualization prototyping is iterative and malleable. The Berggruen Institute could examine the form and function of different data hierarchies and their resulting user-interface structures. Allowed to play with their data in this way, they quickly found a powerful way to display their massive dataset and inspire users to explore what functions and capabilities of government matter most for citizens.\n\nWhen it comes to building a compelling user interface for your data visualizations, a data visualization design studio knows that beauty and utility share equal footing.\n\nBy organizing complex data into clear and digestible groups, expert designers help make your data useful. They also recognize the importance of creating a UI that intrigues and delights users. A design team will work with you to create an experience that prevents user frustration and confusion, all by organizing the user interface to present the most important data information while successively revealing lower layers of information hierarchy.\n\nWell-designed data visualizations empower people to have more informed conversations about everything — from energy benchmarking to fiber optic cable vibrations to world immunization reports, and much more.\n\nKnowing how to effectively hierarchize your data makes it insightful and actionable. An expert data visualization studio will dig deep into your datasets to find the stories in your numbers and deliver uncommon creative experiences that delight your users."
    }
]