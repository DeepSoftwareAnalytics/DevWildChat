[
    {
        "link": "https://php.net/manual/en/language.types.array.php",
        "document": "An array in PHP is actually an ordered map. A map is a type that associates values to keys. This type is optimized for several different uses; it can be treated as an array, list (vector), hash table (an implementation of a map), dictionary, collection, stack, queue, and probably more. As array values can be other arrays, trees and multidimensional arrays are also possible.\n\nExplanation of those data structures is beyond the scope of this manual, but at least one example is provided for each of them. For more information, look towards the considerable literature that exists about this broad topic.\n\nAn array can be created using the array() language construct. It takes any number of comma-separated pairs as arguments. The comma after the last array element is optional and can be omitted. This is usually done for single-line arrays, i.e. is preferred over . For multi-line arrays on the other hand the trailing comma is commonly used, as it allows easier addition of new elements at the end. The key can either be an int or a string. The value can be of any type. Additionally the following key casts will occur:\n• s containing valid decimal s, unless the number is preceded by a sign, will be cast to the type. E.g. the key will actually be stored under . On the other hand will not be cast, as it isn't a valid decimal integer. s containing valid decimals, unless the number is preceded by asign, will be cast to thetype. E.g. the keywill actually be stored under. On the other handwill not be cast, as it isn't a valid decimal integer.\n• s are also cast to s, which means that the fractional part will be truncated. E.g. the key will actually be stored under . s are also cast tos, which means that the fractional part will be truncated. E.g. the keywill actually be stored under\n• s are cast to s, too, i.e. the key will actually be stored under and the key under . s are cast tos, too, i.e. the keywill actually be stored underand the keyunder\n• will be cast to the empty string, i.e. the key will actually be stored under . will be cast to the empty string, i.e. the keywill actually be stored under\n• s and s can not be used as keys. Doing so will result in a warning: . s ands can not be used as keys. Doing so will result in a warning: If multiple elements in the array declaration use the same key, only the last one will be used as all others are overwritten. Example #2 Type Casting and Overwriting example The above example will output: As all the keys in the above example are cast to , the value will be overwritten on every new element and the last assigned value is the only one left over. PHP arrays can contain int and string keys at the same time as PHP does not distinguish between indexed and associative arrays. The above example will output: The key is optional. If it is not specified, PHP will use the increment of the largest previously used int key. The above example will output: It is possible to specify the key only for some elements and leave it out for others: Example #5 Keys not on all elements The above example will output: As you can see the last value was assigned the key . This is because the largest integer key before that was . Example #6 Complex Type Casting and Overwriting example This example includes all variations of type casting of keys and overwriting of elements. // the value \"a\" will be overwritten by \"b\"\n\n // the value \"b\" will be overwritten by \"c\"\n\n // as this is not an integer string it will NOT override the key for 1\n\n // as this is not an integer string it will NOT override the key for 1\n\n // the value \"c\" will be overwritten by \"g\"\n\n // the value \"i\" will be overwritten by \"j\"\n\n // value \"k\" is assigned the key 2. This is because the largest integer key before that was 1\n\n // the value \"k\" will be overwritten by \"l\"\n\n The above example will output: When assigning a negative integer key , PHP will take care to assign the next key to . The above example will output: Warning Prior to PHP 8.3.0, assigning a negative integer key would assign the next key to , the previous example would therefore output: Array elements can be accessed using the syntax. The above example will output: Prior to PHP 8.0.0, square brackets and curly braces could be used interchangeably for accessing array elements (e.g. and would both do the same thing in the example above). The curly brace syntax was deprecated as of PHP 7.4.0 and no longer supported as of PHP 8.0.0. Attempting to access an array key which has not been defined is the same as accessing any other undefined variable: an -level error message ( -level prior to PHP 8.0.0) will be issued, and the result will be . Array dereferencing a scalar value which is not a string yields . Prior to PHP 7.4.0, that did not issue an error message. As of PHP 7.4.0, this issues ; as of PHP 8.0.0, this issues . An existing array can be modified by explicitly setting values in it. This is done by assigning values to the array, specifying the key in brackets. The key can also be omitted, resulting in an empty pair of brackets ( ). $arr[ ] = ; $arr[] = ; // may be an or // may be any value of any type If doesn't exist yet or is set to or , it will be created, so this is also an alternative way to create an array. This practice is however discouraged because if already contains some value (e.g. string from request variable) then this value will stay in the place and may actually stand for string access operator. It is always better to initialize a variable by a direct assignment. Note: As of PHP 7.1.0, applying the empty index operator on a string throws a fatal error. Formerly, the string was silently converted to an array. Note: As of PHP 8.1.0, creating a new array from value is deprecated. Creating a new array from and undefined values is still allowed. To change a certain value, assign a new value to that element using its key. To remove a key/value pair, call the unset() function on it. // This is the same as $arr[13] = 56;\n\n // at this point of the script\n\n\n\n // This adds a new element to\n\n // the array with key \"x\"\n\n\n\n // This removes the element from the array\n\n\n\n // This deletes the whole array\n\n As mentioned above, if no key is specified, the maximum of the existing int indices is taken, and the new key will be that maximum value plus 1 (but at least 0). If no int indices exist yet, the key will be (zero). Note that the maximum integer key used for this need not currently exist in the array. It need only have existed in the array at some time since the last time the array was re-indexed. The following example illustrates: // Now delete every item, but leave the array itself intact:\n\n // Append an item (note that the new key is 5, instead of 0).\n\n The above example will output: Arrays can be destructured using the (as of PHP 7.1.0) or list() language constructs. These constructs can be used to destructure an array into distinct variables. Array destructuring can be used in to destructure a multi-dimensional array while iterating over it. // logic here with $id and $name\n\n Array elements will be ignored if the variable is not provided. Array destructuring always starts at index . // Assign the element at index 2 to the variable $baz\n\n As of PHP 7.1.0, associative arrays can be destructured too. This also allows for easier selection of the right element in numerically indexed arrays as the index can be explicitly specified. // Assign the element at index 'baz' to the variable $three\n\n // Assign the element at index 2 to the variable $baz\n\n Array destructuring can be used for easy swapping of two variables. The spread operator ( ) is not supported in assignments. Attempting to access an array key which has not been defined is the same as accessing any other undefined variable: an -level error message ( -level prior to PHP 8.0.0) will be issued, and the result will be .\n\nAlways use quotes around a string literal array index. For example, is correct, while is not. But why? It is common to encounter this kind of syntax in old scripts: This is wrong, but it works. The reason is that this code has an undefined constant ( ) rather than a string ( - notice the quotes). It works because PHP automatically converts a bare string (an unquoted string which does not correspond to any known symbol) into a string which contains the bare string. For instance, if there is no defined constant named , then PHP will substitute in the string and use that. Warning The fallback to treat an undefined constant as bare string issues an error of level . This has been deprecated as of PHP 7.2.0, and issues an error of level . As of PHP 8.0.0, it has been removed and throws an Error exception. Note: This does not mean to always quote the key. Do not quote keys which are constants or variables, as this will prevent PHP from interpreting them. The above example will output: Checking 0: Notice: Undefined index: $i in /path/to/script.html on line 9 Bad: Good: 1 Notice: Undefined index: $i in /path/to/script.html on line 11 Bad: Good: 1 Checking 1: Notice: Undefined index: $i in /path/to/script.html on line 9 Bad: Good: 2 Notice: Undefined index: $i in /path/to/script.html on line 11 Bad: Good: 2 More examples to demonstrate this behaviour: // carrot\n\n\n\n// Incorrect. This works but also throws a PHP error of level E_NOTICE because\n\n// of an undefined constant named fruit\n\n//\n\n// Notice: Use of undefined constant fruit - assumed 'fruit' in...\n\n // apple\n\n\n\n// This defines a constant to demonstrate what's going on. The value 'veggie'\n\n// is assigned to a constant named fruit.\n\n // carrot\n\n\n\n// The following is okay, as it's inside a string. Constants are not looked for\n\n// within strings, so no E_NOTICE occurs here\n\n // Hello apple\n\n\n\n// With one exception: braces surrounding arrays within strings allows constants\n\n// to be interpreted\n\n // Hello apple\n\n\n\n// Concatenation is another option\n\n // This will not work, and will result in a parse error, such as:\n\n// Parse error: parse error, expecting T_STRING' or T_VARIABLE' or T_NUM_STRING'\n\n// This of course applies to using superglobals in strings as well\n\nprint \"Hello $arr['fruit']\";\n\nprint \"Hello $_GET['foo']\"; When error_reporting is set to show level errors (by setting it to , for example), such uses will become immediately visible. By default, error_reporting is set not to show notices. As stated in the syntax section, what's inside the square brackets (' ' and ' ') must be an expression. This means that code like this works: This is an example of using a function return value as the array index. PHP also knows about constants: \"This is just an informal notice\" Note that is also a valid identifier, just like in the first example. But the last example is in fact the same as writing: \"This is just an informal notice\" So why is it bad then? At some point in the future, the PHP team might want to add another constant or keyword, or a constant in other code may interfere. For example, it is already wrong to use the words and this way, since they are reserved keywords. Note: To reiterate, inside a double-quoted string, it's valid to not surround array indexes with quotes so is valid. See the above examples for details on why as well as the section on variable parsing in strings.\n\nFor any of the types int, float, string, bool and resource, converting a value to an array results in an array with a single element with index zero and the value of the scalar which was converted. In other words, is exactly the same as . If an object is converted to an array, the result is an array whose elements are the object's properties. The keys are the member variable names, with a few notable exceptions: integer properties are unaccessible; private variables have the class name prepended to the variable name; protected variables have a '*' prepended to the variable name. These prepended values have bytes on either side. Uninitialized typed properties are silently discarded. The above example will output: These can result in some unexpected behaviour: // This will become '\\0A\\0A'\n\n // This will become '\\0B\\0A'\n\n The above example will output: The above will appear to have two keys named 'AA', although one of them is actually named '\\0A\\0A'. Converting to an array results in an empty array.\n\nThe array type in PHP is very versatile. Here are some examples: // After the above code is executed, $a will be the array\n\n// array('color' => 'red', 'taste' => 'sweet', 'shape' => 'round',\n\n// 'name' => 'apple', 0 => 4), and $b will be the array\n\n// array(0 => 'a', 1 => 'b', 2 => 'c'), or simply array('a', 'b', 'c').\n\n // this is the same as array(0 => 7, 1 => 8, ...)\n\n\n\n // the value 10 will be overwritten by 12\n\n The above example will output: Do you like red? Do you like blue? Do you like green? Do you like yellow? Changing the values of the array directly is possible by passing them by reference. Example #14 Changing element in the loop /* ensure that following writes to\n\n$color will not modify the last array element */\n\n\n\n The above example will output: The above example will output: // fill an array with all items from a directory\n\n Arrays are ordered. The order can be changed using various sorting functions. See the array functions section for more information. The count() function can be used to count the number of items in an array. Because the value of an array can be anything, it can also be another array. This enables the creation of recursive and multi-dimensional arrays. // Some examples to address values in the array above\n\n Array assignment always involves value copying. Use the reference operator to copy an array by reference. // $arr2 is changed,\n\n // $arr1 is still array(2, 3)\n\n\n\n // now $arr1 and $arr3 are the same"
    },
    {
        "link": "https://w3schools.com/php/php_arrays_associative.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://stackoverflow.com/questions/2713710/comment-associative-array-in-php-documentor",
        "document": "I use several associative arrays in my PHP application and I'm using PHP documentor to comment my sources. I never really did specify comments for the arrays in an array, but now I need to do that and don't know how.\n\nHow do I comment this array in the correct way for and comments? I could do this like this, but I don't know if this is correct:\n\nBut how to do this for the part?"
    },
    {
        "link": "https://php.net/manual/en/ref.array.php",
        "document": "permanovd at gmail dot com ¶ A simple trick that can help you to guess what diff/intersect or sort function does by name.\n\n\n\n[suffix] assoc - additional index check. Compares both value and index.\n\n\n\nExample: array_diff_assoc, array_intersect_assoc.\n\n\n\n[suffix] key - index only check. Ignores value of array, compares only indexes.\n\n\n\nExample: array_diff_key, array_intersect_key.\n\n\n\n[suffix] **empty** - no \"key\" or \"assoc\" word in suffix. Compares values only. Ignores indexes of array.\n\n\n\nExample: array_diff, array_intersect.\n\n\n\n[prefix] u - will do comparison with user defined function. Letter u can be used twice in some functions (like array_udiff_uassoc), this means that you have to use 2 functions (one for value, one for index).\n\n\n\nExample: array_udiff_uassoc, array_uintersect_assoc.\n\n\n\nThis also works with array sort functions:\n\n\n\n[prefix] a - associative. Will preserve keys.\n\n\n\nExample: arsort, asort.\n\n\n\n[prefix] k - key sort. Will sort array by keys.\n\n\n\nExample: uksort, ksort.\n\n\n\n[prefix] r - reverse. Will sort array in reverse order.\n\n\n\nExample: rsort, krsort.\n\n\n\n[prefix] u - sort by user defined function (same as for diff/intersect). \n\n\n\nExample: usort, uasort.\n\net2225zas14 at susu dot ru ¶ Be careful with type hints in callbacks when using array-traverse functions. In some cases, this may silently cause the data type of elements to change. \n\n\n\n\n\nThe above example will output (PHP version 8.3.6, error_reporting E_ALL):\n\n\n\n\n\nrenatonascto at gmail dot com ¶ Big arrays use a lot of memory possibly resulting in memory limit errors. You can reduce memory usage on your script by destroying them as soon as you´re done with them. I was able to get over a few megabytes of memory by simply destroying some variables I didn´t use anymore. \n\nYou can view the memory usage/gain by using the funcion memory_get_usage(). Hope this helps!\n\nindioeuropeo at driverop dot com ¶ I need to take an element from the Array and change its position within the Array by moving the rest of the elements as required.\n\nThis is the function that does it. The first parameter is the working Array. The second is the position of the element to move and the third is the position where to move the element.\n\nThe function returns the modified Array.\n\n Examples:\n\n Return:"
    },
    {
        "link": "https://geeksforgeeks.org/associative-arrays-in-php",
        "document": "Associative arrays are used to store key value pairs. For example, to store the marks of different subject of a student in an array, a numerically indexed array would not be the best choice. Instead, we could use the respective subject’s names as the keys in our associative array, and the value would be their respective marks gained.\n\nExample:\n\n Here array() function is used to create associative array.\n\nTraversing the Associative Array:\n\n We can traverse associative arrays using loops. We can loop through the associative array in two ways. First by using for loop and secondly by using foreach.\n\nExample:\n\n Here array_keys() function is used to find indices names given to them and count() function is used to count number of indices in associative arrays.\n\nPHP is a server-side scripting language designed specifically for web development. You can learn PHP from the ground up by following this PHP Tutorial and PHP Examples."
    },
    {
        "link": "https://stackoverflow.com/questions/2407807/object-oriented-php-best-practices",
        "document": "Say I have a class which represents a person, a variable within that class would be $name.\n\nPreviously, In my scripts I would create an instance of the object then set the name by just using:\n\nHowever, I was told this was not best practice? That I should have a function set_name() or something similar like this:\n\nIf in this example I want to insert a new \"person\" record into the db, how do I pass all the information about the person ie $name, $age, $address, $phone etc to the class in order to insert it, should I do:\n\nThen send it an array? Would this be best practice? or could someone please recommend best practice?"
    },
    {
        "link": "https://phptherightway.com",
        "document": "Disclaimer for newcomers: i18n and l10n are numeronyms, a kind of abbreviation where numbers are used to shorten words - in our case, internationalization becomes i18n and localization, l10n. First of all, we need to define those two similar concepts and other related things:\n• Internationalization is when you organize your code so it can be adapted to different languages or regions without refactorings. This action is usually done once - preferably, at the beginning of the project, or else you will probably need some huge changes in the source!\n• Localization happens when you adapt the interface (mainly) by translating contents, based on the i18n work done before. It usually is done every time a new language or region needs support and is updated when new interface pieces are added, as they need to be available in all supported languages.\n• Pluralization defines the rules required between distinct languages to interoperate strings containing numbers and counters. For instance, in English when you have only one item, it is singular, and anything different from that is called plural; plural in this language is indicated by adding an S after some words, and sometimes changes parts of it. In other languages, such as Russian or Serbian, there are two plural forms in addition to the singular - you may even find languages with a total of four, five or six forms, such as Slovenian, Irish or Arabic. The easiest way to internationalize PHP software is by using array files and using those strings in templates, such as . This way is, however, hardly recommended for serious projects, as it poses some maintenance issues along the road - some might appear in the very beginning, such as pluralization. So, please, don’t try this if your project will contain more than a couple of pages. The most classic way and often taken as reference for i18n and l10n is a Unix tool called . It dates back to 1995 and is still a complete implementation for translating software. It is easy enough to get running, while still sporting powerful supporting tools. It is about Gettext we will be talking here. Also, to help you not get messy over the command-line, we will be presenting a great GUI application that can be used to easily update your l10n source. There are common libraries used that support Gettext and other implementations of i18n. Some of them may seem easier to install or sport additional features or i18n file formats. In this document, we focus on the tools provided with the PHP core, but here we list others for completion:\n• aura/intl: Provides internationalization (I18N) tools, specifically package-oriented per-locale message translation. It uses array formats for messages. Does not provide a message extractor, but does provide advanced message formatting via the extension (including pluralized messages).\n• php-gettext/Gettext: Gettext support with an OO interface; includes improved helper functions, powerful extractors for several file formats (some of them not supported natively by the command), and can also export to other formats besides files. Can be useful if you need to integrate your translation files into other parts of the system, like a JavaScript interface.\n• symfony/translation: supports a lot of different formats, but recommends using verbose XLIFF’s. Doesn’t include helper functions nor a built-in extractor, but supports placeholders using internally.\n• laminas/laminas-i18n: supports array and INI files, or Gettext formats. Implements a caching layer to save you from reading the filesystem every time. It also includes view helpers, and locale-aware input filters and validators. However, it has no message extractor. Other frameworks also include i18n modules, but those are not available outside of their codebases:\n• Laravel supports basic array files, has no automatic extractor but includes a helper for template files.\n• Yii supports array, Gettext, and database-based translation, and includes a messages extractor. It is backed by the extension, available since PHP 5.3, and based on the ICU project; this enables Yii to run powerful replacements, like spelling out numbers, formatting dates, times, intervals, currency, and ordinals. If you decide to go for one of the libraries that provide no extractors, you may want to use the gettext formats, so you can use the original gettext toolchain (including Poedit) as described in the rest of the chapter. You might need to install Gettext and the related PHP library by using your package manager, like or . After installed, enable it by adding (Linux/Unix) or (Windows) to your . Here we will also be using Poedit to create translation files. You will probably find it in your system’s package manager; it is available for Unix, macOS, and Windows, and can be downloaded for free on their website as well. There are three files you usually deal with while working with gettext. The main ones are PO (Portable Object) and MO (Machine Object) files, the first being a list of readable “translated objects” and the second, the corresponding binary to be interpreted by gettext when doing localization. There’s also a POT (Template) file, which simply contains all existing keys from your source files, and can be used as a guide to generate and update all PO files. Those template files are not mandatory: depending on the tool you are using to do l10n, you can go just fine with only PO/MO files. You will always have one pair of PO/MO files per language and region, but only one POT per domain. There are some cases, in big projects, where you might need to separate translations when the same words convey different meaning given a context. In those cases, you split them into different domains. They are, basically, named groups of POT/PO/MO files, where the filename is the said translation domain. Small and medium-sized projects usually, for simplicity, use only one domain; its name is arbitrary, but we will be using “main” for our code samples. In Symfony projects, for example, domains are used to separate the translation for validation messages. A locale is simply a code that identifies one version of a language. It is defined following the ISO 639-1 and ISO 3166-1 alpha-2 specs: two lower-case letters for the language, optionally followed by an underline and two upper-case letters identifying the country or regional code. For rare languages, three letters are used. For some speakers, the country part may seem redundant. In fact, some languages have dialects in different countries, such as Austrian German ( ) or Brazilian Portuguese ( ). The second part is used to distinguish between those dialects - when it is not present, it is taken as a “generic” or “hybrid” version of the language. To use Gettext, we will need to adhere to a specific structure of folders. First, you will need to select an arbitrary root for your l10n files in your source repository. Inside it, you will have a folder for each needed locale, and a fixed folder that will contain all your PO/MO pairs. Example: As we said in the introduction, different languages might sport different plural rules. However, gettext saves us from this trouble once again. When creating a new file, you will have to declare the plural rules for that language, and translated pieces that are plural-sensitive will have a different form for each of those rules. When calling Gettext in code, you will have to specify the number related to the sentence, and it will work out the correct form to use - even using string substitution if needed. Plural rules include the number of plurals available and a boolean test with that would define in which rule the given number falls (starting the count with 0). For example:\n• English: - two rules, first if N is one, second rule otherwise\n• Brazilian Portuguese: - two rules, second if N is bigger than one, first otherwise Now that you understood the basis of how plural rules works - and if you didn’t, please look at a deeper explanation on the LingoHub tutorial -, you might want to copy the ones you need from a list instead of writing them by hand. When calling out Gettext to do localization on sentences with counters, you will have to provide it the related number as well. Gettext will work out what rule should be in effect and use the correct localized version. You will need to include in the file a different sentence for each plural rule defined. After all that theory, let’s get a little practical. Here’s an excerpt of a file - don’t mind with its format, but with the overall content instead; you will learn how to edit it easily later: msgid \"\" msgstr \"\" \"Language: pt_BR\n\n\" \"Content-Type: text/plain; charset=UTF-8\n\n\" \"Plural-Forms: nplurals=2; plural=(n > 1);\n\n\" msgid \"We are now translating some strings\" msgstr \"Nós estamos traduzindo algumas strings agora\" msgid \"Hello %1$s! Your last visit was on %2$s\" msgstr \"Olá %1$s! Sua última visita foi em %2$s\" msgid \"Only one unread message\" msgid_plural \"%d unread messages\" msgstr[0] \"Só uma mensagem não lida\" msgstr[1] \"%d mensagens não lidas\" The first section works like a header, having the and especially empty. It describes the file encoding, plural forms and other things that are less relevant. The second section translates a simple string from English to Brazilian Portuguese, and the third does the same, but leveraging string replacement from so the translation may contain the user name and visit date. The last section is a sample of pluralization forms, displaying the singular and plural version as in English and their corresponding translations as 0 and 1 (following the number given by the plural rule). There, string replacement is used as well so the number can be seen directly in the sentence, by using . The plural forms always have two (singular and plural), so it is advised not to use a complex language as the source of translation. As you might have noticed, we are using as source ID the actual sentence in English. That is the same used throughout all your files, meaning other languages will have the same format and the same fields but translated lines. Talking about translation keys, there are two main “schools” here:\n• as a real sentence. The main advantages are:\n• if there are pieces of the software untranslated in any given language, the key displayed will still maintain some meaning. Example: if you happen to translate by heart from English to Spanish but need help to translate to French, you might publish the new page with missing French sentences, and parts of the website would be displayed in English instead;\n• it is much easier for the translator to understand what’s going on and do a proper translation based on the ;\n• it gives you “free” l10n for one language - the source one;\n• The only disadvantage: if you need to change the actual text, you would need to replace the same across several language files.\n• as a unique, structured key. It would describe the sentence role in the application in a structured way, including the template or part where the string is located instead of its content.\n• it is a great way to have the code organized, separating the text content from the template logic.\n• however, that could bring problems to the translator that would miss the context. A source language file would be needed as a basis for other translations. Example: the developer would ideally have an file, that translators would read to understand what to write in for instance.\n• missing translations would display meaningless keys on screen ( instead of on the said untranslated French page). That is good it as would force translation to be complete before publishing - however, bad as translation issues would be remarkably awful in the interface. Some libraries, though, include an option to specify a given language as “fallback”, having a similar behavior as the other approach. The Gettext manual favors the first approach as, in general, it is easier for translators and users in case of trouble. That is how we will be working here as well. However, the Symfony documentation favors keyword-based translation, to allow for independent changes of all translations without affecting templates as well. In a typical application, you would use some Gettext functions while writing static text in your pages. Those sentences would then appear in files, get translated, compiled into files and then, used by Gettext when rendering the actual interface. Given that, let’s tie together what we have discussed so far in a step-by-step example: <!-- code indented this way only for legibility --> 'We\\'re now translating some strings'\n• simply translates a into its corresponding for a given language. There’s also the shorthand function that works the same way;\n• does the same but with plural rules;\n• There are also and , that allow you to override the domain for a single call. More on domain configuration in the next example. 2. A sample setup file ( as used above), selecting the correct locale and configuring Gettext /** * Verifies if the given $locale is supported in the project * @param string $locale * @return bool */ // the locale can be changed through the query-string //you should sanitize this! //it's stored in a cookie so it can be reused // if the cookie is present instead, let's just keep it //you should sanitize this! // default: look for the languages the browser says the user accepts // here we define the global system locale given the found language // this might be useful for date functions (LC_TIME) or money formatting (LC_MONETARY), for instance // this will make Gettext look for ../locales/<lang>/LC_MESSAGES/main.mo // indicates in what encoding the file should be read // if your application has additional domains, as cited before, you should bind them here as well // here we indicate the default domain the gettext() calls will respond to // this would look for the string in forum.mo instead of main.mo 3. Preparing translation for the first run One of the great advantages Gettext has over custom framework i18n packages is its extensive and powerful file format. “Oh man, that’s quite hard to understand and edit by hand, a simple array would be easier!” Make no mistake, applications like Poedit are here to help - a lot. You can get the program from their website, it’s free and available for all platforms. It’s a pretty easy tool to get used to, and a very powerful one at the same time - using all features Gettext has available. This guide is based on PoEdit 1.8. In the first run, you should select “File > New…” from the menu. You’ll be asked straight ahead for the language: here you can select/filter the language you want to translate to, or use that format we mentioned before, such as or . Now, save the file - using that directory structure we mentioned as well. Then you should click “Extract from sources”, and here you’ll configure various settings for the extraction and translation tasks. You’ll be able to find all those later through “Catalog > Properties”:\n• Source paths: here you must include all folders from the project where (and siblings) are called - this is usually your templates/views folder(s). This is the only mandatory setting;\n• Translation properties:\n• Project name and version, Team and Team’s email address: useful information that goes in the .po file header;\n• Plural forms: here go those rules we mentioned before - there’s a link in there with samples as well. You can leave it with the default option most of the time, as PoEdit already includes a handy database of plural rules for many languages.\n• Source code charset: set here the charset used by your codebase - probably UTF-8 as well, right?\n• Source keywords: The underlying software knows how and similar function calls look like in several programming languages, but you might as well create your own translation functions. It will be here you’ll add those other methods. This will be discussed later in the “Tips” section. After setting those points it will run a scan through your source files to find all the localization calls. After every scan PoEdit will display a summary of what was found and what was removed from the source files. New entries will fed empty into the translation table, and you’ll start typing in the localized versions of those strings. Save it and a .mo file will be (re)compiled into the same folder and ta-dah: your project is internationalized. As you may have noticed before, there are two main types of localized strings: simple ones and those with plural forms. The first ones have simply two boxes: source and localized string. The source string cannot be modified as Gettext/Poedit do not include the powers to alter your source files - you should change the source itself and rescan the files. Tip: you may right-click a translation line and it will hint you with the source files and lines where that string is being used. On the other hand, plural form strings include two boxes to show the two source strings, and tabs so you can configure the different final forms. Whenever you change your sources and need to update the translations, just hit Refresh and Poedit will rescan the code, removing non-existent entries, merging the ones that changed and adding new ones. It may also try to guess some translations, based on other ones you did. Those guesses and the changed entries will receive a “Fuzzy” marker, indicating it needs review, appearing golden in the list. It is also useful if you have a translation team and someone tries to write something they are not sure about: just mark Fuzzy, and someone else will review later. Finally, it is advised to leave “View > Untranslated entries first” marked, as it will help you a lot to not forget any entry. From that menu, you can also open parts of the UI that allow you to leave contextual information for translators if needed. If you are running PHP as a module on Apache ( ), you might face issues with the file being cached. It happens the first time it is read, and then, to update it, you might need to restart the server. On Nginx and PHP5 it usually takes only a couple of page refreshes to refresh the translation cache, and on PHP7 it is rarely needed. As preferred by many people, it is easier to use instead of . Many custom i18n libraries from frameworks use something similar to as well, to make translated code shorter. However, that is the only function that sports a shortcut. You might want to add in your project some others, such as or for , or maybe a fancy that would join and calls. Other libraries, such as php-gettext’s Gettext also provide helper functions like these. In those cases, you’ll need to instruct the Gettext utility on how to extract the strings from those new functions. Don’t be afraid; it is very easy. It is just a field in the file, or a Settings screen on Poedit. In the editor, that option is inside “Catalog > Properties > Source keywords”. Remember: Gettext already knows the default functions for many languages, so don’t be afraid if that list seems empty. You need to include there the specifications of those new functions, following a specific format:\n• if you create something like that simply returns the translation for a string, you can specify it as . Gettext will know the only function argument is the string to be translated;\n• if the function has more than one argument, you can specify in which one the first string is - and if needed, the plural form as well. For instance, if we call our function like this: , the specification would be , meaning the first form is the first argument, and the second form is the second argument. If your number comes as the first argument instead, the spec would be , indicating the first form is the second argument, and so on. After including those new rules in the file, a new scan will bring in your new strings just as easy as before.\n\nIf you have ever read about Dependency Injection then you have probably seen the terms “Inversion of Control” or “Dependency Inversion Principle”. These are the complex problems that Dependency Injection solves. Inversion of Control is as it says, “inverting the control” of a system by keeping organizational control entirely separate from our objects. In terms of Dependency Injection, this means loosening our dependencies by controlling and instantiating them elsewhere in the system. For years, PHP frameworks have been achieving Inversion of Control, however, the question became, which part of control are we inverting, and where to? For example, MVC frameworks would generally provide a super object or base controller that other controllers must extend to gain access to its dependencies. This is Inversion of Control, however, instead of loosening dependencies, this method simply moved them. Dependency Injection allows us to more elegantly solve this problem by only injecting the dependencies we need, when we need them, without the need for any hard coded dependencies at all. The Single Responsibility Principle is about actors and high-level architecture. It states that “A class should have only one reason to change.” This means that every class should only have responsibility over a single part of the functionality provided by the software. The largest benefit of this approach is that it enables improved code reusability. By designing our class to do just one thing, we can use (or re-use) it in any other program without changing it. The Open/Closed Principle is about class design and feature extensions. It states that “Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.” This means that we should design our modules, classes and functions in a way that when a new functionality is needed, we should not modify our existing code but rather write new code that will be used by existing code. Practically speaking, this means that we should write classes that implement and adhere to interfaces, then type-hint against those interfaces instead of specific classes. The largest benefit of this approach is that we can very easily extend our code with support for something new without having to modify existing code, meaning that we can reduce QA time, and the risk for negative impact to the application is substantially reduced. We can deploy new code, faster, and with more confidence. The Liskov Substitution Principle is about subtyping and inheritance. It states that “Child classes should never break the parent class’ type definitions.” Or, in Robert C. Martin’s words, “Subtypes must be substitutable for their base types.” For example, if we have a interface which defines an method, and we have and classes which both implement the interface, then we can expect that the usage of the method will always do the thing that we intend. If we later create a class or a class which implement the interface, we will already know and understand what the method will do. The largest benefit of this approach is that we have the ability to build flexible and easily-configurable programs, because when we change one object of a type (e.g., ) to another we don’t need to change anything else in our program. The Interface Segregation Principle (ISP) is about business-logic-to-clients communication. It states that “No client should be forced to depend on methods it does not use.” This means that instead of having a single monolithic interface that all conforming classes need to implement, we should instead provide a set of smaller, concept-specific interfaces that a conforming class implements one or more of. For example, a or class would be interested in a method, but a or class would not. Conversely, a or class would be interested in a method, but a or class would not. There is no need to have all of these types of vehicles implement support for both as well as , so we should break-apart the source interface. The Dependency Inversion Principle is about removing hard-links between discrete classes so that new functionality can be leveraged by passing a different class. It states that one should “Depend on Abstractions. Do not depend on concretions.”. Put simply, this means our dependencies should be interfaces/contracts or abstract classes rather than concrete implementations. We can easily refactor the above example to follow this principle. There are several benefits to the class now depending on an interface rather than a concretion. Consider that we are working in a team and the adapter is being worked on by a colleague. In our first example, we would have to wait for said colleague to finish the adapter before we could properly mock it for our unit tests. Now that the dependency is an interface/contract we can happily mock that interface knowing that our colleague will build the adapter based on that contract. An even bigger benefit to this method is that our code is now much more scalable. If a year down the line we decide that we want to migrate to a different type of database, we can write an adapter that implements the original interface and injects that instead, no more refactoring would be required as we can ensure that the adapter follows the contract set by the interface.\n\nIn many “exception-heavy” programming languages, whenever anything goes wrong an exception will be thrown. This is certainly a viable way to do things, but PHP is an “exception-light” programming language. While it does have exceptions and more of the core is starting to use them when working with objects, most of PHP itself will try to keep processing regardless of what happens, unless a fatal error occurs. This is only a notice error, and PHP will happily carry on. This can be confusing for those coming from “exception-heavy” languages, because referencing a missing variable in Python for example will throw an exception: python print foo NameError: name 'foo' is not defined The only real difference is that Python will freak out over any small thing, so that developers can be super sure any potential issue or edge-case is caught, whereas PHP will keep on processing unless something extreme happens, at which point it will throw an error and report it. PHP has several levels of error severity. The three most common types of messages are errors, notices and warnings. These have different levels of severity; , , and . Errors are fatal run-time errors and are usually caused by faults in your code and need to be fixed as they’ll cause PHP to stop executing. Notices are advisory messages caused by code that may or may not cause problems during the execution of the script, execution is not halted. Warnings are non-fatal errors, execution of the script will not be halted. Another type of error message reported at compile time are messages. These messages are used to suggest changes to your code to help ensure best interoperability and forward compatibility with upcoming versions of PHP. Error Reporting can be changed by using PHP settings and/or PHP function calls. Using the built in PHP function you can set the level of errors for the duration of the script execution by passing one of the predefined error level constants, meaning if you only want to see Errors and Warnings - but not Notices - then you can configure that: You can also control whether or not errors are displayed to the screen (good for development) or hidden, and logged (good for production). For more information on this check out the Error Reporting section. You can also tell PHP to suppress specific errors with the Error Control Operator . You put this operator at the beginning of an expression, and any error that’s a direct result of the expression is silenced. This will output if it exists, but will simply return a null and print nothing if the variable or key does not exist. Without the error control operator, this expression could create a or error. This might seem like a good idea, but there are a few undesirable tradeoffs. PHP handles expressions using an in a less performant way than expressions without an . Premature optimization may be the root of all programming arguments, but if performance is particularly important for your application/library it’s important to understand the error control operator’s performance implications. Secondly, the error control operator completely swallows the error. The error is not displayed, and the error is not sent to the error log. Also, stock/production PHP systems have no way to turn off the error control operator. While you may be correct that the error you’re seeing is harmless, a different, less harmless error will be just as silent. If there’s a way to avoid the error suppression operator, you should consider it. For example, our code above could be rewritten like this: One instance where error suppression might make sense is where fails to find a file to load. You could check for the existence of the file before you try to load it, but if the file is deleted after the check and before the (which might sound impossible, but it can happen) then will return false and throw an error. This is potentially something PHP should resolve, but is one case where error suppression might seem like the only valid solution. Earlier we mentioned there’s no way in a stock PHP system to turn off the error control operator. However, Xdebug has an ini setting which will disable the error control operator. You can set this via your file with the following. You can also set this value at runtime with the function This is most useful when you’re debugging code and suspect an informative error is suppressed. Use scream with care, and as a temporary debugging tool. There’s lots of PHP library code that may not work with the error control operator disabled. PHP is perfectly capable of being an “exception-heavy” programming language, and only requires a few lines of code to make the switch. Basically you can throw your “errors” as “exceptions” using the class, which extends the class. This is a common practice implemented by a large number of modern frameworks such as Symfony and Laravel. In debug mode (or dev mode) both of these frameworks will display a nice and clean stack trace. There are also some packages available for better error and exception handling and reporting. Like Whoops!, which comes with the default installation of Laravel and can be used in any framework as well. By throwing errors as exceptions in development you can handle them better than the usual result, and if you see an exception during development you can wrap it in a catch statement with specific instructions on how to handle the situation. Each exception you catch instantly makes your application that little bit more robust. More information on this and details on how to use with error handling can be found at ErrorException Class."
    },
    {
        "link": "https://drupal.org/docs/develop/standards/php/php-coding-standards",
        "document": "This document is loosely based on the PEAR Coding standards.\n\nArrays should be formatted using short array syntax with a space separating each element (after the comma), and spaces around the => key association operator, if applicable:\n\nNote that if the line declaring an array spans longer than 80 characters (often the case with form and menu declarations), each element should be broken into its own line, and indented one level:\n\nNote that, as seen above, in multi-line arrays there MUST be a comma after the last array element. This helps prevent parsing errors if another element is placed at the end of the list later.\n\nPut a space between the (type) and the $variable in a cast: .\n\nPHP allows objects returned from functions and methods to be \"chained\", that is, a method on the returned object may be called immediately. This is known as a 'fluent interface.' Here is an example:\n\nAs a general rule, a method should return $this, and thus be chainable, in any case where there is no other logical return value. Common examples are those methods that set some state or property on the object. It is better in those cases to return $this rather than TRUE/FALSE or NULL.\n\nIn the case where you have a fluent interface for a class, and the code spans more than one line, the method calls should be indented with 2 spaces:\n\nWhen calling class constructors with no arguments, always include parentheses:\n\nThis is to maintain consistency with constructors that have arguments:\n\nNote that if the class name is a variable, the variable will be evaluated first to get the class name, and then the constructor will be called. Use the same syntax:\n\nComment standards are discussed on the separate Doxygen and comment formatting conventions page.\n\nControl structures include if, for, while, switch, etc. Here is a sample if statement, since it is the most complicated of them:\n\nControl statements should have one space between the control keyword and opening parenthesis, to distinguish them from function calls.\n\nAlways use curly braces even in situations where they are technically optional. Having them increases readability and decreases the likelihood of logic errors being introduced when new lines are added. The opening curly should be on the same line as the opening statement, preceded by one space. The closing curly should be on a line by itself and indented to the same level as the opening statement.\n\nIn templates, the alternate control statement syntax using : instead of brackets is allowed. Note that there should not be a space between the closing parenthesis after the control keyword, and the colon, and HTML/PHP inside the control structure should be indented. For example:\n\nWhere to define and place your classes?\n\nBest practices include having one class or interface or trait per file. That file should be named for the class, such that the file name for would be .\n\nFrom Drupal 8, classes are autoloaded based on the PSR-4 namespacing convention.\n\nIn core, the PSR-4 'tree' starts under .\n\nIn modules, including contrib, custom and those in core, the PSR-4 'tree' starts under .\n\nDefining a class in your module's file is only possible if the class does not have a superclass which might not be available when the file is loaded. It's best practice to move such classes into a PSR-4 source directory.\n\nUse \"example.com\" for all example URLs, per RFC 2606.\n\nFunctions should be called with no spaces between the function name, the opening parenthesis, and the first parameter; spaces between commas and each parameter, and no space between the last parameter, the closing parenthesis, and the semicolon. Here's an example:\n\nArgument lists may be split across multiple lines, where each subsequent line is indented once.\n\nWhen the argument list is split across multiple lines\n• The first item in the list must be on the next line.\n• There must be only one argument per line.\n• The last argument in the list must use a trailing comma.\n• The closing parenthesis and opening brace must be placed together on their own line with one space between them.\n\nAnonymous functions should have a space between \"function\" and its parameters, as in the following example:\n\nAnywhere you are unconditionally including a class file, use . Anywhere you are conditionally including a class file (for example, factory methods), use . Either of these will ensure that class files are included only once. They share the same file list, so you don't need to worry about mixing them - a file included with will not be included again by .\n\nNote: and are statements, not functions. You don't need parentheses around the file name to be included.\n\nWhen including code from the same directory or a sub-directory, start the file path with \".\":\n\n \n\n In Drupal 7.x and later versions, use DRUPAL_ROOT:\n\n\n\nUse an indent of 2 spaces, with no tabs.\n\nLines should have no trailing whitespace at the end.\n\nFiles should be formatted with \n\n as the line ending (Unix line endings), not \\r\n\n (Windows line endings).\n\nAll text files should end in a single newline (\n\n). This avoids the verbose \"\\ No newline at end of file\" patch warning and makes patches easier to read since it's clearer what is being changed when lines are added to the end of a file.\n\nAll blocks at the beginning of a PHP file should be separated by a blank line. This includes the block, the namespace declaration and the statements (if present) as well as the subsequent code in the file. So, for example, a file header might look as follows:\n\nLeave an empty line between start of class/interface definition and property/method definition:\n\nLeave an empty line between end of property definition and start method definition:\n\nLeave an empty line between end of method and end of class definition:\n\nCreating classes directly is discouraged. Instead, use a factory function that creates the appropriate object and returns it. This provides two benefits:\n• It provides a layer of indirection, as the function may be written to return a different object (with the same interface) in different circumstances as appropriate.\n• PHP does not allow class constructors to be chained, but does allow the return value from a function or method to be chained.\n\nThe following rules apply to code. See Doxygen and comment formatting conventions for rules pertaining to comments.\n• In general, all lines of code should not be longer than 80 characters.\n• Lines containing longer function names, function/class definitions, variable declarations, etc are allowed to exceed 80 characters.\n• Control structure conditions may exceed 80 characters, if they are simple to read and understand:\n\n if ($something['with']['something']['else']['in']['here'] == mymodule_check_something($whatever['else'])) { ... } if (isset($something['what']['ever']) && $something['what']['ever'] > $infinite && user_access('galaxy')) { ... } // Non-obvious conditions of low complexity are also acceptable, but should // always be documented, explaining WHY a particular check is done. if (preg_match('@(/|\\\\)(\\.\\.|~)@', $target) && strpos($target_dir, $repository) !== 0) { return FALSE; }\n• Conditions should not be wrapped into multiple lines.\n• Control structure conditions should also NOT attempt to win the Most Compact Condition In Least Lines Of Code Award™:\n\n // DON'T DO THIS! if ((isset($key) && !empty($user->uid) && $key == $user->uid) || (isset($user->cache) ? $user->cache : '') == ip_address() || isset($value) && $value >= time())) { ... } Instead, it is recommended practice to split out and prepare the conditions separately, which also permits documenting the underlying reasons for the conditions: // Key is only valid if it matches the current user's ID, as otherwise other // users could access any user's things. $is_valid_user = isset($key) && !empty($user->uid) && $key == $user->uid; // IP must match the cache to prevent session spoofing. $is_valid_cache = isset($user->cache) ? $user->cache == ip_address() : FALSE; // Alternatively, if the request query parameter is in the future, then it // is always valid, because the galaxy will implode and collapse anyway. $is_valid_query = $is_valid_cache || (isset($value) && $value >= time()); if ($is_valid_user || $is_valid_query) { ... } Note: This example is still a bit dense. Always consider and decide on your own whether people unfamiliar with your code will be able to make sense of the logic.\n\nFunctions should be named using lowercase, and words should be separated with an underscore. Functions should in addition have the grouping/module name as a prefix, to avoid name collisions between modules.\n\nVariables should be named using lowercase, and words should be separated either with uppercase characters (example: ) or with an underscore (example: ). Be consistent; do not mix camelCase and snake_case variable naming inside a file.\n\nPersistent variables (variables/settings defined using Drupal's variable_get()/variable_set() functions) should be named using all lowercase letters, and words should be separated with an underscore. They should use the grouping/module name as a prefix, to avoid name collisions between modules.\n• Constants should always be all-uppercase, with underscores to separate words. (This includes pre-defined PHP constants like , , and .)\n• Module-defined constant names should also be prefixed by an uppercase spelling of the module that defines them.\n• In Drupal 8 and later, constants should be defined using the PHP language keyword (instead of ), because it is better for performance:\n\n /** * Indicates that the item should be removed at the next general cache wipe. */ const CACHE_TEMPORARY = -1; Note that does not work with PHP expressions. should be used when defining a constant conditionally or with a non-literal value:\n\nIf you need to define global variables, their name should start with a single underscore followed by the module/theme name and another underscore.\n• Classes and interfaces should use UpperCamel naming.\n• Methods and class properties should use lowerCamel naming. In Drupal 8, properties of configuration entities are exempt of these conventions. Those properties are allowed to use underscores.\n• If an acronym is used in a class or method name, make it CamelCase too (SampleXmlClass, not SampleXMLClass). [Note: this standard was adopted in March 2013, reversing the previous standard.]\n• Classes should not use underscores in class names unless absolutely necessary to derive names inherited class names dynamically. That is quite rare, especially as Drupal does not mandate a class-file naming match.\n• Class names should not have \"Class\" in the name.\n• Interfaces should always have the suffix \"Interface\".\n• Test classes should always have the suffix \"Test\".\n• Protected or private properties and methods should not use an underscore prefix.\n• Classes and interfaces should have names that stand alone to tell what they do without having to refer to the namespace, read well, and are as short as possible without losing functionality information or leading to ambiguity. Notes:\n• If necessary for clarity or to prevent ambiguity, include the last component of the namespace in the name.\n• Exception for Drupal 8.x: due to the way database classes are loaded, do not include the database engine name (MySQL, etc.) in engine-specific database class names.\n• Exception for test classes: Test classes only need to be unambiguous within the context of the module they are testing.\n\nEnums follow the same conventions as classes with the addition that for their cases the enums must use UpperCamelCase.\n\nAll documentation files should have the file name extension \".txt\" to make viewing them on Windows systems easier. Also, the file names for such files should be all-caps (e.g. README.txt instead of readme.txt) while the extension itself is all-lowercase (i.e. txt instead of TXT).\n\nAll binary operators (operators that come between two values), such as , , , , , , etc. should have a space before and after the operator, for readability. For example, an assignment should be formatted as rather than . Unary operators (operators that operate on only one value), such as , should not have a space between the operator and the variable or number they are operating on.\n\nChecks for weak-typed inequality MUST use the operator. The operator MUST NOT be used in PHP code.\n\nThe short ternary operator must be used where the first operand of a ternary expression matches the condition. For example use:\n\nsince matches both the condition and the first operand.\n\nThe null coalescing operator should be used instead of a ternary operator with an isset() condition, to make code more readable. For example use:\n\nBeginning with Drupal 9, parameter and return type hints should be used wherever possible. Example function definition using parameter and return type hints:\n\nParameter and return type hints should be included for all new functions and methods, including new child implementations of methods for existing classes and interfaces.\n\nAdding type hints to existing code is a backwards compatibility break. Type hints can (and should) be added in a major version if a deprecation warning is first raised in an earlier minor version. See #3050720: [Meta] Implement strict typing in existing code for strategies and ongoing discussion.\n\nis only needed in rare cases where a more specific data type cannot be identified (for example, for the return values of callbacks, or markup strings that can be either markup objects or scalar strings). A need for or a union type is often a sign that the code should possibly be refactored.\n\nUse nullable types where the data type may be either a specific type or null.\n\nUse an interface type hint for parameter and return types (not a class). Type hint the most specific interface that encompasses all possible parameter or return values. Do not use .\n\nIf a function or method does not return anything, use a type hint.\n\nAlways use to delimit PHP code, not the shorthand, . This is required for Drupal compliance and is also the most portable way to include PHP code on differing operating systems and set-ups.\n\nNote that as of Drupal 4.7, the at the end of code files is purposely omitted. This includes for module and include files. The reasons for this can be summarized as:\n• Removing it eliminates the possibility for unwanted whitespace at the end of files which can cause \"header already sent\" errors, XHTML/XML validation issues, and other problems.\n• The closing delimiter at the end of a file is optional.\n• PHP.net itself removes the closing delimiter from the end of its files (example: prepend.inc), so this can be seen as a \"best practice.\"\n\nDrupal does not have a hard standard for the use of single quotes vs. double quotes. Where possible, keep consistency within each module, and respect the personal style of other developers.\n\nWith that caveat in mind, single quote strings should be used by default. Their use is recommended except in two cases:\n• Translated strings where one can avoid escaping single quotes by enclosing the string in double quotes. One such string would be \"He's a good person.\" It would be 'He\\'s a good person.' with single quotes. Such escaping may not be handled properly by .pot file generators for text translation, and it's also somewhat awkward to read.\n\nThe PHP language requires semicolons at the end of most lines, but allows them to be omitted at the end of code blocks. Drupal coding standards require them, even at the end of code blocks. In particular, for one-line PHP blocks:\n\nIf you define strict types for a PHP file, place the declare statement on a new line after the opening PHP tag surrounded by empty newlines. If the PHP file has a file level DocBlock the declare statement should be positioned after that. The declare statement is written without spaces around the equals sign.\n\nAlways use a space between the dot and the concatenated parts to improve readability.\n\nWhen you concatenate simple variables, you can use double quotes and add the variable inside; otherwise, use single quotes.\n\nWhen using the concatenating assignment operator ('.='), use a space on each side as with the assignment operator:\n\nThe use of a separate interface definition from an implementing class is strongly encouraged because it allows more flexibility in extending code later. A separate interface definition also neatly centralizes documentation making it easier to read. All interfaces should be fully documented according to established documentation standards.\n\nIf there is even a remote possibility of a class being swapped out for another implementation at some point in the future, split the method definitions off into a formal Interface. A class that is intended to be extended must always provide an Interface that other classes can implement rather than forcing them to extend the base class.\n\nVisibility must be declared on all methods.\n\nMethod names must not be prefixed with a single underscore to indicate protected or private visibility. That is, an underscore prefix explicitly has no meaning.\n\nMethod and function names must not be declared with space after the method name. The closing brace must go on the next line following the body. There must not be a space after the opening parenthesis, and there must not be a space before the closing parenthesis.\n\nVisibility must be declared on all properties.\n\nThe use of public properties is strongly discouraged, as it allows for unwanted side effects. It also exposes implementation-specific details, which in turn makes swapping out a class for another implementation (one of the key reasons to use objects) much harder. Properties should be considered internal to a class.\n\nWhen present, the and declarations must precede the visibility declaration.\n\nWhen present, the declaration must come after the visibility declaration.\n\nUse an .inc file and use files[] in the .info file to extend a class or implement an interface.\n\nIf you include a file that extends a class or implements an interface, PHP generates a fatal error if the parent class or interface is not loaded. So, if a class is provided by a contributed module, or core in some cases, it is not safe to put your classes in a .module file. It's better to use an .inc file and use in your .info file. For example, even if you have a dependency on a module, it's possible that both your module and the dependency are disabled when your .module file is included. Since the registry won't auto-load a class from a disabled module, this would cause an error. Also, when hook_boot() is run, module dependencies aren't loaded. So, if you add a class, then later implement hook_boot(), your module could be loaded without the dependency, and that will also generate a fatal error. Using an .inc file and using in your .info file is needed to avoid those errors.\n\nThere are several contributed modules/projects available to assist with review for coding standards compliance:\n• Coder module, which includes both Coder Review (reviews) and Coder Upgrade (updates your code). To use it:\n• Install the module (like any other module)\n• Click on the \"Code Review\" link in your navigation menu.\n• Select the module you wish to review, and click the \"Submit\" button. As an alternative to starting from the Code Review link in navigation, you can also review a particular module's code by clicking on the link on the Modules admin screen.\n• Dreditor (a firefox browser plug-in for reviewing patches and more). Instructions to install Dreditor on Chrome.\n• PAReview (a set of scripts for reviewing project applications, which runs some coding tests)\n• The Grammar Parser module provides an automated way of rewriting code files in compliance with code standards. You'll probably also need the Grammar Parser UI module. These are only available for Drupal 7."
    },
    {
        "link": "https://stackoverflow.com/questions/5286309/php-oop-good-practice-for-accessing-methods",
        "document": "I have some code that often looks like this:\n\nI figure if I set user property to the instance I can reuse a shorter name in my methods (well in this case it's not that much shorter). I also thought doing it this way might save a little resources (beginning to doubt it), but when I look at other people's code I rarely see people do this. They would usually just call:\n\nIs there any sort of best practice for this? Maybe if it's not a singleton class you might do it this way? Or maybe you should never do it this way? Hope to get some clarification, thanks.\n\nEdit: Incase there is any misunderstanding I'm just wondering if I should the first example with creating a property to store the instance vs this:\n\nActually now that I think about it this may be less code as I don't need the constructor..."
    },
    {
        "link": "https://softwareengineering.stackexchange.com/questions/450909/best-practices-for-organising-php-files",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]