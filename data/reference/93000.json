[
    {
        "link": "https://geeksforgeeks.org/writing-first-c-program-hello-world-example",
        "document": "The “Hello World” program is the first step towards learning any programming language and is also one of the most straightforward programs you will learn. It is the basic program that is used to demonstrate how the coding process works. All you have to do is display the message “Hello World” on the output screen.\n\nBelow is the C++ program to print “Hello World” on the console screen.\n\nTo write and run C++ programs, you need to set up the local environment on your computer. Refer to the complete article Setting up C++ Development Environment. If you do not want to set up the local environment on your computer, you can also use online IDE to write and run your C++ programs.\n\nWorking of Hello World Program in C++\n\nLet us now understand every line and the terminologies of the above program.\n\nThis line is a comment line. A comment is used to display additional information about the program. A comment does not contain any programming logic. When a comment is encountered by a compiler, the compiler simply skips that line of code.\n\nThe #include is a preprocessor directive tells the compiler to include the content of a file in the source code. For example, #include<iostream> tells the compiler to include the input-output library which contains all C++’s input/output library functions.\n\nThis is used to import the entity of the stdnamespace into the current namespace of the program. It is basically the space where all the inbuilt features of C++ are declared. For example, std::cout.\n\nThe main() function is the entry point of every C++ program, no matter where the function is located in the program. The opening braces ‘{‘ indicates the beginning of the main function and the closing braces ‘}’ indicates the ending of the main function.\n\nThe coutis a tool (object) that is used to display output on the console screen. Everything followed by the character << in double quotes ” ” is displayed on the output screen. The semi-colon character at the end of the statement is used to indicate that the statement is ending there.\n\nThis statement is used to return a value from a function and indicates the finishing of a function. Here, it is used to sent the signal of successful execution of the main function.\n\nAlso, as you can see, the cout and the return statement have been indented or moved to the right side. This is done to make the code more readable. We must always use indentations and comments to make the code more readable. Must read the FAQ on the style of writing programs."
    },
    {
        "link": "https://programiz.com/cpp-programming/examples/print-sentence",
        "document": "A \"Hello, World!\" is a simple program that outputs on the screen. Since it's a very simple program, it's often used to introduce a new programming language to a newbie.\n\nLet's see how C++ \"Hello, World!\" program works.\n\nIf you haven't already set up the environment to run C++ on your computer, visit Install C++ on Your Computer.\n\nWorking of C++ \"Hello World!\" Program\n• None // Your First C++ Program \n\n \n\n In C++, any line starting with is a comment. Comments are intended for the person reading the code to better understand the functionality of the program. It is completely ignored by the C++ compiler.\n• The is a preprocessor directive used to include files in our program. The above code is including the contents of the iostream file.\n\n \n\n This allows us to use in our program to print output on the screen.\n\n \n\n For now, just remember that we need to use to use that allows us to print output on the screen.\n• A valid C++ program must have the function. The curly braces indicate the start and the end of the function.\n\n \n\n The execution of code beings from this function.\n• prints the content inside the quotation marks. It must be followed by followed by the format string. In our example, is the format string.\n\n \n\n Note: is used to indicate the end of a statement.\n• The statement is the \"Exit status\" of the program. In simple terms, the program ends with this statement.\n\nThings to take away\n• We use in order to print output on the screen.\n• We must include iostream if we want to use .\n• The execution of code begins from the function. This function is mandatory. This is a valid C++ program that does nothing.\n\nIn the next tutorial, we will learn about comments in C++."
    },
    {
        "link": "https://udacity.com/blog/2021/09/cp-hello-world-an-introduction-to-programming-in-c.html",
        "document": "We’re surrounded by programs. Take a household coffee machine, for example. It’ll have a program that calculates the optimal amount of water and temperature needed to make you a cup of coffee. Inside the coffee machine, there’s a small computer running automated instructions — written by a programmer, using a language like C++.\n\nWhat is programming about, and how does it look in practice? In this article, we’ll go over the basics of coding in C++, and you’ll even get to create your first program! Let’s get started.\n\nSo What Is Programming?\n\nA “program” is commonly defined as “a plan or schedule of activities, and procedures to be followed.” When you plan out your workday or next holiday, you’re likely defining a structure of consecutive actions that you’ll undertake. These actions may be subject to conditions, such as, “If the restaurant is fully booked, we’ll eat a hamburger at the beach instead.” The process of writing a program is quite similar.\n\nWhen we talk about programming in the computing world, we refer to our use of machines to automate actions that are otherwise repetitive and/or too complex for us to perform. Let’s say you need to calculate your daily travel spend. Rather than doing the math manually on a napkin, you’re better off relying on a mobile app to do that for you. To calculate your gas expenses, you simply input the number of miles driven! Not only will the program do the math correctly, but it can easily calculate the price of fuel based on where you’re located.\n\nBack during World War II, Nazi Germany had been using a machine called Enigma to encrypt their military communications. Although their encryption method was basic compared to today’s standards, decrypting an intercepted message was a very time-consuming task for the Allies.\n\nBy the time the encryption was broken, the messages were obsolete. The Allies’ process was done by hand, and the Nazis made encryption even harder by modifying their encryption key every 24 hours. The Allies couldn’t keep up, they required a machine that could perform the decryption at a much greater speed.\n\nBritish mathematician Alan Turing solved the Allies’ dilemma by creating an electro-mechanical device that could perform different sets of instructions by reading paper programs. The Allies called this device “Bombe,” and that’s how the first computer was born. Bombe helped the Allies decrypt their enemies’ messages quickly enough to take action and counter their plans. Modern computers are still based on the same principles elaborated by Alan Turing in his Turing machine models. (Turing, in turn, was inspired by Charles Babbage’s 1837 Analytical Engine and Ada Lovelace’s subsequent understanding of it as a “universal engine.”)\n\nYou’ve possibly come across the phrase “Hello World” in the programming context. In fact, “Hello World” is often the default program when you first open a code editor.\n\nThe phrase comes from the first example in the 1978 book “The C Programming Language,” by Brian Kernighan and Dennis Ritchie. Many early programmers used this book to learn the C language, which is C++’s predecessor. “Hello World” caught on as a tradition—you’ll quite often see the phrase when starting to learn a programming language, or testing your first program. We’ll extend that tradition below.\n\nYour First Program in C++\n\nWe’ll now walk you through creating your first C++ program. You’ll only need to install a development environment and some basic tools. Follow along!\n\nBefore writing and running your first C++ program, you’ll need to install an IDE (Integrated Development Environment). This software allows you to write code and turn it into instructions that your computer will readily understand. Depending on your operating system, we recommend the following IDEs for your first C++ project:\n• For Windows: install the community version of Visual Studio for C++.\n• For Mac: install Xcode from the App Store.\n• For Linux: install Code::Blocks from the Code::Blocks website.\n\nHow To Make a Computer Say Hello\n\nTo begin, open Visual Studio, Xcode, or Code::Blocks and start a new project. Select “New console project,” give it a name, and let the program prepare your first bit of code.\n\nHere’s how this looks on Xcode (Mac), Visual Studio (Windows) and Code::Blocks (Linux):\n\nClick “Next” and “Finish.” The IDE will now create a sample program that you’ll be able to modify by opening the file “main.cpp”, which is where you write code.\n\nWhat you see now is a text editor — it may already contain code. Delete any contents and copy/paste this code instead:\n\nThis code contains all of the information needed to run your first program. Executing it will display a message in the console. Let’s look at the code. The first line contains:\n\niostream is a C++ library that contains functions such as the one that’s used to display a message on-screen. A function is a block of code that performs a task. C++ has many libraries available, and you’ll include those you’ll need at the beginning of your program, one per line. If we remove this library, the program won’t run. Let’s analyze the program itself, which starts with:\n\nWhen you run a program, it begins by calling a special function. This function must be called , as that marks the program’s starting point.\n\nThe indicates the type of message that the program will return once it finishes running. The function returns an integer. Usually, it returns when there are no errors. This would indicate to another program that everything went smoothly for this function.\n\nThe opening curly bracket { indicates the beginning of the function. This is part of C++ standard syntax and where we write code.\n\nThe following code is the syntax used to display a message:\n\nis the standard output stream and the text between the two quotation marks ” is going to be displayed to the user when the program is run. You use quotation marks to tell the compiler that the content between them should not be interpreted as code — it’s just text. The semicolon at the end of the line is the statement terminator. It marks the endpoint of the instruction in question.\n\nThe closing curly bracket marks the end of the function and the end of the program.\n\nIf you hit the “run” button (the arrow at the top or top left of your screen), the program will execute and you will see its output in the console window.\n\n\n\nThe compiler interpreted the code, turned it into a lower level code that the computer could understand, and then the computer executed it. The result is the sentence “Hello World Welcome to your first C++ program!” printed in your command prompt.\n\nCongratulations, you’ve just run your first program! C++ is the programming language of choice for thousands of programmers around the world, so welcome to the club.\n\nTo continue your coding journey, Udacity offers a variety of nanodegree programs based on your coding experience.\n\nIf you’re completely new to coding, check out our Introduction to Programming nanodegree, where you’ll learn programming fundamentals through HTML, CSS, and Python.\n\nIf you have intermediate knowledge of any language and want to learn C++, head over to our Become a C++ Developer nanodegree, where you’ll code five real-world projects."
    },
    {
        "link": "https://simplilearn.com/tutorials/cpp-tutorial/cpp-hello-world",
        "document": ""
    },
    {
        "link": "https://tutorialspoint.com/cplusplus/cpp_hello_world_program.htm",
        "document": "Printing \"Hello, World!\" is the first program in C++. Here, this prints \"Hello, World\" on the console (output screen). To start learning C++, it is the first step to print sometime on the screen.\n\nC++ Program to Print \"Hello, World!\"\n\nLet us see the first C++ program that prints \"Hello, World!\" −\n\nThis program will print \"Hello, World!\" on the output screen. The output will be −\n\nParts of C++ \"Hello, World!\" Program\n\nHere is the breakdown of the above code and all elements used in the above code −\n\nComments are used to specify a textual line that is not supposed to be executed when we compile the code. The compiler ignores the line, and proceeds to the next line. These are used for better readability and explanation of code in the comments section.\n\nThis is the comment −\n\nThe #include is known as a pre-processor directive in C++. It is used to include header files with specific methods and elements. Multiple #include statements are used to apply different header files in the program. The iostream is the header file that defines functions and operations related to the input/output stream.\n\nThe statement is used in the program is −\n\nNamespaces are used to differentiate code blocks with the same method names. In this program, the using namespace std; is used to set the namespace as standard for users to apply all standard methods in programs.\n\nHere is the code statement used in the program −\n\nThe main() function is the default starting point of any C++ program. It is compulsory for any C++ program to have a main function. The program logics are written inside the main program. The main function body is enclosed inside parenthesis ({}).\n\nThe print/output statement is cout followed by \"<<\" operator. This is used to print the given parameters specified in the statement on the screen. We can also print multiple elements in a single cout block.\n\nThe return statement is also known as the exit statement. It is used to exit from the corresponding function. The \"return 0\" is the default statement to exit from the main program.\n\nHere is the return statement used in the program −\n\nThe \"Hello, World!\" program can be compiled by using the Edit & Run button. You can also open our online C++ compiler, write the program, and compile it there.\n\nThe standard way to compile and run the C++ program is explained here: Compile and Run a C++ Program."
    },
    {
        "link": "https://en.cppreference.com/w/cpp/io/cout",
        "document": "The global objects and control output to a stream buffer of implementation-defined type (derived from std::streambuf), associated with the standard C output stream stdout.\n\nThese objects are guaranteed to be initialized during or before the first time an object of type std::ios_base::Init is constructed and are available for use in the constructors and destructors of static objects with ordered initialization (as long as is included before the object is defined).\n\nUnless std::ios_base::sync_with_stdio(false) has been issued, it is safe to concurrently access these objects from multiple threads for both formatted and unformatted output.\n\nBy specification of std::cin, std::cin.tie() returns &std::cout. This means that any input operation on executes std::cout.flush() (via std::basic_istream::sentry's constructor). Similarly, std::wcin.tie() returns &std::wcout.\n\nBy specification of std::cerr, std::cerr.tie() returns &std::cout. This means that any output operation on executes std::cout.flush() (via std::basic_ostream::sentry's constructor). Similarly, std::wcerr.tie() returns &std::wcout. (since C++11)\n\nThe 'c' in the name refers to \"character\" (stroustrup.com FAQ); means \"character output\" and means \"wide character output\".\n\nBecause dynamic initialization of templated variables are unordered, it is not guaranteed that has been initialized to a usable state before the initialization of such variables begins, unless an object of type std::ios_base::Init has been constructed."
    },
    {
        "link": "https://cplusplus.com/doc/tutorial/basic_io",
        "document": "std; main () { i; cout << \"Please enter an integer value: \" ; cin >> i; cout << \"The value you entered is \" << i; cout << \" and its double is \" << i*2 << ; 0; }\n\nPlease enter an integer value: 702 The value you entered is 702 and its double is 1404."
    },
    {
        "link": "https://geeksforgeeks.org/cout-in-c",
        "document": "In C++, cout is an object of the ostream class that is used to display output to the standard output device, usually the monitor. It is associated with the standard C output stream stdout. The insertion operator (<<) is used with cout to insert data into the output stream.\n\nLet’s take a look at an example:\n• << : It is the insertion operator used to insert data into cout.\n• var_name : It represents the variable or literal whose value you want to display.\n\nExamples of cout in C++\n\nThe below programs demonstrate how to use the cout for output purposes in C++.\n\nBelow is a list of some commonly used member functions of cout in C++:\n\nBelow is the implementation of the member functions of the cout.write() and cout.put():\n\nBelow is the C++ program to illustrate the use of cout.precision():"
    },
    {
        "link": "https://programiz.com/cpp-programming/library-function/iostream/cout",
        "document": "The object is used to display the output to the standard output device. It is defined in the iostream header file. #include <iostream> using namespace std; int main() { int a = 24; // print variable cout << \"Value of a is \" << a; return 0; } // Output: Value of a is 24\n\nThe syntax of the object is:\n• is usually a variable, but can also be an array element or elements of containers like vectors, lists, maps, etc.\n\nThe \"c\" in refers to \"character\" and \"out\" means \"output\". Hence means \"character output\".\n\nThe object is used along with the insertion operator in order to display a stream of characters. For example,\n\nThe operator can be used more than once with a combination of variables, strings, and manipulators (like ):\n\nThe object can also be used with other member functions such as , , etc. Some of the commonly used member functions are:\n• Displays the first character reading from .\n• Sets a given option. Commonly used options are , , , , etc.\n• Sets the decimal precision to while displaying floating-point values. Same as .\n\nThe prototype of as defined in the iostream header file is:\n\nThe object in C++ is an object of class . It is associated with the standard C output stream .\n\nThe object is ensured to be initialized during or before the first time an object of type is constructed. After the object is constructed, it is tied to cin which means that any input operation on executes ."
    },
    {
        "link": "https://geeksforgeeks.org/basic-input-output-c",
        "document": "In C++, input and output are performed in the form of a sequence of bytes or more commonly known as streams.\n• Input Stream: If the direction of flow of bytes is from the device (for example, Keyboard) to the main memory then this process is called input.\n• Output Stream: If the direction of flow of bytes is opposite, i.e. from main memory to device (display screen) then this process is called output.\n\nAll of these streams are defined inside the <iostream> header file which contains all the standard input and output tools of C++. The two instances cout and cin of iostream class are used very often for printing outputs and taking inputs respectively. These two are the most basic methods of taking input and printing output in C++.\n\nThe C++ cout is the instance of the ostream class used to produce output on the standard output device which is usually the display screen. The data needed to be displayed on the screen is inserted in the standard output stream (cout) using the insertion operator(<<).\n\nFor example, if we want to print text “GeeksforGeeks” on the display, we can use the cout as shown:\n\nExplanation: In the above program, cout is used to output the text “GeeksforGeeks” to the standard output stream. It works in conjunction with the insertion operator (<<) to send the specified data to the output stream.\n\nWe can also print the variable values using cout.\n\nUnderstanding input and output operations is essential for any C++ programmer. The C++ Course includes comprehensive lessons on basic I/O operations, ensuring you can manage user interaction in your programs.\n\nThe C++ cin statement is the instance of the class istream and is used to read input from the standard input device which is usually a keyboard. The extraction operator (>>) is used along with the object cin for extracting the data from the input stream and store it in some variable in the program.\n\nFor example, if we want to ask user for his/her age, then we can use cin as shown:\n\nExplanation: The above program asks the user to input the age. The object cin is connected to the input device (keyboard). The age entered by the user is extracted from cin using the extraction operator(>>) and the extracted data is then stored in the variable age present on the right side of the extraction operator.\n\nAlso, while taking text as input using cin, we need to remember that cin stops reading input as soon as it encounters a whitespace (space, tab, or newline). This means it only captures the first word or characters until the first whitespace. It is shown in the below example:\n\nThe C++ cerr is the standard error stream that is used to output the errors. This is also an instance of the iostream class. As cerr in C++ is un-buffered so it is used when one needs to display the error message immediately. It does not have any buffer to store the error message and display it later.\n\nThe main difference between cerr and cout comes when you would like to redirect output using “cout” that gets redirected to file if you use “cerr” the error doesn’t get stored in file.(This is what un-buffered means ..It cant store the message)\n\nThis is also an instance of ostream class and used to display errors but unlike cerr the error is first inserted into a buffer and is stored in the buffer until it is not fully filled. or the buffer is not explicitly flushed (using flush()). The error message will be displayed on the screen too."
    }
]