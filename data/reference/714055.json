[
    {
        "link": "https://numpy.org/doc/2.1/reference/generated/numpy.resize.html",
        "document": "Return a new array with the specified shape.\n\nIf the new array is larger than the original array, then the new array is filled with repeated copies of a. Note that this behavior is different from a.resize(new_shape) which fills with zeros instead of repeated copies of a.\n\nWhen the total size of the array does not change should be used. In most other cases either indexing (to reduce the size) or padding (to increase the size) may be a more appropriate solution.\n\nWarning: This functionality does not consider axes separately, i.e. it does not apply interpolation/extrapolation. It fills the return array with the required number of elements, iterating over a in C-order, disregarding axes (and cycling back from the start if the new shape is larger). This functionality is therefore not suitable to resize images, or data where each axis represents a separate and distinct entity."
    },
    {
        "link": "https://numpy.org/doc/2.0/reference/generated/numpy.resize.html",
        "document": "Return a new array with the specified shape.\n\nIf the new array is larger than the original array, then the new array is filled with repeated copies of a. Note that this behavior is different from a.resize(new_shape) which fills with zeros instead of repeated copies of a.\n\nWhen the total size of the array does not change should be used. In most other cases either indexing (to reduce the size) or padding (to increase the size) may be a more appropriate solution.\n\nWarning: This functionality does not consider axes separately, i.e. it does not apply interpolation/extrapolation. It fills the return array with the required number of elements, iterating over a in C-order, disregarding axes (and cycling back from the start if the new shape is larger). This functionality is therefore not suitable to resize images, or data where each axis represents a separate and distinct entity."
    },
    {
        "link": "https://numpy.org/devdocs/reference/generated/numpy.resize.html",
        "document": "Return a new array with the specified shape.\n\nIf the new array is larger than the original array, then the new array is filled with repeated copies of a. Note that this behavior is different from a.resize(new_shape) which fills with zeros instead of repeated copies of a.\n\nWhen the total size of the array does not change should be used. In most other cases either indexing (to reduce the size) or padding (to increase the size) may be a more appropriate solution.\n\nWarning: This functionality does not consider axes separately, i.e. it does not apply interpolation/extrapolation. It fills the return array with the required number of elements, iterating over a in C-order, disregarding axes (and cycling back from the start if the new shape is larger). This functionality is therefore not suitable to resize images, or data where each axis represents a separate and distinct entity."
    },
    {
        "link": "https://numpy.org/doc/2.2/user/quickstart.html",
        "document": "You’ll need to know a bit of Python. For a refresher, see the Python tutorial. To work the examples, you’ll need installed in addition to NumPy. This is a quick overview of arrays in NumPy. It demonstrates how n-dimensional (\\(n>=2\\)) arrays are represented and can be manipulated. In particular, if you don’t know how to apply common functions to n-dimensional arrays (without using for-loops), or if you want to understand axis and shape properties for n-dimensional arrays, this article might be of help. After reading, you should be able to:\n• None Understand the difference between one-, two- and n-dimensional arrays in NumPy;\n• None Understand how to apply some linear algebra operations to n-dimensional arrays without using for-loops;\n\nNumPy’s main object is the homogeneous multidimensional array. It is a table of elements (usually numbers), all of the same type, indexed by a tuple of non-negative integers. In NumPy dimensions are called axes. For example, the array for the coordinates of a point in 3D space, , has one axis. That axis has 3 elements in it, so we say it has a length of 3. In the example pictured below, the array has 2 axes. The first axis has a length of 2, the second axis has a length of 3. NumPy’s array class is called . It is also known by the alias . Note that is not the same as the Standard Python Library class , which only handles one-dimensional arrays and offers less functionality. The more important attributes of an object are: the number of axes (dimensions) of the array. the dimensions of the array. This is a tuple of integers indicating the size of the array in each dimension. For a matrix with n rows and m columns, will be . The length of the tuple is therefore the number of axes, . the total number of elements of the array. This is equal to the product of the elements of . an object describing the type of the elements in the array. One can create or specify dtype’s using standard Python types. Additionally NumPy provides types of its own. numpy.int32, numpy.int16, and numpy.float64 are some examples. the size in bytes of each element of the array. For example, an array of elements of type has 8 (=64/8), while one of type has 4 (=32/8). It is equivalent to . the buffer containing the actual elements of the array. Normally, we won’t need to use this attribute because we will access the elements in an array using indexing facilities. There are several ways to create arrays. For example, you can create an array from a regular Python list or tuple using the function. The type of the resulting array is deduced from the type of the elements in the sequences. A frequent error consists in calling with multiple arguments, rather than providing a single sequence as an argument. : array() takes from 1 to 2 positional arguments but 4 were given transforms sequences of sequences into two-dimensional arrays, sequences of sequences of sequences into three-dimensional arrays, and so on. The type of the array can also be explicitly specified at creation time: Often, the elements of an array are originally unknown, but its size is known. Hence, NumPy offers several functions to create arrays with initial placeholder content. These minimize the necessity of growing arrays, an expensive operation. The function creates an array full of zeros, the function creates an array full of ones, and the function creates an array whose initial content is random and depends on the state of the memory. By default, the dtype of the created array is , but it can be specified via the key word argument . To create sequences of numbers, NumPy provides the function which is analogous to the Python built-in , but returns an array. When is used with floating point arguments, it is generally not possible to predict the number of elements obtained, due to the finite floating point precision. For this reason, it is usually better to use the function that receives as an argument the number of elements that we want, instead of the step: # useful to evaluate function at lots of points When you print an array, NumPy displays it in a similar way to nested lists, but with the following layout:\n• None the last axis is printed from left to right,\n• None the second-to-last is printed from top to bottom,\n• None the rest are also printed from top to bottom, with each slice separated from the next by an empty line. One-dimensional arrays are then printed as rows, bidimensionals as matrices and tridimensionals as lists of matrices. See below to get more details on . If an array is too large to be printed, NumPy automatically skips the central part of the array and only prints the corners: To disable this behaviour and force NumPy to print the entire array, you can change the printing options using . Arithmetic operators on arrays apply elementwise. A new array is created and filled with the result. Unlike in many matrix languages, the product operator operates elementwise in NumPy arrays. The matrix product can be performed using the operator (in python >=3.5) or the function or method: Some operations, such as and , act in place to modify an existing array rather than create a new one. # b is not automatically converted to integer type : Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind' When operating with arrays of different types, the type of the resulting array corresponds to the more general or precise one (a behavior known as upcasting). Many unary operations, such as computing the sum of all the elements in the array, are implemented as methods of the class. By default, these operations apply to the array as though it were a list of numbers, regardless of its shape. However, by specifying the parameter you can apply an operation along the specified axis of an array: NumPy provides familiar mathematical functions such as sin, cos, and exp. In NumPy, these are called “universal functions” ( ). Within NumPy, these functions operate elementwise on an array, producing an array as output. One-dimensional arrays can be indexed, sliced and iterated over, much like lists and other Python sequences. # from start to position 6, exclusive, set every 2nd element to 1000 Multidimensional arrays can have one index per axis. These indices are given in a tuple separated by commas: # each row in the second column of b # equivalent to the previous example # each column in the second and third row of b When fewer indices are provided than the number of axes, the missing indices are considered complete slices # the last row. Equivalent to b[-1, :] The expression within brackets in is treated as an followed by as many instances of as needed to represent the remaining axes. NumPy also allows you to write this using dots as . The dots ( ) represent as many colons as needed to produce a complete indexing tuple. For example, if is an array with 5 axes, then # same as c[1, :, :] or c[1] Iterating over multidimensional arrays is done with respect to the first axis: However, if one wants to perform an operation on each element in the array, one can use the attribute which is an iterator over all the elements of the array:\n\nChanging the shape of an array# An array has a shape given by the number of elements along each axis: The shape of an array can be changed with various commands. Note that the following three commands all return a modified array, but do not change the original array: The order of the elements in the array resulting from is normally “C-style”, that is, the rightmost index “changes the fastest”, so the element after is . If the array is reshaped to some other shape, again the array is treated as “C-style”. NumPy normally creates arrays stored in this order, so will usually not need to copy its argument, but if the array was made by taking slices of another array or created with unusual options, it may need to be copied. The functions and can also be instructed, using an optional argument, to use FORTRAN-style arrays, in which the leftmost index changes the fastest. The function returns its argument with a modified shape, whereas the method modifies the array itself: If a dimension is given as in a reshaping operation, the other dimensions are automatically calculated: Several arrays can be stacked together along different axes: The function stacks 1D arrays as columns into a 2D array. It is equivalent to only for 2D arrays: # the result is different In general, for arrays with more than two dimensions, stacks along their second axes, stacks along their first axes, and allows for an optional arguments giving the number of the axis along which the concatenation should happen. In complex cases, and are useful for creating arrays by stacking numbers along one axis. They allow the use of range literals . When used with arrays as arguments, and are similar to and in their default behavior, but allow for an optional argument giving the number of the axis along which to concatenate. Splitting one array into several smaller ones# Using , you can split an array along its horizontal axis, either by specifying the number of equally shaped arrays to return, or by specifying the columns after which the division should occur: # Split `a` after the third and the fourth column splits along the vertical axis, and allows one to specify along which axis to split.\n\nWhen operating and manipulating arrays, their data is sometimes copied into a new array and sometimes not. This is often a source of confusion for beginners. There are three cases: No copy at all# Simple assignments make no copy of objects or their data. # no new object is created # a and b are two names for the same ndarray object Python passes mutable objects as references, so function calls make no copy. # id is a unique identifier of an object Different array objects can share the same data. The method creates a new array object that looks at the same data. # c is a view of the data owned by a # a's shape doesn't change, reassigned c is still a view of a Slicing an array returns a view of it: # s[:] is a view of s. Note the difference between s = 10 and s[:] = 10 The method makes a complete copy of the array and its data. # a new array object with new data is created Sometimes should be called after slicing if the original array is not required anymore. For example, suppose is a huge intermediate result and the final result only contains a small fraction of , a deep copy should be made when constructing with slicing: # the memory of ``a`` can be released. If is used instead, is referenced by and will persist in memory even if is executed. See also Copies and views. Here is a list of some useful NumPy functions and methods names ordered in categories. See Routines and objects by topic for the full list.\n\nNumPy offers more indexing facilities than regular Python sequences. In addition to indexing by integers and slices, as we saw before, arrays can be indexed by arrays of integers and arrays of booleans. # the elements of `a` at the positions `i` When the indexed array is multidimensional, a single array of indices refers to the first dimension of . The following example shows this behavior by converting an image of labels into a color image using a palette. # each value corresponds to a color in the palette We can also give indexes for more than one dimension. The arrays of indices for each dimension must have the same shape. # indices for the first dim of `a` # indices for the second dim # i and j must have equal shape In Python, is exactly the same as —so we can put and in a and then do the indexing with that. However, we can not do this by putting and into an array, because this array will be interpreted as indexing the first dimension of . File , line , in : index 3 is out of bounds for axis 0 with size 3 Another common use of indexing with arrays is the search of the maximum value of time-dependent series: # index of the maxima for each series # times corresponding to the maxima You can also use indexing with arrays as a target to assign to: However, when the list of indices contains repetitions, the assignment is done several times, leaving behind the last value: This is reasonable enough, but watch out if you want to use Python’s construct, as it may not do what you expect: Even though 0 occurs twice in the list of indices, the 0th element is only incremented once. This is because Python requires to be equivalent to . When we index arrays with arrays of (integer) indices we are providing the list of indices to pick. With boolean indices the approach is different; we explicitly choose which items in the array we want and which ones we don’t. The most natural way one can think of for boolean indexing is to use boolean arrays that have the same shape as the original array: # `b` is a boolean with `a`'s shape This property can be very useful in assignments: # All elements of `a` higher than 4 become 0 You can look at the following example to see how to use boolean indexing to generate an image of the Mandelbrot set: \"\"\"Returns an image of the Mandelbrot fractal of size (h,w).\"\"\" The second way of indexing with booleans is more similar to integer indexing; for each dimension of the array we give a 1D boolean array selecting the slices we want: Note that the length of the 1D boolean array must coincide with the length of the dimension (or axis) you want to slice. In the previous example, has length 3 (the number of rows in ), and (of length 4) is suitable to index the 2nd axis (columns) of . The function can be used to combine different vectors so as to obtain the result for each n-uplet. For example, if you want to compute all the a+b*c for all the triplets taken from each of the vectors a, b and c: You could also implement the reduce as follows: The advantage of this version of reduce compared to the normal ufunc.reduce is that it makes use of the broadcasting rules in order to avoid creating an argument array the size of the output times the number of vectors."
    },
    {
        "link": "https://quora.com/What-is-the-difference-between-NumPy-resize-and-reshape-functions",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://stackoverflow.com/questions/8090229/resize-with-averaging-or-rebin-a-numpy-2d-array",
        "document": "I was trying to downscale a raster -- take a roughly 6000 by 2000 size raster and turn it into an arbitrarily sized smaller raster that averaged the values properly across the previous bins sizes. I found a solution using SciPy, but then I couldn't get SciPy to install on the shared hosting service I was using, so I just wrote this function instead. There is likely a better ways to do this that doesn't involve looping through the rows and columns, but this does seem to work.\n\nThe nice part about this is that the old number of rows and columns don't have to be divisible by the new number of rows and columns."
    },
    {
        "link": "https://realpython.com/numpy-reshape",
        "document": "The main data structure that you’ll use in NumPy is the N-dimensional array. An array can have one or more dimensions to structure your data. In some programs, you may need to change how you organize your data within a NumPy array. You can use NumPy’s to rearrange the data.\n\nThe shape of an array describes the number of dimensions in the array and the length of each dimension. In this tutorial, you’ll learn how to change the shape of a NumPy array to place all its data in a different configuration. When you complete this tutorial, you’ll be able to alter the shape of any array to suit your application’s needs.\n\nIn this tutorial, you’ll learn how to:\n• Change the shape of a NumPy array without changing its number of dimensions\n• Control how data is rearranged when reshaping an array with the parameter\n• Use a wildcard value of for one of the dimensions in\n\nFor this tutorial, you should be familiar with the basics of NumPy and N-dimensional arrays. You can read NumPy Tutorial: Your First Steps Into Data Science in Python to learn more about NumPy before diving in.\n\nYou’ll use NumPy’s in this tutorial. In this section, you’ll review the key features of this data structure, including an array’s overall shape and number of dimensions. You can create an array from a list of lists: The function returns an object of type . This data structure is the main data type in NumPy. You can describe the shape of an array using the length of each dimension of the array. NumPy represents this as a tuple of integers. The array has two rows and four columns. Therefore, this array has a shape: You can represent the same data using a different shape: Both of these arrays contain the same data. The array with the shape has two rows and four columns and the array with the shape has four rows and two columns. You can check the number of dimensions of an array using : The array is two-dimensional (2D). You can arrange the same data contained in in arrays with a different number of dimensions: The array with the shape is one-dimensional (1D), and the array with the shape is three-dimensional (3D). Both have the same data as the original array, . You can use the attribute to understand the array’s characteristics:\n• Number of dimensions: The length of the tuple shows you how many dimensions are in the array. For example, contains two items, which means that an array with this shape is a 2D array.\n• Length of each dimension: The integers in represent the length of each dimension in the array. For example, if the shape of an array is , then the first dimension has a length of 2 and the second dimension has a length of 4. You can use the information contained in the tuple to understand the structure of the arrays that you’re working with. NumPy’s allows you to change the shape of the array without changing its data. You can reshape an array into a different configuration with either the same or a different number of dimensions. In the following sections, you’ll work through several short examples that use to convert arrays from one shape into another.\n\nNumPy’s enables you to change the shape of an array into another compatible shape. Not all shapes are compatible since all the elements from the original array needs to fit into the new array. You can use as either a function or a method. The documentation for the function shows three parameters:\n• is a tuple or an integer with the shape of the new array. When is an integer, the new array will have one dimension.\n• enables you to determine how the data is configured in the new array. You’ll use the first two parameters in this section. You’ll learn about later in this tutorial. When using as a method of , you no longer need to use the first parameter, , since the object is always passed to the method as its first argument. You’ll use as a method in the rest of this tutorial. However, everything you learn about this method also applies to the function. Note: A method is a function defined inside a class body. You call as a function using . The equivalent method call is . In this section of the tutorial, you’ll explore NumPy’s through an example. You need to write code to help a school’s head of computing, who needs to transform some data. There are five classes in the same grade level, with ten pupils each. A 2D array stores the anonymized test results for each student. The shape of the array is . The five rows represent the classes, and each row has the test score for each student in the class. You can re-create a version of this array using random values. You can generate random values in NumPy by using the generator and then calling one of its methods. In this example, you call : The method creates uniformly distributed random integers in the range defined by the first two arguments. The third argument, , sets the shape of the array. The uniform distribution of integers is convenient for this example, but you can also use other distributions. The head of computing analyzed the results of each class separately and now wants to convert the array into a single row containing all the results to continue working on the year as a whole. One option is to convert the array with five rows and ten columns into a new array with one row and fifty columns. You can achieve this using : You pass the tuple as an argument, and it’s assigned to the parameter . The first ten items in are the test scores for the students in the first class. The second class’s results follow these, and so on. Warning: You shouldn’t reshape an array by setting the value of the attribute . Although this works for now, it’s discouraged and may be deprecated in the future. Use instead. Although only has one row, it’s still a 2D array in NumPy. You can confirm this in a number of ways:\n• The attribute is a tuple with two values.\n• The attribute has a value of 2.\n• When is displayed, there are two pairs of square brackets. If you want to access the first test score in this array, then you’ll need to use both row and column indices since is a 2D array: When you use a single index, as in , the index refers to the row. You access the first element using .\n\nIn this section, you’ll work on a new example. You installed a temperature sensor that records the house’s temperature every three hours. The sensor outputs a 1D NumPy array with all the readings. You’ll use random values to represent the temperature readings in this example: You call to get a normal distribution with a mean temperature of 18 degrees Celsius and a standard deviation of 1 degree Celsius. The resulting array has one dimension since the argument isn’t a tuple but a single integer. You’ll reshape this array into different configurations in the following sections of this tutorial. You want to rearrange the data so that each 24-hour period is in a separate row of the array. Each row will have eight temperature readings since the sensor records a value every three hours. The array contains 200 readings which means that the reshaped array should have 25 rows each containing eight values: The original array’s first eight temperature readings make up the first row in the reshaped array. The following eight temperatures are stored in the second row of , and so on. You can access the readings for a single 24-hour period more easily with this 2D array. For example, you can extract the readings for the second day using : When you use the index , you get the 1D array, which is in the second place in . You used NumPy to increase the number of dimensions of the original array from one to two, keeping all the data in the correct order. In the next section, you’ll explore what happens when the shape of the new array isn’t compatible with the original.\n\nEnsure the Shape of the New Array Is Compatible With the Original Array You decide you would also like to organize your data into weeks, and you want to reshape the array into three dimensions:\n• The first dimension represents the weeks.\n• The second dimension represents the days within a week.\n• The third dimension represents the individual readings within a day. Each week includes 56 temperature readings since there are eight readings each day and seven days a week. Therefore, the complete set of 200 readings isn’t divisible into a whole number of weeks. There are three full weeks, but that leaves extra readings from part of the fourth week. You can attempt to reshape the array to include three weeks of data by passing the tuple to . However, this will fail: : cannot reshape array of size 200 into shape (3,7,8) This raises an error since an array of shape contains 168 elements. The original array with 200 values can’t fit into this new array. You can reshape an array if the dimensions of the new array are compatible with those of the original one. To create an array of shape you can trim the original data to the first 168 values: You’ve increased the number of dimensions of the original array from one to three using . In this example, you had to remove some of the original data to achieve the required shape. If you don’t want to discard any of the data, then you can extend the original array instead of trimming it. You’ll need to choose a value to fill in the additional places in the extended array. In this example, you’ll use NumPy’s Not a Number constant, . This constant is suitable since any numeric value that you use could be mistaken for a temperature value: You work out how many values you need to add to the array to fill a whole number of weeks. The extended array is the result of using to add an array full of values to . You use to create the array with values. Now you can reshape the extended array into the shape that you need to have four weeks of data: The new array, , now has the shape . The values in the final week in the array with no temperature data are filled with . When you want to reshape an array into a new shape that’s not compatible with the original one, you’ll need to decide whether you prefer to trim an array or extend it with filler values.\n\nControl How the Data Is Rearranged Using In the examples that you’ve worked on so far, the reshaped arrays always had the data configured correctly. For example, the first eight values in the 1D array were rearranged into the first row of the 2D array . This first row represents the first day of data collection. There will be cases where the default rearranged configuration doesn’t match your requirements. You’ll see an example of this situation in this tutorial section and learn how to use the optional parameter in NumPy’s to obtain the configuration you need. NumPy’s has an optional parameter, , which allows you to control how the data is rearranged when you reshape an array. This parameter can accept either , , or as an argument. You can start by creating a simple array and then explore the first two of these arguments: The new arrays both have two rows and four columns. However, the elements are rearranged in different configurations. The string arguments and represent the programming languages C and Fortran. These languages use different versions of array indexing:\n• C uses the row-major order of indexing.\n• Fortran uses the column-major order of indexing. These terms originally refer to how elements are stored in memory in an array. However, the memory configuration isn’t relevant when using either or as an argument for . The order of the indices refers to the sequential order of all the elements in the array. You can think of this as the order in which you would read out all the elements. In the row-major order, the sequence of elements goes along rows first. Once you reach the end of the row, you’ll continue from the beginning of the next row. In the column-major order, the sequence of elements goes down the columns first. Once you reach the end of a column, you’ll continue from the top of the next column. You can visualize this difference with the following diagram: This diagram shows the different order of elements in a 2D array. You can extend the same concept to higher-dimensional arrays. In the example above, when you pass as an argument for , the elements from the original array fill the new array using the C-like, or row-major, order. The first four elements fill the first row of the new array. When the first row is full, the remaining items start filling the second row. Therefore, converts the original array’s eight elements to the new array in the following order of indices when using : This diagram shows the order of the indices when you use C-like indexing. With , the final axis is the quickest to change as elements are read and written. The last index changes for each successive element, but the first index only changes after four elements, when a row is complete. When you pass as an argument, uses the Fortran-like, or column-major, order. The columns are filled first. Therefore, converts the original array’s eight elements to the new array in the following order of indices when using : This diagram shows the order of the indices when you use Fortran-like indexing. In this case, the first index is changing faster because it changes for each successive element. The second index changes once each column is complete. Although the different indexing orders originally represent the memory configuration of the array, the result of doesn’t depend on the actual memory configuration when you use and as arguments for . There’s a third option in addition to and . If you pass to the parameter , then the index order will match the memory layout of the array. In most cases, you’re not aware of the the memory layout of the arrays in your program because you rely on the NumPy package to take care of these details for you. This is one of the benefits of using NumPy. Therefore, and are the arguments you’re most likely to need. In this section, you’ll read a color image into a 3D NumPy array and create a triptych showing the red, green, and blue components side by side in a 2D image. You’ll use the Pillow library to read the image and convert it to a NumPy array. You can install the library to your virtual environment using : You can use the image file (image credit) provided with this tutorial or your own image if you prefer. You’ll need to place the file in the project folder that you’re working in. If you’d like to use the provided image, then download the supplemental materials by clicking below: Supplemental Material: Click here to download the image repository that you’ll use with NumPy . Start by reading the image file using Pillow and converting it to a NumPy array. You can also display the image using Pillow: The call will display the image using your default software for viewing images: As this is a color image, it’s converted to a 3D NumPy array when you pass as an argument to . The first two dimensions represent the width and height of the image in pixels. The third dimension represents the red, green, and blue channels. Some images may also include the alpha value in the third dimension. You want to convert this 3D array into a 2D image with the same height as the original image and three times the width so that you’re displaying the image’s red, green, and blue components side by side. Now see what happens when you reshape the 3D array. You can extract the height and width of the image in pixels by unpacking and discarding the third dimension: You reshape the 3D array into two dimensions and show the image. However, this isn’t the image that you were aiming for: The default argument for is . This means that when rearranging the 3D array, changes the last axis fastest. The last axis is the one that represents the three color channels. Therefore, when populating the new array, first takes the red channel’s value for the image’s top-left pixel. Then it takes the green channel’s value for the same pixel and places it next to the red value. The next element in the new array is the blue channel’s value for the first pixel in the original color image. The first three pixels in the first row of the new image all come from the first pixel of the original color image. Each pixel in the image is stretched out horizontally using its red, green, and blue values. You can see this by zooming in on a section of the image using from the Pillow library: You use to select a small region of the original image. This shows a section of the image containing part of a red flower and the blue sky: The portion of the image containing the sky has a strong blue component, while the portion of the image with the flower has a strong red component. If you follow a column in this cropped image from top to bottom, then you’ll see the brightest values shift sideways as you move from a sky portion to a flower portion of the image. This observation confirms that each pixel in the original image is represented by its red, green, and blue components side by side in this reshaped 2D version. However, if followed a different order and the third axis was the one that changed last, then you’d get a different image. This is the Fortran-like index order, which you can achieve by passing to the parameter: You use the argument when you call . The image now has the three color channels side by side: The image on the left shows the red channel from the original image. The brightest pixels are the ones that represent the flowers’ petals. These petals are red in the original image. You can contrast this with the image on the right, which is the blue channel. The brightest pixels correspond to portions of the image showing the sky, and the pixels representing the petals are dark in the blue channel. In this example, you’ve seen how the order in which you reshape an array can significantly impact the result. You can use the parameter in NumPy’s to control how the data is rearranged when reshaping the array.\n\nUse as an Argument in NumPy In all the examples that you’ve used in this tutorial, you always included the lengths of all the dimensions in the reshaped array. But if you want, you can include a wildcard option for one of the dimensions and let infer the length of the rest of the information. You can use the same array that you used earlier, or you can re-create a new one if you’re working in a new REPL session: There are eight readings in each 24-hour period. Earlier, you’ve manually divided 200 by 8 to determine there should be 25 rows in the reshaped array. However, you can use the value as the length for the first dimension when reshaping: You pass a tuple with as its first element. A negative number can’t be a valid length for a dimension. The value of is used to let work out the length of the remaining dimension. You can use any negative number as a wildcard value, although it’s best to use as described in the documentation. You can only replace one of the dimensions with . You’ll get an error if you include more than once: : can only specify one unknown dimension This code raises a since the argument that you pass to contains more than one occurrence of . There isn’t enough information to infer the length of the two unknown dimensions. You can use this wildcard option to flatten an array with any number of dimensions. You flatten an array when you collapse it to a single dimension: You create an array named , with four dimensions. The attribute confirms the number of dimensions. The flattened array is a 1D array with a length of 72. The length of the new 1D array is the product of the lengths of all four dimensions in the original array. Note: For an alternate approach, check out the Flattening Python Lists for Data Science With NumPy. You can use the value to make your code more flexible since you don’t need to know the length of one of the dimensions of the reshaped array."
    },
    {
        "link": "https://numpy.org/doc/2.1/reference/generated/numpy.resize.html",
        "document": "Return a new array with the specified shape.\n\nIf the new array is larger than the original array, then the new array is filled with repeated copies of a. Note that this behavior is different from a.resize(new_shape) which fills with zeros instead of repeated copies of a.\n\nWhen the total size of the array does not change should be used. In most other cases either indexing (to reduce the size) or padding (to increase the size) may be a more appropriate solution.\n\nWarning: This functionality does not consider axes separately, i.e. it does not apply interpolation/extrapolation. It fills the return array with the required number of elements, iterating over a in C-order, disregarding axes (and cycling back from the start if the new shape is larger). This functionality is therefore not suitable to resize images, or data where each axis represents a separate and distinct entity."
    },
    {
        "link": "https://numpy.org/doc/stable/reference/generated/numpy.reshape.html",
        "document": "Gives a new shape to an array without changing its data.\n\nThe new shape should be compatible with the original shape. If an integer, then the result will be a 1-D array of that length. One shape dimension can be -1. In this case, the value is inferred from the length of the array and remaining dimensions. Read the elements of using this index order, and place the elements into the reshaped array using this index order. ‘C’ means to read / write the elements using C-like index order, with the last axis index changing fastest, back to the first axis index changing slowest. ‘F’ means to read / write the elements using Fortran-like index order, with the first index changing fastest, and the last index changing slowest. Note that the ‘C’ and ‘F’ options take no account of the memory layout of the underlying array, and only refer to the order of indexing. ‘A’ means to read / write the elements in Fortran-like index order if is Fortran contiguous in memory, C-like order otherwise. Deprecated since version 2.1: Replaced by argument. Retained for backward compatibility. If , then the array data is copied. If , a copy will only be made if it’s required by . For it raises a if a copy cannot be avoided. Default: . This will be a new view object if possible; otherwise, it will be a copy. Note there is no guarantee of the memory layout (C- or Fortran- contiguous) of the returned array.\n\nIt is not always possible to change the shape of an array without copying the data.\n\nThe keyword gives the index ordering both for fetching the values from , and then placing the values into the output array. For example, let’s say you have an array:\n\nYou can think of reshaping as first raveling the array (using the given index order), then inserting the elements from the raveled array into the new array using the same kind of index ordering as was used for the raveling."
    },
    {
        "link": "https://datacamp.com/tutorial/python-numpy-tutorial",
        "document": "Master your skills in NumPy by learning how to create, sort, filter, and update arrays using NYC’s tree census."
    }
]