[
    {
        "link": "https://mathworks.com/help/instrument/send-and-receive-data-over-a-tcpip-network.html",
        "document": ""
    },
    {
        "link": "https://mathworks.com/help/instrument/tcpipreceive.html",
        "document": ""
    },
    {
        "link": "https://knowledge.ni.com/KnowledgeArticleDetails?id=kA0VU0000003bB70AI&l=en-US",
        "document": "Configure LabVIEW:To configure LabVIEW to act as a Server, you need to create a VI. You can create a simple VI using the steps in Basic TCP/IP Communication in LabVIEW or refer to thein thedirectory for an example of using the TCP VI and functions. Here you can findConfigure the port number for TCP/IP communication.Configure Simulink:\n• On the Simulink start page, click Blank Model>>Create Model. An empty Editor window opens.\n• In the toolstrip, click Save to assign a name to your new model.\n• In the toolstrip, click Library Browser in the Simulation tab.\n• The Simulink Library Browser opens. The left pane contains a tree of available block libraries in alphabetical order. Click Instrument Control Toolbox.\n• To use a block, add it to an existing model or create a new model.\n• To use a block in a model, drag the block into the Simulink Editor. For this model, you need one instance of the TCP/IP Receive block in your model.\n• Make the connection between the output port of the TCP/IP Receive block and the input port of the Scope block.\n• Double-click the Receive block to open its parameters dialog box.\n• Set the Remote address to localhost and fill the Port field. The port number in Simulink must be the same as configured in LabVIEW.\n\nStep 3: Drag the Instrument Control Toolbox Blocks into the ModelStep 4: Specify the Block Parameter ValuesView the Results:After configuration steps, run the LabVIEW Server vi and after that run Simulink Client simulation. The number sent via LabVIEW will be visible in Simulink as well.Configure Simulink:Step 1: Install Simulink Desktop Real-Time KernelTheneeds to be installed in Simulink. To do that go to Matlab Workplace and in the Command Window type sldrtkernel -setupAfter the successful installation, there is a need to restart the PC.Step 2: using the Simulink Stream Output blockThe Simulinkfunction is located in Simulink Library Browser>>Simulink Desktop Real-Time - 1 section.In the Block Parameters section, there is a need to create a new board by clicking on thebutton.In the opened drop-down menu go toIn the opened window there is a need to configure the, select the: (the one there is a need to use), the: (can be any port), and theIn the Block Parameters section, the Format string: represents the data type to transfer. In this case, it ismeaning the representation of numeric value is Integer. If there is a need to transfer a double value, you should useConfigure LabVIEW:In LabVIEW a simple VI needs to be created as a TCP client. You can create a simple VI using the steps in Basic TCP/IP Communication in LabVIEW or refer to thein thedirectory for an example of using the TCP VI and functions. Here you can findConfigure the port number for TCP/IP communication.The bytes to read value should represent the digits of the numeric data. As LabVIEW receives the data in string values, it represents each digit as one byte, so if you are sending a two-digit value, you should read it in two bytes.View the results:When starting the transfer of the data, you should run the Simulink model first and then the LabVIEW VI."
    },
    {
        "link": "https://go.gale.com/ps/i.do?id=GALE%7CA224712805&sid=googleScholar&v=2.1&it=r&linkaccess=abs&issn=17269679&p=AONE&sw=w",
        "document": ""
    },
    {
        "link": "https://knowledge.ni.com/KnowledgeArticleDetails?id=kA0VU0000003bB70AI",
        "document": "Configure LabVIEW:To configure LabVIEW to act as a Server, you need to create a VI. You can create a simple VI using the steps in Basic TCP/IP Communication in LabVIEW or refer to thein thedirectory for an example of using the TCP VI and functions. Here you can findConfigure the port number for TCP/IP communication.Configure Simulink:\n• On the Simulink start page, click Blank Model>>Create Model. An empty Editor window opens.\n• In the toolstrip, click Save to assign a name to your new model.\n• In the toolstrip, click Library Browser in the Simulation tab.\n• The Simulink Library Browser opens. The left pane contains a tree of available block libraries in alphabetical order. Click Instrument Control Toolbox.\n• To use a block, add it to an existing model or create a new model.\n• To use a block in a model, drag the block into the Simulink Editor. For this model, you need one instance of the TCP/IP Receive block in your model.\n• Make the connection between the output port of the TCP/IP Receive block and the input port of the Scope block.\n• Double-click the Receive block to open its parameters dialog box.\n• Set the Remote address to localhost and fill the Port field. The port number in Simulink must be the same as configured in LabVIEW.\n\nStep 3: Drag the Instrument Control Toolbox Blocks into the ModelStep 4: Specify the Block Parameter ValuesView the Results:After configuration steps, run the LabVIEW Server vi and after that run Simulink Client simulation. The number sent via LabVIEW will be visible in Simulink as well.Configure Simulink:Step 1: Install Simulink Desktop Real-Time KernelTheneeds to be installed in Simulink. To do that go to Matlab Workplace and in the Command Window type sldrtkernel -setupAfter the successful installation, there is a need to restart the PC.Step 2: using the Simulink Stream Output blockThe Simulinkfunction is located in Simulink Library Browser>>Simulink Desktop Real-Time - 1 section.In the Block Parameters section, there is a need to create a new board by clicking on thebutton.In the opened drop-down menu go toIn the opened window there is a need to configure the, select the: (the one there is a need to use), the: (can be any port), and theIn the Block Parameters section, the Format string: represents the data type to transfer. In this case, it ismeaning the representation of numeric value is Integer. If there is a need to transfer a double value, you should useConfigure LabVIEW:In LabVIEW a simple VI needs to be created as a TCP client. You can create a simple VI using the steps in Basic TCP/IP Communication in LabVIEW or refer to thein thedirectory for an example of using the TCP VI and functions. Here you can findConfigure the port number for TCP/IP communication.The bytes to read value should represent the digits of the numeric data. As LabVIEW receives the data in string values, it represents each digit as one byte, so if you are sending a two-digit value, you should read it in two bytes.View the results:When starting the transfer of the data, you should run the Simulink model first and then the LabVIEW VI."
    },
    {
        "link": "https://ctms.engin.umich.edu/CTMS/index.php?example=InvertedPendulum&section=SimulinkModeling",
        "document": "In this page we outline how to build a model of our inverted pendulum system for the purposes of simulation using Simulink and its add-ons. A great advantage of simulation, as will be demonstrated in this example, is that it can generate numerical solutions to nonlinear equations for which closed-form solutions cannot be generated. The nonlinear simulation can then be employed to test the validity of a linearized version of the model. The simulation model can also be used to evaluate the performance of the control scheme designed based on the linearized model.\n\nIn this example we will consider a two-dimensional version of the inverted pendulum system with cart where the pendulum is constrained to move in the vertical plane shown in the figure below. For this system, the control input is the force that moves the cart horizontally and the outputs are the angular position of the pendulum and the horizontal position of the cart .\n\nFor this example, let's assume the following quantities:\n\nBelow are the two free-body diagrams of the system.\n\nThis system is challenging to model in Simulink because of the physical constraint (the pin joint) between the cart and pendulum which reduces the degrees of freedom in the system. Both the cart and the pendulum have one degree of freedom ( and , respectively). We will generate the differential equations for these degrees of freedom from first principles employing Newton's second law ( ) as shown below.\n\nIt is necessary, however, to include the interaction forces and between the cart and the pendulum in order to fully model the system's dynamics. The inclusion of these forces requires modeling the - and -components of the translation of the pendulum's center of mass in addition to its rotational dynamics. In the Inverted Pendulum: System Modeling tutorial, the interaction forces and were solved for algebraically.\n\nIn general, we would like to exploit the modeling power of Simulink to take care of the algebra for us. Therefore, we will model the additional - and -component equations for the pendulum as shown below.\n\nHowever, the position coordinates and are exact functions of . Therefore, we can represent their derivatives in terms of the derivatives of . First addressing the -component equations we arrive at the following.\n\nThen addressing the -component equations gives us the following.\n\nThese expressions can then be substituted into the expressions for and from above as follows.\n\nWe can now represent these equations within Simulink. Simulink can work directly with nonlinear equations, so it is unnecessary to linearize these equations as was done in the Inverted Pendulum: System Modeling page.\n\nWe can build the inverted pendulum model in Simulink employing the equations derived above by following the steps given below.\n\nNow we will enter each of the four equations (1), (2), (13), and (14) into a Fcn block. Let's start with equation (1) which is repeated below.\n\nNow, let's enter equation (2) which is repeated below.\n\nWhen all of these steps are completed, the resulting model should appear as follows.\n\nIn order to save all of these components as a single subsystem block, first select all of the blocks, then select Create Subsystem from Selection from the menu after right-clicking on the selected portion. Your model should appear as follows. You can also download the file for this system by right-clicking here and then selecting Save link as ....\n\nIn this section, we alternatively show how to build the inverted pendulum model using the physical modeling blocks of the Simscape extension to Simulink. The blocks in the Simscape library represent actual physical components; therefore, complex multi-body dynamic models can be built without the need to build mathematical equations from physical principles as was done above by applying Newton's laws.\n\nOpen a new Simulink model and follow the steps below to create the inverted pendulum model in Simscape. In order to orient oneself, we will assume a coordinate system where the cart moves in the -direction (positive to the right) and the positive -direction is directed up. Following standard convention, the positive -direction is then pointed out of the plane of motion.\n\nYou can also save this model as a single subsystem block as described in the previous section. You can change the color of the subsystem by right-clicking on the block and choosing Background Color from the resulting menu. You can download the complete model file by right-clicking here, but note that you will need the Simscape addition to Simulink in order to run the file. We use this model in the Inverted Pendulum: Simulink Controller Design page.\n\nWe will now simulate the response of the inverted pendulum system to an impulsive force applied to the cart. This simulation requires an impulse input. Since there is no such block in the Simulink library, we will use the Pulse Generator block to approximate a unit impulse input. We could use either of the models we generated above, however, we will use the Simscape model in this case because it will allow us to visualize the motion of the inverted pendulum system. Follow the steps given below.\n\nConnect the blocks and label the signals connected to the Scope block as shown.\n\nSave this system as Pend_Openloop.slx, or download by right-clicking here and selecting Save link as ....\n\nBefore we start the simulation, we would like to enable the visualization of the inverted pendulum system. From the menus at the top of the model window choose Simulation > Model Configuration Parameters. Then from the directory on the left-side of the window choose Simscape Multibody 1G. Then check the box for Show animation during simulation as shown in the figure below.\n\nNow, start the simulation (select Run from the Simulation menu or enter Ctrl-T). As the simulation runs, an animation of the inverted pendulum like the one shown below will visualize the system's resulting motion.\n\nThen open the Scope. You will see the following output for the pendulum angle and the cart position.\n\nNotice that the pendulum repeatedly swings through full revolutions where the angle rolls over at radians. Furthermore, the cart's position grows unbounded, but oscillates under the influence of the swinging pendulum. These results differ quite a bit from the results of the open-loop simulation shown in the Inverted Pendulum: System Analysis page. This is due of course to the fact that this simulation employed a fully nonlinear model, while the previous analysis had relied on a linear approximation of the inverted pendulum model. In order to compare the results of the simulation model more directly to the prior results, we will extract a linear model from our simulation model.\n\nAside from comparing our simulation model to our prior results, it may also be desirable to extract a linear model for the purposes of analysis and design. Much of the analytical techniques that are commonly applied to the analysis of dynamic systems and the design of their associated control can only be applied to linear models. Therefore, it may be desirable to extract an approximate linear model from the nonlinear simulation model. We will accomplish this from within Simulink.\n\nThese plots are very similar, though not exactly the same, as those generated in the Inverted Pendulum: System Analysis page.\n\nWe can also export the resulting linearized model into the MATLAB workspace for further analysis and design. This can be accomplished by simply right-clicking on the object in the Linear Analysis Workspace to copy the object. Then right-click within the MATLAB Workspace to paste the object."
    },
    {
        "link": "https://mathworks.com/help/simulink/slref/inverted-pendulum-with-animation.html",
        "document": ""
    },
    {
        "link": "https://ctms.engin.umich.edu/CTMS/index.php?example=InvertedPendulum&section=SystemModeling",
        "document": "The system in this example consists of an inverted pendulum mounted to a motorized cart. The inverted pendulum system is an example commonly found in control system textbooks and research literature. Its popularity derives in part from the fact that it is unstable without control, that is, the pendulum will simply fall over if the cart isn't moved to balance it. Additionally, the dynamics of the system are nonlinear. The objective of the control system is to balance the inverted pendulum by applying a force to the cart that the pendulum is attached to. A real-world example that relates directly to this inverted pendulum system is the attitude control of a booster rocket at takeoff.\n\nIn this case we will consider a two-dimensional problem where the pendulum is constrained to move in the vertical plane shown in the figure below. For this system, the control input is the force that moves the cart horizontally and the outputs are the angular position of the pendulum and the horizontal position of the cart .\n\nFor this example, let's assume the following quantities:\n\nFor the PID, root locus, and frequency response sections of this problem, we will be interested only in the control of the pendulum's position. This is because the techniques used in these sections are best-suited for single-input, single-output (SISO) systems. Therefore, none of the design criteria deal with the cart's position. We will, however, investigate the controller's effect on the cart's position after the controller has been designed. For these sections, we will design a controller to restore the pendulum to a vertically upward position after it has experienced an impulsive \"bump\" to the cart. Specifically, the design criteria are that the pendulum return to its upright position within 5 seconds and that the pendulum never move more than 0.05 radians away from vertical after being disturbed by an impulse of magnitude 1 Nsec. The pendulum will initially begin in the vertically upward equilibrium, = .\n\nIn summary, the design requirements for this system are:\n\nEmploying state-space design techniques, we are more readily able to address a multi-output system. In our case, the inverted pendulum system is single-input, multi-output (SIMO). Therefore, for the state-space section of the Inverted Pendulum example, we will attempt to control both the pendulum's angle and the cart's position. To make the design more challenging in this section, we will command a 0.2-meter step in the cart's desired position. Under these conditions, it is desired that the cart achieve its commanded position within 5 seconds and have a rise time under 0.5 seconds. It is also desired that the pendulum settle to its vertical position in under 5 seconds, and further, that the pendulum angle not travel more than 20 degrees (0.35 radians) away from the vertically upward position.\n\nIn summary, the design requirements for the inverted pendulum state-space example are:\n\nBelow are the free-body diagrams of the two elements of the inverted pendulum system.\n\nSumming the forces in the free-body diagram of the cart in the horizontal direction, you get the following equation of motion.\n\nNote that you can also sum the forces in the vertical direction for the cart, but no useful information would be gained.\n\nSumming the forces in the free-body diagram of the pendulum in the horizontal direction, you get the following expression for the reaction force .\n\nIf you substitute this equation into the first equation, you get one of the two governing equations for this system.\n\nTo get the second equation of motion for this system, sum the forces perpendicular to the pendulum. Solving the system along this axis greatly simplifies the mathematics. You should get the following equation.\n\nTo get rid of the and terms in the equation above, sum the moments about the centroid of the pendulum to get the following equation.\n\nCombining these last two expressions, you get the second governing equation.\n\nSince the analysis and control design techniques we will be employing in this example apply only to linear systems, this set of equations needs to be linearized. Specifically, we will linearize the equations about the vertically upward equillibrium position, = , and will assume that the system stays within a small neighborhood of this equillbrium. This assumption should be reasonably valid since under control we desire that the pendulum not deviate more than 20 degrees from the vertically upward position. Let represent the deviation of the pedulum's position from equilibrium, that is, = + . Again presuming a small deviation ( ) from equilibrium, we can use the following small angle approximations of the nonlinear functions in our system equations:\n\nAfter substiting the above approximations into our nonlinear governing equations, we arrive at the two linearized equations of motion. Note has been substituted for the input .\n\nTo obtain the transfer functions of the linearized system equations, we must first take the Laplace transform of the system equations assuming zero initial conditions. The resulting Laplace transforms are shown below.\n\nRecall that a transfer function represents the relationship between a single input and a single output at a time. To find our first transfer function for the output and an input of we need to eliminate from the above equations. Solve the first equation for .\n\nThen substitute the above into the second equation.\n\nRearranging, the transfer function is then the following\n\nFrom the transfer function above it can be seen that there is both a pole and a zero at the origin. These can be canceled and the transfer function becomes the following.\n\nSecond, the transfer function with the cart position as the output can be derived in a similar manner to arrive at the following.\n\nThe linearized equations of motion from above can also be represented in state-space form if they are rearranged into a series of first order differential equations. Since the equations are linear, they can then be put into the standard matrix form shown below.\n\nThe matrix has 2 rows because both the cart's position and the pendulum's position are part of the output. Specifically, the cart's position is the first element of the output and the pendulum's deviation from its equilibrium position is the second element of .\n\nWe can represent the transfer functions derived above for the inverted pendulum system within MATLAB employing the following commands. Note that you can give names to the outputs (and inputs) to differentiate between the cart's position and the pendulum's position. Running this code in the command window produces the output shown below.\n\nWe can also represent the system using the state-space equations. The following additional MATLAB commands create a state-space model of the inverted pendulum and produce the output shown below when run in the MATLAB command window. Again note that the names of the inputs, outputs, and states can be specified to make the model easier to understand.\n\nThe above state-space model can also be converted into transfer function form employing the command as shown below. Conversely, the transfer function model can be converted into state-space form using the command.\n\nExamining the above, note the existance of some terms with very small coefficients. These terms should actually be zero and show up due to numerical round-off errors that accumulate in the conversion algorithms that MATLAB employs. If you set these coefficients to zero, then the above transfer function models will match those generated earlier in the Transfer Function section of the example."
    },
    {
        "link": "https://jp.mathworks.com/help/simulink/slref/inverted-pendulum-with-animation.html",
        "document": ""
    },
    {
        "link": "http://adjoint.colorado.edu/~daven/Tutorials/dynamics/pendsim.html",
        "document": "In this example, we will create a Simulink model for an inverted pendulum on a cart.\n\nIn this example, we will implement a PID controller which can only be applied to a single-input-single-output (SISO) system,so we will be only interested in the control of the pendulums angle. Therefore, none of the design criteria deal with the cart's position. We will assume that the system starts at equilibrium, and experiences an impulse force of 1 newton. The pendulum should return to its upright position within 5 seconds, and never move more than 0.05 radians away from the vertical.\n\nThis system is tricky to model in Simulink because of the physical constraint (the pin joint) between the cart and pendulum which reduces the degrees of freedom in the system. Both the cart and the pendulum have one degree of freedom (X and theta, respectively). We will then model Newton's equation for these two degrees of freedom.\n\nIt is necessary, however, to include the interaction forces N and P between the cart and the pendulum in order to model the dynamics. The inclusion of these forces requires modeling the x and y dynamics of the pendulum in addition to its theta dynamics. Generally, we would like to exploit the modeling power of Simulink and let the simulation take care of the algebra. Therefore, we will model the additional x and y equations for the pendulum.\n\nHowever, xp and yp are exact functions of theta. Therefore, we can represent their derivatives in terms of the derivatives of theta.\n\nThese expressions can then be substituted into the expressions for N and P. Rather than continuing with algebra here, we will simply represent these equations in Simulink. Simulink can work directly with nonlinear equations, so it is unnecessary to linearize these equations.\n\nThis is a large model and will take a lot of space, so give yourself pleny of room to work with. It would also be a good idea to label each line and box to avoid confusion later. To begin, start with a summation block for the forces on the cart. Below it, do the same for the torques on the pendulum. These two lines will mimick each other at first. For each, connect the sum box to a gain box, then an integrator box, and then connect this to another integrator box. For the cart, modify the gain box so that the gain is 1/M. Modify the gain for the pendulum to be 1/I. It may be worth labeling each line as the equation it represents (see the diagram below):\n\nNext we will add two forces acting on the cart. Add a gain block to represent damping and label it as such. Change the value to 'b'. Tap a line off the d/dt(x) line, since damping is velocity dependant, and connect it to the 'damping' gain block. Now connect this block to the topmost port on the sum block so that the damping force is negative. Now add an input block and label it F. Connect it to the middle, positive port on the sum.\n\nNow, we will apply the forces N and P to both the cart and the pendulum. We need to construct the components of these forces, 'N L cos(thenta)' and 'P L sin(theta). Add two 'trigonometric function' blocks. Make one of them a cosine block and leave the other as sine. Arrange these so that the cosine block is above the sine block which is above the last integrator block for your theta function. Tap a line from the theta line and connect it to both the sine and cosine blocks. Label the cos block as \"Vertical\" and the sin block as \"Horizontal\", these being the force components they represent. Connect a new gain block to the sine block and another to the cosine block. These gain blocks will be identical. Call this block 'Pend. Len.' and make its value 'l' (lowercase L). Finally, extend a line from each gain block. Label the top line \"l cos(theta)\" and the bottom line \"l sin(theta)\".\n\nNow that the pendulum components are available, we can apply the forces N and P. We will assume we can generate these forces, and just draw them coming from nowhere for now. Add two product blocks next to each other to the left and above the Sum Torques block. These will be used to multiply the forces N and P by their appropriate components. Rotate them to face downward. Connect the right product block to the upper input on the Sum Torques block and the left product lock to the lower input. Connect the \"l sin(theta)\" line to the right inuput of the right product block, and the \"l cos(theta)\" line to the right input of the left product block. Now create a line that leads to the left input of the right product block; label this line 'P'. Create another line leading to the left input of the left block and label this line 'N'. Finally, tap a line off of 'N' and connect it to the bottom input of the Sum Forces block.\n\nNext, we will represent the force N and P in terms of the pendulum's horizontal and vertical accelerations from Newton's laws. Insert two identical gain blocks labeled \"Pend. Mass\" and with value 'm'. Connect one to the opening on line P and the other to the opening on N. Connect a line to the top Pend. mass and label it \"d2/dt2(xp)\". Add a sum block and connect it to the lower Pend. mass block; leave both inputs positive. Insert a constant; give it a value of 'g' and label it gravity, then connect it to the top input of the sum block. Extend a line out from the bottom input of the sum block and label that line d2/dt2(yp).\n\nNow, we will begin to produce the signals which contribute to d2/dt2(xp) and d2/dt2(yp). Insert a Sum block to the right of the d2/dt2(yp) open end. Change the Sum block's signs to \"--\" to represent the two terms contributing to d2/dt2(yp). Flip the Sum block left-to-right and connect it's output to the d2/dt2(yp) signal. Insert a Sum block to the right of the d2/dt2(xp) open end. Change the Sum block's signs to \"++-\" to represent the three terms contributing to d2/dt2(xp). Flip the Sum block left-to-right and connect it's output to the d2/dt2(xp) signal. The first term of d2/dx2(xp) is d2/dx2(x). Tap a line off the d2/dx2(x) signal and connect it to the topmost (positive) input of the newest Sum block.\n\nNow, we will generate the terms d2/dt2(theta)*lsin(theta) and d2/dt2(theta)*lcos(theta). Insert two Product blocks next to each other to the right and below the Sum block associated with d2/dt2(yp). Rotate the left Product block 90 degrees. Flip the other product block left-to-right and also rotate it 90 degrees. Tap a line off the l sin(theta) signal and connect it to the left input of the left Product block. Tap a line off the l cos(theta) signal and connect it to the right input of the right Product block. Tap a line off the d2/dt2(theta) signal and connect it to the right input of the left Product block. Tap a line of this new line and connect it to the left input of the right Product block.\n\nNow, we will generate the terms (d/dt(theta))^2*lsin(theta) and (d/dt(theta))^2*lcos(theta). Insert two Product blocks next to each other to the right and slightly above the previous pair of Product blocks. Rotate the left Product block 90 degrees. Flip the other product block left-to-right and also rotate it 90 degrees. Tap a line off the l cos(theta) signal and connect it to the left input of the left Product block. Tap a line off the l sin(theta) signal and connect it to the right input of the right Product block. Insert a third Product block and insert it slightly above the d/dt(theta) line. Label this block \"d/dt(theta)^2\". Tap a line off the d/dt(theta) signal and connect it to the left input of the lower Product block. Tap a line of this new line and connect it to the right input of the lower Product block. Connect the output of the lower Product block to the free input of the right upper Product block. Tap a line of this new line and connect it to the free input of the left upper Product block.\n\nFinally, we will connect these signals to produce the pendulum acceleration signals. In addition, we will create the system outputs x and theta. Connect the d2/dt2(theta)*lsin(theta) Product block's output to the lower (negative) input of the d2/dt2(yp) Sum block. Connect the d2/dt2(theta)*lcos(theta) Product block's output to the lower (negative) input of the d2/dt2(xp) Sum block. Connect the d/dt(theta)^2*lcos(theta) Product block's output to the upper (negative) input of the d2/dt2(yp) Sum block. Connect the d/dt(theta)^2*lsin(theta) Product block's output to the middle (positive) input of the d2/dt2(xp) Sum block. Insert an Out block attached to the theta signal. Label this block \"Theta\". Insert an Out block attached to the x signal. Label this block \"x\". It should automatically be numbered 2.\n\nThe mdl-file can now be saved. The entire model can be downloaded here (right-click to save):\n\nWe now want to take this model we just created and make it a subsystem of another model. To do this, create a new window and insert a subsystem block. Open the subsystem block and drag the entire model we just built into it. Label the subsystem \"Inverted Pendulum\".\n\nNow, we will apply a unit impulse force input, and view the pendulum angle and cart position. An impulse can not be exactly simulated, since it is an infinite signal for an infinitesimal time with time integral equal to 1. Instead, we will use a pulse generator to generate a large but finite pulse for a small but finite time. The magnitude of the pulse times the length of the pulse will equal 1. Insert a Pulse Generator block and two scope blocks. Connect the pulse generator to the F input and connect the Theta and x outputs each to a scope.\n\nEdit the pulse generator so that the period value is \"10\" (a long time between a chain of impulses - we will be interested in only the first pulse); change the Pulse width value to \".01\" (meaning .01% of 10 seconds, or .001 seconds); Change the amplitude to 1000 (1000 times .001 is 1, providing a unit impulse); now close the dialogue.\n\nNow we must set an appropriate simulation time to view the response. Select Configuration Parameters from the simulation menu and change the stop time value to 2 seconds. Before running this, it is necessary to set the physical constants we are using. Enter the following commands into the Matlab prompt:\n\nBelow is a sample response for this model."
    }
]