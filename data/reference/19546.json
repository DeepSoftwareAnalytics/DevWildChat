[
    {
        "link": "https://php.net/manual/en/mysqli.error.php",
        "document": "information at saunderswebsolutions dot com ¶ The mysqli_sql_exception class is not available to PHP 5.05\n\n\n\nI used this code to catch errors \n\n The problem with this is that valid values for $res are: a mysqli_result object , true or false\n\nThis doesn't tell us that there has been an error with the sql used.\n\nIf you pass an update statement, false is a valid result if the update fails.\n\n\n\nSo, a better way is:\n\n \n\nThis would output something like:\n\nUnexpected PHP error [mysqli::query() [<a href='function.query'>function.query</a>]: (42S22/1054): Unknown column 'XXname' in 'field list'] severity [E_WARNING] in [G:\\database.php] line [249]\n\n\n\nVery frustrating as I wanted to also catch the sql error and print out the stack trace. \n\n\n\nA better way is:\n\n\n\n Prints out something like:\n\nError No: 1054\n\nUnknown column 'XXname' in 'field list'\n\nQuery: \n\nSELECT XXname FROM customer_table\n\n\n\n#0 G:\\\\database.php(251): database->dbError('Unknown column ...', 1054, 'getQuery()', 'SELECT XXname F...')\n\n#1 G:\\data\\WorkSites\\1framework5\\tests\\dbtest.php(29): database->getString('SELECT XXname F...')\n\n#2 c:\\PHP\\includes\\simpletest\\runner.php(58): testOfDB->testGetVal()\n\n#3 c:\\PHP\\includes\\simpletest\\runner.php(96): SimpleInvoker->invoke('testGetVal')\n\n#4 c:\\PHP\\includes\\simpletest\\runner.php(125): SimpleInvokerDecorator->invoke('testGetVal')\n\n#5 c:\\PHP\\includes\\simpletest\\runner.php(183): SimpleErrorTrappingInvoker->invoke('testGetVal')\n\n#6 c:\\PHP\\includes\\simpletest\\simple_test.php(90): SimpleRunner->run()\n\n#7 c:\\PHP\\includes\\simpletest\\simple_test.php(498): SimpleTestCase->run(Object(HtmlReporter))\n\n#8 c:\\PHP\\includes\\simpletest\\simple_test.php(500): GroupTest->run(Object(HtmlReporter))\n\n#9 G:\\all_tests.php(16): GroupTest->run(Object(HtmlReporter))\n\n\n\nThis will actually print out the error, a stack trace and the offending sql statement. Much more helpful when the sql statement is generated somewhere else in the code.\n\nse (at) brainbits (dot) net ¶ The decription \"mysqli_error -- Returns a string description of the LAST error\" is not exactly that what you get from mysqli_error. You get the error description from the last mysqli-function, not from the last mysql-error.\n\n\n\nIf you have the following situation\n\n\n\nif (!$mysqli->query(\"SET a=1\")) {\n\n $mysqli->query(\"ROLLBACK;\")\n\n printf(\"Errormessage: %s\n\n\", $mysqli->error);\n\n}\n\n\n\nyou don't get an error-message, if the ROLLBACK-Query didn't failed, too. In order to get the right error-message you have to write:\n\n\n\nif (!$mysqli->query(\"SET a=1\")) {\n\n printf(\"Errormessage: %s\n\n\", $mysqli->error);\n\n $mysqli->query(\"ROLLBACK;\")\n\n}\n\ncallforeach at gmail dot com ¶ I had to set mysqli_report(MYSQLI_REPORT_ALL) at the begin of my script to be able to catch mysqli errors within the catch block of my php code.\n\n\n\nInitially, I used the below code to throw and subsequent catch mysqli exceptions\n\n\n\n I realized the exception was being thrown before the actual block was not being called 'm able to trap all mysqli errors\n\nasmith16 at littlesvr dot ca ¶ Please note that the string returned may contain data initially provided by the user, possibly making your code vulnerable to XSS. \n\n\n\nSo even if you escape everything in your SQL query using mysqli_real_escape_string(), make sure that if you plan to display the string returned by mysqli_error() you run that string through htmlspecialchars().\n\n\n\nAs far as I can tell the two escape functions don't escape the same characters, which is why you need both (the first for SQL and the second for HTML/JS)."
    },
    {
        "link": "https://php.net/manual/en/mysqli.connect-error.php",
        "document": "/* @ is used to suppress warnings */\n\n /* Use your preferred error logging method here */"
    },
    {
        "link": "https://stackoverflow.com/questions/18197649/error-in-uploading-file-into-mysql-database-in-php",
        "document": "I'm getting an error when i upload a file into mysql: \"Error! A file was not sent!\".\n\nHere is my PHP code please look into it and let me know where the error is in my code."
    },
    {
        "link": "https://php.net/manual/en/book.mysqli.php",
        "document": "and to navigate\n• to select\n• to close\n\nPress without selection to search using Google"
    },
    {
        "link": "https://stackoverflow.com/questions/27837641/php-mysqli-best-practice-error-handling",
        "document": "I'm new to PHP and mysqli, and I've managed to connect to my MySQL database using this PHP code:\n\nI'm wondering about error handling: Is there a best practice for database error handling in PHP? I'm thinking something like:\n\nAnd there should be something similar to handle if the DB connection fails. Could anyone help me out with finding the best practice for database related error handling in PHP?\n\nEDIT: After reading comments, I've removed all '@'characters from my code, since they suppress the warnings that PHP produces."
    },
    {
        "link": "https://stackoverflow.com/questions/11448307/importing-csv-data-using-php-mysql",
        "document": "I'm having a bit of a problem trying to import data from a CSV and have a couple of questions on it that I haven't managed to solve myself yet.\n\nFirst off here's my code to help put things in perspective (tidied it up a bit, removing CSS and DB connection):\n\nIt's basically an adaptation of an example I have found after many many attempts at various methods.\n\nMy CSV has two columns of data, the first one being text and the second is integers The table in the database also has two columns, the first called \"text\" and the second \"number\"\n\nSo the questions I have are:\n• the text being uploaded is just being displayed as 0 in every field and i'm not sure why\n• I keep reading about data ending up enclosed in \"\", if that happens how would I sort it?\n• how can I ignore the first X lines of the CSV for headers etc?\n• is the data format changed throughout this process or is it ready for me to use in a graph? e.g. would a decimal stay a decimal once placed in the database?\n\nJust done a test of 10,000 record uploading and got the error:"
    },
    {
        "link": "https://stackoverflow.com/questions/8816129/read-csv-file-and-store-into-mysql-database",
        "document": "Hope you are using PHP to develop your website and want to import user CSV file into your MySQL Server database.\n\nYou can use the following PHP class to import your data: http://www.legend.ws/blog/tips-tricks/csv-php-mysql-import/\n\nAssuming that you have already created the required database tables.\n\nAlternately, you can use the MySQLImport utility to import any CSV file into your MySQL database. Refer http://dev.mysql.com/doc/refman/5.0/en/mysqlimport.html URL to get more details on mySQLImport command."
    },
    {
        "link": "https://mehulgohil.com/blog/import-csv-data-using-php",
        "document": "In real world, Importing data with CSV and Exporting data with CSV are the most essential and basic functionality that is a necessity of any application. Today, we will be learning about importing CSV data using PHP. Anyone can learn the basics with this article and implement it on any PHP based frameworks or CMS like CodeIgniter, Laravel, WordPress and more.\n\nImporting CSV data into a PHP application can help you efficiently handle and migrate large volumes of data. Whether you’re managing user lists, product inventories, or any other type of tabular data, PHP provides a straightforward way to read and process CSV files.\n\nIn this article, we’ll walk through the steps to import CSV data using PHP, ensuring you understand each part of the process.\n\nHow to import CSV data using PHP?\n\nWe have curated a step-by-step guide to explain how to import CSV data using PHP into any real world usage application. Let’s go through those steps one-by-one to learn something new:\n\nBefore diving into the code, ensure your CSV file is properly formatted and ready to use. CSV (Comma-Separated Values) files are plain text files where each line represents a row of data, and columns are separated by commas (or another delimiter). Your CSV might look like this:\n\nMake sure your CSV file is accessible from your PHP script’s directory or specify the correct path to the file.\n\nPro Tip: You can also use Google Docs to add dummy data and export it as CSV to make it quick and easy for you.\n\nTo import CSV data, you’ll first need to open the file and read its contents. PHP’s built-in function simplifies this process. Here’s a basic example:\n\nOnce you have the data, you can process it according to your needs. For example, you might want to insert this data into a database. Here’s how you could modify the script to insert data into a MySQL database:\n• We establish a connection to the MySQL database using PDO.\n• The script opens the CSV file and loops through each row.\n• It prepares a SQL statement and executes it for each row, inserting the data into the database.\n\nIt’s important to add error handling and validation to ensure the integrity of your data. Below are a few common considerations:\n• File Not Found: Ensure the CSV file exists and is readable by checking the file path.\n• Data Validation: You can add custom validation logic inside the loop. For example, validate email addresses or ensure numeric fields contain valid numbers.\n• Error Logging: In case of any errors, log them for later review.\n\nHere’s how you can handle some basic errors:\n\nIf you’re dealing with large CSV files, it’s crucial to manage memory effectively. Instead of loading the entire file into memory, process the file line by line (which we’re already doing with . Additionally, ensure the server has sufficient memory and execution time by adjusting PHP’s and settings if necessary.\n\nImporting CSV data using PHP is a powerful way to manage and utilize large datasets. By following these steps, you can easily read, process, and import CSV data into your PHP applications. Always ensure your data is validated and properly handled to maintain data integrity and application stability.\n\nWe have curated some frequently asked questions based on the challenges we faced while importing CSV data using PHP.\n\n1. What is CSV, and why is it commonly used? CSV stands for Comma-Separated Values. It’s a simple file format used to store tabular data, such as a spreadsheet or database. CSV files are easy to create, edit, and import, making them a popular choice for data transfer between different systems. 2. Can I import CSV data with different delimiters? Yes, PHP’s function allows you to specify a different delimiter if your CSV file uses something other than a comma (e.g., a semicolon or tab). You can modify the function like this: 3. What happens if my CSV file contains special characters or non-UTF-8 encoding? Special characters can cause issues if not handled properly. Make sure your CSV file is saved in UTF-8 encoding, which is widely supported. If you’re dealing with different encodings, consider using PHP’s function to convert the file before processing it. 4. How can I handle large CSV files that might exceed memory limits? For large CSV files, consider reading and processing the file in chunks rather than loading the entire file into memory. This approach prevents memory exhaustion and ensures your script can handle large datasets efficiently. 5. Can I import CSV data into a specific table structure in my database? Yes, but you need to ensure that the CSV data matches the structure of your database table. If your CSV columns don’t align with your table columns, you may need to preprocess the data or adjust your database schema accordingly. 6. How can I validate the data in my CSV file before importing it? You can add validation checks within the loop that processes each row of the CSV file. For example, you can check if required fields are present, ensure that email addresses are valid, or confirm that numeric fields contain numbers. 7. What should I do if the import process fails partially? If your import process fails, it’s essential to implement proper error handling and logging. You can rollback database transactions or log failed rows for further inspection, ensuring that your data integrity remains intact."
    },
    {
        "link": "https://w3schools.com/php/func_filesystem_fgetcsv.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://stevesohcot.medium.com/tutorial-how-to-upload-a-csv-file-into-a-mysql-database-with-php-and-ajax-creating-a-new-table-bfd171998ec4",
        "document": "As indicated by the headline, these were my objectives:\n• Allow the user to upload a CSV file to a MySQL database, with PHP. Bonus points for Ajax.\n• The number of columns are unknown, so I needed to dynamically create a new table. I could not instruct the user “Make sure the first column is a name and the second column is an address, etc”. I therefore could not rely on knowing which columns (and the order) would go into an existing database table with predefined rows.\n• I found some solutions that read in a file and then looped through every row individually, thereby running several INSERT statements into my table. This seems like a waste of database resources, so I wanted to avoid it.\n• Of course you’ll have to update the ACTION attribute\n• You’ll probably still want a METHOD of “POST”\n• The ENCTYPE allows you to upload files. Using JavaScript (below) this probably isn’t needed\n\nI wanted to have the user upload the page via Ajax. I’m going to use jQuery.\n\nFirst, change the submit button around and call a function:\n\nThe additional parameter uploadData is something I use to tell which code block in my controller to run (next section).\n\nAdding in the parameter uploadData tells which part of my PHP Controller to run. Here it is:\n• empty($_FILES) looks to see if the user included a file when they submitted the form\n• is_uploaded_file() checks to see if the file was actually uploaded and is accessible\n• Get the file name of what was just uploaded\n• Then we have some more PHP functions…\n\nThe previous section references the following functions which interact with the database.\n\nfunction userUploadsCreateTable($db, $fileName) {\n\n\n\n // Can't seem to load in a table dynamically.\n\n // Create the table:\n\n // first step is to read in ONLY the first row of the CSV file\n\n // THEN will load in the data\n\n \n\n $handle = fopen($fileName, \"r\");\n\n\n\n $row = 1; \n\n $columns = [];\n\n\n\n while (($data = fgetcsv($handle, 1000, \",\")) !== FALSE AND $row==1) {\n\n $columns = $data;\n\n $row++; \n\n }\n\n\n\n $sqlCreateTable = \"CREATE TABLE IF NOT EXISTS myTable \n\n (\".implode(\" VARCHAR(255) NOT NULL, \", $columns). \" \n\n VARCHAR(255) NOT NULL);\";\n\n\n\n $sqlLoadTable = \"\n\n LOAD DATA LOCAL INFILE '$fileName'\n\n INTO TABLE myTable\n\n FIELDS TERMINATED BY ','\n\n ENCLOSED BY '\\\"' LINES\n\n TERMINATED BY '\n\n'\n\n IGNORE 1 LINES\";\n\n\n\n $newTableCreated = $db->runSQL($sqlCreateTable);\n\n\n\n if (!$newTableCreated) {\n\n print \"Error Uploading Data (a)\";\n\n return false;\n\n } else {\n\n \n\n $appendData = $db->runSQL($sqlLoadTable);\n\n\n\n if ($appendData) {\n\n print \"File uploaded\";\n\n return true;\n\n } else {\n\n print \"Error Uploading Data (b)\";\n\n return false;\n\n }\n\n\n\n }\n\n}\n• First drop the existing table. This assumes there’s one table in your database that is affected. In my app, I dynamically modified the name of the table to have a unique identifier for each user who uploads data\n• CREATE a new database table, dynamically updating the structure (columns) based on the input CSV file\n\nTypically you want to limit database permissions. In most cases, my web apps only need SELECT / INSERT / UPDATE / DELETE permissions. I do not enable permissions for CREATE nor DROP tables.\n\nWith this solution, I obviously need these additional privileges. What I did though, was I created a separate database for the user file uploads. This separate database user has elevated privileges.\n\nThen I have a screen where the user selects which fields they want, and that runs the INSERT statement into my “main” database.\n• I had trouble getting this to work on my local computer (MAMP). I ended up working on my remote server.\n• I had trouble with a “temporary” table (as I’ve used on MS SQL Server). I’m pretty sure this concept does exist in MySQL though."
    },
    {
        "link": "https://yui.github.io/yui2/docs/yui_2.9.0_full/uploader/index.html",
        "document": "To use the Uploader Control, include the following source files in your web page:\n\nWhere these files come from: The files included using the text above will be served from Yahoo! servers. JavaScript files are minified, meaning that comments and white space have been removed to make them more efficient to download. To use the full, commented versions or the versions of YUI JavaScript files, please download the library distribution and host the files on your own server. Order matters: As is the case generally with JavaScript and CSS, order matters; these files should be included in the order specified above. If you include files in the wrong order, errors may result.\n\nBy default, the file is expected in the directory relative to the location of the HTML page in which a Uploader Control instance will appear. If you wish use from , or if you'd like to place in a different location on your own server, you may specify a path (relative to the page or absolute) by setting the following variable:\n\nTo get started with the Uploader Control, begin by placing it on the page. Create a (or other container element) placeholder into which you'll render your Uploader instance. The Uploader UI (an equivalent of the \"Browse...\" button) can be rendered in one of two ways: you can either pass a URL of a button sprite to the constructor, in which case the uploader will render as a button; if the URL argument is omitted, the uploader will render as a transparent layer that dispatches mouse events (see the examples), and it will be your responsibility to create the visual UI below it.\n\nNote that the invocation of the \"Browse\" dialog is the only UI task reserved to the uploader. All other methods of the uploader (configuration methods, upload call, etc.) need to be called by your UI.\n\nThe width and height of the container should be set to the size that you want the uploader to be.\n\nLet's render the uploader as a button. To do that, we will instantiate the Uploader by passing the of the container to it, and the URL of the button sprite:\n\nThe button sprite image has to be structured as follows: it should be four equal-sized button skins (each of the size corresponding to the size of the container div), stacked vertically, in the following order from top to bottom: the mouse-up skin, the mouse-over skin, the mouse-down skin, and the control-disabled skin.\n\nThe Uploader has a number of methods that allow the developer to manage the file queuing and upload process. The Uploader also dispatches various events for different aspects of the upload process.\n\nIn order to receive events from the Uploader, you need to add event listeners. For example, to add a listener for a event, do the following:\n\nThis means that when the user selects the files using the \"Open File\" dialog, the function will be called and an object will be passed to it. The following events are dispatched by the Uploader:\n• contentReady: dispatched when the Uploader Flash file has successfully initialized. No event object is passed to the listener function. Note: do not call any methods on the Uploader until this event fires. Until this event is dispatched, the uploader is not read to accept function calls.\n• fileSelect: dispatched when the user has finished selecting the files in the \"Open File\" dialog. Event object contains the following variables:\n• fileList: an array of objects with the following file information:\n• name: file name (no full path is available)\n• id: unique file id, used for referencing the file when managing the upload or getting upload progress.\n• uploadStart: dispatched when the upload of a specific file has started. The event object contains the following variables:\n• id: the unique id of the file that's started to upload.\n• uploadProgress: dispatched when new information on the upload progress of a specific file is available. The event object contains the following variables:\n• id: The unique id of the file being uploaded.\n• bytesLoaded: the number of bytes of the file uploaded so far\n• bytesTotal: the total size of the file\n• uploadCancel: dispatched when a particular file upload is canceled. The event object contains the following variables:\n• id: the unique id of the file whose upload has been canceled.\n• uploadComplete: dispatched when the upload of a particular file is complete. The event object contains the following variables:\n• id: the unique id of the file whose upload has been completed.\n• uploadCompleteData: dispatched when the server returns data in response to the completed upload. The event object contains the following variables:\n• id: the unique id of the file that was uploaded.\n• data: the raw data returned by the server in response to the upload\n• uploadError: dispatched when an error occurs in the upload process. The event object contains the following variables:\n• id: the id of the file whose upload resulted in the error.\n• status: The status message associated with the error\n\nThe Uploader Control supports the following methods:\n• setAllowLogging (allowLogging:Boolean) : Turns logging output on or off. If on, the uploader dispatches log messages to the YUI logger if one is available, and to the Flash trace file. If off, the uploader stays silent.\n• allowLogging:Boolean : if true, logging is turned on; if false, logging is turned off. By default, logging is turned off.\n• setAllowMultipleFiles (allowMultipleFiles:Boolean) : Allows the user to select multiple files when browsing. The result of the file selection is the same independent of whether the user is allowed to select a single file or multiple ones; in case of a single file, the returned file list simply contains a single element. If multiple files are allowed, then after every browsing dialog, newly selected files are added to the existing file list. If multiple files are prohibited, the file list is reset every time the user browses and select a new file.\n• allowMultipleFiles:Boolean : if true, multiple file selection is allowed; if false, multiple file selection is turned off. By default, multiple file selection is turned off.\n• setSimUploadLimit (simUploadLimit:int) : Sets the number of simultaneous uploads if automatic queue management with uploadAll() is used.\n• simUploadLimit:int : an integer between 1 and 5 specifying the number of simultaneous uploads. Uploading more than 5 files is not recommended and isn't possible under automatic queue management.\n• setFileFilters (fileFilters:Array) : Sets filters on the file extensions that the user is allowed to select. On Windows, this is not a strict filter: the user can override it by entering \"*.*\" in the file name input field. For that reason, if it's important to you that file types are restricted, you should check them after selection on the client side, and after upload on the server side.\n• fileFilters:Array : An array consisting of sets of key value pairs, of the form: {extensions: \"extensionString\", description:\"DescriptionString\", [optional]macType:\"macTypeString\" }. The extension string should be a comma-delimited list of the string formatted as \"*.xxx\". For example, the following is a valid element of the fileFilters array: {extensions:\"*.jpg;*.gif;*.png\", description:\"Images\"}.\n• upload (fileID:String, uploadScriptPath:String, method:String, vars:Object, fieldName:String) : triggers the upload of a specific file\n• fileID:String : the id of the file to start uploading\n• uploadScriptPath:String : the URL of the upload script\n• method:String : An optional string argument specifying the HTTP request method for uploading accompanying variables, either \"GET\" or \"POST\" (\"GET\" by default).\n• vars:Object : An optional argument, containing variables to be passed in the POST request along with the upload. (e.g. {var1: \"value1\", var2: \"value2\"}).\n• fieldName:String : An optional string argument, containing the name of the variable with the uploaded file data. The name is \"Filedata\" by default.\n• uploadAll (uploadScriptPath:String, method:String, vars:Object, fieldName:String) : upload all selected files. The queue management is automatic, with the number of simultaneous uploads specified by setSimUploadLimit().\n• uploadScriptPath:String : the URL of the upload script\n• method:String : An optional string argument specifying the HTTP request method for uploading accompanying variables, either \"GET\" or \"POST\" (\"GET\" by default).\n• vars:Object : An optional argument, containing variables to be passed in the POST request along with the upload. (e.g. {var1: \"value1\", var2: \"value2\"}).\n• fieldName:String : An optional string argument, containing the name of the variable with the uploaded file data. The name is \"Filedata\" by default.\n• cancel (fileID:String) : cancel the ongoing file upload.\n• fileID:String : the id of the file whose upload should be canceled. If no argument is passed, then all ongoing file uploads are canceled.\n• enable () : enables the uploader UI (enabled by default). If the uploader is rendered as a button, the button responds to clicks and changes visual state. If the uploader is rendered as a transparent overlay, it dispatches events to JS when mouse actions occur.\n• disable () : disables the uploader UI (enabled by default). If the uploader is rendered as a button, the button stops respondin to hover and clicks and switches to the \"disabled\" skin in the button sprite.If the uploader is rendered as a transparent overlay, it stops dispatching events to JS when mouse actions occur.\n• clearFileList () : clears the upload queue. When multiple file selection is disallowed, the file list is cleared between each invocation of the \"Browse\" dialog.\n• removeFile (fileID:String) : remove a file with a specific file id from the queue.\n• fileID:String : the id of the file to remove from the queue\n\nThere are many ways of handling the request on the server. The following example uses PHP to write submissions from an HTTP POST request to the same directory as the directory the script lives in. Note that this requires write permissions to that directory. Always consider security implications when setting such permissions.\n• The Uploader can only send data to servers in the same security sandbox as the file. If hosted by is used, then the server must contain a cross-domain permissions file allowing to upload files. By default, Uploader looks for in the assets directory in the same path as , so if you’re loading Uploader from you will be affected by this issue.\n• The intended behavior of the uploader is not to send any cookies with its requests. Due to a limitation of the Windows networking library, when running in IE, the uploader sends the cookies with the upload. However, you cannot rely on this behavior for authentication, because it's absent in other browsers. As a workaround, we suggest either using a cookieless upload method or appending to the upload request.\n• There are some known issues around keyboard interaction with the uploader. In particular, when the uploader is rendered as a transparent layer, it does not respond to keyboard presses - only mouse functionality is available. When the uploader is rendered as an image, it receives \"Space\" and \"Enter\" key presses as triggers, but only if the focus is on the uploader component itself. Keyboard tabbing to the component behaves differently in different browsers.\n• Because of Flash limitations, the uploader does not support basic authentication.\n• Because of Flash limitations, the uploader behavior when working through a proxy server is inconsistent and unreliable.\n• When uploading to HTTPS servers, be aware that Flash does not support self-signed certificates. You would need to obtain certificates from a recognized certificate authority.\n\nFor further exploration of the uploader components, take a look at its example files. Note that in order to run these examples, you will need to copy them to your own web space and have a server capable of accepting uploads.\n\nThe YUI Library and related topics are discussed on the on the YUILibrary.com forums.\n\nAlso be sure to check out YUIBlog for updates and articles about the YUI Library written by the library's developers.\n\nThe YUI Library's public bug tracking and feature request repositories are located on the YUILibrary.com site. Before filing new feature requests or bug reports, please review our reporting guidelines."
    },
    {
        "link": "https://corel.com/master_template/yui/examples/uploader/uploader-advanced.html",
        "document": "In this example, we will pair the YUI Uploader Control with the DataTable Control to give the user visual feedback on the progress of their file upload. When the user selects multiple files for upload, a DataTable will be populated with the list of files and their sizes. When the user starts the upload process, they'll see progress bars next to each of the files as they upload. Note: The YUI Uploader Control requires Flash Player 9.0.45 or higher. The latest version of Flash Player is available at the Adobe Flash Player Download Center. Note: The YUI Uploader Control requires the uploader.swf Flash file that is distributed as part of the YUI package, in the uploader/assets folder. Copy the uploader.swf to your server and set the YAHOO.Uploader.SWFURL variable to its full path. Note: This example requires a backend component to receive uploaded files. Download the source for this example below to use on your own server. When you have the example running on your own server, it should look like the screenshot below:\n\nUsing Uploader with the DataTable Control to Handle Multi-file Uploads with Progress Feedback\n\nJust as we did in the Simple Example, we start with including all the necessary files. We will need the base YUI files, as well as files specific to the Logger, Uploader, and DataTable.\n\nNext, just as we did in the Simple Example, we add a container where the Uploader Control will be placed. If you don't want it to be visible, feel free to set the size of the container element to (with ). We also add the \"Browse\" and \"Upload\" buttons:\n\nWe also need to put in one additional placeholder into which we'll render the DataTable:\n\nNext, we initialize the Logger and the Uploader, and place them on the page. We'll also initialize an that we will use to upload the files one at a time, a to keep the record between rows of the DataTable and the file ids, and a where we'll hold the necessary file information (we'll also use it to instantiate the DataTable).\n\nIn the function, we clear the file list, and call the function, passing as the first argument (which means the user will be able to select multiple files by holding the Shift button). We also pass the file extension filter array, allowing for three types of image files:\n\nOnce we have received the list of files from the function (defined below), we will call the function that will populate our variables, create a new DataSource based on the file list, and create the DataTable to display it:\n\nIn the function, we initiate the upload of the file that's indicated by the . The is incremented every time a preceding upload is complete (see below):\n\nWhen we receive the event, we need to update the corresponding row of the DataTable. We use a simple HTML horizontal rule as a progress bar and update its width based on the progress of the upload:\n\nWhen files are selected, we call (described above):\n\nAfter the start of each file upload, it may be awhile before the first event comes in. Thus, we want the user know that the upload has started. On the event, we update the respective row of the DataTable to reflect that the upload is in progress:\n\nFinally, when the upload is complete, we either initiate the next upload, or, if the has equalized with the number of files, we send an appropriate message to the Logger and halt:"
    },
    {
        "link": "https://github.com/layui/layui/blob/main/examples/upload.html",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://yui.github.io/yui2/docs/yui_2.6.0/docs/Uploader.js.html",
        "document": "* @description <p>YUI Uploader provides file upload functionality that goes beyond the basic browser-based methods. * Specifically, the YUI Uploader allows for: * <li> A set of events dispatched on various aspects of the file upload process: file selection, upload progress, upload completion, etc.</li> * <li> Inclusion of additional data in the file upload POST request.</li> * <li> Faster file upload on broadband connections due to the modified SEND buffer size.</li> * <li> Same-page server response upon completion of the file upload.</li> * Fires when an upload of a specific file has started. * Fires when an upload of a specific file has started. * Fires when an upload of a specific file has started. * Fires when the user has finished selecting files in the \"Open File\" dialog. * @param event.fileList {Array} An array of objects with file information * @param event.fileList[].size {Number} File size in bytes for a specific file in fileList * @param event.fileList[].name {String} File name for a specific file in fileList * Fires when an upload of a specific file has started. * @param event.id {String} The id of the file that's started to upload * Fires when new information about the upload progress for a specific file is available. * @param event.id {String} The id of the file with which the upload progress data is associated * @param bytesLoaded {Number} The number of bytes of the file uploaded so far * @param bytesTotal {Number} The total size of the file * Fires when an upload for a specific file is cancelled. * @param event.id {String} The id of the file with which the upload has been cancelled. * Fires when an upload for a specific file is complete. * @param event.id {String} The id of the file for which the upload has been completed. * Fires when the server sends data in response to a completed upload. * @param event.id {String} The id of the file for which the upload has been completed. * @param event.data {String} The raw data returned by the server in response to the upload. * @param event.id {String} The id of the file that was being uploaded when the error has occurred. * @param event.status {String} The status message associated with the error. * Starts the upload of the file specified by fileID to the location specified by uploadScriptPath. * @param fileID {String} The id of the file to start uploading. * @param uploadScriptPath {String} The URL of the upload location. * @param method {String} Either \"GET\" or \"POST\", specifying how the variables accompanying the file upload POST request should be submitted. \"GET\" by default. * @param vars {Object} The object containing variables to be sent in the same request as the file upload. * @param fieldName {String} The name of the variable in the POST request containing the file data. \"Filedata\" by default. * @param headers {Object} An object containing variables that should be set as headers in the POST request. The following header names * Starts uploading all files in the queue. If this function is called, the upload queue is automatically managed. * @param uploadScriptPath {String} The URL of the upload location. * @param method {String} Either \"GET\" or \"POST\", specifying how the variables accompanying the file upload POST request should be submitted. \"GET\" by default. * @param vars {Object} The object containing variables to be sent in the same request as the file upload. * @param fieldName {String} The name of the variable in the POST request containing the file data. \"Filedata\" by default. * @param headers {Object} An object containing variables that should be set as headers in the POST request. The following header names * Cancels the upload of a specified file. If no file id is specified, all ongoing uploads are cancelled. * @param fileID {String} The ID of the file whose upload should be cancelled. * Clears the list of files queued for upload. * Removes the specified file from the upload queue. * @param fileID {String} The id of the file to remove from the upload queue. * Uses Flash internal trace logging, as well as YUI Logger, if available. * @param allowLogging {Boolean} If true, logs are output; otherwise, no logs are produced. * Sets the number of simultaneous uploads when using uploadAll() * The minimum value is 1, and maximum value is 5. The default value is 2. * @param simUploadLimit {int} Number of simultaneous uploads, between 1 and 5. * Sets the flag allowing users to select multiple files for the upload. * @param allowMultipleFiles {Boolean} If true, multiple files can be selected. False by default. * Sets the file filters for the \"Browse\" dialog. * @param newFilterArray An array of sets of key-value pairs of the form * The extensions string is a semicolon-delimited list of elements of the form \"*.xxx\","
    },
    {
        "link": "https://github.com/dennysjmarquez/awesome-javascript-libraries/blob/master/README.md",
        "document": "We read every piece of feedback, and take your input very seriously."
    }
]