[
    {
        "link": "https://docs.mapbox.com/ios/maps/guides",
        "document": "The Mapbox Maps SDK for iOS is a library for embedding highly customized maps within iOS applications.\n\nSelect a style for your application. Start with the expertly designed Mapbox Standard or Mapbox Standard Satellite or any other Mapbox-designed styles that are optimized for various use cases, or design your own custom style in Mapbox Studio. Enhance the experience with 3D terrain. You can even alter your map's style at runtime.\n\nAdd your own custom data to the map. Whether you're adding markers to a map to include a store locator right in your app or creating compelling data visualizations, the Maps SDK gives you control over how you display data on your map. You can style map features at runtime based on data properties, user interaction, or device settings.\n\nThe Mapbox Maps SDK for iOS is compatible with applications that are:\n\nUse the Mapbox Maps SDK for iOS with other Mapbox products. Mix and match other tools and plugins to create a location-savvy application to your exact specifications.\n\nThe Mapbox Maps SDK for iOS includes methods to generate a static snapshot of an existing map within your application. Use the class to create a static raster image of a map, without having to make a request to another API.\n\nDeliver a consistent experience across your companion tvOS and watchOS applications with static map snapshots using MapboxStatic.swift, powered by the Mapbox Static API.\n\nThe Mapbox Maps SDK is compatible with Mapbox Studio. Design a map that seamlessly matches your brand and application design, then infuse it with your own custom data all within the Mapbox Studio web interface.\n\nYou must include the Mapbox wordmark on any map that uses the Mapbox Maps SDK for iOS. You must display attribution on maps unless the map's data comes entirely from non-Mapbox sources.\n\nYou may adjust the position of the Mapbox wordmark and attribution notice, but they must stay visible on the map. You may also change the background and text color of the attribution notice to match your design aesthetics, but all information must be legible.\n\nYou may not otherwise alter the Mapbox wordmark or text attribution notice.\n\nMapbox Telemetry is a powerful location analytics platform included in this SDK. By default, the SDK sends de-identified location and usage data to Mapbox whenever the host app causes it to be gathered. The Mapbox Terms of Service require your app to provide users with a way to individually opt out of Mapbox Telemetry, which is provided automatically as part of the attribution control. If you hide the attribution control, you must provide an alternative opt out for your users to use.\n\nLooking for an older version of the Maps SDK? See the Maps SDK v10 API reference or Maps SDK v6 documentation."
    },
    {
        "link": "https://docs.mapbox.com/ios/maps/guides/install",
        "document": "This guide will help you add the Maps SDK for iOS to your project and add a map to your iOS application.\n\nTo download and install the SDK, follow the steps below. Start by logging into your Mapbox account, then get your default public token and add it to your project's .\n\nLogin to your Mapbox account. If you don't have an account, sign up for free here.\n\nYour account includes a default public access token, and allows you to create a secret access token for use in the installation of the SDK.\n\nYour public access token is used in your application code when requesting Mapbox resources.\n\nTo configure your public access token, follow these steps:\n• Hover over a key and click the plus button\n• Click the value field and paste in your public access token.\n\nMapbox provides the Maps SDK via Swift Package Manager, CocoaPods and direct download. You can choose whichever you prefer.\n\nThe Mapbox Maps SDK can be installed via Swift Package Manager (SPM) by configuring your environment to download it from Mapbox with a secret token in your .netrc.\n• Open your Xcode project or workspace, then go to File > Add Packages Dependencies....\n• Enter into the search bar in the top right corner.\n• Select the Dependency Rule you want to apply to the Maps SDK\n• A common choice for Dependency Rule is \"Up to Next Major Version\", specifying as the minimum version. To instead install a specific version set the Dependency Rule field to \"Exact Version\" and insert the desired version. The latest stable version of the Maps SDK is .\n• In the new window select the library and click Add Package. Once SPM finishes installing the SDK you will see 4 new dependencies under Package Dependencies: , , , and .\n• Click on your project's target, scroll down to and click the plus button.\n• From the list select and click add. Now you can use start using Mapbox in your project by calling in any of your scripts. Your browser doesn't support HTML5 video. Open link to the video.\n\nYou can add a map to your application using either UIKit or SwiftUI. Add the proper snippet and then run your application to see the map."
    },
    {
        "link": "https://docs.mapbox.com/ios/legacy/maps/guides",
        "document": "The Mapbox Maps SDK for iOS is a library for embedding highly customized maps within iOS applications. Features include:\n• Custom styling: Use one of our beautiful template styles or your own custom style built with Mapbox Studio. You can even alter your map's style at runtime.\n• Offline maps: Do more without a data connection by storing your maps offline.\n• Data visualizations: Include your own custom data to create powerful interactive data visualizations.\n• Open source: Contribute and keep track of new features in our open-source GitHub repository.\n\nThe Mapbox Maps SDK for iOS is compatible with applications built in Xcode 8 or above and deployed on iOS 9 and above.\n\nThe Mapbox Maps SDK for iOS works with other Mapbox products. Mix and match other tools and plugins to create a location-savvy application to your exact specifications. Learn more about how to use Mapbox Studio as an iOS developer.\n\nThe Mapbox Maps SDK is compatible with Mapbox Studio. Design a map that seamlessly matches your brand and application design, then infuse it with your own custom data all within the Mapbox Studio web interface.\n\nEmbed real-time, turn-by-turn navigation right inside your application. The Mapbox Navigation SDK for iOS provides a high-quality user experience out of the box, so you don’t have to send your users to another application. Many customization options and reusable components allow you to adapt the interface to your unique use case and design.\n\nThe Navigation SDK features traffic-aware directions for driving, cycling, or walking between multiple locations, powered by the Mapbox Directions API. MapboxDirections.swift is also available for applications that need direct access to directions without turn-by-turn functionality.\n\nTurn coordinates into addresses or addresses into coordinates with MapboxGeocoder.swift, powered by the Mapbox Geocoding API.\n\nThe Mapbox Maps SDK for iOS includes methods to generate a static snapshot of an existing map within your application. Use the class to create a static raster image of a map, without having to make a request to another API.\n\nDeliver a consistent experience across your companion tvOS and watchOS applications with static map snapshots using MapboxStatic.swift, powered by the Mapbox Static API.\n\nDocumentation for the Mapbox Maps SDK for iOS comes in the form of:\n\nIf you can't find what you're looking for, reach out to our support team."
    },
    {
        "link": "https://docs.mapbox.com/help/dive-deeper/mobile-apps",
        "document": "The Mapbox Maps SDK for iOS and the Mapbox Maps SDK for Android are open-source tools for adding Mapbox maps to mobile applications. These SDKs leverage Mapbox's open source OpenGL-based renderer, Mapbox GL Native, and support a full suite of dynamic styling features and interactivity. You can add your custom Mapbox style, search for locations using the Mapbox Geocoding API, or get directions, all without leaving your app. Where possible, the Mapbox Maps SDKs for iOS and Android provide drop-in replacements for common platform-specific maps SDKs.\n\nThis guide outlines how the Mapbox mobile SDKs work and how Mapbox services can be added to a mobile application.\n\nThe Mapbox Maps SDKs for iOS and Android allow you to add interactive maps to your mobile applications, define custom and dynamic style rules, manipulate custom data, and interface with Mapbox web APIs.\n\nAt the heart of the Mapbox mobile SDKs is Mapbox GL: a powerful rendering engine that reads raw data and style rules and outputs complete, rendered maps on the device. While traditional server-side rendering works for creating static map tiles, the resulting tiles cannot be styled once they reach the client. With Mapbox GL, tiles can be rendered directly on the client. This enables you to create dynamic visualizations, add and remove layers dynamically, and adjust your style's properties based on data or the user's unique needs.\n\nMany popular map libraries conform to the \"basemap-overlay\" paradigm in which a map is composed of two distinct types of layers: the basemap (a complete map that provides the foundation and context for the map) and the overlay (often interactive data that is added on top of the basemap, usually at runtime).\n\nWhile the basemap-overlay strategy has worked well for a long time, there are many drawbacks. Overlays often obscure basemap labels below and large overlay datasets quickly become cumbersome.\n\nMapbox maps do away with the basemap-overlay strategy and treat everything on the map as a layer that you can style independently and move up and down the rendering stack. In this approach to displaying maps, a layer is a styled representation of vector or raster data that is rendered using rules about how Mapbox should draw certain data on the map. This strategy allows data to be added without obscuring contextual features like labels.\n\nBecause everything in the map is rendered from vector or raster tiles on the device in real time, Mapbox maps have no distinction between baselayers and overlay layers. This means that every element of the map can be added, removed, and styled dynamically at runtime, like overlays in other mapping libraries.\n\nData-driven styling enables you to change a map style based on data properties. For example, you can change the radius of a circle at an intersection based on the number of pedestrians crossing the intersection, or change the color of a state boundary fill-layer based on the population of each state.\n\nOne benefit of rendering maps on the device at runtime is that it enables the map user to query any feature in the map, including what would have once been considered the \"basemap.\" Using feature querying, you can add interactivity to any layer in your map style. For example, you can use feature querying to build an app that allows your users to tap on a park polygon to open a popup that contains information about the park.\n\nThe Mapbox mobile SDKs include methods for querying features that have been rendered on the map or features that have not been rendered, but are present in the tiles loaded in the map view.\n\nThe camera is the map’s field of view. The viewpoint of the camera in many popular mapping libraries is determined by the map’s centerpoint and zoom level. The mobile SDKs also include parameters for adjusting the map’s perspective.\n• Zoom level: any number between 0 and 22. This can be a fractional number like 1.5 or 6.2.\n• Bearing: a map rotation value in degrees. The map will be rotated and details like text labels will react by rotating right-side-up.\n• Tilt: also in degrees, a value by which the map will be tilted in perspective.\n\nApplications built with our mobile SDKs can download maps of selected regions for use when the device lacks network connectivity. Offline maps are useful for apps whose users expect to travel through areas with limited data connectivity or who want to save on mobile roaming charges while traveling abroad.\n\nLearn more about how to use offline maps in our Maps SDKs for iOS and Android in their respective documentation. For more background on offline maps, read our Offline maps troubleshooting guide.\n\nYour users should be in charge of their own location data and when it is shared. By default, whenever your application causes the user's location to be gathered, it sends de-identified location and usage data to Mapbox. If you're developing a native app with one of the Mapbox mobile SDKs, our terms of service require that you provide a telemetry opt-out option within your app for all end users. The default attribution control includes an opt out button. If you hide the attribution control, you must provide an alternative opt out method your users can use. You are responsible for allowing your users to opt out of Mapbox Telemetry.\n\nMapbox provides a variety of tools to help you integrate Mapbox maps and our other web services, like directions, geocoding, and static maps, into your mobile application.\n\nTo get started, visit the mobile SDK overview pages, which include installation instructions, API documentation, and sample code:\n\nTo keep the Mapbox Maps SDKs for iOS and Android small, we provide separate libraries for interfacing with Mapbox web services like the Mapbox Directions API, Geocoding API, and Static Images API.\n\nOn Android, the Mapbox Java SDK, Mapbox Search SDK for Android provides convenient interfaces to many Mapbox web services APIs as well as a handful of useful utilities for performing common geospatial tasks.\n\nOn iOS, Mapbox Search SDK for iOS, MapboxDirections.swift, and MapboxStatic.swift provide interfaces to the Mapbox Geocoding API, Directions API, and Static Images API.\n\nFor installation instructions, API documentation, and code examples, visit each platform's respective documentation pages:\n\nBuilt on top of the Mapbox Directions API, the Mapbox Navigation SDKs provide all the logic necessary to implement a navigation experience in your app. The Mapbox Navigation SDKs include critical features like:\n\nTo include the Mapbox Navigation SDKs in your application, visit the respective documentation pages for installation instructions, API reference, and sample code:\n\nThird party developers have created plugins and integrations that allow to you use Mapbox SDKs with a variety of alternative platforms.\n\nSee our hybrid pricing guide for more information on how usage of your app will be billed.\n\nIt is also possible to create hybrid apps with Mapbox GL JS.\n\nContact the maintainers of these integrations directly if you have issues or implementation questions, as we are not able to provide official support for hybrid frameworks.\n\nDevelopment of the Mapbox Maps SDKs for iOS and Android moves quickly, and new features are released on a regular basis. Third-party plugins that rely on these native SDKs may break with new versions, lag behind the official releases, and not support all available features. Our native SDKs work best when you use them directly."
    },
    {
        "link": "https://github.com/mapbox/mapbox-maps-ios",
        "document": "The Mapbox Maps SDK for iOS is a public library for displaying interactive, thoroughly customizable maps in native iOS. It takes map styles that conform to the Mapbox Style Specification, applies them to vector tiles that conform to the Mapbox Vector Tile Specification, and renders them using Metal.\n\nThis README is intended for developers who are interested in contributing to the Mapbox Maps SDK for iOS. Please visit https://docs.mapbox.com/ios/maps/guides/ for general information and instructions on using the Maps SDK in your iOS application.\n\nThe Examples app shows how to use many of the features in the Maps SDK. See the Examples project for more information.\n\nIf you are interested in contributing to the Maps SDK, please see the DEVELOPING.md file for information on setting up, running and building the SDK.\n\nPlease use our bug template to report any issues.\n\nPlease use our feature template to request new features or enhancements.\n\nIf you have any questions about how to use the SDK or if you need help with specific features, you can reach out to our support team via our website or connect with our developer community by joining our Discord channel. We kindly ask you to avoid using the issue tracker in this repository for questions and instead use our support channels.\n\nThis repository is a continuation of the Mapbox Maps SDK for iOS available at mapbox/mapbox-gl-native-ios."
    },
    {
        "link": "https://docs.mapbox.com/api/navigation/directions",
        "document": "The Mapbox Directions API will show you how to get where you're going. With the Directions API, you can:\n• Calculate optimal driving, walking, and cycling routes using traffic- and incident-aware routing\n• Produce routes with up to 25 coordinates for the , , , and profiles\n• Calculate routes for electric vehicles to reach destinations with optimal charging stops as well as battery prediction\n\nRetrieve directions between waypoints. Directions requests must specify at least two waypoints as starting and ending points.\n\nYou can further refine the results from this endpoint with the following optional parameters:\n\nUnrecognized options in the query string result in an error.\n\nMapbox wrapper libraries help you integrate Mapbox APIs into your existing application. The following SDKs support this endpoint:\n\nSee the SDK documentation for details and examples of how to use the relevant methods to query this endpoint.\n\nThe response to a Directions API request is a JSON object that contains the following properties:\n\nThe Directions API also supports access using the HTTP method. HTTP should be used for large requests, since the Directions API has a size limit of approximately 8100 bytes on request URLs. requests are still subject to your account's request size limits.\n\nLearn more about this process in the Using HTTP POST section.\n\nEV routing automatically identifies if charging is needed and if so, adds charging stops along the journey with optimal charge time and charging level for each stop. The charging stops are returned as waypoints with additional metadata in the route response. In some cases such as when range is too low to reach nearby charging stations, EV route may contain no charging stops with state of charge annotations going below 0%. Customize the EV route by defining the battery characteristics, vehicle dynamics and user preferences. See Parameters for Electric Vehicle Routing.\n\nEV routing is available in and profiles. Request an EV route by setting the parameter ; the other parameters apply only when the former is true. EV routing requests can specify up to 12 total waypoints. If ev_add_charging_stops is , EV routing requests can specify up to 25 total waypoints\n\nThe Mapbox EV Routing processes charging stations and builds a digital graph of interconnected stations. When you make an EV route request, the router will pick up the nearest stations along the route and identify the fastest chargers that are compatible with the driver’s model of EV.\n\nMapbox EV Router supports the following geographies for EV trip planning:\n\nThe Directions API returns charging stops as waypoints along the route. Each charging waypoint has additional describing the charging stop. The following attributes are present in the object:\n\nThe response body of a Directions API query contains a waypoint object, the input coordinates snapped to the roads network. A waypoint object contains the following properties:\n\nEach contains a object with the following fields:\n\nThe response body of a Directions API query also contains an array of route objects. A route object describes a route through multiple waypoints. A route object contains the following properties:\n\nRoute leg objects are nested within the route object. A route leg is the journey from an origin point to a destination point, so a route will usually contain one fewer route legs than it has number of input coordinates. Using the parameter will override this. For example:\n• A route request with two input coordinates defines one leg with no waypoints.\n• A route request with three input coordinates defines two legs with one waypoint.\n• A route request with four input coordinates will have two legs if it includes the parameter specifying three waypoints.\n\nEach route leg object contains the following properties:\n\nIn a route leg object, a nested route step object includes one step maneuver object as well as information about travel to the following route step:\n\nA route step object contains a nested step maneuver object, which contains the following properties:\n\nA route step object contains a nested lane object. The lane object describes the available turn lanes at an intersection. Lanes are provided in their order on the street, from left to right.\n\nA route step object contains a nested voice instruction object if the optional query parameter is present. The voice instruction object contains the text that should be announced, along with how far from the maneuver it should be emitted. The system will announce the instructions during the route step in which the voice instruction object is nested, but the instructions refer to the maneuver in the following step.\n\nA route step object contains a nested banner instruction object if the optional query parameter is present. The banner instruction object contains the contents of a banner that should be displayed as added visual guidance for a route. The banner instructions are children of the route steps during which they should be displayed, but they refer to the maneuver in the following step.\n\nEach of the different banner types ( , , and ) contains the following properties:\n\nGiven the in the table above, the possible abbreviations are, in order:\n\nThe incident object is included in the route leg object when making a request in cases where there are incidents along the route.\n\nThe table below shows supported language codes used with the parameter for turn-by-turn instructions. The language parameter will default to (English) if an unsupported language code is used.\n• For access, contact us for more information. Premium voices available for and . To enable, contact us\n\nUse of the underscore as a language code separator is supported too, like . The parameter is case-insensitive.\n\nIf and is present, then the notification is related to a range on the leg geometry. If is present, then the notification is related to a point on the leg geometry. Otherwise, the notification is not related to the leg geometry. Note that only the pair of and or can be present in a single notification object.\n\nThe object is specific to the notification type and subtype.\n\nis more severe in nature and are delivered when user-set parameters (ex: ) are violated during route generation.\n\nThe severity of is less, and is intended to inform users when implicit preferences cannot be satisfied (ex: ).\n\nOn error, the server responds with different HTTP status codes:\n• For responses with HTTP status codes lower than , the JSON response body includes the property, which may be used by client programs to manage control flow. The response body may also include a property with a human-readable explanation of the error.\n• If a server error occurs, the HTTP status code will be or higher and the response will not include a property.\n• Requests using the , , , and profiles can specify up to 25 total waypoints (input coordinates that are snapped to the roads network) along the route. But, if using , you can specify up to a total of 12 waypoints.\n• Traffic coverage for the profile is available in supported geographies. Requests to this profile revert to profile results for areas without traffic coverage.\n• Requests that contain multiple coordinates are counted as 1 request.\n• Maximum total distance between all waypoints:\n• 10,000 kilometers for the and profiles.\n• Route requests through water bodies are not supported.\n\nUsage of the Directions API is measured in API requests. A request that contains multiple waypoints is billed as a single API request. Details about the number of Directions API requests included in the free tier and the cost per request beyond what is included in the free tier are available on the pricing page."
    },
    {
        "link": "https://docs.mapbox.com/help/getting-started/directions",
        "document": "Mapbox provides a collection of APIs to add directions-related services to your application. Generate a route with trip durations, estimated distances, and turn-by-turn directions with the Mapbox Directions API, retrieve travel times between many points with the Mapbox Matrix API, compute areas that are reachable within a specified amount of time from a location by the Mapbox Isochrone API, retrieve duration-optimized trips between points with the Mapbox Optimization API, or align existing fuzzy routes to the routeable network with the Mapbox Map Matching API. From routing deliveries efficiently to providing navigation steps for wayfinding, Mapbox provides the tools necessary to integrate directions into your application.\n\nThis guide provides an overview of how the routing network is created, how to add directions services to applications across platforms, how to provide feedback, and relevant documentation to help you get started.\n\nIn the demo below, you can enter two locations to be the starting and ending points of a Directions API query, then view the response as raw JSON:\n\nThe demo uses the Mapbox Directions API through the Mapbox GL Directions plugin with Mapbox GL JS to add driving, cycling, or walking directions to a web application.\n\nThe Mapbox Directions API returns a JSON object containing a route with trip durations, estimated distances, and turn-by-turn instructions. When using the Mapbox GL Directions plugin, all this information will be automatically added to the map when a request is complete. By default, the plugin will also display turn-by-turn instructions. This example hides the turn-by-turn instructions and displays the raw JSON response to illustrate what information is included in the directions response object.\n\nWhen you provide two or more points to the Mapbox Directions API, it returns a route as a GeoJSON line that you can add to your map, text for turn-by-turn instructions that you can choose to display in your application, and the distance and estimated travel times for the mode of transportation you selected. There are many other services that extend Mapbox directions that allow you to fix messy GPS traces to the network or optimize trips to multiple stops on a single journey.\n\nThe Mapbox routing network can create routes and optimized trips, and is used to calculate the most efficient path for a given mode of transportation (driving, cycling, and walking). The routing network includes a robust network of roads and paths (also known as ways) with distinct attributes like speed limits, turn lane restrictions, mode of travel, and accessibility for bikes and pedestrians.\n\nThe Mapbox Directions API, Matrix API, and Optimization API all provide estimated trip durations. The time it takes to travel from one point to another is determined by many factors, including:\n• The speed stored in the tag in OpenStreetMap.\n• Traffic derived from real-time telemetry data (when the traffic profile is used).\n\nIncorporate real-time and typical traffic data using the routing profile into route selection and ETA generation with the Mapbox Directions API, Map Matching API, Matrix API, either into computing areas of reachability with the Mapbox Isochrone API, or add a traffic layer to road geometries on a visual map. Read more about our traffic tileset in Mapbox data.\n\nThe routing profile is available globally, but the availability of traffic varies by country. Real-time traffic shows speeds that have been directly observed in the last 15 minutes. Real-time traffic data is useful if there are atypical traffic patterns (for example, during severe weather events or accidents).\n\nWhen real-time traffic conditions are not available, typical traffic conditions will be used instead. Typical traffic is an estimate for traffic speeds at a specific location, at a specific time, based on historical observations. Typical traffic data reflects normal traffic conditions during a typical week.\n\nFor the following countries, the returned ETA is calculated using both real-time and typical traffic data along the requested route.\n\nThere are many tools you can use to enable directions-related services for your Mapbox web or mobile application. You can access these services directly using the web services APIs, through our Navigation SDK, or using one of several plugins and libraries to integrate these services into applications across platforms.\n• Mapbox Directions API: retrieve point to point directions including a route with durations, estimated distances, and turn-by-turn instructions.\n• Mapbox Matrix API: retrieve all travel times between many points.\n• Mapbox Isochrone API: compute areas that are reachable within a specified amount of time from a location.\n\nRead more about the required inputs for each API below.\n\nRequesting directions from the Mapbox Directions API requires at least two waypoints — an origin and a destination — but can also include up to 23 additional waypoints between (or a total of 25 waypoints). When making a request, you can specify additional parameters such as which routing profile to use (walking, cycling, driving, or driving with traffic) and whether alternate routes should be included in the response.\n\nYou can also add optional annotations to your request, including duration, distance, speed, and congestion. We calculate congestion by comparing night-time traffic speeds with real-time traffic speeds and assign a level of congestion given the percentage difference.\n\nYou can read more about the directions response object in our Directions API documentation.\n\nUse of the Directions API is billed by API requests. For more details, see the Directions API pricing page.\n\nThe Mapbox Matrix API returns travel times between many locations. Each location is either a source or destination. The number of sources and destinations are multiplied to create the matrix, or timetable, and calculate the number of elements needed to make the request. For example, given three locations A, B, C, the Matrix API will return a matrix of all travel times in seconds between all locations:\n\nThe Matrix API will always return the duration on the most efficient route for each location in the matrix, where an element is an origin-destination pair in the matrix.\n\nDurations between locations may not be symmetric (for example A to B may have a different duration than B to A), as the routes may differ by direction due to one-way streets or turn restrictions. By default the Matrix API returns durations in seconds, but it can also return route distances if specified in the parameter. Like the Directions API, the Matrix API must be used within a single continent (the inputs must not require it to cross over water bodies).\n\nThis API allows you to build tools that efficiently check the reachability of coordinates from each other, filter locations by travel time, or run your own algorithms for solving optimization problems.\n\nEach request requires that you specify which locations are the sources and which are the destinations. There are four types of requests you can use with the Matrix API:\n\nUse of the Matrix API is billed by the number of elements returned by a request. For more details, see the Matrix API pricing page.\n\nThe Mapbox Isochrone API computes areas that are reachable within a specified amount of time from a location, and returns the reachable regions as contours of polygons or lines that you can display on a map. This API also supports contours based on distance.\n\nWith the Isochrone API, you can calculate isochrones of up to 60 minutes or 100 kilometers using , , , or profiles, define delivery or service zones based on travel times from a starting location, illustrate travel times on a map with lines or polygons, or create geofences to trigger location-aware user experiences, notifications, or events.\n\nUse of the Isochrone API is billed by API requests. For more details, see the Isochrone API pricing page.\n\nThe Mapbox Optimization API returns a duration-optimized trip between the input coordinates. This is also known as solving the Traveling Salesperson Problem. This API could be used to plan a route for deliveries in a city. Optimized trips can be retrieved for driving, bicycling, and walking or hiking.\n\nUse of the Optimization API is billed by API requests. For more details, see the Optimization API pricing page.\n\nThe Mapbox Map Matching API snaps fuzzy, inaccurate traces from a GPS unit or a phone to the OpenStreetMap road and path network using the Directions API. This produces clean paths that can be displayed on a map or used for other analysis.\n\nUse of the Map Matching API is billed by API requests. For more details, see the Map Matching API pricing page.\n\nYou can add directions to a mobile application using the Mapbox Navigation SDK for iOS and Android. With the Navigation SDK, it takes only a few lines of code to display a complete navigation experience inside your app. With the Navigation SDK, you can:\n• Use automatic rerouting when a user deviates from the route.\n\nRead more about the Navigation SDK for iOS and Android.\n\nWe have several tools across platforms that allow you to integrate the Mapbox Directions API into your existing applications seamlessly:\n\nThese tools allow you to add routing capabilities to your application, but have limitations when it comes to customization. These tools do not provide access to the Mapbox Matrix API, Optimization API, or Map Matching API. For more flexibility, you can use our APIs directly or using our JavaScript library.\n\nHere's an example of the Mapbox GL Directions plugin in action:\n\nIf you would like to get a feel for how the Mapbox Directions API works without building a whole application, we also provide a Directions API Playground. Besides providing a convenient user interface to test queries, the API playground allows you to test the API's URL and query parameters, such as mode of transportation, steps, and alternative routes.\n\nTo report routing issues you've identified with the Directions API, you can provide feedback from our Directions API Playground by generating the route and then clicking the Send feedback about this route button. For all other navigation-related services, contact our Support team with the full API request."
    },
    {
        "link": "https://github.com/mapbox/mapbox-directions-swift",
        "document": "Mapbox Directions for Swift (formerly MapboxDirections.swift) makes it easy to connect your iOS, macOS, tvOS, watchOS, or Linux application to the Mapbox Directions and Map Matching APIs. Quickly get driving, cycling, or walking directions, whether the trip is nonstop or it has multiple stopping points, all using a simple interface reminiscent of MapKit’s API. Fit a GPX trace to the OpenStreetMap road network. The Mapbox Directions and Map Matching APIs are powered by the OSRM and Valhalla routing engines. For more information, see the Mapbox Navigation homepage.\n\nMapbox Directions pairs well with MapboxGeocoder.swift, MapboxStatic.swift, the Mapbox Navigation SDK for iOS, and the Mapbox Maps SDK for iOS or macOS SDK.\n\nSpecify the following dependency in your Carthage Cartfile:\n\nOr in your CocoaPods Podfile:\n\nOr in your Swift Package Manager Package.swift:\n\nThis repository contains an example application that demonstrates how to use the framework. To run it, you need to use Carthage 0.19 or above to install the dependencies. Detailed documentation is available in the Mapbox API Documentation.\n• One of the following package managers:\n• One of the following operating systems:\n\nv0.30.0 is the last release of MapboxDirections.swift that supports a minimum deployment target of iOS 9.x, macOS 10.11.x, tvOS 9.x, or watchOS 2.x. v0.30.0 is also the last release that is compatible with Objective-C or AppleScript code.\n\nYou’ll need a Mapbox access token in order to use the API. If you’re already using the Mapbox Maps SDK for iOS or macOS SDK, Mapbox Directions automatically recognizes your access token, as long as you’ve placed it in the key of your application’s Info.plist file.\n\nThe examples below are each provided in Swift (denoted with ). For further details, see the documentation available by the link in the releases.\n\nThe main directions class is . Create a directions object using your access token:\n\nAlternatively, you can place your access token in the key of your application’s Info.plist file, then use the shared directions object:\n\nWith the directions object in hand, construct a RouteOptions object and pass it into the method.\n\nThis library uses version 5 of the Mapbox Directions API by default.\n\nIf you have a GPX trace or other GPS-derived location data, you can clean up the data and fit it to the road network using the Map Matching API:\n\nYou can also use the method to get Route objects suitable for use anywhere a standard Directions API response would be used.\n\nTell the user how far they can travel within certain distances or times of a given location using the Isochrone API. uses the same access token initialization as . Once that is configured, you need to fill parameters to calculate the desired GeoJSON:\n\nSee the travel times or distances between many points using the Matrix API. uses the same access token initialization as . Once that is configured, you need to fill parameters to calculate the desired matrix:\n\nWith the Mapbox Maps SDK for iOS or macOS SDK, you can easily draw the route on a map:\n\nThe Mapbox Navigation SDK for iOS provides a full-fledged user interface for turn-by-turn navigation along routes supplied by MapboxDirections.\n\nMapboxStatic.swift provides an easy way to draw a isochrone contours on a map.\n\nis a command line tool, designed to round-trip an arbitrary, JSON-formatted Directions or Map Matching API response through model objects and back to JSON. This is useful for various scenarios including testing purposes and designing more sophisticated API response processing pipelines. It is supplied as a Swift package.\n\nTo run (and build if it wasn't yet) and see usage:\n\nFor further details, see the MapboxDirectionsCLI documentation.\n\nAPI calls made to the Directions API are individually billed by request. Review the pricing information and the pricing page for current rates."
    },
    {
        "link": "https://docs.mapbox.com/ios/directions/api-reference",
        "document": ""
    },
    {
        "link": "https://docs.mapbox.com/help/tutorials/getting-started-directions-api",
        "document": ""
    }
]