[
    {
        "link": "https://fastled.io/docs",
        "document": "Want to control a strip of leds? Or control 10's of thousands? FastLED has your back.\n\nFastLED is a robust and massively parallel-led driver for Arduino, Esp32, RaspberryPi, Atmega, Teensy, Uno, Apollo3 Arm and more. Also runs on dirt cheap sub $1 devices, due to it's incredibly small compile size. High end devices can drive upto ~30k LEDS (Teensy) and ~20k on ESP32. Supports nearly every single LED chipset in existence. Background rendering (ESP32/Teensy/RaspberriPi) means you can respond to user input while the leds render. FastLED is the fourth most popular library on Arduino.\n\nThis is a driver library for easily & efficiently controlling a wide variety of LED chipsets, like the ones sold by Adafruit (NeoPixel, DotStar, LPD8806), Sparkfun (WS2801), and AliExpress.\n• Background rendering of LEDs so that your program/sketch can prepare the next frame and respond to user input without affect frame rate.\n\nIn addition to writing to the LEDs, this library also includes a number of functions for high-performing 8-bit math for manipulating your RGB values, as well as low level classes for abstracting out access to pins and SPI hardware, while still keeping things as fast as possible.\n\nWe have multiple goals with this library:\n• Quick start for new developers - hook up your LEDs and go, no need to think about specifics of the LED chipsets being used\n• Zero pain switching LED chipsets - you get some new LEDs that the library supports, just change the definition of LEDs you're using, et. voila! Your code is running with the new LEDs.\n• High performance - with features like zero cost global brightness scaling, high performance 8-bit math for RGB manipulation, and some of the fastest bit-bang'd SPI support around, FastLED wants to keep as many CPU cycles available for your LED patterns as possible\n\nThis is an Arduino Sketch that will run on Arduino Uno/Esp32/Raspberri Pi\n\nFor more examples see this [link](examples). Web compiled examples.\n\nNew in 3.9.10: Super Stable WS2812 SPI driver for ESP32\n\nNew in 3.9.9: 16-way Yves I2S parallel driver for the ESP32-S3\n\nNew in 3.9.2 - Overclocking of WS2812\n\nUpdate: max overclock has been reported at +70%: https://www.reddit.com/r/FastLED/comments/1gkcb6m/fastled_FASTLED_OVERCLOCK_17/\n\nNow compiles in the upcoming FastLED 3.9.14! - Very memory limited, so only tested against examples WS2812 Blink and APA102\n\nMultiple issues with this board. Pins aren't defined, F_CPU is not defined nor is it constant. And lots of other issues. Help wanted!\n\nNow Supported in the upcoming FastLED 3.9.12!\n\nNow supported as of FastLED 3.9.10!\n\nEspressif's current evaluation of FastLED's compatibility with their product sheet can be found here\n\nAfter the ArduinoIDE is installed then add the library to your IDE\n\nPlatformIO offers an incredible IDE experience. Setup is easier than you think. Follow our guide here. Our template will allow your project to be compiled by both PlatformIO and ArduinoIDE\n\nHow to maximize the number of parallel WS2812 outputs\n\nSome of the new processors can drive many many WS2812 strips in parallel.\n\nThis chipset holds the current record for parallel output in a stock configuration. The theoretical output is 50 strips at a time with Teensy 4.1 and 42 strips with Teensy 4.2.\n\nSee this example on how to enable.\n\nSurprisingly it's the good old ESP32Dev and not the ESP32S3, which holds the esp record for the amount of parallel outputs at 24 through I2S, and 8 via RMT.\n\nI2S needs special setup as of 3.9.11 and earlier (current version of this writing is 3.9.11) see the example here.\n\nThe S3 is a CPU beast, but has half the RMT tx channels (4) and 2/3rds the I2S channels (16) of ESPDev. The S3 requires a special driver for I2S which you can find in this example\n\nI (Zach Vorhies) don't use this platform. Help wanted on what the limits of this chip is.\n\nIf you are willing to make a custom board with shift registers, then the ESp32S3 and ESP32Dev have special \"virtual pin\" libraries. These libraries will allow you to drive 120 parallel WS2812 outputs. However these are not included in FastLED but are compatible with it.\n\nZero pain setup and install/test/run. Can be done from the command line in seconds if or are installed. See our contributing guide guide for more information.\n\nWhen changes are made then push to your fork to your repo and git will give you a url to trigger a pull request into the master repo.\n• run [compile](compile) and then select your board\n\nIf you need help with using the library, please consider visiting the Reddit community at https://reddit.com/r/FastLED. There are thousands of knowledgeable FastLED users in that group and a plethora of solutions in the post history.\n\nIf you are looking for documentation on how something in the library works, please see the Doxygen documentation online at http://fastled.io/docs.\n\nIf you run into bugs with the library, or if you'd like to request support for a particular platform or LED chipset, please submit an issue at http://fastled.io/issues.\n\nHere's a list of all the LED chipsets are supported. More details on the LED chipsets are included on our wiki page\n• HD107s, same thing as the APA102, but runs at turbo 40 Mhz\n• APA102 - SPI-based chipset\n• APA102HD - Same as APA102 but with a high-definition gamma correction function applied at the driver level.\n• DMX - send rgb data out over DMX using Arduino DMX libraries\n• LPD6803 - SPI-based chipset, chip CMODE pin must be set to 1 (inside oscillator mode)\n\nAPA102 and the 'High Definition' Mode in FastLED\n\nFastLED features driver-level gamma correction for the APA102 and SK9822 chipsets, using our \"pseudo-13-bit mixing\" algorithm.\n\nRead about it here: https://github.com/FastLED/FastLED/blob/master/APA102.md\n\nEnable it like by using the type. Example:\n\nCheck out thr rust port of this algorithm:\n\nWe've created a custom repo you can try to start your projects. This repo is designed to be used with VSCode + PlatformIO but is also backwards compatible with the Arduino IDE.\n\nPlatformIO is an extension to VSCode and is generally viewed as a much better experience than the Arduino IDE. You get auto completion tools like intellisense and CoPilot and the ability to install tools like crash decoding. Anything you can do in Arduino IDE you can do with PlatformIO.\n\nWhen running the Arduino IDE you need to do the additional installation step of installing FastLED in the global Arduino IDE package manager.\n\nInstall the library using either the .zip file from the latest release or by searching for \"FastLED\" in the libraries manager of the Arduino IDE. See the Arduino documentation on how to install libraries for more information.\n\nInformation on porting FastLED can be found in the file PORTING.md.\n\nWhat about that name?\n\nWait, what happened to FastSPI_LED and FastSPI_LED2? The library was initially named FastSPI_LED because it was focused on very fast and efficient SPI access. However, since then, the library has expanded to support a number of LED chipsets that don't use SPI, as well as a number of math and utility functions for LED processing across the board. We decided that the name FastLED more accurately represents the totality of what the library provides, everything fast, for LEDs.\n\nCheck out the official site http://fastled.io for links to documentation, issues, and news.\n\nIn Memory of Daniel Garcia Daniel Garcia, the brilliant founder of FastLED, tragically passed away in September 2019 in the Conception dive boat fire alongside his partner, Yulia. This heartbreaking loss was felt deeply by the maker and developer community, where Daniel's contributions had left an indelible mark.\n\nDaniel was more than just a talented programmer; he was a passionate innovator who transformed the way creators interacted with LED technology. His work on FastLED brought high-performance LED control to countless projects, empowering developers to craft breathtaking installations.\n\nIn his personal life, Daniel was known for his kindness and creativity. His pride in FastLED and the vibrant community it fostered was a testament to his dedication to open-source development and his commitment to helping others bring light into the world.\n\nWhile Daniel is no longer with us, his legacy continues through the FastLED library and the countless makers who use it. The community he built serves as a living tribute to his ingenuity, generosity, and the joy he found in sharing his work with the world.\n\nZach Vorhies, the current main contributor to FastLED, briefly worked with Dan in 2014 in San Francisco and was an avid user of the FastLED library for over 13 years. After Daniel Garcia’s untimely passing, Zach stepped up to ensure FastLED’s continued growth and development.\n\nZach has this to say about FastLED:\n\n*\"The true power of FastLED lies in its ability to transform programmers into LED artists. Free space becomes their canvas; bending light is their medium. FastLED is a collective effort by programmers who want to manifest the world that science fiction writers promised us. -- To contribute code to FastLED is to leave behind a piece of something immortal.\"*\n\nSee our easy to use guide here:\n\nTo stay updated on the latest feature releases, please click the button in the upper right"
    },
    {
        "link": "https://docs.arduino.cc/libraries/fastled",
        "document": ""
    },
    {
        "link": "https://fastled.io",
        "document": "FastLED is a fast, efficient, easy-to-use Arduino library for programming addressable LED strips and pixels such as WS2810, WS2811, LPD8806, Neopixel and more. FastLED is used by thousands of developers, in countless art and hobby projects, and in numerous commercial products.\n\nWe build FastLED to help you get started faster, develop your code faster, and make your code run faster."
    },
    {
        "link": "https://github.com/FastLED/FastLED",
        "document": "Want to control a strip of leds? Or control 10's of thousands? FastLED has your back.\n\nFastLED is a robust and massively parallel-led driver for Arduino, Esp32, RaspberryPi, Atmega, Teensy, Uno, Apollo3 Arm and more. Also runs on dirt cheap sub $1 devices, due to it's incredibly small compile size. High end devices can drive upto ~30k LEDS (Teensy) and ~20k on ESP32. Supports nearly every single LED chipset in existence. Background rendering (ESP32/Teensy/RaspberriPi) means you can respond to user input while the leds render. FastLED is the fourth most popular library on Arduino.\n\nThis is a driver library for easily & efficiently controlling a wide variety of LED chipsets, like the ones sold by Adafruit (NeoPixel, DotStar, LPD8806), Sparkfun (WS2801), and AliExpress.\n• Background rendering of LEDs so that your program/sketch can prepare the next frame and respond to user input without affect frame rate.\n\nIn addition to writing to the LEDs, this library also includes a number of functions for high-performing 8-bit math for manipulating your RGB values, as well as low level classes for abstracting out access to pins and SPI hardware, while still keeping things as fast as possible.\n\nWe have multiple goals with this library:\n• Quick start for new developers - hook up your LEDs and go, no need to think about specifics of the LED chipsets being used\n• Zero pain switching LED chipsets - you get some new LEDs that the library supports, just change the definition of LEDs you're using, et. voila! Your code is running with the new LEDs.\n• High performance - with features like zero cost global brightness scaling, high performance 8-bit math for RGB manipulation, and some of the fastest bit-bang'd SPI support around, FastLED wants to keep as many CPU cycles available for your LED patterns as possible\n\nThis is an Arduino Sketch that will run on Arduino Uno/Esp32/Raspberri Pi\n\nFor more examples see this link. Web compiled examples.\n\n*Note some users find that newer versions of the ESP32 arduino core (3.10) don't work very well, but older versions do, see issue 1903\n\nUpdate: max overclock has been reported at +70%: https://www.reddit.com/r/FastLED/comments/1gkcb6m/fastled_FASTLED_OVERCLOCK_17/\n\nNew FastLED 3.9.14! - Very memory limited, so only tested against examples WS2812 Blink and APA102\n\nNow supported as of FastLED 3.9.10!\n\nEspressif's current evaluation of FastLED's compatibility with their product sheet can be found here\n\nAfter the ArduinoIDE is installed then add the library to your IDE\n\nPlatformIO offers an incredible IDE experience. Setup is easier than you think. Follow our guide here. Our template will allow your project to be compiled by both PlatformIO and ArduinoIDE\n\nSome of the new processors can drive many many WS2812 strips in parallel.\n\nThis chipset holds the current record for parallel output in a stock configuration. The theoretical output is 50 strips at a time with Teensy 4.1 and 42 strips with Teensy 4.2.\n\nSee this example on how to enable.\n\nSurprisingly it's the good old ESP32Dev and not the ESP32S3, which holds the esp record for the amount of parallel outputs at 24 through I2S, and 8 via RMT.\n\nI2S needs special setup as of 3.9.11 and earlier (current version of this writing is 3.9.11) see the example here.\n\nThe S3 is a CPU beast, but has half the RMT tx channels (4) and 2/3rds the I2S channels (16) of ESPDev. The S3 requires a special driver for I2S which you can find in this example\n\n*Note some users find that newer versions of the ESP32 arduino core (3.10) don't work very well, but older versions do, see issue 1903\n\nI (Zach Vorhies) don't use this platform. Help wanted on what the limits of this chip is.\n\nIf you are willing to make a custom board with shift registers, then the ESp32S3 and ESP32Dev have special \"virtual pin\" libraries. These libraries will allow you to drive 120 parallel WS2812 outputs. However these are not included in FastLED but are compatible with it.\n\nZero pain setup and install/test/run. Can be done from the command line in seconds if or are installed. See our contributing guide guide for more information.\n\nWhen changes are made then push to your fork to your repo and git will give you a url to trigger a pull request into the master repo.\n• run compile and then select your board\n\nIf you need help with using the library, please consider visiting the Reddit community at https://reddit.com/r/FastLED. There are thousands of knowledgeable FastLED users in that group and a plethora of solutions in the post history.\n\nIf you are looking for documentation on how something in the library works, please see the Doxygen documentation online at http://fastled.io/docs.\n\nIf you run into bugs with the library, or if you'd like to request support for a particular platform or LED chipset, please submit an issue at http://fastled.io/issues.\n\nHere's a list of all the LED chipsets are supported. More details on the LED chipsets are included on our wiki page\n• HD107s, same thing as the APA102, but runs at turbo 40 Mhz\n• APA102 - SPI-based chipset\n• APA102HD - Same as APA102 but with a high-definition gamma correction function applied at the driver level.\n• DMX - send rgb data out over DMX using Arduino DMX libraries\n• LPD6803 - SPI-based chipset, chip CMODE pin must be set to 1 (inside oscillator mode)\n\nFastLED features driver-level gamma correction for the APA102 and SK9822 chipsets, using our \"pseudo-13-bit mixing\" algorithm.\n\nRead about it here: https://github.com/FastLED/FastLED/blob/master/APA102.md\n\nEnable it like by using the type. Example:\n\nCheck out thr rust port of this algorithm:\n\nWe've created a custom repo you can try to start your projects. This repo is designed to be used with VSCode + PlatformIO but is also backwards compatible with the Arduino IDE.\n\nPlatformIO is an extension to VSCode and is generally viewed as a much better experience than the Arduino IDE. You get auto completion tools like intellisense and CoPilot and the ability to install tools like crash decoding. Anything you can do in Arduino IDE you can do with PlatformIO.\n\nWhen running the Arduino IDE you need to do the additional installation step of installing FastLED in the global Arduino IDE package manager.\n\nInstall the library using either the .zip file from the latest release or by searching for \"FastLED\" in the libraries manager of the Arduino IDE. See the Arduino documentation on how to install libraries for more information.\n\nInformation on porting FastLED can be found in the file PORTING.md.\n\nWait, what happened to FastSPI_LED and FastSPI_LED2? The library was initially named FastSPI_LED because it was focused on very fast and efficient SPI access. However, since then, the library has expanded to support a number of LED chipsets that don't use SPI, as well as a number of math and utility functions for LED processing across the board. We decided that the name FastLED more accurately represents the totality of what the library provides, everything fast, for LEDs.\n\nCheck out the official site http://fastled.io for links to documentation, issues, and news.\n\nIn Memory of Daniel Garcia Daniel Garcia, the brilliant founder of FastLED, tragically passed away in September 2019 in the Conception dive boat fire alongside his partner, Yulia. This heartbreaking loss was felt deeply by the maker and developer community, where Daniel's contributions had left an indelible mark.\n\nDaniel was more than just a talented programmer; he was a passionate innovator who transformed the way creators interacted with LED technology. His work on FastLED brought high-performance LED control to countless projects, empowering developers to craft breathtaking installations.\n\nIn his personal life, Daniel was known for his kindness and creativity. His pride in FastLED and the vibrant community it fostered was a testament to his dedication to open-source development and his commitment to helping others bring light into the world.\n\nWhile Daniel is no longer with us, his legacy continues through the FastLED library and the countless makers who use it. The community he built serves as a living tribute to his ingenuity, generosity, and the joy he found in sharing his work with the world.\n\nZach Vorhies, the current main contributor to FastLED, briefly worked with Dan in 2014 in San Francisco and was an avid user of the FastLED library for over 13 years. After Daniel Garcia’s untimely passing, Zach stepped up to ensure FastLED’s continued growth and development.\n\nZach has this to say about FastLED:\n\n\"The true power of FastLED lies in its ability to transform programmers into LED artists. Free space becomes their canvas; bending light is their medium. FastLED is a collective effort by programmers who want to manifest the world that science fiction writers promised us. -- To contribute code to FastLED is to leave behind a piece of something immortal.\"\n\nSee our easy to use guide here:\n\nTo stay updated on the latest feature releases, please click the button in the upper right"
    },
    {
        "link": "https://github.com/FastLED/FastLED/wiki/Chipset-reference",
        "document": "Here's a list of the chipsets that are currently supported by the library as well as some notes about them based on our experiences. Information pulled from either data sheets or experimentation.\n• APA102 - (adafruit sells these as dotstars) Fast data rate (I've pushed as fast as 24Mhz), stupid high refresh rate. I'd recommend these over just about anything else at this point.\n• ws2811/ws2812/ws2812B - (adafruit sells these as \"neopixels\") super cheap (30 leds/m for $6, 60 leds/m for $11!), very slow data rate (800Kbps - meaning you'd want to investigate parallel output for more than a few hundred leds - see paul's excellent OctoWS2811 if you're using a teensy 3 - and i'm currently working on code for FastLED that will allow grouping/blocking of multiple streams of output in parallel - hopefully that will be out some time this year - I had an installation going in on july 4th that used it :). Also - many of the strips are 1 led, 1 controller, so you can cut at every led. Even better, is the ws2812 variant, which is the led and chip in a single package (some people still sell these as ws2811 - but the protocol is the same) - so it can be very very compact. Unfortunately, their data protocol requires disabling interrupts on the avr while writing data out, and so using these leds will interfere with things like IR libraries or using i2c and serial. NOTE: at some point, the timings for WS2811 chips changed to be closer in line to the WS2812 timings. If you have chips identified as WS2811 that are behaving badly, try changing the chipset reference in addLEds to WS2812, and see if that fixes the issues.\n• lpd8806's - less cheap (closer to $16/meter shipped for 48/m), but super fast (i've pushed them at upwards of 22Mbps!). Also, they're paired, so it's one controller per 2 rgb pixels. Note that these only really display 7 bits per channel, not 8, so they can really only display 128 different levels of light for each color channel. Programming API is still 8 bits, but the low bit is meaningless.\n• P9813 - This is the chipset used in Cool Neon's Total Control Lighting.\n• ws2801 - older, cheap(ish) - but slow (1Mbps), i've found it prone to glitching at longer lengths, and higher data rates are right out.\n• tm1809/1804/1812 - similar in protocol to the ws8211, similar cost benefit when it was out, 1 IC per 3 rgb leds, seems to be a lot twiticher re: line interference (the 1809 controls 3 rgb pixels, the 1804 controls 1)\n• tm1803 - slower speed version of the tm1809, sold primarily by radio shack\n• UCS1903 - similar to tm1809/ws2811. Not sure why this exists, honestly. Very very slow protocol, closer to 400kbps.\n• UCS1904/2903 - closer in timing to the ws2811. Some folks find it interesting\n• SM16716 - implemented because a couple people asked for it. Terrible protocol.\n• GW6205 - someone asked for these, I haven't ever seen them in person!\n• LPD1886 - a 3 wire chipset that is 12-bits per pixel instead of the usually 7/8-bit per pixel most of the other chipsets seen are so far\n• DMX controllers (DMXSIMPLE or DMXSERIAL) - if your'e controlling your leds using DMX from an arduino, this will drive DMX using the rest of the led library - note that you will need to or before to use DMX output.\n• Adafruit Pixie leds (PIXIE) - http://www.adafruit.com/product/2741 - in order to use these leds you before .\n\n(as in, soon, depending, timeframe), unclear on hotness, or if they will be made to work.\n• TM1829 - similar to the TM1809/WS2811, but also allows setting 32 base current levels for brightness/power usage control - i have a set of these, but the code for them doesn't work yet\n• TLS3001 - I get a lot of requests for this one. Unsure what benefits it provides, but among other things it's 12-bits per color vs. 8-bit for most of the currently supported chipsets.\n• TI TLC5940 - this is a heavy hitter - also 12 bit color, led color correction support, 16 led channels per chip - i've heard of people doing RGBW with setups like this.﻿\n• TI TLC5947 like above, but with 24 channels\n\nHere's a chart listing the various chipsets and pieces of data that we know about them at the moment. Chipset power draw is how much power a single chip draws when the leds are off, but power is connected:"
    },
    {
        "link": "https://reddit.com/r/FastLED/comments/12xeb5d/control_color_animation_on_a_specific_section_of",
        "document": "I have a single LED strip around a frame and want to control the position of color. I know I can use the 'colorpalette' method but want more control. For instance bottom half animated green hues, top half blue hues kinda twinkling.\n\nI only see way to do this on the entire strip. Are there ways to control specific area of the strip with different animation patterns?"
    },
    {
        "link": "https://forum.arduino.cc/t/fastled-and-gradient-color-palettes/642251",
        "document": "If possible, you should always post code directly in the forum thread as text using code tags:\n• Do an Auto Format (Tools > Auto Format in the Arduino IDE or Ctrl + B in the Arduino Web Editor) on your code. This will make it easier for you to spot bugs and make it easier for us to read.\n• In the Arduino IDE or Arduino Web Editor, click on the window that contains your sketch code.\n• Press \"Ctrl + A\". This will select all the text.\n• Press \"Ctrl + C\". This will copy the selected text to the clipboard.\n• In a forum reply here, click the \"Reply\" button.\n• Click the </> button on the forum toolbar. This will add the forum's code tags markup to your reply.\n• Press \"Ctrl + V\". This will paste the sketch between the code tags.\n• Move the cursor outside of the code tags before you add any additional text to your reply.\n• Repeat the above process if your sketch has multiple tabs.\n\nThis will make it easy for anyone to look at it, which will increase the likelihood of you getting help.\n\nIf the sketch is longer than the 9000 characters maximum allowed by the forum, then it's OK to add it as an attachment. After clicking the \"Reply\" button, you will see an \"Attachments and other settings\" link that will allow you to make the attachment.\n\nWhen your code requires a library that's not included with the Arduino IDE please post a link (using the chain links icon on the forum toolbar to make it clickable) to where you downloaded that library from or if you installed it using Library Manger (Sketch > Include Library > Manage Libraries in the Arduino IDE or Libraries > Library Manager in the Arduino Web Editor) then say so and state the full name of the library."
    },
    {
        "link": "https://reddit.com/r/FastLED/comments/gpsc89/custom_animations",
        "document": "Sup guys, hope you're all right :)\n\nLately I've delved into the world of fastLEDs... I think it's the most appropriate library for what I'm creating...\n\nI am replacing fret markers (the black dots) with leds, and a fancy logo on the 12th fret (the bar with the two dots in the middle) with a neopixel ring. Obviously, this is a whole custom thing so wiring is not to be worried about.\n\nMy question is, how are animations achieved through the use of this library? I am aware of the 'palettes' which are a very nice thing to have since the colors will depend entirely on a 5-way switch situated on the bottom of the guitar.\n\nFor example, let's say I turn on the whole thing, and a glimmer-like wave animation starts from the top (near the head of the guitar, in this picture it's on the right) and cycles downwards rotates once on the ring, follows through the remaining 4 or so LEDs and comes back up. Also, since the 'startup animation' would be nice to have in a specific margin of time which is easily changeable in the code, how can this overall speed be modified?\n\nAny help is appreciated, even if you point me to another link, or doc, as the furthest I've got is using the in the palette example of the library.\n\nEDIT: I'm using WS2812B LEDs and an Arduino Uno for prototyping (a nano will be used in the project)"
    },
    {
        "link": "https://racheldebarros.com/arduino-projects/how-to-use-fastled-with-arduino-to-program-led-strips",
        "document": "LED strips are a fantastic way to add vibrant and dynamic lighting effects to any project. Whether you’re designing a set for an attraction, building robots and animatronics or realistic props, LED strips can help you achieve your vision. But programming these LED strips to display custom patterns and animations can seem like a daunting task if you’re just getting started with microcontrollers like the Arduino or have never programmed anything at all.\n\nSure, there are plenty of LED kits on the market that come with a remote control and pre-programmed colors that you can choose from. But the vast majority of these kits can at best cycle through a single color at a time and maybe give you some basic flashing effects. Your project deserves more. In this tutorial, we’ll explore how to use the FastLED library with Arduino to program LED strips, creating a wide range of lighting animations with ease. Whether you’re a beginner or an experienced maker, this guide will help you unlock the full potential of your LED strips and bring your project to life.\n\nIn order to get started, connect your LED strip to both your Arduino and power supply, and then fire up the Arduino IDE. If you’re an absolute beginner and never hooked up anything before or coded with Arduino you have nothing to worry about! You can download the Arduino IDE for free from the Arduino website and get familiar with the program and how Arduino sketches work by checking out my Arduino IDE & Uploading Your First Sketch tutorial. If you need help with getting the different components wired and connected properly, review my previous step-by-step tutorial on how to connect and power an LED strip with Arduino which also includes a wealth of information about LED strips to help you select the best one for your project. Then, join us back here to start programming your first animations!\n\nThe FastLED library can be installed right from the Arduino IDE! Just navigate to Sketch > Include Library > Manage Libraries. From there, start typing FastLED into the search box and you should see the FastLED library show up as the first choice. Go ahead and install the latest version. Sometimes when you install a new library it won’t work until you restart the Arduino IDE. You’ll can either do this now so you’re ready to go, or later once we start coding. With any library, you’ll notice that the library’s keywords won’t change color like they’re supposed to if the library is not recognized. That’s an indication to try and restart the program and that usually resolves it.\n\nHow to Get Started with the FastLED Library\n\nWith the library installed, let’s set up some parameters in our Arduino sketch so we can begin programming our animations. I’ll take you through all the necessary code to get your animations working but if you would like further reading, the official documentation for the FastLED library can be found here: FastLED Wiki\n\nThe first step in writing our sketch is to include the FastLED library. This will allow us to use a variety of functions written specifically for controlling LED strips that aren’t a part of the standard Arduino IDE. To include a library in a sketch go to Sketch > Include Library > FastLED. You’ll notice a new line of code pop up at the very top of your sketch:\n\nNext, we’ll need to define some global variables that tells the FastLED library about our hardware setup like type of LED chipset we’re working with, number of pixels in our strip and where the data line is connected. Place this code block below the line that includes the FastLED library and above the void setup() function.\n\nIn this line of code we define how many pixels we want to control. For this example there are 20 pixels in our LED strip. If you had 100 pixels in your strip then replace 20 with 100 and the line of code would look like this:\n\nWith this line, we’re telling the FastLED library what pin of the Arduino the LED strip’s data line is connected to. In our example, the data line is connected to pin 2 on the Arduino. Simply change 2 to whatever pin you’re using. If you’re using pin 6, then this line of code would look like this:\n\nFinally, we create an array which is a collection of variables that are accessed with an index number. You’ll see this in action a little later which will make it easier to understand. But for now you can think of it as a map of our pixels along the strip from beginning to end that we can manipulate to set and clear LED data. Using an array allows us to select specific pixels on the LED strip, a particular group of pixels on the strip or the entire strip. You’ll notice that I put NUM_LEDS inside the brackets [] which we already defined above as 20 pixels which means we want to include all the pixels in the array. You can name the array whatever you want but you’ll commonly see it just called leds. For instance, if you wanted to name your array bob it would look like this:\n\nThe last step is to initialize the LEDs using the variables we defined above to tell the FastLED library what chipset we’re using. You can also set overall brightness for your entire LED strip along with a pause before the animation gets started. Adding the delay() is optional but good practice to protect the LED strip from any errors or power spikes on startup.\n\nIn this line of code we’re giving the FastLED library a lot of information about our LED strip. The first bit of information is what chipset we’re working with. FastLED supports a variety of SPI and 3-wire chipsets and in this example, we have an addressable LED strip with the WS2812B driver chip. Next we specify the Arduino pin the LED strip is connected to. You can either put a pin number in here or use a variable like I did called LED_PIN which we already defined as pin 2. Finally, we have to tell the FastLED library what color order our LEDs are in within the pixel. It won’t always be RGB. With the WS2812B type, it’s usually GRB, or green, red, blue. Don’t know what color order your LED strip is? No problem – I’ll show you how to find out a little later in this FastLED tutorial. If you’re also using a WS2812B LED strip, leave it as GRB because this is the most likely scenario.\n\nFinally, we add information about our array in parenthesis – the array name and number of pixels that make up the array. In our case our array is called leds and has NUM_LEDS pixels in it which we defined as 20.\n\nYou can set an overall brightness for your entire LED strip with this line of code. In the parenthesis, insert a number from 0 to 255, 0 being off and 255 being full brightness. You can override this later on in the code if you want but this gives the LED strip a starting point. If you plan to make a video of your animation, I recommend turning down the brightness because the colors show up more accurately without getting blown out on camera.\n\nHow to Determine an LED Strip’s Color Order\n\nBefore starting with our first animation, it’s a good idea to double check that we have the correct color order. Some manufacturers change up the wiring and RGB ordering so colors may not display correctly. This is usually the case with the WS2812B LED strips. In order to check your color order, use this code in your loop () function:\n\nYou’ll notice that the first three lines of code in the loop () function all have the same basic structure. First you specify the array you want to manipulate – in our case our array is called leds. In the brackets [] you identify what pixel you want to affect. When using arrays, the very first pixel is actually number 0 so in the code above I’m telling the Arduino to turn the first pixel (number 0) to the color red, the second pixel (number 1) to green and the third pixel (number 2) to blue. The colors must be written with the correct capitalization in order to be recognized.\n\nThe CRGB portion of the code is an object representing a color in the RGB color space. One of the beginner-friendly features of the FastLED library is that it comes with a list of over 100 pre-defined colors to choose from that use common color names rather than having to code out a mix of red, green and blue to create custom colors. We’ll cover more advance color manipulation in the next tutorial. But for now, using pre-defined colors is an easy way to get started because whatever color name you choose, the CRGB object will put out the correct mix of red, green and blue to achieve it. We’ll explore more colors from the pre-defined color list in the examples section of this FastLED tutorial.\n\nGetting colors to show up on an LED strip is a 2-step process. We’ve already completed the first step in identifying what colors we want and what pixels are going to show them. But for now, this information only exists in the Arduino. In order to push out these instructions to the LED strip, we use the FastLED.show() command.\n\nThe complete sketch including all the parts we’ve talked about so far to determine your LED strip’s color should look like this:\n\nUpload your sketch to the Arduino and look at what colors you see on the first three pixels of your LED strip. The colors should show up in the same order as you specified in the code.\n\nIf it does not, then update the color order in the setup () function to match what you see on your strip. For instance, if your LED strip shows green for pixel number 0, blue for pixel number 1, and red for pixel number 2 then your code in the setup () function would look like this:\n\nNow that we have our LED strip set up properly, it’s time to begin coding our first animations! There are many ways to specify and control colors with FastLED, but in these examples we’ll be using colors from the FastLED library’s pre-defined color list. It’s a beginner-friendly way to get started and makes it easier in the future to jump into more complex ways of manipulating color. I’ll also go over some handy functions that are specific to the FastLED library that makes performing certain operations easier with one line of code.\n\nYou can substitute any color from the pre-defined color list you want for the FastLED examples below. There are over 100 colors to choose from. Be sure to use the correct capitalization in the code, just as it appears in the documentation. Check out all the pre-defined color choices in the Pixel Reference.\n\nBlinking individual pixels on an LED strip works a lot like blinking a regular LED with the Arduino. Let’s blink the first pixel in our strip the color red at a rate of half a second. Keeping the setup () function the same, the loop () function would look like this:\n\nAnytime you want to turn a pixel off, use the color Black. You’ll notice that we have to use FastLED.show() every time you change colors. It’s kind of like the digitalWrite function we use for regular LEDs.\n\nLet’s get our lonely pixel to travel up and down the LED strip. You can accomplish this with for loops and by tweaking the delays you can control how fast the color dot moves down the strip. Try faster values for a more realistic scanner effect. Here’s what the loop () function would look like:\n\nIn the first for loop, the red dot moves from position 0 to position 19. Keep in mind that NUM_LEDS is 20 so you’ll see that I set so it would only light up until position 19. In the second for loop we start at which is 20-1. This gives us our position 19 starting position and the red dot works itself back down to the beginning, ending at position 0. The loop then repeats to give you a back and forth scanner effect.\n\nThe scanner effect looks great on shorter LED strips but for longer runs, much of the strip will be off most of the time. The color chase effect is a more dynamic way to move color through the strip using all the pixels. Here’s what the loop () function would look like:\n\nIn the first for loop, the red dot moves down the strip but the previous pixels stay lit. When it reaches the end of the strip, a green dot begins moving in the opposite direction, changing the previously lit red pixels to green. This process repeats with blue and cyan before looping back to the beginning of the animation.\n\nThe FastLED library has a variety of color-control functions to help you animate faster. If you simply want to fill all the pixels in your strip with the same color or animate between solid colors, you can always use for loops but the FastLED library has a special function just for this purpose.\n\nThis function takes a few arguments within the parenthesis. The first one you have to specify is what array you want to affect. In our case, our array is called leds. The second parameter wants to know how many LEDs in that array you want to include. I want to include all 20 of my pixels so I’ll use NUM_LEDS since we already specified it as a variable. Finally, choose the color we want to fill our pixels with. Here’s an animation that cycles through a few solid colors:\n\nThis animation cycles through red, green and blue and shows each color for 500ms using the delay() function. Although solid colors can seem pretty basic, they can make a huge impact when creating an overall theme or mood for an attraction or visual interest for props and costumes.\n\n5. Fill an LED Strip with a Gradient of Colors\n\nLet’s add a bit more interest to our solid color animation by adding a gradient effect between different color blocks along the LED strip. The FastLED library has another handy function to make this lighting animation simple.\n\nThe arguments in the parenthesis should now look familiar to you. We start by specifying the array, leds in our case. Then the number of LEDs we want to include which is NUM_LEDS for us. Then you can choose either 2 or 4 colors to fill your LED strip with and it will create a nice gradient transition between them. When working with the pre-defined colors, trying to include just three colors causes some erratic behavior like constant rebooting of the microcontroller or an unresponsive LED strip. Hopefully it’s a bug that will be resolved soon. The workaround is to specify the colors using other methods which we’ll cover in a later tutorial. Here’s an animation showing four color blocks move down the strip:\n\nYou can pick vibrantly different colors to draw attention to certain areas of your attraction or prop, or use colors with subtle differences to enhance a specific color palette.\n\n6. Fill an LED Strip with a Rainbow of Colors\n\nSo far, we’ve created some impressive lighting animations with just single colors using for loops and FastLED library functions. But what about displaying all the colors along an LED strip? As you may have already guessed, the FastLED library has a simple function for showing a rainbow of colors in one line of code.\n\nThis FastLED function takes some different parameters than the others. First we specify the name of the array we’re working with, which is leds. Then, the number of LEDs in the array, which in our case we’ll use the NUM_LEDS variable name to include all 20 in our sample LED strip. Next, select the color you want your rainbow to start with as a hue value.\n\nSo far we’ve been specifying colors from the pre-defined FastLED library color list like Red, Magenta, Yellow, etc. Colors can also be specified using hue values from 0 to 255. From the chart below you can see that 0 corresponds to red and 255 is purple before looping back to 0.\n\nWe’re going to get into more detail about using hues in the next FastLED tutorial because it gives us far more control over animating colors than the pre-defined colors method we’ve been using so far.\n\nBut getting back to our example, I want to fill my 20-pixel strip with all the colors of the rainbow so it would make sense to give my starting hue a value of 0 for red. The last parameter is the delta, or the amount of color change you want between LEDs. For instance, if you want each pixel to increment by a hue value of 5 then the first pixel would display a hue value of 0, the next would be 5, then 10, etc. all the way down your strip.\n\nI want the rainbow to display evenly throughout the length of my LED strip so a clever mathematical formula to use is: 255 / NUM_LEDS. In other words, I want to divide the 255 hue values by the number of pixels I have, which is 20. This means that each pixel down the strip will have a hue value of roughly 13 more than the previous pixel. This should evenly distribute the rainbow colors over my strip. Keep in mind that the length of your strip will affect how the rainbow looks. Shorter strips won’t have enough pixels to show as nice a gradient between colors as longer LED strips. Here is a few different ways to play around with the delta parameter for different effects:\n\nIn the first fill_rainbow code block, I use 255 / NUM_LEDS for the delta parameter in order to display one rainbow evenly down my 20-pixel LED strip. In the next fill_rainbow code block, I use 255 / NUM_LEDS / 2 to display only half the rainbow on my LED strip. Then in the final fill_rainbow code block I use 255 / NUM_LEDS * 2 to show two rainbows on the LED strip. These three rainbow effects alternate at one-second intervals using the delay(1000); function.\n\nBy changing the starting and delta hue values, you can create different rainbow lighting animations across your whole LED strip. Try changing each value and try numbers from 0 to 255 for both rather than the equations and see what happens.\n\nHere’s a sketch where we start with a rainbow evenly spread across the LED strip and then the starting hue of each pixel increases by 1 every 50ms. This gives the appearance that the rainbow is traveling slowly down the strip. The code in its entirety looks like this:\n\nRight above the setup () function you’ll see that I declared a variable using a uint8_t type for our starting hue, called it startHue and set it equal to 0. This means that the starting hue of my rainbow is red at the beginning of the animation. You’ll see variables used a lot in lighting animations like byte, uint8_t, uint16_t and others. A uint8_t stores an 8-bit unsigned integer from 0 to 255 which is perfect for cycling through hues since they also use those values.\n\nIn the fill_rainbow code block, I put the variable startHue instead of specifying 0 like we’ve done before so its value can be manipulated in the code. The delta stays at 255 / NUM_LEDS so that the rainbow displays evenly along my LED strip. At the end of the sketch, I increase the startHue by 1 before it loops back to the beginning of the program with the new startHue which would now be 1. Changing the starting hue in the fill_rainbow function shifts how the other colors get displayed down the strip. The startHue will continue increasing by 1 every 50ms until the startHue reaches 255 and then loops back to 0. If you want the rainbow to move down the LED strip at a faster or slower pace, simply adjust the time in the delay() function in milliseconds.\n\nIn this next example, the sketch is basically the same but we build on what we did with the starting hue. In addition to increasing the startHue, we’re also going to increase the delta of the hue.\n\nJust like the startHue, I also declared a variable for the delta of the hue and called it deltaHue. In the fill_rainbow line of code, I replaced 255 / NUM_LEDS with deltaHue so its value can also be manipulated. At the bottom of the sketch, I not only increase the value of the starting hue by 1 but I also do it for the deltaHue variable. Every time the startHue value increases, it shifts how the colors of the rainbow are displayed along the strip. On top of that, increasing the deltaHue value causes the colors of pixels that are right next to each other to be more and more further apart on the hue color chart shown above. There comes a point where both variables, the startHue and deltaHue, cycle back to 0 and if you watch the animation below very closely you’ll see a quick red flash. Then while the values are still low, the rainbow is a bit more seamless before breaking up as the numbers get larger and larger.\n\nUsing variables for some of the parameters in the FastLED functions we’ve used allows you to create some interesting lighting effects.\n\nI hope that by now, the FastLED library doesn’t seem as intimidating to learn as before. With just a few functions and over 100 pre-defined colors to choose from, you can now make amazing lighting animations to enhance your project. We also got an initial look at specifying colors using hue values which will be crucial as you advance. But we’re just getting started! In the next FastLED tutorial, we’re going to explore more ways to further control color that will unlock your ability to produce even more complex and jaw-dropping lighting effects."
    },
    {
        "link": "https://forum.makerforums.info/t/hey-guys-quick-questions-on-color-palettes/60035",
        "document": "The FastLED library for colored LED animation on Arduino. Please direct questions/requests for help to the FastLED Reddit community: http://fastled.io/r We'd like to use github \"issues&..."
    }
]