[
    {
        "link": "https://programiz.com/cpp-programming/if-else",
        "document": "In computer programming, we use the statement to run one block of code under certain conditions and another block of code under different conditions.\n\nFor example, assigning grades (A, B, C) based on marks obtained by a student.\n• if the percentage is above 90, assign grade A\n• if the percentage is above 75, assign grade B\n• if the percentage is above 65, assign grade C\n\nThe statement evaluates the inside the parentheses .\n• If the evaluates to , the code inside the body of is executed.\n• If the evaluates to , the code inside the body of is skipped.\n\nNote: The code inside is the body of the statement.\n\nExample 1: C++ if Statement\n\nWhen the user enters , the condition is evaluated to and the statement inside the body of is executed.\n\nWhen the user enters , the condition is evaluated to and the statement inside the body of is not executed.\n\nThe statement can have an optional clause.\n\nThe statement evaluates the inside the parenthesis.\n• the code inside the body of is executed\n• the code inside the body of is skipped from execution\n• the code inside the body of is executed\n• the code inside the body of is skipped from execution\n\nIn the above program, we have the condition . If we enter the number greater or equal to , then the condition evaluates .\n\nHere, we enter . So, the condition is . Hence, the statement inside the body of is executed.\n\nHere, we enter . So, the condition is . Hence, the statement inside the body of is executed.\n\nThe statement is used to execute a block of code among two alternatives. However, if we need to make a choice between more than two alternatives, we use the statement.\n• If evaluates to , the is executed.\n• If evaluates to , then is evaluated.\n• If is , the is executed.\n• If is , the is executed.\n\nNote: There can be more than one statement but only one and statements.\n\nExample 3: C++ if...else...else if\n\nIn this program, we take a number from the user. We then use the ladder to check whether the number is positive, negative, or zero.\n\nIf the number is greater than , the code inside the block is executed. If the number is less than , the code inside the block is executed. Otherwise, the code inside the block is executed.\n\nSometimes, we need to use an statement inside another statement. This is known as nested statement.\n\nThink of it as multiple layers of statements. There is a first, outer statement, and inside it is another, inner statement.\n• We can add and statements to the inner statement as required.\n• The inner statement can also be inserted inside the outer or statements (if they exist).\n• We can nest multiple layers of statements.\n\nExample 4: C++ Nested if\n\nIn the above example,\n• We take an integer as an input from the user and store it in the variable .\n• We then use an statement to check whether num is not equal to .\n• If , then the inner statement is executed.\n• If , the code inside the outer condition is executed, which prints \"The number is 0 and it is neither positive nor negative.\"\n• The inner statement checks whether the input number is positive i.e. if is greater than .\n• If , then we print a statement saying that the number is positive.\n• If , we print that the number is negative.\n\nNote: As you can see, nested makes your logic complicated. If possible, you should always try to avoid nested .\n\nBody of if...else With Only One Statement\n\nIf the body of has only one statement, you can omit in the program. For example, you can replace\n\nThe output of both programs will be the same.\n\nNote: Although it's not necessary to use if the body of has only one statement, using makes your code more readable.\n\nThe ternary operator is a concise, inline method used to execute one of two expressions based on a condition. To learn more, visit C++ Ternary Operator.\n\nIf we need to make a choice between more than one alternatives based on a given test condition, the statement can be used. To learn more, visit C++ switch.\n• C++ Program to Check Whether Number is Even or Odd\n• C++ Program to Check Whether a Character is Vowel or Consonant.\n• C++ Program to Find Largest Number Among Three Numbers"
    },
    {
        "link": "https://w3schools.com/cpp/cpp_conditions.asp",
        "document": "C++ Conditions and If Statements\n\nYou already know that C++ supports the usual logical conditions from mathematics:\n• Less than or equal to:\n• Greater than or equal to:\n\nYou can use these conditions to perform different actions for different decisions.\n\nC++ has the following conditional statements:\n• Use to specify a block of code to be executed, if a specified condition is true\n• Use to specify a block of code to be executed, if the same condition is false\n• Use to specify a new condition to test, if the first condition is false\n• Use to specify many alternative blocks of code to be executed\n\nUse the statement to specify a block of C++ code to be executed if a condition is .\n\nIn the example below, we test two values to find out if 20 is greater than 18. If the condition is , print some text:\n\nWe can also test variables:\n\nIn the example above we use two variables, x and y, to test whether x is greater than y (using the operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\"."
    },
    {
        "link": "https://udacity.com/blog/2021/03/our-guide-to-the-cpp-if-else-statement.html",
        "document": "The if-else statement in C++ is one of the basic ways to control your program flow. From tasks as simple as exiting your program early if there’s no input, to deciding what business logic to run on a massive amount of data, the if-else statement can be the right tool for the job.\n\nIn this article, we cover the basics of using the if-else statement as a C++ developer, share a few practical examples to get you started and talk about the various other options for controlling your program flow.\n\nWhat Is the If-Else Statement?\n\nSimilarly to how it’s used in the English language, the if-else statement in C++ is a way to indicate direction, in the context of a C++ program. If-else is one of the flow control methods in C++, as are statements like while, for and do-while. In its simplest form, the if-else statement looks as follows:\n\nThe if-else statement runs through all its conditions from top to bottom until it reaches one that is true. Once a true condition is found, the code within the corresponding block runs and the program jumps to the code that follows the if-else statement. If no condition is true, the code in the else section is run.\n\nYou can easily nest if-else statements within other if-else statements. There’s no limit to how many conditions you can have in a single statement, but it’s considered good style to keep them to a few.\n\nConditions are a key part of any if-else statement, so let’s look at how they work.\n\nThe conditions you can use in an if-else statement range from simple logical expressions to more complex evaluations and even function calls. Every condition is evaluated as a boolean value — true or false.\n\nComparisons make up a common class of boolean functions in conditions. These include greater than (e > f) or lesser than (c < d), and equal (a == b) or not equal (c != d). In C++, any numerical value can be cast to a boolean, and according to the C++ standard, all values equal to zero (independent of type — be it short, int, float, double, etc) as well as null pointer values, are converted to false. All other values are converted to true. Accordingly, the number “6” would be considered true:\n\nHowever, a zero is false. A string “abc” is true. An empty string is… also true! In C++, all strings evaluate to true. You can use any function call as a condition, and the result of the call will be used in the evaluation.\n\nOnce the first true condition is found, the code inside the corresponding block runs, and the program continues after the statement.\n\nNow that we know the basics, let’s jump into some practical examples of the if-else statement. Let’s say that we’re writing a program that will ask the user how many tickets they have earned at an arcade, to let them know the highest-value prize they can buy with their winnings.\n\nBefore we can get to the branching section of the code, we must first define the variable we’ll be comparing and get the user’s input:\n\nNow that the program has the corresponding number of tickets, we can find out which condition is true to let the customer know what they can spend their tickets on:\n\nThe cin primitive ensures safe input handling, so we don’t need to be concerned about customers inputting an invalid number. It’s a good idea, however, to let the customer know if something went wrong:\n\nWhen To Use the If-Else Statement\n\nIs if-else the best method for flow control?\n\nIt depends! In some cases, if-else is indeed best fit. For example, if you only have a few possible branches, using if-else will work just fine. The statement will generally be readable when there are a few cases, but an excessive number of cases in an if-else statement in C++ can make the program hard to read and, in some cases, slow to execute.\n\nAnother case where using if-else is a good idea is when you’re trying to structure the program in a flow that’s readily understandable. If-else conditions are explicitly called out in the code, so it’s hard for developers to miss these conditions and their possible corresponding branches. However, for if-else to work well in such cases, we recommend keeping the conditions within the statement short and clear. Including nested if-else statements or using convoluted conditions can complicate the job of the developer tasked with making changes to the logic.\n\nIf you feel that if-else is not the right option for your particular use case, you have a few alternatives at your disposal.\n\nAlternatives to If-Else in C++\n\nSome alternatives to the if-else statement in C++ include loops, the switch statement, and structuring your program to not require branching.\n\nIf you’re matching against a larger set of values, the switch statement might be a fit:\n\nIf you’re looking to write an operation that needs to be repeated a few times, definitely use a loop instead of a series of nested conditions. For example, a short loop as follows is much easier to understand than say, 30 (or 50 or 90!) if-else conditions:\n\nIf you need to assign one of the two possible values to a variable, using a ternary operator (the ? operator) can result in clearer code than using an if-else statement:\n\nC++ If-Else Statement and C++ Classes\n\nWhile polymorphism is an advanced object-oriented-programming (OOP) topic in C++, it can also be a helpful alternative to if-else statements. In C++, developers can implement structures where different functions get called on an object, depending on that object’s class. For example, here’s some OOP code that uses if-else:\n\nBy using polymorphism we can simplify the code quite a bit. This code assumes that each class of dish implements its own cutlery set function:\n\nHowever, polymorphic code only makes sense in more complex cases like OOP. We recommend avoiding it in simpler programs.\n\nThe if-else statement is just one aspect of C++ you’ll need to master as you become a C++ developer. Over time, you’ll learn when to use the if-else statement and when to consider using a different form of flow control in your program.\n\nTo kickstart your C++ journey, enroll in our expert-taught C++ Developer Nanodegree today!"
    },
    {
        "link": "https://geeksforgeeks.org/c-c-if-else-statement-with-examples",
        "document": "The if statement alone tells us that if a condition is true it will execute a block of statements and if the condition is false, it won’t. But what if we want to do something else if the condition is false. Here comes the C++ if else statement. We can use the else statement with if statement to execute a block of code when the condition is false.\n\nLet’s take a look at an example:\n\nExplanation: The condition in the if block checks if 10 is less than 15. Its true so the statement inside if block, “10 is less than 15” gets printed and else block is skipped. If the condition was false, all the statements inside the if block will be skipped and else block will be executed.\n\nThe if statement condition can be anything that evaluates to a boolean value or a boolean converted value. We generally use relational and equality operator to specify the condition.\n• None Control falls into the if block.\n• None The if-block or the body inside the if is executed.\n• None The else block or the body inside the else is executed.\n\nFlowchart of if-else in C++\n\nExamples of if else Statement in C++\n\nThe following are a few basic examples of the if-else statement that shows the use of the if-else statement in a C program.\n\nC heck for Odd and Even Number\n\nYou may have noticed that we skipped using the braces for the body of the if statement. If we do not provide the curly braces ‘{‘ and ‘}’ after if( condition ) then by default if statement will consider the immediate one statement to be inside its block.\n\nExplanation: Finding largest element requires users to compare multiple condition. We can compare multiple conditions by nesting one condition inside other. There is also another way of combining multiple conditions.\n\nThe above program can also be written by using compound expressions as:\n\nIn this code, we are grouping multiple conditions in a single if statement using logical AND operator. (&&)"
    },
    {
        "link": "https://stackoverflow.com/questions/55814405/what-are-the-good-practise-about-if-elseif-else-statement",
        "document": "my coworker was saying that if you have a \"if - else if\" statement then you must put a \"else\", even if it is empty.\n\nNo style guide I have ever come across says that. And, if there is one, it's just a matter of opinion.\n\nI do sometimes write \"empty\" blocks, but only when they contain some interesting, useful, explanatory documenting comment about why nothing's happening in the case when it might at first glance appear like a natural thing to do.\n\nIt's a pretty contrived example, which could otherwise be written like this:\n\nBut sometimes the former is nicer.\n\nMandating that you always include some empty block with nothing in it, though, is something I have not heard of and would not support.\n\nAlso false, except in the sense of some subjective style guide.\n\nIn fact, when switching on enums, I discourage cases unless you functionally require one, because you prevent the compiler from warning you when you add an enumeration and forget to update all your es."
    },
    {
        "link": "https://stackoverflow.com/questions/39442554/how-to-compare-user-input-from-stdcin-to-a-string",
        "document": "So this one sounds very easy but I am getting some strange behavior.\n\nIn my program there is the following code:\n\nWhen I run my program and type in \"global\" when I'm prompted for input, the program returns:\n\nWhy does the if statement evaluate as ?"
    },
    {
        "link": "https://stackoverflow.com/questions/68268485/how-to-get-string-input-in-a-windows-console-application-c",
        "document": "I am trying to make an ASCII art type console application in C++ using Windows.h. I am referring to tutorials by OneLoneCoder. I have figured out how to print out characters/strings on the console while using windows.h library.\n\nI want to read string input by the user like we can read with How do I do so?\n\nI have read ReadConsoleInput, ReadConsole and some more documentation and I think it is not directly possible like we do with or and I would have to read individual keystrokes. Is there any other method to get string input while drawing graphics on the console?\n\nI want to do stuff in console only. Like they have done in vim editor. Like we can navigate through text and after pressing semicolon we can type at commands and it executed."
    },
    {
        "link": "https://w3schools.com/cpp/cpp_strings_input.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://cplusplus.com/doc/tutorial/basic_io",
        "document": "std; main () { i; cout << \"Please enter an integer value: \" ; cin >> i; cout << \"The value you entered is \" << i; cout << \" and its double is \" << i*2 << ; 0; }\n\nPlease enter an integer value: 702 The value you entered is 702 and its double is 1404."
    },
    {
        "link": "https://w3schools.com/cpp/cpp_user_input.asp",
        "document": "You have already learned that is used to output (print) values. Now we will use to get user input.\n\nis a predefined variable that reads data from the keyboard with the extraction operator ( ).\n\nIn the following example, the user can input a number, which is stored in the variable . Then we print the value of :\n\nint x; \n\ncout << \"Type a number: \"; // Type a number and press enter\n\ncin >> x; // Get user input from the keyboard\n\ncout << \"Your number is: \" << x; // Display the input value Run example »\n\nIn this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:\n\nThere you go! You just built a basic calculator!\n\nTip: Both and belongs to the library, which is short for standard input / output streams. For a complete reference of <iostream> objects along with detailed information, go to our C++ iostream Reference."
    }
]