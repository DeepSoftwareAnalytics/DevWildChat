[
    {
        "link": "https://learn.microsoft.com/en-us/dax/countrows-function-dax",
        "document": "The COUNTROWS function counts the number of rows in the specified table, or in a table defined by an expression.\n• None This function can be used to count the number of rows in a base table, but more often is used to count the number of rows that result from filtering a table, or applying context to a table.\n• None When the table argument contains no rows, the function returns BLANK.\n• None To learn more about best practices when using COUNT and COUNTROWS, see Use COUNTROWS instead of COUNT in DAX.\n• None This function is not supported for use in DirectQuery mode when used in calculated columns or row-level security (RLS) rules.\n\nThe following example shows how to count the number of rows in the table Orders. The expected result is 52761.\n\nThe following example demonstrates how to use COUNTROWS with a row context. In this scenario, there are two sets of data that are related by order number. The table Reseller contains one row for each reseller; the table ResellerSales contains multiple rows for each order, each row containing one order for a particular reseller. The tables are connected by a relationship on the column, ResellerKey.\n\nThe formula gets the value of ResellerKey and then counts the number of rows in the related table that have the same reseller ID. The result is output in the column, CalculatedColumn1.\n\nThe following table shows a portion of the expected results:"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dax/filter-function-dax",
        "document": "Returns a table that represents a subset of another table or expression.\n\nA table containing only the filtered rows.\n• None You can use FILTER to reduce the number of rows in the table that you are working with, and use only specific data in calculations. FILTER is not used independently, but as a function that is embedded in other functions that require a table as an argument.\n• None For best practices when using FILTER, see Avoid using FILTER as a filter argument.\n\nUse COUNTROWS instead of COUNT in DAX\n• This function is not supported for use in DirectQuery mode when used in calculated columns or row-level security (RLS) rules.\n\nThe following example creates a report of Internet sales outside the United States by using a measure that filters out sales in the United States, and then slicing by calendar year and product categories. To create this measure, you filter the table, Internet Sales USD, by using Sales Territory, and then use the filtered table in a SUMX function.\n\nIn this example, the expression:\n\nReturns a table that is a subset of Internet Sales minus all rows that belong to the United States sales territory. The RELATED function is what links the Territory key in the Internet Sales table to SalesTerritoryCountry in the SalesTerritory table.\n\nThe following table demonstrates the proof of concept for the measure, NON USA Internet Sales, the formula for which is provided in the code section below. The table compares all Internet sales with non- USA Internet sales, to show that the filter expression works, by excluding United States sales from the computation.\n\nTo re-create this table, add the field, SalesTerritoryCountry, to the Row Labels area of a report or PivotTable.\n\nTable 1. Comparing total sales for U.S. vs. all other regions\n\nThe final report table shows the results when you create a PivotTable by using the measure, NON USA Internet Sales. Add the field, CalendarYear, to the Row Labels area of the PivotTable and add the field, ProductCategoryName, to the Column Labels area.\n\nTable 2. Comparing non- U.S. sales by product categories"
    },
    {
        "link": "https://community.powerbi.com/t5/Desktop/Countrows-as-a-filter-within-a-CALCULATE-function/td-p/2500305",
        "document": "Thanks to the great efforts by MS engineers to simplify syntax of DAX! Most beginners are SUCCESSFULLY MISLED to think that they could easily master DAX; but it turns out that the intricacy of the most frequently used RANKX() is still way beyond their comprehension!"
    },
    {
        "link": "https://dax.guide/countrows",
        "document": "Number of rows obtained by the evaluation of the table expression. If the table has no rows, it returns blank.\n\nThis function can be used to count the rows of a table expression. Even though the table argument is optional, it is a best practice to always specify the first argument to improve readability and simplify code refactoring when needed.\n\nThe following are valid syntaxes. The COUNTROWS function can be used to count the unique values available in a column for the current filter context. However, DISTINCTCOUNT is better in that case. The following expressions are equivalent. The COUNTROWS function can be used to check whether a column has only one item filtered/selected in the current filter context. However, HASONEVALUE is better in that case. The following expressions are equivalent. -- COUNTROWS counts the number of rows in a table DEFINE MEASURE Customer[# Customers] = COUNTROWS ( Customer ) MEASURE Customer[# Countries 1] = COUNTROWS ( DISTINCT ( Customer[CountryRegion] ) ) MEASURE Customer[# Countries 2] = DISTINCTCOUNT ( Customer[CountryRegion] ) EVALUATE SUMMARIZECOLUMNS ( Customer[Continent], \"# Customers\", [# Customers], \"# Countries 1\", [# Countries 1], \"# Countries 2\", [# Countries 2] ) -- COUNTROWS is often used inside CALCULATE to count -- the number of rows in a filtered table DEFINE MEASURE Customer[# Individuals] = CALCULATE ( COUNTROWS ( Customer ), Customer[Customer Type] = \"Person\" ) MEASURE Customer[# Companies] = CALCULATE ( COUNTROWS ( Customer ), Customer[Customer Type] = \"Company\" ) EVALUATE SUMMARIZECOLUMNS ( Customer[Continent], \"# Individuals\", [# Individuals], \"# Companies\", [# Companies] )"
    },
    {
        "link": "https://sqlbi.com/articles/row-context-and-filter-context-in-dax",
        "document": "DAX expressions operate on columns. You would usually write expressions like:\n\nIn the previous expression, Sales[Amount] and Sales[TotalCost] are column references. A column reference intuitively means that you want to retrieve the value of a column. In the example above you would obtain the value of Sales[Amount] for the row currently iterated by SUMX.\n\nIn addition you can use a column reference to instruct certain functions to perform an action on a column, like in the following measure that counts the number of product names:\n\nIn this case, Product[ProductName] does not retrieve the value of ProductName for a specific row. Instead, you use the column reference to tell VALUES which column to use. In other words, you reference the column, not its value.\n\nA column reference is a somewhat ambiguous definition because you reference the value of a column in a specific row and the full column itself, both with the same syntax. Nevertheless, DAX expressions are typically easy to read because, although ambiguous, the syntax leads to very intuitive expressions.\n\nWhen you use a column reference to retrieve the value of a column in a given row, you need a way to tell DAX which row to use, out of the table, to compute the value. In other words, you need a way to define the current row of a table. This concept of “current row” defines the Row Context.\n\nYou have a row context whenever you iterate a table, either explicitly (using an iterator) or implicitly (in a calculated column):\n• When you write an expression in a calculated column, the expression is evaluated for each row of the table, creating a row context for each row.\n• When you use an iterator like FILTER, SUMX, AVERAGEX, ADDCOLUMNS, or any one of the DAX functions that iterate over a table expression.\n\nIf a row context is not available, evaluating a column reference produces an error. If you only write a column reference in a DAX measure, you get an error because no row context exists. For example, this measure is not valid:\n\nIn order to make it work, you need to aggregate the column, not to refer to its value. In fact, the correct definition of SalesAmount is:\n\nEvery iterator introduces a new row context, and iterators can be nested. For example, you can write:\n\nIn the innermost expression, you reference both Sales[SalesAmount] and Customer[DiscountPct], i.e. two columns coming from different tables. You can safely do this because there are two row contexts: the first one introduced by AVERAGEX over Customer and the second one introduced by SUMX over Sales. Moreover, it is worth noting that the row context is also used by RELATEDTABLE to determine the set of rows to return. In fact, RELATEDTABLE ( Sales ) returns the sales of the current customer — by “current” we mean the customer currently iterated by AVERAGEX or, for a more clear definition, the current customer in the row context introduced by AVERAGEX over Customer.\n\nThe filter context is the set of filters applied to the data model before the evaluation of a DAX expression starts. When you use a measure in a pivot table, for example, it produces different results for each cell because the same expression is evaluated over a different subset of the data. The Microsoft documentation describes as “query context” the filters applied by the user interface of a pivot table and as “filter context” the filters applied by DAX expressions that you can write in a measure. In reality, these filters are almost identical in their effects and the real differences are not important for this introductory article. We simply define as “filter context” the set of filters applied to the evaluation of a DAX expression — usually a measure — regardless of how they have been generated.\n\nFor example, the cell highlighted in the following picture has a filter context for year 2007, color equal to Black, and product brand equal to Contoso. This is the reason why its value is different, for example, from the one showing the same year for Fabrikam.\n\nYou can obtain the same effect by applying a filter with CALCULATE or CALCULATETABLE. For example, the following DAX query returns the same value as that of the highlighted cell in the previous picture.\n\nUsually, every cell of a report has a different filter context, which can be defined implicitly by the user interface (such as the pivot table in Excel), or explicitly by a DAX expression using CALCULATE or CALCULATETABLE.\n\nAny filter applied to pivot tables in Excel or to any user interface element of Power BI Desktop or Power View always affects the filter context — it never affects the row context directly.\n\nA filter context is a set of filters over the rows of the data model. There is always a filter context for DAX expressions. If the filter context is empty, a DAX expression can iterate all the rows of the tables in a data model. When a filter context is not empty, it limits the rows that a DAX expression can iterate in a data model.\n\nA row context does not propagate through relationships. If you have a row context in a table, you can iterate the rows of a table on the many side of a relationship using RELATEDTABLE, and you can access the row of a parent table using RELATED.\n\nA filter applied on a table column affects all the rows of that table, filtering rows that satisfy that filter. If two or more filters are applied to columns in the same table, they are considered under a logical AND condition and only the rows satisfying all the filters are processed by a DAX expression in that filter context.\n\nA filter context does automatically propagate through relationships, according to the cross filter direction of the relationship.\n\nIn Power Pivot for Excel, the only direction is one-to-many. A filter applied on the “one” side of a relationship affects the rows of the table on the “many” side of that relationship, but the filter does not propagate in the opposite direction. For example, consider a model where you have two tables, Product and Customer, each with a one-to-many relationship to the Sales table. With a single direction of cross filter, if you filter a product you also filter the sales of that product, but you do not filter the customer who bought those products.\n\nIn Power BI Desktop and in SQL Server Analysis Services Tabular 2016, you can enable bidirectional cross filtering. By enabling the bidirectional cross filter, once you filter one table, you also filter all the tables on the “one” side of a relationship. For example, when you filter rows on Product, you implicitly filter Sales and Customer, thus filtering customers who bought the selected products.\n\nWhen writing DAX expressions, you can control both the row context and the filter context. Remember that the row context does not propagate automatically through relationships, whereas the filter context does traverse relationships independently from the DAX code. However, you can control the filter context and its propagation using DAX functions such as CALCULATE, CALCULATETABLE, ALL, VALUES, FILTER, USERELATIONSHIP, and CROSSFILTER.\n\nThis article is a small example of the complete DAX description you can read in our new book, The Definitive Guide to DAX."
    },
    {
        "link": "https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-add-custom-column",
        "document": "In Power BI Desktop, you can add a new custom column of data to your model by using Power Query Editor. With Power Query Editor, you can create and rename your custom column to create PowerQuery M formula queries to define your custom column. PowerQuery M formula queries have a comprehensive function reference content set. When you create a custom column in Power Query Editor, Power BI Desktop adds it as an Applied Step in the Query Settings of the query. You can change, move, or modify the column at any time.\n• None From the Home tab on the ribbon, select Transform data, and then select Transform data from the menu.\n• None From the Add Column tab on the ribbon, select Custom Column.\n\nThe Custom Column window has the following features:\n• None An Available columns list on the right.\n• None The initial name of your custom column, in the New column name box. You can rename this column.\n• None PowerQuery M formula queries, in the Custom column formula box. You create these queries by building the formula on which your new custom column is defined.\n\nYou can create formulas for custom columns, as described in the following steps. For more information on M functions available for formulas, see Power Query M function reference.\n• None Select columns from the Available columns list on the right, and then select Insert below the list to add them to the custom column formula. You can also add a column by double-clicking it in the list.\n• None As you enter the formula and build your column, note the indicator in the bottom of the Custom Column window. If there are no errors, there are a green check mark and the message No syntax errors have been detected. If there's a syntax error, there is a warning, along with a link to where the error occurred in your formula.\n• Power BI Desktop adds your custom column to the model and adds the Added Custom step to your query's Applied Steps list in Query Settings.\n• None To modify your custom column, double-click the Added Custom step in the Applied Steps list. The Custom Column window appears with the custom column formula you created.\n\nUse the Advanced Editor for custom columns\n\nAfter you've created your query, you can also use the Advanced Editor to modify any step of your query. To do so, follow these steps:\n• None In the Power Query Editor window, from the View tab on the ribbon, select Advanced Editor. The Advanced Editor window appears, which gives you full control over your query.\n• None Make any changes and then select Done.\n• None You can create a custom column in other ways, such as creating a column based on examples you provide to Power Query Editor. For more information, see Add a column from an example in Power BI Desktop."
    },
    {
        "link": "https://learn.microsoft.com/en-us/power-bi/transform-model/desktop-quickstart-learn-dax-basics",
        "document": "Users who are new to Power BI Desktop can use this article as a quick and easy introduction on how you can use Data Analysis Expressions (DAX) to solve many basic calculations and data analysis problems. We’ll go over some conceptual information, a series of tasks you can complete, and a knowledge check to test what you’ve learned. After completing this article, you should have a good understanding of the most important fundamental concepts in DAX.\n\nDAX is a collection of functions, operators, and constants that can be used in a formula, or expression, to calculate and return one or more values. DAX helps you create new information from data already in your model.\n\nWhy is DAX so important?\n\nIt’s easy to create a new Power BI Desktop file and import some data into it. You can even create reports that show valuable insights without using any DAX formulas at all. But, what if you need to analyze growth percentage across product categories and for different date ranges? Or, you need to calculate year-over-year growth compared to market trends? DAX formulas provide this capability and many other important capabilities as well. Learning how to create effective DAX formulas will help you get the most out of your data. When you get the information you need, you can begin to solve real business problems that affect your bottom line.\n\nYou might already be familiar with creating formulas in Microsoft Excel, and that knowledge will be helpful in understanding DAX. But even if you have no experience with Excel formulas, the concepts described here will help you get started creating DAX formulas and solving real-world BI problems right away.\n\nWe’ll focus on understanding DAX formulas used in calculations, more specifically, in measures and calculated columns. You should already be familiar with using Power BI Desktop to import data and add fields to a report, and you should also be familiar with fundamental concepts of Measures and Calculated columns.\n\nThe best way to learn DAX is to create some basic formulas, use them with actual data, and see the results for yourself. The examples and tasks here use the Contoso Sales Sample for Power BI Desktop file. This sample file is the same one used in the Tutorial: Create your own measures in Power BI Desktop article.\n\nWe'll frame our understanding of DAX around three fundamental concepts: Syntax, Functions, and Context. There are other important concepts in DAX, but understanding these three concepts will provide the best foundation on which to build your DAX skills.\n\nBefore you create your own formulas, let’s take a look at DAX formula syntax. Syntax includes the various elements that make up a formula, or more simply, how the formula is written. For example, here's a simple DAX formula for a measure:\n\nThis formula includes the following syntax elements:\n\nB. The equals sign operator (=), which indicates the beginning of the formula. When calculated, it will return a result.\n\nC. The DAX function SUM, which adds up all of the numbers in the Sales[SalesAmount] column. You’ll learn more about functions later.\n\nD. Parenthesis (), which surround an expression that contains one or more arguments. Most functions require at least one argument. An argument passes a value to a function.\n\nF. The referenced column, [SalesAmount], in the Sales table. With this argument, the SUM function knows on which column to aggregate a SUM.\n\nWhen trying to understand a DAX formula, it's often helpful to break down each of the elements into a language you think and speak every day. For example, you can read this formula as:\n\nWhen added to a report, this measure calculates and returns values by summing up sales amounts for each of the other fields we include, for example, Cell Phones in the USA.\n\nYou might be thinking, \"Isn’t this measure doing the same thing as if I were to just add the SalesAmount field to my report?\" Well, yes. But, there’s a good reason to create our own measure that sums up values from the SalesAmount field: We can use it as an argument in other formulas. This solution might seem a little confusing now, but as your DAX formula skills grow, knowing this measure will make your formulas and your model more efficient. In fact, you’ll see the Total Sales measure showing up as an argument in other formulas later on.\n\nLet’s go over a few more things about this formula. In particular, we introduced a function, SUM. Functions are pre-written formulas that make it easier to do complex calculations and manipulations with numbers, dates, time, text, and more. You'll learn more about functions later.\n\nYou also see that the column name [SalesAmount] was preceded by the Sales table in which the column belongs. This name is known as a fully qualified column name in that it includes the column name preceded by the table name. Columns referenced in the same table don't require the table name be included in the formula, which can make long formulas that reference many columns shorter and easier to read. However, it's a good practice to include the table name in your measure formulas, even when in the same table.\n\nIt’s important your formulas have the correct syntax. In most cases, if the syntax isn't correct, a syntax error is returned. In other cases, the syntax might be correct, but the values returned might not be what you're expecting. The DAX editor in Power BI Desktop includes a suggestions feature, used to create syntactically correct formulas by helping you select the correct elements.\n\nLet’s create an example formula. This task will help you further understand formula syntax and how the suggestions feature in the formula bar can help you.\n• None In Report view, in the field list, right-click the Sales table, and then select New Measure.\n• None In the formula bar, replace Measure by entering a new measure name, Previous Quarter Sales.\n• None After the equals sign, type the first few letters CAL, and then double-click the function you want to use. In this formula, you want to use the CALCULATE function. You’ll use the CALCULATE function to filter the amounts we want to sum by an argument we pass to the CALCULATE function. This type of function is referred to as nesting functions. The CALCULATE function has at least two arguments. The first is the expression to be evaluated, and the second is a filter.\n• None After the opening parenthesis ( for the CALCULATE function, type SUM followed by another opening parenthesis (. Next, we'll pass an argument to the SUM function.\n• None Begin typing Sal, and then select Sales[SalesAmount], followed by a closing parenthesis ). This step creates the first expression argument for our CALCULATE function.\n• None Type a comma (,) followed by a space to specify the first filter, and then type PREVIOUSQUARTER. You’ll use the PREVIOUSQUARTER time intelligence function to filter SUM results by the previous quarter.\n• None After the opening parenthesis ( for the PREVIOUSQUARTER function, type Calendar[DateKey]. The PREVIOUSQUARTER function has one argument, a column containing a contiguous range of dates. In our case, that's the DateKey column in the Calendar table.\n• None Close both the arguments being passed to the PREVIOUSQUARTER function and the CALCULATE function by typing two closing parenthesis )). Your formula should now look like this:\n• None Select the checkmark in the formula bar or press Enter to validate the formula and add it to the Sales table.\n\nYou did it! You just created a complex measure by using DAX. What this formula will do is calculate the total sales for the previous quarter, depending on the filters applied in a report. For example, we can put SalesAmount and our new Previous Quarter Sales measure from the Sales table into a Clustered column chart. Then from the Calendar table add Year as a slicer and select 2011. Then after, add QuarterOfYear as another Slicer and select 4, and we get a chart like this:\n\nKeep in mind, the sample model contains only a small amount of sales data from 1/1/2011 to 1/19/2013. If you select a year or quarter where SalesAmount can't be summed, or your new measure can't calculate sales data for the current or previous quarter, no data for that period is shown. For example, if you select 2011 for Year and 1 for QuarterOfYear, no data is shown for Previous Quarter Sales because there's no data for the fourth quarter of 2010.\n\nYou were introduced to several important aspects of DAX formulas:\n• None This formula included two functions. PREVIOUSQUARTER, a time intelligence function, is nested as an argument passed to CALCULATE, a filter function. DAX formulas can contain up to 64 nested functions. It’s unlikely a formula would ever contain so many nested functions. In fact, such a formula would be difficult to create and debug, and it probably wouldn’t be fast either.\n• None In this formula, you also used filters. Filters narrow down what will be calculated. In this case, you selected one filter as an argument, which is actually the result of another function. You'll learn more about filters later.\n• None You used the CALCULATE function. This function is one of the most powerful functions in DAX. As you author models and create more complex formulas, you'll likely use this function many times. Although further discussion about the CALCULATE function is outside the scope of this article, as your knowledge of DAX grows, pay special attention to it.\n• None What does this button on the formula bar do?\n• None What always surrounds a column name in a DAX formula?\n\nAnswers are provided at the end of this article.\n\nFunctions are predefined formulas that perform calculations by using specific values, called arguments, in a particular order or structure. Arguments can be other functions, another formula, expression, column references, numbers, text, logical values such as TRUE or FALSE, or constants.\n\nDAX includes the following categories of functions: Date and Time, Time Intelligence, Information, Logical, Mathematical, Statistical, Text, Parent/Child, and Other functions. If you’re familiar with functions in Excel formulas, many of the functions in DAX will appear similar to you; however, DAX functions are unique in the following ways:\n• None A DAX function always references a complete column or a table. If you want to use only particular values from a table or column, you can add filters to the formula.\n• None If you need to customize calculations on a row-by-row basis, DAX provides functions that let you use the current row value or a related value as a kind of argument to perform calculations based on the context. You'll learn more about context later.\n• None DAX includes many functions that return a table rather than a value. The table isn't displayed, but is used to provide input to other functions. For example, you can retrieve a table and then count the distinct values in it, or calculate dynamic sums across filtered tables or columns.\n• None DAX includes various time intelligence functions. These functions let you define or select date ranges, and perform dynamic calculations based on them. For example, you can compare sums across parallel periods.\n• None Excel has a popular function, VLOOKUP. DAX functions don’t take a cell or cell range as a reference like VLOOKUP does in Excel. DAX functions take a column or a table as a reference. Keep in mind, in Power BI Desktop you’re working with a relational data model. Looking up values in another table is easy, and in most cases you don’t need to create any formulas at all. As you can see, functions in DAX can help you create powerful formulas. We only touched on the basics of functions. As your DAX skills grow, you'll create formulas by using many different functions. One of the best places to learn details about each of the DAX functions is in the DAX Function Reference.\n• What does a function always reference?\n• Can a formula contain more than one function?\n• What category of functions would you use to concatenate two text strings into one string?\n\nAnswers are provided at the end of this article.\n\nContext is one of the most important DAX concepts to understand. There are two types of context in DAX: row context and filter context. We’ll first look at row context.\n\nRow context is most easily thought of as the current row. It applies whenever a formula has a function that applies filters to identify a single row in a table. The function will inherently apply a row context for each row of the table over which it's filtering. This type of row context most often applies to measures.\n\nFilter context is a little more difficult to understand than row context. You can most easily think of filter context as: One or more filters applied in a calculation that determines a result or value.\n\nFilter context doesn’t exist in place of row context; rather, it applies in addition to row context. For example, to further narrow down the values to include in a calculation, you can apply a filter context, which not only specifies the row context, but also specifies a particular value (filter) in that row context.\n\nFilter context is easily seen in your reports. For example, when you add TotalCost to a visualization, and then add Year and Region, you're defining a filter context that selects a subset of data based on a given year and region.\n\nWhy is filter context so important to DAX? You've seen that filter context can be applied by adding fields to a visualization. Filter context can also be applied in a DAX formula by defining a filter with functions such as ALL, RELATED, FILTER, CALCULATE, by relationships, and by other measures and columns. For example, let’s look at the following formula in a measure named Store Sales:\n\nTo better understand this formula, we can break it down, much like with other formulas.\n\nThis formula includes the following syntax elements:\n\nB. The equals sign operator (=), which indicates the beginning of the formula.\n\nC. The CALCULATE function, which evaluates an expression, as an argument, in a context that is modified by the specified filters.\n\nD. Parenthesis (), which surround an expression containing one or more arguments.\n\nE. A measure [Total Sales] in the same table as an expression. The Total Sales measure has the formula: =SUM(Sales[SalesAmount]).\n\nF. A comma (,), which separates the first expression argument from the filter argument.\n\nG. The fully qualified referenced column, Channel[ChannelName]. This is our row context. Each row in this column specifies a channel, such as Store or Online.\n\nH. The particular value, Store, as a filter. This is our filter context.\n\nThis formula ensures only sales values defined by the Total Sales measure are calculated only for rows in the Channel[ChannelName] column, with the value Store used as a filter.\n\nAs you can imagine, being able to define filter context within a formula has immense and powerful capabilities. The ability to reference only a particular value in a related table is just one such example. Don’t worry if you don't completely understand context right away. As you create your own formulas, you'll better understand context and why it’s so important in DAX.\n• What are the two types of context?\n\nAnswers are provided at the end of this article.\n\nNow that you have a basic understanding of the most important concepts in DAX, you can begin creating DAX formulas for measures on your own. DAX can indeed be a little tricky to learn, but there are many resources available to you. After reading through this article and experimenting with a few of your own formulas, you can learn more about other DAX concepts and formulas that can help you solve your own business problems. There are many DAX resources available to you; most important is the Data Analysis Expressions (DAX) Reference.\n\nBecause DAX has been around for several years in other Microsoft BI tools such as Power Pivot and Analysis Services Tabular models, there are many great sources information out there. You can find more information in books, whitepapers, and blogs from both Microsoft and leading BI professionals. The DAX Resource Center is also a great place to start.\n• Validates and enters the measure into the model.\n• Yes. A formula can contain up to 64 nested functions.\n• One or more filters in a calculation that determines a single value."
    },
    {
        "link": "https://github.com/MicrosoftDocs/powerbi-docs/blob/main/powerbi-docs/transform-model/desktop-calculated-columns.md",
        "document": "With calculated columns, you can add new data to a table already in your model. But instead of querying and loading values into your new column from a data source, you create a Data Analysis Expressions (DAX) formula that defines the column's values. In Power BI Desktop, calculated columns are created by using the new column feature in Report view, Table view, or Model view.\n\nUnlike custom columns that are created as part of a query by using Add Custom Column in Power Query Editor, calculated columns that are created in Report view, Table view, or Model view are based on data you've already loaded into the model. For example, you might choose to concatenate values from two different columns in two different but related tables, do addition, or extract substrings.\n\nCalculated columns you create appear in the Fields list just like any other field, but they have a special icon showing its values are the result of a formula. You can name your columns whatever you want, and add them to a report visualization just like other fields.\n\n:::image type=\"content\" source=\"/power-bi/transform-model/media/desktop-calculated-columns/calccolinpbid_fields.png\" alt-text=\"Screenshot of Power BI Desktop showing calculated columns in the Fields view.\":::\n\nCalculated columns calculate results by using DAX, a formula language meant to work with relational data like in Power BI Desktop. DAX includes a library of over 200 functions, operators, and constructs. It provides immense flexibility in creating formulas to calculate results for just about any data analysis need. To learn more about DAX, see Learn DAX basics in Power BI Desktop.\n\nDAX formulas are similar to Excel formulas. In fact, DAX has many of the same functions as Excel. DAX functions, however, are meant to work over data interactively sliced or filtered in a report, like in Power BI Desktop. In Excel, you can have a different formula for each row in a table. In Power BI, when you create a DAX formula for a new column, it calculates a result for every row in the table. Column values are recalculated as necessary, like when the underlying data is refreshed and values have changed.\n\nJeff is a shipping manager at Contoso, and wants to create a report showing the number of shipments to different cities. Jeff has a Geography table with separate fields for city and state. But, Jeff wants their reports to show the city and state values as a single value on the same row. Right now, Jeff's Geography table doesn't have the wanted field.\n\n:::image type=\"content\" source=\"media/desktop-calculated-columns/calccolinpbid_cityandstatefields.png\" alt-text=\"Screenshot of Power BI Desktop showing the Geography filter in the Fields view.\":::\n\nBut with a calculated column, Jeff can put together the cities from the City column with the states from the State column.\n\nJeff right-clicks on the Geography table and then selects New Column. Jeff then enters the following DAX formula into the formula bar:\n\nThis formula creates a new column named CityState. For each row in the Geography table, it takes values from the City column, adds a comma and a space, and then concatenates values from the State column.\n\nNow Jeff has the wanted field.\n\n:::image type=\"content\" source=\"media/desktop-calculated-columns/calccolinpbid_citystatefield.png\" alt-text=\"Screenshot of Power BI Desktop showing CityState checked in the Geography filter in the Fields view.\":::\n\nJeff can now add it to the report canvas along with the number of shipments. With minimal effort, Jeff now has a CityState field that can be added to just about any type of visualization. When Jeff creates a new map, Power BI Desktop already knows how to read the city and state values in the new column.\n\nThis article provides a quick introduction to calculated columns here. For more information, see the following resources:\n• To download a sample file and get step-by-step lessons on how to create more columns, see Tutorial: Create calculated columns in Power BI Desktop.\n• To learn more about DAX, see Learn DAX basics in Power BI Desktop.\n• To learn more about columns you create as part of a query, see Create custom columns."
    },
    {
        "link": "https://community.powerbi.com/t5/Desktop/Custom-Column-or-Dax-Formula/td-p/2291958",
        "document": "I am tying to write a Dax Formula or a Custom Column, preferrably a custom column.\n\nI want the formula to reference two Date columns. The two columns are ETADATE and APPTDATE. My goal is to idenitfy all the ETADATEs that are Today+ 3 days that do not have a APPTDATE, which shows up in the APPTDATE column as 1/1/2001.\n\nThe Today+3days would have to be rolling over every day. I can also change the 1/1/2001 No APPT indicator to anything else so if that doesnt work I would be happy to replace that value with something else.\n\nPlease let me know if you need more information but I would greatly appreciate some assistance with this. Thank you for reading"
    },
    {
        "link": "https://community.powerbi.com/t5/Desktop/DAX-or-Power-Query-Creating-a-new-column-with-values-from/td-p/2732969",
        "document": "I'm facing a problem and decided to ask the community for help.\n\nI have a table with 3 columns - [Country ID], [Factory ID], and [Amount] - and I want to add a new column [Amount (new)] with the logic that's displayed on the example below. What's the best way to achieve this by using either DAX or PowerQuery?"
    }
]