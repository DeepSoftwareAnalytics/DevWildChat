[
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.math?view=net-9.0",
        "document": ""
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.math.log?view=net-9.0",
        "document": "One of the values in the following table. (+Infinity denotes PositiveInfinity, -Infinity denotes NegativeInfinity, and NaN denotes NaN.)\n\nThe following example uses Log to evaluate certain logarithmic identities for selected values.\n\nThis method calls into the underlying C runtime, and the exact result or valid input range may differ between different operating systems or architectures."
    },
    {
        "link": "https://geeksforgeeks.org/c-sharp-math-ceiling-method",
        "document": "In C#, Math.Ceiling() is a Math class method. This method is used to find the smallest integer , which is greater than or equal to the passed argument. The Ceiling method operates both functionalities in decimal and double. This method can be overload by passing different arguments to it.\n\n\n\nThis method is used to returns the smallest integral value which is greater than or equal to the specified decimal number in the argument list.\n\nSyntax: \n\n\n\nReturn Type: This function return the smallest integral value which will be greater than or equal to d. The type of this method is System.Decimal and return a decimal instead of an integral type.\n\nExamples: \n\n\n\nThis method is used to returns the smallest integral value which is greater than or equal to the specified double-precision floating-point number in the argument list.\n\nSyntax: \n\n\n\nReturn Type: This method returns the smallest integral value that is greater than or equal to d. If d is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned. The type of this method is System.Double.\n\nExamples:"
    },
    {
        "link": "https://codecademy.com/resources/docs/c-sharp/math-functions",
        "document": "Mathematical functions can be performed using the class. is a static class that is included within .NET as part of the namespace. .NET is a free, cross-platform, open source developer platform created by Microsoft.\n\nThe class can be accessed by including the namespace within a file by adding the following line:\n\nThe class is static and is accessed without needing to create an instance.\n\nThe following example uses the method to return the result of raised to the power of :\n\nIn cases where access to is required but access to the entire namespace is not, an alternative syntax can be used instead. The following example uses an alternative syntax and returns the floor of using the method:\n\nBelow are a selected list of methods:"
    },
    {
        "link": "https://medium.com/@CodeWithHonor/c-math-library-36d98c09ec10",
        "document": "The C# Math library is a collection of mathematical functions and methods that are included in the System.Math namespace. It provides a wide range of mathematical operations and functions, including trigonometry, logarithmic functions, and other common mathematical operations.\n\nOne of the most commonly used functions in the Math library is the function, which returns the absolute value of a number. For example, would return 5.\n\nThe Math library also includes a number of trigonometric functions, such as , , and , which can be used to calculate the sine, cosine, and tangent of an angle, respectively. These functions take an angle in radians as a parameter and return a value between -1 and 1.\n\nThe Math library also includes a number of functions for working with logarithmic values. The function returns the natural logarithm of a number, while the function returns the base-10 logarithm of a number.\n\nThe Math library has a few properties that can be used to retrieve common mathematical constants:\n• : This property returns the value of Euler's number, which is approximately 2.71828.\n• : This property returns the value of pi, which is approximately 3.14159."
    },
    {
        "link": "https://stackoverflow.com/questions/57307023/is-there-a-good-practice-of-setting-default-values-in-an-constructor",
        "document": "Now, if I want to create an empty constructor where I set default values for the class properties I could do this either this way:\n\nor this way:\n\nBoth examples seem valid, since I would never set a default value, that doesn't meet the requirements in the setter evaluation. The question is, is there a best practice or doesn't it matter anyway? What would be the advantage of one or the other be (as I can't find any)? Is there some reference, where this question is adressed?\n\nSo far I have come across code from many different developers that use either or both ways..."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-constructors",
        "document": "When a class or struct is instantiated, the runtime calls its constructor. Constructors have the same name as the class or struct, and they usually initialize the data members of the new object.\n\nIn the following example, a class named is defined by using a simple constructor. This class is then instantiated with the operator. The runtime invokes the constructor immediately after memory is allocated for the new object.\n\nA constructor that takes no parameters is called a parameterless constructor. The runtime invokes the parameterless constructor when an object is instantiated using the operator and no arguments are provided to . C# 12 introduced primary constructors. A primary constructor specifies parameters that must be provided to initialize a new object. For more information, see Instance Constructors.\n\nUnless the class is static, classes without constructors are given a public parameterless constructor by the C# compiler in order to enable class instantiation. For more information, see Static Classes and Static Class Members.\n\nYou can prevent a class from being instantiated by making the constructor private, as follows:\n\nFor more information, see Private Constructors.\n\nConstructors for struct types resemble class constructors. When a struct type is instantiated with , the runtime invokes a constructor. When a is set to its value, the runtime initializes all memory in the struct to 0. If you declare any field initializers in a type, you must supply a parameterless constructor. For more information, see the Struct initialization and default values section of the Structure types article.\n\nThe following code uses the parameterless constructor for Int32, so that you're assured that the integer is initialized:\n\nThe following code, however, causes a compiler error because it doesn't use , and because it tries to use an object that isn't initialized:\n\nAlternatively, some types (including all built-in numeric types) can be initialized or assigned and then used as in the following example:\n\nBoth classes and structs can define constructors that take parameters, including primary constructors. Constructors that take parameters must be called through a statement or a base statement. Classes and structs can also define multiple constructors, and neither is required to define a parameterless constructor. For example:\n\nThis class can be created by using either of the following statements:\n\nA constructor can use the keyword to call the constructor of a base class. For example:\n\nIn this example, the constructor for the base class is called before the block for the constructor executes. The keyword can be used with or without parameters. Any parameters to the constructor can be used as parameters to , or as part of an expression. For more information, see base.\n\nIn a derived class, if a base-class constructor isn't called explicitly by using the keyword, the parameterless constructor, if there's one, is called implicitly. The following constructor declarations are effectively the same:\n\nIf a base class doesn't offer a parameterless constructor, the derived class must make an explicit call to a base constructor by using .\n\nA constructor can invoke another constructor in the same object by using the keyword. Like , can be used with or without parameters, and any parameters in the constructor are available as parameters to , or as part of an expression. For example, the second constructor in the previous example can be rewritten using :\n\nThe use of the keyword in the previous example causes the following constructor to be called:\n\nConstructors can be marked as , , , internal, protected internal or . These access modifiers define how users of the class can construct the class. For more information, see Access Modifiers.\n\nA constructor can be declared static by using the keyword. Static constructors are called automatically, before any static fields are accessed, and are used to initialize static class members. For more information, see Static Constructors.\n\nFor more information, see Instance constructors and Static constructors in the C# Language Specification. The language specification is the definitive source for C# syntax and usage."
    },
    {
        "link": "https://softwareengineering.stackexchange.com/questions/51062/constructor-parameter-validation-in-c-best-practices",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/863045/what-is-the-preferred-way-of-constructing-objects-in-c-constructor-parameters",
        "document": "I was wondering, what is the preferred way to construct a new object in C#? Should I create it to use: New Person() { Name = \"name\", Age = 24 }; Is it just a matter of taste or is there a good reason to use one over the other? I can imagine that one should only use the required fields in the constructor and optional fields not as constructor parameters but by using properties."
    },
    {
        "link": "https://reddit.com/r/csharp/comments/17w6isb/tried_the_new_nice_and_clean_primary_constructors",
        "document": "Tried the new Primary Constructors in C# 12. They make a certain kind of classes and structs a lot more readable in my opinion and I start to like it.\n\nHowever, the analyzer that suggest where to use them and offer auto-conversion goes a bit too far. For example, I really think it should have excluded structs with attributes that are used in interop calls. Currently, since primary constructors introduce new implicit fields for each constructor parameter, it destroys the layout of the structs and native functions get the wrong data.\n\nBut otherwise, really nice and clean new language feature!"
    }
]