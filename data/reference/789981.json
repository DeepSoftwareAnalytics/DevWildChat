[
    {
        "link": "https://support.sas.com/en/software/saspy.html",
        "document": "SASPy can be used from Jupyter Notebook, JupyterLab, or from any Python console/scripting environment.\n\nSASPy is open source and available on GitHub and PyPI. User contributions are accepted."
    },
    {
        "link": "https://sassoftware.github.io/saspy/install.html",
        "document": "This package can be installed via pip, uv, pixi, or conda. It is a pure Python package and works with Python 3.x installations.\n\npip is the default Python package manager that comes with Python when downloaded from python.org To install the latest version using , you execute the following: or, for a given branch (put the name of the branch after @): The best way to update and existing deployment to the latest SASPy version is to simply uninstall and then install, picking up the latest production version from PyPI:\n\nuv Is a Python package and project manager, written in Rust.: # adds saspy to your project from PyPI Installing a specific release can be done from the SASpy project releases page, where the X.X.X is the release version you want.:\n\npixi is a language-agnostic and cross-platform package management tool built on the foundation of the conda ecosystem. You can install packages from the conda-forge channel, or PyPI.: # Where X.X.X is the version you'd like to install. # If you'd like to install saspy from PyPI. # Python is a required dependency for packages installed from PyPI. # Where X.X.X is the version you'd like to install.\n\n# Where X.X.X is the version you'd like to install. If you’d like to see more ways to install from the conda-forge channel please look to the repository for the saspy feedstock: To use this module after installation, you need to copy the example sascfg.py file to a sascfg_personal.py and edit sascfg_personal.py per the instructions in the next section.\n• None If you run into any problems, see Troubleshooting.\n• None If you have questions, open an issue at https://github.com/sassoftware/saspy/issues."
    },
    {
        "link": "https://sassoftware.github.io/saspy",
        "document": "This module provides Python APIs to the SAS system. You can start a SAS session and run analytics from Python through a combination of object-oriented methods or explicit SAS code submission. You can move data between SAS data sets and Pandas dataframes and exchange values between python variables and SAS macro variables.\n\nThe APIs provide interfaces for the following:\n• None Start a SAS session on the same host as Python or a remote host.\n• None Use familiar methods such as and to work with data.\n\nAdditional functionality such as machine learning, econometrics, and quality control are organized in Python classes.\n\nSee Getting started for programming examples."
    },
    {
        "link": "https://github.com/sassoftware/saspy",
        "document": "This package provides interfaces between Python and SAS. This package enables a Python developer to create mixed Python/SAS workflows to leverage the powers of both SAS and Python, by connecting a Python process to any of a variety of SAS deployments, where it will run SAS code. The SAS code is generated by the SASPy object and methods or explicitly user written. Results from SAS are returned as text, HTML5 documents (via SAS ODS), or as Pandas Data Frames. This package supports running analytics and returning the resulting graphics and result data to the Python process. It can convert data representations between SAS Data Sets and Pandas Data Frames.\n\nThis package has multiple access methods which allow it to connect to local or remote Linux SAS, IOM SAS on Windows, Linux (Including Grid Manager), or MVS, and local PC SAS. It can run within various Notebooks platforms, or IDE's/UI's or in interactive line mode Python or in Python batch scripts.\n\nIt is expected that the user community can, and will, contribute enhancements.\n\nAll of the documentation, including installalation and configuration information can be found at sassoftware.github.io/saspy.\n\nAlso, example Notebooks and use cases can be found at sassoftware/saspy-examples.\n\nThe Contributing file explains the rules and conventions to follow while Contributing to this project. It also contains the Contributor Agreement instructions.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at LICENSE.txt\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    {
        "link": "https://documentation.sas.com/doc/en/dplyviya0ctr/latest/p02tns1ea7ek9on1ibx8rneca1t0.htm",
        "document": ""
    },
    {
        "link": "https://github.com/sassoftware/saspy/issues/227",
        "document": "The module pandas is used throughout this project but is not currently installed as a SASPy dependency, leading to unexpected exceptions.\n\nTo reproduce this, setup a virtual environment with only SASPy installed, and try this example:\n\nThis currently results in the following:\n\nPR #225 resolves this by updating setup.py to include pandas (and its dependency numpy). An alternative is as follows:\n• Refactor the entire code base, e.g., by consistently wrap in statements.\n• Update project documentation to explain by pandas is not an explicit dependency and to list all features requiring a separate pandas installation."
    },
    {
        "link": "https://sassoftware.github.io/saspy/troubleshooting.html",
        "document": "This chapter covers troubleshooting procedures with this module. While we don’t expect you to have trouble, there are some cases where you might not have everything working right. We’ve tried to provide an easy reference for diagnosing and fixing those issues here.\n\nAlthough setup and configuration is pretty simple, if you do have something not quite right, it may be hard to figure out what’s wrong. That’s when you come to this chapter.\n\nWe’ve added quite a bit of self diagnostics and error messages for many of the likely issues that can happen trying to start up a connection to SAS. Each access method has its own set of usual suspects. With a little help and explaination here, you can probably diagnose and correct any issue you might have.\n\nProblems in this category will be when using the saspy.SASsession() method to connect to a SAS session. The very first thing to look at is your sascfg_personal.py file (based off the examples in sascfg.py in the installation directory). This is where the configurations definition are. The sample file itself has documentation and so does Installation.\n\nAlthough each access method has its own ways something can go wrong, there are some common diagnostics you will get and can use to track down the issue. The first is that if the SASsession() method fails, it will return any erros it can, as well as the actual command it was trying to run to connect to SAS. That will vary with access method, but in each case, you can cut-n-paste that command into a shell on the machine where Python is running and that may provide more diagnostics and error messages then may have been displayed from SASsession(). For instance, here’s a very simple case using the STDIO access method on a local linux machine. The Configuration Definition is nothing but a valid path which should work. When I try to run I get the following: I can see from that error it didn’t work, but it didn’t really tell me why or what to do about it. Well, it did say I should try running that command to see if I could get better diagnostics. What the heck, let’s try: Well go figure. My SAS license has expired. The same process can be used with other access methods. Now we’ll look at what can be misconfigured for the various connection methods, see what the errors look like, and how you can determine what the problem is.\n\nThere are only a couple of things that can go wrong here. First, this only works on Unix, not Windows, so if you’re having problems getting to to work from Windows, well there you go. Second, the only thing you really need to have right is the path to the SAS startup script in your SAS installation. The ‘saspath’ value in your configuration definition needs to be correct and accessible. If, for instance, you just installed SASPy on your PC and then tried to use it, without configuring it, you will see the following error, since the example config only has one configuration definition which can’t work on Windows. If you see that error, go read the configuration doc here: Configuration\n\nThe same issues in STDIO above are true here, with one extra component: ssh. The ‘saspath’ value has to be right, and it has to be right on the remote Linux machine that you are ssh’ing to. That might not be the same path as might be on your local SAS deployment. Secondly, this requires that you have passwordless SSH configured and working for each user that will be connecting between the local and remote machines, or or you can use sshpass. That can be diagnosed independant of this module and Python. If the connection cannot be made, you should see that error message with the command that was trying to be executed, and you can run it to get better diagnostic error messages that can tell you if its a problem with your SSH credentials, the machine you’re trying to reach isn’t listening, or any other problem there might be. So, running that command can tell me what the problem is. To diagnose ssh further, you can ad -v (-vv, -vvv) to the command line to see more diagnostic information. For instance, everything seems set up correctly but after running ssh it just says ‘Connection closed by 10.17.12.14’ 't have permission to get to this host via any authentication method 's of output removed. just showing some of it here] 't have a valid key for that system.\n\nThis access method has the most possibilities of having something misconfigured, because it has more components that all have to connect together. But, it also has the most diagnostics to help you out. There are basically two possibilities where something can go wrong: Java or IOM. Let’s look at Java first. There are three things that are likely to be the problem.\n• None Java isn’t installed or configured right, or you don’t have the right Java command for ‘java’ in your configuration definition.\n• None You don’t have your classpath right, or don’t have the right JAR files.\n• None An IOM specific issue like host/port aren’t right, user/pw or Windows path issues This error is descibed below:\n• None The system cannot find the file specified Java startup problems will be caught and whatever system error(s) there were will be returned. And, like in the cases above, you will still get the exact command trying to be run, so you can always run it too and see if there are any more diagnostics and error messages. Here an example of the first case, a bad path to the Java command. This example is from Jupyter Notebook on Windows. The OS Error was: The system cannot find the file specified SAS Connection failed. No connection established. Double check your settings in sascfg_personal.py file. Attempted to run program c:java with the following parameters:['c:\\java', '-classpath', 'C:\\java\\sas.svc.connection.jar;C:\\java\\log4j.jar; C:\\jars\\sas.security.sspi.jar;C:\\jars\\saspyiom.jar', 'pyiom.saspy2j', '-host', 'localhost', '-stdinport', '59110', '-stdoutport', '59111', '-stderrport', '59112', '-zero', ''] If no OS Error above, try running the command (where saspy is running) manually to see what is wrong: c:java -classpath \"C:javasas.svc.connection.jar;C:javalog4j.ja;C:jarssas.security.sspi.jar;C:jarssaspyiom.jar\" pyiom.saspy2j -host localhost -stdinport 59107 -stdoutport 59108 -stderrport 59109 -zero No SAS process attached. SAS process has terminated unexpectedly. And if we submit that command, we get a slightly different error message than SASPy received, but it shows the same problem: there is no c:\\java command to execute. So what about CLASSPATH problems? Here are three cases. The first is just the wrong path, so Java won’t be able to find the main class to run. The second case has a valid classpath, but is missing one of the IOM jars. The third is a case with EG versions of the jars, not from a SAS 9 install. These errors are descibed below:\n• None Error: Could not find or load main class pyiom.saspy2j\n• None The ‘correct’ error when your classpath is ok\n• None Just what a bad classpath might look like: And if we submit that command, we see the same error that was reported. To demonstate the error for a missing JAR file, let’s comment out one of the IOM JAR files: And if we run that command ourselves… Same error as was reported.\n• None The problem with versions 9 Java, not having CORBA available. This problem has now been solved in a different way. I’ll leave the original below for reference, but here is the solution to this problem, along with Java 10, 11 … which was not able to be solved that way as they no longer even had CORBA available. As of version 3.1.1, saspy now includes the following 5 jars in the java/thirdparty directory. Just add these jars into your classpath (as shown in the onfiguration doc for IOM) and this will work for any Java version. Old answer, no longer the solution: A new issue has been reported when using Java9. The java IOM client is dependant on CORBA, which is in Java9 but no longer in its default search path. This can be resolved by adding it back in, using the ‘javaparms’ key of your configuration definition as shown below. Version 11 Java doesn’t even ship CORBA, so the Java IOM client won’t yet work with that version. The IOM group is currently investigating a solution to this. If you see an error like this: Then you can add CORBA back into the search path via the ‘javaparms’ key (there may be other ways you can do this, but this has been reported to work):\n• None There can be an issue using some versions of these jars that aren’t from a SAS9 instalation. Some EG client jars don’t have all the necessary classes in them. Although I don’t have any of those jars to run an actual test for this, I’ve copied the following traceback from one of the issues where this was reported. The NoClassDefFounfError is the clue here, referring to a com/sas/… class that isn’t defined.\n• None When you run the java command yourself and the classpath is ok, you still get an error. If you run the Java command and you see an error similar to the following, about a socket connection failure, that suggests that your CLASSPATH is correct and that the problem might be connecting to the IOM server. That error shows that java came up and is running code from saspyiom.jar. It is trying to connect back to the python process, which isn’t running, thus the connection error. But it means, at least, saspyiom.jar was found and the other SAS jars too. So if Java is coming up, but you still fail to connect, then it is a problem connecting to IOM. The IOM Error message will be reported, followed by the command that was trying to be run. Below are the usual IOM errors and what to do about them. There are a few obvious misconfigurations that can happen here, and these are the likely error you may see. Scroll down based upon the number to see an example of that error and help on why that may occur and what to do about it.\n• None The application could not log on to the server “host:port”. No server is available at that port on that machine.\n• None The application could not log on to the server “host:port”. The user ID “wrong_user” or the password is incorrect.\n• None The native implementation module for the security package could not be found in the path.\n• None The application could not find a command to launch a SAS Workspace Server.\n• None The application could not log on to the server. The server process did not start.\n• None The application could not log on to the server “localhost:0”. Integrated Windows authentication failed. OR\n• None The application could not create a tunnel to the server “127.0.0.1:55517”.\n• None None of the requested encryption algorithms are supported by both peers: xxx.\n• None An exception was thrown during the encryption key exchange. Here are examples of each of the above problems:\n• None The application could not log on to the server “Linux-1:333”. No server is available at that port on that machine. For this error, either the ‘iomhost’ or ‘iomport’ you’ve specified aren’t right, or the server isn’t up and available to be connected to. You may have specified the host or port for the metadata server instead of the host of the object spawner and port for theworkspace server.\n• None The application could not log on to the server “Linux-1:8591”. The user ID “wrong_user” or the password is incorrect. Your credentials were specifed wrong, or you don’t have permission to connect. This can also happen when there are more than one App Server and you didn’t specify which one to connect to. The object spawner will only try the first one in its list, so it might be trying to connect you to the wrong App Serever.\n• None The native implementation module for the security package could not be found in the path. For Windows Local connection (and remote connections using IWA via {‘sspi’ : True}), you don’t have the path to the sspiauth.dll in yout System Path variable. See the configuration doc to see how to specify this: https://sassoftware.github.io/saspy/configuration.html#local\n• None The application could not find a command to launch a SAS Workspace Server. For Windows Local connection, the registry doesn’t have the right path to the SAS start up command. If you get this error: The application could not find a command to launch a SAS Workspace Server. There is a workaround you can use. Oh course, having a clean SAS install should keep this from happening, but this error has been reported a couple times. The work around for this is to use the ‘javaparms’ option on the configuration definition to specify the command manually as follows (use the right path on your system, of course):\n• None The application could not log on to the server. The server process did not start. For Windows Local connection, the start up command in the registry isn’t formated just right. Blanks, quotes, other. If you get this error: The application could not log on to the server. The server process did not start. And you have what seems to be the correct start up command in your registry; key=HKEY_CLASSES_ROOTCLSID{440196D4-90F0-11D0-9F41-00A024BB830C}LocalServer32. It may still not be formatted exactly right regaring quoted paths, or blanks in the paths, or the char8 ‘~’ parts. There is a easy way to have SAS re-register this in the Windows Registry that should clean this up and make it correct. Run your sas.exe (you can do this from a CMD Prompt; may need fully qualified path for sas.exe) with the following option: /regserver If this doesn’t fix the issue, you can try the same workaround as #4 above, using the javaparms to specify the command. The best option is to quote all paths in that command. In the error message above, you can see that javaparms was used to specify the command, which failed. If I quote both of the paths in that parameter, then it works.\n• None The application could not log on to the server “localhost:0”. Integrated Windows authentication failed. OR These errors imply that your hosts file doesn’t have ‘localhost’ set as an alias for ip 127.0.0.1. Tech Support note 55227 (http://support.sas.com/kb/55/227.html) identifies this issue.\n• None The application could not create a tunnel to the server “127.0.0.1:55517” (the port number will vary) This is an error that can occur trying to make a Local IOM connection to local SAS on your Windows machine. This one was recently reported in issue 354. Turns out it’s a problem with having the SAS_IOM_PROXYLIST environment variable set. This is needed sometimes for connecting to remote IOM servers when there are firewalls in the way, or something about that. Either way, it’s not needed and can cause a failure trying to use a local SAS install over IOM Local saspy connection. Luckilly it’s easy to resolve. You can simply unset that variable in your Python session before trying to get your SASsession. You can do this inline if you need this set for remote IOM connections from saspy, or put it in your sascfg_personal.py file if you only connect to local SAS from saspy but need the variable set for other applications that need it. # unset the variable here now. You can do this in your config file it you need it all the time \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\n• None None of the requested encryption algorithms are supported by both peers: xxx. (xxx is the method; AES) This error identifies that your Workspace server is configured to use encryption. The specific method may show up at the end of the message; for instance AES. This means that you don’t have the 3 encryption jars in the iomclient directory of the saspy install. See the configuration section for IOM regarding this: https://sassoftware.github.io/saspy/configuration.html#attn-as-of-saspy-version-3-3-3-the-classpath-is-no-longer-required If this error is for AES, then there’s another solution than having to get those 3 jars and add them to the deployment, but only for SAS versions prior to M7. M7 requires the encryption jars. Java 8 (release greater than 151), has the needed support for this in it. So you just need to install the current Java 8 or higher to solve this without needing the jars.\n• None An exception was thrown during the encryption key exchange. This is another possible error having to do with encryption, and is addressed by adding the 3 encryption jars to your saspy deployment, as identified in number 8 just above. So, hopefully this has shown you how to diagnose connection and configuration problems. When you have things set up right, you shouldn’t have any problems, it should just work!"
    },
    {
        "link": "https://communities.sas.com/t5/SAS-Programming/SASPy-and-the-Macro-Processor/td-p/912509",
        "document": "Hi Experts, I've been working to modernize our front-end applications using Python (with the PyQt framework) and connecting it to our existing back-end SAS programs. Typically, I've been successful in calling the back-end SAS programs by using %INCLUDE inside the submit() saspy method. Our back-end SAS programs utilize the macro language pretty extensively.\n\nFor example, the back-end programs use macro variable calls like &&&PRODUCT._ATTRIBUTE_SPEC_LIMIT which first resolves to &PROD1_ATTRIBUTE_SPEC_LIMIT which then resolves to a value like 95. In SAS, I can run the following code where both macro calls resolve to 95:\n\nHowever, in Python using the SASPy module, it appears only 1 \"loop\" is being run in the macro processor (instead of resolving until there's no &). Thus, &&&PRODUCT._ATTRIBUTE_SPEC_LIMIT is only being resolved once to &PROD1_ATTRIBUTE_SPEC_LIMIT and not 95. The following code could be pasted in Python provided the sas session object named \"sas\" has already been created:\n\nIs there something I may be missing? I would like to avoid touching the numerous back-end SAS programs if at all possible. Thanks for the help!"
    },
    {
        "link": "https://github.com/sassoftware/saspy/issues/455",
        "document": "Trying to connect to a local SAS session but keep receiving the same error. I added the directory of sspiauth.dll to my PATH environment variable.\n\nand receive the below error\n\nI then ran the code in the command line and receive the error below:"
    },
    {
        "link": "https://sassoftware.github.io/saspy/configuration.html",
        "document": "This module can connect and start different kinds of SAS sessions. It can connect to SAS on Unix, Mainframe, and Windows. It can connect to a local SAS session or remote session. Because of the wide range of connection types, there are a number of different access methods which are used to connect to different kinds of SAS sessions.\n\nThe current set of connection methods are as follows:\n\nThough there are several connection methods available, a single configuration file can be used to enable all the connection methods. The sample config file contains instructions and examples, but this section goes into more detail to explain how to configure each type of connection.\n\nDepending upon how you did your installation, the sample sascfg.py file may be in different locations on the file system:\n• None In a regular pip install, it is under the site-packages directory in the Python installation.\n• None If you cloned the repo or downloaded and extraced the repo to some directory and then installed, it will be in that directory and maybe also copied to site-packages.\n\nIf you are not sure where to look, then there is a very simple way to determine the location of your saspy installation.\n\nAfter installing, start Python and . Then, simply submit . Python will show you where it found the module (it will show the __init__.py file in that directory). It is the directory that is the module, so the sascfg.py file is in that directory, same as __init__.py.\n\nOriginally, sascfg.py was the config file saspy used. But, since the saspy.cfg file is in the saspy repo, it can be updated on occasion and when you do an upgrade it will pull down the repo sascfg.py and replace the one you’ve in your installation. If you used that file for your configuration, then you would need to keep a copy elsewhere and then replace the new one with your copy after upgrading or pulling, if yours was replaced. So, the sascfg.py file became the example file, and sascfg_personal.py is config file to edit and use. This file doesn’t exist in the repo, so it will never be overwritten when you upgrade or pull. saspy will always try to import sascfg_personal.py first, and only if that fails will it try to import sascfg.py (only for backward compatibility). So copy sascfg.py to sascfg_personal.py and put all of your specific configuration into the _personal file. Note that the sascfg.py file has examples of all of the various kinds of connections you could use. You don’t need all of that in your _personal version; only the parts you need for your situation. The next section explains the minimum parts you would need. Also note that this file does not have to live in the repo itself. It can be anywhere on the filesystem as long as that location is accessible to python. If the path is in the python search path, then you’re good. That includes being in the repo directory, of course, which is the most convenient (that’s where I have it!). If it’s location isn’t in the python path, you can use the cfgfile=’’ parm on the SASsession() method to point to it. New in 3.1.6: You can now place a sascfg_personal.py configuration file in your home directory. The following path “~/.config/saspy/” will be searched for a sascfg_personal.py file. The new search order will basically be the same as it has been, but with this new home config directory inserted after the current dir and before the rest of the python path. The following will be the order in which the config file will be found. If you don’t specify cfgfile= on SASsession, then sascfg_personal.py will be found:\n• None saspy install directory (same place as the sascfg.py examples file in to repo)\n• None current dir (whatever that is; wherever you started python)\n• None ~/.config/saspy - the new directory being added in 3.1.5 (that works on windows too: think %HOMEPATH%\\.config\\saspy)\n• None the rest of the directories in the python path\n• None if not found, then sascfg.py in the saspy repo (only to support way, way, way back compatibility - don’t use this) Note that once this has been imported it will be the one config file used for the python session, as it’s imported by name so it will be cached and that is what will be used even if imported again. If you use the cfgfile= to specify a specific file, then that file will be used and no search path will matter. Note that in the case of cfgfile=, you can use different files for different SASsession()’s in the python session. Whatever file you specify for a given SASsession will be used as the config file for that session. If the configuration file is in the search path described above, you can just create a session as follows: If, however, it is not in any of those directories, then you can use the cfgfile= parameter in your SASsession() invocation to specify its location: The python search path can be found by looking at the PYTHONPATH environment variable (if it’s set), but more definitively by submitting the following: There are also some new convenience methods and attributes in 3.1.6 to help in the case where you have multiple sascfg_personal.py files. First is the saspy.SAScfg attribute which will show you the sascfg_personal.py file that would be used if you submitted SASsession(). This is found and set when you import saspy. There is also a saspy.list_configs() method which shows you what sascfg_personal.py files are found in the search order listed above, in that order. Here’s an example showing these (I have one in the saspy install dir, current dir and the new ~/.config/saspy dir):\n\nThere are three main parts to this configuration file.\n• None SAS_config_options # this dictionary isn’t required unless you want to change a default In reverse order, the configuration definitions are Python dictionaries. Each dictionary has the settings for one connection method (STDIO, SSH, IOM, and so on) to a SAS session. These values are defined in the following sections. SAS_config_options now has a fourth option (as ov V4.3.2). This new, fourth, option is and it’s for setting the ODS Style, overriding the default. There was already an attribute you can set for this on the SASsession object, , but that couldn’t be set in a SAS_Kernel notebook, so I added it in the config for that case. The first option restricts (or allows) an end users’ ability to override settings in the configuration definitions by passing them as parameters on the . Each of the keys in the configuration definition can be passed in at run time on the SASsession(). If lock_down is set to True, any keys defined in the configuration definition cannot be overridden in SASsession(), Keys that are not specified in the Config Def, can be specified at run time on the SASsession(). If set to False, any config def key can be specified on the SASsession(). The second controls the printing of some debug type messages. While the third, ‘prompt’ defines whether saspy can prompt the user if necessary. You would set this to False, if running a script in the background, where no input could be provided and if a prompt were to be issued, the process would hang waiting on input. Prompt= can also be provided on the SASsession() as a parameter, though not in the configuration definition, as most prompting that can happen has to do with, and happens prior to parsing, the configuration definition. SAS_config_names is the list of configuration definition names to make available to an end user at connection time. Any configuration definitions that are not listed in SAS_config_names are simply inaccessible by an end user. You can add several configuration definitions in the file but not make them available by simply excluding the names from the list. Also note that these names can be anything you want. The names of the example configuration definitions we chosen to be self-documenting. There nothing special about ‘winlocal’, it could be named Bob. But then it wouldn’t be obvious that it’s for a WINdows install running a LOCAL copy of SAS. So, your sascfg_personal.py file only need a few things in it; not everything in the example sascfg.py file. For example, if you had SAS installed on your Linux system, your sascfg_personal.py file may simply be the following: # this is actually optional, you only have to have it to change the defaults\n\nNEW in V3.6.3, you can use this method from a Windows Client to connect to a stand alone SAS install on a remote Linux machine. Before that, it was only supported from a Linux client. This is the remote version of the original connection method (STDIO). This also works with Unix SAS only, and it supports passwordless SSH to the Linux machine where SAS is installed. It is up to you to make sure that user accounts have passwordless SSH configured between the two systems. Starting in version 4.3.0, you can use sshpass on Linux to automate connecting with user/password as an option instead of a passwordless configuration. If you don’t already have passwordless ssh set up, you need to generate rsa keys. Starting after version 2.2.9, you can specify an identity file (.pem file) instead by providing the file path on the identity key. Either of these provide passwordless access. If you have any trouble with this, you will find that adding -vvv to the command saspy trys to run (run that yourself from a shell with -vvv added) will provide significant diagnostics about how ssh is trying to authenticate. Something like the following: In addition to the keys for STDIO, there are two more keys to configure: (Required) The host to connect to. Enter a resolvable host name or IP address. To accomodate alternative SSH configurations, you may also provide any of the following optional keys: (Optional: string) The path to the identity file to use. A .pem file. (Optional: string) New in V3.6.3 for Win support. Linux user name to use for the connection. This will generate ‘ssh -xyz user@linux.host.com’ instead of ‘ssh -xyz linux.host.com’ in case your windows userid isn’t the same as the Linux id on the SAS server (mine’s not); if it is, you don’t need this. You could use the identity option, above, too. Just another choice. (Optional: integer) The ssh port of the remote machine (equivalent to invoking ssh with the option). Obviously, 22 is the default (Optional: integer) Certain methods of saspy require opening a local port and accepting a connection and data streamed from the SAS instance to saspy. If the remote SAS server would not be able to reach ports on your client machine due to a firewall or other security configuration, you may pass a port number to used for SAS to connect to on the remote side, which will be forwarded to the local side (using the ssh option) so that the remote SAS server can connect using this port. (Optional: integer) Certain methods of saspy require opening a remote port and allowing a connection to be made and data streamed to the SAS server from saspy; the Reverse of the tunnel case. In these cases, saspy needs to provide a port for the SAS server to use to accept a connection so data can be streamed to the SAs server. This is simply the reverse of the tunnel case, where SAS creates the socket and saspy connects. This will use the ssh option so that the saspy can connect to the remote SAS server on this port. This is a rarely needed options for providing the ip of the client machine (where SASPy/python is running). Normally this is resolved by gethostname() but in the case where the ip from that isn’t correct, you can override it by providing the ip here. The only case this has been seen is on a home network with no domains nor dns, such that a local machine name (‘MyPC’) ends up resolved to some arbitrary internet ip (i.e.: 128.64.32.16), not the actual local ip (i.e.: 10.0.0.10). This is the fully qualified path of the sshpass command. the key is still required, as ssh is still being executed and has to be in the full command. But this allows the use of user/pw connections instead of rsa keys. This is a Python List containing the parms you want to use for sshpass. The three primary choices are to provide the password on the command line (it’s xxx’ed out when looking at the system processes), or from a file or from an environment variable. Check the main page on sshpass. ie: ‘sshpassparms’ : [‘-f’, ‘/file/with/pw/in/it’] The key is the trigger to use the STDIO over SSH connection method.\n\nThis connection method opens many connectivity options. This method enables you to connect to any Workspace server on any supported platform. It requires Java 7 or higher to be installed on your Client machine (where you’re running SASPy) This supports connecting to Workspace servers in a SAS/Grid deployment as well. This method, compared to STDIO over SSH, enables SAS Grid Manager to control the distribution of connections to the various grid nodes and integrates with monitoring and administration that SAS Grid Manager provides, as well as providing client side High Availability (HA) by supporting load balanced object spawners. The IOM connection method also enables you to connect to SAS from a Windows client (STDIO was Linux only). The connection can be to a local SAS installation or a remote IOM Workspace server running on any platform, including MVS. The IOM protocol (SAS 9’s client/server interface protocol) supports different forms of authentication. This Access Method supports connecting to a Workspace Server on any host, as well as connecting to a Local SAS install of PC SAS on that same PC. There are 3 authentication mechanisms that are supported, for various configurations, and one mechanism which is not supported, as it requires a connection to the metadata server to acquire a Token for authenticating. user/pw and IWA are for Remote connections, while a Local Windows connection does authenticating based upon the user you’re logged into the PC as. SAS Token authentication is not supported. Which authentication mechanism you use depends upon how the Workspace server was configured by your SAS admins.\n• this is for providing your metadata credentials as user and password. SASPy has a number of ways for you to provide these. See below for more information on that.\n• This configuration allows a client on Windows (doesn’t work with a Linux client) to be authenticated to a Workspace server (the server can be on any host for this) based upon who you are logged into your PC as. No credentials or other configuration is needed. It’s like single signon. It does require access to the sspiauth.dll by havnig the directory where that files lives, in the System PATH so that it can be found. See below for more info on that; namely the sspi key in the configuration definition.\n• Connecting to a Local SAS deployment (not a metadata server) from SASPy on the same PC also requires authentication, but like IWA, it does this for you based upon the user you’re logged in as. It does require access to the sspiauth.dll by having the directory where that files lives, in the PATH so that it can be found. You don’t need the sspi key, as this is the only authentication mechanism, so it happens by default.\n• SASPy does not connect to a Metadata server, so this form of authentication is not supported. Update to this for SASPy V4.0.0: Replacing the versions with 2.17.1 and 2.12.4 now, as they are currently the latest fix versions. There are a number of vulnerabilities in log4j and Apache provided new releases of log4j to address these. At the time of this writing (SASPy V3.7.8), 2.16.0 was the current newest release that fixed these, and 2.12.2 was added to address them in a version that still supports Java 7. But the current versions are now 2.17.1 and 2.12.4. SASPy still provides support for Java 7 so both 2.12.4 and 2.17.1 are included in the SASPy deployment. SASPy configures the classpath by default and uses the 2.12.4 jars to maintain compatibility with Java 7. There is a new configuration definition key, ‘log4j’, that can be used to cause SASPy to use the 2.17.1 version instead. If there is another version you want to use, it can be done by providing the ‘classpath’ key to override the classpath SASPy would generate, specifying whichever log4j jar file you want to use (you have to provide the files themselves). Note that if doing this, you should use the same classpath as SASPy generates, just replacing the log4j jar files with the ones you want to use. Also note that SASPy does NOT expose any of the log4j vulnerabilities because it doesn’t use log4j and doesn’t even initialize it in its Java process it spawns for the IOM client. So none of the various log4j vulnerabilities are exposed via the SASPy client. ATTN, as of saspy version 3.3.3, the classpath is no longer required in your configuration file!¶ The 4 required IOM Java client jars are now included in the saspy repo, and they, along with the saspyiom.jar and the thirdparty CORBA jars will be automatically provided as the classpath by saspy. This is generally all that is needed. If you require the 3 encryption jars, shown below, they still need to be acquired from your SAS deployment, and then put in the saspy/java/iomclient directory of the saspy install (where the 4 included jars are) so they will be included in the classpath for you. ATTN: SAS ODA Users!! SAS/On Demand for Academics (ODA) has recently upgraded their SAS server environment to use SAS 9.40M7! This means that the 3 encryption jars are now required in order to be able to connect; they use AES encryption, and even with Java 8, you can no longer connect without these jars in the deployment. Since you don’tnecessarily have a SAS deployment to get these jars from, you can download them from the following location. Download, unzip and then copy them to the java/iomclient directory of the SASPy deployment, as explained above. Encryption jar download: https://support.sas.com/downloads. Note that for AES encryption, at least prior to SAS 9.4M7, Java 8 (release greater than 151), has the needed support in it, so if your workspace server is configured for AES, just having a current version of Java 8 or higher will allow it to work, without needing the 3 encryption jars. That doesn’t work w/ M7 however, so you would need the encryption jars when connecting to M7. As noted inthe section above, you simply need to copy these 3 jars into the saspy/java/iomclient directory of the saspy install location (where the 4 included jars are) so they will be included in the classpath for you. The 3 encryption jars, if needed, can be found in a SAS deployment in a location similar to, but not exactly the same as, the following. If you get any error about encryption, adding these 3 jars is the proper way to address it. The IOM and HTTP access methods have support for getting the required user/password from an authinfo file in the user’s home directory instead of prompting for it. On linux, the file is named .authinfo and on windows, it’s _authinfo. The format of the line in the authinfo file is as follows. The first value is the authkey value you specify for . Next is the ‘user’ key followed by the value (the user id) and then ‘password’ key followed by its value (the user’s password). Note that there are permission rules for this file. On linux the file must have permissions of 600, only the user can read or write the file. On Windows, the file should be equally locked down to where only the owner can read and write it. Also, the encoding of this file should be UTF-8, or any encoding that has ASCII as it’s low order 7-bits if you only use those characters in the file. It’s read into Python as is, and thus is expected to be utf-8. So, for a Configuration Definition that specifies the following authkey: The authinfo file in the home directory for user Bob, with a password of BobsPW1 would have a line in it as follows: A remote connection is defined as a connection to any Workspace Server on any SAS platform from either a Unix or Windows client. This module does not connect to a SAS Metadata Server (OMR), but rather connects directly to an Object Spawner to get access to a Workspace Server. If you already access these with other SAS clients, like Enterprise Guide (EG), you may already be familiar with connecting to OMR, but not directly to the others by host/port. There is information in the Advanced topics section titled Using Proc Iomoperate to find Object Spawner hosts and Workspace Server ports to get values for the three keys defined below (iomhost, iomport, appserver). The following keys are available for the configuration definition dictionary: (Required) The path to the Java executable to use. For Linux, use a fully qualifed path. On Windows, you might be able to simply enter . If that is not successful, enter the fully qualified path. (Required) The port that object spawner is listening on for workspace server connections (workspace server port - not object spawner port!). SASPy, as of V4.0.0 now uses V2.12.4 log4j (by default) to mitigate the vulnerabilities found in Dec 2021. V2.17.1 is also included in the deployment, but it doesn’t support Java 7. ‘2.12.4’ and ‘2.17.1’ are the 2 valid values for this key, to chose which version to use. (No longer Required) As of V3.3.3 this is no longer required. See instuctions above (ATTN, as of saspy version 3.3.3, the classpath is no longer required!) Note that you can still provide this and override the classpath SASPy generates, but that is not recommended under any normal circumstance. The keyword that starts a line in the authinfo file containing user and or password for this connection. (Discouraged) The user ID is required but if this field is left blank, the user is prompted for a user ID at runtime, unless it’s found in the authinfo file. (Strongly discouraged) A password is required but if this field is left blank, the user is prompted for a password at runtime, unless it’s found in the authinfo file. NOTE: as of saspy V2.4.2, you no longer need to set the encoding. SASpy will determine the SAS session encoding and map that to the Python encoding for you. You can set this to eliminate the message, at connection time, about what encoding was determined. This is the Python encoding value that matches the SAS session encoding of the IOM server to which you are connecting. The Python encoding values can be found at encodings-and-unicode. The three most common SAS encodings, UTF8, LATIN1, and WLATIN1 are the default encodings for running SAS in Unicode, on Unix, and on Windows, respectively. Those map to Python encoding values: utf8, latin1, and windows-1252, respectively. Timeout value for establishing connection to workspace server If you have more than one AppServer defined on OMR, and one object spawner is configured to start workspace servers from multiple Appservers, then you may need to pass the name of the physical workspace server (as defined in metadata) that you want to connect to, i.e.: ‘SASApp - Workspace Server’. Without this the Object spawner will only try the first one in the list of app servers it supports. Note that this needs to be the exact string that is the Name for this server in metadata. Generally the pattern follows: ‘{} - Workspace Server’.format(‘name you gave it’). The object spawner compares these strings as is, so spaces and case matter. If your object spawner only starts one workspace server, then there’s no chance of mixing up which one, and then this option isn’t needed. New in 2.17, there is support for IWA (Integrated Windows Authentication) from a Windows client to remote IOM server. This is only for when your Workspace server is configured to use IWA as the authentication method, which is not the default. This is simply a boolean, so to use it you specify ‘sspi’ : True. Also, to use this, you must have the path to the spiauth.dll file in your System Path variable, just like is required for Local IOM connections. See the second paragraph under Local IOM for more on the spiauth.dll file. This is a string of SAS code that will be submitted upon establishing a connection. You can use this to preassign libraries you always want available, or whatever you want. Don’t confuse this with the autoexec option of SAS which specifies a sas program file to be run. That is different. This is a string of SAS code saspy will submit after the session is created, which would be after SAS already included any autoexec file if there was one. The javaparms option allows you to specify Java command line options. These aren’t generally needed, but this does allows for a way to specify them if something was needed. An integer specifying the record length for transferring wide data sets from SAS to Data Frames. This is a new key to support Zeppelin (saspy V2.4.4). The values can be either ‘jupyter’ or ‘zeppelin’. The default when this is not specified is ‘jupyter’. Jupyter uses IPython to render HTML, which is how saspy has always worked. To support other Notebooks display methods, different display interface have to be added to saspy. If you want to run saspy in Zeppelin, set this in your configuration definition: ‘display’ : ‘zeppelin’, Databricks: At some point since trying to support Databricks, they finally added support for IPython, which is how Jupyter renders HTML. Now the default (Jupyter) display value works as is on Databricks. In V5.4.4, I’ve changed the code path for display=’databricks’ to just use the default Jupyter path and that finally works on that platform. So, the following paragraph is now moot (leaving it here for context). As of version 3.1.7, I added ‘databricks’, but it turns out their method for rendering html can only be executed from a cell in their notebook; meaning you have to type it in and pass it the string of html for it to render. I have an open issue with them. see issue 266 for details on this. not needed normally This is a new key, as of version 3.1.9, to address a bug in the data step in the M5 maintenance release. This bug affects the code generated in the sasdata2dataframe method of this access method. It’s only is a problem if connected to SAS 9.4M5 and if the data set has multi-byte data. Setting this key to True will cause different code to be generated to work around this problem. See the description of V3.1.9 here for more info: https://github.com/sassoftware/saspy/releases/tag/v3.1.9 boolean, default False, causes the SASLOG returned from the submit methods to be HTML instead of text (str) and to have ERROR:, WARNING: and NOTE: lines colorized like in other SAS UI’s. # Unix client and Unix IOM server NEW 2.1.6 - with load balanced object spawners # Windows client and with IWA to Remote IOM server A local connection is defined as a connection to SAS that is running on the same Windows machine. You only need the following configuration definition keys. (Do not specify any of the others). There is one additional requirement. The sspiauth.dll file–also included in your SAS installation–must be in your system PATH environment variable, your java.library.path, or in the home directory of your Java client. You can search for this file in your SAS deployment, though it is likely in SASHome\\SASFoundation\\9.4\\core\\sasext. If you add this to the system PATH environment variable, only list the path to the directory–do not include the file itself. For example: An alternative to puting this directory in your PATH, is to add it at runtime. You can add this to your sascfg_personal.py file, or even submit it before importing saspy and trying to make a conection. Obviously, use the correct path for your system: (Required) The path to the Java executable to use. SASPy, as of V4.0.0 now uses V2.12.4 log4j (by default) to mitigate the vulnerabilities found in Dec 2021. V2.17.1 is also included in the deployment, but it doesn’t support Java 7. ‘2.12.4’ and ‘2.17.1’ are the 2 valid values for this key, to chose which version to use. (No longer Required) As of V3.3.3 this is no longer required. See instuctions above (ATTN, as of saspy version 3.3.3, the classpath is no longer required!) Note that you can still provide this and override the classpath SASPy generates, but that is not recommended under any normal circumstance. NOTE: as of saspy V2.4.2, you no longer need to set the encoding. SASpy will determine the SAS session encoding and map that to the Python encoding for you. This is the Python encoding value that matches the SAS session encoding of the IOM server to which you are connecting. The Python encoding values can be found at encodings-and-unicode. The three most common SAS encodings, UTF8, LATIN1, and WLATIN1 are the default encodings for running SAS in Unicode, on Unix, and on Windows, respectively. Those map to Python encoding values: utf8, latin1, and windows-1252, respectively. This is a string of SAS code that will be submitted upon establishing a connection. You can use this to preassign libraries you always want available, or whatever you want. Don’t confuse this with the autoexec option of SAS which specifies a sas program file to be run. That is different. This is a string of SAS code saspy will submit after the session is created, which would be after SAS already included any autoexec file if there was one. The javaparms option allows you to specify Java command line options. These aren’t generally needed, but this does allows for a way to specify them if something was needed. An integer specifying the record length for transferring wide data sets from SAS to Data Frames. This is a new key to support Zeppelin (saspy V2.4.4). The values can be either ‘jupyter’ or ‘zeppelin’. The default when this is not specified is ‘jupyter’. Jupyter uses IPython to render HTML, which is how saspy has always worked. To support other Notebooks display methods, different display interface have to be added to saspy. If you want to run saspy in Zeppelin, set this in your configuration definition: ‘display’ : ‘zeppelin’, Databricks: At some point since trying to support Databricks, they finally added support for IPython, which is how Jupyter renders HTML. Now the default (Jupyter) display value works as is on Databricks. In V5.4.4, I’ve changed the code path for display=’databricks’ to just use the default Jupyter path and that finally works on that platform. So, the following paragraph is now moot (leaving it here for context). As of version 3.1.7, I added ‘databricks’, but it turns out their method for rendering html can only be executed from a cell in their notebook; meaning you have to type it in and pass it the string of html for it to render. I have an open issue with them. see issue 266 for details on this. not needed normally This is a new key, as of version 3.1.9, to address a bug in the data step in the M5 maintenance release. This bug affects the code generated in the sasdata2dataframe method of this access method. It’s only is a problem if connected to SAS 9.4M5 and if the data set has multi-byte data. Setting this key to True will cause different code to be generated to work around this problem. See the description of V3.1.9 here for more info: https://github.com/sassoftware/saspy/releases/tag/v3.1.9 boolean, default False, causes the SASLOG returned from the submit methods to be HTML instead of text (str) and to have ERROR:, WARNING: and NOTE: lines colorized like in other SAS UI’s. Yes, you can even connect to a SAS server running on MVS (Mainframe SAS). There are a couple of requirements for this to work right. First, you need version 2.1.5 or higher of this module. There were a couple tweaks I needed to make to the IOM access method and those are in 2.1.5. Also, you need to use the HFS file system for the WORK (and/or USER) library and you also need to set the default file system to HFS so temporary files used by this module use HFS instead of the native MVS file system. You can still access the native file system in the code you run, but for internal use, this module needs to access the HFS file system. To set the default file system (options filesystem=hfs;) you can either set it in the workspace severs config file, or you can submit the options statement from your python code after making a connection: Or better yet, use the autoexec configuration option so it’s always set and you don’t have to think about it! The other thing is to set the encoding correctly for this to work. MVS is an EBCDIC system, not ASCII. For the most part, this is all handled in IOM for you, but for data transfer routines, transcoding is required. The default encoding on MVS is OPEN_ED-1047, although it can be set to any number of other EBCDIC encodings. The default Python encodings do not include the 1047 code page. I did find a ‘cp1047’ code page in a separate pip installable module which seems to match the OPEN_ED-1047 code page. So if you’re running with that encoding, you can install the cp1047 to use. Having the key is the trigger to use the IOM access method. When using the IOM access method ( key specified), the absence of the key is the trigger to use a local Windows session instead of remote IOM (it is a different connection type).\n\nThis is the access method for Viya. It does not connect to SAS 9.4. This access method accesses the Compute (micro) Service of a SAS Viya deployment. The Compute Service launches Compute Servers, which are MVA SAS sessions found in the SPRE deployment of the Viya installation. This is the equivalent of an IOM Workspace server, but in a Viya deployment. So, it is still connecting to MVA SAS and all of the methods behave the same as they would with any other saspy access method. There are continuing to be new ways invented to authenticate to Viya. Originally it was user/pw like anything else. More recently, an SSO method was created. More recently than that is integration w/ Azure, providing the ability to pass an Azure token in, to get a Viya token. Actually, this method should allow any JWT Bearer Token to be passed in and used, assuming it’s configured to be valid in Viya. The various configuration keys are provided below, but I wanted to identify them here, as they are mutually exclusive. You use only one of the various means to authenticate.\n• the keys for this are either ‘user’ and ‘pw’, or use ‘authkey’ to identify them from in an authinfo file.\n• The primary key in ‘authcode’ which is a onetime token acquired from a call to SASLogon, as a two factor authentication scheme. The ‘client_id’ and ‘client_secret’ are also required, although a special client_id has been created by default in Viya deployments for SASPy, and I will default to that unless you provide other client info that an administrator created and provided you to use.\n• None Azure JWT (actually, any JWT perhaps, in the future) BEING DEPRECATED - Viya has decided to remove this authentication mechanism for SASPy; when using the SASPy client_id. To still use `jwt` you have to define your own client in Viya and provide that via `client_id` along with `client_secret` and the jwt. ‘jwt’ is the key to provide that non-Viya Bearer Token, to then pass through to SASLogon to get the Viya Bearer Token to use. And these tokens, are just big long strings; thousands of bytes long strings of random characters (so you know you’re passing in the right thing).\n• All of the previous authentication mechanisms are used to have SASPy acquire the Viya Auth Token. You can, actually, do all of that yourself via various Rest API’s. If you do that, then you can just pass in the Viya Auth Token, and even the refresh token too, and I’ll skip the auth process and just use your tokens; Bob’s your uncle, as they say. The key for this is ‘authtoken’, and optionally, ‘refreshtoken’. Again, only use one of these and don’t mix using config keys from more than one for a given connection. Support for having Viya behind a proxy server was added in version 4.5.0. The key is used to provide the host and port. I had a request from a customer to add support for authenticating to the proxy server itself, before then authenticating to Viya. Support for this was added in version 5.2.0; for authenticating to the proxy via user/pw. There are new configuration definition keys to support this; , and . To use this you must specify or . Since normally this is not required, the only way to enable prompting for both user/pw is to provide that isn’t actually in the authinfo file, then when not found, you will be prompted for user and pw. Alternately, if you provide , but neither nor , this will just prompt you for the . When Viya is configured to use TLS (HTTPS not HTTP), then the expectation is that the CA Certificate from the Viya deployment must match with those on the client side. The easy way is to make Viya use existing CA Certs that your site already has, then it all works and HTTPS can verify the certs and establish a trusted connection. All of this is Viya administration work, nothing an end user needs to deal with. However, if your site uses Certificates from Viya, then the Viya Certificate (a .pem file) must be downloaded and then the contents of that .pem file be appended to the existing default .pem certificate that your client machine already uses so that the HTTPS connection can Verify the certificate against theViya deployment. There’s some doc in the admin guide about this (https://go.documentation.sas.com/doc/en/sasadmincdc/default/calencryptmotion/n1xdqv1sezyrahn17erzcunxwix9.htm#p1umnmdi53qfjnn17wqb5aqb8ncx) but again, that’s not something an end user needs to read. It does mean that the Viya admin team should be able to get you the .pem file from Viya for you to save on your client machine. Since appending it to the default .pem file used by https on your machine is likely something you can’t do anyway (some sites have IT set all of this up so you don’t have to), there is a new configuration key with which you can specify the full path to this .pem file and that will make https use that certificate to Verify that client certificate against Viya’s server certificate when making the connection. If the Certificate can’t be verified, or you don’t have this certificate, the default certificate can be used, just not verified, and will still provide TLS Encryption. The original certificates in older Viya deployments were just self-signed certificates and thus couldn’t be verified (thus the need for the key below to get rid of the message about that). If you set Verify to True, then if the certificate can’t be verified the connection fails. False just connects without trying to verify it. And the default is still to try but if it can’t be verified then connect unverified. In any case, Encryption is still enabled. The key is new in release 5.1.0. The keys for this configuration definition dictionary are: (Required if ip not specified) The URL to Viya, of the form ‘http[s]://host.identifier[:port]’. When this is specified, ip= will not be used, as the host’s ip is retrieved from the url. Also, ssl= is set based upon http or https and port= is also parsed from the url, if provided, else defaulted based upon the derived ssl= value. So neither ip, port nor ssl are needed when url= is used. (Optional) If your Viya deployment is behind a proxy server, provide for the proxy, using this keyword. [Deprecated] (Required if url not specified) The resolvable host name, or IP address to the Viya Compute Service [Deprecated] The port to use to connect to the Compute Service. This will default to either 80 or 443 based upon the ssl key. [Deprecated] (Optional) Boolean identifying whether to use HTTPS (ssl=True) or just HTTP. The default is True and will default to port 443 if the port is not specified. If set to False, it will default to port 80, if the port is not specified. Note that depending upon the version of python, certificate verification may or may not be required, later version are more strict. See the python doc for your version if this is a concern. specifies the location of the Viya CA Certificate your Viya admin provided from the Viya deployment so the client HTTPS connection can verify the CA against the Viya server. Not needed if that certificate has been incorporated into your default certificate used on your client machine. (Optional) Also note that if Viya uses the default self-signed ssl certificates it ships with, you will not be able to verify them, but that can be fine, and you can still use an ssl connection. You can use set ‘verify’ : False, in your config to turn off verification for this case. [for SSO Viya configurations] client_id to use for authenticating to Viya (defaults to ‘SASPy’) [for SSO Viya configurations] client_secret to use for authenticating to Viya (defaults to ‘’) [for SSO Viya configurations] one time authorization code acquired via the SASLogon oauth service where the url to get the code would be [url]/SASLogon/oauth/authorize?client_id=[client_id]&response_type=code so perhaps: https://SAS.Viya.sas.com/SASLogon/oauth/authorize?client_id=SASPy&response_type=code (Optional) The keyword that starts a line in the authinfo file containing user and or password for this connection. See the IOM using Java above for more info. (Discouraged) The user ID is required but if this field is left blank, the user is prompted for a user ID at runtime, unless it’s found in the authinfo file. (Strongly discouraged) A password is required but if this field is left blank, the user is prompted for a password at runtime, unless it’s found in the authinfo file. (Optional) The keyword that starts a line in the authinfo file containing user and or password for authenticating to the provided server. (Optional) The user ID for authenticating to the provided server. (Optional) The password for authenticating to the provided server. The Compute Service has different Contexts that you can connect to. Think Appserver in IOM. if you don’t provide one here, saspy will query the Service upon connecting and get a list of available Contexts and prompt you for which one to use. (Optional) HTTPConnection timeout value, in seconds. Defaults to None. This is passed to HTTPConnection; it’s not part of the Viya API but rather the http.client API. (Optional) SAS options to include when connecting. These must be a Python list. (Ignored) Unlike the other access methods, the HTTP API to the Compute Service uses UTF-8 for all calls. So, no transcoding is necessary, nor done, on the Python side, so this option is not needed and ignored. (Optional) This is a string of SAS code that will be submitted upon establishing a connection. You can use this to preassign libraries you always want available, or whatever you want. Don’t confuse this with the autoexec option of SAS which specifies a sas program file to be run. That is different. This is a string of SAS code saspy will submit after the session is created, which would be after SAS already included any autoexec file if there was one. (Optional) An integer specifying the record length for transferring wide data sets from SAS to Data Frames. This is a new key to support Zeppelin (saspy V2.4.4). The values can be either ‘jupyter’ or ‘zeppelin’. The default when this is not specified is ‘jupyter’. Jupyter uses IPython to render HTML, which is how saspy has always worked. To support other Notebooks display methods, different display interface have to be added to saspy. If you want to run saspy in Zeppelin, set this in your configuration definition: ‘display’ : ‘zeppelin’, Databricks: At some point since trying to support Databricks, they finally added support for IPython, which is how Jupyter renders HTML. Now the default (Jupyter) display value works as is on Databricks. In V5.4.4, I’ve changed the code path for display=’databricks’ to just use the default Jupyter path and that finally works on that platform. So, the following paragraph is now moot (leaving it here for context). As of version 3.1.7, I added ‘databricks’, but it turns out their method for rendering html can only be executed from a cell in their notebook; meaning you have to type it in and pass it the string of html for it to render. I have an open issue with them. The SASLogon authorization token to use instead of acquiring one via user/pw or authcode or jwt. Normally SASPy calls SASLogon to authenticate and get this token. But, if you do that yourself, you can just pass it in. These tokens, for reference, are very long strings of random characters; just so you know that you’re using the right thing :) If you are providing the Authtoken yourself you should also have access to the Refreshtoken, acquired when you got the Authtoken from SASLogon. Provide that token so SASPy can refresh your access token before it expires. A JWT bearer token that can be used to acquire a SASLogon authorization token. This would be something like an Azure token, where Azure and Viya have been set up to allow the JWT to be used to get a SASLogon token. These tokens, for reference, are very long strings of random characters; just so you know that you’re using the right thing :) boolean, default False, causes the SASLOG returned from the submit methods to be HTML instead of text (str) and to have ERROR:, WARNING: and NOTE: lines colorized like in other SAS UI’s. Having the (or ) key is the trigger to use the HTTP access method.\n\nNew in 3.1.0, this user contributed access method uses Windows COM to connect to the SAS IOM provider. It is similar to the other IOM access method, but there is no Java dependency. Connections from Windows clients to local and remote SAS 9.4 hosts are supported. Please note that because this Access Method is user contributed and uses 3rd party modules to perform most of its functionality, I can’t fully support all of the functionality and performance characteristics in this access method that I provide in the other access methods I wrote. There have been lots of improvements since this was contributed, many of which I couldn’t factor into this method. The IOM access method is the preferred, fully supported method, but you can use this if it does what you need from it. SAS Enterprise Guide or SAS Integration Technologies Client (a free download from SAS support) is required to install the SAS COM library on your client system. The COM access method requires a Python module that saspy, in general, does not; pypiwin32 If you do not have this already installed before trying to use the COM access method, you will likely see an error similar to this when trying to establish a connection. Just install that modules to solve this. File , line , in File , line , in File , line , in File , line , in : name 'dynamic' is not defined To connect to a remote SAS server, you must specify the IOM host name and port number. The Class Identifier is also required, but is a constant which will be prpvided on your behalf (starting in V3.1.4). The Class Identifier is a 32-character GUID that indicates the type of SAS server to connect to; in this case Workspace Server. To connect to a local SAS instance, do not specify the paramter. Local connections do not require a host, port, class_id. Any specified port or class_id parameters will be ignored. Likewise, and provided username or password values are ignored on local connections. The resolvable host name, or IP address to the IOM object spawner. Only required for remote connections. Don’t specify for local connections. The port that object spawner is listening on for workspace server connections (workspace server port - not object spawner port!). Only required for remote connections. Don’t specify for local connections. This value turns out to be a constant which hasn’t changed in years and probably never will. So, you shouldn’t need to specify this. The value of ‘440196d4-90f0-11d0-9f41-00a024bb830c’ will be used by default. Though you can specify it explitly here to override the default; but you should never need to. The IOM workspace server class identfier. Use to identify the correct value for your configuration. (Required) The SAS IOM Data Provider is an OLE DB data provider that supports access to SAS data sets that are managed by SAS Integrated Object Model (IOM) servers. The ‘sas.iomprovider’ provider is recommended. The keyword that starts a line in the authinfo file containing user and or password for this connection. See the IOM using Java above for more info. (Discouraged) The user ID is required but if this field is left blank, the user is prompted for a user ID at runtime, unless it’s found in the authinfo file. (Strongly discouraged) A password is required but if this field is left blank, the user is prompted for a password at runtime, unless it’s found in the authinfo file. NOTE: as of saspy V2.4.2, you no longer need to set the encoding. SASpy will determine the SAS session encoding and map that to the Python encoding for you. This is the Python encoding value that matches the SAS session encoding of the IOM server to which you are connecting. The Python encoding values can be found at encodings-and-unicode. The three most common SAS encodings, UTF8, LATIN1, and WLATIN1 are the default encodings for running SAS in Unicode, on Unix, and on Windows, respectively. Those map to Python encoding values: utf8, latin1, and windows-1252, respectively. boolean, default False, causes the SASLOG returned from the submit methods to be HTML instead of text (str) and to have ERROR:, WARNING: and NOTE: lines colorized like in other SAS UI’s. Having the key is the trigger to use the COM (IOM using COM) access method. When using the COM access method ( key specified), the absence of the key is the trigger to use a local Windows session instead of remote IOM (it is a different connection type)."
    }
]