[
    {
        "link": "https://jetbrains.com/help/pycharm/configuring-colors-and-fonts.html",
        "document": "As a developer, you work with a lot of text resources: the source code in the editor, search results, debugger information, console input and output, and so on. Color and font styles are used to format this text and help you better understand it at a glance.\n\nPyCharm lets you choose between configurable color schemes that define colors and fonts used in IDE text.\n\nYou can use a predefined color scheme or customize it to your liking. It is also possible to share schemes.\n\nAmong the predefined color schemes are:\n• None High Contrast: designed for the High contrast interface theme (recommended for users with sight deficiency)\n• None Classic Light: designed for the macOS Light and Windows 10 Light interface themes\n\nYou can customize a predefined color scheme, but it is recommended that you create a duplicate for your custom color and font settings:\n\nTo define color and font settings, open the Editor | Color Scheme settings page .\n\nThe settings under Editor | Color Scheme are separated into sections. For example, the General section defines basic editor colors, such as the gutter, line numbers, errors, warnings, popups, hints, and so on. The Language Defaults section contains common syntax highlighting settings, which are applied to all supported programming languages by default.\n\nIn most cases, it is sufficient to configure Language Defaults and make adjustments for specific languages if necessary. To change inherited color settings for an element, clear the Inherit values from checkbox.\n\nBy default, the color scheme defines syntax highlighting for reserved words and other symbols in your source code: operators, keywords, suggestions, string literals, and so on. If you have a function or method with many parameters and local variables, it may be hard to distinguish them from one another at a glance. You can use semantic highlighting to assign different random colors to each parameter and local variable.\n• None Press to open settings and then select Editor | Color Scheme | Language Defaults | Semantic highlighting.\n• None Select Semantic highlighting and customize the color ranges if necessary. This will enable semantic highlighting for all languages that inherit this setting from Language Defaults. To enable it for a specific language instead (for example, Python), go to the Editor | Color Scheme | Python | Semantic highlighting settings page , clear the Inherit values from checkbox, and select the Semantic highlighting checkbox.\n\nIf you are used to a specific color scheme, you can export it from one installation and import it to another one. You can also share color schemes with other developers. . PyCharm can save your color scheme settings as an XML file with the .icls extension. You can then import the file to another installation.\n• None Press to open settings and then select Editor | Color Scheme.\n• None From the Scheme list, select a color scheme, click , then click Export and select IntelliJ IDEA color scheme (.icls).\n• None Specify the name and location of the file and save it. The plugin can be uploaded to the plugin repository for others to install. This format has several benefits over an XML file, including metadata, feedback, download statistics, and versioning (when you upload a new version of the plugin, users will be notified about it).\n• None Press to open settings and then select Editor | Color Scheme.\n• None From the Scheme list, select a color scheme, click , then click Export and select Color scheme plugin .jar.\n• None In the Create Color Scheme Plugin dialog, specify the version details and vendor information. Then click OK. When you install a plugin with a color scheme, that scheme will be added to the list of predefined schemes.\n• None Press to open settings and then select Editor | Color Scheme.\n• None From the Scheme list, select a color scheme, click , then click Import Scheme.\n\nThis font will be used and inherited in all color schemes by default.\n• None Press to open settings and then select Editor | Font.\n• None Select the font from the Font list. For more information, refer to Font. Set a different font for your current scheme if necessary. This is not recommended if you are planning to share your scheme or use it on other platforms that may not support the selected font. In such cases, use the default global font settings.\n• None Press to open settings and then select Editor | Color Scheme | Color Scheme Font.\n• None Select the Use color scheme font instead of the default checkbox. For more information, refer to Color Scheme. To configure the font used in the PyCharm interface (tool windows, toolbars, menus), open the IDE settings , and go to Appearance & Behavior | Appearance. From the Use custom font list, select a font and specify the font size in the Size field. For more information, refer to Appearance. By default, the text in the console uses the same font as the color scheme. To use a different font in the console:\n• None Press to open settings and then select Editor | Color Scheme | Console Font.\n• None Select the Use console font instead of the default checkbox. PyCharm can use any font that is available in your operating system or in the Java runtime that is used to run PyCharm. If you want to add another font, you need to install it in your OS, and PyCharm will discover it after a restart.\n• None Download the desired TTF font package and unzip it to extract font files (.ttf ). For the font to work correctly, it should have at least 4 files: Normal, Bold, Italic, and Bold Italic.\n• None Depending on your operating system, do one of the following: Select all font files, right-click the selection, and choose Install. Select all font files, double-click the selection to open the Font Book preview, then click Install Font at the bottom. Unpack fonts to ~/.local/share/fonts for the current user or to /usr/share/fonts to install fonts system-wide, and then run .\n• None Restart PyCharm and then select the installed font on the Editor | Font settings page .\n\nSee the color scheme settings for the current symbol\n• None Place the caret at the desired symbol, press , find the Jump to Colors and Fonts action, and execute it. This will open the relevant color scheme settings for the symbol under the caret. See which fonts are currently used in the editor\n• None Press , find the Show Fonts Used by Editor action, and execute it. This opens the Fonts Used in Editor dialog with a list of fonts.\n• None Press or select View | Quick Switch Scheme from the main menu.\n• None In the Switch popup, select Editor Color Scheme, and then select the desired color scheme. Neither the Jump to Colors and Fonts nor the Show Fonts Used by Editor actions have a default shortcut. To assign a shortcut for an action, select it in the Find Action popup and press ."
    },
    {
        "link": "https://jetbrains.com/help/pycharm/configuring-code-style.html",
        "document": "If certain coding guidelines exist in a company, one has to follow these guidelines when creating source code. PyCharm helps you maintain the required code style.\n\nThe IDE comes with two pre-defined schemes: the Project scheme and the Default scheme.\n• None In the Project scheme, the settings that you configure apply only to your current project. These settings are stored in the codeStyles folder under .idea and are shared through VCS together with the project. The IDE creates the folder after you modify code style settings for your project.\n• None In the Default scheme (IDE-level scheme), the settings that you configure apply to all existing projects that have the Default code style scheme selected. These settings are stored in the codestyles folder under the PyCharm configuration directory and are not shared through VCS.\n\nIf you want to use the project code style scheme as your default scheme, you can copy it to the IDE level. The other way around is also possible: you can overwrite your current project settings with the settings from an IDE-level scheme and share them with other members of your team.\n\nIn PyCharm, code style settings are language-specific, so you need to configure them for every language that you use in your project separately. You can also copy the settings from one language and apply them to another language.\n• None Press to open settings and then select Editor | Code Style. To configure a scheme for new projects, go to File | New Projects Setup | Settings for New Projects | Editor | Code Style.\n• None Select the language for which you want to configure the code style.\n• None Select the code style Scheme that you want to configure: the Project scheme or one of the IDE-level schemes. Click next to the Default scheme and select Duplicate to create a copy of the scheme.\n• None Browse through the tabs and configure code style preferences. Use the right section of the dialog to preview the changes. When you change a setting, one or several blinking areas appear in the preview area emphasizing the changes. For most of the supported languages, you can copy code style settings from other languages or frameworks.\n• None Press to open settings and then select Editor | Code Style. To configure a scheme for new projects, go to File | New Projects Setup | Settings for New Projects | Editor | Code Style in the main menu.\n• None Select the language for which you want to configure the code style.\n• None Select the code style Scheme that you want to modify: the Project scheme or one of the IDE-level schemes.\n• None Click Set from in the upper-right corner. The link is shown only if it is possible to apply code style settings from another language.\n• None From the list that appears, select the language to copy the code style from. Only applicable settings are copied from another language, other settings are left intact.\n\nOut of the box, PyCharm allows you to import settings in the IntelliJ IDEA code style XML format.\n• None Press to open settings and then select Editor | Code Style.\n• None In the dialog that opens, select the file with the settings and click Open.\n• None Rename the scheme if necessary and select Current scheme to apply the settings from the scheme to your code. You can export both project-level and IDE-level schemes in the IntelliJ IDEA code style XML or EditorConfig format (if the EditorConfig plugin is enabled).\n• None Press to open settings and then select Editor | Code Style.\n• None Select the code style Scheme that you want to export: the Project scheme or one of the IDE-level schemes.\n• None Click , select Export, select the necessary format, and select the directory to which you want to export your code style settings.\n\nTo use EditorConfig, make sure the EditorConfig plugin is enabled in the settings. Press to open settings and then select Plugins. Click the Installed tab. In the search field, type EditorConfig. For more information about plugins, refer to Managing plugins. PyCharm allows you to manage all code style settings for each individual set of files with EditorConfig support (enabled by default in the Settings dialog ( ) ). All you need to do is place an .editorconfig file in the root directory containing the files whose code style you want to define. You can have as many .editorconfig files within a project as needed, so you can specify different styles for different modules. All options from the .editorconfig file are applied to the directory where it resides as well as all of its sub-directories on top of the current project code style. If anything is not defined in , it's taken from the project settings. All options in the .editorconfig file are divided into the following categories:\n• None Standard options such as , , and so on. These options do not have any domain-specific prefixes.\n• None Generic IntelliJ options that have the prefix and are applicable to all languages:\n• None Common IntelliJ options supported by many (but not all) languages. They start with the prefix, for example, .\n• None IntelliJ language-specific options starting with the prefix where is the language domain ID (normally a low-case language name), for example, . The same options can be defined as a common option and a language-specific option, for example, . Language-specific options have higher priority over common or generic options.\n• None In the Project view, right-click a source directory containing the files whose code style you want to define and choose New | EditorConfig from the context menu.\n• None Select the properties that you want to define so that PyCharm creates stubs for them, or leave all checkboxes empty to add the required properties manually.\n• None To preview how changes to your code style settings will impact the actual source files, click in the gutter of the .editorconfig file and select a source file affected by it. The preview will open on the right. You can make changes in the preview pane to try and test how your configuration changes are reflected without worrying about making unwanted changes to the source code: all these changes are discarded when you close the .editorconfig file."
    },
    {
        "link": "https://jetbrains.com/help/pycharm/python-code-insight.html",
        "document": "Code insight is a common name used for auto-completion, intention actions, type inference, and other techniques related to the code analysis in PyCharm.\n\nThe PyCharm editor respects highlighting of the keywords, comments, parameters, type hints, and other elements. class Car: \"\"\"This class represents a car object.\"\"\" def __init__(self, speed=0): self.speed = speed self.odometer = 0 self.time = 0 # self.passengers = ['Lena', 'Benjamin', 'Tom'] def say_state(self): \"\"\"Prints the current speed in kilometers per hour.\"\"\" print(\"I'm going {} kph!\".format(self.speed)) The particular highlighting colors are defined in the Editor | Color Scheme page of the Settings dialog. With new Python versions, PyCharm supports more specific types and language structures,for example, Python 3.10 specific pattern matching:\n\nPyCharm can find and highlight various problems, locate dead code, find probable bugs, spelling problems, and hint some Python specific improvements, and align the code structure. As soon as the IDE finds a way to improve your code, it displays a yellow bulb icon in the editor next to the current line. You can also press to invoke the context actions menu. For example, you can invert an if statement with a condition. def foo(): return True if foo(): print(\"This is true\") else: print(\"This is false\") For more information, refer to Intention actions.\n\nPyCharm allows you to navigate to a location where a particular named code reference has been first declared. Place the caret at the symbol in the editor and press . Alternatively, use . For more information, refer to the Go to declaration and its type section for details, and the entire Source code navigation section to learn about the other types of navigation.\n\nWhile analyzing your code, you often need to identify the type of a particular expression. Consider the following code: Press and select the target expression from the list. The expression type will be shown in the tooltip. To preview the definition of the selected expression, press and hover over the expression. You can also use Find Action and start typing .\n\nIf your code contains a regular expression, there is an intention action to check it: place the caret at the regular expression and press . The RegExp checker shows up, where you can type the string and check if it matches the regular expression: For more information, refer to this section."
    },
    {
        "link": "https://stackoverflow.com/questions/11299635/how-do-i-turn-on-syntax-highlighting-coloring-in-pycharm",
        "document": "Basically, for whatever reason PyCharm's syntax highlighting/coloring just isn't working; all of the text just appears as plain black. This is despite the fact that according to my editor settings, under IDE Settings -> Editor -> Colors & Fonts -> General the highlighting/coloring does appear to be turned on and defined correctly. Can anyone tell me how to turn this on correctly?"
    },
    {
        "link": "https://jetbrains.com/help/pycharm/code-editing.html",
        "document": "Select this checkbox to have PyCharm highlight pairs of opening/closing braces when you place the caret right before the opening or right after the closing one. It also works for HTML and XML tags.\n\nSelect this checkbox to have PyCharm highlight all usages of the element at which the caret is currently positioned.\n• None Reformatting code: select this checkbox to show a notification with changes in your code and a shortcut to the Reformat Code dialog every time you try to reformat the code. Otherwise, PyCharm will reformat code silently.\n• None Imports optimization: select this checkbox to show notification with changes in your code. Otherwise, PyCharm will optimize imports silently.\n• None In the editor: select this option to enable the in-place refactoring mode for Python. In the in-place mode, you specify all or most of the information necessary for the refactoring just by typing it, right in the editor. All the affected code fragments are highlighted and change as you type. If appropriate, additional refactoring options are selected in corresponding option boxes. The in-place refactoring mode is available for the following refactorings:\n• None In modal dialogs: select this option if you want to use the refactoring dialogs when you refactor code.\n\nIf this checkbox is selected, the old name of a symbol is selected in the editor or in the Rename dialog when the Rename refactoring is invoked for that symbol. If the checkbox is cleared, the symbol to be renamed is not selected.\n\nSelect this checkbox to show quick documentation for the symbol when you move the mouse pointer over it. The quick documentation popup appears after the delay time specified in the Tooltip delay field.\n\nUse this option to specify the delay, with which all editor tooltips appear on mouse hover. Editor tooltips include:\n• None Quick Documentation, which appears if the Show quick documentation on hover option is selected above on this settings page. You can press to invoke this tooltip with the keyboard.\n• None Error description, which appears on highlighted code issues if the design-time code inspection is enabled for the current file. You can press to invoke this tooltip with the keyboard. You can copy the full contents of the tooltip by -clicking it ( -clicking it if you are on Linux)."
    },
    {
        "link": "https://stackoverflow.com/questions/63556047/python-pycharm-error-highlighting-default-setup",
        "document": "I am using PyCharm as my Python IDE.\n\nI have a problem dealing with the error highlighting.\n\nBy default, PyCharm highlights all problems, but there are 2 other options, Syntax and None.\n\nI want to make Syntax as my default highlighting, but I don't know how.\n\nI also want to know how to set all my existing python files (about 40+) to have a highlighting of Syntax too. I can do this one by one individually but I don't know how to do them at once.\n\nThank you for all future answering my questions.\n\nEdited/Added: My question was asking about the 3 options of the error highlighting of the Python IDE named PyCharm for Python 3. I know that the default option is \"All problems\" for all newly-created python files, but what I want to do is to set the default option to be \"Only Syntax\" instead of \"All problems\" for all newly-created python files so that I don't have to change the options manually. It would be great if there is a way to change all the existing python files's error highlighting to be \"Syntax\" from other options."
    },
    {
        "link": "https://stackoverflow.com/questions/11687302/pycharm-not-recognizing-python-files",
        "document": "PyCharm is no longer recognizing Python files. The interpreter path is correctly set.\n\nPlease check | ( on macOS) | | , ensure that file name or extension is not listed in Text files. To fix the problem remove it from the Text files and double check that extension is associated with Python files.\n\nI had a similar problem and none of the answers already submitted helped to resolve it. I eventually discovered that my affected filename was listed in the section in Preferences->Editor->File Types. Removing the filename from there and apply the changes resolved my issue immediately.\n\nI had this same problem. I tried removing the pycharm caches in the ~/Library folders to no avail. Kept saying in the log that \"Some skeletons failed to generate...\"\n• In the project settings click project interpreters and then Configure Interpreters\n• Delete the existing Interpreters (using '-' and bottom) and then click OK at the bottom\n• If you have a project loaded it will say \"You have no interpreter, configure one now. You can click that or go back into preferences->Project Interpreter->Configure interpreters\n• Click the + to add a new interpreter. If you are using the os x built-in python, you can select the version you want from the list.\n• Click Ok again, wait a minute or two for rebuilding indexes and viola it works (for me at least)\n\nThe most common issue is that you have .py in your txt file types The other one that happens every now and again, is that you have associated the actual file name to the txt file type navigate to file->settings->file types->text files and look for .py or the \"file name\" that is being formatted as text\n\nI faced a similar issue on PyCharm 2021.1. As mentioned in the other solutions, the file that was being rendered as a text file was not present in the following menu: The following worked for me instead: Select the file in the editor | File | File properties | Associate with File Type...\n\nTo revive an old conversation here, none of the above answers worked for the newer version of PyCharm due to updates. Upon creating new .py files they were being detected as .txt files and thus not able to run the files, as many others experienced above. I did not get any errors, there was just not any ability to run the file even though it had a .py extension because it was not being detected as a Python file. Here's what works instead now: The only problem with this is if you've added a lot of custom settings you'll have to go back in and add them again."
    },
    {
        "link": "https://jetbrains.com/help/pycharm/troubleshooting-product.html",
        "document": "While working with PyCharm, you might encounter some warning or error messages. This chapter provides the list of the known problem solutions and workarounds.\n\nYou can also find the recommendations for troubleshooting and performing basic diagnostics of your working environment.\n\nA Python interpreter is marked as unsupported in the list of available interpreters in Preferences/Settings | Project | Python Interpreter. The Python version of the marked interpreter is outdated and it is not supported in PyCharm You can delete the unsupported interpreter from the list of the available interpreters. For more information about the supported Python versions, refer to Python Support. You have installed the IdeaVim plugin and thus enabled the vim editing mode. Deselect Vim Emulator on the Tools menu. See Using Vim Editor Emulation in PyCharm for more details. Python code is not highlighted in the Editor. The PY files are associated with the text file format. In the Settings dialog ( ) , navigate to Editor | File Types, select Text from the Recognized File Type list, select *.py from the File Name Patterns list, and click . Code completion action is not available. From the main menu, choose File and clear the Power Save Mode checkbox. Your file doesn't reside in a content root , so it doesn't get the required class definitions and resources needed for code completion. A file containing classes and functions that you want to appear in the completion suggestion list is a plain text file. Reconsider and modify (if needed) the format of your source files. Cannot debug a Docker run/debug configuration; the Debug action is not available. Configure a Docker-based interpreter and debug your Python script in a Docker container. In the Settings dialog ( ) , navigate to Build, Execution, Deployment | Python Debugger and select the Gevent compatible checkbox. Some import errors are reported in your PyQt code. PyQt is installed on the interpreter but is not imported in the application code. In the Settings dialog ( ) , navigate to Build, Execution, Deployment | Python Debugger, and clear the PyQt compatible checkbox in the . This mode is enabled by default. Debugger stops not only when the process terminates with an exception but on each exception thrown (even though it was caught and didn't lead to the process termination). Clear the On raise checkbox in the Breakpoints dialog (Run | View Breakpoints). The following error message appears on your first attempt to attach to a local process: . It a known issue for Ubuntu. Ensure that the kernel parameter is set to 0. You can temporary change its value with the command or set it permanently by adding the line to the /etc/sysctl.d/10-ptrace.conf file. The following error message is shown: Python.h: no such file or directory . You lack header files and static libraries for Python. Use your package manager to install the package system-wide. On Linux and macOS, you can run the following command: To install the package for specific Python version, use . For example: The following error message is shown: Install a C compiler in order to build Cython extensions for the debugger. For more information, refer to the Cython documentation. You have already clicked the Install link in the Cython speedup extensions notification but PyCharm repeatedly prompts to install it. You do not have permissions to write in the directories used by PyCharm. pip is not available for a particular Python interpreter, or any of the installation requirements is not met.\n• None If pip is not available, install it for the required Python interpreter (see the corresponding troubleshooting tip)\n• None Consult product documentation for a specific package to ensure that it can be installed in your operating system and for the target Python interpreter. Also, check if any additional system requirements should be met. File Watchers You might notice the following messages in the Preferences/Settings | Tools | File Watchers window. The File Watcher uses a scope that is not defined in this project. Double-click the watcher and select an available scope or create a new one. The project uses a global File Watcher that was removed. Delete the watcher from the list using the Remove button or edit it to create a new global watcher with the same name. The RFC 4716 format for OpenSSH keys is not supported by PyCharm.\n• None Add the private keys to using the command (see more details at ssh.com)\n• None Repeat the configuration step in the Add Python interpreter dialog.\n• None Add the private keys to using the command (see more details at ssh.com)\n• None In the Settings dialog ( ) , select Build, Execution, Deployment | Deployment, then select your SFTP deployment configuration. Choose OpenSSH Config and authentication agent in the Authentication list. The Profile command is not available in the Run menu.\n• None This functionality is available only in the Professional edition of PyCharm.\n• None The Diagrams plugin that is bundled with PyCharm Professional has been disabled. Check the edition of PyCharm and enable the Diagrams plugin in the plugin settings.\n\nIn some cases, you might need to perform diagnostic steps to identify whether the problem occurs in PyCharm or in your working environment. Below is the list of the useful tips and tricks.\n\nYou are experiencing different behavior of your application when running it in PyCharm and in the Terminal window. Run your script with the python version specified in the PyCharm project settings:\n• None In PyCharm, open the Settings dialog , navigate to Project < project name> | Python Interpreter.\n• None Click nearby the Python Interpreter field and select Show All.... The interpreter you use in your project will be selected in the list of the available interpreters.\n• None Click and copy the path from the Interpreter path field.\n• None Now, run your script in the Terminal window using the copied path\n• None In PyCharm, open the Preferences dialog , navigate to Project < project name> | Python Interpreter.\n• None Click next to the Python Interpreter field and select Show All.... The interpreter you use in your project will be selected in the list of the available interpreters.\n• None Click and copy the path from the Interpreter path field.\n• None Now, run your script in the Terminal window using the copied path If the behavior of your application still differs, contact the support service pycharm-support@jetbrains.com The required package is not installed for a particular Python interpreter. A version of the package installed for a particular Python interpreter is outdated. Run the following commands to install the required package: Once executed, these commands install the latest versions of the specified packages. To install a particular version of the package, use the following expressions:\n• None – installs a greater than the specified or later version of the package\n• None – installs a version that is compatible with the specified version of the package For example, the following command installs Flask compatible with the version 1.0.2: Once executed, these commands install the latest versions of the specified packages. To install a particular version of the package, use the following expressions:\n• None – installs a greater than the specified or later version of the package\n• None – installs a version that is compatible with the specified version of the package For example, the following command installs Flask compatible with the version 1.0.2: When trying to install a package, you discover that pip is not available for a particular Python interpreter. Try to bootstrap pip from the standard library: For more information about pip installation, refer to packaging.python.org"
    },
    {
        "link": "https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000326044-Pycharm-Syntax-Highlighting-not-working",
        "document": "I'm working in Pycharm 2017.1.2 and Syntax Highlighting in some of my projects is very inconsistent, especially for function/method/class definitions which often appear with no highlighting at all.\n\nHow should I troubleshoot this?"
    },
    {
        "link": "https://discuss.python.org/t/script-works-perfectly-random-error-in-pycharm/19362",
        "document": "I’m half afraid to ask, but, why am I getting a random error. It works perfectly, sometimes it shows an error and sometimes PyCharm is happy with the script. Always works correctly. The program is long as it has a big dictionary in it. If needed I can post the full program. This is an isolated group of code, sorting the dictionary values into a new dictionary 'hex_dictionary, so it is ordered by low to high color value.\n\nOutput error in PyCharm…offending code above ’ hex_dictionary[k] = color[k]'. I believe the problem is in the color[k] part. That’s what is highlighted.\n\nThanks, maybe it’s just PyCharm."
    }
]