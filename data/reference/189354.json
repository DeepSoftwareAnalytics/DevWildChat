[
    {
        "link": "https://nsis.sourceforge.io/Docs/Chapter4.html",
        "document": "A NSIS Script File (.nsi) is just a text file with script code.\n\nCommands lines are in the format 'command [parameters]'\n\nLines beginning with ; or # are comments. You can put comments after commands. You can also use C-style comments to comment one or more lines.\n\nIf you want a parameter to start with ; or # put it in quotes.\n\nIf the first or second line in the file is a comment with the following format, the rest of the file is decoded using the specified character set.\n\nTo call a plug-in, use 'plugin::command [parameters]'. For more info see Plug-in DLLs.\n\nFor parameters that are treated as numbers, use decimal (the number) or hexadecimal (with 0x prepended to it, i.e. 0x12345AB), or octal (numbers beginning with a 0 and no x).\n\nColors should be set in hexadecimal RGB format, like HTML but without the #.\n\nTo represent strings that have spaces, use quotes:\n\nQuotes only have the property of containing a parameter if they surround the rest of the parameter. They can be either single quotes, double quotes, or the backward single quote.\n\nYou can escape quotes using $\\:\n\nIt is also possible to put newlines, tabs etc. in a string using $\\r, $\n\n, $\\t etc. More information...\n\nVariables start with $. User variables must be declared.\n\nTo extend a command over multiple lines, use a backslash (\\) at the end of the line. The next line will effectively be concatenated to the end of it. For example:\n\nLine extension for long commands works for comments as well. It can be a bit confusing, so it should be avoided.\n\nCompiler commands start with a ! and are executed at compile time.\n\nIf a file named \"nsisconf.nsh\" in the config directory exists, it will be included by default before any scripts (unless the /NOCONFIG command line parameter is used). The config directory on Windows is the same directory as makensis.exe is in. On other platforms this is set at install time and defaults to $PREFIX/etc/. You can alter this at runtime, see section 3.1.3 for more information.\n\nAll variables are global and can be used in Sections or Functions. Note that by default, variables are limited to 1024 characters. To extend this limit, build NSIS with a bigger value of the NSIS_MAX_STRLEN build setting or use the special build.\n\nUser variables must be declared with the Var command. You can use these variables to store values, work with string manipulation etc.\n\nDeclare a user variable. Allowed characters for variables names: [a-z][A-Z][0-9], '.' and '_'. All defined variables are global, even if defined in a section or a function. To make this clear, variables defined in a section or a function must use the /GLOBAL flag. The /GLOBAL flag is not required outside of sections and functions.\n\nRegisters. These variables can be used just like user variables, but are usually used in shared functions or macros. You don't have to declare these variables so you won't get any name conflicts when using them in shared code. When using these variables in shared code it's recommended that you use the stack to save and restore their original values. These variables can also be used for communication with plug-ins because they can be read and written by the plug-in DLLs.\n\nThe installation directory ($INSTDIR is modifiable using StrCpy, ReadRegStr, ReadINIStr, etc. - This could be used, for example, in the .onInit function to do a more advanced detection of install location).\n\nNote that in uninstaller code, $INSTDIR contains the directory where the uninstaller lies. It does not necessarily contain the same value it contained in the installer. For example, if you write the uninstaller to $WINDIR and the user doesn't move it, $INSTDIR will be $WINDIR in the uninstaller. If you write the uninstaller to another location, you should keep the installer's $INSTDIR in the registry or an alternative storing facility and read it in the uninstaller.\n\nThe current output directory (set implicitly via SetOutPath or explicitly via StrCpy, ReadRegStr, ReadINIStr, etc)\n\nThe command line of the installer. The format of the command line can be one of the following:\nâ€¢ For parsing out the PARAMETER portion, see GetParameters. If /D= is specified on the command line (to override the install directory) it won't show up in $CMDLINE.\n\nThe identifier of the language that is currently used. For example, English is 1033. You can only change this variable in .onInit.\n\nConstants can also be used in the InstallDir attribute.\n\nNote that some of the new constants will not work on every OS. For example, $CDBURN_AREA will only work on Windows XP and above. If it's used on Windows 98, it'll be empty. Unless mentioned otherwise, a constant should be available on every OS.\n\nThe program files directory (usually but detected at runtime). On 64-bit Windows, $PROGRAMFILES and $PROGRAMFILES32 point to while $PROGRAMFILES64 points to . Use $PROGRAMFILES64 when installing 64-bit applications.\n\nThe common files directory. This is a directory for components that are shared across applications (usually but detected at runtime). On 64-bit Windows, $COMMONFILES and $COMMONFILES32 point to while $COMMONFILES64 points to . Use $COMMONFILES64 when installing 64-bit applications.\n\nThe Windows desktop directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe directory containing the installer executable (technically this is a variable and you can modify it, but it is probably not a good idea).\n\nThe base name of the installer executable.\n\nThe full path of the installer executable.\n\nA symbol that contains the path where NSIS is installed. Useful if you want to reference resources that are in NSIS directory e.g. Icons, UIs etc.\n\nWhen compiled with support for keeping makensis and the data in the same place (the default on Windows), it is in the same place as makensis, on other platforms it is set at compile time (See the INSTALL file for info). In both instances you can modify it at runtime by setting the NSISDIR environment variable. See section 3.1.3 for more info.\n\nThe Windows directory (usually or but detected at runtime).\n\nThe Windows system directory (usually or but detected at runtime).\n\nThe start menu folder (useful for adding start menu items using CreateShortcut). The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe start menu programs folder (use this whenever you want $STARTMENU\\Programs). The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe start menu programs / startup folder. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe quick launch folder for IE4 active desktop and above. If quick launch is not available it simply returns the same as $TEMP.\n\nThe documents directory. A typical path for the current user is . The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 is installed.\n\nThe directory that contains Send To menu shortcut items.\n\nThe directory that contains shortcuts to the user's recently used documents.\n\nThe directory that contains shortcuts to the user's favorite websites, documents, etc. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 is installed.\n\nThe user's music files directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows ME, XP and above.\n\nThe user's picture files directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows 2000, XP, ME and above.\n\nThe user's video files directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows ME, XP and above.\n\nThe directory that contains link objects that may exist in the My Network Places/Network Neighborhood folder.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 with Active Desktop is installed.\n\nThe document templates directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe (roaming) application data directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nDetection of the current user path requires Internet Explorer 4 and above. Detection of the all users path requires Internet Explorer 5 and above.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 with Active Desktop is installed.\n\nThe local (non-roaming) application data directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user. The All Users location is also known as on Vista and above.\n\nThis constant is available on Windows ME, 2000 and above.\n\nThe directory that contains link objects that may exist in the Printers folder.\n\nThis constant is not available on Windows 95 and Windows 98.\n\nThis constant is not available on Windows 95 nor Windows NT 4 unless Internet Explorer 4 with Active Desktop is installed.\n\nThis constant is not available on Windows 95 nor Windows NT 4 unless Internet Explorer 4 with Active Desktop is installed.\n\nThis constant is not available on Windows 95 nor Windows NT 4 unless Internet Explorer 4 with Active Desktop is installed.\n\nThis constant is available on Windows 2000 and above.\n\nA directory where administrative tools are kept. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows 2000, ME and above.\n\nThe resources directory that stores themes and other Windows resources (usually but detected at runtime).\n\nThis constant is available on Windows XP and above.\n\nThe localized resources directory that stores themes and other Windows resources (usually but detected at runtime).\n\nThis constant is available on Windows XP and above.\n\nA directory where files awaiting to be burned to CD are stored.\n\nThis constant is available on Windows XP and above.\n\nHWND of the main window (in decimal).\n\nThe path to a temporary folder created upon the first usage of a plug-in or a call to InitPluginsDir. This folder is automatically deleted when the installer exits. This makes this folder the ideal folder to hold INI files for InstallOptions, bitmaps for the splash plug-in, or any other file that a plug-in needs to work.\n\nA handful of constants are available as aliases that are not affected by SetShellVarContext: $USERTEMPLATES, $USERSTARTMENU, $USERSMPROGRAMS, $USERDESKTOP, $COMMONTEMPLATES, $COMMONSTARTMENU, $COMMONSMPROGRAMS, $COMMONDESKTOP and $COMMONPROGRAMDATA.\n\nLabels are the targets of Goto instructions and the various branching instructions (such as IfErrors, MessageBox, IfFileExists, and StrCmp). Labels must be within a Section or a Function. Labels are local in scope, meaning they are only accessible from within the Section or Function that they reside in. To declare a label, simply use:\n\nLabels cannot begin with a -, +, !, $, or 0-9. When specifying labels for the various instructions that require them, remember that both an empty string (\"\") and 0 both represent the next instruction (meaning no Goto will occur). Labels beginning with a period (.) are global, meaning you can jump to them from any function or section (though you cannot jump to an uninstall global label from the installer, and vice versa).\n\nUnlike labels, relative jumps are, as the name suggests, relative to the place they are called from. You can use relative jumps wherever you can use labels. Relative jumps are marked by numbers. +1 jumps to the next instruction (the default advancement), +2 will skip one instruction and go to the second instruction from the current instruction, -2 will jump two instructions backward, and +10 will skip 9 instructions, jumping to the tenth instruction from the current instruction.\n\nA instruction is every command that is executed at run-time, when the installer is running. MessageBox, Goto, GetDLLVersion, FileRead, SetShellVarContext are all instructions. AddSize, Section, SectionGroup, SectionEnd, SetOverwrite (and everything under Compiler Flags), Name, SetFont, LangString, are not instructions because they are executed at compile time.\n\nNote that macro insertion is not considered as one instruction when it comes to relative jumps. The macro is expanded before relative jumps are applied, and so relative jumps can jump into code inside an inserted macro. The following code, for example, will not skip the macro. It will show a message box.\n\nEach (non-silent) NSIS installer has a set of pages. Each page can be a NSIS built-in page or a custom page created by a user's function (with nsDialogs or InstallOptions for example).\n\nThe script controls the page order, appearance, and behavior. You can skip pages, paint them white, force the user to stay in a certain page until a certain condition is met, show a readme page, show custom designed pages for input and more. In this section you will learn how to do all of the above.\n\nThere are two basic commands regarding pages, Page and UninstPage. The first adds a page to the installer, the second adds a page to the uninstaller. On top of those two there is the PageEx command which allows you to add a page to either one and with greater amount of options. PageEx allows you to set options to the specific page you are adding instead of using the default that's set outside of PageEx.\n\nThe page order is set simply by the order Page, UninstPage and PageEx appear in the script. For example:\n\nThis code will tell NSIS to first show the license page, then the components selection page, then the directory selection page and finally the install log where sections are executed. The uninstaller will first show the uninstall confirmation page and then the uninstallation log.\n\nYou can specify the same page type more than once.\n\nFor backwards compatibility with old NSIS scripts, the following installer pages will be added if no installer page commands are used: license (if LicenseText and LicenseData were specified), components (if ComponentText was specified and there is more than one visible section), directory (if DirText was specified) and instfiles. When there are no uninstaller page commands the following uninstaller pages will be added: uninstall confirmation page (if UninstallText was specified) and instfiles. This method is deprecated, converting scripts to use page commands is highly recommended because you can use the new standard language strings.\n\nEach page has its unique set of data that defines how it will look and act. This section describes what data each type of page uses and how you can set it. Callback functions are described below and are not dealt with in this section.\n\nThe list below lists the commands that affect a certain page type. Unless otherwise mentioned, these commands can be used both inside and outside of a PageEx block. If used inside a PageEx block they will only affect the current page being set by PageEx, otherwise they will set the default for all other pages.\nâ€¢ DirVar (can only be used in PageEx)\nâ€¢ DirVar (can only be used in PageEx)\n\nUse Caption to set the page caption.\n\nEach built-in page has three callback functions: the pre-function, the show function and the leave-function. The pre-function is called right before the page is created, the show-function is called right after it has been created but before it is shown and the leave-function is called right after the user has pressed the next button (before actually leaving the page).\nâ€¢ The pre-function allows you to skip the page using Abort.\nâ€¢ The show-function allows you to tweak the page's user interface with CreateFont, SetCtlColors, SendMessage etc.\nâ€¢ The leave-function allows you to force the user to stay on the current page using Abort.\n\nA custom page only has two callback functions, one that creates it which is mandatory, and one leave-function that acts just like the leave-function for built-in pages.\n\nAdds an installer page. See the above sections for more information about built-in versus custom pages and about callback functions.\nâ€¢ instfiles - installation page where the sections are executed\n\nThe last page of the installer has its cancel button disabled to prevent confusion. To enable it anyway, use /ENABLECANCEL.\n\nAdds an uninstaller page. See the above sections for more information about built-in versus custom pages and about callback functions.\n\nSee Page for possible values of internal_page_type.\n\nAdds an installer page or an uninstaller page if the un. prefix was used. Every PageEx must have a matching PageExEnd. In a PageEx block you can set options that are specific to this page and will not be used for other pages. Options that are not set will revert to what was set outside the PageEx block or the default if nothing was set. To set the sub-caption for a page use Caption or SubCaption to set the default. To set the callback functions for a page set with PageEx use PageCallbacks. See the above sections for more information about built-in versus custom pages.\n\nSets the callback functions for a page defined using PageEx. Can only be used inside a PageEx block. See the above sections for more information about callback functions.\n\nEach NSIS installer contains one or more sections. Each of these sections are created, modified, and ended with the following commands.\nâ€¢ Each section contains zero or more instructions.\nâ€¢ Sections are executed in order by the resulting installer, and if a component page is used, the user will have the option of disabling/enabling each visible section.\nâ€¢ If a section's name is 'Uninstall' or is prefixed with 'un.', it's an uninstaller section.\n\nTells the installer that the current section needs an additional \"size_kb\" kilobytes of disk space. Only valid within a section (will have no effect outside of a section or in a function).\n\nBegins and opens a new section. If section_name is empty, omitted, or begins with a -, then it is a hidden section and the user will not have the option of disabling it. If the section name is 'Uninstall' or is prefixed with 'un.', then it is a an uninstaller section. If section_index_output is specified, the parameter will be !defined with the section index (can be used with SectionSetText etc). If the section name begins with a !, the section will be displayed as bold. If the /o switch is specified, the section will be unselected by default.\n\nTo access the section index, curly brackets must be used and the code must be located below the section in the script.\n\nThis command specifies which install types (see InstType) the current section defaults to the enabled state in. Multiple commands can be specified (they are combined). If you specify RO as a parameter, then the section will be read-only, meaning the user won't be able to change its state.\n\nWorks like except that the first install type defined using InstType is indexed 1, the next 2 and so on.\n\nThis command inserts a section group. The section group must be closed with SectionGroupEnd, and should contain 1 or more sections. If the section group name begins with a !, its name will be displayed with a bold font. If /e is present, the section group will be expanded by default. If index_output is specified, the parameter will be !defined with the section index (can be used with SectionSetText etc). If the name is prefixed with 'un.' the section group is an uninstaller section group.\n\nA special Section named 'Uninstall' must be created in order to generate an uninstaller. This section should remove all files, registry keys etc etc that were installed by the installer, from the system. Here is an example of a simple uninstall section:\n\nThe first Delete instruction works (deleting the uninstaller), because the uninstaller is transparently copied to the system temporary directory for the uninstall.\n\nNote that in uninstaller code, $INSTDIR contains the directory where the uninstaller lies. It does not necessarily contain the same value it contained in the installer.\n\nFunctions are similar to Sections in that they contain zero or more instructions. User functions are not called by the installer directly, instead they are called from Sections using the Call instruction. Callback functions will be called by the installer when a certain event occurs.\n\nFunctions must be declared outside of Sections or other Functions.\n\nBegins and opens a new function. Function names beginning with \".\" (e.g. \".Whatever\") are generally reserved for callback functions. Function names beginning with \"un.\" are functions that will be generated in the Uninstaller. Hence, normal install Sections and functions cannot call uninstall functions, and the Uninstall Section and uninstall functions cannot call normal functions.\n\nYou can create callback functions (which have special names), that will be called by the installer at certain points in the install. Below is a list of available callbacks:\n\nThis callback will be called just before the first page is loaded and the installer dialog is shown, allowing you to tweak the user interface.\n\nThis callback will be called when the installer is nearly finished initializing. If the '.onInit' function calls Abort, the installer will quit instantly.\n\nHere are two examples of how this might be used:\n\nThis callback is called when the user hits the 'cancel' button after the install has failed (if it could not extract a file, or the install script used the Abort command).\n\nThis callback is called when the install was successful, right before the install window closes (which may be after the user clicks 'Close' if AutoCloseWindow or SetAutoClose is set to false).\n\nThis callback is called right after the installer window closes. Use it to free any user interface related plug-ins if needed.\n\nThis callback is called whenever the mouse position over the sections tree has changed. This allows you to set a description for each section for example. The section id on which the mouse is over currently is stored, temporarily, in $0.\n\nThis callback is called if Reboot fails. WriteUninstaller, plug-ins, File and WriteRegBin should not be used in this callback.\n\nCalled when the selection changes on the component page. Useful for using with SectionSetFlags and SectionGetFlags.\n\nSelection changes include both section selection and installation type changes. The section id of the changed section is stored in $0. $0 is -1 if the installation type changed. You only get notifications for changes initiated by the user and only one notification per action even if the action also affected child sections and/or parent groups.\n\nThis callback is called when the user hits the 'cancel' button, and the install hasn't already failed. If this function calls Abort, the install will not be aborted.\n\nThis callback enables control over whether or not an installation path is valid for your installer. This code will be called every time the user changes the install directory, so it shouldn't do anything crazy with MessageBox or the like. If this function calls Abort, the installation path in $INSTDIR is deemed invalid.\n\nThis callback will be called just before the first page is loaded and the installer dialog is shown, allowing you to tweak the user interface.\n\nHave a look at .onGUIInit for an example.\n\nThis callback will be called when the uninstaller is nearly finished initializing. If the ' un.onInit' function calls Abort, the uninstaller will quit instantly. Note that this function can verify and/or modify $INSTDIR if necessary.\n\nHere are two examples of how this might be used:\n\nThis callback is called when the user hits the 'cancel' button after the uninstall has failed (if it used the Abort command or otherwise failed).\n\nThis callback is called when the uninstall was successful, right before the install window closes (which may be after the user clicks 'Close' if SetAutoClose is set to false)..\n\nThis callback is called right after the uninstaller window closes. Use it to free any user interface related plug-ins if needed.\n\nThis callback is called if Reboot fails. WriteUninstaller, plug-ins, File and WriteRegBin should not be used in this callback.\n\nCalled when the selection changes on the component page. Useful for using with SectionSetFlags and SectionGetFlags.\n\nSelection changes include both section selection and installation type changes. The section id of the changed section is stored in $0. $0 is -1 if the installation type changed. You only get notifications for changes initiated by the user and only one notification per action even if the action also affected child sections and/or parent groups.\n\nThis callback is called when the user hits the 'cancel' button and the uninstall hasn't already failed. If this function calls Abort, the install will not be aborted.\n\nThe commands below all adjust attributes of the installer. These attributes control how the installer looks and functions, including which pages are present in the installer, which text is displayed in each part of each page, the name of the installer, the icon the installer uses, the default installation directory and more. Note that these attributes can be set anywhere in the file except in a Section or Function.\n\nAdds a branding image on the top, bottom, left, or right of the installer. Its size will be set according to the width/height specified, the installer width/height and the installers font. The final size will not always be what you requested; have a look at the output of the command for the actual size. Because this depends on the installers font, you should use SetFont before AddBrandingImage. The default padding value is 2. The numbers can be suffixed with to specify dialog units instead of pixels.\n\nAddBrandingImage only adds a placeholder for an image. To set the image itself at runtime, use SetBrandingImage.\n\nControls whether or not installs are allowed in the root directory of a drive, or directly into a network share. Set to 'true' to change the safe behavior, which prevents users from selecting C:\\ or \\\\Server\\Share as an install (and later on, uninstall) directory. For additional directory selection page customizability, see .onVerifyInstDir.\n\nSets whether or not the install window automatically closes when completed. This is overridable from a section using SetAutoClose.\n\nSpecifies the font used to show the text on the background gradient. To set the color use BGGradient. The default font will be used if no parameters are specified. The default font is bold and italic Times New Roman.\n\nSpecifies whether or not to use a gradient background window. If 'off', the installer will not show a background window, if no parameters are specified, the default black to blue gradient is used, and otherwise the top_color or bottom_color are used to make a gradient. Top_color and bottom_color are specified using the form RRGGBB (in hexadecimal, as in HTML, only minus the leading '#', since # can be used for comments). 'textcolor' can be specified as well, or 'notext' can be specified to turn the big background text off.\n\nSets the text that is shown at the bottom of the install window (by default it is 'Nullsoft Install System vX.XX'). Setting this to an empty string (\"\") uses the default; to set the string to blank, use \" \" (a space). If it doesn't matter to you, leave it the default so that everybody can know why the installer didn't suck :). Use /TRIMLEFT, /TRIMRIGHT or /TRIMCENTER to trim down the size of the control to the size of the string.\n\nAccepts variables. If variables are used, they must be initialized on .onInit.\n\nWhen used outside a PageEx block: Sets the text for the titlebar of the installer. By default it is '$(^Name) Setup', where Name is specified by the Name instruction. You can however override it with 'MyApp Installer' or whatever. If you specify an empty string (\"\"), the default will be used (you can specify \" \" to simulate a empty string).\n\nWhen used inside a PageEx block: Sets the subcaption of the current page.\n\nAccepts variables. If variables are used, they must be initialized on .onInit or .onGUIInit.\n\nReplaces dialog (IDD_LICENSE, IDD_DIR, IDD_SELCOM, IDD_INST, IDD_INSTFILES, IDD_UNINST or IDD_VERIFY) with a dialog from ui_file.exe with the same resource ID. You can also specify 'all' as the dialog if you wish to replace all 7 of the dialogs at once from the same UI file. For some example UIs look at Contrib\\UIs under your NSIS directory.\nâ€¢ IDD_DIR must contain IDC_DIR (edit box), IDC_BROWSE (button) and IDC_CHECK1 (checkbox).\nâ€¢ IDD_SELCOM must contain IDC_TREE1 (SysTreeView32 control), and IDC_COMBO1 (combo box).\nâ€¢ IDD_INST must contain IDC_BACK (button), IDC_CHILDRECT (static control the size of all other dialogs), IDC_VERSTR (static), IDOK (button), and IDCANCEL (button). If an image control (static with SS_BITMAP style) will be found in this dialog it will be used as the default for SetBrandingImage.\nâ€¢ IDD_INSTFILES must contain IDC_LIST1 (SysListView32 control), IDC_PROGRESS (msctls_progress32 control), and IDC_SHOWDETAILS (button).\n\nSpecifies the bitmap with the checkbox images used in the component-selection page treeview.\n\nThis bitmap should have a size of 96x16 pixels, no more than 8bpp (256 colors) and contain six 16x16 images for the different states (in order: selection mask, not checked, checked, greyed out, unchecked & read-only, checked & read-only). Use magenta as mask color (this area will be transparent).\n\nReplaces the default text (\"Completed\") that is printed at the end of the install if parameter is specified. Otherwise, the default is used.\n\nAccepts variables. If variables are used, they must be initialized before the message is printed.\n\nUsed to change the default text on the component page.\n\ntext: Text above the controls, to the right of the installation icon.\n\nsubtext: Text next to the installation type selection.\n\nsubtext2: Text to the left of the components list and below the installation type.\n\nThe default string will be used if a string is empty (\"\").\n\nAccepts variables. If variables are used, they must be initialized before the components page is created.\n\nSpecifies whether or not the installer will perform a CRC on itself before allowing an install. Note that if the user uses /NCRC on the command line when executing the installer, and you didn't specify 'force', the CRC will not occur, and the user will be allowed to install a (potentially) corrupted installer.\n\nReplaces the default details button text of \"Show details\", if parameter is specified (otherwise the default is used).\n\nAccepts variables. If variables are used, they must be initialized before the install log (instfiles) page is created.\n\nUsed to change the default text on the directory page.\n\ntext: Text above the controls, to the right of the installation icon.\n\nbrowse_dlg_text: Text on the \"Browse For Folder\" dialog, appears after clicking on \"Browse\" button.\n\nThe default string will be used if a string is empty (\"\").\n\nAccepts variables. If variables are used, they must be initialized before the directory page is created.\n\nSpecifies which variable is to be used to contain the directory selected. This variable should be initialized with a default value. This allows you to easily create two different directory pages that will not require you to move values in and out of $INSTDIR. The default variable is $INSTDIR. This can only be used in PageEx for directory and uninstConfirm pages.\n\nIf `DirVerify leave' is used, the Next button will not be disabled if the installation directory is not valid or there is not enough space. A flag that you can read in the leave function using GetInstDirError will be set instead.\n\nReplaces the default text that comes up when a file cannot be written to. This string can contain a reference to $0, which is the filename ($0 is temporarily changed to this value). Example: \"Can not write to file $\\r$\n\n$0$\\r$\n\ngood luck.\".\n\nAccepts variables. If variables are used, they must be initialized before File is used.\n\nSets the icon of the installer. Every image in the icon file will be included in the installer. Use UninstallIcon to set the uninstaller icon.\n\nIf parameter is specified, overrides the default install button text (of \"Install\") with the specified text.\n\nAccepts variables. If variables are used, they must be initialized before the install button shows.\n\nSets the colors to use for the install info screen (the default is 00FF00 000000. Use the form RRGGBB (in hexadecimal, as in HTML, only minus the leading '#', since # can be used for comments). Note that if \"/windows\" is specified as the only parameter, the default windows colors will be used.\n\nSets the default installation directory. See the variables section for variables that can be used to make this string (especially $PROGRAMFILES). Note that the part of this string following the last \\ will be used if the user selects 'browse', and may be appended back on to the string at install time (to disable this, end the directory with a \\ (which will require the entire parameter to be enclosed with quotes). If this doesn't make any sense, play around with the browse button a bit.\n\nThis attribute tells the installer to check a string in the registry and use it as the install dir if that string is valid. If this attribute is present, it will override the InstallDir attribute if the registry key is valid, otherwise it will fall back to the InstallDir value. When querying the registry, this command will automatically remove any quotes. If the string ends in \".exe\", it will automatically remove the filename component of the string (i.e. if the string is \"C:\\Program Files\\Foo\\app.exe\", it will know to use \"C:\\Program Files\\Foo\"). For more advanced install directory configuration, set $INSTDIR in .onInit.\n\nLanguage strings and variables cannot be used with InstallDirRegKey.\n\nValid values for flag are \"smooth\" (smooth the progress bar) or \"colored\" (color the progress bar with the colors set by InstallColors. Examples: \"InstProgressFlags\" (default old-school windows look), \"InstProgressFlags smooth\" (new smooth look), \"InstProgressFlags smooth colored\" (colored smooth look whee). Note: neither \"smooth\" or \"colored\" work with XPStyle on when the installer runs on Windows XP with a modern theme.\n\nAdds an install type to the install type list, or disables the custom install type. There can be as many as 32 types, each one specifying the name of the install type. If the name is prefixed with 'un.' it is an uninstaller install type. The name can contain variables which will be processed at runtime before the components page shows. Another way of changing the InstType name during runtime is the InstTypeSetText command. The difference is that with InstTypeSetText you are saving your precious user variables. The first type is the default (generally 'Typical' or 'Full'). If the /NOCUSTOM switch is specified, then the \"custom\" install type is disabled, and the user has to choose one of the pre-defined install types. Alternatively, if the /CUSTOMSTRING switch is specified, the parameter will override the \"Custom\" install type text. Alternatively, if the /COMPONENTSONLYONCUSTOM flag is specified, the component list will only be shown if the \"Custom\" install type is selected.\n\nAccepts variables for type names. If variables are used, they must be initialized before the components page is created.\n\nSectionInstType is used to bind s to install types.\n\nSets the background color of the license data. Color is specified using the form RRGGBB (in hexadecimal, as in HTML, only minus the leading '#', since # can be used for comments). Default is '/gray'. You can also use the Windows OS defined color by using '/windows'.\n\nSpecifies a text file or a RTF file to use for the license that the user can read. Omit this to not have a license displayed. Note that the file must be in DOS text format (\\r\n\n). To define a multilingual license data use LicenseLangString.\n\nIf you are using a RTF file it is recommended that you edit it with WordPad and not MS Word. Using WordPad will result in a much smaller file.\n\nUse LicenseLangString to show a different license for every language.\n\nSpecifies if the displayed license must be explicitly accepted or not. This can be done either by a checkbox or by radiobuttons. By default the \"next button\" is disabled and will only be enabled if the checkbox is enabled or the correct radio button is selected. If off is specified the \"next button\" is enabled by default.\n\nUsed to change the default text on the license page.\n\ntext: Text above the controls, to the right of the installation icon.\n\nThe default string will be used if a string is empty (\"\").\n\nAccepts variables. If variables are used, they must be initialized before the license page is created.\n\nDeclare that the installer is DPI-aware. A DPI-aware application is not scaled by the DWM (DPI virtualization) so the text is never blurry. NSIS does not scale the bitmap used by the tree control on the component page and some plugins might have compatibility issues so make sure that you test your installer at different DPI settings if you select true.\n\nSee MSDN for more information about DPI-aware applications.\n\nDeclare that the installer can handle paths longer than MAX_PATH. Only supported on Windows 10 Anniversary Update and later.\n\nNote: Instructions like CopyFiles and CreateShortcut do not support long paths!\n\nNote: Has no effect if the \"Enable Win32 long paths\" policy is not enabled.\n\nDeclare that the installer is compatible with the specified Windows version(s). This adds a SupportedOS entry in the compatibility section of the application manifest. The default is Win7+8+8.1+10. none is the default if RequestExecutionLevel is set to none for compatibility reasons.\n\nWindows 8.1 and later will fake its version number if you don't declare support for that particular version. You can read more about the other changes in behavior on MSDN.\n\nReplaces the default text strings for the four buttons (< Back, Next >, Cancel and Close). If parameters are omitted, the defaults are used.\n\nAccepts variables. If variables are used, they must be initialized in .onInit.\n\nSets the name of the installer. The name is usually simply the product name such as 'MyApp' or 'CrapSoft MyApp'. If you have one or more ampersands (&) in the name, set the second parameter to the same name, only with doubled ampersands. For example, if your product's name is \"Foo & Bar\", use:\n\nIf you have ampersands in the name and use a LangString for the name, you will have to create another one with doubled ampersands to use as the second parameter.\n\nAccepts variables. If variables are used, they must be initialized in .onInit.\n\nSpecifies the output file that the MakeNSIS should write the installer to. This is just the file that MakeNSIS writes, it doesn't affect the contents of the installer.\n\nAdds as a resource to the installer and uninstaller. specifies the resource type and can be any string or # followed by a standard type or number. must be # followed by a number. is optional and specifies the language id of the resource. Replacing standard NSIS resources is not supported, you should use Icon and ChangeUI instead.\n\nSpecifies the requested execution level for Windows Vista and higher. The value is embedded in the installer and uninstaller's XML manifest and tells Windows which privilege level the installer requires. user requests the user's normal level with no administrative privileges. highest will request the highest execution level available for the current user and will cause Windows to prompt the user to verify privilege escalation if they are a member of the administrators group. The prompt might request for the user's password. admin, which is also the default, requests administrator level and will cause Windows to prompt the user as well. Specifying none will keep the manifest empty and let Windows decide which execution level is required. Windows automatically identifies NSIS installers and decides administrator privileges are required. Because of this, none and admin have virtually the same effect.\n\nIt's recommended that every application is marked with a required execution level. Unmarked installers are subject to compatibility mode. Workarounds of this mode include automatically moving any shortcuts created in the user's start menu to all users' start menu. Installers that don't install anything into system folders nor write to the local machine registry (HKLM) should specify user execution level.\n\nMore information about this topic can be found on MSDN.\n\nSets the installer font. Please remember that the font you choose must be present on the user's machine as well. Don't use rare fonts that only you have.\n\nUse the /LANG switch if you wish to set a different font for each language. For example:\n\nThere are two LangStrings named ^Font and ^FontSize which contain the font and font size for every language.\n\nSets whether or not the details of the install are shown. Can be 'hide' to hide the details by default, allowing the user to view them, or 'show' to show them by default, or 'nevershow', to prevent the user from ever seeing them. Note that sections can override this using SetDetailsView.\n\nSets whether or not the details of the uninstall are shown. Can be 'hide' to hide the details by default, allowing the user to view them, or 'show' to show them by default, or 'nevershow', to prevent the user from ever seeing them. Note that sections can override this using SetDetailsView.\n\nSpecifies whether or not the installer should be silent. If it is 'silent' or 'silentlog', all sections that have the SF_SELECTED flag are installed quietly (you can set this flag using SectionSetFlags), with no screen output from the installer itself (the script can still display whatever it wants, use MessageBox's /SD to specify a default for silent installers). Note that if this is set to 'normal' and the user runs the installer with /S (case sensitive) on the command line, it will behave as if SilentInstall 'silent' was used. Note: see also LogSet.\n\nSee section 4.12 for more information.\n\nSpecifies whether or not the uninstaller should be silent. If it is 'silent' the uninstall sections will run quietly, with no screen output from the uninstaller itself (the script can still display whatever it wants, use MessageBox's /SD to specify a default for silent uninstallers). Note that if this is set to 'normal' and the user runs the uninstaller with /S on the command line, it will behave as if SilentUnInstall 'silent' was used.\n\nSee section 4.12 for more information.\n\nIf parameters are specified, overrides the space required and space available text (\"Space required: \" and \"Space available: \" by default). If 'none' is specified as the required text no space texts will be shown.\n\nAccepts variables. If variables are used, they must be initialized before the components page is created.\n\nOverrides the subcaptions for each of the installer pages (0=\": License Agreement\",1=\": Installation Options\",2=\": Installation Directory\", 3=\": Installing Files\", 4=\": Completed\"). If you specify an empty string (\"\"), the default will be used (you can however specify \" \" to achieve a blank string).\n\nYou can also set a subcaption (or override the default) using Caption inside a PageEx block.\n\nAccepts variables. If variables are used, they must be initialized before the relevant page is created.\n\nChanges the text of the button that by default says \"Uninstall\" in the uninstaller. If no parameter is specified, the default text is used.\n\nAccepts variables. If variables are used, they must be initialized before the uninstall button shows.\n\nSets what the titlebars of the uninstaller will display. By default it is '$(^Name) Uninstall', where Name is specified with the Name command. You can, however, override it with 'MyApp uninstaller' or whatever. If you specify an empty string (\"\"), the default will be used (you can specify \" \" to simulate a empty string).\n\nAccepts variables. If variables are used, they must be initialized in un.onInit.\n\nSets the icon of the uninstaller.\n\nSets the default subcaptions for the uninstaller pages (0=\": Confirmation\",1=\": Uninstalling Files\",2=\": Completed\"). If you specify an empty string (\"\"), the default will be used (you can specify \" \" to simulate a empty string).\n\nYou can also set a subcaption (or override the default) using Caption inside a PageEx block.\n\nAccepts variables. If variables are used, they must be initialized before the relevant page is created.\n\nSpecifies the texts on the uninstaller confirm page.\n\nsubtext: Text next to the uninstall location\n\nAccepts variables. If variables are used, they must be initialized before the uninstaller confirm page is created.\n\nSets whether or not the installer's icon is displayed on certain pages.\n\nSets whether or not a XP visual style manifest will be added to the installer. This manifest makes the installers controls use the new visual styles when running on Windows XP and later. This affects the uninstaller too.\n\nThe following commands affect how the compiler generates code and compresses data. Unless otherwise noted, these commands are valid anywhere in the script and affect every line below where each one is placed (until overridden by another command). They cannot be jumped over using flow control instructions.\n\nFor example, in the following script, blah.dat will never be overwritten.\n\nInstead, the following should be used.\n\nThis command specifies whether the user should be able to skip a file or not. A user has an option to skip a file if SetOverwrite is set to on (default) and the installer fails to open a file for writing when trying to extract a file. If off is used the ignore button which allows the user to skip the file will not be shown and the user will only have an option to abort the installation (Cancel button) or retry opening the file for writing (Retry button). If on is used the user will have an option to skip the file (error flag will be set - see SetOverwrite).\n\nThis command sets the size of the compiler's internal file buffers. This command allows you to control the compiler's memory usage by limiting how much of a given file it will load into memory at once. Since the compiler needs both input and output, twice the memory size specified could be used at any given time for file buffers. This command does not limit the compression buffers which could take another couple of MB, neither does it limit the compiler's other internal buffers, but those shouldn't normally top 1MB anyway. Specifying a very small number could decrease performance. Specifying a very large number could exhaust system resources and force the compiler to cancel the compilation process. The default value is 32MB.\n\nThis command sets the compress flag which is used by the installer to determine whether or not data should be compressed. Typically the SetCompress flag will affect the commands after it, and the last SetCompress command in the file also determines whether or not the install info section and uninstall data of the installer is compressed. If compressflag is 'auto', then files are compressed if the compressed size is smaller than the uncompressed size. If compressflag is set to 'force', then the compressed version is always used. If compressflag is 'off' then compression is not used (which can be faster).\n\nNote that this option has no effect when solid compression is used.\n\nThis command sets the compression algorithm used to compress files/data in the installer. It can only be used outside of sections and functions and before any data is compressed. Different compression methods can not be used for different files in the same installer. It is recommended to use it at the very top of the script to avoid compilation errors.\n\nThree compression methods are supported: ZLIB, BZIP2 and LZMA.\n\nZLIB (the default) uses the deflate algorithm, it is a quick and simple method. With the default compression level it uses about 300 KB of memory.\n\nBZIP2 usually gives better compression ratios than ZLIB, but it is a bit slower and uses more memory. With the default compression level it uses about 4 MB of memory.\n\nLZMA is a new compression method that gives very good compression ratios. The decompression speed is high (10-20 MB/s on a 2 GHz CPU), the compression speed is lower. The memory size that will be used for decompression is the dictionary size plus a few KBs, the default is 8 MB.\n\nIf /FINAL is used, subsequent calls to SetCompressor will be ignored.\n\nIf /SOLID is used, all of the installer data is compressed in one block. This results in greater compression ratios.\n\nSets the dictionary size in megabytes (MB) used by the LZMA compressor (default is 8 MB).\n\nThis command tells the compiler whether or not to do datablock optimizations. Datablock optimizations causes the compiler to check to see if any data being added to the data block is already in the data block, and if so, it is simply referenced as opposed to added (can save a little bit of size). It is highly recommended to leave this option on.\n\nThis command sets the file date/time saving flag which is used by the File command to determine whether or not to save the last write date and time of the file, so that it can be restored on installation. Valid flags are 'on' and 'off'. 'on' is the default.\n\nThis command sets the overwrite flag which is used by the File command to determine whether or not the file should overwrite any existing files that are present. If overwriteflag is 'on', files are overwritten (this is the default). If overwriteflag is 'off', files that are already present are not overwritten. If overwriteflag is 'try', files are overwritten if possible (meaning that if the file is not able to be written to, it is skipped without any user interaction). If overwriteflag is 'ifnewer', then files are only overwritten if the existing file is older than the new file. If overwriteflag is 'ifdiff', then files are only overwritten if the existing file is older or newer than the new file. Note that when in 'ifnewer' or 'ifdiff' mode, the destination file's date is set, regardless of what SetDateSave is set to.\n\nGenerate a Unicode installer. It can only be used outside of sections and functions and before any data is compressed.\n\nAdds a string entry to the version information stored in the installer and uninstaller. These can be viewed in the File Properties Version or Details tab. keyname can either be a special name known by Windows or a user defined name. /LANG=0 can be used to indicate a language neutral language id. The following names are known by Windows:\n\nThe displayed name of these special entries are translated on the target system, whereas user defined keynames remain untranslated.\n\nSets the Product Version in the VS_FIXEDFILEINFO version information block.\n\nSets the File Version in the VS_FIXEDFILEINFO version information block (You should also set the FileVersion string with VIAddVersionKey so the information is displayed at the top of the Version Tab in the Properties of the file). If you don't provide a File Version the Product Version is used in the VS_FIXEDFILEINFO block.\n\nThe instructions that NSIS uses for scripting are sort of a cross between PHP and assembly. There are no real high level language constructs but the instructions themselves are (for the most part) high level, and you have handy string capability (i.e. you don't have to worry about concatenating strings, etc). You essentially have 25 registers (20 general purpose, 5 special purpose), and a stack.\n\nDelete file (which can be a file or wildcard, but should be specified with a full path) on the target system. If /REBOOTOK is specified and the file cannot be deleted then the file is deleted when the system reboots -- if the file will be deleted on a reboot, the reboot flag will be set. The error flag is set if files are found and cannot be deleted. The error flag is not set when trying to delete a file that does not exist.\n\nWarning: The /REBOOTOK switch requires administrator rights on Windows NT and later.\n\nExecute the specified program and continue immediately. Note that the file specified must exist on the target system, not the compiling system. $OUTDIR is used as the working directory. The error flag is set if the process could not be launched. Note, if the command could have spaces, you should put it in quotes to delimit it from parameters. e.g.: Exec '\"$INSTDIR\\command.exe\" parameters'. If you don't put it in quotes it will not work on Windows 9x with or without parameters.\n\nExecute the specified file using ShellExecuteEx. Note that is usually \"open\", \"print\", etc, but can be an empty string to use the default action. and the show type are optional. $OUTDIR is used as the working directory. The error flag is set if the file could not be launched. can be any combination of /ALLOWERRORUI, /DOENVSUBST and /INVOKEIDLIST.\n\nExecute the specified file using ExecShell and wait for executed process to quit. It will only wait for executable files, not other file types nor URLs.\n\nExecute the specified program and wait for the executed process to quit. See Exec for more information. If no output variable is specified ExecWait sets the error flag if the program executed returns a nonzero error code, or if there is an error. If an output variable is specified, ExecWait sets the variable with the exit code (and only sets the error flag if an error occurs; if an error occurs the contents of the user variable are undefined). Note, if the command could have spaces, you should put it in quotes to delimit it from parameters. e.g.: ExecWait '\"$INSTDIR\\command.exe\" parameters'. If you don't put it in quotes it will not work on Windows 9x with or without parameters.\n\nAdds file(s) to be extracted to the current output path ($OUTDIR).\nâ€¢ Note that the output file name is $OUTDIR\\filename_portion_of_file.\nâ€¢ Use /oname=X switch to change the output name. X may contain variables and can be a fully qualified path or a relative path in which case it will be appended to $OUTDIR set by SetOutPath. When using this switch, only one file can be specified. If the output name contains spaces, quote the entire parameter, including /oname, as shown in the examples below.\nâ€¢ If the /r switch is used, matching files and directories are recursively searched for in subdirectories. If just one path segment is specified (e.g. ), the current directory will be recursively searched. If more than one segment is specified (e.g. ), the last path segment will be used as the matching condition and anything before it specifies which directory to search recursively. If a directory name matches, all of its contents is added recursively. Directory structure is preserved.\nâ€¢ Use the /x switch to exclude files and directories.\nâ€¢ If the /a switch is used, the attributes of the file(s) added will be preserved.\nâ€¢ The File command sets the error flag if overwrite mode is set to 'try' and the file could not be overwritten, or if the overwrite mode is set to 'on' and the file could not be overwritten and the user selects ignore.\nâ€¢ If the /nonfatal switch is used and no files are found, a warning will be issued instead of an error.\n\nNote: When using the /r switch, both matching directories and files will be searched. This is always done with or without the use of wildcards, even if the given path perfectly matches one directory. That means, the following directory structure:\n\nwith the following File usage:\n\nwill match the directory named something in the root directory, the file named something in the directory named dir and the directory named something in the directory named another. To match only the directory named something in the root directory, use the following:\n\nWhen adding \\*.*, it will be used as the matching condition and something will be used as the directory to search. When only something is specified, the current directory will be recursively searched for every file and directory named something and another\\something will be matched.\n\nRename source_file to dest_file. You can use it to move a file from anywhere on the system to anywhere else and you can move a directory to somewhere else on the same drive. The destination file must not exist or the move will fail (unless you are using /REBOOTOK). If /REBOOTOK is specified, and the file cannot be moved (if, for example, the destination exists), then the file is moved when the system reboots. If the file will be moved on a reboot, the reboot flag will be set. The error flag is set if the file cannot be renamed (and /REBOOTOK is not used) or if the source file does not exist.\n\nIf no absolute path is specified the current folder will be used. The current folder is the folder set using the last SetOutPath instruction. If you have not used SetOutPath the current folder is $EXEDIR.\n\nWarning: The /REBOOTOK switch requires administrator rights on Windows NT and later.\n\nWarning: Files cannot be moved from one drive to another if a reboot is required.\n\nReserves a file in the data block for later use. Files are added to the compressed data block in the order they appear in the script. Functions, however, are not necessarily called in the order they appear in the script. Therefore, if you add a file in a function called early but put the function at the end of the script, all of the files added earlier will have to be decompressed to get to the required file. This process can take a long time if there a lot of files. .onInit is one such function. It is called at the very beginning, before anything else appears. If you put it at the very end of the script, extract some files in it and have lots of files added before it, the installer might take a very long time to load. This is where this command comes useful, allowing you to speed up the loading process by including the file at the top of the data block instead of letting NSIS seek all the way down to the bottom of the compressed data block.\n\nUse /plugin to reserve a plugin in ${NSISDIR}\\Plugins\\*.\n\nSee File for more information about the parameters.\n\nRemove the specified directory (fully qualified path with no wildcards). Without /r, the directory will only be removed if it is completely empty. If /r is specified the directory will be removed recursively, so all directories and files in the specified directory will be removed. If /REBOOTOK is specified, any file or directory which could not be removed during the process will be removed on reboot -- if any file or directory will be removed on a reboot, the reboot flag will be set. The error flag is set if any file or directory cannot be removed.\n\nNote that the current working directory can not be deleted. The current working directory is set by SetOutPath. For example, the following example will not delete the directory.\n\nThe next example will succeed in deleting the directory.\n\nWarning: The /REBOOTOK switch requires administrator rights on Windows NT and later.\n\nSets the output path ($OUTDIR) and creates it (recursively if necessary), if it does not exist. Must be a full pathname, usually is just $INSTDIR (you can specify $INSTDIR with a single \"-\" if you are lazy).\n\nIn all of the below registry instructions use an empty string (just two quotes with nothing between them - \"\") as the key name to specify the default key which is shown as (Default) in regedit.exe.\n\nUse SetRegView on 64-bit Windows to choose which registry view is used.\n\nIf a full path is not specified for any of the INI handling instructions, the Windows directory will be used.\n\nDeletes the entire section [section_name] from ini_filename. If the section could not be removed from the ini file, the error flag is set. It does not set the error flag if the section could not be found.\n\nDeletes the string str_name from section [section_name] from ini_filename. If the string could not be removed from the ini file, the error flag is set. It does not set the error flag if the string could not be found.\n\nDeletes a registry key. If /ifempty is specified, the registry key will only be deleted if it has no subkeys and no values (otherwise, the whole registry tree will be removed). Valid values for root_key are listed under WriteRegStr. The error flag is set if the key could not be removed from the registry (or if it didn't exist to begin with).\n\nDeletes a registry value. Valid values for root_key are listed under WriteRegStr. The error flag is set if the value could not be removed from the registry (or if it didn't exist to begin with).\n\nSet user variable $x with the name of the 'index'th registry key in root_key\\Subkey. Valid values for root_key are listed under WriteRegStr. Returns an empty string if there are no more keys, and returns an empty string and sets the error flag if there is an error.\n\nSet user variable $x with the name of the 'index'th registry value in root_key\\Subkey. Valid values for root_key are listed under WriteRegStr. Returns an empty string and sets the error flag if there are no more values or if there is an error.\n\nExpands environment variables in string into the user variable $x. If an environment variable doesn't exist, it will not be replaced. For example, if you use \"%var%\" and var doesn't exists, the result will be \"%var%\". If there is an error, the variable is set to empty, and the error flag is set.\n\nFlushes the INI file's buffers. Windows 9x keeps all changes to the INI file in memory. This command causes the changes to be written to the disk immediately. Use it if you edit the INI manually, delete it, move it or copy it right after you change it with WriteINIStr, DeleteINISec or DeleteINStr.\n\nReads from the environment string \"name\" and sets the value into the user variable $x. If there is an error reading the string, the user variable is set to empty, and the error flag is set.\n\nReads from entry_name in [section_name] of ini_filename and stores the value into user variable $x. The error flag will be set and $x will be assigned to an empty string if the entry is not found.\n\nReads a 32-bit DWORD from the registry into the user variable $x. Valid values for root_key are listed under WriteRegStr. The error flag will be set and $x will be set to an empty string (\"\" which is interpreted as 0 in math operations) if the DWORD is not present. If the value is present, but is not a DWORD, it will be read as a string and the error flag will be set.\n\nReads from the registry into the user variable $x. Valid values for root_key are listed under WriteRegStr. The error flag will be set and $x will be set to an empty string (\"\") if the string is not present. If the value is present, but is of type REG_DWORD, it will be read and converted to a string and the error flag will be set.\n\nWrites entry_name=value into [section_name] of ini_filename. The error flag is set if the string could not be written to the ini file.\n\nThis command writes a block of binary data to the registry. Valid values for root_key are listed under WriteRegStr. Valuedata is in hexadecimal (e.g. DEADBEEF01223211151). The error flag is set if the binary data could not be written to the registry. If the registry key doesn't exist it will be created.\n\nWrites a value without data to the registry.\n\nThis command writes a DWORD (32-bit integer) to the registry (a user variable can be specified). Valid values for root_key are listed under WriteRegStr. The error flag is set if the dword could not be written to the registry. If the registry key doesn't exist it will be created.\n\nWrite a string to the registry. See WriteRegExpandStr for more details.\n\nWrite a string to the registry. root_key must be one of:\n\nIf root_key is SHCTX or SHELL_CONTEXT, it will be replaced with HKLM if SetShellVarContext is set to all and with HKCU if SetShellVarContext is set to current.\n\nThe error flag is set if the string could not be written to the registry. The type of the string will be REG_SZ for WriteRegStr, or REG_EXPAND_STR for WriteRegExpandStr. If the registry key doesn't exist it will be created.\n\nWrites a multi-string value. The /REGEDIT5 switch must be used and specifies that the data is in the hex format used by .reg files on Windows 2000 and later.\n\nSets the registry view affected by registry commands (root keys with a 32/64 suffix are not affected). On 64-bit versions of Windows there are two views; one for 32-bit applications and one for 64-bit applications. By default, 32-bit applications running on 64-bit systems (WOW64) only have access to the 32-bit view. Using allows the installer to access keys in the 64-bit view of the registry. Registry operations will fail if the selected view is not supported by Windows.\n\nDoes not affect InstallDirRegKey. Instead, the registry must be read using ReadRegStr in .onInit.\n\nCalls a function named function_name inside a NSIS extension DLL, a plug-in. See the example plugin for how to make one. Extension DLLs can access the stack and variables. Note: To automatically extract and call plug-in DLLs, use a plug-in command instead of CallInstDLL.\n\nFor easier plug-in handling, use the new plug-in call syntax.\n\nCopies files from the source to the destination on the installing system. Useful with $EXEDIR if you want to copy from installation media, or to copy from one place to another on the system. You might see a Windows status window of the copy operation if the operation takes a lot of time (to disable this, use /SILENT). The last parameter can be used to specify the size of the files that will be copied (in kilobytes), so that the installer can approximate the disk space requirements. On error, or if the user cancels the copy (only possible when /SILENT was omitted), the error flag is set. If /FILESONLY is specified, only files are copied.\n\nFully-qualified path names should always be used with this instruction. Using relative paths will have unpredictable results.\n\nCreates (recursively if necessary) the specified directory. The error flag is set if the directory couldn't be created.\n\nYou should always specify an absolute path.\n\nCreates a shortcut 'link.lnk' that links to 'target.file', with optional parameters 'parameters'. You must specify an absolute path to the .lnk file. The icon used for the shortcut is 'icon.file,icon_index_number'; for default icon settings use empty strings for both icon.file and icon_index_number. start_options should be one of: SW_SHOWNORMAL, SW_SHOWMAXIMIZED, SW_SHOWMINIMIZED, or an empty string. keyboard_shortcut should be in the form of 'flag|c' where flag can be a combination (using |) of: ALT, CONTROL, EXT, or SHIFT. c is the character to use (a-z, A-Z, 0-9, F1-F24, etc). Note that no spaces are allowed in this string. A good example is \"ALT|CONTROL|F8\". $OUTDIR is stored as the shortcut's working directory property. You can change it by using SetOutPath before creating the shortcut or use /NoWorkingDir if you don't need to set the working directory property. description should be the description of the shortcut, or comment as it is called under XP. The error flag is set if the shortcut cannot be created (i.e. either of the paths (link or target) does not exist, or some other error).\n\nGets the Windows version as reported by GetVersionEx. WinVer.nsh is the preferred method for performing Windows version checks.\n\nGets the version information from the DLL (or any other executable containing version information) in \"filename\". Sets the user output variables with the high and low dwords of version information on success; on failure the outputs are empty and the error flag is set. The following example reads the DLL version and copies a human readable version of it into $0:\n\nThis is similar to GetDLLVersion, only it acts on the system building the installer (it actually compiles into two StrCpy commands). Sets the two output variables with the DLL version information of the DLL on the build system. Use !getdllversion if you need to use the values with VIProductVersion.\n\nGets the last write time of \"filename\". Sets the user output variables with the high and low dwords of the FILETIME timestamp on success; on failure the outputs are empty and the error flag is set.\n\nThis is similar to GetFileTime, only it acts on the system building the installer (it actually compiles into two StrCpy commands). Sets the two output variables with the file timestamp of the file on the build system.\n\nGet the path of a known folder. The error flag is set and the output variable is empty if the call fails or the knownfolderid guid is not available. This function is only able to resolve known folders on Windows Vista or higher.\n\nAssign the full path of the file specified to user variable $x. If the path portion of the parameter is not found, the error flag will be set and $x will be empty. If /SHORT is specified, the path is converted to the short filename form. However, if /SHORT is not specified, the path isn't converted to its long filename form. To get the long filename, call GetLongPathName using the System plug-in. Note that GetLongPathName is only available on Windows 98, Windows 2000 and above.\n\nAssign to the user variable $x, the name of a temporary file. The file will be created for you and it will be empty. The name of the temporary file is guaranteed to be unique. If to want the temporary file to be created in another directory other than the Windows temp directory, specify a base_dir. You should Delete the file when you are done with it.\n\nAssign to the user variable $x, the full path of the file named by the second parameter. The error flag will be set and $x will be empty if the file cannot be found. Uses SearchPath() to search the system paths for the file.\n\nSets the file attributes of 'filename'. Valid attributes can be combined with | and are:\nâ€¢ NORMAL or FILE_ATTRIBUTE_NORMAL (you can use 0 to abbreviate this)\n\nThe error flag will be set if the file's attributes cannot be set (i.e. the file doesn't exist, or you don't have the right permissions). You can only set attributes. It's not possible to unset them. If you want to remove an attribute use NORMAL. This way all attributes are erased. This command doesn't support wildcards.\n\nLoads the specified DLL and calls DllRegisterServer (or entrypoint_name if specified). The error flag is set if an error occurs (i.e. it can't load the DLL, initialize OLE, find the entry point, or the function returned anything other than ERROR_SUCCESS (=0)).\n\nUse SetOutPath to set the current directory for DLLs that depend on other DLLs that are now in the path or in the Windows directory. For example, if foo.dll depends on bar.dll which is located in $INSTDIR use:\n\nLoads the specified DLL and calls DllUnregisterServer. The error flag is set if an error occurs (i.e. it can't load the DLL, initialize OLE, find the entry point, or the function returned anything other than ERROR_SUCCESS (=0)).\n\nCancels the install, stops execution of script, and displays user_message in the status display. Note: you can use this from Callback functions to do special things. Page callbacks also uses Abort for special purposes.\n\nCalls the function named function_name, the label named label_name, or a variable that specifies an address. An address is returned by GetCurrentAddress, GetFunctionAddress or GetLabelAddress. A call returns when it encounters a Return instruction. Sections and functions are automatically ended with a Return instruction. Uninstall functions cannot be called from installer functions and sections, and vice-versa.\n\nGets the address of the current instruction (the GetCurrentAddress) and stores it in the output user variable. This user variable then can be passed to Call or Goto.\n\nGets the address of the function and stores it in the output user variable. This user variable then can be passed to Call or Goto. Note that if you Goto an address which is the output of GetFunctionAddress, your function will never be returned to (when the function you Goto'd to returns, you return instantly).\n\nGets the address of the label and stores it in the output user variable. This user variable then can be passed to Call or Goto. Note that you may only call this with labels accessible from your function, but you can call it from anywhere (which is potentially dangerous). Note that if you Call the output of GetLabelAddress, code will be executed until it Return's (explicitly or implicitly at the end of a function), and then you will be returned to the statement after the Call.\n\nIf label is specified, goto the label 'label_to_jump_to:'.\n\nIf +offset or -offset is specified, jump is relative by offset instructions. Goto +1 goes to the next instruction, Goto -1 goes to the previous instruction, etc.\n\nIf a user variable is specified, jumps to absolute address (generally you will want to get this value from a function like GetLabelAddress). Compiler flag commands and SectionIn aren't instructions so jumping over them has no effect.\n\nWill \"return\" true if the installation has been aborted. This can happen if the user chose abort on a file that failed to create (or overwrite) or if the user aborted by hand. This function can only be called from the leave function of the instfiles page.\n\nChecks and clears the error flag, and if it is set, it will goto jumpto_iferror, otherwise it will goto jumpto_ifnoerror. The error flag is set by other instructions when a recoverable error (such as trying to delete a file that is in use) occurs.\n\nChecks for existence of file(s) file_to_check_for (which can be a wildcard, or a directory), and Gotos jump_if_present if the file exists, otherwise Gotos jump_otherwise. If you want to check to see if a file is a directory, use IfFileExists DIRECTORY\\*.*\n\nChecks the reboot flag, and jumps to jump_if_set if the reboot flag is set, otherwise jumps to jump_if_not_set. The reboot flag can be set by Delete and Rename, or manually with SetRebootFlag.\n\nChecks the silent flag, and jumps to jump_if_silent if the installer is silent, otherwise jumps to jump_if_not. The silent flag can be set by SilentInstall, SilentUninstall, SetSilent and by the user passing /S on the command line.\n\nChecks if SetShellVarContext is set to all.\n\nWarning: Do not call this in [un].onInit because the language file has not been fully initialized.\n\nCompares two integers val1 and val2. If val1 and val2 are equal, Gotos jump_if_equal, otherwise if val1 < val2, Gotos jump_if_val1_less, otherwise if val1 > val2, Gotos jump_if_val1_more.\n\nSame as IntCmp, but treats the values as unsigned integers.\n\nSame as IntCmp, but treats the values as 64-bit integers.\n\nThis function is only available when building a 64-bit installer.\n\nSame as IntCmp, but treats the values as 64-bit unsigned integers.\n\nThis function is only available when building a 64-bit installer.\n\nSame as IntCmp, but treats the values as pointer sized integers.\n\nSame as IntCmp, but treats the values as pointer sized unsigned integers.\n\nDisplays a MessageBox containing the text \"messagebox_text\". mb_option_list must be one or more of the following, delimited by |s (e.g. MB_YESNO|MB_ICONSTOP).\nâ€¢ MB_OK - Display with an OK button\nâ€¢ MB_OKCANCEL - Display with an OK and a cancel button\nâ€¢ MB_YESNO - Display with yes and no buttons\nâ€¢ MB_YESNOCANCEL - Display with yes, no, cancel buttons\n\nReturn_check can be 0 (or empty, or left off), or one of the following:\n\nIf the return value of the MessageBox is return_check, the installer will Goto jumpto.\n\nUse the /SD parameter with one of the return_check values above to specify the option that will be used when the installer is silent. See section 4.12 for more information.\n\nCauses the installer to exit as soon as possible. After Quit is called, the installer will exit (no callback functions will get a chance to run).\n\nCompares (case insensitively) str1 to str2. If str1 and str2 are equal, Gotos jump_if_equal, otherwise Gotos jump_if_not_equal.\n\nSame as StrCmp, but case sensitive.\n\nOpens a file named \"filename\" and sets the handle output variable with the handle. The openmode should be one of \"r\" (read) \"w\" (write, all contents of file are destroyed) or \"a\" (append, meaning opened for both read and write, contents preserved). In all open modes, the file pointer is placed at the beginning of the file. If the file cannot be opened the handle output is set to empty and the error flag is set.\n\nIf no absolute path is specified the current folder will be used. The current folder is the folder set using the last SetOutPath instruction. If you have not used SetOutPath the current folder is $EXEDIR.\n\nReads a string (ANSI characters) from a file opened with FileOpen. The string is read until either a newline (or carriage return newline pair) occurs, or until a null byte is read, or until maxlen is met (if specified). By default, strings are limited to 1024 characters (a special build with larger NSIS_MAX_STRLEN can be compiled or downloaded). If the end of file is reached and no more data is available, the output string will be empty and the error flag will be set.\n\nUnicode: DBCS text is supported but conversion output is limited to UCS-2/BMP, surrogate pairs are not supported. The system default ANSI codepage (ACP) is used during the conversion.\n\nThis function is only available when building a Unicode installer.\n\nReads a string (UTF-16LE characters) from a file opened with FileOpen. The string is read until either a newline (or carriage return newline pair) occurs, or until a null wide-character is read, or until maxlen is met (if specified). By default, strings are limited to 1024 characters (a special build with larger NSIS_MAX_STRLEN can be compiled or downloaded). If the end of file is reached and no more data is available, the output string will be empty and the error flag will be set. If present, the BOM at the start of the file is skipped.\n\nReads a byte from a file opened with FileOpen. The byte is stored in the output as an integer (0-255). If the end of file is reached and no more data is available, the output will be empty and the error flag will be set.\n\nThis function is only available when building a Unicode installer.\n\nReads a word (2-bytes) from a file opened with FileOpen. The word is stored in the output as an integer (0-65535). If the end of file is reached and no more data is available, the output will be empty and the error flag will be set.\n\nSeeks a file opened with FileOpen. If mode is omitted or specified as SET, the file is positioned to \"offset\", relative to the beginning of the file. If mode is specified as CUR, then the file is positioned to \"offset\", relative to the current file position. If mode is specified as END, then the file is positioned to \"offset\", relative to the end of the file. If the final parameter \"new position\" is specified, the new file position will be stored in that variable.\n\nWrites an ANSI string to a file opened with FileOpen. If an error occurs writing, the error flag will be set.\n\nThis function is only available when building a Unicode installer.\n\nWrites a Unicode (UTF-16LE) string to a file opened with FileOpen. If an error occurs, the error flag will be set. A BOM can be added to empty files with /BOM.\n\nWrites the integer interpretation of 'string' to a file opened with FileOpen. The error flag is set if an error occurs while writing. The following code writes a \"Carriage Return / Line Feed\" pair to the file.\n\nNote that only the low byte of the integer is used, i.e. writing 256 is the same as writing 0, etc.\n\nThis function is only available when building a Unicode installer.\n\nWrites the integer interpretation of 'string' as a WORD (2-bytes, range: 0-65535) to a file opened with FileOpen. The error flag is set if an error occurs while writing. The following code writes a \"Carriage Return / Line Feed\" pair to the file.\n\nNote that only the low WORD of the integer is used, i.e. writing 65536 is the same as writing 0, etc.\n\nPerforms a search for 'filespec', placing the first file found in filename_output (a user variable). It also puts the handle of the search into handle_output (also a user variable). If no files are found, both outputs are set to empty and the error flag is set. FindClose must be used to close the handle. Note that the filename output is without path.\n\nContinues a search began with FindFirst. handle should be the handle_output_variable returned by FindFirst. If the search is completed (there are no more files), filename_output is set to empty and the error flag is set. Note that the filename output is without path.\n\nWrites the uninstaller to the filename (and optionally path) specified. Only valid from within an install section or function and requires that you have an uninstall section in your script. You can call this one or more times to write out one or more copies of the uninstaller.\n\nReturns the last error level set by SetErrorLevel or -1 if it has never been set.\n\nUse in the leave function of a directory page. Reads the flag set if 'DirVerify leave' is used. Possible values:\n\n2: Not enough space on installation drive\n\nInitializes the plug-ins dir ($PLUGINSDIR) if not already initialized.\n\nSets the error level of the installer or uninstaller to error_level. See Error Levels for more information.\n\nWarning: -1 is reserved for internal use. Negative numbers should be avoided for compatibility with batch scripts.\n\nSets the context of $SMPROGRAMS and other shell folders. If set to 'current' (the default), the current user's shell folders are used. If set to 'all', the 'all users' shell folder is used. The all users folder may not be supported on all OSes. If the all users folder is not found, the current user folder will be used. Please take into consideration that a \"normal user\" has no rights to write in the all users area. Only admins have full access rights to the all users area. You can check this by using the UserInfo plug-in. See Contrib\\UserInfo\\UserInfo.nsi for an example.\n\nNote that, if used in installer code, this will only affect the installer, and if used in uninstaller code, this will only affect the uninstaller. To affect both, it needs to be used in both.\n\nPauses execution in the installer for sleeptime_in_ms milliseconds. sleeptime_in_ms can be a variable, e.g. \"$0\" or a number, i.e. \"4321\".\n\nSets the user variable $x with str. str can contain variables (including the user variable being set (concatenating strings this way is possible, etc)). If maxlen is specified, the string will be a maximum of maxlen characters (if maxlen is negative, the string will be truncated abs(maxlen) characters from the end). If start_offset is specified, the source is offset by it (if start_offset is negative, it will start abs(start_offset) from the end of the string).\n\nSets user variable $x to the length of str.\n\nThe stack is a temporary storage area useful for saving the state of registers/variables and for communicating with functions and plug-ins. See Wikipedia for a general introduction to stacks.\n\nWhen no parameter is specified, exchanges the top two elements of the stack. When a parameter is specified and is a user variable, exchanges the top element of the stack with the parameter. When a parameter is specified and is a positive integer, Exch will swap the item on the top of the stack with the item that is specified by the offset from the top of the stack in the parameter. If there are not enough items on the stack to accomplish the exchange, a fatal error will occur (to help you debug your code :).\n\nPops a string off of the stack into user variable $x. If the stack is empty, the error flag will be set.\n\nPushes a string onto the stack. The string can then be Pop'ed off of the stack.\n\nFormats the number in \"numberstring\" using the format \"format\", and sets the output to user variable $x. The format string supports the same syntax as wsprintf except that the length fields and the type are not supported. Example format strings include \"%08X\" and \"%u\".\n\nSupports the and length fields and the type in addition to the syntax supported by .\n\nThis function is only available when building a 64-bit installer.\n\nCombines value1 and (depending on OP) value2 into the specified user variable ( ). OP is defined as one of the following:\n\nCombines value1 and (depending on OP) value2 into the specified user variable ( ). OP is the same list of operators as supported by .\n\nReboots the computer. Be careful with this one. If it fails, .onRebootFailed is called. In any case, this instruction never returns, just like Quit.\n\nSets the reboot flag to either true or false. The flag's value can be read using IfRebootFlag.\n\nSets whether install logging to $INSTDIR\\install.log will happen. $INSTDIR must have a value before you call this function or it will not work. Note that the NSIS_CONFIG_LOG build setting must be set ( ) when building (it is not set by default) to support this. See Building NSIS for more information about recompiling NSIS.\n\nIf installer logging is enabled, inserts text \"text\" into the log file.\n\nSets the section's flags. The flag is a 32-bit integer. The first bit (lowest) represents whether the section is currently selected, the second bit represents whether the section is a section group (don't modify this unless you really know what you are doing), the third bit represents whether the section is a section group end (again, don't modify), the fourth bit represents whether the section is shown in bold or not, the fifth bit represents whether the section is read-only, the sixth bit represents whether the section group is to be automatically expanded, the seventh bit is set for section groups which are partially selected, the eighth bit is internally used for partially selected section group toggling and the ninth bit is used for reflecting section name changes. The error flag will be set if an out of range section is specified.\n\nEach flag has a name, prefixed with `SF_`:\n\nFor an example of usage please see the one-section.nsi example.\n\nFor more useful macros and definitions, see Include\\Sections.nsh.\n\nRetrieves the section's flags. See SectionSetFlags for a description of the flags. The error flag will be set if an out of range section is specified.\n\nSets the description for the section section_index. If the text is set to \"\" then the section will be hidden. The error flag will be set if an out of range section is specified.\n\nStores the text description of the section section_index into the output. If the section is hidden, stores an empty string. The error flag will be set if an out of range section is specified.\n\nSets the install types the section specified by section_index defaults to the enabled state in. Note that the section index starts with zero. Every bit of inst_types is a flag that tells if the section is in that install type or not. For example, if you have 3 install types and you want the first section to be included in install types 1 and 3, then the command should look like this:\n\nbecause the binary value for 5 is \"...00101\". The error flag will be set if the section index specified is out of range.\n\nRetrieves the install types flags array of a section. See above explanation about SectionSetInstTypes for a description of how to deal with the output. The error flag will be set if the section index is out of range.\n\nSets the size of the section specified by section_index. Note that the index starts with zero. The Value for Size must be entered in KiloByte and supports only whole numbers.\n\nGets the size of the section specified by section_index and stores the value in the given user variable. Note that the index starts with zero. The error flag will be set if the section index is out of range.\n\nSets the current InstType. inst_type_idx should be between 0 and 31. The error flag is not set if an out of range InstType was used.\n\nGet the current InstType and stores it in user_var. If the first install type is selected, 0 will be put in user_var. If the second install type is selected, 1 will be put in user_var, and so on. The value of ${NSIS_MAX_INST_TYPES} (32 by default) means that the user selected a custom set of sections (Simply selecting \"Custom\" in the drop-down menu is not enough to trigger this, the value is calculated by the sections actually selected).\n\nSets the text of the specified InstType. If the text is empty then the InstType is removed. By using a previously unused inst_type_idx number you can create new InstTypes. To add/remove Sections to this new InstType see SectionSetInstTypes. Unlike SectionIn the index is zero based, which means the first install type's index is 0.\n\nGets the text of the specified InstType.\n\nMakes the installer window visible and brings it to the top of the window list. If an application was executed that shows itself in front of the installer, BringToFront would bring the installer back in focus.\n\nRecent Windows versions restrict the setting of foreground windows. If the user is working with another application during installation, the user may be notified using a different method.\n\nCreates a font and puts its handle into user_var. For more information about the different parameters have a look at MSDN's page about the Win32 API function CreateFont().\n\nYou can get the current font used by NSIS using the ^Font and ^FontSize LangStrings.\n\nAdds the string \"user_message\" to the details view of the installer.\n\nEnables or disables mouse and keyboard input to the specified window or control. Possible states are 0 (disabled) or 1 (enabled).\n\nSearches for a window. Behaves like Win32's FindWindowEx(). Searches by windowclass (and/or windowtitle if specified). If windowparent or childafter are specified, the search will be restricted as such. If windowclass or windowtitle is specified as \"\", they will not be used for the search. If the window is not found the user variable is set to 0.\n\nRetrieves the handle of a control identified by item_id in the specified dialog box dialog. If you want to get the handle of a control in the inner dialog, first use FindWindow to get the handle of the inner dialog.\n\nIf HWND is a window, Gotos jump_if_window, otherwise, Gotos jump_if_not_window (if specified).\n\nLoads and sets a image on a static control. is the handle of the control. must 0 for bitmaps and 1 for icons (and the control style must match the image type). should be 0x10 to load from a file or 0 to load from a resource. specifies the file path or resource name. Use to load a resource from the installer .EXE. Use if is a string, otherwise it is interpreted as a number. Use to resize the image to the dimensions of the control. can optionally receive the handle of the loaded image.\n\nImages loaded on individual pages should be destroyed to minimize resource leaks. If images are loaded into the same control multiple times, the previous image will only be destroyed if it is a bitmap image. Previous icons and 32-bit ARGB bitmaps must be retrieved with and destroyed.\n\nLockWindow on prevents the main window from redrawing itself upon changes. When LockWindow off is used, all controls that weren't redrawn since LockWindow on will be redrawn. This makes the pages flickering look nicer because now it flickers a group of controls at the same time, instead of one control at a time. The individual control flickering is more noticeable on old computers.\n\nSends a message to HWND. If a user variable $x is specified as the last parameter (or one before the last if you use /TIMEOUT), the return value from SendMessage will be stored in it. Note that when specifying 'msg' you must just use the integer value of the message. Include WinMessages.nsh to have all Windows messages defined in your script. If you wish to send strings use \"STR:a string\" as wParam or lParam where needed. Use /TIMEOUT=time_in_ms to specify the duration, in milliseconds, of the time-out period.\n\nOverrides the default auto window-closing flag (specified for the installer using AutoCloseWindow, and false for the uninstaller). Specify 'true' to have the install window immediately disappear after the install has completed, or 'false' to make it require a manual close.\n\nSets the current bitmap file displayed as the branding image. If no IMGID is specified, the first image control found will be used, or the image control created by AddBrandingImage. Note that this bitmap must be present on the user's machine. Use first to put it there. If /RESIZETOFIT is specified the image will be automatically resized (very poorly) to the image control size. If you used AddBrandingImage you can get this size by compiling your script and watching for AddBrandingImage output, it will tell you the size. SetBrandingImage will not work when called from .onInit!\n\nShows or hides the details on the InstFiles page, depending on which parameter you pass. Overrides the default details view, which is set via ShowInstDetails.\n\nSets mode at which commands print their status. None has commands be quiet, listonly has status text only added to the listbox, textonly has status text only printed to the status bar, and both enables both (the default). For extracting many small files, textonly is recommended (especially on Win9x with smooth scrolling enabled).\n\nSets the text and background color of a static control, edit control, button or a dialog. text_color and bg_color don't accept variables. Use GetDlgItem to get the handle (HWND) of the control. To make the control transparent specify as the background color value. Prefix the color value with to specify a Windows constant. You can also specify with or without text color and background color to make the control completely gray (or any other color you choose). This is used by the branding text control in the MUI.\n\nSets the installer to silent mode or normal mode. See SilentInstall for more information about silent installations. Can only be used in .onInit.\n\nSets the visibility of a window. Possible show_states are the same as the Windows ShowWindow function. SW_* constants are defined in Include\\WinMessages.nsh.\n\nLoads a language file for the construction of a language table. All of the language files that ship with NSIS are in Contrib\\Language Files\n\nAfter you have inserted the language file ${LANG_langfile} will be defined as the language id (for example, ${LANG_ENGLISH} will be defined as 1033). Use it with LangString, LicenseLangString, LangDLL and VIAddVersionKey.\n\nDefines a multilingual string. This means its value may be different (or not, it's up to you) for every language. It allows you to easily make your installer multilingual without the need to add massive switches to the script.\n\nEach language string has a name that identifies it and a value for each language used by the installer. They can be used in any runtime string in the script. To use a language string all you need to add to the string is $(LangString_name_here) where you want the LangString to be inserted.\nâ€¢ Unlike defines that use curly braces - {}, language strings use parenthesis - ().\nâ€¢ If you change the language in the .onInit function, note that language strings in .onInit will still use the detected language based on the user's default Windows language because the language is initialized after .onInit.\nâ€¢ Always set language strings for every language in your script.\nâ€¢ If you set the language ID to 0 the last used language by LangString or LoadLanguageFile will be used.\n\nDoes the same as LangString only it loads the string from a text/RTF file and defines a special LangString that can only be used by LicenseData.\n\nAs of version 2 NSIS fully supports multiple languages. The interface of one installer can support multiple languages.\n\nUse LoadLanguageFile for every language to load the default interface texts and language properties. Visit the NSIS translations forum for more information about creating new language files.\n\nThe default interface texts can easily be changed using instructions like ComponentText etc.\n\nYou can also use the contents of the standard language strings in your own strings (for example, $(^Name) contains the installer's name set using the Name instruction). The names of all standard language strings are listed as comments just above the strings in the language files. The language files are located in Contrib\\Language Files.\n\nTo create your own language strings, use LangString.\n\nFor an example of an installer with multiple languages, see languages.nsi.\n\nWhen the installer starts up it goes through these steps to select the interface language:\nâ€¢ If there is no perfect match, find a primary language match\nâ€¢ If there is no match, use the first language defined in the script (make sure your first language is a common one like English)\nâ€¢ If the language variable $LANGUAGE has changed during .onInit, NSIS goes through steps 2 to 4 again.\n\nThe LangDLL plug-in allows you to give the user an option to choose the language of the installer. Just push the language id (${LANG_langfile}) and its name for every language in your installer, then the number of languages pushed, the caption, and the text that tells the user to select the language, call the plug-in function named LangDialog, pop the returned value into $LANGUAGE and you're good to go. If the user clicks on the cancel button the return value will be \"cancel\".\n\nFor an example of usage see languages.nsi.\n\nRTL languages are languages that are written from right to left (e.g. Arabic and Hebrew). NSIS fully supports RTL languages. In the language file there is a place to specify if the language is RTL or not. To find out at runtime if the current language is RTL or not, check the value of the $(^RTL) language string. It will be 1 if the language is RTL and 0 otherwise. This can be useful when using plug-ins that create dialogs, they usually have RTL settings too.\n\nThe abilities of the NSIS scripting language can be extended by utilising functionality provided in a DLL file. Probably the best known example of this is the InstallOptions.dll bundled with every NSIS release.\n\nWhen the NSIS compiler starts it scans the plug-ins directory for DLLs and makes a list of the plug-ins found and their exported functions. During compilation, if a sequence such as fred::flintstone is encountered where the compiler expected to find a language keyword the compiler will look through this list. If a list entry specifies that fred.dll exports function flintstone NSIS will pack the fred.dll file into the created installer binary.\n\nDuring execution of a plug-in command NSIS will unpack the necessary DLL to a temporary folder ($PLUGINSDIR), push all of the arguments specified (right-to-left order), and then execute the DLL function.\n\nA plug-in call looks like this:\n\nAll parameters are pushed onto the stack (in this case, the plug-in function only needs one parameter). Some plug-in commands may not need any parameters on the stack, others might require more of them. To use a plug-in command you will need to read the documentation for the plug-in so that you know what parameters its functions require.\n\nIf you want to call a plug-in that is stored on user's hard drive or somewhere else, use CallInstDLL. Almost all plug-ins provide installer functionality, so using plug-in commands is way easier. Using CallInstDLL can be useful when you have created plug-ins that are linked to a certain version of your application and are being copied to the installation folder.\n\nSilent installers are installers which require no user intervention and have no user interface. The user doesn't see any dialog and isn't asked any questions. This is useful for network administrators who wish to install or uninstall something without user intervention so they can perform the operation quickly over any number of computers. It is also useful for other developers who wish to embed another installer in their own and collect all of the required information on their installer instead of showing two installers.\n\nNSIS installers and uninstallers can be both silent and not silent. When an installer or an uninstaller is silent, not all callback functions are called. .onGUIInit, .onGUIEnd, their uninstaller equivalents and any callback related to a specific page or page type will not be called.\n\nThere are several methods to make an installer or an uninstaller silent:\n\nTo check if the installer/uninstaller is silent use IfSilent.\n\nTo make sure your installer will be silent when it needs to, you should check with IfSilent before each command that might require user intervention or create a window. The MessageBox command, which is the most common culprit in silent installers, has the /SD switch to set a default answer for silent installers. If you want your installer/uninstaller to be able to be completely silent you should use this switch. All internal NSIS message boxes have defaults for silent installers. The silent.nsi example demonstrates all aspects of this topic.\n\nSince the directory page is not shown in silent installers the user has an option to specify the installation directory on the command line (this also works on non-silent installers/uninstallers). To do that, the user uses the /D switch as in the following example:\n\nIf your installer/uninstaller requires some more information that can not be gathered when silent, you can allow the user to specify that information on the command line and process it in .onInit. You can use GetOptions.\n\nThe above example will copy the value the user passes on after /USERNAME= into $0. This allows the user to specify the required information on the command line instead of using the interactive user interface. The user can use:\n\nIf your installer/uninstaller requires a lot of information and you want it to be able to be silent, you should allow the user to pass on a path to an answers file. This would be much more comfortable than writing all of the information on the command line."
    },
    {
        "link": "https://nsis-dev.github.io/NSIS-Forums/html/t-148134.html",
        "document": "$INSTDIR is a run-time variable that contains the installation folder, it can be modified while your installer is running.\n\n\n\n${BLA} is a compile-time define, it will be replaced by the value you have defined by the compiler (it does not change the actual installer, only makes scripting easier).\n\nNo, $INSTDIR is NOT an onstant. It's a variable, it will be changed during the execution of the installer. You can also define your own variables (like $BLA).\n\n\n\n${SOMETHING} is a compile-time defined symbol. When you compile your script, it will be replaced by the defined value. Example:\n\n\n\n!define SOMETHING \"my text\"\n\nMessageBox MB_OK \"${SOMETHING}\"\n\n\n\n${SOMETHING} will be replaced by the compiler, you will get:\n\n\n\nMessageBox MB_OK \"my text\"\n\nIf you did this...\n\n!define SOMETHING \"my text\"\n\nSection\n\nMessageBox MB_OK \"$SOMETHING\"\n\nSectionEnd\n\nThe MessageBox would simply display \"$SOMETHING\" and not \"my text\".\n\nYou would probably also get a compile error saying \"Unknown variable $SOMETHING, ignored\" or similar, because $SOMETHING has not been set using Var.\n\n\n\nThis would work...\n\n!define SOMETHING \"my text\"\n\nSection\n\nMessageBox MB_OK \"${SOMETHING}\"\n\nSectionEnd\n\n\n\nSo would this...\n\nVar SOMETHING\n\nSection\n\nStrCpy $SOMETHING \"my text\"\n\nMessageBox MB_OK \"$SOMETHING\"\n\nSectionEnd\n\n\n\nAnd so would this...\n\n!define SOMETHING $9\n\nSection\n\nStrCpy ${SOMETHING} \"my text\"\n\nMessageBox MB_OK \"${SOMETHING}\"\n\nSectionEnd\n\nHere ${SOMETHING} is set as a NSIS variable for its constant, which means that it is variable (changeable during run-time).\n\n\n\nThe difference is that with !define SOMETHING \"my text\" you will not be able to modify the contents of ${SOMETHING} whereas with $SOMETHING, you can.\n\n\n\nVariable obviously means it can change variably.\n\nConstant obviously means it cannot change, and stays the same constantly.\n\n\n\nFrom the descriptions above, you can recognise the difference easily, even if you have none or little programming knowledge.\n\n\n\n-Stu\n\nthanks a lot people,\n\nthis nsis is great, i was using wise and turned to nsis just today,\n\nthe old size was 210kb, now it's 69kb only!!!!!1"
    },
    {
        "link": "https://nsis.sourceforge.io/Docs/Chapter1.html",
        "document": "The installer is your application's first impression. Slow or unsuccessful software installations is one of the most irritating computer problems. A quick and user friendly installer is therefore an essential part of your software product. NSIS (Nullsoft Scriptable Install System) is a tool that allows programmers to create such installers for Windows. It is released under an open source license and is completely free for any use.\n\nNSIS creates installers that are capable of installing, uninstalling, setting system settings, extracting files, etc. Because it's based on script files you can fully control every part of your installer. The scripting language supports variables, functions and string manipulation, just like a normal programming language - but designed for the creation of installers. Even with all these features, NSIS is still the smallest installer system available. With the default options, it has an overhead of only 34 KB.\n\nNSIS has been designed to be small, fast and efficient. While other installers often add hundreds of kilobytes or several megabytes to your installer data, a fully featured NSIS installer has a overhead of only 34 KB.\n\nYou can create a single installer that is compatible with Windows 95, 98, ME, NT4, 2000, XP, 2003, Vista, Server 2008, 7, Server 2008R2, 8, Server 2012, 8.1, Server 2012R2 and Windows 10.\n\nYou can choose between three different integrated compression methods (ZLib, BZip2, LZMA). LZMA compression gives better results than any other common compression method. You don't have to use large self-extracting archive modules or other applications, the compression support is included in the 34 KB overhead.\n\nUnlike other systems that can only generate installers based on a list of files and registry keys, NSIS has a powerful scripting language. This script language is designed for installers and has commands that help you to perform many installation tasks. You can easily add custom logic and handle different upgrades, version checks and more. On the NSIS Wiki you can find a lot more.\n\nOne installer can support multiple interface languages. More than 60 translations are already included and you can also create your own language files. RTL (right-to-left) languages such as Arabic and Hebrew are fully supported. Creating a Unicode native installer is also possible, targeting all the languages supported by the OS without display issues.\n\nMany features and checks for the target system\n\nThe script language provides commands you can use on the target system. From simple features like folder creation and registry editing to text/binary file modification, modification of environment variables and system reboots. By using one of the provided plug-ins you can even call the Windows API directly.\n\nYou can create custom wizard pages to get user input or integrate configuration options. NSIS includes a classic and modern wizard interface, but it is even possible to create your own custom interface.\n\nNSIS can be extended with plug-ins that can communicate with the installer. They can be written in C, C++, Delphi or another language and can be used to perform installation tasks or extend the installer interface. You can use the plug-in with a single line of script code. Plug-ins are also be compressed like other installation data and will only be included when you are using their features.\n\nThe NSIS distribution includes a set of plug-ins that allow you to download files from the internet, make internet connections, patch existing files and more.\n\nThe NSIS compiler features a powerful preprocessor. This allows you to easily integrate multiple projects into a single installer or automatically generate installer builds. You can also generate different releases such as lite and full versions.\n\nThe NSIS script format and the format used for interface dialogs are easy, documented and humanly readable, so you can edit your files with your favorite editor. This also makes automatic script generation possible.\nâ€¢ Support for ZLIB, BZIP2 and LZMA data compression (files can be compressed individually or together)\nâ€¢ Fully multilingual, support for multiple languages in one installer. More than 60 translations are available, but you can also create your own. Unicode support allowing even more languages.\nâ€¢ Page system: You can add standard wizard pages or custom pages\nâ€¢ Ability to display a license agreement in text or RTF format\nâ€¢ Ability to detect destination directory from the registry\nâ€¢ Easy to use plug-in system (lots of plug-ins for creation of custom dialogs, internet connections, HTTP downloading, file patching, Win32 API calls etc. are included)\nâ€¢ Installers can be as large as 2GB\nâ€¢ A lovely coding experience with elements of PHP and assembly (includes user variables, a stack, real flow control, etc.)\nâ€¢ Installers have their own VMs that let you write code that can support:\nâ€¢ Window finding based on class name or title\nâ€¢ Completely free for any use. See license.\n\nStarting with NSIS v3.0 you can choose to create Unicode installers by setting the Unicode attribute. These installers will not work on Windows 95/98/ME but they will allow you to display your installer in any Unicode language supported by the OS.\n\nWhen building a Unicode installer NSIS variables can hold Unicode characters (0001-FFFF). There should be no need to modify your existing scripts. If you want to read/write Unicode files, specific instructions have been added to read/write UTF-16LE strings from/to disk."
    },
    {
        "link": "https://stackoverflow.com/questions/7015079/how-do-i-use-a-constant-to-specify-a-file-path-in-nsis",
        "document": "I'd like to use a constant to specify the directory where the files to be installed live, like this:\n\nThis causes the following error message (in emacs, using nsis-mode):"
    },
    {
        "link": "https://documentation.help/CTRE-NSIS/Section4.2.html",
        "document": "All variables are global and can be used in Sections or Functions. Note that by default, variables are limited to 1024 characters. To extend this limit, build NSIS with a bigger value of the NSIS_MAX_STRLEN build setting or use the special build.\n\nUser variables must be declared with the Var command. You can use these variables to store values, work with string manipulation etc.\n\nDeclare a user variable. Allowed characters for variables names: [a-z][A-Z][0-9] and '_'. All defined variables are global, even if defined in a section or a function. To make this clear, variables defined in a section or a function must use the /GLOBAL flag. The /GLOBAL flag is not required outside of sections and functions.\n\nRegisters. These variables can be used just like user variables, but are usually used in shared functions or macros. You don't have to declare these variables so you won't get any name conflicts when using them in shared code. When using these variables in shared code it's recommended that you use the stack to save and restore their original values. These variables can also be used for communication with plug-ins because they can be read and written by the plug-in DLLs.\n\nThe installation directory ($INSTDIR is modifiable using StrCpy, ReadRegStr, ReadINIStr, etc. - This could be used, for example, in the .onInit function to do a more advanced detection of install location).\n\nNote that in uninstaller code, $INSTDIR contains the directory where the uninstaller lies. It does not necessarily contain the same value it contained in the installer. For example, if you write the uninstaller to $WINDIR and the user doesn't move it, $INSTDIR will be $WINDIR in the uninstaller. If you write the uninstaller to another location, you should keep the installer's $INSTDIR in the registry or an alternative storing facility and read it in the uninstaller.\n\nThe command line of the installer. The format of the command line can be one of the following:\nâ€¢ For parsing out the PARAMETER portion, see GetParameters. If /D= is specified on the command line (to override the install directory) it won't show up in $CMDLINE.\n\nThe identifier of the language that is currently used. For example, English is 1033. You can only change this variable in .onInit.\n\nConstants can also be used in the InstallDir attribute.\n\nNote that some of the new constants will not work on every OS. For example, $CDBURN_AREA will only work on Windows XP and above. If it's used on Windows 98, it'll be empty. Unless mentioned otherwise, a constant should be available on every OS.\n\nThe program files directory (usually but detected at runtime). On Windows x64, $PROGRAMFILES and $PROGRAMFILES32 point to while $PROGRAMFILES64 points to . Use $PROGRAMFILES64 when installing x64 applications.\n\nThe common files directory. This is a directory for components that are shared across applications (usually but detected at runtime). On Windows x64, $COMMONFILES and $COMMONFILES32 point to while $COMMONFILES64 points to . Use $COMMONFILES64 when installing x64 applications.\n\nThe Windows desktop directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe directory containing the installer executable (technically this is a variable and you can modify it, but it is probably not a good idea).\n\nThe base name of the installer executable.\n\nThe full path of the installer executable.\n\nA symbol that contains the path where NSIS is installed. Useful if you want to reference resources that are in NSIS directory e.g. Icons, UIs etc.\n\nWhen compiled with support for keeping makensis and the data in the same place (the default on Windows), it is in the same place as makensis, on other platforms it is set at compile time (See the INSTALL file for info). In both instances you can modify it at runtime by setting the NSISDIR environment variable. See section 3.1.3 for more info.\n\nThe Windows directory (usually or but detected at runtime).\n\nThe Windows system directory (usually or but detected at runtime).\n\nThe start menu folder (useful for adding start menu items using CreateShortcut). The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe start menu programs folder (use this whenever you want $STARTMENU\\Programs). The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe start menu programs / startup folder. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe quick launch folder for IE4 active desktop and above. If quick launch is not available it simply returns the same as $TEMP.\n\nThe documents directory. A typical path for the current user is . The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 is installed.\n\nThe directory that contains Send To menu shortcut items.\n\nThe directory that contains shortcuts to the user's recently used documents.\n\nThe directory that contains shortcuts to the user's favorite websites, documents, etc. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 is installed.\n\nThe user's music files directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows XP, ME and above.\n\nThe user's picture files directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows 2000, XP, ME and above.\n\nThe user's video files directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows XP, ME and above.\n\nThe directory that contains link objects that may exist in the My Network Places/Network Neighborhood folder.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 with Active Desktop is installed.\n\nThe document templates directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe application data directory. Detection of the current user path requires Internet Explorer 4 and above. Detection of the all users path requires Internet Explorer 5 and above. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 with Active Desktop is installed.\n\nThis constant is available on Windows 2000 and above.\n\nThe directory that contains link objects that may exist in the Printers folder.\n\nThis constant is not available on Windows 95 and Windows 98.\n\nThis constant is not available on Windows 95 nor Windows NT 4 unless Internet Explorer 4 with Active Desktop is installed.\n\nThis constant is not available on Windows 95 nor Windows NT 4 unless Internet Explorer 4 with Active Desktop is installed.\n\nThis constant is not available on Windows 95 nor Windows NT 4 unless Internet Explorer 4 with Active Desktop is installed.\n\nThe user's profile directory. A typical path is .\n\nThis constant is available on Windows 2000 and above.\n\nA directory where administrative tools are kept. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows 2000, ME and above.\n\nThe resources directory that stores themes and other Windows resources (usually but detected at runtime).\n\nThis constant is available on Windows XP and above.\n\nThe localized resources directory that stores themes and other Windows resources (usually but detected at runtime).\n\nThis constant is available on Windows XP and above.\n\nA directory where files awaiting to be burned to CD are stored.\n\nThis constant is available on Windows XP and above.\n\nHWND of the main window (in decimal).\n\nThe path to a temporary folder created upon the first usage of a plug-in or a call to InitPluginsDir. This folder is automatically deleted when the installer exits. This makes this folder the ideal folder to hold INI files for InstallOptions, bitmaps for the splash plug-in, or any other file that a plug-in needs to work.\n\nUse to represent a newline (\n\n).\n\nUse to represent a tab (\\t)."
    },
    {
        "link": "https://stackoverflow.com/questions/4244497/changing-nsis-installer-properties",
        "document": "I have an NSIS-based installer file called setup.exe. When I go into Properties->Details, many details are missing. When I run the installer, UAC requests for elevated permissions (which is ok), but the publisher is \"Unknown\".\n\nHow can I set these properties in the final setup.exe, preferably by only changing the NSIS installer script itself?"
    },
    {
        "link": "https://nsis.sourceforge.io/Simple_tutorials",
        "document": "If this page is your first experience of NSIS, you will need the NSIS compiler to transform the following scripts, and any others you create, into functioning installers. You can use the NSIS Menu and under the Compiler section click Compile NSI scripts to start MakeNSISW.\n\nThe makensisw.exe in the NSIS installation folder is the actual compiler. It has a graphical front end that explains three ways to load scripts, so it's very easy to use. Once you have installed NSIS, to create an installer, copy a script into a text editor, save the file with a .nsi extension, and load the file into the makensisw compiler.\n\nThis hello world script will create a popup box with the words \"hello world\" in it and an \"OK\" button, when the installer is run\n\nThis hello world script will write \"hello world\" to a text file when the installer is run\n\nThis installer script will copy the file \"test.txt\" to the installation directory. First, create the test.txt file in the same directory as the installer script below then compile the installer script. If the installer script is on the Desktop, delete the test.txt file before running the compiled installer. Running the simple installer installs the test.txt file to the Desktop.\n\nInstall a file and create an uninstaller to remove it\n\nThis script will do the following: create an installer named \"installer.exe\"; install a file named \"test.txt\" to the desktop; create an uninstaller named \"uninstaller.exe\" on the desktop. The uninstaller will remove itself and the installed text file.\n\nThis installer creates a start menu item, nothing more\n\nThis installer will do the following: create an installer named \"installer.exe\"; an uninstaller on the desktop; a shortcut in the start menu that points to the uninstaller.\n\nThis installer just checks the value of the CurrentVersion string for the JRE in the local machine registry using readRegStr. If the result is blank, the JRE is probably not installed.\n\nSometimes, it's necessary to check if an installer's user has administrative privileges. This simple script checks for that using the \"UserInfo\" plugin. There's a more sophisticated alternative at http://forums.winamp.com/showthread.php?threadid=195020, but this method seems to work fine. Another example of UserInfo can be found in the NSIS installation directory under \\Examples\\UserInfo\\UserInfo.nsi."
    },
    {
        "link": "https://stackoverflow.com/questions/3039024/nsis-put-exe-version-into-name-of-installer",
        "document": "NSIS has a Name variable that you define in the script:\n\nIt defines the name of the installer, that gets displayed as the window title, etc.\n\nIs there a way to pull the .NET Version number out of my main EXE and append it to the Name?\n\nSo that my installer name would automatically be 'MyApp V2.2.0.0\" or whatever?"
    },
    {
        "link": "https://nsis.sourceforge.io/Docs/Chapter4.html",
        "document": "A NSIS Script File (.nsi) is just a text file with script code.\n\nCommands lines are in the format 'command [parameters]'\n\nLines beginning with ; or # are comments. You can put comments after commands. You can also use C-style comments to comment one or more lines.\n\nIf you want a parameter to start with ; or # put it in quotes.\n\nIf the first or second line in the file is a comment with the following format, the rest of the file is decoded using the specified character set.\n\nTo call a plug-in, use 'plugin::command [parameters]'. For more info see Plug-in DLLs.\n\nFor parameters that are treated as numbers, use decimal (the number) or hexadecimal (with 0x prepended to it, i.e. 0x12345AB), or octal (numbers beginning with a 0 and no x).\n\nColors should be set in hexadecimal RGB format, like HTML but without the #.\n\nTo represent strings that have spaces, use quotes:\n\nQuotes only have the property of containing a parameter if they surround the rest of the parameter. They can be either single quotes, double quotes, or the backward single quote.\n\nYou can escape quotes using $\\:\n\nIt is also possible to put newlines, tabs etc. in a string using $\\r, $\n\n, $\\t etc. More information...\n\nVariables start with $. User variables must be declared.\n\nTo extend a command over multiple lines, use a backslash (\\) at the end of the line. The next line will effectively be concatenated to the end of it. For example:\n\nLine extension for long commands works for comments as well. It can be a bit confusing, so it should be avoided.\n\nCompiler commands start with a ! and are executed at compile time.\n\nIf a file named \"nsisconf.nsh\" in the config directory exists, it will be included by default before any scripts (unless the /NOCONFIG command line parameter is used). The config directory on Windows is the same directory as makensis.exe is in. On other platforms this is set at install time and defaults to $PREFIX/etc/. You can alter this at runtime, see section 3.1.3 for more information.\n\nAll variables are global and can be used in Sections or Functions. Note that by default, variables are limited to 1024 characters. To extend this limit, build NSIS with a bigger value of the NSIS_MAX_STRLEN build setting or use the special build.\n\nUser variables must be declared with the Var command. You can use these variables to store values, work with string manipulation etc.\n\nDeclare a user variable. Allowed characters for variables names: [a-z][A-Z][0-9], '.' and '_'. All defined variables are global, even if defined in a section or a function. To make this clear, variables defined in a section or a function must use the /GLOBAL flag. The /GLOBAL flag is not required outside of sections and functions.\n\nRegisters. These variables can be used just like user variables, but are usually used in shared functions or macros. You don't have to declare these variables so you won't get any name conflicts when using them in shared code. When using these variables in shared code it's recommended that you use the stack to save and restore their original values. These variables can also be used for communication with plug-ins because they can be read and written by the plug-in DLLs.\n\nThe installation directory ($INSTDIR is modifiable using StrCpy, ReadRegStr, ReadINIStr, etc. - This could be used, for example, in the .onInit function to do a more advanced detection of install location).\n\nNote that in uninstaller code, $INSTDIR contains the directory where the uninstaller lies. It does not necessarily contain the same value it contained in the installer. For example, if you write the uninstaller to $WINDIR and the user doesn't move it, $INSTDIR will be $WINDIR in the uninstaller. If you write the uninstaller to another location, you should keep the installer's $INSTDIR in the registry or an alternative storing facility and read it in the uninstaller.\n\nThe current output directory (set implicitly via SetOutPath or explicitly via StrCpy, ReadRegStr, ReadINIStr, etc)\n\nThe command line of the installer. The format of the command line can be one of the following:\nâ€¢ For parsing out the PARAMETER portion, see GetParameters. If /D= is specified on the command line (to override the install directory) it won't show up in $CMDLINE.\n\nThe identifier of the language that is currently used. For example, English is 1033. You can only change this variable in .onInit.\n\nConstants can also be used in the InstallDir attribute.\n\nNote that some of the new constants will not work on every OS. For example, $CDBURN_AREA will only work on Windows XP and above. If it's used on Windows 98, it'll be empty. Unless mentioned otherwise, a constant should be available on every OS.\n\nThe program files directory (usually but detected at runtime). On 64-bit Windows, $PROGRAMFILES and $PROGRAMFILES32 point to while $PROGRAMFILES64 points to . Use $PROGRAMFILES64 when installing 64-bit applications.\n\nThe common files directory. This is a directory for components that are shared across applications (usually but detected at runtime). On 64-bit Windows, $COMMONFILES and $COMMONFILES32 point to while $COMMONFILES64 points to . Use $COMMONFILES64 when installing 64-bit applications.\n\nThe Windows desktop directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe directory containing the installer executable (technically this is a variable and you can modify it, but it is probably not a good idea).\n\nThe base name of the installer executable.\n\nThe full path of the installer executable.\n\nA symbol that contains the path where NSIS is installed. Useful if you want to reference resources that are in NSIS directory e.g. Icons, UIs etc.\n\nWhen compiled with support for keeping makensis and the data in the same place (the default on Windows), it is in the same place as makensis, on other platforms it is set at compile time (See the INSTALL file for info). In both instances you can modify it at runtime by setting the NSISDIR environment variable. See section 3.1.3 for more info.\n\nThe Windows directory (usually or but detected at runtime).\n\nThe Windows system directory (usually or but detected at runtime).\n\nThe start menu folder (useful for adding start menu items using CreateShortcut). The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe start menu programs folder (use this whenever you want $STARTMENU\\Programs). The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe start menu programs / startup folder. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe quick launch folder for IE4 active desktop and above. If quick launch is not available it simply returns the same as $TEMP.\n\nThe documents directory. A typical path for the current user is . The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 is installed.\n\nThe directory that contains Send To menu shortcut items.\n\nThe directory that contains shortcuts to the user's recently used documents.\n\nThe directory that contains shortcuts to the user's favorite websites, documents, etc. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 is installed.\n\nThe user's music files directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows ME, XP and above.\n\nThe user's picture files directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows 2000, XP, ME and above.\n\nThe user's video files directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows ME, XP and above.\n\nThe directory that contains link objects that may exist in the My Network Places/Network Neighborhood folder.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 with Active Desktop is installed.\n\nThe document templates directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThe (roaming) application data directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nDetection of the current user path requires Internet Explorer 4 and above. Detection of the all users path requires Internet Explorer 5 and above.\n\nThis constant is not available on Windows 95 unless Internet Explorer 4 with Active Desktop is installed.\n\nThe local (non-roaming) application data directory. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user. The All Users location is also known as on Vista and above.\n\nThis constant is available on Windows ME, 2000 and above.\n\nThe directory that contains link objects that may exist in the Printers folder.\n\nThis constant is not available on Windows 95 and Windows 98.\n\nThis constant is not available on Windows 95 nor Windows NT 4 unless Internet Explorer 4 with Active Desktop is installed.\n\nThis constant is not available on Windows 95 nor Windows NT 4 unless Internet Explorer 4 with Active Desktop is installed.\n\nThis constant is not available on Windows 95 nor Windows NT 4 unless Internet Explorer 4 with Active Desktop is installed.\n\nThis constant is available on Windows 2000 and above.\n\nA directory where administrative tools are kept. The context of this constant (All Users or Current user) depends on the SetShellVarContext setting. The default is the current user.\n\nThis constant is available on Windows 2000, ME and above.\n\nThe resources directory that stores themes and other Windows resources (usually but detected at runtime).\n\nThis constant is available on Windows XP and above.\n\nThe localized resources directory that stores themes and other Windows resources (usually but detected at runtime).\n\nThis constant is available on Windows XP and above.\n\nA directory where files awaiting to be burned to CD are stored.\n\nThis constant is available on Windows XP and above.\n\nHWND of the main window (in decimal).\n\nThe path to a temporary folder created upon the first usage of a plug-in or a call to InitPluginsDir. This folder is automatically deleted when the installer exits. This makes this folder the ideal folder to hold INI files for InstallOptions, bitmaps for the splash plug-in, or any other file that a plug-in needs to work.\n\nA handful of constants are available as aliases that are not affected by SetShellVarContext: $USERTEMPLATES, $USERSTARTMENU, $USERSMPROGRAMS, $USERDESKTOP, $COMMONTEMPLATES, $COMMONSTARTMENU, $COMMONSMPROGRAMS, $COMMONDESKTOP and $COMMONPROGRAMDATA.\n\nLabels are the targets of Goto instructions and the various branching instructions (such as IfErrors, MessageBox, IfFileExists, and StrCmp). Labels must be within a Section or a Function. Labels are local in scope, meaning they are only accessible from within the Section or Function that they reside in. To declare a label, simply use:\n\nLabels cannot begin with a -, +, !, $, or 0-9. When specifying labels for the various instructions that require them, remember that both an empty string (\"\") and 0 both represent the next instruction (meaning no Goto will occur). Labels beginning with a period (.) are global, meaning you can jump to them from any function or section (though you cannot jump to an uninstall global label from the installer, and vice versa).\n\nUnlike labels, relative jumps are, as the name suggests, relative to the place they are called from. You can use relative jumps wherever you can use labels. Relative jumps are marked by numbers. +1 jumps to the next instruction (the default advancement), +2 will skip one instruction and go to the second instruction from the current instruction, -2 will jump two instructions backward, and +10 will skip 9 instructions, jumping to the tenth instruction from the current instruction.\n\nA instruction is every command that is executed at run-time, when the installer is running. MessageBox, Goto, GetDLLVersion, FileRead, SetShellVarContext are all instructions. AddSize, Section, SectionGroup, SectionEnd, SetOverwrite (and everything under Compiler Flags), Name, SetFont, LangString, are not instructions because they are executed at compile time.\n\nNote that macro insertion is not considered as one instruction when it comes to relative jumps. The macro is expanded before relative jumps are applied, and so relative jumps can jump into code inside an inserted macro. The following code, for example, will not skip the macro. It will show a message box.\n\nEach (non-silent) NSIS installer has a set of pages. Each page can be a NSIS built-in page or a custom page created by a user's function (with nsDialogs or InstallOptions for example).\n\nThe script controls the page order, appearance, and behavior. You can skip pages, paint them white, force the user to stay in a certain page until a certain condition is met, show a readme page, show custom designed pages for input and more. In this section you will learn how to do all of the above.\n\nThere are two basic commands regarding pages, Page and UninstPage. The first adds a page to the installer, the second adds a page to the uninstaller. On top of those two there is the PageEx command which allows you to add a page to either one and with greater amount of options. PageEx allows you to set options to the specific page you are adding instead of using the default that's set outside of PageEx.\n\nThe page order is set simply by the order Page, UninstPage and PageEx appear in the script. For example:\n\nThis code will tell NSIS to first show the license page, then the components selection page, then the directory selection page and finally the install log where sections are executed. The uninstaller will first show the uninstall confirmation page and then the uninstallation log.\n\nYou can specify the same page type more than once.\n\nFor backwards compatibility with old NSIS scripts, the following installer pages will be added if no installer page commands are used: license (if LicenseText and LicenseData were specified), components (if ComponentText was specified and there is more than one visible section), directory (if DirText was specified) and instfiles. When there are no uninstaller page commands the following uninstaller pages will be added: uninstall confirmation page (if UninstallText was specified) and instfiles. This method is deprecated, converting scripts to use page commands is highly recommended because you can use the new standard language strings.\n\nEach page has its unique set of data that defines how it will look and act. This section describes what data each type of page uses and how you can set it. Callback functions are described below and are not dealt with in this section.\n\nThe list below lists the commands that affect a certain page type. Unless otherwise mentioned, these commands can be used both inside and outside of a PageEx block. If used inside a PageEx block they will only affect the current page being set by PageEx, otherwise they will set the default for all other pages.\nâ€¢ DirVar (can only be used in PageEx)\nâ€¢ DirVar (can only be used in PageEx)\n\nUse Caption to set the page caption.\n\nEach built-in page has three callback functions: the pre-function, the show function and the leave-function. The pre-function is called right before the page is created, the show-function is called right after it has been created but before it is shown and the leave-function is called right after the user has pressed the next button (before actually leaving the page).\nâ€¢ The pre-function allows you to skip the page using Abort.\nâ€¢ The show-function allows you to tweak the page's user interface with CreateFont, SetCtlColors, SendMessage etc.\nâ€¢ The leave-function allows you to force the user to stay on the current page using Abort.\n\nA custom page only has two callback functions, one that creates it which is mandatory, and one leave-function that acts just like the leave-function for built-in pages.\n\nAdds an installer page. See the above sections for more information about built-in versus custom pages and about callback functions.\nâ€¢ instfiles - installation page where the sections are executed\n\nThe last page of the installer has its cancel button disabled to prevent confusion. To enable it anyway, use /ENABLECANCEL.\n\nAdds an uninstaller page. See the above sections for more information about built-in versus custom pages and about callback functions.\n\nSee Page for possible values of internal_page_type.\n\nAdds an installer page or an uninstaller page if the un. prefix was used. Every PageEx must have a matching PageExEnd. In a PageEx block you can set options that are specific to this page and will not be used for other pages. Options that are not set will revert to what was set outside the PageEx block or the default if nothing was set. To set the sub-caption for a page use Caption or SubCaption to set the default. To set the callback functions for a page set with PageEx use PageCallbacks. See the above sections for more information about built-in versus custom pages.\n\nSets the callback functions for a page defined using PageEx. Can only be used inside a PageEx block. See the above sections for more information about callback functions.\n\nEach NSIS installer contains one or more sections. Each of these sections are created, modified, and ended with the following commands.\nâ€¢ Each section contains zero or more instructions.\nâ€¢ Sections are executed in order by the resulting installer, and if a component page is used, the user will have the option of disabling/enabling each visible section.\nâ€¢ If a section's name is 'Uninstall' or is prefixed with 'un.', it's an uninstaller section.\n\nTells the installer that the current section needs an additional \"size_kb\" kilobytes of disk space. Only valid within a section (will have no effect outside of a section or in a function).\n\nBegins and opens a new section. If section_name is empty, omitted, or begins with a -, then it is a hidden section and the user will not have the option of disabling it. If the section name is 'Uninstall' or is prefixed with 'un.', then it is a an uninstaller section. If section_index_output is specified, the parameter will be !defined with the section index (can be used with SectionSetText etc). If the section name begins with a !, the section will be displayed as bold. If the /o switch is specified, the section will be unselected by default.\n\nTo access the section index, curly brackets must be used and the code must be located below the section in the script.\n\nThis command specifies which install types (see InstType) the current section defaults to the enabled state in. Multiple commands can be specified (they are combined). If you specify RO as a parameter, then the section will be read-only, meaning the user won't be able to change its state.\n\nWorks like except that the first install type defined using InstType is indexed 1, the next 2 and so on.\n\nThis command inserts a section group. The section group must be closed with SectionGroupEnd, and should contain 1 or more sections. If the section group name begins with a !, its name will be displayed with a bold font. If /e is present, the section group will be expanded by default. If index_output is specified, the parameter will be !defined with the section index (can be used with SectionSetText etc). If the name is prefixed with 'un.' the section group is an uninstaller section group.\n\nA special Section named 'Uninstall' must be created in order to generate an uninstaller. This section should remove all files, registry keys etc etc that were installed by the installer, from the system. Here is an example of a simple uninstall section:\n\nThe first Delete instruction works (deleting the uninstaller), because the uninstaller is transparently copied to the system temporary directory for the uninstall.\n\nNote that in uninstaller code, $INSTDIR contains the directory where the uninstaller lies. It does not necessarily contain the same value it contained in the installer.\n\nFunctions are similar to Sections in that they contain zero or more instructions. User functions are not called by the installer directly, instead they are called from Sections using the Call instruction. Callback functions will be called by the installer when a certain event occurs.\n\nFunctions must be declared outside of Sections or other Functions.\n\nBegins and opens a new function. Function names beginning with \".\" (e.g. \".Whatever\") are generally reserved for callback functions. Function names beginning with \"un.\" are functions that will be generated in the Uninstaller. Hence, normal install Sections and functions cannot call uninstall functions, and the Uninstall Section and uninstall functions cannot call normal functions.\n\nYou can create callback functions (which have special names), that will be called by the installer at certain points in the install. Below is a list of available callbacks:\n\nThis callback will be called just before the first page is loaded and the installer dialog is shown, allowing you to tweak the user interface.\n\nThis callback will be called when the installer is nearly finished initializing. If the '.onInit' function calls Abort, the installer will quit instantly.\n\nHere are two examples of how this might be used:\n\nThis callback is called when the user hits the 'cancel' button after the install has failed (if it could not extract a file, or the install script used the Abort command).\n\nThis callback is called when the install was successful, right before the install window closes (which may be after the user clicks 'Close' if AutoCloseWindow or SetAutoClose is set to false).\n\nThis callback is called right after the installer window closes. Use it to free any user interface related plug-ins if needed.\n\nThis callback is called whenever the mouse position over the sections tree has changed. This allows you to set a description for each section for example. The section id on which the mouse is over currently is stored, temporarily, in $0.\n\nThis callback is called if Reboot fails. WriteUninstaller, plug-ins, File and WriteRegBin should not be used in this callback.\n\nCalled when the selection changes on the component page. Useful for using with SectionSetFlags and SectionGetFlags.\n\nSelection changes include both section selection and installation type changes. The section id of the changed section is stored in $0. $0 is -1 if the installation type changed. You only get notifications for changes initiated by the user and only one notification per action even if the action also affected child sections and/or parent groups.\n\nThis callback is called when the user hits the 'cancel' button, and the install hasn't already failed. If this function calls Abort, the install will not be aborted.\n\nThis callback enables control over whether or not an installation path is valid for your installer. This code will be called every time the user changes the install directory, so it shouldn't do anything crazy with MessageBox or the like. If this function calls Abort, the installation path in $INSTDIR is deemed invalid.\n\nThis callback will be called just before the first page is loaded and the installer dialog is shown, allowing you to tweak the user interface.\n\nHave a look at .onGUIInit for an example.\n\nThis callback will be called when the uninstaller is nearly finished initializing. If the ' un.onInit' function calls Abort, the uninstaller will quit instantly. Note that this function can verify and/or modify $INSTDIR if necessary.\n\nHere are two examples of how this might be used:\n\nThis callback is called when the user hits the 'cancel' button after the uninstall has failed (if it used the Abort command or otherwise failed).\n\nThis callback is called when the uninstall was successful, right before the install window closes (which may be after the user clicks 'Close' if SetAutoClose is set to false)..\n\nThis callback is called right after the uninstaller window closes. Use it to free any user interface related plug-ins if needed.\n\nThis callback is called if Reboot fails. WriteUninstaller, plug-ins, File and WriteRegBin should not be used in this callback.\n\nCalled when the selection changes on the component page. Useful for using with SectionSetFlags and SectionGetFlags.\n\nSelection changes include both section selection and installation type changes. The section id of the changed section is stored in $0. $0 is -1 if the installation type changed. You only get notifications for changes initiated by the user and only one notification per action even if the action also affected child sections and/or parent groups.\n\nThis callback is called when the user hits the 'cancel' button and the uninstall hasn't already failed. If this function calls Abort, the install will not be aborted.\n\nThe commands below all adjust attributes of the installer. These attributes control how the installer looks and functions, including which pages are present in the installer, which text is displayed in each part of each page, the name of the installer, the icon the installer uses, the default installation directory and more. Note that these attributes can be set anywhere in the file except in a Section or Function.\n\nAdds a branding image on the top, bottom, left, or right of the installer. Its size will be set according to the width/height specified, the installer width/height and the installers font. The final size will not always be what you requested; have a look at the output of the command for the actual size. Because this depends on the installers font, you should use SetFont before AddBrandingImage. The default padding value is 2. The numbers can be suffixed with to specify dialog units instead of pixels.\n\nAddBrandingImage only adds a placeholder for an image. To set the image itself at runtime, use SetBrandingImage.\n\nControls whether or not installs are allowed in the root directory of a drive, or directly into a network share. Set to 'true' to change the safe behavior, which prevents users from selecting C:\\ or \\\\Server\\Share as an install (and later on, uninstall) directory. For additional directory selection page customizability, see .onVerifyInstDir.\n\nSets whether or not the install window automatically closes when completed. This is overridable from a section using SetAutoClose.\n\nSpecifies the font used to show the text on the background gradient. To set the color use BGGradient. The default font will be used if no parameters are specified. The default font is bold and italic Times New Roman.\n\nSpecifies whether or not to use a gradient background window. If 'off', the installer will not show a background window, if no parameters are specified, the default black to blue gradient is used, and otherwise the top_color or bottom_color are used to make a gradient. Top_color and bottom_color are specified using the form RRGGBB (in hexadecimal, as in HTML, only minus the leading '#', since # can be used for comments). 'textcolor' can be specified as well, or 'notext' can be specified to turn the big background text off.\n\nSets the text that is shown at the bottom of the install window (by default it is 'Nullsoft Install System vX.XX'). Setting this to an empty string (\"\") uses the default; to set the string to blank, use \" \" (a space). If it doesn't matter to you, leave it the default so that everybody can know why the installer didn't suck :). Use /TRIMLEFT, /TRIMRIGHT or /TRIMCENTER to trim down the size of the control to the size of the string.\n\nAccepts variables. If variables are used, they must be initialized on .onInit.\n\nWhen used outside a PageEx block: Sets the text for the titlebar of the installer. By default it is '$(^Name) Setup', where Name is specified by the Name instruction. You can however override it with 'MyApp Installer' or whatever. If you specify an empty string (\"\"), the default will be used (you can specify \" \" to simulate a empty string).\n\nWhen used inside a PageEx block: Sets the subcaption of the current page.\n\nAccepts variables. If variables are used, they must be initialized on .onInit or .onGUIInit.\n\nReplaces dialog (IDD_LICENSE, IDD_DIR, IDD_SELCOM, IDD_INST, IDD_INSTFILES, IDD_UNINST or IDD_VERIFY) with a dialog from ui_file.exe with the same resource ID. You can also specify 'all' as the dialog if you wish to replace all 7 of the dialogs at once from the same UI file. For some example UIs look at Contrib\\UIs under your NSIS directory.\nâ€¢ IDD_DIR must contain IDC_DIR (edit box), IDC_BROWSE (button) and IDC_CHECK1 (checkbox).\nâ€¢ IDD_SELCOM must contain IDC_TREE1 (SysTreeView32 control), and IDC_COMBO1 (combo box).\nâ€¢ IDD_INST must contain IDC_BACK (button), IDC_CHILDRECT (static control the size of all other dialogs), IDC_VERSTR (static), IDOK (button), and IDCANCEL (button). If an image control (static with SS_BITMAP style) will be found in this dialog it will be used as the default for SetBrandingImage.\nâ€¢ IDD_INSTFILES must contain IDC_LIST1 (SysListView32 control), IDC_PROGRESS (msctls_progress32 control), and IDC_SHOWDETAILS (button).\n\nSpecifies the bitmap with the checkbox images used in the component-selection page treeview.\n\nThis bitmap should have a size of 96x16 pixels, no more than 8bpp (256 colors) and contain six 16x16 images for the different states (in order: selection mask, not checked, checked, greyed out, unchecked & read-only, checked & read-only). Use magenta as mask color (this area will be transparent).\n\nReplaces the default text (\"Completed\") that is printed at the end of the install if parameter is specified. Otherwise, the default is used.\n\nAccepts variables. If variables are used, they must be initialized before the message is printed.\n\nUsed to change the default text on the component page.\n\ntext: Text above the controls, to the right of the installation icon.\n\nsubtext: Text next to the installation type selection.\n\nsubtext2: Text to the left of the components list and below the installation type.\n\nThe default string will be used if a string is empty (\"\").\n\nAccepts variables. If variables are used, they must be initialized before the components page is created.\n\nSpecifies whether or not the installer will perform a CRC on itself before allowing an install. Note that if the user uses /NCRC on the command line when executing the installer, and you didn't specify 'force', the CRC will not occur, and the user will be allowed to install a (potentially) corrupted installer.\n\nReplaces the default details button text of \"Show details\", if parameter is specified (otherwise the default is used).\n\nAccepts variables. If variables are used, they must be initialized before the install log (instfiles) page is created.\n\nUsed to change the default text on the directory page.\n\ntext: Text above the controls, to the right of the installation icon.\n\nbrowse_dlg_text: Text on the \"Browse For Folder\" dialog, appears after clicking on \"Browse\" button.\n\nThe default string will be used if a string is empty (\"\").\n\nAccepts variables. If variables are used, they must be initialized before the directory page is created.\n\nSpecifies which variable is to be used to contain the directory selected. This variable should be initialized with a default value. This allows you to easily create two different directory pages that will not require you to move values in and out of $INSTDIR. The default variable is $INSTDIR. This can only be used in PageEx for directory and uninstConfirm pages.\n\nIf `DirVerify leave' is used, the Next button will not be disabled if the installation directory is not valid or there is not enough space. A flag that you can read in the leave function using GetInstDirError will be set instead.\n\nReplaces the default text that comes up when a file cannot be written to. This string can contain a reference to $0, which is the filename ($0 is temporarily changed to this value). Example: \"Can not write to file $\\r$\n\n$0$\\r$\n\ngood luck.\".\n\nAccepts variables. If variables are used, they must be initialized before File is used.\n\nSets the icon of the installer. Every image in the icon file will be included in the installer. Use UninstallIcon to set the uninstaller icon.\n\nIf parameter is specified, overrides the default install button text (of \"Install\") with the specified text.\n\nAccepts variables. If variables are used, they must be initialized before the install button shows.\n\nSets the colors to use for the install info screen (the default is 00FF00 000000. Use the form RRGGBB (in hexadecimal, as in HTML, only minus the leading '#', since # can be used for comments). Note that if \"/windows\" is specified as the only parameter, the default windows colors will be used.\n\nSets the default installation directory. See the variables section for variables that can be used to make this string (especially $PROGRAMFILES). Note that the part of this string following the last \\ will be used if the user selects 'browse', and may be appended back on to the string at install time (to disable this, end the directory with a \\ (which will require the entire parameter to be enclosed with quotes). If this doesn't make any sense, play around with the browse button a bit.\n\nThis attribute tells the installer to check a string in the registry and use it as the install dir if that string is valid. If this attribute is present, it will override the InstallDir attribute if the registry key is valid, otherwise it will fall back to the InstallDir value. When querying the registry, this command will automatically remove any quotes. If the string ends in \".exe\", it will automatically remove the filename component of the string (i.e. if the string is \"C:\\Program Files\\Foo\\app.exe\", it will know to use \"C:\\Program Files\\Foo\"). For more advanced install directory configuration, set $INSTDIR in .onInit.\n\nLanguage strings and variables cannot be used with InstallDirRegKey.\n\nValid values for flag are \"smooth\" (smooth the progress bar) or \"colored\" (color the progress bar with the colors set by InstallColors. Examples: \"InstProgressFlags\" (default old-school windows look), \"InstProgressFlags smooth\" (new smooth look), \"InstProgressFlags smooth colored\" (colored smooth look whee). Note: neither \"smooth\" or \"colored\" work with XPStyle on when the installer runs on Windows XP with a modern theme.\n\nAdds an install type to the install type list, or disables the custom install type. There can be as many as 32 types, each one specifying the name of the install type. If the name is prefixed with 'un.' it is an uninstaller install type. The name can contain variables which will be processed at runtime before the components page shows. Another way of changing the InstType name during runtime is the InstTypeSetText command. The difference is that with InstTypeSetText you are saving your precious user variables. The first type is the default (generally 'Typical' or 'Full'). If the /NOCUSTOM switch is specified, then the \"custom\" install type is disabled, and the user has to choose one of the pre-defined install types. Alternatively, if the /CUSTOMSTRING switch is specified, the parameter will override the \"Custom\" install type text. Alternatively, if the /COMPONENTSONLYONCUSTOM flag is specified, the component list will only be shown if the \"Custom\" install type is selected.\n\nAccepts variables for type names. If variables are used, they must be initialized before the components page is created.\n\nSectionInstType is used to bind s to install types.\n\nSets the background color of the license data. Color is specified using the form RRGGBB (in hexadecimal, as in HTML, only minus the leading '#', since # can be used for comments). Default is '/gray'. You can also use the Windows OS defined color by using '/windows'.\n\nSpecifies a text file or a RTF file to use for the license that the user can read. Omit this to not have a license displayed. Note that the file must be in DOS text format (\\r\n\n). To define a multilingual license data use LicenseLangString.\n\nIf you are using a RTF file it is recommended that you edit it with WordPad and not MS Word. Using WordPad will result in a much smaller file.\n\nUse LicenseLangString to show a different license for every language.\n\nSpecifies if the displayed license must be explicitly accepted or not. This can be done either by a checkbox or by radiobuttons. By default the \"next button\" is disabled and will only be enabled if the checkbox is enabled or the correct radio button is selected. If off is specified the \"next button\" is enabled by default.\n\nUsed to change the default text on the license page.\n\ntext: Text above the controls, to the right of the installation icon.\n\nThe default string will be used if a string is empty (\"\").\n\nAccepts variables. If variables are used, they must be initialized before the license page is created.\n\nDeclare that the installer is DPI-aware. A DPI-aware application is not scaled by the DWM (DPI virtualization) so the text is never blurry. NSIS does not scale the bitmap used by the tree control on the component page and some plugins might have compatibility issues so make sure that you test your installer at different DPI settings if you select true.\n\nSee MSDN for more information about DPI-aware applications.\n\nDeclare that the installer can handle paths longer than MAX_PATH. Only supported on Windows 10 Anniversary Update and later.\n\nNote: Instructions like CopyFiles and CreateShortcut do not support long paths!\n\nNote: Has no effect if the \"Enable Win32 long paths\" policy is not enabled.\n\nDeclare that the installer is compatible with the specified Windows version(s). This adds a SupportedOS entry in the compatibility section of the application manifest. The default is Win7+8+8.1+10. none is the default if RequestExecutionLevel is set to none for compatibility reasons.\n\nWindows 8.1 and later will fake its version number if you don't declare support for that particular version. You can read more about the other changes in behavior on MSDN.\n\nReplaces the default text strings for the four buttons (< Back, Next >, Cancel and Close). If parameters are omitted, the defaults are used.\n\nAccepts variables. If variables are used, they must be initialized in .onInit.\n\nSets the name of the installer. The name is usually simply the product name such as 'MyApp' or 'CrapSoft MyApp'. If you have one or more ampersands (&) in the name, set the second parameter to the same name, only with doubled ampersands. For example, if your product's name is \"Foo & Bar\", use:\n\nIf you have ampersands in the name and use a LangString for the name, you will have to create another one with doubled ampersands to use as the second parameter.\n\nAccepts variables. If variables are used, they must be initialized in .onInit.\n\nSpecifies the output file that the MakeNSIS should write the installer to. This is just the file that MakeNSIS writes, it doesn't affect the contents of the installer.\n\nAdds as a resource to the installer and uninstaller. specifies the resource type and can be any string or # followed by a standard type or number. must be # followed by a number. is optional and specifies the language id of the resource. Replacing standard NSIS resources is not supported, you should use Icon and ChangeUI instead.\n\nSpecifies the requested execution level for Windows Vista and higher. The value is embedded in the installer and uninstaller's XML manifest and tells Windows which privilege level the installer requires. user requests the user's normal level with no administrative privileges. highest will request the highest execution level available for the current user and will cause Windows to prompt the user to verify privilege escalation if they are a member of the administrators group. The prompt might request for the user's password. admin, which is also the default, requests administrator level and will cause Windows to prompt the user as well. Specifying none will keep the manifest empty and let Windows decide which execution level is required. Windows automatically identifies NSIS installers and decides administrator privileges are required. Because of this, none and admin have virtually the same effect.\n\nIt's recommended that every application is marked with a required execution level. Unmarked installers are subject to compatibility mode. Workarounds of this mode include automatically moving any shortcuts created in the user's start menu to all users' start menu. Installers that don't install anything into system folders nor write to the local machine registry (HKLM) should specify user execution level.\n\nMore information about this topic can be found on MSDN.\n\nSets the installer font. Please remember that the font you choose must be present on the user's machine as well. Don't use rare fonts that only you have.\n\nUse the /LANG switch if you wish to set a different font for each language. For example:\n\nThere are two LangStrings named ^Font and ^FontSize which contain the font and font size for every language.\n\nSets whether or not the details of the install are shown. Can be 'hide' to hide the details by default, allowing the user to view them, or 'show' to show them by default, or 'nevershow', to prevent the user from ever seeing them. Note that sections can override this using SetDetailsView.\n\nSets whether or not the details of the uninstall are shown. Can be 'hide' to hide the details by default, allowing the user to view them, or 'show' to show them by default, or 'nevershow', to prevent the user from ever seeing them. Note that sections can override this using SetDetailsView.\n\nSpecifies whether or not the installer should be silent. If it is 'silent' or 'silentlog', all sections that have the SF_SELECTED flag are installed quietly (you can set this flag using SectionSetFlags), with no screen output from the installer itself (the script can still display whatever it wants, use MessageBox's /SD to specify a default for silent installers). Note that if this is set to 'normal' and the user runs the installer with /S (case sensitive) on the command line, it will behave as if SilentInstall 'silent' was used. Note: see also LogSet.\n\nSee section 4.12 for more information.\n\nSpecifies whether or not the uninstaller should be silent. If it is 'silent' the uninstall sections will run quietly, with no screen output from the uninstaller itself (the script can still display whatever it wants, use MessageBox's /SD to specify a default for silent uninstallers). Note that if this is set to 'normal' and the user runs the uninstaller with /S on the command line, it will behave as if SilentUnInstall 'silent' was used.\n\nSee section 4.12 for more information.\n\nIf parameters are specified, overrides the space required and space available text (\"Space required: \" and \"Space available: \" by default). If 'none' is specified as the required text no space texts will be shown.\n\nAccepts variables. If variables are used, they must be initialized before the components page is created.\n\nOverrides the subcaptions for each of the installer pages (0=\": License Agreement\",1=\": Installation Options\",2=\": Installation Directory\", 3=\": Installing Files\", 4=\": Completed\"). If you specify an empty string (\"\"), the default will be used (you can however specify \" \" to achieve a blank string).\n\nYou can also set a subcaption (or override the default) using Caption inside a PageEx block.\n\nAccepts variables. If variables are used, they must be initialized before the relevant page is created.\n\nChanges the text of the button that by default says \"Uninstall\" in the uninstaller. If no parameter is specified, the default text is used.\n\nAccepts variables. If variables are used, they must be initialized before the uninstall button shows.\n\nSets what the titlebars of the uninstaller will display. By default it is '$(^Name) Uninstall', where Name is specified with the Name command. You can, however, override it with 'MyApp uninstaller' or whatever. If you specify an empty string (\"\"), the default will be used (you can specify \" \" to simulate a empty string).\n\nAccepts variables. If variables are used, they must be initialized in un.onInit.\n\nSets the icon of the uninstaller.\n\nSets the default subcaptions for the uninstaller pages (0=\": Confirmation\",1=\": Uninstalling Files\",2=\": Completed\"). If you specify an empty string (\"\"), the default will be used (you can specify \" \" to simulate a empty string).\n\nYou can also set a subcaption (or override the default) using Caption inside a PageEx block.\n\nAccepts variables. If variables are used, they must be initialized before the relevant page is created.\n\nSpecifies the texts on the uninstaller confirm page.\n\nsubtext: Text next to the uninstall location\n\nAccepts variables. If variables are used, they must be initialized before the uninstaller confirm page is created.\n\nSets whether or not the installer's icon is displayed on certain pages.\n\nSets whether or not a XP visual style manifest will be added to the installer. This manifest makes the installers controls use the new visual styles when running on Windows XP and later. This affects the uninstaller too.\n\nThe following commands affect how the compiler generates code and compresses data. Unless otherwise noted, these commands are valid anywhere in the script and affect every line below where each one is placed (until overridden by another command). They cannot be jumped over using flow control instructions.\n\nFor example, in the following script, blah.dat will never be overwritten.\n\nInstead, the following should be used.\n\nThis command specifies whether the user should be able to skip a file or not. A user has an option to skip a file if SetOverwrite is set to on (default) and the installer fails to open a file for writing when trying to extract a file. If off is used the ignore button which allows the user to skip the file will not be shown and the user will only have an option to abort the installation (Cancel button) or retry opening the file for writing (Retry button). If on is used the user will have an option to skip the file (error flag will be set - see SetOverwrite).\n\nThis command sets the size of the compiler's internal file buffers. This command allows you to control the compiler's memory usage by limiting how much of a given file it will load into memory at once. Since the compiler needs both input and output, twice the memory size specified could be used at any given time for file buffers. This command does not limit the compression buffers which could take another couple of MB, neither does it limit the compiler's other internal buffers, but those shouldn't normally top 1MB anyway. Specifying a very small number could decrease performance. Specifying a very large number could exhaust system resources and force the compiler to cancel the compilation process. The default value is 32MB.\n\nThis command sets the compress flag which is used by the installer to determine whether or not data should be compressed. Typically the SetCompress flag will affect the commands after it, and the last SetCompress command in the file also determines whether or not the install info section and uninstall data of the installer is compressed. If compressflag is 'auto', then files are compressed if the compressed size is smaller than the uncompressed size. If compressflag is set to 'force', then the compressed version is always used. If compressflag is 'off' then compression is not used (which can be faster).\n\nNote that this option has no effect when solid compression is used.\n\nThis command sets the compression algorithm used to compress files/data in the installer. It can only be used outside of sections and functions and before any data is compressed. Different compression methods can not be used for different files in the same installer. It is recommended to use it at the very top of the script to avoid compilation errors.\n\nThree compression methods are supported: ZLIB, BZIP2 and LZMA.\n\nZLIB (the default) uses the deflate algorithm, it is a quick and simple method. With the default compression level it uses about 300 KB of memory.\n\nBZIP2 usually gives better compression ratios than ZLIB, but it is a bit slower and uses more memory. With the default compression level it uses about 4 MB of memory.\n\nLZMA is a new compression method that gives very good compression ratios. The decompression speed is high (10-20 MB/s on a 2 GHz CPU), the compression speed is lower. The memory size that will be used for decompression is the dictionary size plus a few KBs, the default is 8 MB.\n\nIf /FINAL is used, subsequent calls to SetCompressor will be ignored.\n\nIf /SOLID is used, all of the installer data is compressed in one block. This results in greater compression ratios.\n\nSets the dictionary size in megabytes (MB) used by the LZMA compressor (default is 8 MB).\n\nThis command tells the compiler whether or not to do datablock optimizations. Datablock optimizations causes the compiler to check to see if any data being added to the data block is already in the data block, and if so, it is simply referenced as opposed to added (can save a little bit of size). It is highly recommended to leave this option on.\n\nThis command sets the file date/time saving flag which is used by the File command to determine whether or not to save the last write date and time of the file, so that it can be restored on installation. Valid flags are 'on' and 'off'. 'on' is the default.\n\nThis command sets the overwrite flag which is used by the File command to determine whether or not the file should overwrite any existing files that are present. If overwriteflag is 'on', files are overwritten (this is the default). If overwriteflag is 'off', files that are already present are not overwritten. If overwriteflag is 'try', files are overwritten if possible (meaning that if the file is not able to be written to, it is skipped without any user interaction). If overwriteflag is 'ifnewer', then files are only overwritten if the existing file is older than the new file. If overwriteflag is 'ifdiff', then files are only overwritten if the existing file is older or newer than the new file. Note that when in 'ifnewer' or 'ifdiff' mode, the destination file's date is set, regardless of what SetDateSave is set to.\n\nGenerate a Unicode installer. It can only be used outside of sections and functions and before any data is compressed.\n\nAdds a string entry to the version information stored in the installer and uninstaller. These can be viewed in the File Properties Version or Details tab. keyname can either be a special name known by Windows or a user defined name. /LANG=0 can be used to indicate a language neutral language id. The following names are known by Windows:\n\nThe displayed name of these special entries are translated on the target system, whereas user defined keynames remain untranslated.\n\nSets the Product Version in the VS_FIXEDFILEINFO version information block.\n\nSets the File Version in the VS_FIXEDFILEINFO version information block (You should also set the FileVersion string with VIAddVersionKey so the information is displayed at the top of the Version Tab in the Properties of the file). If you don't provide a File Version the Product Version is used in the VS_FIXEDFILEINFO block.\n\nThe instructions that NSIS uses for scripting are sort of a cross between PHP and assembly. There are no real high level language constructs but the instructions themselves are (for the most part) high level, and you have handy string capability (i.e. you don't have to worry about concatenating strings, etc). You essentially have 25 registers (20 general purpose, 5 special purpose), and a stack.\n\nDelete file (which can be a file or wildcard, but should be specified with a full path) on the target system. If /REBOOTOK is specified and the file cannot be deleted then the file is deleted when the system reboots -- if the file will be deleted on a reboot, the reboot flag will be set. The error flag is set if files are found and cannot be deleted. The error flag is not set when trying to delete a file that does not exist.\n\nWarning: The /REBOOTOK switch requires administrator rights on Windows NT and later.\n\nExecute the specified program and continue immediately. Note that the file specified must exist on the target system, not the compiling system. $OUTDIR is used as the working directory. The error flag is set if the process could not be launched. Note, if the command could have spaces, you should put it in quotes to delimit it from parameters. e.g.: Exec '\"$INSTDIR\\command.exe\" parameters'. If you don't put it in quotes it will not work on Windows 9x with or without parameters.\n\nExecute the specified file using ShellExecuteEx. Note that is usually \"open\", \"print\", etc, but can be an empty string to use the default action. and the show type are optional. $OUTDIR is used as the working directory. The error flag is set if the file could not be launched. can be any combination of /ALLOWERRORUI, /DOENVSUBST and /INVOKEIDLIST.\n\nExecute the specified file using ExecShell and wait for executed process to quit. It will only wait for executable files, not other file types nor URLs.\n\nExecute the specified program and wait for the executed process to quit. See Exec for more information. If no output variable is specified ExecWait sets the error flag if the program executed returns a nonzero error code, or if there is an error. If an output variable is specified, ExecWait sets the variable with the exit code (and only sets the error flag if an error occurs; if an error occurs the contents of the user variable are undefined). Note, if the command could have spaces, you should put it in quotes to delimit it from parameters. e.g.: ExecWait '\"$INSTDIR\\command.exe\" parameters'. If you don't put it in quotes it will not work on Windows 9x with or without parameters.\n\nAdds file(s) to be extracted to the current output path ($OUTDIR).\nâ€¢ Note that the output file name is $OUTDIR\\filename_portion_of_file.\nâ€¢ Use /oname=X switch to change the output name. X may contain variables and can be a fully qualified path or a relative path in which case it will be appended to $OUTDIR set by SetOutPath. When using this switch, only one file can be specified. If the output name contains spaces, quote the entire parameter, including /oname, as shown in the examples below.\nâ€¢ If the /r switch is used, matching files and directories are recursively searched for in subdirectories. If just one path segment is specified (e.g. ), the current directory will be recursively searched. If more than one segment is specified (e.g. ), the last path segment will be used as the matching condition and anything before it specifies which directory to search recursively. If a directory name matches, all of its contents is added recursively. Directory structure is preserved.\nâ€¢ Use the /x switch to exclude files and directories.\nâ€¢ If the /a switch is used, the attributes of the file(s) added will be preserved.\nâ€¢ The File command sets the error flag if overwrite mode is set to 'try' and the file could not be overwritten, or if the overwrite mode is set to 'on' and the file could not be overwritten and the user selects ignore.\nâ€¢ If the /nonfatal switch is used and no files are found, a warning will be issued instead of an error.\n\nNote: When using the /r switch, both matching directories and files will be searched. This is always done with or without the use of wildcards, even if the given path perfectly matches one directory. That means, the following directory structure:\n\nwith the following File usage:\n\nwill match the directory named something in the root directory, the file named something in the directory named dir and the directory named something in the directory named another. To match only the directory named something in the root directory, use the following:\n\nWhen adding \\*.*, it will be used as the matching condition and something will be used as the directory to search. When only something is specified, the current directory will be recursively searched for every file and directory named something and another\\something will be matched.\n\nRename source_file to dest_file. You can use it to move a file from anywhere on the system to anywhere else and you can move a directory to somewhere else on the same drive. The destination file must not exist or the move will fail (unless you are using /REBOOTOK). If /REBOOTOK is specified, and the file cannot be moved (if, for example, the destination exists), then the file is moved when the system reboots. If the file will be moved on a reboot, the reboot flag will be set. The error flag is set if the file cannot be renamed (and /REBOOTOK is not used) or if the source file does not exist.\n\nIf no absolute path is specified the current folder will be used. The current folder is the folder set using the last SetOutPath instruction. If you have not used SetOutPath the current folder is $EXEDIR.\n\nWarning: The /REBOOTOK switch requires administrator rights on Windows NT and later.\n\nWarning: Files cannot be moved from one drive to another if a reboot is required.\n\nReserves a file in the data block for later use. Files are added to the compressed data block in the order they appear in the script. Functions, however, are not necessarily called in the order they appear in the script. Therefore, if you add a file in a function called early but put the function at the end of the script, all of the files added earlier will have to be decompressed to get to the required file. This process can take a long time if there a lot of files. .onInit is one such function. It is called at the very beginning, before anything else appears. If you put it at the very end of the script, extract some files in it and have lots of files added before it, the installer might take a very long time to load. This is where this command comes useful, allowing you to speed up the loading process by including the file at the top of the data block instead of letting NSIS seek all the way down to the bottom of the compressed data block.\n\nUse /plugin to reserve a plugin in ${NSISDIR}\\Plugins\\*.\n\nSee File for more information about the parameters.\n\nRemove the specified directory (fully qualified path with no wildcards). Without /r, the directory will only be removed if it is completely empty. If /r is specified the directory will be removed recursively, so all directories and files in the specified directory will be removed. If /REBOOTOK is specified, any file or directory which could not be removed during the process will be removed on reboot -- if any file or directory will be removed on a reboot, the reboot flag will be set. The error flag is set if any file or directory cannot be removed.\n\nNote that the current working directory can not be deleted. The current working directory is set by SetOutPath. For example, the following example will not delete the directory.\n\nThe next example will succeed in deleting the directory.\n\nWarning: The /REBOOTOK switch requires administrator rights on Windows NT and later.\n\nSets the output path ($OUTDIR) and creates it (recursively if necessary), if it does not exist. Must be a full pathname, usually is just $INSTDIR (you can specify $INSTDIR with a single \"-\" if you are lazy).\n\nIn all of the below registry instructions use an empty string (just two quotes with nothing between them - \"\") as the key name to specify the default key which is shown as (Default) in regedit.exe.\n\nUse SetRegView on 64-bit Windows to choose which registry view is used.\n\nIf a full path is not specified for any of the INI handling instructions, the Windows directory will be used.\n\nDeletes the entire section [section_name] from ini_filename. If the section could not be removed from the ini file, the error flag is set. It does not set the error flag if the section could not be found.\n\nDeletes the string str_name from section [section_name] from ini_filename. If the string could not be removed from the ini file, the error flag is set. It does not set the error flag if the string could not be found.\n\nDeletes a registry key. If /ifempty is specified, the registry key will only be deleted if it has no subkeys and no values (otherwise, the whole registry tree will be removed). Valid values for root_key are listed under WriteRegStr. The error flag is set if the key could not be removed from the registry (or if it didn't exist to begin with).\n\nDeletes a registry value. Valid values for root_key are listed under WriteRegStr. The error flag is set if the value could not be removed from the registry (or if it didn't exist to begin with).\n\nSet user variable $x with the name of the 'index'th registry key in root_key\\Subkey. Valid values for root_key are listed under WriteRegStr. Returns an empty string if there are no more keys, and returns an empty string and sets the error flag if there is an error.\n\nSet user variable $x with the name of the 'index'th registry value in root_key\\Subkey. Valid values for root_key are listed under WriteRegStr. Returns an empty string and sets the error flag if there are no more values or if there is an error.\n\nExpands environment variables in string into the user variable $x. If an environment variable doesn't exist, it will not be replaced. For example, if you use \"%var%\" and var doesn't exists, the result will be \"%var%\". If there is an error, the variable is set to empty, and the error flag is set.\n\nFlushes the INI file's buffers. Windows 9x keeps all changes to the INI file in memory. This command causes the changes to be written to the disk immediately. Use it if you edit the INI manually, delete it, move it or copy it right after you change it with WriteINIStr, DeleteINISec or DeleteINStr.\n\nReads from the environment string \"name\" and sets the value into the user variable $x. If there is an error reading the string, the user variable is set to empty, and the error flag is set.\n\nReads from entry_name in [section_name] of ini_filename and stores the value into user variable $x. The error flag will be set and $x will be assigned to an empty string if the entry is not found.\n\nReads a 32-bit DWORD from the registry into the user variable $x. Valid values for root_key are listed under WriteRegStr. The error flag will be set and $x will be set to an empty string (\"\" which is interpreted as 0 in math operations) if the DWORD is not present. If the value is present, but is not a DWORD, it will be read as a string and the error flag will be set.\n\nReads from the registry into the user variable $x. Valid values for root_key are listed under WriteRegStr. The error flag will be set and $x will be set to an empty string (\"\") if the string is not present. If the value is present, but is of type REG_DWORD, it will be read and converted to a string and the error flag will be set.\n\nWrites entry_name=value into [section_name] of ini_filename. The error flag is set if the string could not be written to the ini file.\n\nThis command writes a block of binary data to the registry. Valid values for root_key are listed under WriteRegStr. Valuedata is in hexadecimal (e.g. DEADBEEF01223211151). The error flag is set if the binary data could not be written to the registry. If the registry key doesn't exist it will be created.\n\nWrites a value without data to the registry.\n\nThis command writes a DWORD (32-bit integer) to the registry (a user variable can be specified). Valid values for root_key are listed under WriteRegStr. The error flag is set if the dword could not be written to the registry. If the registry key doesn't exist it will be created.\n\nWrite a string to the registry. See WriteRegExpandStr for more details.\n\nWrite a string to the registry. root_key must be one of:\n\nIf root_key is SHCTX or SHELL_CONTEXT, it will be replaced with HKLM if SetShellVarContext is set to all and with HKCU if SetShellVarContext is set to current.\n\nThe error flag is set if the string could not be written to the registry. The type of the string will be REG_SZ for WriteRegStr, or REG_EXPAND_STR for WriteRegExpandStr. If the registry key doesn't exist it will be created.\n\nWrites a multi-string value. The /REGEDIT5 switch must be used and specifies that the data is in the hex format used by .reg files on Windows 2000 and later.\n\nSets the registry view affected by registry commands (root keys with a 32/64 suffix are not affected). On 64-bit versions of Windows there are two views; one for 32-bit applications and one for 64-bit applications. By default, 32-bit applications running on 64-bit systems (WOW64) only have access to the 32-bit view. Using allows the installer to access keys in the 64-bit view of the registry. Registry operations will fail if the selected view is not supported by Windows.\n\nDoes not affect InstallDirRegKey. Instead, the registry must be read using ReadRegStr in .onInit.\n\nCalls a function named function_name inside a NSIS extension DLL, a plug-in. See the example plugin for how to make one. Extension DLLs can access the stack and variables. Note: To automatically extract and call plug-in DLLs, use a plug-in command instead of CallInstDLL.\n\nFor easier plug-in handling, use the new plug-in call syntax.\n\nCopies files from the source to the destination on the installing system. Useful with $EXEDIR if you want to copy from installation media, or to copy from one place to another on the system. You might see a Windows status window of the copy operation if the operation takes a lot of time (to disable this, use /SILENT). The last parameter can be used to specify the size of the files that will be copied (in kilobytes), so that the installer can approximate the disk space requirements. On error, or if the user cancels the copy (only possible when /SILENT was omitted), the error flag is set. If /FILESONLY is specified, only files are copied.\n\nFully-qualified path names should always be used with this instruction. Using relative paths will have unpredictable results.\n\nCreates (recursively if necessary) the specified directory. The error flag is set if the directory couldn't be created.\n\nYou should always specify an absolute path.\n\nCreates a shortcut 'link.lnk' that links to 'target.file', with optional parameters 'parameters'. You must specify an absolute path to the .lnk file. The icon used for the shortcut is 'icon.file,icon_index_number'; for default icon settings use empty strings for both icon.file and icon_index_number. start_options should be one of: SW_SHOWNORMAL, SW_SHOWMAXIMIZED, SW_SHOWMINIMIZED, or an empty string. keyboard_shortcut should be in the form of 'flag|c' where flag can be a combination (using |) of: ALT, CONTROL, EXT, or SHIFT. c is the character to use (a-z, A-Z, 0-9, F1-F24, etc). Note that no spaces are allowed in this string. A good example is \"ALT|CONTROL|F8\". $OUTDIR is stored as the shortcut's working directory property. You can change it by using SetOutPath before creating the shortcut or use /NoWorkingDir if you don't need to set the working directory property. description should be the description of the shortcut, or comment as it is called under XP. The error flag is set if the shortcut cannot be created (i.e. either of the paths (link or target) does not exist, or some other error).\n\nGets the Windows version as reported by GetVersionEx. WinVer.nsh is the preferred method for performing Windows version checks.\n\nGets the version information from the DLL (or any other executable containing version information) in \"filename\". Sets the user output variables with the high and low dwords of version information on success; on failure the outputs are empty and the error flag is set. The following example reads the DLL version and copies a human readable version of it into $0:\n\nThis is similar to GetDLLVersion, only it acts on the system building the installer (it actually compiles into two StrCpy commands). Sets the two output variables with the DLL version information of the DLL on the build system. Use !getdllversion if you need to use the values with VIProductVersion.\n\nGets the last write time of \"filename\". Sets the user output variables with the high and low dwords of the FILETIME timestamp on success; on failure the outputs are empty and the error flag is set.\n\nThis is similar to GetFileTime, only it acts on the system building the installer (it actually compiles into two StrCpy commands). Sets the two output variables with the file timestamp of the file on the build system.\n\nGet the path of a known folder. The error flag is set and the output variable is empty if the call fails or the knownfolderid guid is not available. This function is only able to resolve known folders on Windows Vista or higher.\n\nAssign the full path of the file specified to user variable $x. If the path portion of the parameter is not found, the error flag will be set and $x will be empty. If /SHORT is specified, the path is converted to the short filename form. However, if /SHORT is not specified, the path isn't converted to its long filename form. To get the long filename, call GetLongPathName using the System plug-in. Note that GetLongPathName is only available on Windows 98, Windows 2000 and above.\n\nAssign to the user variable $x, the name of a temporary file. The file will be created for you and it will be empty. The name of the temporary file is guaranteed to be unique. If to want the temporary file to be created in another directory other than the Windows temp directory, specify a base_dir. You should Delete the file when you are done with it.\n\nAssign to the user variable $x, the full path of the file named by the second parameter. The error flag will be set and $x will be empty if the file cannot be found. Uses SearchPath() to search the system paths for the file.\n\nSets the file attributes of 'filename'. Valid attributes can be combined with | and are:\nâ€¢ NORMAL or FILE_ATTRIBUTE_NORMAL (you can use 0 to abbreviate this)\n\nThe error flag will be set if the file's attributes cannot be set (i.e. the file doesn't exist, or you don't have the right permissions). You can only set attributes. It's not possible to unset them. If you want to remove an attribute use NORMAL. This way all attributes are erased. This command doesn't support wildcards.\n\nLoads the specified DLL and calls DllRegisterServer (or entrypoint_name if specified). The error flag is set if an error occurs (i.e. it can't load the DLL, initialize OLE, find the entry point, or the function returned anything other than ERROR_SUCCESS (=0)).\n\nUse SetOutPath to set the current directory for DLLs that depend on other DLLs that are now in the path or in the Windows directory. For example, if foo.dll depends on bar.dll which is located in $INSTDIR use:\n\nLoads the specified DLL and calls DllUnregisterServer. The error flag is set if an error occurs (i.e. it can't load the DLL, initialize OLE, find the entry point, or the function returned anything other than ERROR_SUCCESS (=0)).\n\nCancels the install, stops execution of script, and displays user_message in the status display. Note: you can use this from Callback functions to do special things. Page callbacks also uses Abort for special purposes.\n\nCalls the function named function_name, the label named label_name, or a variable that specifies an address. An address is returned by GetCurrentAddress, GetFunctionAddress or GetLabelAddress. A call returns when it encounters a Return instruction. Sections and functions are automatically ended with a Return instruction. Uninstall functions cannot be called from installer functions and sections, and vice-versa.\n\nGets the address of the current instruction (the GetCurrentAddress) and stores it in the output user variable. This user variable then can be passed to Call or Goto.\n\nGets the address of the function and stores it in the output user variable. This user variable then can be passed to Call or Goto. Note that if you Goto an address which is the output of GetFunctionAddress, your function will never be returned to (when the function you Goto'd to returns, you return instantly).\n\nGets the address of the label and stores it in the output user variable. This user variable then can be passed to Call or Goto. Note that you may only call this with labels accessible from your function, but you can call it from anywhere (which is potentially dangerous). Note that if you Call the output of GetLabelAddress, code will be executed until it Return's (explicitly or implicitly at the end of a function), and then you will be returned to the statement after the Call.\n\nIf label is specified, goto the label 'label_to_jump_to:'.\n\nIf +offset or -offset is specified, jump is relative by offset instructions. Goto +1 goes to the next instruction, Goto -1 goes to the previous instruction, etc.\n\nIf a user variable is specified, jumps to absolute address (generally you will want to get this value from a function like GetLabelAddress). Compiler flag commands and SectionIn aren't instructions so jumping over them has no effect.\n\nWill \"return\" true if the installation has been aborted. This can happen if the user chose abort on a file that failed to create (or overwrite) or if the user aborted by hand. This function can only be called from the leave function of the instfiles page.\n\nChecks and clears the error flag, and if it is set, it will goto jumpto_iferror, otherwise it will goto jumpto_ifnoerror. The error flag is set by other instructions when a recoverable error (such as trying to delete a file that is in use) occurs.\n\nChecks for existence of file(s) file_to_check_for (which can be a wildcard, or a directory), and Gotos jump_if_present if the file exists, otherwise Gotos jump_otherwise. If you want to check to see if a file is a directory, use IfFileExists DIRECTORY\\*.*\n\nChecks the reboot flag, and jumps to jump_if_set if the reboot flag is set, otherwise jumps to jump_if_not_set. The reboot flag can be set by Delete and Rename, or manually with SetRebootFlag.\n\nChecks the silent flag, and jumps to jump_if_silent if the installer is silent, otherwise jumps to jump_if_not. The silent flag can be set by SilentInstall, SilentUninstall, SetSilent and by the user passing /S on the command line.\n\nChecks if SetShellVarContext is set to all.\n\nWarning: Do not call this in [un].onInit because the language file has not been fully initialized.\n\nCompares two integers val1 and val2. If val1 and val2 are equal, Gotos jump_if_equal, otherwise if val1 < val2, Gotos jump_if_val1_less, otherwise if val1 > val2, Gotos jump_if_val1_more.\n\nSame as IntCmp, but treats the values as unsigned integers.\n\nSame as IntCmp, but treats the values as 64-bit integers.\n\nThis function is only available when building a 64-bit installer.\n\nSame as IntCmp, but treats the values as 64-bit unsigned integers.\n\nThis function is only available when building a 64-bit installer.\n\nSame as IntCmp, but treats the values as pointer sized integers.\n\nSame as IntCmp, but treats the values as pointer sized unsigned integers.\n\nDisplays a MessageBox containing the text \"messagebox_text\". mb_option_list must be one or more of the following, delimited by |s (e.g. MB_YESNO|MB_ICONSTOP).\nâ€¢ MB_OK - Display with an OK button\nâ€¢ MB_OKCANCEL - Display with an OK and a cancel button\nâ€¢ MB_YESNO - Display with yes and no buttons\nâ€¢ MB_YESNOCANCEL - Display with yes, no, cancel buttons\n\nReturn_check can be 0 (or empty, or left off), or one of the following:\n\nIf the return value of the MessageBox is return_check, the installer will Goto jumpto.\n\nUse the /SD parameter with one of the return_check values above to specify the option that will be used when the installer is silent. See section 4.12 for more information.\n\nCauses the installer to exit as soon as possible. After Quit is called, the installer will exit (no callback functions will get a chance to run).\n\nCompares (case insensitively) str1 to str2. If str1 and str2 are equal, Gotos jump_if_equal, otherwise Gotos jump_if_not_equal.\n\nSame as StrCmp, but case sensitive.\n\nOpens a file named \"filename\" and sets the handle output variable with the handle. The openmode should be one of \"r\" (read) \"w\" (write, all contents of file are destroyed) or \"a\" (append, meaning opened for both read and write, contents preserved). In all open modes, the file pointer is placed at the beginning of the file. If the file cannot be opened the handle output is set to empty and the error flag is set.\n\nIf no absolute path is specified the current folder will be used. The current folder is the folder set using the last SetOutPath instruction. If you have not used SetOutPath the current folder is $EXEDIR.\n\nReads a string (ANSI characters) from a file opened with FileOpen. The string is read until either a newline (or carriage return newline pair) occurs, or until a null byte is read, or until maxlen is met (if specified). By default, strings are limited to 1024 characters (a special build with larger NSIS_MAX_STRLEN can be compiled or downloaded). If the end of file is reached and no more data is available, the output string will be empty and the error flag will be set.\n\nUnicode: DBCS text is supported but conversion output is limited to UCS-2/BMP, surrogate pairs are not supported. The system default ANSI codepage (ACP) is used during the conversion.\n\nThis function is only available when building a Unicode installer.\n\nReads a string (UTF-16LE characters) from a file opened with FileOpen. The string is read until either a newline (or carriage return newline pair) occurs, or until a null wide-character is read, or until maxlen is met (if specified). By default, strings are limited to 1024 characters (a special build with larger NSIS_MAX_STRLEN can be compiled or downloaded). If the end of file is reached and no more data is available, the output string will be empty and the error flag will be set. If present, the BOM at the start of the file is skipped.\n\nReads a byte from a file opened with FileOpen. The byte is stored in the output as an integer (0-255). If the end of file is reached and no more data is available, the output will be empty and the error flag will be set.\n\nThis function is only available when building a Unicode installer.\n\nReads a word (2-bytes) from a file opened with FileOpen. The word is stored in the output as an integer (0-65535). If the end of file is reached and no more data is available, the output will be empty and the error flag will be set.\n\nSeeks a file opened with FileOpen. If mode is omitted or specified as SET, the file is positioned to \"offset\", relative to the beginning of the file. If mode is specified as CUR, then the file is positioned to \"offset\", relative to the current file position. If mode is specified as END, then the file is positioned to \"offset\", relative to the end of the file. If the final parameter \"new position\" is specified, the new file position will be stored in that variable.\n\nWrites an ANSI string to a file opened with FileOpen. If an error occurs writing, the error flag will be set.\n\nThis function is only available when building a Unicode installer.\n\nWrites a Unicode (UTF-16LE) string to a file opened with FileOpen. If an error occurs, the error flag will be set. A BOM can be added to empty files with /BOM.\n\nWrites the integer interpretation of 'string' to a file opened with FileOpen. The error flag is set if an error occurs while writing. The following code writes a \"Carriage Return / Line Feed\" pair to the file.\n\nNote that only the low byte of the integer is used, i.e. writing 256 is the same as writing 0, etc.\n\nThis function is only available when building a Unicode installer.\n\nWrites the integer interpretation of 'string' as a WORD (2-bytes, range: 0-65535) to a file opened with FileOpen. The error flag is set if an error occurs while writing. The following code writes a \"Carriage Return / Line Feed\" pair to the file.\n\nNote that only the low WORD of the integer is used, i.e. writing 65536 is the same as writing 0, etc.\n\nPerforms a search for 'filespec', placing the first file found in filename_output (a user variable). It also puts the handle of the search into handle_output (also a user variable). If no files are found, both outputs are set to empty and the error flag is set. FindClose must be used to close the handle. Note that the filename output is without path.\n\nContinues a search began with FindFirst. handle should be the handle_output_variable returned by FindFirst. If the search is completed (there are no more files), filename_output is set to empty and the error flag is set. Note that the filename output is without path.\n\nWrites the uninstaller to the filename (and optionally path) specified. Only valid from within an install section or function and requires that you have an uninstall section in your script. You can call this one or more times to write out one or more copies of the uninstaller.\n\nReturns the last error level set by SetErrorLevel or -1 if it has never been set.\n\nUse in the leave function of a directory page. Reads the flag set if 'DirVerify leave' is used. Possible values:\n\n2: Not enough space on installation drive\n\nInitializes the plug-ins dir ($PLUGINSDIR) if not already initialized.\n\nSets the error level of the installer or uninstaller to error_level. See Error Levels for more information.\n\nWarning: -1 is reserved for internal use. Negative numbers should be avoided for compatibility with batch scripts.\n\nSets the context of $SMPROGRAMS and other shell folders. If set to 'current' (the default), the current user's shell folders are used. If set to 'all', the 'all users' shell folder is used. The all users folder may not be supported on all OSes. If the all users folder is not found, the current user folder will be used. Please take into consideration that a \"normal user\" has no rights to write in the all users area. Only admins have full access rights to the all users area. You can check this by using the UserInfo plug-in. See Contrib\\UserInfo\\UserInfo.nsi for an example.\n\nNote that, if used in installer code, this will only affect the installer, and if used in uninstaller code, this will only affect the uninstaller. To affect both, it needs to be used in both.\n\nPauses execution in the installer for sleeptime_in_ms milliseconds. sleeptime_in_ms can be a variable, e.g. \"$0\" or a number, i.e. \"4321\".\n\nSets the user variable $x with str. str can contain variables (including the user variable being set (concatenating strings this way is possible, etc)). If maxlen is specified, the string will be a maximum of maxlen characters (if maxlen is negative, the string will be truncated abs(maxlen) characters from the end). If start_offset is specified, the source is offset by it (if start_offset is negative, it will start abs(start_offset) from the end of the string).\n\nSets user variable $x to the length of str.\n\nThe stack is a temporary storage area useful for saving the state of registers/variables and for communicating with functions and plug-ins. See Wikipedia for a general introduction to stacks.\n\nWhen no parameter is specified, exchanges the top two elements of the stack. When a parameter is specified and is a user variable, exchanges the top element of the stack with the parameter. When a parameter is specified and is a positive integer, Exch will swap the item on the top of the stack with the item that is specified by the offset from the top of the stack in the parameter. If there are not enough items on the stack to accomplish the exchange, a fatal error will occur (to help you debug your code :).\n\nPops a string off of the stack into user variable $x. If the stack is empty, the error flag will be set.\n\nPushes a string onto the stack. The string can then be Pop'ed off of the stack.\n\nFormats the number in \"numberstring\" using the format \"format\", and sets the output to user variable $x. The format string supports the same syntax as wsprintf except that the length fields and the type are not supported. Example format strings include \"%08X\" and \"%u\".\n\nSupports the and length fields and the type in addition to the syntax supported by .\n\nThis function is only available when building a 64-bit installer.\n\nCombines value1 and (depending on OP) value2 into the specified user variable ( ). OP is defined as one of the following:\n\nCombines value1 and (depending on OP) value2 into the specified user variable ( ). OP is the same list of operators as supported by .\n\nReboots the computer. Be careful with this one. If it fails, .onRebootFailed is called. In any case, this instruction never returns, just like Quit.\n\nSets the reboot flag to either true or false. The flag's value can be read using IfRebootFlag.\n\nSets whether install logging to $INSTDIR\\install.log will happen. $INSTDIR must have a value before you call this function or it will not work. Note that the NSIS_CONFIG_LOG build setting must be set ( ) when building (it is not set by default) to support this. See Building NSIS for more information about recompiling NSIS.\n\nIf installer logging is enabled, inserts text \"text\" into the log file.\n\nSets the section's flags. The flag is a 32-bit integer. The first bit (lowest) represents whether the section is currently selected, the second bit represents whether the section is a section group (don't modify this unless you really know what you are doing), the third bit represents whether the section is a section group end (again, don't modify), the fourth bit represents whether the section is shown in bold or not, the fifth bit represents whether the section is read-only, the sixth bit represents whether the section group is to be automatically expanded, the seventh bit is set for section groups which are partially selected, the eighth bit is internally used for partially selected section group toggling and the ninth bit is used for reflecting section name changes. The error flag will be set if an out of range section is specified.\n\nEach flag has a name, prefixed with `SF_`:\n\nFor an example of usage please see the one-section.nsi example.\n\nFor more useful macros and definitions, see Include\\Sections.nsh.\n\nRetrieves the section's flags. See SectionSetFlags for a description of the flags. The error flag will be set if an out of range section is specified.\n\nSets the description for the section section_index. If the text is set to \"\" then the section will be hidden. The error flag will be set if an out of range section is specified.\n\nStores the text description of the section section_index into the output. If the section is hidden, stores an empty string. The error flag will be set if an out of range section is specified.\n\nSets the install types the section specified by section_index defaults to the enabled state in. Note that the section index starts with zero. Every bit of inst_types is a flag that tells if the section is in that install type or not. For example, if you have 3 install types and you want the first section to be included in install types 1 and 3, then the command should look like this:\n\nbecause the binary value for 5 is \"...00101\". The error flag will be set if the section index specified is out of range.\n\nRetrieves the install types flags array of a section. See above explanation about SectionSetInstTypes for a description of how to deal with the output. The error flag will be set if the section index is out of range.\n\nSets the size of the section specified by section_index. Note that the index starts with zero. The Value for Size must be entered in KiloByte and supports only whole numbers.\n\nGets the size of the section specified by section_index and stores the value in the given user variable. Note that the index starts with zero. The error flag will be set if the section index is out of range.\n\nSets the current InstType. inst_type_idx should be between 0 and 31. The error flag is not set if an out of range InstType was used.\n\nGet the current InstType and stores it in user_var. If the first install type is selected, 0 will be put in user_var. If the second install type is selected, 1 will be put in user_var, and so on. The value of ${NSIS_MAX_INST_TYPES} (32 by default) means that the user selected a custom set of sections (Simply selecting \"Custom\" in the drop-down menu is not enough to trigger this, the value is calculated by the sections actually selected).\n\nSets the text of the specified InstType. If the text is empty then the InstType is removed. By using a previously unused inst_type_idx number you can create new InstTypes. To add/remove Sections to this new InstType see SectionSetInstTypes. Unlike SectionIn the index is zero based, which means the first install type's index is 0.\n\nGets the text of the specified InstType.\n\nMakes the installer window visible and brings it to the top of the window list. If an application was executed that shows itself in front of the installer, BringToFront would bring the installer back in focus.\n\nRecent Windows versions restrict the setting of foreground windows. If the user is working with another application during installation, the user may be notified using a different method.\n\nCreates a font and puts its handle into user_var. For more information about the different parameters have a look at MSDN's page about the Win32 API function CreateFont().\n\nYou can get the current font used by NSIS using the ^Font and ^FontSize LangStrings.\n\nAdds the string \"user_message\" to the details view of the installer.\n\nEnables or disables mouse and keyboard input to the specified window or control. Possible states are 0 (disabled) or 1 (enabled).\n\nSearches for a window. Behaves like Win32's FindWindowEx(). Searches by windowclass (and/or windowtitle if specified). If windowparent or childafter are specified, the search will be restricted as such. If windowclass or windowtitle is specified as \"\", they will not be used for the search. If the window is not found the user variable is set to 0.\n\nRetrieves the handle of a control identified by item_id in the specified dialog box dialog. If you want to get the handle of a control in the inner dialog, first use FindWindow to get the handle of the inner dialog.\n\nIf HWND is a window, Gotos jump_if_window, otherwise, Gotos jump_if_not_window (if specified).\n\nLoads and sets a image on a static control. is the handle of the control. must 0 for bitmaps and 1 for icons (and the control style must match the image type). should be 0x10 to load from a file or 0 to load from a resource. specifies the file path or resource name. Use to load a resource from the installer .EXE. Use if is a string, otherwise it is interpreted as a number. Use to resize the image to the dimensions of the control. can optionally receive the handle of the loaded image.\n\nImages loaded on individual pages should be destroyed to minimize resource leaks. If images are loaded into the same control multiple times, the previous image will only be destroyed if it is a bitmap image. Previous icons and 32-bit ARGB bitmaps must be retrieved with and destroyed.\n\nLockWindow on prevents the main window from redrawing itself upon changes. When LockWindow off is used, all controls that weren't redrawn since LockWindow on will be redrawn. This makes the pages flickering look nicer because now it flickers a group of controls at the same time, instead of one control at a time. The individual control flickering is more noticeable on old computers.\n\nSends a message to HWND. If a user variable $x is specified as the last parameter (or one before the last if you use /TIMEOUT), the return value from SendMessage will be stored in it. Note that when specifying 'msg' you must just use the integer value of the message. Include WinMessages.nsh to have all Windows messages defined in your script. If you wish to send strings use \"STR:a string\" as wParam or lParam where needed. Use /TIMEOUT=time_in_ms to specify the duration, in milliseconds, of the time-out period.\n\nOverrides the default auto window-closing flag (specified for the installer using AutoCloseWindow, and false for the uninstaller). Specify 'true' to have the install window immediately disappear after the install has completed, or 'false' to make it require a manual close.\n\nSets the current bitmap file displayed as the branding image. If no IMGID is specified, the first image control found will be used, or the image control created by AddBrandingImage. Note that this bitmap must be present on the user's machine. Use first to put it there. If /RESIZETOFIT is specified the image will be automatically resized (very poorly) to the image control size. If you used AddBrandingImage you can get this size by compiling your script and watching for AddBrandingImage output, it will tell you the size. SetBrandingImage will not work when called from .onInit!\n\nShows or hides the details on the InstFiles page, depending on which parameter you pass. Overrides the default details view, which is set via ShowInstDetails.\n\nSets mode at which commands print their status. None has commands be quiet, listonly has status text only added to the listbox, textonly has status text only printed to the status bar, and both enables both (the default). For extracting many small files, textonly is recommended (especially on Win9x with smooth scrolling enabled).\n\nSets the text and background color of a static control, edit control, button or a dialog. text_color and bg_color don't accept variables. Use GetDlgItem to get the handle (HWND) of the control. To make the control transparent specify as the background color value. Prefix the color value with to specify a Windows constant. You can also specify with or without text color and background color to make the control completely gray (or any other color you choose). This is used by the branding text control in the MUI.\n\nSets the installer to silent mode or normal mode. See SilentInstall for more information about silent installations. Can only be used in .onInit.\n\nSets the visibility of a window. Possible show_states are the same as the Windows ShowWindow function. SW_* constants are defined in Include\\WinMessages.nsh.\n\nLoads a language file for the construction of a language table. All of the language files that ship with NSIS are in Contrib\\Language Files\n\nAfter you have inserted the language file ${LANG_langfile} will be defined as the language id (for example, ${LANG_ENGLISH} will be defined as 1033). Use it with LangString, LicenseLangString, LangDLL and VIAddVersionKey.\n\nDefines a multilingual string. This means its value may be different (or not, it's up to you) for every language. It allows you to easily make your installer multilingual without the need to add massive switches to the script.\n\nEach language string has a name that identifies it and a value for each language used by the installer. They can be used in any runtime string in the script. To use a language string all you need to add to the string is $(LangString_name_here) where you want the LangString to be inserted.\nâ€¢ Unlike defines that use curly braces - {}, language strings use parenthesis - ().\nâ€¢ If you change the language in the .onInit function, note that language strings in .onInit will still use the detected language based on the user's default Windows language because the language is initialized after .onInit.\nâ€¢ Always set language strings for every language in your script.\nâ€¢ If you set the language ID to 0 the last used language by LangString or LoadLanguageFile will be used.\n\nDoes the same as LangString only it loads the string from a text/RTF file and defines a special LangString that can only be used by LicenseData.\n\nAs of version 2 NSIS fully supports multiple languages. The interface of one installer can support multiple languages.\n\nUse LoadLanguageFile for every language to load the default interface texts and language properties. Visit the NSIS translations forum for more information about creating new language files.\n\nThe default interface texts can easily be changed using instructions like ComponentText etc.\n\nYou can also use the contents of the standard language strings in your own strings (for example, $(^Name) contains the installer's name set using the Name instruction). The names of all standard language strings are listed as comments just above the strings in the language files. The language files are located in Contrib\\Language Files.\n\nTo create your own language strings, use LangString.\n\nFor an example of an installer with multiple languages, see languages.nsi.\n\nWhen the installer starts up it goes through these steps to select the interface language:\nâ€¢ If there is no perfect match, find a primary language match\nâ€¢ If there is no match, use the first language defined in the script (make sure your first language is a common one like English)\nâ€¢ If the language variable $LANGUAGE has changed during .onInit, NSIS goes through steps 2 to 4 again.\n\nThe LangDLL plug-in allows you to give the user an option to choose the language of the installer. Just push the language id (${LANG_langfile}) and its name for every language in your installer, then the number of languages pushed, the caption, and the text that tells the user to select the language, call the plug-in function named LangDialog, pop the returned value into $LANGUAGE and you're good to go. If the user clicks on the cancel button the return value will be \"cancel\".\n\nFor an example of usage see languages.nsi.\n\nRTL languages are languages that are written from right to left (e.g. Arabic and Hebrew). NSIS fully supports RTL languages. In the language file there is a place to specify if the language is RTL or not. To find out at runtime if the current language is RTL or not, check the value of the $(^RTL) language string. It will be 1 if the language is RTL and 0 otherwise. This can be useful when using plug-ins that create dialogs, they usually have RTL settings too.\n\nThe abilities of the NSIS scripting language can be extended by utilising functionality provided in a DLL file. Probably the best known example of this is the InstallOptions.dll bundled with every NSIS release.\n\nWhen the NSIS compiler starts it scans the plug-ins directory for DLLs and makes a list of the plug-ins found and their exported functions. During compilation, if a sequence such as fred::flintstone is encountered where the compiler expected to find a language keyword the compiler will look through this list. If a list entry specifies that fred.dll exports function flintstone NSIS will pack the fred.dll file into the created installer binary.\n\nDuring execution of a plug-in command NSIS will unpack the necessary DLL to a temporary folder ($PLUGINSDIR), push all of the arguments specified (right-to-left order), and then execute the DLL function.\n\nA plug-in call looks like this:\n\nAll parameters are pushed onto the stack (in this case, the plug-in function only needs one parameter). Some plug-in commands may not need any parameters on the stack, others might require more of them. To use a plug-in command you will need to read the documentation for the plug-in so that you know what parameters its functions require.\n\nIf you want to call a plug-in that is stored on user's hard drive or somewhere else, use CallInstDLL. Almost all plug-ins provide installer functionality, so using plug-in commands is way easier. Using CallInstDLL can be useful when you have created plug-ins that are linked to a certain version of your application and are being copied to the installation folder.\n\nSilent installers are installers which require no user intervention and have no user interface. The user doesn't see any dialog and isn't asked any questions. This is useful for network administrators who wish to install or uninstall something without user intervention so they can perform the operation quickly over any number of computers. It is also useful for other developers who wish to embed another installer in their own and collect all of the required information on their installer instead of showing two installers.\n\nNSIS installers and uninstallers can be both silent and not silent. When an installer or an uninstaller is silent, not all callback functions are called. .onGUIInit, .onGUIEnd, their uninstaller equivalents and any callback related to a specific page or page type will not be called.\n\nThere are several methods to make an installer or an uninstaller silent:\n\nTo check if the installer/uninstaller is silent use IfSilent.\n\nTo make sure your installer will be silent when it needs to, you should check with IfSilent before each command that might require user intervention or create a window. The MessageBox command, which is the most common culprit in silent installers, has the /SD switch to set a default answer for silent installers. If you want your installer/uninstaller to be able to be completely silent you should use this switch. All internal NSIS message boxes have defaults for silent installers. The silent.nsi example demonstrates all aspects of this topic.\n\nSince the directory page is not shown in silent installers the user has an option to specify the installation directory on the command line (this also works on non-silent installers/uninstallers). To do that, the user uses the /D switch as in the following example:\n\nIf your installer/uninstaller requires some more information that can not be gathered when silent, you can allow the user to specify that information on the command line and process it in .onInit. You can use GetOptions.\n\nThe above example will copy the value the user passes on after /USERNAME= into $0. This allows the user to specify the required information on the command line instead of using the interactive user interface. The user can use:\n\nIf your installer/uninstaller requires a lot of information and you want it to be able to be silent, you should allow the user to pass on a path to an answers file. This would be much more comfortable than writing all of the information on the command line."
    },
    {
        "link": "https://nsis.sourceforge.io/Docs/Chapter2.html",
        "document": "Most software packages you download or buy come with an installer. The installer copies and/or updates files, writes registry keys, writes configuration, creates shortcuts, etc. All of this is done automatically for the user. All the user needs to do is supply some information and the installer will do the rest. The user goes through a wizard, makes the appropriate choices and waits until the installer finishes. After the installer has finished the user is left only with the simple task of starting the program. The user doesn't have to worry about things he might have forgotten because all of the necessary steps were done by the installer.\n\nNSIS is a tool for developers to create such installers. NSIS allows you to create everything from basic installers that just copies files to very complex installers that handle a lot of advanced tasks such as writing registry keys, settings environment variables, downloading the latest files from the internet, customizing configuration files and more. NSIS is very flexible and its scripting language is easy to learn.\n\nNSIS compiles all of the files and the installation script into one executable file so your application will be easy to distribute. NSIS adds only about 34KB of code of its own (for the default configuration) to the data. NSIS boasts the smallest overhead available while still providing a lot of options thanks to its powerful scripting language and support of external plug-ins.\n\nTo create a NSIS installer you first have to write a NSIS script. A NSIS script is just a regular text file with a special syntax. You can edit scripts with any text editor. It's recommended to use a text editor that shows line numbers because NSIS uses line numbers to indicate where errors lie, and to warn you about where errors might lie. An editor that supports syntax highlighting is also recommended. You can download editors made especially for NSIS and files for syntax highlighting from the NSIS Wiki.\n\nIn a NSIS script every line is treated as a command. If your command is too long for one line you can use a back-slash - '\\' - at the end of the line. The compiler will treat the new line as an addition to the previous line and will not expect a new command. For example:\n\nIf you want to use a double-quote in a string you can either use $\\\" to escape the quote or quote the string with a different type of quote such as ` or '.\n\nFor more details about the script format, see Script File Format.\n\nThe default extension for a script file is .nsi. Header files have the .nsh extension. Header files can help you arrange your script by dividing it to more than one block of code, you can also put functions or macros in header files and include the header files in multiple installers. This makes updating easier and it also makes your scripts easier to read. To include a header file in your script use !include. Header files that reside in the Include directory under your NSIS directory can be included just by their name. For example:\n\nA NSIS script contains Installer Attributes, Pages and Sections/Functions. You can also use Compiler Commands for compile-time operations. The OutFile instruction is required and tells NSIS where to write the installer, you also need at least one section.\n\nInstaller Attributes determine the behavior and the look and feel of your installer. With these attributes you can change texts that will be shown during the installation, the number of installation types etc. Most of these commands can only be set and are not changeable during runtime.\n\nOther basic instructions are Name and InstallDir.\n\nFor more information about installer attributes, have a look at Installer Attributes.\n\nA non-silent installer has a set of wizard pages to let the user configure the installer. You can set which pages to display using the Page command (or PageEx for more advanced settings). A typical set of pages looks like this:\n\nFor the installer, this typical set of pages will display a license agreement, allow selection of components to install, allow selection of an installation directory, and finally install the selected components in the instfiles page. For the uninstaller, it will display a confirmation page, and uninstall in the instfiles page.\n\nIt's common for installers to have several things the user can install. For example in the NSIS distribution installer you can choose to install additional tools, plug-ins, examples and more. Each of these components has its own piece of code. If the user selects to install this component then the installer will execute that code. In the script, that code is defined in sections. Each section corresponds to one component on the components page. The section's name is the displayed component name and the section code will be executed if that component is selected. It is possible to build your installer with only one section but if you want to use the components page and let the user choose what to install, you'll have to use more than one section.\n\nUninstallers can also have multiple sections. Uninstaller section names are prefixed with 'un.'. For example:\n\nThe instructions that can be used in sections are very different from the installer attributes instructions, they are executed at runtime on the user's computer. Those instructions can extract files, read from and write to the registry, INI files or normal files, create directories, create shortcuts and a lot more. You can find out more in Instructions.\n\nThe most basic instructions are SetOutPath which tells the installer where to extract files and File which extracts files.\n\nFor more information about sections see Sections.\n\nFunctions can contain script code, just like sections. The difference between sections and functions is the way they are called. There are two types of functions, user functions and callback functions.\n\nUser functions are called by the user from within sections or other functions using the Call instruction. User functions will not execute unless you call them. After the code in the function has executed the installer will continue executing the instructions that came after the Call instruction, unless you have aborted the installation inside the function. User functions are very useful if you have a set of instructions that need to be executed at several locations in the installers. If you put the code into a function you can save the copying time and you can maintain the code more easily.\n\nCallback functions are called by the installer upon certain defined events such as when the installer starts. Callbacks are optional. If for example you want to welcome the user to your installer you can define a function called .onInit. The NSIS compiler will recognize this function as a callback function by the name and will call it when the installer starts.\n\nAbort has a special meaning in callback functions. Each callback function has its own meaning for it, have a look at Callback Functions for more information. In the above example Abort tells the installer to stop initializing the installer and quit immediately.\n\nFor more information about functions see Functions.\n\nConditionally executing code, or executing code in a loop can be done using StrCmp, IntCmp, IfErrors, Goto and more. However, there's a much easier way do this. The LogicLib provides some very simple macros that allow easy construction of complex logical structures. Its syntax, explained in LogicLib.nsh, is similar to other programming languages and can prove to be simpler for beginners and advanced users alike.\n\nFor example, checking a value of a variable without the LogicLib can be done as follows.\n\nHowever, with the LogicLib the code is much more readable and easy to understand, as can be seen in the following example.\n\nThe same can also be done using a switch, as shown in the following example.\n\nMultiple conditions are also supported. The following example will notify the user, if both $0 and $1 are empty.\n\nThe LogicLib removes the need for labels and relative jumps, thus prevents label name conflicts, and removes the need to manually adjust relative jump offsets every time the script is changed.\n\nIt also simplifies looping by supporting the common while, do and for loops. All of the following examples count to five using the LogicLib.\n\nTo use the LogicLib the following line needs to be added near the top of the script.\n\nMore examples can be found in LogicLib.nsi.\n\nYou can declare your own variables ($VARNAME) with the Var command. Variables are global and can be used in any Section or Function.\n\nIn addition there is a stack, which can also be used for temporary storage. To access the stack use the commands Push and Pop. Push adds a value to the stack, Pop removes one and sets the variable.\n\nFor shared code, there are 20 registers available (like $0 and $R0). These static variables don't have to be declared and you won't get any name conflicts. If you want to use these variables in shared code, store the original values on the stack and restore the original values afterwards.\n\nAfter calling the function, the variables contain the same value as before. Note the order when using multiple variables (last-in first-out):\n\nThe more you work with NSIS the more complex the scripts will become. This will increase the potential of mistakes, especially when dealing with lots of variables. There are a few possibilities to help you debugging the code. To display the contents of variables you should use MessageBoxes or DetailPrint. To get a brief overview about all variables you should use the plug-in DumpState. By default all actions of the Installer are printed out in the Log Window. You can access the log if you right-click in the Log Window and select \"Copy Details To Clipboard\". There is also a way to write it directly to a file, see here.\n\nWhen a user runs an installer or uninstaller, pages are displayed in the order they were defined in the script. When the instfiles page is reached, sections, corresponding to the selected components, are executed in the order they were defined in the script. If the components page is not displayed, all sections are executed, assuming they were not unselected or somehow disabled by the script.\n\nBeside code in sections, there's also code in callback functions. If defined, they might be executed before the sections code. For example, the .onInit callback function is executed before anything else in the script. There are also page callback functions which are executed at certain points of the page display process.\n\nCompiler commands will be executed at compile time on your computer. They can be used for conditional compilation, to include header files, to execute applications, to change the working directory and more. The most common usage is defines. Defines are compile time constants. You can define your product's version number and use it in your script. For example:\n\nFor more information about defines see Conditional Compilation.\n\nAnother common use is macros. Macros are used to insert code at compile time, depending on defines and using the values of the defines. The macro's commands are inserted at compile time. This allows you to write a general code only once and use it a lot of times but with a few changes. For example:\n\nThis macro helps you avoid writing the same code for both the installer and the uninstaller. The two !insertmacros insert two functions, one for the installer called MyFunc and one for the uninstaller called un.MyFunc and both do exactly the same thing.\n\nFor more information see Compile Time Commands.\n\nThe second thing you need to do in order to create your installer after you have created your script is to compile your script. MakeNSIS.exe is the NSIS compiler. It reads your script, parses it and creates an installer for you.\n\nTo compile you can right-click your .nsi file and select Compile NSIS Script. This will cause MakeNSISW, the NSIS Compiler Interface, to launch and call MakeNSIS to compile your script. MakeNSISW receives the output of MakeNSIS and presents it to you in a window where you can see it, copy it, test the installer and more. Using makensis.exe from the command prompt is also possible.\n\nThe compiler will check your script and give you warnings or an error. If an error occurs (i.e. 2 parameters required but only 1 given) the compiler will abort and a short error message including the line number will be displayed. For non-critical errors the compiler will give a warning (i.e. two DirText commands in one script). If your script has no errors the compiler will output an installer for you to distribute.\n\nNSIS supports different compression methods, as explained here. ZLIB is the default compression method, which is fast and uses only a little bit of memory. LZMA is a good method for the creation of small installers for internet distribution. BZIP2 usually compresses better than ZLIB but not as good as LZMA, it is useful if you need lower memory usage or fast script compilation.\n\nIt is also possible to compile Windows installers on Linux, BSD or Mac OS X servers. See Building NSIS for details.\n\nA popular user interface for NSIS is the Modern User Interface. It has an interface like the wizards of recent Windows versions. The Modern UI is not only a customized resource file, it has a lots of new interface elements. It features a white header to describe the current step, a description area on the component page, a welcome page, a finish page that allows the user to run the application or reboot the system and more.\n\nFor more information, see the Modern UI 2 Readme and the Modern UI Examples.\n\nNSIS support plug-ins that can be called from the script. Plug-ins are DLL files written in C, C++, Delphi or another programming language and therefore provide a more powerful code base to NSIS.\n\nA plug-in call looks like this:\n\nEvery plug-in's function has its own requirements when it comes to parameters, some will require none, some will accept as many parameters as you want to send. Examples:\n\nThe plug-ins that NSIS knows of are listed at the top of the compiler output (verbose level 4). NSIS searches for plug-ins in the Plugins folder under your NSIS directory and lists all of their available functions. You can use !addplugindir to tell NSIS to search in other directories too.\n\nThe NSIS distribution already includes many plug-ins. InstallOptions is a popular plug-in that allows you to create custom pages, in combination with the NSIS Page commands (See Pages). The Startmenu plug-in provides a page that allows the user to choose a Start Menu folder. There are a lot of plug-ins for different purposes, take a look in the Docs folder for help files and examples. You can find additional plug-ins online: NSIS Wiki.\n\nYou can also create a plug-in yourself. C/C++ and Delphi header files are already available, see the example plugin for how to do this. Source code of included plug-ins can also be found in the source code package.\n\nThis tutorial has described the basic NSIS features, to learn more about everything NSIS can do, take some time to read the rest of this manual."
    }
]