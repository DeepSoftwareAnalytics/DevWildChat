[
    {
        "link": "https://github.com/icsharpcode/SharpZipLib",
        "document": "SharpZipLib (#ziplib, formerly NZipLib) is a compression library that supports Zip files using both stored and deflate compression methods, PKZIP 2.0 style and AES encryption, tar with GNU long filename extensions, GZip, zlib and raw deflate, as well as BZip2. Zip64 is supported while Deflate64 is not yet supported. It is implemented as an assembly (installable in the GAC), and thus can easily be incorporated into other projects (in any .NET language). The creator of SharpZipLib put it this way: \"I've ported the zip library over to C# because I needed gzip/zip compression and I didn't want to use libzip.dll or something like this. I want all in pure C#.\"\n\nSharpZipLib was originally ported from the GNU Classpath java.util.zip library for use with SharpDevelop, which needed gzip/zip compression. bzip2 compression and tar archiving were added later due to popular demand.\n\nThe SharpZipLib homepage has precompiled libraries available for download, API documentation, release history, samples and more.\n\nThis software is now released under the MIT License. Please see issue #103 for more information on the relicensing effort.\n\nPrevious versions were released under the GNU General Public License, version 2 with an exception which allowed linking with non-GPL programs.\n\nSharpZipLib was initially developed by Mike Kr√ºger. Past maintainers are John Reilly, David Pierson and Neil McNeight.\n\nAnd thanks to all the people that contributed features, bug fixes and issue reports."
    },
    {
        "link": "https://github.com/icsharpcode/SharpZipLib/releases",
        "document": "New patch release that mainly fixes issues with the changes in v1.4.0.\n\nFurther iteration on the StringCodec API, since the released version was confusing to use and in some cases could not be used without causing deprecation warnings.\n\nTwo issues that could cause deadlocks was found in v1.4.0, one due to a typo in the async implementation and one due to a buffer not being cleared.\n‚Ä¢ üêõ #791 use sync codepath on sync methods by Lars Hanisch\n‚Ä¢ üêõ #789 clear rest of buffer when eof is reached by nils m√•s√©n\n\nGeneral async speed improvement, since we now correctly opt out of requiring to continue in the same context ( ).\n‚Ä¢ üêõ #787 use ConfigureAwait(false) on every await by Lars Hanisch\n\nOther changes (not related to library code):"
    },
    {
        "link": "https://icsharpcode.github.io/SharpZipLib/help/api/ICSharpCode.SharpZipLib.Zip.ZipFile.html",
        "document": "This class represents a Zip archive. You can ask for the contained entries, or get an input stream for a file entry. The entry is automatically decompressed. You can also update the archive adding or deleting entries. This class is thread safe for input: You can open input streams for arbitrary entries in different threads. \n\n \n\nAuthor of the original java version : Jochen Hoenicke"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.io.compression.zipfile?view=net-9.0",
        "document": "To use the ZipFile class in a .NET Framework app, you must add a reference to the assembly in your project. For information on how to add a reference to your project in Visual Studio, see How to: Add or Remove References.\n\nThe methods for manipulating zip archives and their files are spread across three classes: ZipFile, ZipArchive, and ZipArchiveEntry.\n\nThis example shows how to create and extract a zip archive by using the ZipFile class. It compresses the contents of a folder into a zip archive, and then extracts that content to a new folder."
    },
    {
        "link": "https://nuget.org/packages/sharpziplib",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/22443752/how-to-extract-a-folder-from-zip-file-using-sharpziplib",
        "document": "I have a file which contains inside a Folder with a bunch of other files and folders in it.\n\nI found SharpZipLib after figuring out that .gz / GzipStream was not the way to go since its only for individual files. More importantly, doing this is similar to using GZipStream meaning it will create a FILE. But I have whole folder zipped. How do I unzip to a\n\nFor some reason the example unzipping here is set to ignore directories, so I'm not totally sure how that is done.\n\nAlso, I need to use .NET 2.0 for accomplish this."
    },
    {
        "link": "https://stackoverflow.com/questions/328343/using-sharpziplib-to-unzip-specific-files",
        "document": "I'm trying to use SharpZipLib to pull specified files from a zip archive. All of the examples I've seen always expect that you want to unzip the entire zip, and do something along the lines of:\n\nWhat I want to do is something like:\n\nAs my needs involve using a zip as a package and only grabbing files into memory as needed.\n\nIs anyone familiar with SharpZipLib? Does anyone know if I can do this without running through the entire zip by hand?"
    },
    {
        "link": "https://ironpdf.com/blog/net-help/sharpziplib-extract-zip-csharp",
        "document": "Test in production without watermarks.\n\nWorks wherever you need it to."
    },
    {
        "link": "https://programmersranch.com/2013/10/c-extracting-zipped-files-with.html",
        "document": ""
    },
    {
        "link": "https://gigi.nullneuron.net/gigilabs/extracting-zipped-files-with-sharpziplib",
        "document": "This article was originally posted as ‚ÄúC#: Extracting Zipped Files with SharpZipLib‚Äù at Programmer‚Äôs Ranch on 4th October 2014. Minor amendments have been applied in this republished version. The article illustrates how to reference and work with a third-party library. Nowadays it‚Äôs simpler to do this using NuGet.\n\nIn this article, we‚Äôre going to learn how to extract files from a .zip file using a library called SharpZipLib. Additionally, we will also learn how to work with third-party libraries. This is because SharpZipLib is not part of the .NET Framework, and is developed by an independent team.\n\nTo get started, we need to create a new Console Application in SharpDevelop (or Visual Studio, if you prefer), and also download SharpZipLib from its website. When you extract the contents of the .zip file you downloaded, you‚Äôll find different versions of ICSharpCode.SharpZipLib.dll for different .NET versions. That‚Äôs the library that will allow us to work with .zip files, and we need the one in the net-20 folder (the SharpZipLib download page says that‚Äôs the one for .NET 4.0, which this article is based on).\n\nNow, to use ICSharpCode.SharpZipLib.dll, we need to add a reference to it from our project. We‚Äôve done this before in my article ‚ÄúC#: Unit Testing with SharpDevelop and NUnit‚Äú. You need to right click on the project and select ‚ÄúAdd Reference‚Äù:\n\nIn the window that comes up, select the tab called ‚Äú.NET Assembly Browser‚Äù, since we want to reference a third party .dll file. Open the ICSharpCode.SharpZipLib.dll file, click the ‚ÄúOK‚Äù button in the ‚ÄúAdd Reference‚Äù dialog, and you‚Äôre ready to use SharpZipLib.\n\nIn fact, you will now see it listed among the project‚Äôs references in the Projects window (on the right in the screenshot below):\n\nGreat, now how do we use it?\n\nThis is where our old friend, Intellisense, comes in. You might recall how we used it to discover things you can do with strings in one of my earliest articles, ‚ÄúC# Basics: Working with Strings‚Äú. This applies equally well here: as you begin to type your statement to import the functionality you need from the library, Intellisense suggests the namespace for you:\n\nNow SharpZipLib has a lot of functionality that allows us to work with .zip files, .tar.gz files and more. In our case we just want to experiment with .zip files, so we‚Äôre fine with the following:\n\nThat thing is called a namespace: it contains a set of classes. If you type it into your method and type in a dot (.) after it, you‚Äôll get a list of classes in it:\n\nA namespace is used to categorise a set of related classes so that they can‚Äôt be confused with other classes with the same name. Java‚Äôs Vector class (a kind of resizable array) is a typical example. If you create your own Vector class to represent a mathematical vector, then you might run into a naming conflict. However, since the Java Vector is actually in the java.util namespace, then its full name is actually java.util.Vector.\n\nThis works the same way in C#. The List class you‚Äôve been using all along is called is actually called . We usually don‚Äôt want to have to write all that, which is why we put in a statement at the top with the namespace.\n\nWhen we‚Äôre working with a new namespace, however, typing the full name and using Intellisense allows us to discover what that namespace contains, without the need to look at documentation. In the screenshot above, we can already guess that ZipFile is probably the class we need to work with .zip files.\n\nIntellisense also helps us when working with methods, constructors and properties:\n\nI suppose you get the idea by now. Let‚Äôs finally actually get something working. To try this out, I‚Äôm going to create a zip file with the following structure:\n\nI‚Äôve used WinRAR to create the zip file, but you can use anything you like. I named it ‚Äúzipfile.zip‚Äù and put it in C:\\ (you might need administrator privileges to put it there‚Ä¶ otherwise put it wherever you like). Now, we can easily obtain a list of files and folders in the .zip file with the following code:\n\nThis gives us:\n\nWe use the keyword to close the .zip file once we‚Äôre done ‚Äì something we‚Äôve been doing since my article ‚ÄúC#: Working with Streams‚Äú. You realise you need this whenever you see either a or a method in Intellisense. We are also using looping over the zipFile itself ‚Äì you realise you can do a when you see a method in Intellisense. Each iteration over the zipFile gives us a ZipEntry instance, which contains information about each item in the .zip file. As you can see in the output above, entries comprise not just files, but also folders.\n\nSince we want to extract files, folders are of no interest for us. We can use the IsFile property to deal only with files:\n\nIn order to extract the files, I‚Äôm going to change the code as follows:\n\nNote that I also added the following to work with and :\n\nExtracting files involves a bit of work with streams. The zipFile‚Äôs method gives you a stream for a particular entry (file in the .zip file), which you can then read with a StreamReader as if you‚Äôre reading a normal file.\n\nI added a bit of code to handle cases when files are in folders in the .zip file ‚Äì I am finding them by looking for the ‚Äú/‚Äù directory separator in the entry name, and then extracting only the filename using . [In practice you might have files with the same name in different folders, so you‚Äôd need to actually recreate the folders and put the files in the right folders, but I‚Äôm trying to keep things simple here.]\n\nFinally, we read the contents of the entry using , and write it to an appropriately named text file. If you run this program and go to your project‚Äôs bin\\Debug folder in Windows Explorer, you should see the test1.txt, test2.txt and test3.txt files with their proper contents. [Again, the proper way to deal with streams is to read chunks into a buffer and then write the file from it, but I‚Äôm using reader.ReadToEnd() for the sake of simplicity.]\n\nExcellent! In this article, we have learned to list and extract files from a .zip file. We also learned why namespaces are important. But most importantly, we have looked at how to reference third party .dlls and discover how to use them based only on hints from Intellisense and our own experience. In fact, the above code was written without consulting any documentation whatsoever, solely by observing the intellisense for SharpZipLib. While it is usually easier to just find an example on the internet (possibly in some documentation), you‚Äôll find that this is a great skill to have when documentation is not readily available."
    }
]