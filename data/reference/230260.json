[
    {
        "link": "https://docs.python.org/3/library/tkinter.html",
        "document": "The package (“Tk interface”) is the standard Python interface to the Tcl/Tk GUI toolkit. Both Tk and are available on most Unix platforms, including macOS, as well as on Windows systems.\n\nRunning from the command line should open a window demonstrating a simple Tk interface, letting you know that is properly installed on your system, and also showing what version of Tcl/Tk is installed, so you can read the Tcl/Tk documentation specific to that version.\n\nTkinter supports a range of Tcl/Tk versions, built either with or without thread support. The official Python binary release bundles Tcl/Tk 8.6 threaded. See the source code for the module for more information about supported versions.\n\nTkinter is not a thin wrapper, but adds a fair amount of its own logic to make the experience more pythonic. This documentation will concentrate on these additions and changes, and refer to the official Tcl/Tk documentation for details that are unchanged.\n\nTcl/Tk is not a single library but rather consists of a few distinct modules, each with separate functionality and its own official documentation. Python’s binary releases also ship an add-on module together with it. Tcl is a dynamic interpreted programming language, just like Python. Though it can be used on its own as a general-purpose programming language, it is most commonly embedded into C applications as a scripting engine or an interface to the Tk toolkit. The Tcl library has a C interface to create and manage one or more instances of a Tcl interpreter, run Tcl commands and scripts in those instances, and add custom commands implemented in either Tcl or C. Each interpreter has an event queue, and there are facilities to send events to it and process them. Unlike Python, Tcl’s execution model is designed around cooperative multitasking, and Tkinter bridges this difference (see Threading model for details). Tk is a Tcl package implemented in C that adds custom commands to create and manipulate GUI widgets. Each object embeds its own Tcl interpreter instance with Tk loaded into it. Tk’s widgets are very customizable, though at the cost of a dated appearance. Tk uses Tcl’s event queue to generate and process GUI events. Themed Tk (Ttk) is a newer family of Tk widgets that provide a much better appearance on different platforms than many of the classic Tk widgets. Ttk is distributed as part of Tk, starting with Tk version 8.5. Python bindings are provided in a separate module, . Internally, Tk and Ttk use facilities of the underlying operating system, i.e., Xlib on Unix/X11, Cocoa on macOS, GDI on Windows. When your Python application uses a class in Tkinter, e.g., to create a widget, the module first assembles a Tcl/Tk command string. It passes that Tcl command string to an internal binary module, which then calls the Tcl interpreter to evaluate it. The Tcl interpreter will then call into the Tk and/or Ttk packages, which will in turn make calls to Xlib, Cocoa, or GDI.\n\nSupport for Tkinter is spread across several modules. Most applications will need the main module, as well as the module, which provides the modern themed widget set and API: Construct a toplevel Tk widget, which is usually the main window of an application, and initialize a Tcl interpreter for this widget. Each instance has its own associated Tcl interpreter. The class is typically instantiated using all default values. However, the following keyword arguments are currently recognized: When given (as a string), sets the environment variable. (X11 only) Name of the profile file. By default, baseName is derived from the program name ( ). Name of the widget class. Used as a profile file and also as the name with which Tcl is invoked (argv0 in interp). If , initialize the Tk subsystem. The function sets this to . If , execute all X server commands synchronously, so that errors are reported immediately. Can be used for debugging. (X11 only) Specifies the id of the window in which to embed the application, instead of it being created as an independent toplevel window. id must be specified in the same way as the value for the -use option for toplevel widgets (that is, it has a form like that returned by ). Note that on some platforms this will only work correctly if id refers to a Tk frame or toplevel that has its -container option enabled. reads and interprets profile files, named and , into the Tcl interpreter and calls on the contents of and . The path for the profile files is the environment variable or, if that isn’t defined, then . The Tk application object created by instantiating . This provides access to the Tcl interpreter. Each widget that is attached the same instance of has the same value for its attribute. The widget object that contains this widget. For , the master is because it is the main window. The terms master and parent are similar and sometimes used interchangeably as argument names; however, calling returns a string of the widget name whereas returns the object. parent/child reflects the tree-like relationship while master/slave reflects the container structure. The immediate descendants of this widget as a with the child widget names as the keys and the child instance objects as the values. The function is a factory function which creates an object much like that created by the class, except that it does not initialize the Tk subsystem. This is most often useful when driving the Tcl interpreter in an environment where one doesn’t want to create extraneous toplevel windows, or where one cannot (such as Unix/Linux systems without an X server). An object created by the object can have a Toplevel window created (and the Tk subsystem initialized) by calling its method. Dialog to let the user choose a color. Base class for the dialogs defined in the other modules listed here. Common dialogs to allow the user to specify a file to open or save. Utilities to help work with fonts. Themed widget set introduced in Tk 8.5, providing modern alternatives for many of the classic widgets in the main module. A binary module that contains the low-level interface to Tcl/Tk. It is automatically imported by the main module, and should never be used directly by application programmers. It is usually a shared library (or DLL), but might in some cases be statically linked with the Python interpreter. Symbolic constants that can be used in place of strings when passing various parameters to Tkinter calls. Automatically imported by the main module. (experimental) Drag-and-drop support for . This will become deprecated when it is replaced with the Tk DND.\n\nThis section is not designed to be an exhaustive tutorial on either Tk or Tkinter. For that, refer to one of the external resources noted earlier. Instead, this section provides a very quick orientation to what a Tkinter application looks like, identifies foundational Tk concepts, and explains how the Tkinter wrapper is structured. The remainder of this section will help you to identify the classes, methods, and options you’ll need in your Tkinter application, and where to find more detailed documentation on them, including in the official Tcl/Tk reference manual. We’ll start by walking through a “Hello World” application in Tkinter. This isn’t the smallest one we could write, but has enough to illustrate some key concepts you’ll need to know. After the imports, the next line creates an instance of the class, which initializes Tk and creates its associated Tcl interpreter. It also creates a toplevel window, known as the root window, which serves as the main window of the application. The following line creates a frame widget, which in this case will contain a label and a button we’ll create next. The frame is fit inside the root window. The next line creates a label widget holding a static text string. The method is used to specify the relative layout (position) of the label within its containing frame widget, similar to how tables in HTML work. A button widget is then created, and placed to the right of the label. When pressed, it will call the method of the root window. Finally, the method puts everything on the display, and responds to user input until the program terminates. Even this simple program illustrates the following key Tk concepts: A Tkinter user interface is made up of individual widgets. Each widget is represented as a Python object, instantiated from classes like , , and . Widgets are arranged in a hierarchy. The label and button were contained within a frame, which in turn was contained within the root window. When creating each child widget, its parent widget is passed as the first argument to the widget constructor. Widgets have configuration options, which modify their appearance and behavior, such as the text to display in a label or button. Different classes of widgets will have different sets of options. Widgets aren’t automatically added to the user interface when they are created. A geometry manager like controls where in the user interface they are placed. Tkinter reacts to user input, changes from your program, and even refreshes the display only when actively running an event loop. If your program isn’t running the event loop, your user interface won’t update. When your application uses Tkinter’s classes and methods, internally Tkinter is assembling strings representing Tcl/Tk commands, and executing those commands in the Tcl interpreter attached to your application’s instance. Whether it’s trying to navigate reference documentation, trying to find the right method or option, adapting some existing code, or debugging your Tkinter application, there are times that it will be useful to understand what those underlying Tcl/Tk commands look like. To illustrate, here is the Tcl/Tk equivalent of the main part of the Tkinter script above. Tcl’s syntax is similar to many shell languages, where the first word is the command to be executed, with arguments to that command following it, separated by spaces. Without getting into too many details, notice the following:\n• None The commands used to create widgets (like ) correspond to widget classes in Tkinter.\n• None Tcl widget options (like ) correspond to keyword arguments in Tkinter.\n• None Widgets are referred to by a pathname in Tcl (like ), whereas Tkinter doesn’t use names but object references.\n• None A widget’s place in the widget hierarchy is encoded in its (hierarchical) pathname, which uses a (dot) as a path separator. The pathname for the root window is just (dot). In Tkinter, the hierarchy is defined not by pathname but by specifying the parent widget when creating each child widget.\n• None Operations which are implemented as separate commands in Tcl (like or ) are represented as methods on Tkinter widget objects. As you’ll see shortly, at other times Tcl uses what appear to be method calls on widget objects, which more closely mirror what would is used in Tkinter. How do I…? What option does…?¶ If you’re not sure how to do something in Tkinter, and you can’t immediately find it in the tutorial or reference documentation you’re using, there are a few strategies that can be helpful. First, remember that the details of how individual widgets work may vary across different versions of both Tkinter and Tcl/Tk. If you’re searching documentation, make sure it corresponds to the Python and Tcl/Tk versions installed on your system. When searching for how to use an API, it helps to know the exact name of the class, option, or method that you’re using. Introspection, either in an interactive Python shell or with , can help you identify what you need. To find out what configuration options are available on any widget, call its method, which returns a dictionary containing a variety of information about each object, including its default and current values. Use to get just the names of each option. As most widgets have many configuration options in common, it can be useful to find out which are specific to a particular widget class. Comparing the list of options to that of a simpler widget, like a frame, is one way to do that. Similarly, you can find the available methods for a widget object using the standard function. If you try it, you’ll see there are over 200 common widget methods, so again identifying those specific to a widget class is helpful. As noted, the official Tk commands reference manual (man pages) is often the most accurate description of what specific operations on widgets do. Even when you know the name of the option or method that you need, you may still have a few places to look. While all operations in Tkinter are implemented as method calls on widget objects, you’ve seen that many Tcl/Tk operations appear as commands that take a widget pathname as its first parameter, followed by optional parameters, e.g. Others, however, look more like methods called on a widget object (in fact, when you create a widget in Tcl/Tk, it creates a Tcl command with the name of the widget pathname, with the first parameter to that command being the name of a method to call). In the official Tcl/Tk reference documentation, you’ll find most operations that look like method calls on the man page for a specific widget (e.g., you’ll find the method on the ttk::button man page), while functions that take a widget as a parameter often have their own man page (e.g., grid). You’ll find many common options and methods in the options or ttk::widget man pages, while others are found in the man page for a specific widget class. You’ll also find that many Tkinter methods have compound names, e.g., , , . You’d find documentation for all of these in the winfo man page. Somewhat confusingly, there are also methods on all Tkinter widgets that don’t actually operate on the widget, but operate at a global scope, independent of any widget. Examples are methods for accessing the clipboard or the system bell. (They happen to be implemented as methods in the base class that all Tkinter widgets inherit from).\n\nPython and Tcl/Tk have very different threading models, which tries to bridge. If you use threads, you may need to be aware of this. A Python interpreter may have many threads associated with it. In Tcl, multiple threads can be created, but each thread has a separate Tcl interpreter instance associated with it. Threads can also create more than one interpreter instance, though each interpreter instance can be used only by the one thread that created it. Each object created by contains a Tcl interpreter. It also keeps track of which thread created that interpreter. Calls to can be made from any Python thread. Internally, if a call comes from a thread other than the one that created the object, an event is posted to the interpreter’s event queue, and when executed, the result is returned to the calling Python thread. Tcl/Tk applications are normally event-driven, meaning that after initialization, the interpreter runs an event loop (i.e. ) and responds to events. Because it is single-threaded, event handlers must respond quickly, otherwise they will block other events from being processed. To avoid this, any long-running computations should not run in an event handler, but are either broken into smaller pieces using timers, or run in another thread. This is different from many GUI toolkits where the GUI runs in a completely separate thread from all application code including event handlers. If the Tcl interpreter is not running the event loop and processing events, any calls made from threads other than the one running the Tcl interpreter will fail.\n• None Tcl/Tk libraries can be built so they are not thread-aware. In this case, calls the library from the originating Python thread, even if this is different than the thread that created the Tcl interpreter. A global lock ensures only one call occurs at a time.\n• None While allows you to create more than one instance of a object (with its own interpreter), all interpreters that are part of the same thread share a common event queue, which gets ugly fast. In practice, don’t create more than one instance of at a time. Otherwise, it’s best to create them in separate threads and ensure you’re running a thread-aware Tcl/Tk build.\n• None Blocking event handlers are not the only way to prevent the Tcl interpreter from reentering the event loop. It is even possible to run multiple nested event loops or abandon the event loop entirely. If you’re doing anything tricky when it comes to events or threads, be aware of these possibilities.\n• None There are a few select functions that presently work only when called from the thread that created the Tcl interpreter.\n\nOptions control things like the color and border width of a widget. Options can be set in three ways: After object creation, treating the option name like a dictionary index Use the config() method to update multiple attrs subsequent to object creation For a complete explanation of a given option and its behavior, see the Tk man pages for the widget in question. Note that the man pages list “STANDARD OPTIONS” and “WIDGET SPECIFIC OPTIONS” for each widget. The former is a list of options that are common to many widgets, the latter are the options that are idiosyncratic to that particular widget. The Standard Options are documented on the options(3) man page. No distinction between standard and widget-specific options is made in this document. Some options don’t apply to some kinds of widgets. Whether a given widget responds to a particular option depends on the class of the widget; buttons have a option, labels do not. The options supported by a given widget are listed in that widget’s man page, or can be queried at runtime by calling the method without arguments, or by calling the method on that widget. The return value of these calls is a dictionary whose key is the name of the option as a string (for example, ) and whose values are 5-tuples. Some options, like are synonyms for common options with long names ( is shorthand for “background”). Passing the method the name of a shorthand option will return a 2-tuple, not 5-tuple. The 2-tuple passed back will contain the name of the synonym and the “real” option (such as ). Of course, the dictionary printed will include all the options available and their values. This is meant only as an example. The packer is one of Tk’s geometry-management mechanisms. Geometry managers are used to specify the relative positioning of widgets within their container - their mutual master. In contrast to the more cumbersome placer (which is used less commonly, and we do not cover here), the packer takes qualitative relationship specification - above, to the left of, filling, etc - and works everything out to determine the exact placement coordinates for you. The size of any master widget is determined by the size of the “slave widgets” inside. The packer is used to control where slave widgets appear inside the master into which they are packed. You can pack widgets into frames, and frames into other frames, in order to achieve the kind of layout you desire. Additionally, the arrangement is dynamically adjusted to accommodate incremental changes to the configuration, once it is packed. Note that widgets do not appear until they have had their geometry specified with a geometry manager. It’s a common early mistake to leave out the geometry specification, and then be surprised when the widget is created but nothing appears. A widget will appear only after it has had, for example, the packer’s method applied to it. The pack() method can be called with keyword-option/value pairs that control where the widget is to appear within its container, and how it is to behave when the main application window is resized. Here are some examples: For more extensive information on the packer and the options that it can take, see the man pages and page 183 of John Ousterhout’s book. Anchor type. Denotes where the packer is to place each slave in its parcel. A distance - designating internal padding on each side of the slave widget. A distance - designating external padding on each side of the slave widget. The current-value setting of some widgets (like text entry widgets) can be connected directly to application variables by using special options. These options are , , , , and . This connection works both ways: if the variable changes for any reason, the widget it’s connected to will be updated to reflect the new value. Unfortunately, in the current implementation of it is not possible to hand over an arbitrary Python variable to a widget through a or option. The only kinds of variables for which this works are variables that are subclassed from a class called Variable, defined in . There are many useful subclasses of Variable already defined: , , , and . To read the current value of such a variable, call the method on it, and to change its value you call the method. If you follow this protocol, the widget will always track the value of the variable, with no further intervention on your part. # Tell the entry widget to watch this variable. # Define a callback for when the user hits return. # It prints the current value of the variable. \"Hi. The current entry content is:\" In Tk, there is a utility command, , for interacting with the window manager. Options to the command allow you to control things like titles, placement, icon bitmaps, and the like. In , these commands have been implemented as methods on the class. Toplevel widgets are subclassed from the class, and so can call the methods directly. To get at the toplevel window that contains a given widget, you can often just refer to the widget’s master. Of course if the widget has been packed inside of a frame, the master won’t represent a toplevel window. To get at the toplevel window that contains an arbitrary widget, you can call the method. This method begins with an underscore to denote the fact that this function is part of the implementation, and not an interface to Tk functionality. Here are some examples of typical usage: # here are method calls to the window manager class Legal values are points of the compass: , , , , , , , , and also . There are eight built-in, named bitmaps: , , , , , , , . To specify an X bitmap filename, give the full path to the file, preceded with an , as in . You can pass integers 0 or 1 or the strings or . This is any Python function that takes no arguments. For example: Colors can be given as the names of X colors in the rgb.txt file, or as strings representing RGB values in 4 bit: , 8 bit: , 12 bit: , or 16 bit: ranges, where R,G,B here represent any legal hex digit. See page 160 of Ousterhout’s book for details. The standard X cursor names from can be used, without the prefix. For example to get a hand cursor ( ), use the string . You can also specify a bitmap and mask file of your own. See page 179 of Ousterhout’s book. Screen distances can be specified in either pixels or absolute distances. Pixels are given as numbers and absolute distances as strings, with the trailing character denoting units: for centimetres, for inches, for millimetres, for printer’s points. For example, 3.5 inches is expressed as . Tk uses a list font name format, such as . Font sizes with positive numbers are measured in points; sizes with negative numbers are measured in pixels. This is a string of the form , where width and height are measured in pixels for most widgets (in characters for widgets displaying text). For example: . Legal values are the strings: , , , and . This is a string with four space-delimited elements, each of which is a legal distance (see above). For example: and and are all legal regions. Determines what the border style of a widget will be. Legal values are: , , , , and . This is almost always the method of some scrollbar widget, but can be any widget method that takes a single argument. Must be one of: , , or . The bind method from the widget command allows you to watch for certain events and to have a callback function trigger when that event type occurs. The form of the bind method is: is a string that denotes the target kind of event. (See the bind(3tk) man page, and page 201 of John Ousterhout’s book, , for details). is a Python function, taking one argument, to be invoked when the event occurs. An Event instance will be passed as the argument. (Functions deployed this way are commonly known as callbacks.) is optional, either or . Passing an empty string denotes that this binding is to replace any other bindings that this event is associated with. Passing a means that this function is to be added to the list of functions bound to this event type. Notice how the widget field of the event is being accessed in the callback. This field contains the widget that caught the X event. The following table lists the other event fields you can access, and how they are denoted in Tk, which can be useful when referring to the Tk man pages. A number of widgets require “index” parameters to be passed. These are used to point at a specific place in a Text widget, or to particular characters in an Entry widget, or to particular menu items in a Menu widget. Entry widgets have options that refer to character positions in the text being displayed. You can use these functions to access these special points in text widgets: The index notation for Text widgets is very rich and is best described in the Tk man pages. Some options and methods for menus manipulate specific menu entries. Anytime a menu index is needed for an option or a parameter, you may pass in:\n• None an integer which refers to the numeric position of the entry in the widget, counted from the top, starting with 0;\n• None the string , which refers to the menu position that is currently under the cursor;\n• None the string which refers to the last menu item;\n• None An integer preceded by , as in , where the integer is interpreted as a y pixel coordinate in the menu’s coordinate system;\n• None the string , which indicates no menu entry at all, most often used with menu.activate() to deactivate all entries, and finally,\n• None a text string that is pattern matched against the label of the menu entry, as scanned from the top of the menu to the bottom. Note that this index type is considered after all the others, which means that matches for menu items labelled , , or may be interpreted as the above literals, instead. Images of different formats can be created through the corresponding subclass of :\n• None for images in PGM, PPM, GIF and PNG formats. The latter is supported starting with Tk 8.6. Either type of image is created through either the or the option (other options are available as well). Changed in version 3.13: Added the method to copy a region from one image to other image, possibly with pixel zooming and/or subsampling. Add from_coords parameter to methods , and . Add zoom and subsample parameters to method . The image object can then be used wherever an option is supported by some widget (e.g. labels, buttons, menus). In these cases, Tk will not keep a reference to the image. When the last Python reference to the image object is deleted, the image data is deleted as well, and Tk will display an empty box wherever the image was used. The Pillow package adds support for formats such as BMP, JPEG, TIFF, and WebP, among others."
    },
    {
        "link": "https://docs.python.org/3/library/tk.html",
        "document": "Tk/Tcl has long been an integral part of Python. It provides a robust and platform independent windowing toolkit, that is available to Python programmers using the package, and its extension, the module.\n\nThe package is a thin object-oriented layer on top of Tcl/Tk. To use , you don’t need to write Tcl code, but you will need to consult the Tk documentation, and occasionally the Tcl documentation. is a set of wrappers that implement the Tk widgets as Python classes.\n\n’s chief virtues are that it is fast, and that it usually comes bundled with Python. Although its standard documentation is weak, good material is available, which includes: references, tutorials, a book and others. is also famous for having an outdated look and feel, which has been vastly improved in Tk 8.5. Nevertheless, there are many other GUI libraries that you could be interested in. The Python wiki lists several alternative GUI frameworks and tools."
    },
    {
        "link": "https://geeksforgeeks.org/python-gui-tkinter",
        "document": "Python Tkinter is a standard GUI (Graphical User Interface) library for Python which provides a fast and easy way to create desktop applications. Tkinter provides a variety of widgets like buttons, labels, text boxes, menus and more that can be used to create interactive user interfaces. Tkinter supports event-driven programming, where actions are taken in response to user events like clicks or keypresses.\n• Import the tkinter module : Import the tkinter module, which is necessary for creating the GUI components.\n• Create the main window (container) : Initialize the main application window using the Tk() class.\n• Set Window Properties : We can set properties like the title and size of the window.\n• Add widgets to the main window : We can add any number of widgets like buttons, labels, entry fields, etc., to the main window to design the interface.\n• Pack Widgets: Use geometry managers like pack(), grid() or place() to arrange the widgets within the window.\n• Apply event triggers to the widgets : We can attach event triggers to the widgets to define how they respond to user interactions.\n\nThere are two main methods used which the user needs to remember while creating the Python application with GUI.\n\nTo create a main window in Tkinter, we use the Tk() class. The syntax for creating a main window is as follows:\n• screenName: This parameter is used to specify the display name.\n• baseName: This parameter can be used to set the base name of the application.\n• className: We can change the name of the window by setting this parameter to the desired name.\n• useTk: This parameter indicates whether to use Tk or not.\n\nThe mainloop() method is used to run application once it is ready. It is an infinite loop that keeps the application running, waits for events to occur (such as button clicks) and processes these events as long as the window is not closed.\n\nThere are a number of tkinter widgets which we can put in our tkinter application. Some of the major widgets are explained below:\n\nIt refers to the display box where we display text or image. It can have various options like font, background, foreground, etc. The general syntax is:\n• master is the parameter used to represent the parent window.\n\nNote: We have a number of options and parameters that we can pass to widgets, only some them are used in the examples given in this article.\n\nA clickable button that can trigger an action. The general syntax is:\n\nIt is used to input the single line text entry from the user. For multi-line text input, Text widget is used. The general syntax is:\n\nA checkbox can be toggled on or off. It can be linked to a variable to store its state. The general syntax is:\n\nIt allows the user to select one option from a set of choices. They are grouped by sharing the same variable. The general syntax is:\n\nIt displays a list of items from which a user can select one or more. The general syntax is:\n\nIt refers to the slide controller which will be used to implement listed widgets. The general syntax is:\n\nIt is used to create all kinds of menus used by the application. The general syntax is:\n\nCombobox widget is created using the ttk.Combobox class from the tkinter.ttk module. The values for the Combobox are specified using the values parameter. The default value is set using the set method. An event handler function on_select is bound to the Combobox using the bind method, which updates a label with the selected item whenever an item is selected.\n\nIt is used to provide a graphical slider that allows to select any value from that scale. The general syntax is:\n\nThis widget is directly controlled by the window manager. It don’t need any parent window to work on.The general syntax is:\n\nIt is a widget to display text messages with word wrapping. The general syntax is:\n\nIt is a part of top-down menu which stays on the window all the time. Every menubutton has its own functionality. The general syntax is:\n\nprogressbar indicates the progress of a long-running task. When the button is clicked, the progressbar fills up to 100% over a short period, simulating a task that takes time to complete.\n\nIt is an entry of ‘Entry’ widget. Here, value can be input by selecting a fixed value of numbers. The general syntax is:\n\nTo edit a multi-line text and format the way it has to be displayed. The general syntax is:\n\nIt is used to draw pictures and other complex layout like graphics, text and widgets. The general syntax is:\n\nIt is a container widget which is used to handle number of panes arranged in it. The general syntax is:\n\nThis example demonstrates the usage of various color options in Tkinter widgets, including active background and foreground colors, background and foreground colors, disabled state colors, and selection colors. Each widget in the example showcases a different color option, providing a visual representation of how these options affect the appearance of the widgets.\n\nTkinter also offers access to the geometric configuration of the widgets which can organize the widgets in the parent windows. There are mainly three geometry manager classes class.\n\nIt organizes the widgets in blocks before placing in the parent widget. Widgets can be packed from the top, bottom, left or right. It can expand widgets to fill the available space or place them in a fixed size.\n\nIt organizes the widgets in grid (table-like structure) before placing in the parent widget. Each widget is assigned a row and column. Widgets can span multiple rows or columns using rowspan and columnspan.\n\nIt organizes the widgets by placing them on specific positions directed by the programmer. Widgets are placed at specific x and y coordinates. Sizes and positions can be specified in absolute or relative terms.\n\nIn Tkinter, events are actions that occur when a user interacts with the GUI, such as pressing a key, clicking a mouse button or resizing a window. Event handling allows us to define how our application should respond to these interactions.\n\nEvents in Tkinter are captured and managed using a mechanism called bindings. A binding links an event to a callback function (also known as an event handler) that is called when the event occurs.\n• widget: The Tkinter widget you want to bind the event to.\n• event: A string that specifies the type of event (e.g., <Button-1> for a left mouse click).\n• handler: The callback function that will be executed when the event occurs.\n\nKey events are triggered when a user presses a key on the keyboard. Mouse events are triggered by mouse actions, such as clicking or moving the mouse.\n\nIn this advanced example, multiple event types are handled simultaneously. The on_mouse_motion function is called whenever the mouse is moved within the window, demonstrating how we can track and respond to continuous events.\n\nThe event object is passed to the callback function when an event occurs. It contains useful information about the event, such as:\n• event.x and event.y: The x and y coordinates of the mouse event.\n• event.widget: The widget that triggered the event.\n\nWhat is Tkinter in Python used for?\n\nWhat does TK() mean in Python?\n\nIs Tkinter the only GUI for Python?\n\nWhat is a Tkinter window in Python?\n\nWhich GUI is best for Python?"
    },
    {
        "link": "https://realpython.com/python-gui-tkinter",
        "document": "Tkinter is Python’s standard GUI framework, making it convenient for developing graphical user interfaces. As a cross-platform library, Tkinter ensures your applications appear native across Windows, macOS, and Linux. Despite criticisms of its outdated appearance, Tkinter remains a practical choice for quickly creating functional and cross-platform GUI applications.\n\nBy the end of this tutorial, you’ll understand that:\n• GUI refers to graphical user interfaces, and Tkinter is Python’s built-in library for creating them.\n• Tkinter is included with most Python installations, so separate installation is often unnecessary.\n• Tkinter is still a relevant choice for building simple, cross-platform GUI applications.\n• Widgets in a Tkinter application can be arranged using geometry managers like , , and .\n• Interactive GUI applications with Tkinter are created by binding events, such as button clicks, to Python functions.\n\nYou’ll cover getting started with Tkinter, managing widgets, and creating interactive applications. Once you’ve mastered these skills by working through the exercises at the end of each section, you’ll tie everything together by building two applications. The first is a temperature converter, and the second is a text editor. It’s time to dive right in and learn how to build an application with Tkinter!\n\nBuilding Your First Python GUI Application With Tkinter The foundational element of a Tkinter GUI is the window. Windows are the containers in which all other GUI elements live. These other GUI elements, such as text boxes, labels, and buttons, are known as widgets. Widgets are contained inside of windows. First, create a window that contains a single widget. Start up a new Python shell session and follow along! Note: The code examples in this tutorial have all been tested on Windows, macOS, and Ubuntu Linux 20.04 with Python version 3.10. If you’ve installed Python with the official installers available for Windows and macOS from python.org, then you should have no problem running the sample code. You can safely skip the rest of this note and continue with the tutorial! If you haven’t installed Python with the official installers, or there’s no official distribution for your system, then here are some tips for getting up and going. The Python distribution for macOS available on Homebrew doesn’t come bundled with the Tcl/Tk dependency required by Tkinter. The default system version is used instead. This version may be outdated and prevent you from importing the Tkinter module. To avoid this problem, use the official macOS installer. To conserve memory space, the default version of the Python interpreter that comes pre-installed on Ubuntu Linux 20.04 has no support for Tkinter. However, if you want to continue using the Python interpreter bundled with your operating system, then install the following package: If you’re unable to get a working Python installation on your flavor of Linux, then you can build Python with the correct version of Tcl/Tk from the source code. For a step-by-step walk-through of this process, check out the Python 3 Installation & Setup Guide. You may also try using pyenv to manage multiple Python versions. With your Python shell open, the first thing you need to do is import the Python GUI Tkinter module: A window is an instance of Tkinter’s class. Go ahead and create a new window and assign it to the variable : When you execute the above code, a new window pops up on your screen. How it looks depends on your operating system: Throughout the rest of this tutorial, you’ll see Windows screenshots. Now that you have a window, you can add a widget. Use the class to add some text to a window. Create a widget with the text and assign it to a variable called : The window you created earlier doesn’t change. You just created a widget, but you haven’t added it to the window yet. There are several ways to add widgets to a window. Right now, you can use the widget’s method: The window now looks like this: When you pack a widget into a window, Tkinter sizes the window as small as it can be while still fully encompassing the widget. Now execute the following: Nothing seems to happen, but notice that no new prompt appears in the shell. tells Python to run the Tkinter event loop. This method listens for events, such as button clicks or keypresses, and blocks any code that comes after it from running until you close the window where you called the method. Go ahead and close the window you’ve created, and you’ll see a new prompt displayed in the shell. Warning: When you work with Tkinter from a Python REPL, updates to windows are applied as each line is executed. This is not the case when a Tkinter program is executed from a Python file! If you don’t include at the end of a program in a Python file, then the Tkinter application will never run, and nothing will be displayed. Alternatively, you can build your user interface incrementally in Python REPL by calling after each step to reflect the change. Creating a window with Tkinter only takes a couple of lines of code. But blank windows aren’t very useful! In the next section, you’ll learn about some of the widgets available in Tkinter, and how you can customize them to meet your application’s needs. Expand the code blocks below to check your understanding: Write a full Python script that creates a Tkinter window with the text . The window should look like this: You can expand the code block below to see a solution: Keep in mind your code may look different. When you’re ready, you can move on to the next section.\n\nWidgets are the bread and butter of the Python GUI framework Tkinter. They’re the elements through which users interact with your program. Each widget in Tkinter is defined by a class. Here are some of the widgets available: A widget used to display text on the screen A button that can contain text and can perform an action when clicked A text entry widget that allows only a single line of text A rectangular region used to group related widgets or provide padding between widgets You’ll see how to work with each of these in the following sections, but keep in mind that Tkinter has many more widgets than those listed here. The widget’s choice gets even more complicated when you account for a whole new set of themed widgets. In the remaining part of this tutorial, you’re only going to use Tkinter’s classic widgets, though. If you’d like to learn more about the two widget types, then you can expand the collapsible section below: It’s worth noting that there are currently two broad categories of widgets in Tkinter:\n• Classic widgets: Available in the package, for example\n• Themed widgets: Available in the submodule, for example Tkinter’s classic widgets are highly customizable and straightforward, but they tend to appear dated or somewhat foreign on most platforms today. If you’d like to take advantage of widgets with a native look and feel familiar to users of a given operating system, then you might want to check out the themed widgets. Most of the themed widgets are near drop-in replacements for their legacy counterparts, but with a more modern look. You can also use a few brand-new widgets, such as the progress bar, which weren’t available in Tkinter before. At the same time, you’ll need to continue using some of the classic widgets that don’t have a themed alternative. Note: Themed widgets in the module use the operating system’s native look and feel by default. However, you can change their theme for a customized visual appearance, such as light and dark modes. A theme is a collection of reusable style definitions, which you can think of as a Cascading Style Sheet (CSS) for Tkinter. Making the new widgets themable meant extracting most of their style information into separate objects. On the one hand, such a separation of concerns is a desired property in the library’s design, but on the other hand, it introduces an additional abstraction layer, which makes themed widgets more difficult to style than the classic ones. When working with regular and themed widgets in Tkinter, it’s customary to declare the following aliases for the Tkinter packages and modules: Aliases like this let you explicitly refer to either or , for example, in one program depending on your needs: However, you may sometimes find it more convenient to use a wildcard import ( ) to automatically override all legacy widgets with the themed ones where possible, like so: Now, you don’t have to prefix the widget’s class name with its corresponding Python module. You’ll always create a themed widget as long as it’s available, or you’ll fall back to the classic widget otherwise. The two import statements above must be placed in the specified order to have an effect. Because of that, wildcard imports are considered a bad practice, which should generally be avoided unless used consciously. For a full list of Tkinter widgets, check out Basic Widgets and More Widgets in the TkDocs tutorial. Even though it describes themed widgets introduced in Tcl/Tk 8.5, most of the information there should also apply to the classic widgets. Fun Fact: Tkinter literally stands for “Tk interface” because it’s a Python binding or a programming interface to the Tk library in the Tcl scripting language. For now, take a closer look at the widget. widgets are used to display text or images. The text displayed by a widget can’t be edited by the user. It’s for display purposes only. As you saw in the example at the beginning of this tutorial, you can create a widget by instantiating the class and passing a string to the parameter: widgets display text with the default system text color and the default system text background color. These are typically black and white, respectively, but you may see different colors if you’ve changed these settings in your operating system. You can control text and background colors using the and parameters: Many of the HTML color names work with Tkinter. For a full reference, including macOS- and Windows-specific system colors that the current system theme controls, check out the colors manual page. You can also specify a color using hexadecimal RGB values: This sets the label background to a nice, light blue color. Hexadecimal RGB values are more cryptic than named colors, but they’re also more flexible. Fortunately, there are tools available that make getting hexadecimal color codes relatively painless. If you don’t feel like typing out and all the time, then you can use the shorthand and parameters to set the foreground and background colors: You can also control the width and height of a label with the and parameters: Here’s what this label looks like in a window: It may seem strange that the label in the window isn’t square even though the width and height are both set to . This is because the width and height are measured in text units. One horizontal text unit is determined by the width of the character , or the number zero, in the default system font. Similarly, one vertical text unit is determined by the height of the character . Note: For width and height measurements, Tkinter uses text units, instead of something like inches, centimeters, or pixels, to ensure consistent behavior of the application across platforms. Measuring units by the width of a character means that the size of a widget is relative to the default font on a user’s machine. This ensures the text fits properly in labels and buttons, no matter where the application is running. Labels are great for displaying some text, but they don’t help you get input from a user. The next three widgets that you’ll learn about are all used to get user input. widgets are used to display clickable buttons. You can configure them to call a function whenever they’re clicked. You’ll cover how to call functions from button clicks in the next section. For now, take a look at how to create and style a button. There are many similarities between and widgets. In many ways, a button is just a label that you can click! The same keyword arguments that you use to create and style a will work with widgets. For example, the following code creates a button with a blue background and yellow text. It also sets the width and height to and text units, respectively: Here’s what the button looks like in a window: Pretty nifty! You can use the next two widgets to collect text input from a user. When you need to get a little bit of text from a user, like a name or an email address, use an widget. It’ll display a small text box that the user can type some text into. Creating and styling an widget works pretty much exactly like with and widgets. For example, the following code creates a widget with a blue background, some yellow text, and a width of text units: The interesting bit about widgets isn’t how to style them, though. It’s how to use them to get input from a user. There are three main operations that you can perform with widgets: The best way to get an understanding of widgets is to create one and interact with it. Open up a Python shell and follow along with the examples in this section. First, import and create a new window: Now create a and an widget: The describes what sort of text should go in the widget. It doesn’t enforce any sort of requirements on the , but it tells the user what your program expects them to put there. You need to the widgets into the window so that they’re visible: Here’s what that looks like: Notice that Tkinter automatically centers the label above the widget in the window. This is a feature of , which you’ll learn more about in later sections. Click inside the widget with your mouse and type : Now you’ve got some text entered into the widget, but that text hasn’t been sent to your program yet. You can use to retrieve the text and assign it to a variable called : You can delete text as well. This method takes an integer argument that tells Python which character to remove. For example, the code block below shows how deletes the first character from : The text remaining in the widget is now : Note that, just like Python string objects, text in an widget is indexed starting with . If you need to remove several characters from an , then pass a second integer argument to indicating the index of the character where deletion should stop. For example, the following code deletes the first four letters in : works just like string slicing. The first argument determines the starting index, and the deletion continues up to but not including the index passed as the second argument. Use the special constant for the second argument of to remove all text in : On the opposite end of the spectrum, you can also insert text into an widget: The window now looks like this: The first argument tells where to insert the text. If there’s no text in , then the new text will always be inserted at the beginning of the widget, no matter what value you pass as the first argument. For example, calling with as the first argument instead of , as you did above, would’ve generated the same output. If already contains some text, then will insert the new text at the specified position and shift all existing text to the right: widgets are great for capturing small amounts of text from a user, but because they’re only displayed on a single line, they’re not ideal for gathering large amounts of text. That’s where widgets come in! widgets are used for entering text, just like widgets. The difference is that widgets may contain multiple lines of text. With a widget, a user can input a whole paragraph or even several pages of text! Just like with widgets, you can perform three main operations with widgets: Although the method names are the same as the methods, they work a bit differently. It’s time to get your hands dirty by creating a widget and seeing what it can do. Note: Do you still have the window from the previous section open? If so, then you can close it by executing the following: You can also close it manually by clicking the Close button. In your Python shell, create a new blank window and pack a widget into it: Text boxes are much larger than widgets by default. Here’s what the window created above looks like: Click anywhere inside the window to activate the text box. Type in the word . Then press and type on the second line. The window should now look like this: Just like with widgets, you can retrieve the text from a widget using . However, calling with no arguments doesn’t return the full text in the text box like it does for widgets. It raises an exception: requires at least one argument. Calling with a single index returns a single character. To retrieve several characters, you need to pass a start index and an end index. Indices in widgets work differently than in widgets. Since widgets can have several lines of text, an index must contain two pieces of information:\n• The position of a character on that line Line numbers start with , and character positions start with . To make an index, you create a string of the form , replacing with the line number and with the character number. For example, represents the first character on the first line, and represents the fourth character on the second line. Use the index to get the first letter from the text box that you created earlier: There are five letters in the word , and the character number of is , since character numbers start from , and the word starts at the first position in the text box. Just like with Python string slices, in order to get the entire word from the text box, the end index must be one more than the index of the last character to be read. So, to get the word from the text box, use for the first index and for the second index: To get the word on the second line of the text box, change the line numbers in each index to : To get all of the text in a text box, set the starting index in and use the special constant for the second index: Notice that text returned by includes any newline characters. You can also see from this example that every line in a widget has a newline character at the end, including the last line of text in the text box. is used to delete characters from a text box. It works just like for widgets. There are two ways to use : Using the single-argument version, you pass to the index of a single character to be deleted. For example, the following deletes the first character, , from the text box: The first line of text in the window now reads : With the two-argument version, you pass two indices to delete a range of characters starting at the first index and up to, but not including, the second index. For example, to delete the remaining on the first line of the text box, use the indices and : Notice that the text is gone from the first line. This leaves a blank line followed the word on the second line: Even though you can’t see it, there’s still a character on the first line. It’s a newline character! You can verify this using : If you delete that character, then the rest of the contents of the text box will shift up a line: Now, is on the first line of the text box: Try to clear out the rest of the text in the text box. Set as the start index and use for the second index: The text box is now empty: You can insert text into a text box using : This inserts the word at the beginning of the text box, using the same format used by to specify the insertion position: Check out what happens if you try to insert the word on the second line: Instead of inserting the text on the second line, the text is inserted at the end of the first line: If you want to insert text onto a new line, then you need to insert a newline character manually into the string being inserted: Now is on the second line of the text box: will do one of two things:\n• Insert text at the specified position if there’s already text at or after that position.\n• Append text to the specified line if the character number is greater than the index of the last character in the text box. It’s usually impractical to try and keep track of what the index of the last character is. The best way to insert text at the end of a widget is to pass to the first parameter of : Don’t forget to include the newline character ( ) at the beginning of the text if you want to put it on a new line: , , , and widgets are just a few of the widgets available in Tkinter. There are several others, including widgets for checkboxes, radio buttons, scroll bars, and progress bars. For more information on all of the available widgets, see the Additional Widgets list in the Additional Resources section. In this tutorial, you’re going to work with only five widgets: These are the four you’ve seen so far plus the widget. widgets are important for organizing the layout of your widgets in an application. Before you get into the details about laying out the visual presentation of your widgets, take a closer look at how widgets work, and how you can assign other widgets to them. The following script creates a blank widget and assigns it to the main application window: packs the frame into the window so that the window sizes itself as small as possible to encompass the frame. When you run the above script, you get some seriously uninteresting output: An empty widget is practically invisible. Frames are best thought of as containers for other widgets. You can assign a widget to a frame by setting the widget’s attribute: To get a feel for how this works, write a script that creates two widgets called and . In this script, contains a label with the text , and contains the label . Here’s one way to do this: Note that is packed into the window before . The window that opens shows the label in above the label in : Now see what happens when you swap the order of and : # Swap the order of `frame_a` and `frame_b` The output looks like this: Now is on top. Since is assigned to , it moves to wherever is positioned. All four of the widget types that you’ve learned about— , , , and —have a attribute that’s set when you instantiate them. That way, you can control which a widget is assigned to. widgets are great for organizing other widgets in a logical manner. Related widgets can be assigned to the same frame so that, if the frame is ever moved in the window, then the related widgets stay together. Note: If you omit the argument when creating a new widget instance, then it’ll be placed inside of the top-level window by default. In addition to grouping your widgets logically, widgets can add a little flare to the visual presentation of your application. Read on to see how to create various borders for widgets. widgets can be configured with a attribute that creates a border around the frame. You can set to be any of the following values:\n• : Has no border effect (the default value) To apply the border effect, you must set the attribute to a value greater than . This attribute adjusts the width of the border in pixels. The best way to get a feel for what each effect looks like is to see them for yourself. Here’s a script that packs five widgets into a window, each with a different value for the argument:\n• Lines 3 to 9 create a dictionary whose keys are the names of the different relief effects available in Tkinter. The values are the corresponding Tkinter objects. This dictionary is assigned to the variable.\n• Line 13 starts a loop to loop over each item in the dictionary.\n• Line 14 creates a new widget and assigns it to the object. The attribute is set to the corresponding relief in the dictionary, and the attribute is set to so that the effect is visible.\n• Line 15 packs the into the window using . The keyword argument tells Tkinter in which direction to pack the objects. You’ll see more about how this works in the next section.\n• Lines 16 and 17 create a widget to display the name of the relief and pack it into the object you just created. The window produced by the above script looks like this: In this image, you can see the following effects:\n• creates a frame that appears to be flat.\n• adds a border that gives the frame the appearance of being sunken into the window.\n• gives the frame a border that makes it appear to stick out from the screen.\n• adds a border that appears as a sunken groove around an otherwise flat frame.\n• gives the appearance of a raised lip around the edge of the frame. These effects give your Python GUI Tkinter application a bit of visual appeal. When you create a widget, you can give it any name you like, as long as it’s a valid Python identifier. It’s usually a good idea to include the name of the widget class in the variable name that you assign to the widget instance. For example, if a widget is used to display a user’s name, then you might name the widget . An widget used to collect a user’s age might be called . Note: Sometimes, you may define a new widget without assigning it to a variable. You’ll call its method directly on the same line of code: This might be helpful when you don’t intend to refer to the widget’s instance later on. Due to automatic memory management, Python would normally garbage collect such unassigned objects, but Tkinter prevents that by registering every new widget internally. When you include the widget class name in the variable name, you help yourself and anyone else who needs to read your code to understand what type of widget the variable name refers to. However, using the full name of the widget class can lead to long variable names, so you may want to adopt a shorthand for referring to each widget type. For the rest of this tutorial, you’ll use the following shorthand prefixes to name widgets: In this section, you learned how to create a window, use widgets, and work with frames. At this point, you can make some plain windows that display messages, but you’ve yet to create a full-blown application. In the next section, you’ll learn how to control the layout of your applications using Tkinter’s powerful geometry managers. Expand the code block below for an exercise to check your understanding: Exercise: Create an Entry widget and insert some textShow/Hide Write a complete script that displays an widget that’s 40 text units wide and has a white background and black text. Use to display text in the widget that reads What is your name? . The output window should look like this: You can expand the code block below to see a solution: Solution: Create an Entry widget and insert some textShow/Hide There are a couple of ways to solve this exercise. Here’s one solution that uses the and parameters to set the widget’s background and foreground colors: This solution is great because it explicitly sets the background and foreground colors for the widget. On most systems, the default background color for an widget is white, and the default foreground color is black. So, you might be able to generate the same window with the and parameters left out: Keep in mind your code may look different. When you’re ready, you can move on to the next section.\n\nUp until now, you’ve been adding widgets to windows and widgets using , but you haven’t learned what exactly this method does. Let’s clear things up! Application layout in Tkinter is controlled with geometry managers. While is an example of a geometry manager, it isn’t the only one. Tkinter has two others: Each window or in your application can use only one geometry manager. However, different frames can use different geometry managers, even if they’re assigned to a frame or window using another geometry manager. Start by taking a closer look at . The geometry manager uses a packing algorithm to place widgets in a or window in a specified order. For a given widget, the packing algorithm has two primary steps:\n• Compute a rectangular area called a parcel that’s just tall (or wide) enough to hold the widget and fills the remaining width (or height) in the window with blank space.\n• Center the widget in the parcel unless a different location is specified. is powerful, but it can be difficult to visualize. The best way to get a feel for is to look at some examples. See what happens when you three widgets into a : places each below the previous one by default, in the order that they’re assigned to the window: Each is placed at the topmost available position. Therefore, the red is placed at the top of the window. Then the yellow is placed just below the red one and the blue just below the yellow one. There are three invisible parcels, each containing one of the three widgets. Each parcel is as wide as the window and as tall as the that it contains. Because no anchor point was specified when was called for each they’re all centered inside of their parcels. That’s why each is centered in the window. accepts some keyword arguments for more precisely configuring widget placement. For example, you can set the keyword argument to specify in which direction the frames should fill. The options are to fill in the horizontal direction, to fill vertically, and to fill in both directions. Here’s how you would stack the three frames so that each one fills the whole window horizontally: Notice that the is not set on any of the widgets. is no longer necessary because each frame sets to fill horizontally, overriding any width you may set. The window produced by this script looks like this: One of the nice things about filling the window with is that the fill is responsive to window resizing. Try widening the window generated by the previous script to see how this works. As you widen the window, the width of the three widgets grow to fill the window: Notice, though, that the widgets don’t expand in the vertical direction. The keyword argument of specifies on which side of the window the widget should be placed. These are the available options: If you don’t set , then will automatically use and place new widgets at the top of the window, or at the topmost portion of the window that isn’t already occupied by a widget. For example, the following script places three frames side by side from left to right and expands each frame to fill the window vertically: This time, you have to specify the keyword argument on at least one of the frames to force the window to have some height. The resulting window looks like this: Just like when you set to make the frames responsive when you resized the window horizontally, you can set to make the frames responsive when you resize the window vertically: To make the layout truly responsive, you can set an initial size for your frames using the and attributes. Then, set the keyword argument of to and set the keyword argument to : When you run the above script, you’ll see a window that initially looks the same as the one you generated in the previous example. The difference is that now you can resize the window however you want, and the frames will expand and fill the window responsively: You can use to control the precise location that a widget should occupy in a window or . You must provide two keyword arguments, and , which specify the x- and y-coordinates for the top-left corner of the widget. Both and are measured in pixels, not text units. Keep in mind that the origin, where and are both , is the top-left corner of the or window. So, you can think of the argument of as the number of pixels from the top of the window, and the argument as the number of pixels from the left edge of the window. Here’s an example of how the geometry manager works:\n• Lines 5 and 6 create a new widget called , measuring pixels wide and pixels tall, and pack it into the window with .\n• Lines 8 and 9 create a new called with a red background and place it in at position (0, 0).\n• Lines 11 and 12 create a second called with a yellow background and place it in at position (75, 75). Here’s the window that the code produces: Note that if you run this code on a different operating system that uses different font sizes and styles, then the second label might become partially obscured by the window’s edge. That’s why isn’t used often. In addition to this, it has two main drawbacks:\n• Layout can be difficult to manage with . This is especially true if your application has lots of widgets.\n• Layouts created with aren’t responsive. They don’t change as the window is resized. One of the main challenges of cross-platform GUI development is making layouts that look good no matter which platform they’re viewed on, and is a poor choice for making responsive and cross-platform layouts. That’s not to say you should never use ! In some cases, it might be just what you need. For example, if you’re creating a GUI interface for a map, then might be the perfect choice to ensure widgets are placed at the correct distance from each other on the map. is usually a better choice than , but even has some downsides. The placement of widgets depends on the order in which is called, so it can be difficult to modify existing applications without fully understanding the code controlling the layout. The geometry manager solves a lot of these issues, as you’ll see in the next section. The geometry manager you’ll likely use most often is , which provides all the power of in a format that’s easier to understand and maintain. works by splitting a window or into rows and columns. You specify the location of a widget by calling and passing the row and column indices to the and keyword arguments, respectively. Both row and column indices start at , so a row index of and a column index of tells to place a widget in the third column of the second row. The following script creates a 3 × 3 grid of frames with widgets packed into them: Here’s what the resulting window looks like: You’re using two geometry managers in this example. Each frame is attached to with the geometry manager: Each is attached to its master with : The important thing to realize here is that even though is called on each object, the geometry manager applies to the object. Similarly, the layout of each is controlled with the geometry manager. The frames in the previous example are placed tightly next to one another. To add some space around each frame, you can set the padding of each cell in the grid. Padding is just some blank space that surrounds a widget and visually sets its content apart. The two types of padding are external and internal padding. External padding adds some space around the outside of a grid cell. It’s controlled with two keyword arguments to : Both and are measured in pixels, not text units, so setting both of them to the same value will create the same amount of padding in both directions. Try to add some padding around the outside of the frames from the previous example: also has and parameters. The following code is nearly identical to the previous code, except that you add five pixels of additional padding around each label in both the and directions: The extra padding around the widgets gives each cell in the grid a little bit of breathing room between the border and the text in the label: That looks pretty nice! But if you try and expand the window in any direction, then you’ll notice that the layout isn’t very responsive: The whole grid stays at the top-left corner as the window expands. By using and on the object, you can adjust how the rows and columns of the grid grow as the window is resized. Remember, the grid is attached to , even though you’re calling on each widget. Both and take three essential arguments:\n• Index: The index of the grid column or row that you want to configure or a list of indices to configure multiple rows or columns at the same time\n• Weight: A keyword argument called that determines how the column or row should respond to window resizing, relative to the other columns and rows\n• Minimum Size: A keyword argument called that sets the minimum size of the row height or column width in pixels is set to by default, which means that the column or row doesn’t expand as the window resizes. If every column or row is given a weight of , then they all grow at the same rate. If one column has a weight of and another a weight of , then the second column expands at twice the rate of the first. Adjust the previous script to better handle window resizing: and are placed in the body of the outer loop. You could explicitly configure each column and row outside of the loop, but that would require writing an additional six lines of code. On each iteration of the loop, the -th column and row are configured to have a weight of . This ensures that the row and column expand at the same rate whenever the window is resized. The argument is set to for each column and for each row. This ensures that the widget always displays its text without chopping off any characters, even if the window size is extremely small. The result is a grid layout that expands and contracts smoothly as the window is resized: Try it yourself to get a feel for how it works! Play around with the and parameters to see how they affect the grid. By default, widgets are centered in their grid cells. For example, the following code creates two widgets and places them in a grid with one column and two rows: Each grid cell is pixels wide and pixels tall. The labels are placed in the center of each cell, as you can see in the following figure: You can change the location of each label inside of the grid cell using the parameter, which accepts a string containing one or more of the following letters:\n• or to align to the top-center part of the cell\n• or to align to the right-center side of the cell\n• or to align to the bottom-center part of the cell\n• or to align to the left-center side of the cell The letters , , , and come from the cardinal directions north, south, east, and west. Setting to on both labels in the previous code positions each label at the top-center of its grid cell: You can combine multiple letters in a single string to position each label in the corner of its grid cell: In this example, the parameter of is set to , which places the label at the top-right corner of its grid cell. is positioned in the bottom-left corner by passing to . Here’s what that looks like in the window: When a widget is positioned with , the size of the widget itself is just big enough to contain any text and other contents inside of it. It won’t fill the entire grid cell. In order to fill the grid, you can specify to force the widget to fill the cell in the vertical direction, or to fill the cell in the horizontal direction. To fill the entire cell, set to . The following example illustrates each of these options: Here’s what the output looks like: What the above example illustrates is that the geometry manager’s parameter can be used to achieve the same effects as the geometry manager’s parameter. The correspondence between the and parameters is summarized in the following table: is a powerful geometry manager. It’s often easier to understand than and is much more flexible than . When you’re creating new Tkinter applications, you should consider using as your primary geometry manager. Note: offers much more flexibility than you’ve seen here. For example, you can configure cells to span multiple rows and columns. For more information, check out the Grid Geometry Manager section of the TkDocs tutorial. Now that you’ve got the fundamentals of geometry managers down for the Python GUI framework Tkinter, the next step is to assign actions to buttons to bring your applications to life. Expand the code block below for an exercise to check your understanding: Below is an image of an address entry form made with Tkinter: Write a complete script that re-creates the window. You may use any geometry manager you like. You can expand the code block below to see a solution: There are many different ways to solve this exercise. If your solution generates a window identical to the one in the exercise statement, then congratulations! You’ve successfully solved the exercise! Below, you can look at two solutions that use the geometry manager. One solution creates a and widget with the desired settings for each field: # Create a new window with the title \"Address Entry Form\" # Create a new frame `frm_form` to contain the Label # Pack the frame into the window # Create the Label and Entry widgets for \"First Name\" # Use the grid geometry manager to place the Label and # Entry widgets in the first and second columns of the # Create the Label and Entry widgets for \"Last Name\" # Place the widgets in the second row of the grid # Create the Label and Entry widgets for \"Address Line 1\" # Place the widgets in the third row of the grid # Create the Label and Entry widgets for \"Address Line 2\" # Place the widgets in the fourth row of the grid # Create the Label and Entry widgets for \"City\" # Place the widgets in the fifth row of the grid # Create the Label and Entry widgets for \"State/Province\" # Place the widgets in the sixth row of the grid # Create the Label and Entry widgets for \"Postal Code\" # Place the widgets in the seventh row of the grid # Create the Label and Entry widgets for \"Country\" # Place the widgets in the eight row of the grid # Create a new frame `frm_buttons` to contain the # Submit and Clear buttons. This frame fills the # whole window in the horizontal direction and has # Create the \"Submit\" button and pack it to the # Create the \"Clear\" button and pack it to the There’s nothing wrong with this solution. It’s a bit long, but everything is very explicit. If you want to change something, then it’s clear to see exactly where to do so. That said, the solution can be considerably shortened by recognizing that each has the same width, and that all you need for each is the text: # Create a new window with the title \"Address Entry Form\" # Create a new frame `frm_form` to contain the Label # Pack the frame into the window # Loop over the list of field labels # Create a Label widget with the text from the labels list # Use the grid geometry manager to place the Label and # Entry widgets in the row whose index is idx # Create a new frame `frm_buttons` to contain the # Submit and Clear buttons. This frame fills the # whole window in the horizontal direction and has # Create the \"Submit\" button and pack it to the # Create the \"Clear\" button and pack it to the In this solution, a list is used to store the strings for each label in the form. They’re stored in the order that each form field should appear. Then, gets both the index and string from each value in the list. When you’re ready, you can move on to the next section.\n\nBy now, you have a pretty good idea of how to create a window with Tkinter, add some widgets, and control the application layout. That’s great, but applications shouldn’t just look good—they actually need to do something! In this section, you’ll learn how to bring your applications to life by performing actions whenever certain events occur. When you create a Tkinter application, you must call to start the event loop. During the event loop, your application checks if an event has occurred. If so, then it’ll execute some code in response. The event loop is provided for you with Tkinter, so you don’t have to write any code that checks for events yourself. However, you do have to write the code that will be executed in response to an event. In Tkinter, you write functions called event handlers for the events that you use in your application. Note: An event is any action that occurs during the event loop that might trigger some behavior in the application, such as when a key or mouse button is pressed. When an event occurs, an event object is emitted, which means that an instance of a class representing the event is created. You don’t need to worry about instantiating these classes yourself. Tkinter will create instances of event classes for you automatically. You’ll write your own event loop in order to better understand how Tkinter’s event loop works. That way, you can see how Tkinter’s event loop fits into your application, and which parts you need to write yourself. Assume there’s a list called that contains event objects. A new event object is automatically appended to every time an event occurs in your program. You don’t need to implement this updating mechanism. It just automatically happens for you in this conceptual example. Using an infinite loop, you can continually check if there are any event objects in : # Assume that this list gets updated automatically # If the event list is empty, then no events have occurred # and you can skip to the next iteration of the loop # If execution reaches this point, then there is at least one Right now, the event loop that you’ve created doesn’t do anything with . Let’s change that. Suppose your application needs to respond to keypresses. You need to check that was generated by a user pressing a key on their keyboard, and if so, pass to an event handler function for keypresses. Assume that has a attribute set to the string if the event is a keypress event object, and a attribute containing the character of the key that was pressed. Create a new function and update your event loop code: \"\"\"Print the character associated to the key pressed\"\"\" When you call , something like the above loop is run for you. This method takes care of two parts of the loop for you:\n• It maintains a list of events that have occurred.\n• It runs an event handler any time a new event is added to that list. Update your event loop to use instead of your own event loop: \"\"\"Print the character associated to the key pressed\"\"\" takes care of a lot for you, but there’s something missing from the above code. How does Tkinter know when to use ? Tkinter widgets have a method called for just this purpose. To call an event handler whenever an event occurs on a widget, use . The event handler is said to be bound to the event because it’s called every time the event occurs. You’ll continue with the keypress example from the previous section and use to bind to the keypress event: \"\"\"Print the character associated to the key pressed\"\"\" Here, the event handler is bound to a event using . Whenever a key is pressed while the application is running, your program will print the character of the key pressed. Note: The output of the above program is not printed in the Tkinter application window. It’s printed to the standard output stream (stdout). If you run the program in IDLE, then you’ll see the output in the interactive window. If you run the program from a terminal, then you should see the output in your terminal. always takes at least two arguments:\n• An event that’s represented by a string of the form , where can be any of Tkinter’s events\n• An event handler that’s the name of the function to be called whenever the event occurs The event handler is bound to the widget on which is called. When the event handler is called, the event object is passed to the event handler function. In the example above, the event handler is bound to the window itself, but you can bind an event handler to any widget in your application. For example, you can bind an event handler to a widget that will perform some action whenever the button is pressed: In this example, the event on the widget is bound to the event handler. The event occurs whenever the left mouse button is pressed while the mouse is over the widget. There are other events for mouse button clicks, including for the middle mouse button and for the right mouse button. Note: For a list of commonly used events, see the Event types section of the Tkinter 8.5 reference. You can bind any event handler to any kind of widget with , but there’s a more straightforward way to bind event handlers to button clicks using the widget’s attribute. Every widget has a attribute that you can assign to a function. Whenever the button is pressed, the function is executed. Take a look at an example. First, you’ll create a window with a widget that holds a numeric value. You’ll put buttons on the left and right side of the label. The left button will be used to decrease the value in the , and the right one will increase the value. Here’s the code for the window: The window looks like this: With the app layout defined, you can bring it to life by giving the buttons some commands. Start with the left button. When this button is pressed, it should decrease the value in the label by one. In order to do this, you first need to get answers to two questions:\n• How do you get the text in ?\n• How do you update the text in ? widgets don’t have like and widgets do. However, you can retrieve the text from the label by accessing the attribute with a dictionary-style subscript notation: # Set new text for the label Now that you know how to get and set a label’s text, write an function that increases the value in by one: gets the text from and converts it to an integer with . Then, it increases this value by one and sets the label’s attribute to this new value. You’ll also need to decrease the value in by one: Put and in your code just after the statement. To connect the buttons to the functions, assign the function to the button’s attribute. You can do this when you instantiate the buttons. For example, update the two lines that instantiate the buttons to the following: That’s all you need to do to bind the buttons to and and make the program functional. Try saving your changes and running the application! Click the buttons to increase and decrease the value in the center of the window: Here’s the full application code for your reference: This app isn’t particularly useful, but the skills you learned here apply to every app you’ll make:\n• Use widgets to create the components of the user interface.\n• Use geometry managers to control the layout of the application.\n• Write event handlers that interact with various components to capture and transform user input. In the next two sections, you’ll build more useful apps. First, you’ll build a temperature converter that converts a temperature value from Fahrenheit to Celsius. After that, you’ll build a text editor that can open, edit, and save text files! Expand the code block below for an exercise to check your understanding: Write a program that simulates rolling a six-sided die. There should be one button with the text . When the user clicks the button, a random integer from to should be displayed. Hint: You can generate a random number using in the module. If you’re not familiar with the module, then check out Generating Random Data in Python (Guide) for more information. The application window should look something like this: You can expand the code block below to see a solution: Keep in mind that your code may look different. When you’re ready, you can move on to the next section.\n\nIn this section, you’ll build a temperature converter application that allows the user to input temperature in degrees Fahrenheit and push a button to convert that temperature to degrees Celsius. You’ll walk through the code step by step. You can also find the full source code at the end of this section for your reference. Note: To get the most out of this section, follow along in a Python shell. Before you start coding, you’ll first design the app. You need three elements:\n• : A widget called for entering the Fahrenheit value\n• : A widget called that reads the value from the widget, converts it from Fahrenheit to Celsius, and sets the text of the widget to the result when clicked You can arrange these in a grid with a single row and one column for each widget. That gets you a minimally working application, but it isn’t very user-friendly. Everything needs to have labels. You’ll put a label directly to the right of the widget containing the Fahrenheit symbol (℉) so that the user knows that the value should be in degrees Fahrenheit. To do this, set the label text to , which uses Python’s named Unicode character support to display the Fahrenheit symbol. You can give a little flair by setting its text to the value , which displays a black arrow pointing to the right. You’ll also make sure that always has the Celsius symbol (℃) following the label text to indicate that the result is in degrees Celsius. Here’s what the final window will look like: Now that you know what widgets you need and what the window is going to look like, you can start coding it up! First, import and create a new window: sets the title of an existing window, while with both arguments set to makes the window have a fixed size. When you finally run this application, the window will have the text Temperature Converter in its title bar. Next, create the widget with a label called and assign both to a widget called : The user will enter the Fahrenheit value in , and is used to label with the Fahrenheit symbol. The container groups and together. You want to be placed directly to the right of . You can lay them out in using the geometry manager with one row and two columns: You’ve set the parameter to for so that it always sticks to the rightmost edge of its grid cell. You also set to for to keep it stuck to the leftmost edge of its grid cell. This ensures that is always located immediately to the right of . Now, make the and the for converting the temperature entered into and displaying the results: Like , both and are assigned to . Together, these three widgets make up the three cells in the main application grid. Use to go ahead and lay them out now: That looks great! But the button doesn’t do anything just yet. At the top of your script file, just below the line, add a function called : \"\"\"Convert the value for Fahrenheit to Celsius and insert the This function reads the value from , converts it from Fahrenheit to Celsius, and then displays the result in . Now go down to the line where you define and set its parameter to : That’s it! You’ve created a fully functional temperature converter app in just twenty-six lines of code! Pretty cool, right? You can expand the code block below to see the full script: Here’s the full script for your reference: \"\"\"Convert the value for Fahrenheit to Celsius and insert the # Create the Fahrenheit entry frame with an Entry # Layout the temperature Entry and Label in frm_entry # Set up the layout using the .grid() geometry manager It’s time to kick things up a notch! Read on to learn how to build a text editor.\n\nIn this section, you’ll build a text editor application that can create, open, edit, and save text files. There are three essential elements in the application:\n• A widget called for creating and editing the text file The three widgets will be arranged so that the two buttons are on the left-hand side of the window, and the text box is on the right-hand side. The whole window should have a minimum height of 800 pixels, and should have a minimum width of 800 pixels. The whole layout should be responsive so that if the window is resized, then is resized as well. The width of the frame holding the buttons should not change, however. Here’s a sketch of how the window will look: You can achieve the desired layout using the geometry manager. The layout contains a single row and two columns:\n• A narrow column on the left for the buttons\n• A wider column on the right for the text box To set the minimum sizes for the window and , you can set the parameters of the window methods and to . To handle resizing, you can set the parameters of these methods to . In order to get both buttons into the same column, you’ll need to create a widget called . According to the sketch, the two buttons should be stacked vertically inside of this frame, with on top. You can do that with either the or geometry manager. For now, you’ll stick with since it’s a little easier to work with. Now that you have a plan, you can start coding the application. The first step is to create all of the widgets you need:\n• Lines 3 and 4 create a new window with the title .\n• Lines 6 and 7 set the row and column configurations.\n• Lines 9 to 12 create the four widgets you’ll need for the text box, the frame, and the open and save buttons. Take a look at line 6 more closely. The parameter of is set to , and is set to : The first argument is , which sets the height of the first row to pixels and makes sure that the height of the row grows proportionally to the height of the window. There’s only one row in the application layout, so these settings apply to the entire window. Let’s also take a closer look at line 7. Here, you use to set the and attributes of the column with index to and , respectively: Remember, row and column indices are zero-based, so these settings apply only to the second column. By configuring just the second column, the text box will expand and contract naturally when the window is resized, while the column containing the buttons will remain at a fixed width. Now you can work on the application layout. First, assign the two buttons to the frame using the geometry manager: These two lines of code create a grid with two rows and one column in the frame since both and have their attribute set to . is put in the first row and in the second row so that appears above in the layout, just you planned in your sketch. Both and have their attributes set to , which forces the buttons to expand horizontally in both directions and fill the entire frame. This ensures that both buttons are the same size. You place five pixels of padding around each button by setting the and parameters to . Only has vertical padding. Since it’s on top, the vertical padding offsets the button down from the top of the window a bit and makes sure that there’s a small gap between it and . Now that is laid out and ready to go, you can set up the grid layout for the rest of the window: These two lines of code create a grid with one row and two columns for . You place in the first column and in the second column so that appears to the left of in the window layout. The parameter for is set to , which forces the whole frame to expand vertically and fill the entire height of its column. fills its entire grid cell because you set its parameter to , which forces it to expand in every direction. Now that the application layout is complete, add to the bottom of the program and save and run the file: The following window is displayed: That looks great! But it doesn’t do anything just yet, so you need to start writing the commands for the buttons. needs to show a file open dialog and allow the user to select a file. It then needs to open that file and set the text of to the contents of the file. Here’s an function that does just this:\n• Lines 5 to 7 use the dialog from the module to display a file open dialog and store the selected file path to .\n• Lines 8 and 9 check to see if the user closes the dialog box or clicks the Cancel button. If so, then will be , and the function will without executing any of the code to read the file and set the text of .\n• Line 10 clears the current contents of using .\n• Lines 11 and 12 open the selected file and its contents before storing the as a string.\n• Line 13 assigns the string to using .\n• Line 14 sets the title of the window so that it contains the path of the open file. Now you can update the program so that calls whenever it’s clicked. There are a few things that you need to do to update the program. First, import from by adding the following import to the top of your program: Next, set the attribute of to : Save the file and run it to check that everything is working. Then try opening a text file! With working, it’s time to work on the function for . This needs to open a save file dialog box so that the user can choose where they would like to save the file. You’ll use the dialog in the module for this. This function also needs to extract the text currently in and write this to a file at the selected location. Here’s a function that does just this: \"\"\"Save the current file as a new file.\"\"\"\n• Lines 19 to 22 use the dialog box to get the desired save location from the user. The selected file path is stored in the variable.\n• Lines 23 and 24 check to see if the user closes the dialog box or clicks the Cancel button. If so, then will be , and the function will return without executing any of the code to save the text to a file.\n• Line 25 creates a new file at the selected file path.\n• Line 26 extracts the text from with method and assigns it to the variable .\n• Line 28 updates the title of the window so that the new file path is displayed in the window title. Now you can update the program so that calls when it’s clicked. Again, there are a few things you need to do in order to update the program. First, import from by updating the import at the top of your script, like so: Finally, set the attribute of to : Save the file and run it. You’ve now got a minimal yet fully functional text editor! You can expand the code block below to see the full script: Here’s the full script for your reference: \"\"\"Save the current file as a new file.\"\"\" You’ve now built two GUI applications in Python and applied many of the skills that you’ve learned throughout this tutorial. That’s no small achievement, so take some time to feel good about what you’ve done. You’re now ready to tackle some applications on your own!"
    },
    {
        "link": "https://customtkinter.tomschimansky.com",
        "document": "CustomTkinter is a python desktop UI-library based on Tkinter, which provides modern looking and fully customizable widgets. With CustomTkinter you'll get a consistent look across all desktop platforms (Windows, macOS, Linux)."
    },
    {
        "link": "https://pyinstaller.org/en/stable/operating-mode.html",
        "document": "What PyInstaller Does and How It Does It\n\nThis section covers the basic ideas of PyInstaller. These ideas apply to all platforms. Options and special cases are covered below, under Using PyInstaller.\n\nPyInstaller reads a Python script written by you. It analyzes your code to discover every other module and library your script needs in order to execute. Then it collects copies of all those files – including the active Python interpreter! – and puts them with your script in a single folder, or optionally in a single executable file.\n\nFor the great majority of programs, this can be done with one short command,\n\nor with a few added options, for example a windowed application as a single-file executable,\n\nYou distribute the bundle as a folder or file to other people, and they can execute your program. To your users, the app is self-contained. They do not need to install any particular version of Python or any modules. They do not need to have Python installed at all.\n\nWhat other modules and libraries does your script need in order to run? (These are sometimes called its “dependencies”.) To find out, PyInstaller finds all the statements in your script. It finds the imported modules and looks in them for statements, and so on recursively, until it has a complete list of modules your script may use. PyInstaller understands the “egg” distribution format often used for Python packages. If your script imports a module from an “egg”, PyInstaller adds the egg and its dependencies to the set of needed files. PyInstaller also knows about many major Python packages, including the GUI packages Qt (imported via PyQt or PySide), WxPython, TkInter, matplotlib, and other major packages. For a complete list, see Supported Packages. Some Python scripts import modules in ways that PyInstaller cannot detect: for example, by using the function with variable data, using , or manipulating the value at run time. If your script requires files that PyInstaller does not know about, you must help it:\n• None You can give additional files on the command line.\n• None You can give additional import paths on the command line.\n• None You can edit the file that PyInstaller writes the first time you run it for your script. In the spec file you can tell PyInstaller about code modules that are unique to your script.\n• None You can write “hook” files that inform PyInstaller of hidden imports. If you create a “hook” for a package that other users might also use, you can contribute your hook file to PyInstaller. If your program depends on access to certain data files, you can tell PyInstaller to include them in the bundle as well. You do this by modifying the spec file, an advanced topic that is covered under Using Spec Files. In order to locate included files at run time, your program needs to be able to learn its path at run time in a way that works regardless of whether or not it is running from a bundle. This is covered under Run-time Information. PyInstaller does not include libraries that should exist in any installation of this OS. For example in GNU/Linux, it does not bundle any file from or , assuming these will be found in every system.\n\nWhen you apply PyInstaller to the default result is a single folder named . This folder contains all your script’s dependencies, and an executable file also named ( in Windows). You compress the folder to and transmit it to your users. They install the program simply by unzipping it. A user runs your app by opening the folder and launching the executable inside it. It is easy to debug problems that occur when building the app when you use one-folder mode. You can see exactly what files PyInstaller collected into the folder. Another advantage of a one-folder bundle is that when you change your code, as long as it imports exactly the same set of dependencies , you could send out only the updated executable. That is typically much smaller than the entire folder. (If you change the script so that it imports more or different dependencies, or if the dependencies are upgraded, you must redistribute the whole bundle.)\n\nA bundled program always starts execution in the PyInstaller bootloader. This is the heart of the executable in the folder. The PyInstaller bootloader is a binary executable program for the active platform (Windows, GNU/Linux, macOS, etc.). When the user launches your program, it is the bootloader that runs. The bootloader creates a temporary Python environment such that the Python interpreter will find all imported modules and libraries in the folder. The bootloader starts a copy of the Python interpreter to execute your script. Everything follows normally from there, provided that all the necessary support files were included.\n\nPyInstaller can bundle your script and all its dependencies into a single executable named ( in Windows). The advantage is that your users get something they understand, a single executable to launch. A disadvantage is that any related files such as a README must be distributed separately. Also, the single executable is a little slower to start up than the one-folder bundle. Before you attempt to bundle to one file, make sure your app works correctly when bundled to one folder. It is is much easier to diagnose problems in one-folder mode.\n\nThe bootloader is the heart of the one-file bundle also. When started it creates a temporary folder in the appropriate temp-folder location for this OS. The folder is named , where xxxxxx is a random number. The one executable file contains an embedded archive of all the Python modules used by your script, as well as compressed copies of any non-Python support files (e.g. files). The bootloader uncompresses the support files and writes copies into the the temporary folder. This can take a little time. That is why a one-file app is a little slower to start than a one-folder app. PyInstaller currently does not preserve file attributes. see #3926. After creating the temporary folder, the bootloader proceeds exactly as for the one-folder bundle, in the context of the temporary folder. When the bundled code terminates, the bootloader deletes the temporary folder. (In GNU/Linux and related systems, it is possible to mount the folder with a “no-execution” option. That option is not compatible with a PyInstaller one-file bundle. It needs to execute code out of . If you know the target environment, might be a workaround. Alternatively, you can set the environment variable that controls the temporary directory before launching the program. See Defining the Extraction Location). Because the program makes a temporary folder with a unique name, you can run multiple copies of the app; they won’t interfere with each other. However, running multiple copies is expensive in disk space because nothing is shared. The folder is not removed if the program crashes or is killed (kill -9 on Unix, killed by the Task Manager on Windows, “Force Quit” on macOS). Thus if your app crashes frequently, your users will lose disk space to multiple temporary folders. It is possible to control the location of the folder by using the command line option. The specified path is stored in the executable, and the bootloader will create the folder inside of the specified folder. Please see Defining the Extraction Location for details. Do not give administrator privileges to a one-file executable on Windows (“Run this program as an administrator”). There is an unlikely but not impossible way in which a malicious attacker could corrupt one of the shared libraries in the temp folder while the bootloader is preparing it. When distributing a privileged program in general, ensure that file permissions prevent shared libraries or executables from being tampered with. Otherwise, an unelevated process which has write access to these files may escalate privileges by modifying them. Applications that use may encounter permissions errors. The temporary folder where the bundled app runs may not being readable after is called. If your script needs to call , it may be better to use one-folder mode so as to have more control over the permissions on its files.\n\nThe bundled app does not include any source code. However, PyInstaller bundles compiled Python scripts ( files). These could in principle be decompiled to reveal the logic of your code. If you want to hide your source code more thoroughly, one possible option is to compile some of your modules with Cython. Using Cython you can convert Python modules into C and compile the C to machine language. PyInstaller can follow import statements that refer to Cython C object modules and bundle them."
    },
    {
        "link": "https://pyinstaller.org",
        "document": "PyInstaller bundles a Python application and all its dependencies into a single package. The user can run the packaged app without installing a Python interpreter or any modules. PyInstaller supports Python 3.8 and newer, and correctly bundles many major Python packages such as numpy, matplotlib, PyQt, wxPython, and others.\n\nPyInstaller is tested against Windows, macOS, and Linux. However, it is not a cross-compiler; to make a Windows app you run PyInstaller on Windows, and to make a Linux app you run it on Linux, etc. x PyInstaller has been used successfully with AIX, Solaris, FreeBSD and OpenBSD but testing against them is not part of our continuous integration tests, and the development team offers no guarantee (all code for these platforms comes from external contributions) that PyInstaller will work on these platforms or that they will continue to be supported.\n\nMake sure you have the Requirements installed, and then install PyInstaller from PyPI: Open a command prompt/shell window, and navigate to the directory where your file is located, then build your app with the following command: Your bundled application should now be available in the folder. See Troubleshooting missing PyInstaller command if you get some kind of pyinstaller command not found error."
    },
    {
        "link": "https://pyinstaller.org/en/stable/usage.html",
        "document": "The syntax of the command is:\n\nIn the most simple case, set the current directory to the location of your program and execute:\n• None Writes in the same folder as the script.\n• None Creates a folder in the same folder as the script if it does not exist.\n• None Writes some log files and working files in the folder.\n• None Creates a folder in the same folder as the script if it does not exist.\n• None Writes the executable folder in the folder.\n\nIn the folder you find the bundled app you distribute to your users.\n\nNormally you name one script on the command line. If you name more, all are analyzed and included in the output. However, the first script named supplies the name for the spec file and for the executable folder or file. Its code is the first to execute at run-time.\n\nFor certain uses you may edit the contents of (described under Using Spec Files). After you do this, you name the spec file to PyInstaller instead of the script:\n\nThe file contains most of the information provided by the options that were specified when pyinstaller (or pyi-makespec) was run with the script file as the argument. You typically do not need to specify any options when running pyinstaller with the spec file. Only a few command-line options have an effect when building from a spec file.\n\nYou may give a path to the script or spec file, for example\n\nA full list of the command’s options are as follows: Name of scriptfiles to be processed or exactly one .spec file. If a .spec file is specified, most options are unnecessary and are ignored. show this help message and exit Where to put the bundled app (default: ./dist) Where to put all the temporary work files, .log, .pyz and etc. (default: ./build) Replace output directory (default: SPECPATH/dist/SPECNAME) without asking for confirmation Amount of detail in build-time console messages. LEVEL may be one of TRACE, DEBUG, INFO, WARN, DEPRECATION, ERROR, FATAL (default: INFO). Also settable via and overrides the PYI_LOG_LEVEL environment variable. Name to assign to the bundled app and spec file (default: first script’s basename) For onedir builds only, specify the name of the directory in which all supporting files (i.e. everything except the executable itself) will be placed in. Use “.” to re-enable old onedir layout without contents directory. What To Bundle, Where To Search Additional data files or directories containing data files to be added to the application. The argument value should be in form of “source:dest_dir”, where source is the path to file (or directory) to be collected, dest_dir is the destination directory relative to the top-level application directory, and both paths are separated by a colon (:). To put a file in the top-level application directory, use . as a dest_dir. This option can be used multiple times. Additional binary files to be added to the executable. See the option for the format. This option can be used multiple times. A path to search for imports (like using PYTHONPATH). Multiple paths are allowed, separated by , or use this option multiple times. Equivalent to supplying the argument in the spec file. Name an import not visible in the code of the script(s). This option can be used multiple times. Collect all submodules from the specified package or module. This option can be used multiple times. Collect all data from the specified package or module. This option can be used multiple times. Collect all binaries from the specified package or module. This option can be used multiple times. Collect all submodules, data files, and binaries from the specified package or module. This option can be used multiple times. Copy metadata for the specified package. This option can be used multiple times. Copy metadata for the specified package and all its dependencies. This option can be used multiple times. An additional path to search for hooks. This option can be used multiple times. Path to a custom runtime hook file. A runtime hook is code that is bundled with the executable and is executed before any other code or module to set up special features of the runtime environment. This option can be used multiple times. Optional module or package (the Python name, not the path name) that will be ignored (as though it was not found). This option can be used multiple times. (EXPERIMENTAL) Add an splash screen with the image IMAGE_FILE to the application. The splash screen can display progress updates while unpacking. Provide assistance with debugging a frozen application. This argument may be provided multiple times to select several of the following options. - all: All three of the following options. - imports: specify the -v option to the underlying Python interpreter, causing it to print a message each time a module is initialized, showing the place (filename or built-in module) from which it is loaded. See https://docs.python.org/3/using/cmdline.html#id4. - bootloader: tell the bootloader to issue progress messages while initializing and starting the bundled app. Used to diagnose problems with missing imports. - noarchive: instead of storing all frozen Python source files as an archive inside the resulting executable, store them as files in the resulting output directory. Bytecode optimization level used for collected python modules and scripts. For details, see the section “Bytecode Optimization Level” in PyInstaller manual. Specify a command-line option to pass to the Python interpreter at runtime. Currently supports “v” (equivalent to “–debug imports”), “u”, “W <warning control>”, “X <xoption>”, and “hash_seed=<value>”. For details, see the section “Specifying Python Interpreter Options” in PyInstaller manual. Apply a symbol-table strip to the executable and shared libs (not recommended for Windows) Do not use UPX even if it is available (works differently between Windows and *nix) Prevent a binary from being compressed when using upx. This is typically used if upx corrupts certain binaries during compression. FILE is the filename of the binary without path. This option can be used multiple times. Open a console window for standard i/o (default). On Windows this option has no effect if the first script is a ‘.pyw’ file. Windows and macOS: do not provide a console window for standard i/o. On macOS this also triggers building a macOS .app bundle. On Windows this option is automatically set if the first script is a ‘.pyw’ file. This option is ignored on *NIX systems. Windows only: in console-enabled executable, have bootloader automatically hide or minimize the console window if the program owns the console window (i.e., was not launched from an existing console window). FILE.ico: apply the icon to a Windows executable. FILE.exe,ID: extract the icon with ID from an exe. FILE.icns: apply the icon to the .app bundle on macOS. If an image file is entered that isn’t in the platform format (ico on Windows, icns on Mac), PyInstaller tries to use Pillow to translate the icon into the correct format (if Pillow is installed). Use “NONE” to not apply any icon, thereby making the OS show some default (default: apply PyInstaller’s icon). This option can be used multiple times. Disable traceback dump of unhandled exception in windowed (noconsole) mode (Windows and macOS only), and instead display a message that this feature is disabled. Add a version resource from FILE to the exe. Add manifest FILE or XML to the exe. Add or update a resource to a Windows executable. The RESOURCE is one to four items, FILE[,TYPE[,NAME[,LANGUAGE]]]. FILE can be a data file or an exe/dll. For data files, at least TYPE and NAME must be specified. LANGUAGE defaults to 0 or may be specified as wildcard * to update all resources of the given TYPE and NAME. For exe/dll files, all resources from FILE will be added/updated to the final executable if TYPE, NAME and LANGUAGE are omitted or specified as wildcard *. This option can be used multiple times. Using this option creates a Manifest that will request elevation upon application start. Using this option allows an elevated application to work with Remote Desktop. Enable argv emulation for macOS app bundles. If enabled, the initial open document/URL event is processed by the bootloader and the passed file paths or URLs are appended to sys.argv. macOS .app bundle identifier is used as the default unique program name for code signing purposes. The usual form is a hierarchical name in reverse DNS notation. For example: com.mycompany.department.appname (default: first script’s basename) Target architecture (macOS only; valid values: x86_64, arm64, universal2). Enables switching between universal2 and single-arch version of frozen application (provided python installation supports the target architecture). If not target architecture is not specified, the current running architecture is targeted. Code signing identity (macOS only). Use the provided identity to sign collected binaries and generated executable. If signing identity is not provided, ad- hoc signing is performed instead. Entitlements file to use when code-signing the collected binaries (macOS only). Where to extract libraries and support files in mode. If this option is given, the bootloader will ignore any temp-folder location defined by the run-time OS. The -folder will be created here. Please use this option only if you know what you are doing. Note that on POSIX systems, PyInstaller’s bootloader does NOT perform shell-style environment variable expansion on the given path string. Therefore, using environment variables (e.g., or ) in path will NOT work. Tell the bootloader to ignore signals rather than forwarding them to the child process. Useful in situations where for example a supervisor process signals both the bootloader and the child (e.g., via a process group) to avoid signalling the child twice.\n\nUPX is a free utility for compressing executable files and libraries. It is available for most operating systems and can compress a large number of executable file formats. See the UPX home page for downloads, and for the list of supported file formats. When UPX is available, PyInstaller uses it to individually compress each collected binary file (executable, shared library, or python extension) in order to reduce the overall size of the frozen application (the one-dir bundle directory, or the one-file executable). The frozen application’s executable itself is not UPX-compressed (regardless of one-dir or one-file mode), as most of its size comprises the embedded archive that already contains individually compressed files. PyInstaller looks for the UPX in the standard executable path(s) (defined by environment variable), or in the path specified via the command-line option. If found, it is used automatically. The use of UPX can be completely disabled using the command-line option. UPX is currently used only on Windows. On other operating systems, the collected binaries are not processed even if UPX is found. The shared libraries (e.g., the Python shared library) built on modern linux distributions seem to break when processed with UPX, resulting in defunct application bundles. On macOS, UPX currently fails to process .dylib shared libraries; furthermore the UPX-compressed files fail the validation check of the utility, and therefore cannot be code-signed (which is a requirement on the Apple M1 platform). Using UPX may end up corrupting a collected shared library. Known examples of such corruption are Windows DLLs with Control Flow Guard (CFG) enabled, as well as Qt5 and Qt6 plugins. In such cases, individual files may be need to be excluded from UPX processing, using the option (or using the argument in the .spec file). Changed in version 4.2: PyInstaller detects CFG-enabled DLLs and automatically excludes them from UPX processing. Changed in version 4.3: PyInstaller automatically excludes Qt5 and Qt6 plugins from UPX processing. Although PyInstaller attempts to automatically detect and exclude some of the problematic files from UPX processing, there are cases where the UPX excludes need to be specified manually. For example, 32-bit Windows binaries from the package (Qt5 DLLs and python extension modules) have been reported to be corrupted by UPX. Changed in version 5.0: Unlike earlier releases that compared the provided UPX-exclude names against basenames of the collect binary files (and, due to incomplete case normalization, required provided exclude names to be lowercase on Windows), the UPX-exclude pattern matching now uses OS-default case sensitivity and supports the wildcard ( ) operator. It also supports specifying (full or partial) parent path of the file. The provided UPX exclude patterns are matched against source (origin) paths of the collected binary files, and the matching is performed from right to left. For example, to exclude Qt5 DLLs from the PySide2 package, use , and to exclude the python extensions from the PySide2 package, use .\n\nThis feature is incompatible with macOS. In the current design, the splash screen operates in a secondary thread, which is disallowed by the Tcl/Tk (or rather, the underlying GUI toolkit) on macOS. Some applications may require a splash screen as soon as the application (bootloader) has been started, because especially in onefile mode large applications may have long extraction/startup times, while the bootloader prepares everything, where the user cannot judge whether the application was started successfully or not. The bootloader is able to display a one-image (i.e. only an image) splash screen, which is displayed before the actual main extraction process starts. The splash screen supports non-transparent and hard-cut-transparent images as background image, so non-rectangular splash screens can also be displayed. Splash images with transparent regions are not supported on Linux due to Tcl/Tk platform limitations. The and wm attributes used by PyInstaller are not available to Linux. This splash screen is based on Tcl/Tk, which is the same library used by the Python module tkinter. PyInstaller bundles the dynamic libraries of tcl and tk into the application at compile time. These are loaded into the bootloader at startup of the application after they have been extracted (if the program has been packaged as an onefile archive). Since the file sizes of the necessary dynamic libraries are very small, there is almost no delay between the start of the application and the splash screen. The compressed size of the files necessary for the splash screen is about 1.5 MB. As an additional feature, text can optionally be displayed on the splash screen. This can be changed/updated from within Python. This offers the possibility to display the splash screen during longer startup procedures of a Python program (e.g. waiting for a network response or loading large files into memory). You can also start a GUI behind the splash screen, and only after it is completely initialized the splash screen can be closed. Optionally, the font, color and size of the text can be set. However, the font must be installed on the user system, as it is not bundled. If the font is not available, a fallback font is used. If the splash screen is configured to show text, it will automatically (as onefile archive) display the name of the file that is currently being unpacked, this acts as a progress bar.\n\nWhen building your application in mode (see Bundling to One File and How the One-File Program Works), you might encounter situations where you want to control the location of the temporary directory where the application unpacks itself. For example:\n• None your application is supposed to be running for long periods of time, and you need to prevent its files from being deleted by the OS that performs periodic clean-up in standard temporary directories.\n• None your target POSIX system does not use standard temporary directory location (i.e., ) and the standard environment variables for temporary directory are not set in the environment.\n• None the default temporary directory on the target POSIX system is mounted with option, which prevents the frozen application from loading the unpacked shared libraries. The location of the temporary directory can be overridden dynamically, by setting corresponding environment variable(s) before launching the application, or set statically, using the option during the build process. The extraction location can be controlled dynamically, by setting the environment variable(s) that PyInstaller uses to determine the temporary directory. This can, for example, be done in a wrapper shell script that sets the environment variable(s) before running the frozen application’s executable. On POSIX systems, the environment variables used for temporary directory location are , , and , in that order; if none are defined (or the corresponding directories do not exist or cannot be used), , , and are used as hard-coded fall-backs, in the specified order. The directory specified via the environment variable must exist (i.e., the application attempts to create only its own directory under the base temporary directory). On Windows, the default temporary directory location is determined via GetTempPathW function (which looks at and environment variables for initial temporary directory candidates). The location of the temporary directory can be set statically, at compile time, using the option. If this option is used, the bootloader will ignore temporary directory locations defined by the OS, and use the specified path. The path can be either absolute or relative (which makes it relative to the current working directory). Please use this option only if you know what you are doing. On POSIX systems, PyInstaller’s bootloader does not perform shell-style environment variable expansion on the path string given via option. Therefore, using environment variables (e.g., or ) in the path will not work.\n\nIf you distribute your application for only one combination of OS and Python, just install PyInstaller like any other package and use it in your normal development setup. When you need to bundle your application within one OS but for different versions of Python and support libraries – for example, a Python 3.6 version and a Python 3.7 version; or a supported version that uses Qt4 and a development version that uses Qt5 – we recommend you use venv. With you can maintain different combinations of Python and installed packages, and switch from one combination to another easily. These are called or in short.\n• None Use to create as many different development environments as you need, each with its unique combination of Python and installed packages.\n• None Use PyInstaller to build your application in each virtual environment. Note that when using , the path to the PyInstaller commands is: Under Windows, the pip-Win package makes it especially easy to set up different environments and switch between them. Under GNU/Linux and macOS, you switch environments at the command line. See PEP 405 and the official Python Tutorial on Virtual Environments and Packages for more information about Python virtual environments. If you need to distribute your application for more than one OS, for example both Windows and macOS, you must install PyInstaller on each platform and bundle your app separately on each. You can do this from a single machine using virtualization. The free virtualBox or the paid VMWare and Parallels allow you to run another complete operating system as a “guest”. You set up a virtual machine for each “guest” OS. In it you install Python, the support packages your application needs, and PyInstaller. A File Sync & Share system like NextCloud is useful with virtual machines. Install the synchronization client in each virtual machine, all linked to your synchronization account. Keep a single copy of your script(s) in a synchronized folder. Then on any virtual machine you can run PyInstaller thus: # get rid of modules compiled by another Python \\ \\ \\ PyInstaller reads scripts from the common synchronized folder, but writes its work files and the bundled app in folders that are local to the virtual machine. If you share the same home directory on multiple platforms, for example GNU/Linux and macOS, you will need to set the PYINSTALLER_CONFIG_DIR environment variable to different values on each platform otherwise PyInstaller may cache files for one platform and use them on the other platform, as by default it uses a subdirectory of your home directory as its cache location. It is said to be possible to cross-develop for Windows under GNU/Linux using the free Wine environment. Further details are needed, see How to Contribute.\n\nA Windows app may require a Version resource file. A Version resource contains a group of data structures, some containing binary integers and some containing strings, that describe the properties of the executable. For details see the Microsoft Version Information Structures page. Version resources are complex and some elements are optional, others required. When you view the version tab of a Properties dialog, there’s no simple relationship between the data displayed and the structure of the resource. For this reason PyInstaller includes the command. It is invoked with the full path name of any Windows executable that has a Version resource: The command writes text that represents a Version resource in readable form to standard output. You can copy it from the console window or redirect it to a file. Then you can edit the version information to adapt it to your program. Using you can find an executable that displays the kind of information you want, copy its resource data, and modify it to suit your package. The version text file is encoded UTF-8 and may contain non-ASCII characters. (Unicode characters are allowed in Version resource string fields.) Be sure to edit and save the text file in UTF-8 unless you are certain it contains only ASCII string values. Your edited version text file can be given with the option to or . The text data is converted to a Version resource and installed in the bundled app. In a Version resource there are two 64-bit binary values, and . In the version text file these are given as four-element tuples, for example: The elements of each tuple represent 16-bit values from most-significant to least-significant. For example the value resolves to in hex. You can also install a Version resource from a text file after the bundled app has been created, using the command: The utility reads a version text file as written by , converts it to a Version resource, and installs that resource in the executable_file specified. For advanced uses, examine a version text file as written by . You find it is Python code that creates a object. The class definition for is found in in the PyInstaller distribution folder. You can write a program that imports . In that program you can the contents of a version info text file to produce a object. You can use the method of that object to produce a Version resource in binary form. Or you can apply the function to the object to reproduce the version text file.\n\nUnder macOS, PyInstaller always builds a UNIX executable in . If you specify , the output is a folder named containing supporting files and an executable named . If you specify , the output is a single UNIX executable named . Either executable can be started from a Terminal command line. Standard input and output work as normal through that Terminal window. If you specify with either option, the folder also contains a macOS app bundle named . Generating app bundles with onefile executables (i.e., using the combination of and options), while possible, is not recommended. Such app bundles are inefficient, because they require unpacking on each run (and the unpacked content might be scanned by the OS each time). Furthermore, onefile executables will not work when signed/notarized with sandbox enabled (which is a requirement for distribution of apps through Mac App Store). As you are likely aware, an app bundle is a special type of folder. The one built by PyInstaller always contains a folder named , which contains:\n• None A folder named that contains the program executable.\n• None A folder named that contains the collected binaries (shared libraries, python extensions) and nested .framework bundles. It also contains symbolic links to data files and directories from the directory.\n• None A folder named that contains the icon file and all collected data files. It also contains symbolic links to binaries and directories from the directory. The contents of the and directories are cross-linked between the two directories in an effort to maintain an illusion of a single content directory (which is required by some packages), while also trying to satisfy the Apple’s file placement requirements for codesigning. Use the argument to specify a custom icon for the application. It will be copied into the folder. (If you do not specify an icon file, PyInstaller supplies a file with the PyInstaller logo.) Use the argument to add a bundle identifier. This becomes the used in code-signing (see the PyInstaller code signing recipe and for more detail, the Apple code signing overview technical note). You can add other items to the by editing the spec file; see Spec File Options for a macOS Bundle below.\n\nUnder GNU/Linux, PyInstaller does not bundle (the C standard library, usually , the Gnu version) with the app. Instead, the app expects to link dynamically to the from the local OS where it runs. The interface between any app and is forward compatible to newer releases, but it is not backward compatible to older releases. For this reason, if you bundle your app on the current version of GNU/Linux, it may fail to execute (typically with a runtime dynamic link error) if it is executed on an older version of GNU/Linux. The solution is to always build your app on the oldest version of GNU/Linux you mean to support. It should continue to work with the found on newer versions. The GNU/Linux standard libraries such as are distributed in 64-bit and 32-bit versions, and these are not compatible. As a result you cannot bundle your app on a 32-bit system and run it on a 64-bit installation, nor vice-versa. You must make a unique version of the app for each word-length supported. Note that PyInstaller does bundle other shared libraries that are discovered via dependency analysis, such as libstdc++.so.6, libfontconfig.so.1, libfreetype.so.6. These libraries may be required on systems where older (and thus incompatible) versions of these libraries are available. On the other hand, the bundled libraries may cause issues when trying to load a system-provided shared library that is linked against a newer version of the system-provided library. For example, system-installed mesa DRI drivers (e.g., radeonsi_dri.so) depend on the system-provided version of libstdc++.so.6. If the frozen application bundles an older version of libstdc++.so.6 (as collected from the build system), this will likely cause missing symbol errors and prevent the DRI drivers from loading. In this case, the bundled libstdc++.so.6 should be removed. However, this may not work on a different distribution that provides libstdc++.so.6 older than the one from the build system; in that case, the bundled version should be kept, because the system-provided version may lack the symbols required by other collected binaries that depend on libstdc++.so.6. The developer needs to take special care to include the Visual C++ run-time .dlls: Python 3.5+ uses Visual Studio 2015 run-time, which has been renamed into “Universal CRT“ and has become part of Windows 10. For Windows Vista through Windows 8.1 there are Windows Update packages, which may or may not be installed in the target-system. So you have the following options:\n• None Build on Windows 7 which has been reported to work.\n• None Include one of the VCRedist packages (the redistributable package files) into your application’s installer. This is Microsoft’s recommended way, see “Distributing Software that uses the Universal CRT“ in the above-mentioned link, numbers 2 and 3.\n• None Install the Windows Software Development Kit (SDK) for Windows 10 and expand the -file to include the required DLLs, see “Distributing Software that uses the Universal CRT“ in the above-mentioned link, number 6. If you think, PyInstaller should do this by itself, please help improving PyInstaller. On macOS, system components from one version of the OS are usually compatible with later versions, but they may not work with earlier versions. While PyInstaller does not collect system components of the OS, the collected 3rd party binaries (e.g., python extension modules) are built against specific version of the OS libraries, and may or may not support older OS versions. As such, the only way to ensure that your frozen application supports an older version of the OS is to freeze it on the oldest version of the OS that you wish to support. This applies especially when building with Homebrew python, as its binaries usually explicitly target the running OS. For example, to ensure compatibility with “Mojave” (10.14) and later versions, you should set up a full environment (i.e., install python, PyInstaller, your application’s code, and all its dependencies) in a copy of macOS 10.14, using a virtual machine if necessary. Then use PyInstaller to freeze your application in that environment; the generated frozen application should be compatible with that and later versions of macOS. This section is largely obsolete, as support for 32-bit application was removed in macOS 10.15 Catalina (for 64-bit multi-arch support on modern versions of macOS, see here). However, PyInstaller still supports building 32-bit bootloader, and 32-bit/64-bit Python installers are still available from python.org for (some) versions of Python 3.7 which PyInstaller dropped support for in v6.0. Older versions of macOS supported both 32-bit and 64-bit executables. PyInstaller builds an app using the the word-length of the Python used to execute it. That will typically be a 64-bit version of Python, resulting in a 64-bit executable. To create a 32-bit executable, run PyInstaller under a 32-bit Python. To verify that the installed python version supports execution in either 64- or 32-bit mode, use the command on the Python executable: $ file /usr/local/bin/python3 /usr/local/bin/python3: Mach-O universal binary with 2 architectures /usr/local/bin/python3 (for architecture i386): Mach-O executable i386 /usr/local/bin/python3 (for architecture x86_64): Mach-O 64-bit executable x86_64 The OS chooses which architecture to run, and typically defaults to 64-bit. You can force the use of either architecture by name using the command: $ /usr/local/bin/python3 Python 3.7.6 (v3.7.6:43364a7ae0, Dec 18 2019, 14:12:53) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import sys; sys.maxsize 9223372036854775807 $ arch -i386 /usr/local/bin/python3 Python 3.7.6 (v3.7.6:43364a7ae0, Dec 18 2019, 14:12:53) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import sys; sys.maxsize 2147483647 PyInstaller does not provide pre-built 32-bit bootloaders for macOS anymore. In order to use PyInstaller with 32-bit python, you need to build the bootloader yourself, using an XCode version that still supports compiling 32-bit. Depending on the compiler/toolchain, you may also need to explicitly pass to the command. When user double-clicks a document of a type that is registered with your application, or when a user drags a document and drops it on your application’s icon, macOS launches your application and provides the name(s) of the opened document(s) in the form of an OpenDocument AppleEvent. These events are typically handled via installed event handlers in your application (e.g., using API via , or using facilities provided by UI toolkits, such as or ). Alternatively, PyInstaller also supports conversion of open document/URL events into arguments that are appended to . This applies only to events received during application launch, i.e., before your frozen code is started. To handle events that are dispatched while your application is already running, you need to set up corresponding event handlers. For details, see this section. Depending on whether Python was build as a 32-bit or a 64-bit executable you may need to set or unset the environment variable . To determine the size the following command can be used: When the answer is (as above) Python was build as a 32-bit executable. When working with a 32-bit Python executable proceed as follows: When working with a 64-bit Python executable proceed as follows: Under Cygwin, the PyInstaller’s bootloader executable (and therefore the frozen application’s executable) ends up being dynamically linked against the . As noted under Q 6.14 of the Cygwin’s FAQ, the Cygwin library cannot be statically linked into an executable in order to obtain an independent, self-contained executable. This means that at run-time, the needs to be available to the frozen application’s executable for it to be able to launch. Depending on the deployment scenario, this means that it needs to be either available in the environment (i.e., the environment’s search path) or a copy of the DLL needs to be available next to the executable. On the other hand, Cygwin does not permit more than one copy of ; or rather, it requires multiple copies of the DLL to be strictly separated, as each instance constitutes its own Cygwin installation/environment (see Q 4.20 of the Cygwin FAQ). Trying to run an executable with an adjacent copy of the DLL from an existing Cygwin environment will likely result in the application crashing. In practice, this means that if you want to create a frozen application that will run in an existing Cygwin environment, the application should not bundle a copy of . On the other hand, if you want to create a frozen application that will run outside of a Cygwin environment (i.e., a “stand-alone” application that runs directly under Windows), the application will require a copy of – and that copy needs to be placed next to the program’s executable, regardless of whether or build mode is used. As PyInstaller cannot guess the deployment mode that you are pursuing, it makes no attempt to collect . So if you want your application to run outside of an externally-provided Cygwin environment, you need to place a copy of next to the program’s executable and distribute them together. If you plan to create a “stand-alone” Cygwin-based frozen application (i.e., distribute along with the executable), you will likely want to build the bootloader with statically linked library, in order to avoid a run-time dependency on . You can do so by passing option to when manually building the bootloader before installing PyInstaller from source, or by adding the option to environment variable if installing directly via . For details, see Building the Bootloader."
    },
    {
        "link": "https://reddit.com/r/learnpython/comments/103jd0z/how_do_i_package_my_python_code_into_an",
        "document": "Hiya thanks for reading! I followed a tutorial and built a tiny game with pygame. I am trying to wrap it up in a single executable file I can send to a friend, such that they won't have to install anything to run it. I have unsuccessfully used p2exe and pyinstaller. Is there a standard way to package python applications? I can share my code or the tutorials/links I am looking at if that is desirable. In gratitude, Prathmun"
    },
    {
        "link": "https://medium.com/@moraneus/crafting-a-standalone-executable-with-pyinstaller-f9a99ea24432",
        "document": "Creating an executable from a Python script can significantly ease the distribution and execution process, making your application more accessible to users without Python installed. PyInstaller is a popular tool that simplifies this process by packaging Python scripts into standalone executables for Windows, Linux, and macOS. Here’s a comprehensive guide to using PyInstaller to create an executable from a Python script.\n\nYou’ve developed a great Python script, and now you want to share it with the world. However, not everyone has Python installed, and figuring out how to run your script can be challenging for them. That’s where PyInstaller comes in handy. It’s a tool that takes your script, bundles all its dependencies, and creates a single executable file. This executable can be run with a simple double-click, without requiring Python to be installed. It’s an excellent way to make your Python creations accessible to a broader audience.\n\nBefore using PyInstaller, ensure that Python is installed on your computer (version 3.5 or later). Once Python is set up, installing PyInstaller is straightforward. Open your command line tool (Terminal on macOS and Linux, Command Prompt on Windows) and run the following command:\n\nBy following these simplified steps, you can easily create an executable version of your Python script using PyInstaller.\n\n1. Prepare Your Script: Before anything else, make sure your script runs smoothly in your Python environment. This means checking for and fixing any bugs or issues. It’s crucial to have your script in tip-top shape before you transform it into an executable, to ensure it behaves as expected when others use it.\n\n2. Navigate to Your Script Directory: Open your command line or terminal. You’ll need to move into the directory where your Python script is saved. If you’re not familiar with command line navigation, you can use the command followed by the path to your script's folder to get there.\n\n3. Run PyInstaller: Now, it’s time to invoke PyInstaller to do its magic. Type the command below, making sure to replace with the actual name of your Python script:\n\nThe option is what tells PyInstaller to pack everything your script needs into one neat executable file. Without this option, PyInstaller would instead create a folder filled with your executable and any necessary support files, which can be a bit messier to distribute.\n\n4. Locate Your Executable: Once PyInstaller has done its job, it’s time to grab your newly created executable. You’ll find it waiting in the folder, which is located inside the same directory as your script. This file is now a standalone version of your Python script, ready to be shared and run on any compatible system, no Python installation required.\n\nLet’s improve the guide by providing Python script examples corresponding to each shell command used for creating an executable with PyInstaller. This approach will help clarify how each command applies to specific script scenarios, ranging from simple scripts to those with external data, custom icons, and even GUI applications.\n\nPerhaps your script, , relies on external files for its wisdom. PyInstaller allows you to include these essential companions.\n\nWhen PyInstaller compiles your Python script into an executable, the file structure within the executable differs from your original development environment. Consequently, direct file paths (like ‘data/data_file.txt’ in your script) often fail to resolve correctly.\n\nTo address this, you need to modify your script to dynamically locate the data file at runtime, regardless of whether it’s being run as a script or as a compiled executable. PyInstaller sets a attribute in the module for this purpose. This attribute contains the path to the temporary folder that PyInstaller uses to extract your bundled files when the executable runs.\n\nThis function checks if your script is running in a bundled context by looking for . If it exists, it means your script is running inside a PyInstaller bundle, and it adjusts the path accordingly. Otherwise, it assumes the script is running in a development environment and uses the standard path.\n\nThis setup ensures that your executable can correctly locate and access , preventing the you've encountered.\n\nIn this command, tells PyInstaller to take from the directory and place it in the directory of the bundled application.\n\nThe same happens here. This ensures your script and its data files remain inseparable, no matter where they go.\n\nNotice the use of a colon ( ) as the separator in the Linux command instead of a semicolon ( ), which is used in Windows.\n\nSimilar to adding data files, you can include binary dependencies not automatically detected by PyInstaller using the option. This is particularly useful for including shared libraries and other binary resources. Do not forget to use the function as mentioned in the section.\n\nLet’s say your application uses a specific dynamic link library (DLL) that PyInstaller does not automatically include. You can manually add this file using the option. For example, if you have a library called located in a folder named next to your script, you would include it like this:\n\nIn this command, tells PyInstaller to take from the directory and place it in the root directory of the bundled application ( signifies the root of your application's distribution folder).\n\nFor Linux, if you’re including a shared library ( file), the process is similar. Assume you have a shared library called in a directory. You would add it to your PyInstaller command like this:\n\nHere, instructs PyInstaller to include from the directory into the root of the executable folder.\n\nYour script, now an application, deserves to stand out. A custom icon, perhaps? Consider , an application that aspires to be recognized.\n\nImagine you’ve developed a Python script that performs flawlessly in your development environment, but when bundled into an executable, it behaves unexpectedly. Such scenarios are where PyInstaller’s flag becomes invaluable, acting as your flashlight in the murky depths of executable behavior.\n\nConsider a Python script, , which reads from a configuration file and logs messages based on that configuration. However, when converted into an executable, it mysteriously fails to read the configuration properly.\n\nIn this script, everything seems straightforward, but the executable version doesn’t log messages as expected.\n\nTo peel back the layers and see what’s happening under the hood, you would use the flag with PyInstaller. This flag instructs PyInstaller to provide verbose output during both the packaging process and the runtime of the executable, offering insights into where things might be going awry.\n\nBy running the executable generated with this command, you can observe detailed logs that may indicate why the configuration file isn’t being read correctly. Perhaps the file path resolution behaves differently in the bundled environment, or there’s an issue with the way the executable accesses external files.\n\nFor those scripts that paint windows and buttons, like , crafted with the elegance of Tkinter. This example uses Tkinter for a basic GUI, so if you want to test this example, make sure you have Tkinter installed.\n\nFor the architects seeking to construct their executable with precision, the file is your blueprint. This file, born from your first PyInstaller command, outlines the structure of your executable's package. Editing this file allows for meticulous customizations, from including data files in specific folders to setting that perfect icon that speaks your app's essence.\n\nFirst, you need to generate a file for your project. If you haven't done this already, run PyInstaller with your script:\n\nThis command creates a file named after your script (e.g., ) in the same directory.\n\nTo edit the file you need to open the file in a text editor. Here are some of the key areas you might customize:\n• pathex: Specifies additional paths for PyInstaller to search for Python modules and libraries during the compilation process, not at runtime. It’s about telling PyInstaller where to look to find all the Python code and native libraries your script imports. Use if PyInstaller is not finding some of the Python modules or native libraries during the build process.\n• binaries: A list of non-Python files needed by the application, such as shared libraries and other binaries.\n• datas: Specifies additional data files to include in the bundle. Each tuple in the list contains the file’s source and the destination path relative to the app’s root.\n• hiddenimports: Lists imports that PyInstaller cannot detect automatically, ensuring these modules are included in the executable.\n• hookspath: Additional paths where PyInstaller should look for hooks. Hooks can tell PyInstaller about hidden imports and other details about specific packages.\n• runtime_hooks: Scripts that are run at runtime before any other code or module is imported. Useful for setting environment variables or patching the module.\n\nHere’s an example modification that includes additional data files and sets a custom icon for a GUI application:\n\nIn this example, includes all files from and places them in a folder named within the application. The option for the function sets a custom icon for the executable.\n\nAfter editing the file, run PyInstaller with the file to rebuild your application:\n\nBy editing the file, developers can fine-tune how PyInstaller packages their Python application, from including data files and binaries to specifying custom icons and handling complex dependencies. This level of customization ensures that the standalone executable meets the specific requirements and behaviors of your application.\n\nPyInstaller is a versatile tool that can transform your Python scripts into standalone executables with ease. Whether you’re a beginner looking to distribute your first Python application or an advanced user needing to package complex projects, PyInstaller offers a range of options to suit your needs. Remember to leverage the PyInstaller documentation for in-depth guidance on its vast array of features.\n\nIf you enjoyed this article and found it valuable, please consider giving it a clap to show your support. Feel free to explore my other articles, where I cover a wide range of topics related to Python programming and others. By following me, you’ll stay updated on my latest content and insights. I look forward to sharing more knowledge and connecting with you through future articles. Until then, keep coding, keep learning, and most importantly, enjoy the journey!"
    }
]