[
    {
        "link": "https://docs.python.org/3/tutorial/datastructures.html",
        "document": "This chapter describes some things you’ve learned about already in more detail, and adds some new things as well.\n\nThe list data type has some more methods. Here are all of the methods of list objects: Add an item to the end of the list. Similar to . Extend the list by appending all the items from the iterable. Similar to . Insert an item at a given position. The first argument is the index of the element before which to insert, so inserts at the front of the list, and is equivalent to . Remove the first item from the list whose value is equal to x. It raises a if there is no such item. Remove the item at the given position in the list, and return it. If no index is specified, removes and returns the last item in the list. It raises an if the list is empty or the index is outside the list range. Remove all items from the list. Similar to . Return zero-based index in the list of the first item whose value is equal to x. Raises a if there is no such item. The optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument. Return the number of times x appears in the list. Sort the items of the list in place (the arguments can be used for sort customization, see for their explanation). Reverse the elements of the list in place. Return a shallow copy of the list. Similar to . An example that uses most of the list methods: You might have noticed that methods like , or that only modify the list have no return value printed – they return the default . This is a design principle for all mutable data structures in Python. Another thing you might notice is that not all data can be sorted or compared. For instance, doesn’t sort because integers can’t be compared to strings and can’t be compared to other types. Also, there are some types that don’t have a defined ordering relation. For example, isn’t a valid comparison. The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (“last-in, first-out”). To add an item to the top of the stack, use . To retrieve an item from the top of the stack, use without an explicit index. For example: It is also possible to use a list as a queue, where the first element added is the first element retrieved (“first-in, first-out”); however, lists are not efficient for this purpose. While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one). To implement a queue, use which was designed to have fast appends and pops from both ends. For example: # The first to arrive now leaves # The second to arrive now leaves List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition. For example, assume we want to create a list of squares, like: Note that this creates (or overwrites) a variable named that still exists after the loop completes. We can calculate the list of squares without any side effects using: which is more concise and readable. A list comprehension consists of brackets containing an expression followed by a clause, then zero or more or clauses. The result will be a new list resulting from evaluating the expression in the context of the and clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal: Note how the order of the and statements is the same in both these snippets. If the expression is a tuple (e.g. the in the previous example), it must be parenthesized. # create a new list with the values doubled # apply a function to all the elements # the tuple must be parenthesized, otherwise an error is raised File , line : did you forget parentheses around the comprehension target? # flatten a list using a listcomp with two 'for' List comprehensions can contain complex expressions and nested functions: The initial expression in a list comprehension can be any arbitrary expression, including another list comprehension. Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4: The following list comprehension will transpose rows and columns: As we saw in the previous section, the inner list comprehension is evaluated in the context of the that follows it, so this example is equivalent to: which, in turn, is the same as: # the following 3 lines implement the nested listcomp In the real world, you should prefer built-in functions to complex flow statements. The function would do a great job for this use case: See Unpacking Argument Lists for details on the asterisk in this line.\n\nWe saw that lists and strings have many common properties, such as indexing and slicing operations. They are two examples of sequence data types (see Sequence Types — list, tuple, range). Since Python is an evolving language, other sequence data types may be added. There is also another standard sequence data type: the tuple. A tuple consists of a number of values separated by commas, for instance: File , line , in : # but they can contain mutable objects: As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression). It is not possible to assign to the individual items of a tuple, however it is possible to create tuples which contain mutable objects, such as lists. Though tuples may seem similar to lists, they are often used in different situations and for different purposes. Tuples are immutable, and usually contain a heterogeneous sequence of elements that are accessed via unpacking (see later in this section) or indexing (or even by attribute in the case of ). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list. A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective. For example: The statement is an example of tuple packing: the values , and are packed together in a tuple. The reverse operation is also possible: This is called, appropriately enough, sequence unpacking and works for any sequence on the right-hand side. Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence. Note that multiple assignment is really just a combination of tuple packing and sequence unpacking.\n\nPython also includes a data type for sets. A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference. Curly braces or the function can be used to create sets. Note: to create an empty set you have to use , not ; the latter creates an empty dictionary, a data structure that we discuss in the next section. Here is a brief demonstration: # show that duplicates have been removed # Demonstrate set operations on unique letters from two words # letters in a but not in b # letters in a or b or both # letters in both a and b # letters in a or b but not both Similarly to list comprehensions, set comprehensions are also supported:\n\nAnother useful data type built into Python is the dictionary (see Mapping Types — dict). Dictionaries are sometimes found in other languages as “associative memories” or “associative arrays”. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can’t use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like and . It is best to think of a dictionary as a set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: . Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output. The main operations on a dictionary are storing a value with some key and extracting the value given the key. It is also possible to delete a key:value pair with . If you store using a key that is already in use, the old value associated with that key is forgotten. It is an error to extract a value using a non-existent key. Performing on a dictionary returns a list of all the keys used in the dictionary, in insertion order (if you want it sorted, just use instead). To check whether a single key is in the dictionary, use the keyword. Here is a small example using a dictionary: The constructor builds dictionaries directly from sequences of key-value pairs: In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions: When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:\n\nWhen looping through dictionaries, the key and corresponding value can be retrieved at the same time using the method. When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the function. To loop over two or more sequences at the same time, the entries can be paired with the function. What is your name? It is lancelot. What is your quest? It is the holy grail. What is your favorite color? It is blue. To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the function. To loop over a sequence in sorted order, use the function which returns a new sorted list while leaving the source unaltered. Using on a sequence eliminates duplicate elements. The use of in combination with over a sequence is an idiomatic way to loop over unique elements of the sequence in sorted order. It is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safer to create a new list instead.\n\nThe conditions used in and statements can contain any operators, not just comparisons. The comparison operators and are membership tests that determine whether a value is in (or not in) a container. The operators and compare whether two objects are really the same object. All comparison operators have the same priority, which is lower than that of all numerical operators. Comparisons can be chained. For example, tests whether is less than and moreover equals . Comparisons may be combined using the Boolean operators and , and the outcome of a comparison (or of any other Boolean expression) may be negated with . These have lower priorities than comparison operators; between them, has the highest priority and the lowest, so that A and not B or C is equivalent to (A and (not B)) or C . As always, parentheses can be used to express the desired composition. The Boolean operators and are so-called short-circuit operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined. For example, if and are true but is false, A and B and C does not evaluate the expression . When used as a general value and not as a Boolean, the return value of a short-circuit operator is the last evaluated argument. It is possible to assign the result of a comparison or other Boolean expression to a variable. For example, Note that in Python, unlike C, assignment inside expressions must be done explicitly with the walrus operator . This avoids a common class of problems encountered in C programs: typing in an expression when was intended.\n\nSequence objects typically may be compared to other objects with the same sequence type. The comparison uses lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively. If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one. Lexicographical ordering for strings uses the Unicode code point number to order individual characters. Some examples of comparisons between sequences of the same type: Note that comparing objects of different types with or is legal provided that the objects have appropriate comparison methods. For example, mixed numeric types are compared according to their numeric value, so 0 equals 0.0, etc. Otherwise, rather than providing an arbitrary ordering, the interpreter will raise a exception."
    },
    {
        "link": "https://docs.python.org/3/genindex-I.html",
        "document": ""
    },
    {
        "link": "https://docs.python.org/3/library/functions.html",
        "document": "The Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order.\n\nOpen file and return a corresponding file object. If the file cannot be opened, an is raised. See Reading and Writing Files for more examples of how to use this function. file is a path-like object giving the pathname (absolute or relative to the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given, it is closed when the returned I/O object is closed unless closefd is set to .) mode is an optional string that specifies the mode in which the file is opened. It defaults to which means open for reading in text mode. Other common values are for writing (truncating the file if it already exists), for exclusive creation, and for appending (which on some Unix systems, means that all writes append to the end of the file regardless of the current seek position). In text mode, if encoding is not specified the encoding used is platform-dependent: is called to get the current locale encoding. (For reading and writing raw bytes use binary mode and leave encoding unspecified.) The available modes are: open for writing, truncating the file first open for exclusive creation, failing if the file already exists open for writing, appending to the end of file if it exists The default mode is (open for reading text, a synonym of ). Modes and open and truncate the file. Modes and open the file with no truncation. As mentioned in the Overview, Python distinguishes between binary and text I/O. Files opened in binary mode (including in the mode argument) return contents as objects without any decoding. In text mode (the default, or when is included in the mode argument), the contents of the file are returned as , the bytes having been first decoded using a platform-dependent encoding or using the specified encoding if given. Python doesn’t depend on the underlying operating system’s notion of text files; all the processing is done by Python itself, and is therefore platform-independent. buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable when writing in text mode), and an integer > 1 to indicate the size in bytes of a fixed-size chunk buffer. Note that specifying a buffer size this way applies for binary buffered I/O, but (i.e., files opened with ) would have another buffering. To disable buffering in , consider using the flag for . When no buffering argument is given, the default buffering policy works as follows:\n• None Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device’s “block size” and falling back on . On many systems, the buffer will typically be 4096 or 8192 bytes long.\n• None “Interactive” text files (files for which returns ) use line buffering. Other text files use the policy described above for binary files. encoding is the name of the encoding used to decode or encode the file. This should only be used in text mode. The default encoding is platform dependent (whatever returns), but any text encoding supported by Python can be used. See the module for the list of supported encodings. errors is an optional string that specifies how encoding and decoding errors are to be handled—this cannot be used in binary mode. A variety of standard error handlers are available (listed under Error Handlers), though any error handling name that has been registered with is also valid. The standard names include:\n• None to raise a exception if there is an encoding error. The default value of has the same effect.\n• None ignores errors. Note that ignoring encoding errors can lead to data loss.\n• None causes a replacement marker (such as ) to be inserted where there is malformed data.\n• None will represent any incorrect bytes as low surrogate code units ranging from U+DC80 to U+DCFF. These surrogate code units will then be turned back into the same bytes when the error handler is used when writing data. This is useful for processing files in an unknown encoding.\n• None is only supported when writing to a file. Characters not supported by the encoding are replaced with the appropriate XML character reference .\n• None (also only supported when writing) replaces unsupported characters with escape sequences. newline determines how to parse newline characters from the stream. It can be , , , , and . It works as follows:\n• None When reading input from the stream, if newline is , universal newlines mode is enabled. Lines in the input can end in , , or , and these are translated into before being returned to the caller. If it is , universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.\n• None When writing output to the stream, if newline is , any characters written are translated to the system default line separator, . If newline is or , no translation takes place. If newline is any of the other legal values, any characters written are translated to the given string. If closefd is and a file descriptor rather than a filename was given, the underlying file descriptor will be kept open when the file is closed. If a filename is given closefd must be (the default); otherwise, an error will be raised. A custom opener can be used by passing a callable as opener. The underlying file descriptor for the file object is then obtained by calling opener with (file, flags). opener must return an open file descriptor (passing as opener results in functionality similar to passing ). The following example uses the dir_fd parameter of the function to open a file relative to a given directory: 'This will be written to somedir/spamspam.txt' The type of file object returned by the function depends on the mode. When is used to open a file in a text mode ( , , , , etc.), it returns a subclass of (specifically ). When used to open a file in a binary mode with buffering, the returned class is a subclass of . The exact class varies: in read binary mode, it returns an ; in write binary and append binary modes, it returns an , and in read/write mode, it returns an . When buffering is disabled, the raw stream, a subclass of , , is returned. See also the file handling modules, such as , (where is declared), , , , and . The and arguments may have been modified or inferred from the original call.\n• None used to be raised, it is now an alias of .\n• None is now raised if the file opened in exclusive creation mode ( ) already exists.\n• None The file is now non-inheritable.\n• None If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an exception (see PEP 475 for the rationale).\n• None On Windows, opening a console buffer may return a subclass of other than . Changed in version 3.11: The mode has been removed.\n\nReturn a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class. The object_or_type determines the method resolution order to be searched. The search starts from the class right after the type. For example, if of object_or_type is and the value of type is , then searches . The attribute of the class corresponding to object_or_type lists the method resolution search order used by both and . The attribute is dynamic and can change whenever the inheritance hierarchy is updated. If the second argument is omitted, the super object returned is unbound. If the second argument is an object, must be true. If the second argument is a type, must be true (this is useful for classmethods). When called directly within an ordinary method of a class, both arguments may be omitted (“zero-argument ”). In this case, type will be the enclosing class, and obj will be the first argument of the immediately enclosing function (typically ). (This means that zero-argument will not work as expected within nested functions, including generator expressions, which implicitly create nested functions.) There are two typical use cases for super. In a class hierarchy with single inheritance, super can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable. This use closely parallels the use of super in other programming languages. The second use case is to support cooperative multiple inheritance in a dynamic execution environment. This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance. This makes it possible to implement “diamond diagrams” where multiple base classes implement the same method. Good design dictates that such implementations have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime). For both use cases, a typical superclass call looks like this: # This does the same thing as: In addition to method lookups, also works for attribute lookups. One possible use case for this is calling descriptors in a parent or sibling class. Note that is implemented as part of the binding process for explicit dotted attribute lookups such as . It does so by implementing its own method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, is undefined for implicit lookups using statements or operators such as . Also note that, aside from the zero argument form, is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods. For practical suggestions on how to design cooperative classes using , see guide to using super()."
    },
    {
        "link": "https://geeksforgeeks.org/python-list-index",
        "document": "In this article, we are going to explore how to find the index of an element in a list and explore different scenarios while using the list index() method. Let’s take an example to find the index of an Item using the list index method.\n\nlist index() method searches for a given element from the start of the list and returns the position of the first occurrence.\n\nWe will cover different examples to find the index of element in list using Python and explore different scenarios while using list index() method, such as:\n\nWorking on the index() With Start and End Parameters\n\nIn this example, we find an element in list python, the index of an element of 4 in between the index at the 4th position and ending with the 8th position.\n\nWorking of the Index with the Element not Present in the List\n\nIn this example, we will see when using , it’s important to remember that if the element is not found in the list, Python will raise a . we can handle this error using a .\n• None Python Program to Accessing index and value in list\n• None Python | Ways to find indices of value in list\n\nWhat does the\n\nCan I specify a range to search within using the\n\nWhat happens if the index is out of range in Python?\n\nIf you try to access an index that is out of range in Python, it raises an with the message “list index out of range”. This happens because the index you’re trying to access does not exist within the list’s bounds."
    },
    {
        "link": "https://docs.python.org",
        "document": "What's new in Python 3.13?\n\n Or all \"What's new\" documents since Python 2.0\n\nTutorial\n\n Start here: a tour of Python's syntax and features\n\nPython setup and usage\n\n How to install, configure, and use Python"
    },
    {
        "link": "https://stackoverflow.com/questions/63490063/multiple-indexes-in-list-comprehension",
        "document": "I need to write a function that will return list of strings with even indices. I have a problem with finding a way to check indices inside list comprehension, I tried index() but it gives me the index of a first instance and the list is not composed of unique characters.\n\nThis is what I got so far:\n\nI was thinking about putting another argument inside index() since it makes it possible to start search from given index but there's no way ti increment it for every s. Any hint? Maybe there's some built in function I'm missing?"
    },
    {
        "link": "https://stackoverflow.com/questions/7688725/multiple-actions-in-list-comprehension-python",
        "document": "I would like to know how to perform multiple commands in a list comprehension.\n\nCan you give me an example for something simple like:\n\nso for a list of 4 length 4 I would have:\n\nDtrangely enough I didn't easily find it in the documentation. (If you can see an obvious reason why I didn't and can let me know how should I search for such stuff that would be even better).\n\nEDIT: OK, that was a very bad example according to comments. I am interested in creating a new from an old one but I feel that I need two commands to do that. (not a simple print, of course). For example. I have a list of lists, and I want to create a list that is a result of manipulation of the sublists."
    },
    {
        "link": "https://geeksforgeeks.org/python-list-comprehension",
        "document": "List comprehension is a way to create lists using a concise syntax. It allows us to generate a new list by applying an expression to each item in an existing iterable (such as a list or range). This helps us to write cleaner, more readable code compared to traditional looping techniques.\n\nFor example, if we have a list of integers and want to create a new list containing the square of each element, we can easily achieve this using list comprehension.\n• expression: The transformation or value to be included in the new list.\n• item: The current element taken from the iterable.\n• if condition (optional): A filtering condition that decides whether the current item should be included.\n\nThis syntax allows us to combine iteration, modification, and conditional filtering all in one line.\n\nThe main difference is that a for loop requires multiple lines to create a new list by iterating over items and manually adding each one. Whereas, list comprehension do the same task in a single line, this makes the code simpler and easier to read.\n\nExample: Let’s take an example, where we want to double each number of given list into a new list\n\nExplanation: Create an empty list ‘res‘ to store results and iterate over each element in list ‘a‘ and for each items in list ‘a‘, multiply it by 2 and append it to ‘res‘ using append() method.\n\nExplanation: In the above list comprehension, the iterable is a list ‘a’, and the expression is val * 2, which multiplies each value from the list by 2.\n\nList comprehensions can include conditional statements to filter or modify items based on specific criteria. These conditionals help us create customized lists quickly and making the code cleaner and more efficient.\n\nExample: Suppose we want to filter all even list from the given list.\n\nTo learn more about filtering conditions in list comprehensions, please refer to “Python List Comprehension Using If-Else“\n\nA simple example is creating a list of numbers from 0 to 9.\n\nList comprehension can also be used with nested loops. Here, we generate a list of coordinate pairs for a simple 3×3 grid.\n\nSuppose we have a list of lists and we want to convert it into a single list.\n\nExplanation: The line [val for row in mat for val in row] uses nested list comprehension to iterate through each row in mat. For each row, it iterates through each val in that row and collecting all values into a single list."
    },
    {
        "link": "https://learndatasci.com/solutions/python-list-comprehension",
        "document": "Using list comprehension instead of a loop, we've managed to pack four lines of code into one clean statement. In this article, we'll first look at the different ways to use list comprehensions to generate new lists. Then we'll see what the benefits of using list comprehensions are. Finally, we'll see how we can tackle multiple list comprehensions.\n\nA list comprehension works by translating values from one list into another by placing a statement inside a pair of brackets, formally called a generator expression. A generator is an iterable object, which yields a range of values. Let's consider the following example, where is our generator and is the yield.\n\nWhen working with lists in Python, you'll likely often find yourself in situations where you'll need to translate values from one list to another based on specific criteria. Generally, if you're working with small datasets, then using loops instead of list comprehensions isn't the end of the world. However, as the sizes of your datasets start to increase, you'll notice that working through lists one item at a time can take a long time. Let's generate a list of ten thousand random numbers, ranging in value from one to a million, and store this as . We can then use a loop and a list comprehension to generate a new list containing the values greater than half a million. Finally, using , we can compare the speed of the two approaches:\n\nThe list comprehension solution runs twice as fast, so not only does it use less code, but it's also much quicker. With that in mind, it's also worth noting that loops can be much more readable in certain situations, such as when using multiple list comprehensions. Ultimately, if you're in a position where multiple list comprehensions are required, it's up to you if you'd prefer to prioritize performance over readability.\n\nList comprehensions are an excellent tool for generating new lists based on your requirements. They're much faster than using a loop and have the added benefit of making your code look neat and professional. For situations where you're working with nested lists, multiple list comprehensions are also available to you. The concept of using comprehensions may seem a little complex at first, but once you've wrapped your head around them, you'll never look back!"
    },
    {
        "link": "https://treyhunner.com/2019/03/abusing-and-overusing-list-comprehensions-in-python",
        "document": "List comprehensions are one of my favorite features in Python. I love list comprehensions so much that I’ve written an article about them, done a talk about them, and held a 3 hour comprehensions tutorial at PyCon 2018.\n\nWhile I love list comprehensions, I’ve found that once new Pythonistas start to really appreciate comprehensions they tend to use them everywhere. Comprehensions are lovely, but they can easily be overused!\n\nThis article is all about cases when comprehensions aren’t the best tool for the job, at least in terms of readability. We’re going to walk through a number of cases where there’s a more readable alternative to comprehensions and we’ll also see some not-so-obvious cases where comprehensions aren’t needed at all.\n\nThis article isn’t meant to scare you off from comprehensions if you’re not already a fan; it’s meant to encourage moderation for those of us (myself included) who need it.\n\nNote: In this article, I’ll be using the term “comprehension” to refer to all forms of comprehensions (list, set, dict) as well as generator expressions. If you’re unfamiliar with comprehensions, I recommend reading this article or watching this talk (the talk dives into generator expressions a bit more deeply).\n\nCritics of list comprehensions often say they’re hard to read. And they’re right, many comprehensions are hard to read. Sometimes all a comprehension needs to be more readable is better spacing.\n\nTake the comprehension in this function:\n\nWe could make that comprehension more readable by adding some well-placed line breaks:\n\nLess code can mean more readable code, but not always. Whitespace is your friend, especially when you’re writing comprehensions.\n\nIn general, I prefer to write most of my comprehensions spaced out over multiple lines of code using the indentation style above. I do write one-line comprehensions sometimes, but I don’t default to them.\n\nSome loops technically can be written as comprehensions but they have so much logic in them they probably shouldn’t be.\n\nThis comprehension is equivalent to this loop:\n\nBoth the comprehension and the loop use three nested inline if statements (Python’s ternary operator).\n\nHere’s a more readable way to write this code, using an construct:\n\nJust because there is a way to write your code as a comprehension, that doesn’t mean that you should write your code as a comprehension.\n\nBe careful using any amount of complex logic in comprehensions, even a single inline if:\n\nIf you really prefer to use a comprehension in cases like this, at least give some thought to whether whitespace or parenthesis could make things more readable:\n\nAnd consider whether breaking some of your logic out into a separate function might improve readability as well (it may not in this somewhat silly example).\n\nWhether a separate function makes things more readable will depend on how important that operation is, how large it is, and how well the function name conveys the operation.\n\nSometimes you’ll encounter code that uses a comprehension syntax but breaks the spirit of what comprehensions are used for.\n\nFor example, this code looks like a comprehension:\n\nBut it doesn’t act like a comprehension. We’re using a comprehension for a purpose it wasn’t intended for.\n\nIf we execute this comprehension in the Python shell you’ll see what I mean:\n\nWe wanted to print out all the numbers from 1 to 10 and that’s what we did. But this comprehension statement also returned a list of values to us, which we promptly discarded.\n\nComprehensions build up lists: that’s what they’re for. We built up a list of the return values from the function and the function returns .\n\nBut we didn’t care about the list our comprehension built up: we only cared about its side effect.\n\nWe could have instead written that code like this:\n\nList comprehensions are for looping over an iterable and building up new lists, while loops are for looping over an iterable to do pretty much any operation you’d like.\n\nWhen I see a list comprehension in code I immediately assume that we’re building up a new list (because that’s what they’re for). If you use a comprehension for a purpose outside of building up a new list, it’ll confuse others who read your code.\n\nIf you don’t care about building up a new list, don’t use a comprehension.\n\nUsing comprehensions when a more specific tool exists\n\nFor many problems, a more specific tool makes more sense than a general purpose loop. But comprehensions aren’t always the best special-purpose tool for the job at hand.\n\nI have both seen and written quite a bit of code that looks like this:\n\nThat comprehension is sort of an identity comprehension. Its only purpose is to loop over the given iterable ( ) and create a list out of it.\n\nBut in Python, we have a more specialized tool for this task: the constructor. Python’s constructor can do all the looping and list creation work for us:\n\nComprehensions are a special-purpose tool for looping over an iterable to build up a new list while modifying each element along the way and/or filtering elements down. The constructor is a special-purpose tool for looping over an iterable to build up a new list, without changing anything at all.\n\nIf you don’t need to filter your elements down or map them into new elements while building up your new list, you don’t need a comprehension: you need the constructor.\n\nThis comprehension converts each of the tuples we get from looping over into lists:\n\nWe could use the constructor for that too:\n\nWhenever you see a comprehension like this:\n\nYou could write this instead:\n\nThe same applies for and comprehensions.\n\nThis is also something I’ve written quite a bit in the past:\n\nHere we’re looping over a list of two-item tuples and making a dictionary out of them.\n\nThis task is exactly what the constructor was made for:\n\nThe built-in and constructors aren’t the only comprehension-replacing tools. The standard library and third-party libraries also include tools that are sometimes better suited for your looping needs than a comprehension.\n\nHere’s a generator expression that sums up an iterable-of-iterables-of-numbers:\n\nAnd here’s the same thing using :\n\nWhen you should use a comprehension and when you should use the alternative isn’t always straightforward.\n\nI’m often torn on whether to use or a comprehension. I usually write my code both ways and then go with the one that seems clearer.\n\nReadability is fairly problem-specific with many programming constructs, comprehensions included.\n\nSometimes you’ll see comprehensions that shouldn’t be replaced by another construct but should instead be removed entirely, leaving only the iterable they loop over.\n\nHere we’re opening up a file of words (with one word per line), storing file in memory, and counting the number of times each occurs:\n\nWe’re using a generator expression here, but we don’t need to be. This works just as well:\n\nWe were looping over a list to convert it to a generator before passing it to the class. That was needless work! The class accepts any iterable: it doesn’t care whether they’re lists, generators, tuples, or something else.\n\nWe’re looping over , converting it to a list of , and then looping over just once. That conversion to a list was unnecessary.\n\nWe could just loop over directly instead:\n\nThere’s no reason to convert an iterable to a list if all we’re going to do is loop over it once.\n\nIn Python, we often care less about whether something is a list and more about whether it’s an iterable.\n\nBe careful not to create new iterables when you don’t need to: if you’re only going to loop over an iterable once, just use the iterable you already have.\n\nWhen would I use a comprehension?\n\nSo when would you actually use a comprehension?\n\nThe simple but imprecise answer is whenever you can write your code in the below comprehension copy-pasteable format and there isn’t another tool you’d rather use for shortening your code, you should consider using a list comprehension.\n\nThat loop can be rewritten as this comprehension:\n\nThe complex answer is whenever comprehensions make sense, you should consider them. That’s not really an answer, but there is no one answer to the question “when should I use a comprehension”?\n\nFor example here’s a loop which doesn’t really look like it could be rewritten using a comprehension:\n\nBut there is in fact another way to write this loop using a generator expression, if we know how to use the built-in function:\n\nI wrote a whole article on the and functions and how they pair so nicely with generator expressions. But and aren’t alone in their affinity for generator expressions.\n\nWe have a similar situation with this code:\n\nThere’s no there and no new iterable being built up. But if we create a generator of squares, we could pass them to the built-in function to get the same result:\n\nSo in addition to the “can I copy-paste my way from a loop to a comprehension” check, there’s another, fuzzier, check to consider: could your code be enhanced by a generator expression combined with an iterable-accepting function or class?\n\nAny function or class that accepts an iterable as an argument might be a good candidate for combining with a generator expression.\n\nList comprehensions can make your code more readable (if you don’t believe me, see the examples in my Comprehensible Comprehensions talk), but they can definitely be abused.\n\nList comprehensions are a special-purpose tool for solving a specific problem. The and constructors are even more special-purpose tools for solving even more specific problems.\n\nLoops are a more general purpose tool for times when you have a problem that doesn’t fit within the realm of comprehensions or another special-purpose looping tool.\n\nFunctions like , , and , and classes like and are iterable-accepting tools that pair very nicely with comprehensions and sometimes replace the need for comprehensions entirely.\n\nRemember that comprehensions are for a single purpose: creating a new iterable from an old iterable, while tweaking values slightly along the way and/or for filtering out values that don’t match a certain condition. Comprehensions are a lovely tool, but they’re not your only tool. Don’t forget the and constructors and always consider loops when your comprehensions get out of hand.\n\nThe best way to learn is through regular practice. Every week I send out carefully crafted Python exercises through my Python skill-building service, Python Morsels.\n\nIf you’d like to practice your comprehensions through one Python exercise right now, you can sign up for Python Morsels using the form below. After you sign up, I’ll immediately give you one exercise to practice your comprehension copy-pasting skills."
    }
]