[
    {
        "link": "https://github.com/adafruit/Adafruit_AM2320",
        "document": "This is a library for the Adafruit AM2320 Temperature & Humidity Unified Sensor\n\nAlso supports AM2320 chips (and maybe other compatible chips!)\n\nCheck out the links above for our tutorials and wiring diagrams. This chip uses I2C to communicate\n\nAdafruit invests time and resources providing this open source code, please support Adafruit and open-source hardware by purchasing products from Adafruit!\n\nWritten by Limor Fried/Ladyada for Adafruit Industries. MIT license, all text above must be included in any redistribution"
    },
    {
        "link": "https://learn.adafruit.com/adafruit-am2320-temperature-humidity-i2c-sensor/arduino-usage",
        "document": "Please sign in to include this guide in your list of favorites.\n\nYou will be redirected back to this guide once you sign in, and can then save this guide as one of your favorites."
    },
    {
        "link": "https://docs.arduino.cc/libraries/adafruit-am2320-sensor-library",
        "document": ""
    },
    {
        "link": "https://learn.carobot.ca/guide/Temperature-Sensor",
        "document": "Using the AM2320 Temperature and Humidity Sensor with ESP-Wroom 32\n\nIn this tutorial, you will learn how to use an AM2320 temperature and humidity sensor with an ESP32 board. The AM2320 is a simple to use, high-performance sensor that can measure temperature and humidity over a long distance up to 20 meters. It has high accuracy and stability and can be used in various applications such as HVAC, dehumidifiers, weather stations, home appliances, etc. The sensor communicates with the ESP32 using either a single-wire or an I2C interface.\n\nTo follow this tutorial, you will need the following materials:\n\nThe wiring and setup of the AM2320 sensor and the ESP32 board depend on the communication mode you choose: single-wire or I2C. In this tutorial, we will use the I2C mode, which requires two resistors as pull-up for the SDA and SCL lines²³. The wiring diagram is shown below:\n\nBelow are the pinouts for each module:\n\nThe AM2320 temperature sensor is connected to an ESP-WROOM-32 microcontroller using the following pin configuration:\n\nTo set up the Arduino IDE for the ESP32 board, you need to follow these steps:\n\nIn order to interact with the ESP Wroom 32 Using the Arduino IDE, you must install the following board:\n\nClick here for instructions how to install boards within the arduino application.\n\nThe libraries that are used are:\n\nClick here for instructions to install libraries within the arudino application, and here to add library through ZIP file.\n\nThe full code for reading temperature and humidity from the AM2320 sensor and printing them to the serial monitor is shown below. You can copy and paste it into your Arduino IDE and upload it to your ESP32 board.\n\nLet's go through the logic of the code line by line:\n• These lines include the necessary libraries for using the Adafruit sensor and AM2320 temperature and humidity sensor.\n• Here, an instance of the Adafruit_AM2320 class is created and named am2320. This object will be used to interact with the sensor.\n• The setup() function is called once at the start of the program. In this function:\n• Serial.begin(9600); initializes the serial communication with a baud rate of 9600 bits per second.\n• The while loop is used to wait until the serial port is opened before proceeding.\n• The loop() function is called repeatedly after the setup() function. In this function:\n• Serial.print(\"Temp: \"); and Serial.print(\"Humidity: \"); are used to print descriptive labels for the temperature and humidity readings.\n• Serial.print(am2320.readTemperature()); and Serial.print(am2320.readHumidity()); retrieve the temperature and humidity readings from the AM2320 sensor, respectively, and print them using the Serial.print() function.\n• Serial.print(\" C\"); and Serial.println(\" %\"); are used to print the units of temperature (Celsius) and humidity (%), respectively.\n• delay(2000); pauses the program for 2000 milliseconds (2 seconds) before repeating the loop.\n• Make sure the AM2320 sensor is properly connected to your Arduino board. Double-check the wiring to ensure the correct pins are connected between the sensor and the Arduino.\n• Ensure that your Arduino board has the necessary I2C communication capabilities. Most Arduino boards have built-in I2C support, but if you're using a different board or module, make sure it supports I2C communication.\n• Provide stable and regulated power supply to the Arduino board and the sensor. Fluctuations in power can affect the sensor readings and the stability of the communication.\n• Confirm that you have installed the required libraries, namely and , in your Arduino IDE. You can install them by going to \"Sketch\" -> \"Include Library\" -> \"Manage Libraries\" and searching for the library names.\n• Check if you have the correct versions of the libraries installed. Incompatibilities between library versions can cause errors or unexpected behavior.\n• Before uploading the code to your Arduino board, ensure that the correct board and port are selected in the Arduino IDE under \"Tools\" -> \"Board\" and \"Tools\" -> \"Port,\" respectively.\n• If you encounter issues with the sensor readings or communication, consider adding additional debugging statements to the code to print intermediate values or error codes. This can help you identify the problem more effectively.\n• If you plan to use the code in a larger project, consider implementing error handling and recovery mechanisms in case of sensor failures or communication errors. This could involve retrying the sensor reading, implementing timeouts, or providing feedback to the user.\n\nIf everything works as expected, you should see something like this on your serial monitor :\n\nIn this guide, you learned how to use an AM2320 temperature and humidity sensor with an ESP32 board in I2C mode. You learned how to wire and set up the sensor and the board, how to write and upload code to read data from the sensor, how to explain the programming logic of the code, how to troubleshoot potential issues, and how to view the output on the serial monitor. You can use this knowledge to create your own projects that involve temperature and humidity sensing with ESP32"
    },
    {
        "link": "https://reference.arduino.cc/reference/en/libraries/adafruit-am2320-sensor-library",
        "document": "Find anything that can be improved? Suggest corrections and new documentation via GitHub.\n\nDoubts on how to use Github? Learn everything you need to know in this tutorial."
    },
    {
        "link": "https://learn.adafruit.com/adafruit-am2320-temperature-humidity-i2c-sensor/arduino-usage",
        "document": "Please sign in to include this guide in your list of favorites.\n\nYou will be redirected back to this guide once you sign in, and can then save this guide as one of your favorites."
    },
    {
        "link": "https://lastminuteengineers.com/am2320-temperature-humidity-sensor-arduino-tutorial",
        "document": "Want to keep a log of the climate in your greenhouse, build a humidor control system, or track temperature and humidity data for a weather station project? The AM2320 Temperature & Humidity Sensor may be the right choice for you!\n\nAM2320 sensor is factory-calibrated and requires few external components to work. So with just a few connections and some Arduino code, you can start measuring relative humidity and temperature right away.\n\nThe AM2320 is a low-cost, easy to use, fairly accurate, digital temperature & humidity sensor, from AOSONG. It looks like the popular DHT11/DHT22 temperature and humidity sensors, but unlike classic DHT sensors, it has an I2C interface!\n\nThe AM2320 sensor is capable of reading humidity over the full range of 0 to 100% RH with a typical accuracy of ±3% over the range of 20% to 80% RH (0.024% RH resolution).\n\nIt has a maximum temperature range of -40 to 80°C and a typical accuracy of ±0.5°C at 25°C (0.01°C resolution).\n\nThe AM2320 can output data at a maximum sampling rate of 0.5Hz i.e. one reading every two seconds.\n\nThe sensor itself uses 3.3V to 5.5V which makes it 3V or 5V compliant. So, you can use it with your favorite 3.3V or 5V microcontroller without worry.\n\nThe AM2320 consumes less than 0.95mA during measurements and less than 10µA during sleep mode. This low power consumption allow the implementation in battery driven devices such as handsets, wearables or smart watches.\n\nThe AM2320 is a I2C sensor, meaning it uses the two I2C data/clock wires available on most microcontrollers, and can share those pins with other I2C sensors as long as they don’t have an address collision.\n\nThe sensor has a fixed I2C address and is set to 0x5C . A multiplexer/Mux is required to communicate to multiple AM2320 sensors on a single bus.\n\nHere are the complete specifications:\n\nFor more details, please refer below datasheet.\n\nNow let’s have a look at the pinout.\n\nVDD is the power pin. Since the sensor uses 3.3 to 5.5VDC, give it the same power as the logic level of your microcontroller – e.g. for a 5V micro like Arduino, use 5V.\n\nSDA is the I2C data pin, requires a pullup of 2.2K – 10K to VDD.\n\nGND is the common ground for power and logic.\n\nSCL is the I2C clock pin, requires a pullup of 2.2K – 10K to VDD.\n\nWiring up a AM2320 to an Arduino\n\nAs it makes use of the I2C bus, connecting the AM2320 to an Arduino is pretty simple!\n\nThere are only four pins that need to be hooked up in order to start using the sensor. One for VCC, one for GND, and two data lines for I2C communication.\n\nConnect the SCL pin to the I2C clock pin and the SDA pin to the I2C data pin on your Arduino. Note that each Arduino Board has different I2C pins which should be connected accordingly. On the Arduino boards with the R3 layout, the SDA (data line) and SCL (clock line) are on the pin headers close to the AREF pin. They are also known as A5 (SCL) and A4 (SDA).\n\nThe AM2320 does not have internal pullup resistors for the I2C bus. So, you need to add them externally. Any value from 2.2K to 10K should work fine. The resistors go from VDD to SCL and SDA each.\n\nThe following illustration shows the wiring.\n\nTo get your sensor up and running, you will need to install the Adafruit AM2320 library. It is available from the Arduino library manager.\n\nTo install the library navigate to the Sketch > Include Library > Manage Libraries… Wait for Library Manager to download libraries index and update list of installed libraries.\n\nFilter your search by typing ‘am2320‘ and install the library.\n\nThe Adafruit_AM2320 library uses the Adafruit Sensor support backend. So, search the library manager for Adafruit Unified Sensor and install that too (you may have to scroll a bit)\n\nYou also need to install the Adafruit Bus IO helper library. It abstracts away I2C & SPI transactions and registers.\n\nBelow is a basic Arduino sketch. Go ahead and upload it to your Arduino. You will see the current temperature and humidity in your room!\n\nOnce your code is uploaded, open the serial terminal at 9600bps. You should see something like the output below. Try breathing on the sensor to see both humidity and temperature values change!\n\nThis is probably about as simple as a sketch can get. At the beginning, and libraries are included and an Adafruit_AM2320 object is created in the global space.\n\nIn the setup, we initialize the serial communication with PC and call the function to initialize the object.\n\nOnce the object is initialized, you can access object’s (am2320) methods using the dot operator.\n\nam2320.readTemperature() returns floating point (decimal + fractional) temperature reading in °C. You can convert to Fahrenheit by multiplying by 1.8 and adding 32.\n\nam2320.readHumidity() returns humidity reading, also as a floating point value between 0 and 100 (this reads % humidity)."
    },
    {
        "link": "https://makerguides.com/am2320-arduino-tutorial",
        "document": "In this tutorial, you will learn how to use the AM2320 digital temperature and humidity sensor with Arduino. I have included wiring diagrams and two code examples to get started!\n\nFor this tutorial, we will be using the Adafruit AM2320 sensor library. This library makes communicating with the sensor via I2C super easy. We will use this library in our first example to read temperature and humidity data from the AM2320 sensor and display them in the Serial Monitor.\n\nIn the second example, we extend this by adding a 16×2 character LCD. This will be also connected via the I2C bus and allows us to display the readings on the LCD. The complete project will look like this:\n\nIf you would like to learn more about other temperature sensors, see our other tutorials below:\n• The complete guide for DS18B20 digital temperature sensors with Arduino\n• How to use DHT11 and DHT22 sensors with Arduino\n\nBelow you will find the parts required for this project. Apart from an Arduino you will need a breadboard, some wires and the AM2320 sensor, of course. For this tutorial, I am going to use the classic Arduino Uno (REV3) but any other Arduino (or ESP32/ESP8266), will be fine as well.\n\nI also included a 16×2 LCD display in the list of required parts, which you will need for the second application example of this tutorial. If you are happy displaying temperature and humidity on the Serial Monitor only, you would not need this.\n\nThe AM2320 is a low-cost digital temperature and humidity sensor made by ASAIR. This sensor is similar to the popular DHT11/DHT22 sensors but features an I2C interface instead of the single bus communication protocol that many of the other DHTxx sensors use. You can find our tutorial for the DHT11 and DHT22 here:\n• How to use DHT11 and DHT22 sensors with Arduino\n\nThe sensor consists of a capacitive moisture sensing element and a high precision integrated temperature measuring element connected to a microprocessor. The temperature measuring range of the sensor is -40 to 80 degrees Celsius, with a stated accuracy of ± 0.5 °C.\n\nWhen you look at the datasheet of the sensor, you will see that it measures the relative humidity (RH) of the air and not the absolute humidity. But what’s the difference? The absolute humidity is the amount of water vapor in the air (expressed in g/m³), regardless of temperature. The relative humidity does take temperature into account.\n\nThe relative humidity is the ratio between the actual amount of water vapor present in the air and the maximum amount of water vapor that the air can hold at a given temperature.\n\nWarm air can hold more water than cold air. This means that for the same amount of water vapor in the air, the relative humidity in cool air will be higher than that in warm air. At 100 percent relative humidity, the air is saturated and is at its dewpoint.\n\nThe pinout of the AM2320 sensor is as follows:\n\nNote that the default I2C address of the sensor is 0x5C and cannot be changed.\n\nThe following table gives you the most important features of the AM2320:\n\nFor more information, you can check out the datasheet here:\n\nConnecting the AM2320 to the Arduino is very easy as you can see in the diagram below.\n\nJust connect 5V (or 3.3V) of the Arduino to P1 (VDD) of the AM2320 and similarly Ground (GND) to GND. A4 goes to Pin 2 (SDA) and A5 is connected to Pin 4 (SCL) of the AM2320. The connections are also given in the table below\n\nIf you are not using an Arduino Uno, the SDA and SCL pins can be at a different location. Check the table below for more details.\n\nAn Arduino Uno with the R3 layout (1.0 pinout), also has the SDA (data line) and SCL (clock line) pin headers close to the AREF pin. The following diagram shows you an alternative circuit that connects the AM2320 to those SDA and SCL pins:\n\nYou will note, that there also two additional Pullup resistors with a value of 4.7KΩ on the SDA and SCL lines. In many cases, you will not need them, since the Arduino UNO has internal pullup resistors that are often sufficient. However, they are fairly high in value and if you encounter communication problems with an I2C device you should add your own. Especially, if you use longer cables.\n\nFor this tutorial, we will be using the the Adafruit AM2320 sensor library. To install the library, go to Tools > Manage Libraries in the Arduino IDE. The Library Manager will open.\n\nIn the LIBRARY MANAGER search for ‘Adafruit AM2320‘ and click INSTALL.\n\nDepending on the other libraries you already have installed, you may or may not see the following message. It tells you that you need to install furthers libraries needed by the AM2320 library. That is perfectly fine. Just click on INSTALL ALL.\n\nNow you have all the libraries installed that we need to run the code provided in the next section.\n\nCode to read Temperature and Humidity with AM2320\n\nThe following example code shows you how to read temperature and humidity from the AM2320 sensor and display the data in the Serial Monitor and the Serial Plotter. Have a quick look first, and then we will discuss the details of the code\n\nIn the first step we include the and the libraries.\n\nNext, we create a new instance of the class. In this case, I called it “ ” but you can pick any other name, as long as you adjust the following code accordingly\n\nIn the , we start the serial communication at a baud rate of 9600. Make sure that the Serial Monitor is also set to 9600. We also initialize the AM2320 sensor with .\n\nIn the loop section of the code, we read the temperature and humidity data from the AM2320 sensor with the functions and .\n\nNote that returns the temperature in Degree Celsius. We can easily convert it to Fahrenheit using the formula .\n\nLastly, we print the results in the Serial Monitor and add a delay between the readings. The minimum interval between readings is 2 seconds (see Datasheet), so we use a 2000 msec (=2 sec) delay between readings.\n\nAnd that’s it! We have a temperature and humidity reader. Now let’s try it.\n\nIf run this code and open the Serial Monitor you should see temperature and humidity readings similar to the the ones below. Make sure the baud rate is set to 9600 baud.\n\nIf you now open your Serial Plotter and blow on the AM2320 sensor you should see a spike in humidity and a slight rise in temperature, similar to the plot below:\n\nAdding an LCD to Display the Data\n\nIn this part I show you how to add an 16×2 character LCD to display the data. Luckily it is very simple.\n\nThe following diagram shows the complete wiring. The AM2320 is connected exactly the same as before. We add the LCD by connecting its power (VCC, GND) to the power rail and its SDA and SCL to the same SDA and SCL lines the AM2320 is connected to.\n\nSo, both the LCD and the AM2320 are connected via I2C to the Arduino. I2C is a serial bus that can enable up to 128 devices to communicate.\n\nThe devices on the bus are distinguished by their I2C address. The I2C address of the AM2320 is fixed at 0x5C. The I2C address of your LCD may vary, however. Typical addresses are 0x27 or 0x3F, and often printed on the back. If you are not sure you can run an I2C scanner to find out the address. Have a look at our tutorial Character I2C LCD with Arduino Tutorial.\n\nThe code to show data on the LCD is pretty simple. We are going to use the LiquidCrystal library by Frank de Brabander to control the LCD.\n\nIf you have not installed it yet, then you will need to installed the same way as you installed the AM2302 library. And if you need some help, have a look at our tutorial on How to use the MQ-7 Gas Sensor with an LCD display and Arduino, where we do exactly that with detailed steps.\n\nHave a quick look at the code first before we explain the details\n\nWe start by including the required libraries.\n\nTo use the AM2320 sensor and the LCD display, we need to include the necessary libraries. We include the “LiquidCrystal_I2C.h” library for the LCD display, the “Adafruit_Sensor.h” library for the sensor, and the “Adafruit_AM2320.h” library for the AM2320 sensor.\n\nWe first create two objects: one for the AM2320 sensor and one for the LCD display. We then initialize the sensor object as “sensor” and the LCD display object as “lcd”. To create the lcd object we need to pass the I2C address of the LCD display (0x3F) and the dimensions of the display (20 columns and 2 rows) to the “LiquidCrystal_I2C” constructor.\n\nIn the “setup()” function, we initialize the serial communication at a baud rate of 9600. We also call the “begin()” function on the sensor object to initialize the AM2320 sensor. Then, we call the “init()” function on the lcd object to initialize the LCD display. Finally, we turn on the backlight of the LCD display using the “backlight()” function.\n\nIn the “loop()” function, we read the temperature and humidity values from the sensor using the “readTemperature()” and “readHumidity()” functions respectively.\n\nAs before, we store the temperature in Celsius in the “tempC” variable and convert it to Fahrenheit by multiplying it by 1.8 and adding 32, storing the result in the “tempF” variable. Similarly, we store the humidity value in the “humidity” variable.\n\nWe clear the LCD display using the “clear()” function. Then, we set the cursor position to the first column of the first row using the “setCursor()” function and print “Temperature”. We set the cursor position to the twelfth column of the first row and print the temperature in Fahrenheit.\n\nNext, we set the cursor position to the first column of the second row and print “Humidity”. We set the cursor position to the twelfth column of the second row and print the humidity value.\n\nFinally, we add a delay of 2000 milliseconds (2 seconds) using the “delay()” function to allow time for the readings to be displayed before repeating the loop.\n\nAnd that’s it. Now you have a fully functional system to display temperature and humidity data on an LCD.\n\nIn this tutorial, I have shown you how to use the AM2320 temperature and humidity sensor with Arduino. I hope you found it useful and informative. If you did, please share it with a friend who also likes electronics and making things!\n\nHere are some frequently asked questions about using the AM2320 sensor to read temperature and humidity and displaying the data on a 16×2 LCD with Arduino.\n\nQ: What is the AM2320 sensor?\n\nA: The AM2320 is a digital temperature and humidity sensor that uses the I2C serial bus to communicate with microcontrollers like Arduino. It provides accurate readings of temperature and humidity, making it ideal for various applications such as weather monitoring, home automation, and greenhouse control.\n\nQ: What is I2C and how does it work?\n\nA: I2C (Inter-Integrated Circuit) is a serial communication protocol that allows multiple devices to communicate with each other using only two wires – SDA (data line) and SCL (clock line). It enables efficient communication between microcontrollers and sensors, minimizing the number of pins required for connection.\n\nMake sure you are using the correct I2C addresses of the connected devices in your code. Also make sure that SDA and SCL lines are not swapped.\n\nQ: How do I connect the AM2320 and LCD to Arduino via I2C?\n\nA: To connect the AM2320 and LCD to Arduino via I2C, you will need to make the following connections:\n• Connect the SDA pin of the AM2320 sensor to the SDA pin of the Arduino.\n• Connect the SCL pin of the AM2320 sensor to the SCL pin of the Arduino.\n• Connect the SDA pin of the LCD to the SDA pin of the Arduino.\n• Connect the SCL pin of the LCD to the SCL pin of the Arduino.\n\nQ: How do I read temperature and humidity via the AM2320 sensor?\n\nA: To read temperature and humidity via the AM2320 sensor, you need to initialize the sensor and then use the appropriate functions to retrieve the temperature and humidity values. The AM2320 library provides functions like to initialize the sensor and and to get the temperature and humidity readings respectively.\n\nQ: How do I display the data on a 16×2 LCD?\n\nA: To display the temperature and humidity data on a 16×2 LCD, you need to initialize the LCD and then use the LCD library functions to write the data on the LCD screen. The LiquidCrystal library provides functions like to initialize the LCD and to display the data on the LCD.\n\nQ: Are there any troubleshooting tips for using the AM2320 sensor and LCD?\n\nA: If you encounter any issues while using the AM2320 sensor and LCD, here are a few troubleshooting tips:\n• Double-check your connections to ensure they are properly wired.\n• Verify that you have installed the necessary libraries for the AM2320 sensor and LCD.\n• Make sure you have the correct I2C addresses for both the sensor and LCD.\n• Check for any conflicts with other devices using the I2C bus.\n• Test your code step by step to identify any potential errors.\n\nThese frequently asked questions should help you get started with using the AM2320 sensor to read temperature and humidity and displaying the data on a 16×2 LCD with Arduino. If you have any further questions, feel free to ask in the comments section below."
    },
    {
        "link": "https://learn.carobot.ca/guide/Temperature-Sensor",
        "document": "Using the AM2320 Temperature and Humidity Sensor with ESP-Wroom 32\n\nIn this tutorial, you will learn how to use an AM2320 temperature and humidity sensor with an ESP32 board. The AM2320 is a simple to use, high-performance sensor that can measure temperature and humidity over a long distance up to 20 meters. It has high accuracy and stability and can be used in various applications such as HVAC, dehumidifiers, weather stations, home appliances, etc. The sensor communicates with the ESP32 using either a single-wire or an I2C interface.\n\nTo follow this tutorial, you will need the following materials:\n\nThe wiring and setup of the AM2320 sensor and the ESP32 board depend on the communication mode you choose: single-wire or I2C. In this tutorial, we will use the I2C mode, which requires two resistors as pull-up for the SDA and SCL lines²³. The wiring diagram is shown below:\n\nBelow are the pinouts for each module:\n\nThe AM2320 temperature sensor is connected to an ESP-WROOM-32 microcontroller using the following pin configuration:\n\nTo set up the Arduino IDE for the ESP32 board, you need to follow these steps:\n\nIn order to interact with the ESP Wroom 32 Using the Arduino IDE, you must install the following board:\n\nClick here for instructions how to install boards within the arduino application.\n\nThe libraries that are used are:\n\nClick here for instructions to install libraries within the arudino application, and here to add library through ZIP file.\n\nThe full code for reading temperature and humidity from the AM2320 sensor and printing them to the serial monitor is shown below. You can copy and paste it into your Arduino IDE and upload it to your ESP32 board.\n\nLet's go through the logic of the code line by line:\n• These lines include the necessary libraries for using the Adafruit sensor and AM2320 temperature and humidity sensor.\n• Here, an instance of the Adafruit_AM2320 class is created and named am2320. This object will be used to interact with the sensor.\n• The setup() function is called once at the start of the program. In this function:\n• Serial.begin(9600); initializes the serial communication with a baud rate of 9600 bits per second.\n• The while loop is used to wait until the serial port is opened before proceeding.\n• The loop() function is called repeatedly after the setup() function. In this function:\n• Serial.print(\"Temp: \"); and Serial.print(\"Humidity: \"); are used to print descriptive labels for the temperature and humidity readings.\n• Serial.print(am2320.readTemperature()); and Serial.print(am2320.readHumidity()); retrieve the temperature and humidity readings from the AM2320 sensor, respectively, and print them using the Serial.print() function.\n• Serial.print(\" C\"); and Serial.println(\" %\"); are used to print the units of temperature (Celsius) and humidity (%), respectively.\n• delay(2000); pauses the program for 2000 milliseconds (2 seconds) before repeating the loop.\n• Make sure the AM2320 sensor is properly connected to your Arduino board. Double-check the wiring to ensure the correct pins are connected between the sensor and the Arduino.\n• Ensure that your Arduino board has the necessary I2C communication capabilities. Most Arduino boards have built-in I2C support, but if you're using a different board or module, make sure it supports I2C communication.\n• Provide stable and regulated power supply to the Arduino board and the sensor. Fluctuations in power can affect the sensor readings and the stability of the communication.\n• Confirm that you have installed the required libraries, namely and , in your Arduino IDE. You can install them by going to \"Sketch\" -> \"Include Library\" -> \"Manage Libraries\" and searching for the library names.\n• Check if you have the correct versions of the libraries installed. Incompatibilities between library versions can cause errors or unexpected behavior.\n• Before uploading the code to your Arduino board, ensure that the correct board and port are selected in the Arduino IDE under \"Tools\" -> \"Board\" and \"Tools\" -> \"Port,\" respectively.\n• If you encounter issues with the sensor readings or communication, consider adding additional debugging statements to the code to print intermediate values or error codes. This can help you identify the problem more effectively.\n• If you plan to use the code in a larger project, consider implementing error handling and recovery mechanisms in case of sensor failures or communication errors. This could involve retrying the sensor reading, implementing timeouts, or providing feedback to the user.\n\nIf everything works as expected, you should see something like this on your serial monitor :\n\nIn this guide, you learned how to use an AM2320 temperature and humidity sensor with an ESP32 board in I2C mode. You learned how to wire and set up the sensor and the board, how to write and upload code to read data from the sensor, how to explain the programming logic of the code, how to troubleshoot potential issues, and how to view the output on the serial monitor. You can use this knowledge to create your own projects that involve temperature and humidity sensing with ESP32"
    },
    {
        "link": "https://forum.dronebotworkshop.com/arduino/oled-display-and-am2320-adafruit-sensor",
        "document": "@noweare hi, thank you for your reply, ive opened that link and chose the second line of examples....after copying and pasting the code into a blank sketch I ran compile and it stopped at this line:\n\nand thenm gave an error saying \"stray @ in prgram\"\n\nhmm.......Ive written code for many examples previously but never used the @ symbol.\n\nperhaps I should copy the full page of code in here..\n\n// On an arduino MEGA 2560: 20(SDA), 21(SCL)\n\n// On an arduino LEONARDO: 2(SDA), 3(SCL), ...\n\n#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)\n\n#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32\n\nAdafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);\n\n#define NUMFLAKES 10 // Number of snowflakes in the animation example\n\n@@ -60,7 +61,7 @@ void setup() {\n\nSerial.begin(9600);\n\n// SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally\n\nif(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32\n\nif(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {\n\nSerial.println(F(\"SSD1306 allocation failed\"));\n\nfor(;;); // Don't proceed, loop forever\n\n}void setup() {\n\n// put your setup code here, to run once:\n\nvoid loop() {\n\n// put your main code here, to run repeatedly:\n\noh, Ive just read down the page you linked to, and come across this;\n\nPreferred installation method is to use the Arduino IDE Library Manager. To download the source from Github instead, click \"Clone or download\" above, then \"Download ZIP.\" After uncompressing, rename the resulting folder Adafruit_SSD1306. Check that the Adafruit_SSD1306 folder contains Adafruit_SSD1306.cpp and Adafruit_SSD1306.h.\n\nIve not been doing that, but just copying and pasting, so i will download the zip file instead and try follow the instructions..\n\nyes I downloaded the zipfile file but it hasnt helped me...\n\nas a simple step ive selected the 128x32 examples file for the 1306 and it runs fine showing the animation.\n\ni know I can load the temp and humidity into the serial monitor ok...so the hardware seems ok. But still back where I began by needing to read data and print to oled..i guess it must be rather trying the patience of those trying to help when folk just dont seem to get it lol.."
    }
]