[
    {
        "link": "https://docs.python.org/3/library/os.path.html",
        "document": "Source code: Lib/genericpath.py, Lib/posixpath.py (for POSIX) and Lib/ntpath.py (for Windows).\n\nThis module implements some useful functions on pathnames. To read or write files see , and for accessing the filesystem see the module. The path parameters can be passed as strings, or bytes, or any object implementing the protocol.\n\nUnlike a Unix shell, Python does not do any automatic path expansions. Functions such as and can be invoked explicitly when an application desires shell-like path expansion. (See also the module.)\n\nSince different operating systems have different path name conventions, there are several versions of this module in the standard library. The module is always the path module suitable for the operating system Python is running on, and therefore usable for local paths. However, you can also import and use the individual modules if you want to manipulate a path that is always in one of the different formats. They all have the same interface:\n\nOn Unix and Windows, return the argument with an initial component of or replaced by that user’s home directory. On Unix, an initial is replaced by the environment variable if it is set; otherwise the current user’s home directory is looked up in the password directory through the built-in module . An initial is looked up directly in the password directory. On Windows, will be used if set, otherwise a combination of and will be used. An initial is handled by checking that the last directory component of the current user’s home directory matches , and replacing it if so. If the expansion fails or if the path does not begin with a tilde, the path is returned unchanged. Changed in version 3.8: No longer uses on Windows.\n\nJoin one or more path segments intelligently. The return value is the concatenation of path and all members of *paths, with exactly one directory separator following each non-empty part, except the last. That is, the result will only end in a separator if the last part is either empty or ends in a separator. If a segment is an absolute path (which on Windows requires both a drive and a root), then all previous segments are ignored and joining continues from the absolute path segment. On Windows, the drive is not reset when a rooted path segment (e.g., ) is encountered. If a segment is on a different drive or is an absolute path, all previous segments are ignored and the drive is reset. Note that since there is a current directory for each drive, represents a path relative to the current directory on drive ( ), not . Changed in version 3.6: Accepts a path-like object for path and paths."
    },
    {
        "link": "https://docs.python.org/3/library/os.html",
        "document": "This module provides a portable way of using operating system dependent functionality. If you just want to read or write a file see , if you want to manipulate paths, see the module, and if you want to read all the lines in all the files on the command line see the module. For creating temporary files and directories see the module, and for high-level file and directory handling see the module.\n\nNotes on the availability of these functions:\n• None The design of all built-in operating system dependent modules of Python is such that as long as the same functionality is available, it uses the same interface; for example, the function returns stat information about path in the same format (which happens to have originated with the POSIX interface).\n• None Extensions peculiar to a particular operating system are also available through the module, but using them is of course a threat to portability.\n• None All functions accepting path or file names accept both bytes and string objects, and result in an object of the same type, if a path or file name is returned.\n• None On VxWorks, os.popen, os.fork, os.execv and os.spawn*p* are not supported.\n• None On WebAssembly platforms, Android and iOS, large parts of the module are not available or behave differently. APIs related to processes (e.g. , ) and resources (e.g. ) are not available. Others like and are emulated or stubs. WebAssembly platforms also lack support for signals (e.g. , )."
    },
    {
        "link": "https://geeksforgeeks.org/python-os-listdir-method",
        "document": "The os.listdir() method in Python is used to get the list of all files and directories in the specified directory. If we don’t specify any directory, then a list of files and directories in the current working directory will be returned.\n\nBelow are some examples of Python os.listdir() method of the OS module:\n\nIn this example, the code uses os.listdir() to obtain a list of files and directories in the root directory (“/”). It then prints the obtained list. The output includes the files and directories present in the specified root Directory.\n\nIn this example, the code utilizes os.listdir() method to obtain a list of files and directories in the current working directory os.getcwd() method. It then prints the obtained list, providing information about the files and directories present in the current working directory.\n\nList All Files and Directories When No Path is Specified\n\nIn this example, the code uses os.listdir() to obtain a list of files and directories in the current working directory. It then prints the obtained list, providing information about the files and directories present in the current working directory. If no path is specified, it defaults to the current working directory.\n\nWhat do you understand by os.listdir() Method?"
    },
    {
        "link": "https://docs.python.org/3/library/pathlib.html",
        "document": "This module offers classes representing filesystem paths with semantics appropriate for different operating systems. Path classes are divided between pure paths, which provide purely computational operations without I/O, and concrete paths, which inherit from pure paths but also provide I/O operations.\n\nIf you’ve never used this module before or just aren’t sure which class is right for your task, is most likely what you need. It instantiates a concrete path for the platform the code is running on.\n\nPure paths are useful in some special cases; for example:\n• None If you want to manipulate Windows paths on a Unix machine (or vice versa). You cannot instantiate a when running on Unix, but you can instantiate .\n• None You want to make sure that your code only manipulates paths without actually accessing the OS. In this case, instantiating one of the pure classes may be useful since those simply don’t have any OS-accessing operations.\n\nPure path objects provide path-handling operations which don’t actually access a filesystem. There are three ways to access these classes, which we also call flavours: A generic class that represents the system’s path flavour (instantiating it creates either a or a ): Each element of pathsegments can be either a string representing a path segment, or an object implementing the interface where the method returns a string, such as another path object: When pathsegments is empty, the current directory is assumed: If a segment is an absolute path, all previous segments are ignored (like ): On Windows, the drive is not reset when a rooted relative path segment (e.g., ) is encountered: Spurious slashes and single dots are collapsed, but double dots ( ) and leading double slashes ( ) are not, since this would change the meaning of a path for various reasons (e.g. symbolic links, UNC paths): Pure path objects implement the interface, allowing them to be used anywhere the interface is accepted. Changed in version 3.6: Added support for the interface. pathsegments is specified similarly to . pathsegments is specified similarly to . Regardless of the system you’re running on, you can instantiate all of these classes, since they don’t provide any operation that does system calls. Paths are immutable and hashable. Paths of a same flavour are comparable and orderable. These properties respect the flavour’s case-folding semantics: Paths of a different flavour compare unequal and cannot be ordered: File , line , in : '<' not supported between instances of 'PureWindowsPath' and 'PurePosixPath' The slash operator helps create child paths, like . If the argument is an absolute path, the previous path is ignored. On Windows, the drive is not reset when the argument is a rooted relative path (e.g., ): A path object can be used anywhere an object implementing is accepted: The string representation of a path is the raw filesystem path itself (in native form, e.g. with backslashes under Windows), which you can pass to any function taking a file path as a string: Similarly, calling on a path gives the raw filesystem path as a bytes object, as encoded by : Calling is only recommended under Unix. Under Windows, the unicode form is the canonical representation of filesystem paths. To access the individual “parts” (components) of a path, use the following property: A tuple giving access to the path’s various components: Pure paths provide the following methods and properties: The implementation of the module used for low-level path parsing and joining: either or . A string representing the drive letter or name, if any: A string representing the (local or global) root, if any: If the path starts with more than two successive slashes, collapses them: This behavior conforms to The Open Group Base Specifications Issue 6, paragraph 4.11 Pathname Resolution: “A pathname that begins with two successive slashes may be interpreted in an implementation-defined manner, although more than two leading slashes shall be treated as a single slash.” The concatenation of the drive and root: An immutable sequence providing access to the logical ancestors of the path: Changed in version 3.10: The parents sequence now supports slices and negative index values. The logical parent of the path: You cannot go past an anchor, or empty path: This is a purely lexical operation, hence the following behaviour: If you want to walk an arbitrary filesystem path upwards, it is recommended to first call so as to resolve symlinks and eliminate components. A string representing the final path component, excluding the drive and root, if any: The last dot-separated portion of the final component, if any: This is commonly called the file extension. A list of the path’s suffixes, often called file extensions: The final path component, without its suffix: Return a string representation of the path with forward slashes ( ): Return whether the path is absolute or not. A path is considered absolute if it has both a root and (if the flavour allows) a drive: Return whether or not this path is relative to the other path. This method is string-based; it neither accesses the filesystem nor treats “ ” segments specially. The following code is equivalent: Deprecated since version 3.12, will be removed in version 3.14: Passing additional arguments is deprecated; if supplied, they are joined with other. With , return if the path is considered reserved under Windows, otherwise. With , is always returned. Changed in version 3.13: Windows path names that contain a colon, or end with a dot or a space, are considered reserved. UNC paths may be reserved. Deprecated since version 3.13, will be removed in version 3.15: This method is deprecated; use to detect reserved paths on Windows. Calling this method is equivalent to combining the path with each of the given pathsegments in turn: Match this path against the provided glob-style pattern. Return if matching is successful, otherwise. For example: As with other methods, case-sensitivity follows platform defaults: Set case_sensitive to or to override this behaviour. Match this path against the provided non-recursive glob-style pattern. Return if matching is successful, otherwise. This method is similar to , but empty patterns aren’t allowed ( is raised), the recursive wildcard “ ” isn’t supported (it acts like non-recursive “ ”), and if a relative pattern is provided, then matching is done from the right: Changed in version 3.12: The case_sensitive parameter was added. Compute a version of this path relative to the path represented by other. If it’s impossible, is raised: File , line , in File , line , in : '/etc/passwd' is not in the subpath of '/usr' OR one path is relative and the other is absolute. When walk_up is false (the default), the path must start with other. When the argument is true, entries may be added to form the relative path. In all other cases, such as the paths referencing different drives, is raised.: File , line , in File , line , in : '/etc/passwd' is not on the same drive as 'foo' OR one path is relative and the other is absolute. This function is part of and works with strings. It does not check or access the underlying file structure. This can impact the walk_up option as it assumes that no symlinks are present in the path; call first if necessary to resolve symlinks. Changed in version 3.12: The walk_up parameter was added (old behavior is the same as ). Deprecated since version 3.12, will be removed in version 3.14: Passing additional positional arguments is deprecated; if supplied, they are joined with other. Return a new path with the changed. If the original path doesn’t have a name, ValueError is raised: File , line , in File , line , in : PureWindowsPath('c:/') has an empty name Return a new path with the changed. If the original path doesn’t have a name, ValueError is raised: File , line , in File , line , in File , line , in : PureWindowsPath('c:/') has an empty name Return a new path with the changed. If the original path doesn’t have a suffix, the new suffix is appended instead. If the suffix is an empty string, the original suffix is removed: Create a new path object of the same type by combining the given pathsegments. This method is called whenever a derivative path is created, such as from and . Subclasses may override this method to pass information to derivative paths, for example:\n\nConcrete paths are subclasses of the pure path classes. In addition to operations provided by the latter, they also provide methods to do system calls on path objects. There are three ways to instantiate concrete paths: A subclass of , this class represents concrete paths of the system’s path flavour (instantiating it creates either a or a ): pathsegments is specified similarly to . A subclass of and , this class represents concrete non-Windows filesystem paths: pathsegments is specified similarly to . Changed in version 3.13: Raises on Windows. In previous versions, was raised instead. A subclass of and , this class represents concrete Windows filesystem paths: pathsegments is specified similarly to . Changed in version 3.13: Raises on non-Windows platforms. In previous versions, was raised instead. You can only instantiate the class flavour that corresponds to your system (allowing system calls on non-compatible path flavours could lead to bugs or failures in your application): File , line , in File , line , in : cannot instantiate 'WindowsPath' on your system Some concrete path methods can raise an if a system call fails (for example because the path doesn’t exist). Concrete path objects can be created from, and represented as, ‘file’ URIs conforming to RFC 8089. File URIs are not portable across machines with different filesystem encodings. Return a new path object from parsing a ‘file’ URI. For example: On Windows, DOS device and UNC paths may be parsed from URIs: is raised if the URI does not start with , or the parsed path isn’t absolute. Represent the path as a ‘file’ URI. is raised if the path isn’t absolute. For historical reasons, this method is also available from objects. However, its use of makes it strictly impure. Return a new path object representing the user’s home directory (as returned by with construct). If the home directory can’t be resolved, is raised. Return a new path with expanded and constructs, as returned by . If a home directory can’t be resolved, is raised. Return a new path object representing the current directory (as returned by ): Make the path absolute, without normalization or resolving symlinks. Returns a new path object: Make the path absolute, resolving any symlinks. A new path object is returned: “ ” components are also eliminated (this is the only method to do so): If a path doesn’t exist or a symlink loop is encountered, and strict is , is raised. If strict is , the path is resolved as far as possible and any remainder is appended without checking whether it exists. Changed in version 3.6: The strict parameter was added (pre-3.6 behavior is strict). Changed in version 3.13: Symlink loops are treated like other errors: is raised in strict mode, and no exception is raised in non-strict mode. In previous versions, is raised no matter the value of strict. Return the path to which the symbolic link points (as returned by ): Changed in version 3.13: Raises if is not available. In previous versions, was raised. Changed in version 3.8: , , , , , , , , now return instead of raising an exception for paths that contain characters unrepresentable at the OS level. Return an object containing information about this path, like . The result is looked up at each call to this method. This method normally follows symlinks; to stat a symlink add the argument , or use . Changed in version 3.10: The follow_symlinks parameter was added. Like but, if the path points to a symbolic link, return the symbolic link’s information rather than its target’s. Return if the path points to an existing file or directory. This method normally follows symlinks; to check if a symlink exists, add the argument . Changed in version 3.12: The follow_symlinks parameter was added. Return if the path points to a regular file, if it points to another kind of file. is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. This method normally follows symlinks; to exclude symlinks, add the argument . Changed in version 3.13: The follow_symlinks parameter was added. Return if the path points to a directory, if it points to another kind of file. is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. This method normally follows symlinks; to exclude symlinks to directories, add the argument . Changed in version 3.13: The follow_symlinks parameter was added. Return if the path points to a symbolic link, otherwise. is also returned if the path doesn’t exist; other errors (such as permission errors) are propagated. Return if the path points to a junction, and for any other type of file. Currently only Windows supports junctions. Return if the path is a mount point: a point in a file system where a different file system has been mounted. On POSIX, the function checks whether path’s parent, , is on a different device than path, or whether and path point to the same i-node on the same device — this should detect mount points for all Unix and POSIX variants. On Windows, a mount point is considered to be a drive letter root (e.g. ), a UNC share (e.g. ), or a mounted filesystem directory. Return if the path points to a Unix socket (or a symbolic link pointing to a Unix socket), if it points to another kind of file. is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. Return if the path points to a FIFO (or a symbolic link pointing to a FIFO), if it points to another kind of file. is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. Return if the path points to a block device (or a symbolic link pointing to a block device), if it points to another kind of file. is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. Return if the path points to a character device (or a symbolic link pointing to a character device), if it points to another kind of file. is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. Return whether this path points to the same file as other_path, which can be either a Path object, or a string. The semantics are similar to and . An can be raised if either file cannot be accessed for some reason. Open the file pointed to by the path, like the built-in function does: Return the decoded contents of the pointed-to file as a string: The file is opened and then closed. The optional parameters have the same meaning as in . Changed in version 3.13: The newline parameter was added. Return the binary contents of the pointed-to file as a bytes object: Open the file pointed to in text mode, write data to it, and close the file: An existing file of the same name is overwritten. The optional parameters have the same meaning as in . Changed in version 3.10: The newline parameter was added. Open the file pointed to in bytes mode, write data to it, and close the file: An existing file of the same name is overwritten. When the path points to a directory, yield path objects of the directory contents: The children are yielded in arbitrary order, and the special entries and are not included. If a file is removed from or added to the directory after creating the iterator, it is unspecified whether a path object for that file is included. If the path is not a directory or otherwise inaccessible, is raised. Glob the given relative pattern in the directory represented by this path, yielding all matching files (of any kind): By default, or when the case_sensitive keyword-only argument is set to , this method matches paths using platform-specific casing rules: typically, case-sensitive on POSIX, and case-insensitive on Windows. Set case_sensitive to or to override this behaviour. By default, or when the recurse_symlinks keyword-only argument is set to , this method follows symlinks except when expanding “ ” wildcards. Set recurse_symlinks to to always follow symlinks. Changed in version 3.12: The case_sensitive parameter was added. Changed in version 3.13: The recurse_symlinks parameter was added. Changed in version 3.13: Any exceptions raised from scanning the filesystem are suppressed. In previous versions, such exceptions are suppressed in many cases, but not all. Glob the given relative pattern recursively. This is like calling with “ ” added in front of the pattern. Changed in version 3.12: The case_sensitive parameter was added. Changed in version 3.13: The recurse_symlinks parameter was added. Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the directory tree rooted at self (including self but excluding ‘.’ and ‘..’), the method yields a 3-tuple of . dirpath is a to the directory currently being walked, dirnames is a list of strings for the names of subdirectories in dirpath (excluding and ), and filenames is a list of strings for the names of the non-directory files in dirpath. To get a full path (which begins with self) to a file or directory in dirpath, do . Whether or not the lists are sorted is file system-dependent. If the optional argument top_down is true (which is the default), the triple for a directory is generated before the triples for any of its subdirectories (directories are walked top-down). If top_down is false, the triple for a directory is generated after the triples for all of its subdirectories (directories are walked bottom-up). No matter the value of top_down, the list of subdirectories is retrieved before the triples for the directory and its subdirectories are walked. When top_down is true, the caller can modify the dirnames list in-place (for example, using or slice assignment), and will only recurse into the subdirectories whose names remain in dirnames. This can be used to prune the search, or to impose a specific order of visiting, or even to inform about directories the caller creates or renames before it resumes again. Modifying dirnames when top_down is false has no effect on the behavior of since the directories in dirnames have already been generated by the time dirnames is yielded to the caller. By default, errors from are ignored. If the optional argument on_error is specified, it should be a callable; it will be called with one argument, an instance. The callable can handle the error to continue the walk or re-raise it to stop the walk. Note that the filename is available as the attribute of the exception object. By default, does not follow symbolic links, and instead adds them to the filenames list. Set follow_symlinks to true to resolve symlinks and place them in dirnames and filenames as appropriate for their targets, and consequently visit directories pointed to by symlinks (where supported). Be aware that setting follow_symlinks to true can lead to infinite recursion if a link points to a parent directory of itself. does not keep track of the directories it has already visited. assumes the directories it walks are not modified during execution. For example, if a directory from dirnames has been replaced with a symlink and follow_symlinks is false, will still try to descend into it. To prevent such behavior, remove directories from dirnames as appropriate. Unlike , lists symlinks to directories in filenames if follow_symlinks is false. This example displays the number of bytes used by all files in each directory, while ignoring directories: This next example is a simple implementation of . Walking the tree bottom-up is essential as doesn’t allow deleting a directory before it is empty: # Delete everything reachable from the directory \"top\". # CAUTION: This is dangerous! For example, if top == Path('/'), # it could delete all of your files. Create a file at this given path. If mode is given, it is combined with the process’s value to determine the file mode and access flags. If the file already exists, the function succeeds when exist_ok is true (and its modification time is updated to the current time), otherwise is raised. The , and methods are often used to create files. Create a new directory at this given path. If mode is given, it is combined with the process’s value to determine the file mode and access flags. If the path already exists, is raised. If parents is true, any missing parents of this path are created as needed; they are created with the default permissions without taking mode into account (mimicking the POSIX command). If parents is false (the default), a missing parent raises . If exist_ok is false (the default), is raised if the target directory already exists. If exist_ok is true, will not be raised unless the given path already exists in the file system and is not a directory (same behavior as the POSIX command). Changed in version 3.5: The exist_ok parameter was added. On Windows, a symlink represents either a file or a directory, and does not morph to the target dynamically. If the target is present, the type of the symlink will be created to match. Otherwise, the symlink will be created as a directory if target_is_directory is true or a file symlink (the default) otherwise. On non-Windows platforms, target_is_directory is ignored. The order of arguments (link, target) is the reverse of ’s. Changed in version 3.13: Raises if is not available. In previous versions, was raised. Make this path a hard link to the same file as target. The order of arguments (link, target) is the reverse of ’s. Changed in version 3.13: Raises if is not available. In previous versions, was raised. Rename this file or directory to the given target, and return a new instance pointing to target. On Unix, if target exists and is a file, it will be replaced silently if the user has permission. On Windows, if target exists, will be raised. target can be either a string or another path object: The target path may be absolute or relative. Relative paths are interpreted relative to the current working directory, not the directory of the object. It is implemented in terms of and gives the same guarantees. Changed in version 3.8: Added return value, return the new instance. Rename this file or directory to the given target, and return a new instance pointing to target. If target points to an existing file or empty directory, it will be unconditionally replaced. The target path may be absolute or relative. Relative paths are interpreted relative to the current working directory, not the directory of the object. Changed in version 3.8: Added return value, return the new instance. Remove this file or symbolic link. If the path points to a directory, use instead. If missing_ok is false (the default), is raised if the path does not exist. If missing_ok is true, exceptions will be ignored (same behavior as the POSIX command). Changed in version 3.8: The missing_ok parameter was added. Remove this directory. The directory must be empty. Return the name of the user owning the file. is raised if the file’s user identifier (UID) isn’t found in the system database. This method normally follows symlinks; to get the owner of the symlink, add the argument . Changed in version 3.13: Raises if the module is not available. In earlier versions, was raised. Changed in version 3.13: The follow_symlinks parameter was added. Return the name of the group owning the file. is raised if the file’s group identifier (GID) isn’t found in the system database. This method normally follows symlinks; to get the group of the symlink, add the argument . Changed in version 3.13: Raises if the module is not available. In earlier versions, was raised. Changed in version 3.13: The follow_symlinks parameter was added. Change the file mode and permissions, like . This method normally follows symlinks. Some Unix flavours support changing permissions on the symlink itself; on these platforms you may add the argument , or use . Changed in version 3.10: The follow_symlinks parameter was added. Like but, if the path points to a symbolic link, the symbolic link’s mode is changed rather than its target’s.\n\nThe following wildcards are supported in patterns for , and : Matches any number of file or directory segments, including zero. Matches any number of non-separator characters, including zero. Matches one character not in seq. For a literal match, wrap the meta-characters in brackets. For example, matches the character . Any path with at least one segment. Any path starting with “ ”, excluding “ ” itself. Globbing with the “ ” wildcard visits every directory in the tree. Large directory trees may take a long time to search. Changed in version 3.13: Globbing with a pattern that ends with “ ” returns both files and directories. In previous versions, only directories were returned. In and , a trailing slash may be added to the pattern to match only directories. Changed in version 3.11: Globbing with a pattern that ends with a pathname components separator ( or ) returns only directories.\n\nComparison to the and modules¶ pathlib implements path operations using and objects, and so it’s said to be object-oriented. On the other hand, the and modules supply functions that work with low-level and objects, which is a more procedural approach. Some users consider the object-oriented style to be more readable. Many functions in and support paths and paths relative to directory descriptors. These features aren’t available in pathlib. Python’s and types, and portions of the and modules, are written in C and are very speedy. pathlib is written in pure Python and is often slower, but rarely slow enough to matter. pathlib’s path normalization is slightly more opinionated and consistent than . For example, whereas eliminates “ ” segments from a path, which may change its meaning if symlinks are involved, preserves these segments for greater safety. pathlib’s path normalization may render it unsuitable for some applications:\n• None pathlib normalizes to , which changes a path’s meaning when supplied to various operating system APIs and command-line utilities. Specifically, the absence of a trailing separator may allow the path to be resolved as either a file or directory, rather than a directory only.\n• None pathlib normalizes to , which changes a path’s meaning when used as an executable search path, such as in a shell or when spawning a child process. Specifically, the absence of a separator in the path may force it to be looked up in rather than the current directory. As a consequence of these differences, pathlib is not a drop-in replacement for ."
    },
    {
        "link": "https://geeksforgeeks.org/python-os-path-splitext-method",
        "document": "os.path.splitext() method is used to split the pathname into a pair (root, ext), where root is the part of the path before the file extension and ext is the file extension itself. It is particularly useful when you need to extract the file extension or handle files dynamically based on their type. os.path module is submodule of OS module in Python used for common pathname manipulation.\n\nFor example consider the following path names:\n\nLet’s see a basic example of how os.path.splitext() works:\n• None splits it into root (“example_file”) and ext (“.txt”).\n• None path: The complete file path, which can be relative or absolute.\n\nThe method returns a tuple with two elements:\n• root: The part of the path before the extension (file name without the extension).\n\n1. Using os.path.splitext() to Split Path into Root and Extension\n• None The example demonstrates how to use os.path.splitext() to split a file path into its root and extension parts.\n• None The first part of the code shows a path with a file extension, and the second part shows a path without a file extension (just a directory).\n\nIf the file doesn’t have an extension, the function will return an empty string for the extension.\n\nExplanation: Since “example_file” doesn’t have an extension, ext will be an empty string."
    },
    {
        "link": "https://api.jquery.com",
        "document": "Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first."
    },
    {
        "link": "https://api.jquery.com/on",
        "document": "Description: Attach an event handler function for one or more events to the selected elements.\n\nA selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.\n\nAn object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).\n\nA function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false .\n\nA selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.\n\nThe method attaches event handlers to the currently selected set of elements in the jQuery object. As of jQuery 1.7, the method provides all functionality required for attaching event handlers. For help in converting from older jQuery event methods, see , , and . To remove events bound with , see . To attach an event that runs only once and then removes itself, see\n\nAny event names can be used for the argument. jQuery will pass through the browser's standard JavaScript event types, calling the function when the browser generates events due to user actions such as . In addition, the method can trigger both standard browser event names and custom event names to call attached handlers. Event names should only contain alphanumerics, underscore, and colon characters.\n\nAn event name can be qualified by event namespaces that simplify removing or triggering the event. For example, defines both the myPlugin and simple namespaces for this particular click event. A click event handler attached via that string could be removed with or without disturbing other click handlers attached to the elements. Namespaces are similar to CSS classes in that they are not hierarchical; only one name needs to match. Namespaces should contain upper/lowercase letters and digits only.\n\nIn the second form of , the argument is a plain object. The keys are strings in the same form as the argument with space-separated event type names and optional namespaces. The value for each key is a function (or value) that is used as the instead of the final argument to the method. In other respects, the two forms are identical in their behavior as described below.\n\nThe majority of browser events bubble, or propagate, from the deepest, innermost element (the event target) in the document where they occur all the way up to the body and the element. In Internet Explorer 8 and lower, a few events such as and do not natively bubble but jQuery patches these to bubble and create consistent cross-browser behavior.\n\nIf is omitted or is null, the event handler is referred to as direct or directly-bound. The handler is called every time an event occurs on the selected elements, whether it occurs directly on the element or bubbles from a descendant (inner) element.\n\nWhen a is provided, the event handler is referred to as delegated. The handler is not called when the event occurs directly on the bound element, but only for descendants (inner elements) that match the selector. jQuery bubbles the event from the event target up to the element where the handler is attached (i.e., innermost to outermost element) and runs the handler for any elements along that path matching the selector.\n\nEvent handlers are bound only to the currently selected elements; they must exist at the time your code makes the call to . To ensure the elements are present and can be selected, place scripts after the elements in the HTML markup or perform event binding inside a document ready handler. Alternatively, use delegated event handlers to attach event handlers.\n\nDelegated event handlers have the advantage that they can process events from descendant elements that are added to the document at a later time. By picking an element that is guaranteed to be present at the time the delegated event handler is attached, you can use delegated event handlers to avoid the need to frequently attach and remove event handlers. This element could be the container element of a view in a Model-View-Controller design, for example, or if the event handler wants to monitor all bubbling events in the document. The element is available in the of the document before loading any other HTML, so it is safe to attach events there without waiting for the document to be ready.\n\nIn addition to their ability to handle events on descendant elements not yet created, another advantage of delegated event handlers is their potential for much lower overhead when many elements must be monitored. On a data table with 1,000 rows in its , this example attaches a handler to 1,000 elements:\n\nAn event-delegation approach attaches an event handler to only one element, the tbody, and the event only needs to bubble up one level (from the clicked to ):\n\nNote: Delegated event handlers do not work for SVG.\n\nThe event handler and its environment\n\nThe argument is a function (or the value , see below), and is required unless you pass an object for the argument. You can provide an anonymous handler function at the point of the call, as the examples have done above, or declare a named function and pass its name:\n\nWhen the browser triggers an event or other JavaScript calls jQuery's method, jQuery passes the handler an object it can use to analyze and change the status of the event. This object is a normalized subset of data provided by the browser; the browser's unmodified native event object is available in . For example, contains the event name (e.g., \"resize\") and indicates the deepest (innermost) element where the event occurred.\n\nBy default, most events bubble up from the original event target to the element. At each element along the way, jQuery calls any matching event handlers that have been attached. A handler can prevent the event from bubbling further up the document tree (and thus prevent handlers on those elements from running) by calling . Any other handlers attached on the current element will run however. To prevent that, call . (Event handlers bound to an element are called in the same order that they were bound.)\n\nSimilarly, a handler can call to cancel any default action that the browser may have for this event; for example, the default action on a event is to follow the link. Not all browser events have default actions, and not all default actions can be canceled. See the W3C Events Specification for details.\n\nReturning from an event handler will automatically call and . A value can also be passed for the as a shorthand for . So, attaches an event handler to all links with class \"disabled\" that prevents them from being followed when they are clicked and also stops the event from bubbling.\n\nWhen jQuery calls a handler, the keyword is a reference to the element where the event is being delivered; for directly bound events this is the element where the event was attached and for delegated events this is an element matching . (Note that may not be equal to if the event has bubbled from a descendant element.) To create a jQuery object from the element so that it can be used with jQuery methods, use .\n\nIf a argument is provided to and is not or , it is passed to the handler in the property each time an event is triggered. The argument can be any type, but if a string is used the must either be provided or explicitly passed as so that the data is not mistaken for a selector. Best practice is to use a plain object so that multiple values can be passed as properties.\n\nAs of jQuery 1.4, the same event handler can be bound to an element multiple times. This is especially useful when the feature is being used, or when other unique data resides in a closure around the event handler function. For example:\n\nThe above code will generate two different alerts when the button is clicked.\n\nAs an alternative or in addition to the argument provided to the method, you can also pass data to an event handler using a second argument to or . Data provided this way is passed to the event handler as further parameters after the object. If an array was passed to the second argument of or , each element in the array will be presented to the event handler as an individual parameter.\n\nIn most cases, an event such as occurs infrequently and performance is not a significant concern. However, high frequency events such as or can fire dozens of times per second, and in those cases it becomes more important to use events judiciously. Performance can be increased by reducing the amount of work done in the handler itself, caching information needed by the handler rather than recalculating it, or by rate-limiting the number of actual page updates using .\n\nAttaching many delegated event handlers near the top of the document tree can degrade performance. Each time the event occurs, jQuery must compare all selectors of all attached events of that type to every element in the path from the event target up to the top of the document. For best performance, attach delegated events at a document location as close as possible to the target elements. Avoid excessive use of or for delegated events on large documents.\n\njQuery can process simple selectors of the form very quickly when they are used to filter delegated events. So, , , and are all fast selectors. Delegated events that use more complex selectors, particularly hierarchical ones, can be several times slower--although they are still fast enough for most applications. Hierarchical selectors can often be avoided simply by attaching the handler to a more appropriate point in the document. For example, instead of use .\n\nSome events have dedicated pages, describing specifics of their usage. For a complete list of those events, see the events category.\n\nDeprecated in jQuery 1.8, removed in 1.9: The name used as a shorthand for the string . It attaches a single event handler for those two events, and the handler must examine to determine whether the event is or . Do not confuse the \"hover\" pseudo-event-name with the method, which accepts one or two functions.\n\njQuery's event system requires that a DOM element allow attaching data via a property on the element, so that events can be tracked and delivered. The , , and elements cannot attach data, and therefore cannot have jQuery events bound to them.\n\nThe and events are specified by the W3C to not bubble, but jQuery defines cross-browser and events that do bubble. When and are used to attach delegated event handlers, jQuery maps the names and delivers them as and respectively. For consistency and clarity, use the bubbling event type names.\n\nIn all browsers, the , , and events (e.g., on an element) do not bubble. In Internet Explorer 8 and lower, the and events do not bubble. Such events are not supported for use with delegation, but they can be used when the event handler is directly attached to the element generating the event.\n\nThe event on the object uses nonstandard arguments and return value conventions, so it is not supported by jQuery. Instead, assign a handler function directly to the property.\n\nThe handler list for an element is set when the event is first delivered. Adding or removing event handlers on the current element won't take effect until the next time the event is handled. To prevent any further event handlers from executing on an element within an event handler, call . This behavior goes against the W3C events specification. To better understand this case, consider the following code:\n\nIn the code above, will be executed anyway the first time even if it's removed using . However, the handler will not be executed the following times the event is triggered."
    },
    {
        "link": "https://geeksforgeeks.org/jquery-features-and-overview",
        "document": "JQuery is a fast small and feature-rich JavaScript library. It simplifies HTML document traversal and manipulation event handling animation and Ajax interactions for rapid web development.\n\nIt is designed to make things like DOM manipulation event handling and AJAX much simpler with an easy-to-use API that works across a multitude of browsers.\n\nThese are the approaches for JQuery:\n\nJQuery became extremely popular because it allowed developers to write less code to achieve more functionality. Its cross-browser compatibility ensures that code written in JQuery works consistently across different browsers making it a go-to tool for front-end developers. It also simplifies complex tasks like AJAX calls and DOM manipulation which are common in dynamic web applications.\n\nDOM (Document Object Model) manipulation refers to the process of dynamically changing the content structure or style of an HTML document using programming languages like JavaScript. JQuery offers powerful tools for DOM manipulation allowing you to select elements modify them and update the document in real time.\n\nExample: Below given example demonstrates the use of changing HTML Content using JQuery in which when we click on button it changes the text.\n\nEvent handling is important in making web pages interactive. Events are actions that occur in the browser like clicking a button hovering over an element or pressing a key. JQuery simplifies event handling by providing an easy to-use API to attach event listeners and define event driven behaviors.\n\nExample : Below given example demonstrates handling click events in JQuery. Here, when we click on button it displayed an alert.\n\nAJAX (Asynchronous JavaScript and XML) allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page without reloading the whole page. JQuery provides a simple API for making these AJAX requests.\n\nExample: Below given example demonstrates the use of GET Request in which when button is clicked it fetches the data and displays the data.\n\nJQuery simplifies the creation of animations that can be used to enhance the user experience. By chaining animation methods you can create custom animations transitions and effects that respond to user interactions.\n\nFading In and Out\n\nSliding Up and Down\n\nExample: Below given example demonstrates the use of Fading In and Out Annimations in JQuery. Here, when we click on the button a blue colored box appears which on clicking button again gets disappeared.\n\nExample: Below given example demonstrates the Sliding elements property of Annimations in JQuery in which the button appears from the top in sliding position.\n\nJQuery includes several utility functions that help with common programming tasks such as iterating over arrays and objects trimming strings and manipulating data structures. These functions streamline code and reduce the need for complex logic.\n\nExample: Below given example demonstrates Iteration of Array in which an array of fruits is printed.\n• Simplicity : JQuery's concise and readable syntax reduces the amount of code you need to write compared to vanilla JavaScript.\n• Community Support : JQuery has a large and active community providing a wealth of resources plugins and tutorials.\n• Compatibility : JQuery abstracts away many of the inconsistencies between browsers allowing developers to write code that works across different environments.\n• Reduced Development Time : The extensive collection of plugins and built-in methods helps developers implement complex functionality quickly."
    },
    {
        "link": "https://medium.com/@dharshithasrimal/jquery-for-basics-i-5079f82c1082",
        "document": "jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. The purpose of jQuery is to make it easier to use JavaScript on your website.\n\nHere are some key points about jQuery:\n\nBasically, there are two ways to incorporate jQuery into your code.\n• Local Installation: You can directly download jQuery library from their official website and include it in your HTML code\n• Link to a CDN: You can add jQuery library in your HTML code from Content Delivery Network.\n• : A jQuery method to perform an operation on the selected elements.\n\nNow let’s look at a simple example.\n• : This is the jQuery function, which is used to access jQuery's features.\n• : This is a jQuery selector. It selects all elements in the document.\n• : This is a jQuery method that sets the CSS property to for the selected elements.\n\nLet’s look into another example.\n• : This ensures that the code inside it runs only after the DOM is fully loaded. This prevents any manipulation on elements that are not yet rendered.\n• : This attaches a click event handler to all elements. When a button is clicked, the function inside this handler is executed.\n• : This selects the element with the id (i.e., the second paragraph) and hides it using the jQuery method.\n\nReference: Checkout some examples related to jQuery in my github."
    },
    {
        "link": "https://tutorialspoint.com/jquery/jquery-events.htm",
        "document": "Any modern web application can't be imagined without an event associated with it. Events are the mechanism to build an interactive web page. jQuery is smart enough to handle any event generated on an HTML page. First let's try to understand what is an event.\n\nA jQuery Event is the result of an action that can be detected by jQuery (JavaScript). When these events are triggered, you can then use a custom function to do pretty much whatever you want with the event. These custom functions are called Event Handlers.\n\nThe jQuery library provides methods to handle all the DOM events and make complete event handling considerably easier than what we have available in JavaScript.\n\nFollowing are the examples of some common events −\n• A keystroke on your keyboard, etc.\n\nThe following table lists some of the important DOM events.\n\nThis chapter coveres only few event methods and properties, For a complete reference of all the jQuery Event Methods and Properties, you can go to through jQuery Events Reference.\n\nConsider a situation when you want to click a <div> in an HTML document and then you want to perform some action against this click. To achieve this you will have to bind a jQuery click event with the <div> element and then define an action against the click event.\n\nFollowing is jQuery syntax to bind a click event with all the <div> elements available in an HTML document:\n\nThe next step is to define an action against the click event. Following is the syntax to define a function which will be executed when click event will be fired. This function is called jQuery Event Handler\n\nFollowing is another syntax to bind a click event with any of the DOM elements:\n\nFollowing is an example to bind a click event with <div> where an alert box is displayed whenever you click on any of the divs. Try to click the icon to run the following jQuery code:\n\nLet's re-write the above code to bind a dblclick event with <div> where an alert box is displayed whenever you double click on any of the divs.\n\nFollowing is an example to bind a mouseenter event with <div> where an alert box is displayed whenever you bring cursor over any of the divs.\n\nFollowing is an example to bind a mouseleave event with <div> where an alert box is displayed whenever you take cursor out of the div.\n\nFollowing is an example to bind a mousedown event with <div> where an alert box is displayed whenever the left, middle or right mouse button is pressed down over any of the divs.\n\nFollowing is an example to bind a mouseup event with <div> where an alert box is displayed whenever the left, middle or right mouse button is released over any of the divs.\n\nWhenever a jQuery event is fired, jQuery passes an Event Object to every event handler function.The event object provides various useful information about the event.\n\nThe event object is often unnecessary and the parameter is omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered, however there are certain attributes which you would need to be accessed.\n\nThe following event properties/attributes are available and safe to access in a platform independent manner −\n\nSet to true if the Alt key was pressed when the event was triggered, false if not. The Alt key is labeled Option on most Mac keyboards. Set to true if the Ctrl key was pressed when the event was triggered, false if not. The value, if any, passed as the second parameter to the bind() command when the handler was established. For keyup and keydown events, this returns the key that was pressed. Set to true if the Meta key was pressed when the event was triggered, false if not. The Meta key is the Ctrl key on PCs and the Command key on Macs. For mouse events, specifies the horizontal coordinate of the event relative from the page origin. For mouse events, specifies the vertical coordinate of the event relative from the page origin. For some mouse events, identifies the element that the cursor left or entered when the event was triggered. For mouse events, specifies the horizontal coordinate of the event relative from the screen origin. For mouse events, specifies the vertical coordinate of the event relative from the screen origin. Set to true if the Shift key was pressed when the event was triggered, false if not. Identifies the element for which the event was triggered. The timestamp (in milliseconds) when the event was created. For all events, specifies the type of event that was triggered (for example, click). For keyboard events, specifies the numeric code for the key that caused the event, and for mouse events, specifies which button was pressed (1 for left, 2 for middle, 3 for right).\n\nFollowing is an example to show how different square clicks give different coordinates.\n\nMany times it becomes very easy to make use of this keyword inside an event handler. This keyword represents a DOM element which triggers the event.\n\nFollowing example will show the content of the clicked <div>:\n\nTypically, once an event handler is established, it remains in effect for the remainder of the life of the page. There may be a need when you would like to remove event handler.\n\njQuery provides the unbind() command to remove an exiting event handler. The syntax of unbind() is as follows −\n\nFollowing is the description of the parameters −\n• None eventType − A string containing a JavaScript event type, such as click or submit. Refer to the next section for a complete list of event types.\n• None handler − If provided, identifies the specific listener that's to be removed.\n\nYou can get a complete reference of all the jQuery Event Methods and Properties at the following page: jQuery Events Reference."
    }
]