[
    {
        "link": "https://airsdk.dev/reference/actionscript/3.0",
        "document": "This document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. \n\n Link to Non-frame version."
    },
    {
        "link": "https://airsdk.dev/reference/actionscript/3.0/flash/display/Stage.html",
        "document": "The Stage class represents the main drawing area. For SWF content running in the browser (in Flash® Player), the Stage represents the entire area where Flash content is shown. For content running in AIR on desktop operating systems, each NativeWindow object has a corresponding Stage object. The Stage object is not globally accessible. You need to access it through the property of a DisplayObject instance. The Stage class has several ancestor classes — DisplayObjectContainer, InteractiveObject, DisplayObject, and EventDispatcher — from which it inherits properties and methods. Many of these properties and methods are either inapplicable to Stage objects, or require security checks when called on a Stage object. The properties and methods that require security checks are documented as part of the Stage class. In addition, the following inherited properties are inapplicable to Stage objects. If you try to set them, an IllegalOperationError is thrown. These properties may always be read, but since they cannot be set, they will always contain default values. Some events that you might expect to be a part of the Stage class, such as , , , and , cannot be Stage events because a reference to the Stage object cannot be guaranteed to exist in every situation where these events are used. Because these events cannot be dispatched by the Stage object, they are instead dispatched by every DisplayObject instance, which means that you can add an event listener to any DisplayObject instance to listen for these events. These events, which are part of the DisplayObject class, are called broadcast events to differentiate them from events that target a specific DisplayObject instance. Two other broadcast events, and , belong to DisplayObject's superclass, EventDispatcher. The and events behave similarly to the DisplayObject broadcast events, except that these two events are dispatched not only by all DisplayObject instances, but also by all EventDispatcher instances and instances of other EventDispatcher subclasses. For more information on broadcast events, see the DisplayObject class. \n\n\n\n[read-write] A value from the StageAlign class that specifies the alignment of the stage in Flash Player or the browser. The following are valid values: The property is only available to an object that is in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the calling object by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. \n\n \n\n \n\n [read-only] Specifies whether this stage allows the use of the full screen mode \n\n \n\n [read-only] Specifies whether this stage allows the use of the full screen with text input mode \n\n \n\n [read-write] Specifies whether the stage automatically changes orientation when the device orientation changes. The initial value of this property is derived from the element of the application descriptor and defaults to . When changing the property to , the behavior is not guaranteed. On some devices, the stage remains in the current orientation. On others, the stage orientation changes to a device-defined \"standard\" orientation, after which, no further stage orientation changes occur. AIR profile support: This feature is supported on mobile devices, but it is not supported on desktop operating systems or AIR for TV devices. You can test for support at run time using the property. See AIR Profile Support for more information regarding API support across multiple profiles. \n\n \n\n \n\n [read-only] Specifies the browser zoom factor. A change in browser zoom factor affects the scaling factor of the stage. \n\n \n\n [read-write] Defaults to the stage background color, as set by the SWF tag SetBackgroundColor. \n\n \n\n \n\n [read-write] Controls Flash runtime color correction for displays. Color correction works only if the main monitor is assigned a valid ICC color profile, which specifies the device's particular color attributes. By default, the Flash runtime tries to match the color correction of its host (usually a browser). Use the property to determine if color correction is available on the current system and the default state. . If color correction is available, all colors on the stage are assumed to be in the sRGB color space, which is the most standard color space. Source profiles of input devices are not considered during color correction. No input color correction is applied; only the stage output is mapped to the main monitor's ICC color profile. In general, the benefits of activating color management include predictable and consistent color, better conversion, accurate proofing and more efficient cross-media output. Be aware, though, that color management does not provide perfect conversions due to devices having a different gamut from each other or original images. Nor does color management eliminate the need for custom or edited profiles. Color profiles are dependent on browsers, operating systems (OS), OS extensions, output devices, and application support. Applying color correction degrades the Flash runtime performance. A Flash runtime's color correction is document style color correction because all SWF movies are considered documents with implicit sRGB profiles. Use the property to tell the Flash runtime to correct colors when displaying the SWF file (document) to the display color space. Flash runtimes only compensates for differences between monitors, not for differences between input devices (camera/scanner/etc.). The three possible values are strings with corresponding constants in the flash.display.ColorCorrection class:\n• : Use the same color correction as the host system. \n\n \n\n \n\n \n\n \n\nThe following example shows an event handler that toggles color correction in the current SWF file and populates a text field with the current state of color correction. If the value is not a value from the ColorCorrection class, then the handler reports an error. The following example shows an event handler that toggles color correction in the current SWF file and populates a text field with the current state of color correction. If thevalue is not a value from the ColorCorrection class, then the handler reports an error. [read-only] Specifies whether the Flash runtime is running on an operating system that supports color correction and whether the color profile of the main (primary) monitor can be read and understood by the Flash runtime. This property also returns the default state of color correction on the host system (usually the browser). Currently the return values can be: The three possible values are strings with corresponding constants in the flash.display.ColorCorrectionSupport class:\n• : Color correction is not available. \n\n \n\n \n\n \n\nThe following example shows an event handler that populates a text field with the current environment's ability to support color correction or not. First, it checks the value of to see if it is or , values from the ColorCorrectionSupport class. If the property is either value, then the text field displays the current value. Otherwise, if the value is neither nor , the text field displays \"unsupported\". The following example shows an event handler that populates a text field with the current environment's ability to support color correction or not. First, it checks the value ofto see if it isor, values from the ColorCorrectionSupport class. If the property is either value, then the text field displays the current value. Otherwise, if the value is neithernor, the text field displays \"unsupported\". [read-only] Specifies the effective pixel scaling factor of the stage. This value is 1 on standard screens and HiDPI (Retina display) screens. When the stage is rendered on HiDPI screens the pixel resolution is doubled; even if the stage scaling mode is set to StageScaleMode.NO_SCALE. Stage.stageWidth and Stage.stageHeight continue to be reported in classic pixel units. \n\n \n\n [read-only] The physical orientation of the device. On devices with slide-out keyboards, the state of the keyboard has a higher priority in determining the device orientation than the rotation detected by the accelerometer. Thus on a portrait-aspect device with a side-mounted keyboard, the property will report when the keyboard is open no matter how the user is holding the device. Use the constants defined in the StageOrientation class when setting or comparing values for this property. AIR profile support: This feature is supported on mobile devices, but it is not supported on desktop operating systems or AIR for TV devices. You can test for support at run time using the property. See AIR Profile Support for more information regarding API support across multiple profiles. \n\n \n\n [read-write] A value from the StageDisplayState class that specifies which display state to use. The following are valid values:\n• Sets AIR application or content in Flash Player to expand the stage over the user's entire screen. Keyboard input is disabled, with the exception of a limited set of non-printing keys.\n• Sets the application to expand the stage over the user's entire screen, with keyboard input allowed.\n• Sets the stage back to the standard stage display mode. The scaling behavior of the movie in full-screen mode is determined by the setting (set using the property or the SWF file's tag settings in the HTML file). If the property is set to while the application transitions to full-screen mode, the Stage and properties are updated, and the Stage dispatches a event. If any other scale mode is set, the stage and its contents are scaled to fill the new screen dimensions. The Stage object retains its original and values and does not dispatch a event. The following restrictions apply to SWF files that play within an HTML page (not those using the stand-alone Flash Player or AIR runtime):\n• To enable full-screen mode, add the parameter to the and tags in the HTML page that includes the SWF file, with set to , as shown in the following example: An HTML page may also use a script to generate SWF-embedding tags. You need to alter the script so that it inserts the proper settings. HTML pages generated by Flash Professional and Flash Builder use the function to embed references to SWF files, and you need to add the parameter settings, as in the following:\n• Full-screen mode is initiated in response to a mouse click or key press by the user; the movie cannot change without user input. Flash runtimes restrict keyboard input in full-screen mode. Acceptable keys include keyboard shortcuts that terminate full-screen mode and non-printing keys such as arrows, space, Shift, and Tab keys. (Use full-screen interactive mode to support input from additional keys.) Keyboard shortcuts that terminate full-screen mode are: Escape (Windows, Linux, and Mac), Control+W (Windows), Command+W (Mac), and Alt+F4.\n• Starting with Flash Player 9.0.115.0, full-screen works the same in windowless mode as it does in window mode. If you set the Window Mode ( in the HTML) to Opaque Windowless ( ) or Transparent Windowless ( ), full-screen can be initiated, but the full-screen window will always be opaque.\n• To enable full-screen interactive mode, which supports keyboard interactivity, add the parameter to the and tags in the HTML page that includes the SWF file, with set to , as shown in the following example: These restrictions are not present for SWF content running in the stand-alone Flash Player or in AIR. When entering full-screen mode, the Flash runtime briefly displays a notification over the SWF content to inform the users they are in full-screen mode and that they can press the Escape key to end full-screen mode. When entering full-screen interactive mode, Flash Player displays a confirmation prompt over the SWF content, enabling users to allow access to extended keyboard input (including printing keys) and informing users that they can press the Escape key to end full-screen interactive mode. You should not make assumptions about the appearance/location of the confirmation prompt. You can determine if users have allowed access to extended keyboard input by listening for the event. For AIR content running in full-screen mode, the system screen saver and power saving options are disabled while video content is playing and until either the video stops or full-screen mode is exited. On Linux, setting to or is an asynchronous operation. Note that it is not possible to change the display state within an event handler that is dispatched due to a change in the display state: this could lead to recursion and would also cause problems within the native operating system handling for these mechanisms. A is thrown if the property is changed within a event handler. \n\n \n\n \n\n \n\n \n\n — Calling the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. Trying to set the property while the settings dialog is displayed, without a user response, or if the or HTML tag's attribute is not set to throws a security error. It is also forbidden to set the property within a handler. \n\n \n\nThe following example creates an interactive demonstration of how to create a fullscreen experience by modifying the property. The following example creates an interactive demonstration of how to create a fullscreen experience by modifying theproperty. Note: Fullscreen can only be triggered in certain situations, such as if the user has clicked or pressed a key, due to security restrictions. When run in a browser, the allowFullScreen property must be set to true. package { import flash.display.Sprite; import flash.display.Stage; import flash.events.*; import flash.net.NetConnection; import flash.net.NetStream; import flash.media.Video; public class FullScreenExample extends Sprite { private var videoURL:String = \"testVideo.flv\"; private var connection:NetConnection; private var stream:NetStream; private var video:Video; public function FullScreenExample() { connection = new NetConnection(); connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler); connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler); connection.connect(null); loaderInfo.addEventListener(Event.INIT, createMouseListener); } private function createMouseListener(event:Event):void { stage.addEventListener(MouseEvent.CLICK,toggleFullScreen); } private function toggleFullScreen(event:MouseEvent):void { switch(stage.displayState) { case \"normal\": stage.displayState = \"fullScreen\"; break; case \"fullScreen\": default: stage.displayState = \"normal\"; break; } } // Video related: private function netStatusHandler(event:NetStatusEvent):void { switch (event.info.code) { case \"NetConnection.Connect.Success\": connectStream(); break; case \"NetStream.Play.StreamNotFound\": trace(\"Unable to locate video: \" + videoURL); break; } } private function connectStream():void { var stream:NetStream = new NetStream(connection); stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler); stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler); video = new Video(stage.stageWidth,stage.stageHeight); video.attachNetStream(stream); stream.play(videoURL); addChild(video); } private function securityErrorHandler(event:SecurityErrorEvent):void { trace(\"securityErrorHandler: \" + event); } private function asyncErrorHandler(event:AsyncErrorEvent):void { // ignore AsyncErrorEvent events. } } } [read-write] The interactive object with keyboard focus; or if focus is not set or if the focused object belongs to a security sandbox to which the calling object does not have access. \n\n \n\n \n\n \n\n \n\n — Throws an error if focus cannot be set to the target. \n\n \n\nThe following sets the initial focus to the text field so the user can start typing without having to click anything. On iOS, Android mobile devices and tvOS device, the user needs to click the text field to activate soft keyboard. If you test this code within the authoring tool interface, you can only have access to a few keys because the host (browser or tool) interprets most key presses first. To see this example work as intended, compile it and run the SWF file. The following sets the initial focus to the text fieldso the user can start typing without having to click anything. On iOS, Android mobile devices and tvOS device, the user needs to click the text field to activate soft keyboard. If you test this code within the authoring tool interface, you can only have access to a few keys because the host (browser or tool) interprets most key presses first. To see this example work as intended, compile it and run the SWF file. [read-write] Gets and sets the frame rate of the stage. The frame rate is defined as frames per second. By default the rate is set to the frame rate of the first SWF file loaded. Valid range for the frame rate is from 0.01 to 1000 frames per second. Note: An application might not be able to follow high frame rate settings, either because the target platform is not fast enough or the player is synchronized to the vertical blank timing of the display device (usually 60 Hz on LCD devices). In some cases, a target platform might also choose to lower the maximum frame rate if it anticipates high CPU usage. For content running in Adobe AIR, setting the property of one Stage object changes the frame rate for all Stage objects (used by different NativeWindow objects). \n\n \n\n \n\n \n\n \n\n — Calling the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. [read-only] Returns the height of the monitor that will be used when going to full screen size, if that state is entered immediately. If the user has multiple monitors, the monitor that's used is the monitor that most of the stage is on at the time. Note: If the user has the opportunity to move the browser from one monitor to another between retrieving the value and going to full screen size, the value could be incorrect. If you retrieve the value in an event handler that sets to , the value will be correct. This is the pixel height of the monitor and is the same as the stage height would be if is set to and is set to . \n\n \n\n \n\n \n\nThis example creates a green rectangle the size of the stage and places a red square on it that it activates as a button. Clicking the red square triggers the event handler, which sets the property and enters full screen mode. To set the property, the event handler starts with the location and dimensions of the red square. It then compares the aspect ratio (width divided by height) of the red square to the aspect ratio of the stage at full screen width and height so that it can expand the rectangle ( ) to match the screen's aspect ratio. The result is that the red square occupies the entire height of the monitor with the green background visible on each side. If the aspect ratio was not matched, the stage background color, which is white by default, would show on each side instead of the green background. This example creates a green rectangle the size of the stage and places a red square on it that it activates as a button. Clicking the red square triggers theevent handler, which sets theproperty and enters full screen mode. To set theproperty, the event handler starts with the location and dimensions of the red square. It then compares the aspect ratio (width divided by height) of the red square to the aspect ratio of the stage at full screen width and height so that it can expand the rectangle () to match the screen's aspect ratio. The result is that the red square occupies the entire height of the monitor with the green background visible on each side. If the aspect ratio was not matched, the stage background color, which is white by default, would show on each side instead of the green background. Note: Test this example in the browser. In the Flash Publish Settings dialog, on the HTML tab, select the template Flash Only - Allow Full Screen. Specify the Flash Player version 9.0.115.0, and make sure the Flash and HTML formats are selected on the Formats tab. Then publish and open the resulting HTML file in the browser. import flash.display.Sprite; import flash.display.Stage; import flash.display.StageDisplayState; import flash.events.MouseEvent; import flash.geom.Rectangle; // cover the stage with a green rectangle var greenRect:Sprite = new Sprite(); greenRect.graphics.beginFill(0x00FF00); greenRect.graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight); addChild(greenRect); // create red square on stage, turn it into a button for going to full screen var redSquare:Sprite = new Sprite(); redSquare.graphics.beginFill(0xFF0000); redSquare.graphics.drawRect(0, 0, 300, 300); redSquare.x = 50; redSquare.y = 50; redSquare.addEventListener(MouseEvent.CLICK, enterFullScreen); redSquare.buttonMode = true; addChild(redSquare); function enterFullScreen(e:MouseEvent):void { // we will go to full screen zoomed in on the red square var redSquare:Sprite = e.target as Sprite; var fullScreenRect:Rectangle = new Rectangle(redSquare.x, redSquare.y, redSquare.width, redSquare.height); // calculate aspect ratio of the red square var rectAspectRatio:Number = fullScreenRect.width / fullScreenRect.height; // calculate aspect ratio of the screen var screenAspectRatio:Number = stage.fullScreenWidth / stage.fullScreenHeight; // change the fullScreenRect so that it covers the entire screen, keeping it centered on the redSquare // try commenting out this section to see what happens if you do not fix the aspect ratio. if (rectAspectRatio > screenAspectRatio) { var newHeight:Number = fullScreenRect.width / screenAspectRatio; fullScreenRect.y -= ((newHeight - fullScreenRect.height) / 2); fullScreenRect.height = newHeight; } else if (rectAspectRatio < screenAspectRatio) { var newWidth:Number = fullScreenRect.height * screenAspectRatio; fullScreenRect.x -= ((newWidth - fullScreenRect.width) / 2); fullScreenRect.width = newWidth; } // go to full screen stage.fullScreenSourceRect = fullScreenRect; stage.displayState = StageDisplayState.FULL_SCREEN; } [read-write] Sets the Flash runtime to scale a specific region of the stage to full-screen mode. If available, the Flash runtime scales in hardware, which uses the graphics and video card on a user's computer, and generally displays content more quickly than software scaling. When this property is set to a valid rectangle and the property is set to full-screen mode, the Flash runtime scales the specified area. The actual Stage size in pixels within ActionScript does not change. The Flash runtime enforces a minimum limit for the size of the rectangle to accommodate the standard \"Press Esc to exit full-screen mode\" message. This limit is usually around 260 by 30 pixels but can vary on platform and Flash runtime version. This property can only be set when the Flash runtime is not in full-screen mode. To use this property correctly, set this property first, then set the property to full-screen mode, as shown in the code examples. Note: In Flash Player 15 and later, this property can be set even when the Flash runtime is in full-screen mode. To enable scaling, set the property to a rectangle object: To disable scaling, set the in ActionScript 3.0, and in ActionScript 2.0. The end user also can select within Flash Player Display Settings to turn off hardware scaling, which is enabled by default. For more information, see www.adobe.com/go/display_settings. \n\n \n\n \n\n \n\n \n\nTo take advantage of hardware scaling, you set the whole stage or part of the stage to full-screen mode. The following ActionScript 3.0 code sets the whole stage to full-screen mode: To take advantage of hardware scaling, you set the whole stage or part of the stage to full-screen mode. The following ActionScript 3.0 code sets the whole stage to full-screen mode: In the following example, the user can switch between playing a video in full or normal screen mode by clicking on the stage. If the SWF for this example is running in Flash Player 9.0.115.0 or later, then it will use hardware acceleration to improve the full-screen scaling of the display. In the following example, the user can switch between playing a video in full or normal screen mode by clicking on the stage. If the SWF for this example is running in Flash Player 9.0.115.0 or later, then it will use hardware acceleration to improve the full-screen scaling of the display. Before using the full-screen mode with hardware scaling, the following conditions must be met:\n• Flash Player version 9.0.115.0 or later is needed, as well as an authoring tool that supports it.\n• HTML templates need to be modified to support full screen. The attribute must be set to for the and tag. (The scripts that generate SWF-embedding tags must also allow for full screen.) For sample of files that can be used for Flash Builder, see the article, Exploring full-screen mode in Flash Player 9.\n• Your application must have permission and access to an FLV video file. In this example, it is assumed that Flash Video (FLV) file is in the same directory as the SWF file.\n• The user must allow access to full screen.\n• For additional information on hardware scaling, see the article Exploring Flash Player support for high-definition H.264 video and AAC audio for Flash Player. An FLV file is loaded using NetConnection and NetStream objects. Since the FLV file is in the same directory as the SWF file and will connect via HTTP, the method's parameter is set to . The NetConnection object reports its status by dispatching a event which invokes the method. The method checks if the connection was successful and invokes method, which creates a NetStream object that takes the NetConnection object as a parameter. It also creates a video object and attached the NetStream object to the video object. The video object then is added to the display list and the stream is set to play. Since the FLV video file does not contain metadata or cue point information, an event will be dispatched. A listener must be set up to handle the event. Here the listener is set up and it ignores the event. Another listener for event is also set up for the NetStream object. It will display an error message if the stream was not found. (Note that could be used to handle any number of different status information reported for the stream or connection.) When the properties and methods of a loaded SWF file are accessible, the method is invoked. It sets up an event listener for when the mouse is clicked on the stage. The method checks if the display state is in the full or normal screen mode. If it is normal, the size of the video object is set to the size of the video stream. The property is set to a rectangle matching the dimensions of the video object. Then the property is set to full screen, which causes the video in the source rectangle to expand to fill the full screen area. If system requirements are met, the machine's graphics hardware will be used to improve the performance of the full-screen video rendering and the display state is set to full-screen mode. In order to catch any security error that may occur while switching to the full-screen mode, a is used. (Note that the display state must be set to full-screen mode after the property is set.) Before switching to the normal-screen mode, the video object's width and height are set back to the saved original video object's width and height. Otherwise, the changes made to the video object for the full-screen mode will determine the width and height. package { import flash.display.Sprite; import flash.display.StageDisplayState; import flash.media.Video; import flash.net.NetConnection; import flash.net.NetStream; import flash.events.NetStatusEvent; import flash.events.AsyncErrorEvent; import flash.events.SecurityErrorEvent; import flash.events.MouseEvent; import flash.events.Event; import flash.geom.Rectangle; public class Stage_fullScreenSourceRectExample2 extends Sprite { private var videoURL:String = \"testVideo1.flv\"; private var connection:NetConnection; private var stream:NetStream; private var myVideo:Video; private var savedWidth:uint; private var savedHeight:uint; public function Stage_fullScreenSourceRectExample2() { connection = new NetConnection(); connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler); connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler); connection.connect(null); loaderInfo.addEventListener(Event.INIT, createMouseListener); } private function createMouseListener(event:Event):void { stage.addEventListener(MouseEvent.CLICK, toggleFullScreen); } private function toggleFullScreen(event:MouseEvent):void { if(stage.displayState == StageDisplayState.NORMAL) { myVideo.width = myVideo.videoWidth; myVideo.height = myVideo.videoHeight; try { stage.fullScreenSourceRect = new Rectangle(myVideo.x, myVideo.y, myVideo.width, myVideo.height); stage.displayState = StageDisplayState.FULL_SCREEN; } catch (e:SecurityError) { trace (\"A security error occurred while switching to full screen: \" + event); myVideo.width = savedWidth; myVideo.height = savedHeight; } }else { myVideo.width = savedWidth; myVideo.height = savedHeight; stage.displayState = StageDisplayState.NORMAL; } } private function netStatusHandler(event:NetStatusEvent):void { switch (event.info.code) { case \"NetConnection.Connect.Success\": connectStream(); break; case \"NetStream.Play.StreamNotFound\": trace (\"Unable to locate video: \" + videoURL); break; } } private function connectStream():void { var stream:NetStream = new NetStream(connection); stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler); stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler); myVideo = new Video(); myVideo.attachNetStream(stream); stream.play(videoURL); savedWidth = myVideo.width; savedHeight = myVideo.height; addChild(myVideo); } private function securityErrorHandler(event:SecurityErrorEvent):void { trace(\"securityErrorHandler: \" + event); } private function asyncErrorHandler(event:AsyncErrorEvent):void { } } } [read-only] Returns the width of the monitor that will be used when going to full screen size, if that state is entered immediately. If the user has multiple monitors, the monitor that's used is the monitor that most of the stage is on at the time. Note: If the user has the opportunity to move the browser from one monitor to another between retrieving the value and going to full screen size, the value could be incorrect. If you retrieve the value in an event handler that sets to , the value will be correct. This is the pixel width of the monitor and is the same as the stage width would be if is set to and is set to . \n\n \n\n \n\n \n\nThis example creates a green rectangle the size of the stage and places a red square on it that it activates as a button. Clicking the red square triggers the event handler, which sets the property and enters full screen mode. To set the property, the event handler starts with the location and dimensions of the red square. It then compares the aspect ratio (width divided by height) of the red square to the aspect ratio of the stage at full screen width and height so that it can expand the rectangle ( ) to match the screen's aspect ratio. The result is that the red square occupies the entire height of the monitor with the green background visible on each side. If the aspect ratio was not matched, the stage background color, which is white by default, would show on each side instead of the green background. This example creates a green rectangle the size of the stage and places a red square on it that it activates as a button. Clicking the red square triggers theevent handler, which sets theproperty and enters full screen mode. To set theproperty, the event handler starts with the location and dimensions of the red square. It then compares the aspect ratio (width divided by height) of the red square to the aspect ratio of the stage at full screen width and height so that it can expand the rectangle () to match the screen's aspect ratio. The result is that the red square occupies the entire height of the monitor with the green background visible on each side. If the aspect ratio was not matched, the stage background color, which is white by default, would show on each side instead of the green background. Note: Test this example in the browser. In the Flash Publish Settings dialog, on the HTML tab, select the template Flash Only - Allow Full Screen. Specify the Flash Player version 9.0.115.0, and make sure the Flash and HTML formats are selected on the Formats tab. Then publish and open the resulting HTML file in the browser. import flash.display.Sprite; import flash.display.Stage; import flash.display.StageDisplayState; import flash.events.MouseEvent; import flash.geom.Rectangle; // cover the stage with a green rectangle var greenRect:Sprite = new Sprite(); greenRect.graphics.beginFill(0x00FF00); greenRect.graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight); addChild(greenRect); // create red square on stage, turn it into a button for going to full screen var redSquare:Sprite = new Sprite(); redSquare.graphics.beginFill(0xFF0000); redSquare.graphics.drawRect(0, 0, 300, 300); redSquare.x = 50; redSquare.y = 50; redSquare.addEventListener(MouseEvent.CLICK, enterFullScreen); redSquare.buttonMode = true; addChild(redSquare); function enterFullScreen(e:MouseEvent):void { // we will go to full screen zoomed in on the red square var redSquare:Sprite = e.target as Sprite; var fullScreenRect:Rectangle = new Rectangle(redSquare.x, redSquare.y, redSquare.width, redSquare.height); // calculate aspect ratio of the red square var rectAspectRatio:Number = fullScreenRect.width / fullScreenRect.height; // calculate aspect ratio of the screen var screenAspectRatio:Number = stage.fullScreenWidth / stage.fullScreenHeight; // change the fullScreenRect so that it covers the entire screen, keeping it centered on the redSquare // try commenting out this section to see what happens if you do not fix the aspect ratio. if (rectAspectRatio > screenAspectRatio) { var newHeight:Number = fullScreenRect.width / screenAspectRatio; fullScreenRect.y -= ((newHeight - fullScreenRect.height) / 2); fullScreenRect.height = newHeight; } else if (rectAspectRatio < screenAspectRatio) { var newWidth:Number = fullScreenRect.height * screenAspectRatio; fullScreenRect.x -= ((newWidth - fullScreenRect.width) / 2); fullScreenRect.width = newWidth; } // go to full screen stage.fullScreenSourceRect = fullScreenRect; stage.displayState = StageDisplayState.FULL_SCREEN; } [read-write] Indicates the height of the display object, in pixels. The height is calculated based on the bounds of the content of the display object. When you set the property, the property is adjusted accordingly, as shown in the following code: Except for TextField and Video objects, a display object with no content (such as an empty sprite) has a height of 0, even if you try to set to a different value. \n\n \n\n \n\n \n\n \n\n — Referencing the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. — It is always illegal to set the property of a Stage object, even if the calling object is the Stage owner (the main SWF file). [read-write] Determines whether or not the children of the object are mouse, or user input device, enabled. If an object is enabled, a user can interact with it by using a mouse or user input device. The default is . This property is useful when you create a button with an instance of the Sprite class (instead of using the SimpleButton class). When you use a Sprite instance to create a button, you can choose to decorate the button by using the method to add additional Sprite instances. This process can cause unexpected behavior with mouse events because the Sprite instances you add as children can become the target object of a mouse event when you expect the parent instance to be the target object. To ensure that the parent instance serves as the target objects for mouse events, you can set the property of the parent instance to . No event is dispatched by setting this property. You must use the method to create interactive functionality. \n\n \n\n \n\n \n\n \n\n — Referencing the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. [read-write] Set to to enable mouse locking. Enabling mouse locking turns off the cursor, and allows mouse movement with no bounds. You can only enable mouse locking in full-screen mode for desktop applications. Setting it on applications not in full-screen mode, or for applications on mobile devices, throws an exception. Mouse locking is disabled automatically and the mouse cursor is made visible again when:\n• The user exits full-screen mode by using the Esc key (all platforms), Control-W (Windows), Command-W (Mac), or Alt-F4 (Windows).\n• Any settings UI is visible, including all privacy dialog boxes.\n• A native dialog box is shown, such as a file upload dialog box. When exiting full screen mode, this property is automatically set to . Events associated with mouse movement, such as the event, use the MouseEvent class to represent the event object. When mouse locking is disabled, use the and properties to determine the location of the mouse. When mouse locking is enabled, use the and properties to determine the location of the mouse. The and properties contain changes in the position of the mouse since the last event, instead of absolute coordinates of the mouse location. Note: When the application is in full-screen mode, mouse event listeners attached to display objects other than the Stage are not dispatched. Therefore, to receive mouse deltas and any other mouse events when is , attach the mouse event listeners to the Stage object. \n\n \n\n \n\n [read-only] A reference to the NativeWindow object containing this Stage. The window represents the native operating system window; the Stage represents the content contained by the window. This property is only valid for content running in AIR on platforms that support the NativeWindow class. On other platforms, this property will be . In Flash Player (content running in a browser), this property will also be . \n\n \n\n [read-only] Returns the number of children of this object. \n\n \n\n \n\n \n\n — Referencing the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. [read-only] The current orientation of the stage. This property is set to one of four values, defined as constants in the StageOrientation class: The screen is in the default orientation (right-side up). The screen is rotated right. The screen is rotated upside down. The application has not yet determined the initial orientation of the screen. You can add an event listener for the event To set the stage orientation, use the method. Important: orientation property is supported on Android devices from 2.6 namespace onwards. \n\n \n\n [read-write] A value from the StageQuality class that specifies which rendering quality is used. The following are valid values:\n• —Low rendering quality. Graphics are not anti-aliased, and bitmaps are not smoothed, but runtimes still use mip-mapping.\n• —Medium rendering quality. Graphics are anti-aliased using a 2 x 2 pixel grid, bitmap smoothing is dependent on the setting. Runtimes use mip-mapping. This setting is suitable for movies that do not contain text.\n• —High rendering quality. Graphics are anti-aliased using a 4 x 4 pixel grid, and bitmap smoothing is dependent on the setting. Runtimes use mip-mapping. This is the default rendering quality setting that Flash Player uses.\n• —Very high rendering quality. Graphics are anti-aliased using a 4 x 4 pixel grid. If is the runtime uses a high quality downscale algorithm that produces fewer artifacts (however, using with set to slows performance significantly and is not a recommended setting). Higher quality settings produce better rendering of scaled bitmaps. However, higher quality settings are computationally more expensive. In particular, when rendering scaled video, using higher quality settings can reduce the frame rate. The method uses the value of the property. Alternatively, you can use the method, which lets you specify the parameter to the method, ignoring the current value of . In the desktop profile of Adobe AIR, can be set to or (and the default value is ). Attempting to set it to another value has no effect (and the property remains unchanged). In the moble profile of AIR, all four quality settings are available. The default value on mobile devices is . For content running in Adobe AIR, setting the property of one Stage object changes the rendering quality for all Stage objects (used by different NativeWindow objects). Note: The operating system draws the device fonts, which are therefore unaffected by the property. \n\n \n\n \n\n \n\n \n\n — Calling the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. The operating system draws the device fonts, which are therefore unaffected by theproperty. [read-write] A value from the StageScaleMode class that specifies which scale mode to use. The following are valid values:\n• —The entire application is visible in the specified area without trying to preserve the original aspect ratio. Distortion can occur, and the application may appear stretched or compressed.\n• —The entire application is visible in the specified area without distortion while maintaining the original aspect ratio of the application. Borders can appear on two sides of the application.\n• —The entire application fills the specified area, without distortion but possibly with some cropping, while maintaining the original aspect ratio of the application.\n• —The entire application is fixed, so that it remains unchanged even as the size of the player window changes. Cropping might occur if the player window is smaller than the content. \n\n \n\n \n\n \n\n \n\n — Calling the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. [read-write] Specifies whether to show or hide the default items in the Flash runtime context menu. If the property is set to (the default), all context menu items appear. If the property is set to , only the Settings and About... menu items appear. \n\n \n\n \n\n \n\n \n\n — Calling the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. [read-only] A Rectangle specifying the area of the stage that is currently covered by a soft keyboard. The Rect's components are (0,0,0,0) when the soft keyboard isn't raised. \n\n \n\n [read-only] A list of Stage3D objects available for displaying 3-dimensional content. You can use only a limited number of Stage3D objects at a time. The number of available Stage3D objects depends on the platform and on the available hardware. A Stage3D object draws in front of a StageVideo object and behind the Flash display list. \n\n \n\n [read-write] Specifies whether or not objects display a glowing border when they have focus. \n\n \n\n \n\n \n\n \n\n — Calling the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. [read-write] The current height, in pixels, of the Stage. If the value of the property is set to when the user resizes the window, the Stage content maintains its size while the property changes to reflect the new height size of the screen area occupied by the SWF file. (In the other scale modes, the property always reflects the original height of the SWF file.) You can add an event listener for the event and then use the property of the Stage class to determine the actual pixel dimension of the resized Flash runtime window. The event listener allows you to control how the screen content adjusts when the user resizes the window. Air for TV devices have slightly different behavior than desktop devices when you set the property. If the property is set to and you set the property, the stage height does not change until the next frame of the SWF. Note: In an HTML page hosting the SWF file, both the and tags' attributes must be set to a percentage (such as ), not pixels. If the settings are generated by JavaScript code, the parameter of the method must be set to a percentage, too. This percentage is applied to the value. \n\n \n\n \n\n \n\n \n\n — Calling the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. [read-only] A list of StageVideo objects available for playing external videos. You can use only a limited number of StageVideo objects at a time. When a SWF begins to run, the number of available StageVideo objects depends on the platform and on available hardware. To use a StageVideo object, assign a member of the Vector object to a StageVideo variable. All StageVideo objects are displayed on the stage behind any display objects. The StageVideo objects are displayed on the stage in the order they appear in the Vector object. For example, if the Vector object contains three entries:\n• The StageVideo object in the 0 index of the Vector object is displayed behind all StageVideo objects.\n• The StageVideo object at index 1 is displayed in front of the StageVideo object at index 0.\n• The StageVideo object at index 2 is displayed in front of the StageVideo object at index 1. Use the property to change this ordering. Note: AIR for TV devices support only one StageVideo object. \n\n \n\n \n\n \n\nThe following code illustrates how to get a StageVideo object: The following code illustrates how to get a StageVideo object: [read-write] Specifies the current width, in pixels, of the Stage. If the value of the property is set to when the user resizes the window, the Stage content maintains its defined size while the property changes to reflect the new width size of the screen area occupied by the SWF file. (In the other scale modes, the property always reflects the original width of the SWF file.) You can add an event listener for the event and then use the property of the Stage class to determine the actual pixel dimension of the resized Flash runtime window. The event listener allows you to control how the screen content adjusts when the user resizes the window. Air for TV devices have slightly different behavior than desktop devices when you set the property. If the property is set to and you set the property, the stage width does not change until the next frame of the SWF. Note: In an HTML page hosting the SWF file, both the and tags' attributes must be set to a percentage (such as ), not pixels. If the settings are generated by JavaScript code, the parameter of the method must be set to a percentage, too. This percentage is applied to the value. \n\n \n\n \n\n \n\n \n\n — Calling the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. [read-only] The orientations supported by the current device. You can use the orientation strings included in this list as parameters for the method. Setting an unsupported orientation fails without error. Set the stage orientation to the default orientation (right-side up). Set the stage orientation to be rotated right. Set the stage orientation to be rotated left. Set the stage orientation to be rotated upside down. \n\n \n\n [read-only] Whether the application supports changes in the stage orientation (and device rotation). Currently, this property is only in AIR applications running on mobile devices. \n\n \n\n [read-write] Determines whether the children of the object are tab enabled. Enables or disables tabbing for the children of the object. The default is . Note: Do not use the property with Flex. Instead, use the property. \n\n \n\n \n\n \n\n \n\n — Referencing the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. [read-only] \n\n \n\n \n\n \n\n — Referencing the property of a Stage object throws an exception because the Stage class does not implement this property. To avoid this, call the property of a display object container other than the Stage object. [read-write] This represents current state of vsync of underlying graphics solution We can enable/disable vsync, so we would immediately render without waiting for next VSYNC'ed state. Reading the property is valid at anytime. However, setting the property is valid only after the VsyncStateChangeAvailabilityEvent has fired. \n\n \n\n \n\n [read-write] Indicates the width of the display object, in pixels. The width is calculated based on the bounds of the content of the display object. When you set the property, the property is adjusted accordingly, as shown in the following code: Except for TextField and Video objects, a display object with no content (such as an empty sprite) has a width of 0, even if you try to set to a different value. \n\n \n\n \n\n \n\n \n\n — Referencing the property of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. — It is always illegal to set the property of a Stage object, even if you are the Stage owner. [read-only] Indicates whether GPU compositing is available and in use. The value is only when all three of the following conditions exist:\n• GPU compositing is in use. Specifically, the property indicates one of the following:\n• GPU compositing has not been requested or is unavailable. In this case, the property value is .\n• GPU compositing has been requested (if applicable and available), but the environment is operating in \"fallback mode\" (not optimal rendering) due to limitations of the content. In this case, the property value is .\n• GPU compositing has been requested (if applicable and available), and the environment is operating in the best mode. In this case, the property value is also . In other words, the property identifies the capability and state of the rendering environment. For runtimes that do not support GPU compositing, such as AIR 1.5.2, the value is always , because (as stated above) the value is only when GPU compositing has been requested, is available, and is in use. The property is useful to determine, at runtime, whether or not GPU compositing is in use. The value of indicates if your content is going to be scaled by hardware, or not, so you can present graphics at the correct size. You can also determine if you're rendering in a fast path or not, so that you can adjust your content complexity accordingly. For Flash Player in a browser, GPU compositing can be requested by the value of for the HTML parameter in the page hosting the SWF file. For other configurations, GPU compositing can be requested in the header of a SWF file (set using SWF authoring tools). However, the property does not identify the current rendering performance. Even if GPU compositing is \"in use\" the rendering process might not be operating in the best mode. To adjust your content for optimal rendering, use a Flash runtime debugger version, and set the in your mm.cfg file. Note: This property is always when referenced from ActionScript that runs before the runtime performs its first rendering pass. For example, if you examine from a script in Frame 1 of Adobe Flash Professional, and your SWF file is the first SWF file loaded in a new instance of the runtime, then the value is . To get an accurate value, wait until at least one rendering pass has occurred. If you write an event listener for the event of any , the value at is the correct value. \n\n \n\n \n\n \n\nThe following example examines the property after the display object mySprite is rendered, so you can get an accurate value. The following example examines theproperty after the display object mySprite is rendered, so you can get an accurate value. Adds a child DisplayObject instance to this DisplayObjectContainer instance. The child is added to the front (top) of all other children in this DisplayObjectContainer instance. (To add a child to a specific index position, use the method.) If you add a child object that already has a different display object container as a parent, the object is removed from the child list of the other display object container. Note: The command can cause problems with a published SWF file, including security problems and conflicts with other loaded SWF files. There is only one Stage within a Flash runtime instance, no matter how many SWF files you load into the runtime. So, generally, objects should not be added to the Stage, directly, at all. The only object the Stage should contain is the root object. Create a DisplayObjectContainer to contain all of the items on the display list. Then, if necessary, add that DisplayObjectContainer instance to the Stage. — The DisplayObject instance to add as a child of this DisplayObjectContainer instance. — The DisplayObject instance that you pass in the parameter. \n\n — Calling the method of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. Adds a child DisplayObject instance to this DisplayObjectContainer instance. The child is added at the index position specified. An index of 0 represents the back (bottom) of the display list for this DisplayObjectContainer object. For example, the following example shows three display objects, labeled a, b, and c, at index positions 0, 2, and 1, respectively: If you add a child object that already has a different display object container as a parent, the object is removed from the child list of the other display object container. — The DisplayObject instance to add as a child of this DisplayObjectContainer instance. — The index position to which the child is added. If you specify a currently occupied index position, the child object that exists at that position and all higher positions are moved up one position in the child list. — The DisplayObject instance that you pass in the parameter. \n\n — Calling the method of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event. You can register event listeners on all nodes in the display list for a specific type of event, phase, and priority. JavaScript code in the AIR runtime uses this method to register event listeners for events defined by the AIR APIs. For other JavaScript events (such as the event of the DOM object), you can use standard event handling techniques, as you would for content running in the browser. After you successfully register an event listener, you cannot change its priority through additional calls to . To change a listener's priority, you must first call . Then you can register the listener again with the new priority level. Keep in mind that after the listener is registered, subsequent calls to with a different or value result in the creation of a separate listener registration. For example, if you first register a listener with set to , it listens only during the capture phase. If you call again using the same listener object, but with set to , you have two separate listeners: one that listens during the capture phase and another that listens during the target and bubbling phases. You cannot register an event listener for only the target phase or the bubbling phase. Those phases are coupled during registration because bubbling applies only to the ancestors of the target node. If you no longer need an event listener, remove it by calling , or memory problems could result. Event listeners are not automatically removed from memory because the garbage collector does not remove the listener as long as the dispatching object exists (unless the parameter is set to ). Copying an EventDispatcher instance does not copy the event listeners attached to it. (If your newly created node needs an event listener, you must attach the listener after creating the node.) However, if you move an EventDispatcher instance, the event listeners attached to it move along with it. If the event listener is being registered on a node while an event is being processed on this node, the event listener is not triggered during the current phase but can be triggered during a later phase in the event flow, such as the bubbling phase. If an event listener is removed from a node while an event is being processed on the node, it is still triggered by the current actions. After it is removed, the event listener is never invoked again (unless registered again for future processing). — The listener function that processes the event. This function must accept an Event object as its only parameter and must return nothing The function can have any name. (default = ) — This parameter applies to display objects in the ActionScript 3.0 display list architecture, used by SWF content. Determines whether the listener works in the capture phase or the target and bubbling phases. If is set to , the listener processes the event only during the capture phase and not in the target or bubbling phase. If is , the listener processes the event only during the target or bubbling phase. To listen for the event in all three phases, call twice, once with set to , then again with set to . (default = ) — The priority level of the event listener. The priority is designated by a signed 32-bit integer. The higher the number, the higher the priority. All listeners with priority n are processed before listeners of priority n-1. If two or more listeners share the same priority, they are processed in the order in which they were added. The default priority is 0. (default = ) — Determines whether the reference to the listener is strong or weak. A strong reference (the default) prevents your listener from being garbage-collected. A weak reference does not. Class-level member functions are not subject to garbage collection, so you can set to for class-level member functions without subjecting them to garbage collection. If you set to for a listener that is a nested inner function, the function will be garbage-collected and no longer persistent. If you create references to the inner function (save it in another variable) then it is not garbage-collected and stays persistent. \n\n — Calling the method of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this situation, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. Sets keyboard focus to the interactive object specified by , with the focus direction specified by the parameter. The concept of focus direction must be defined by the application (or application framework). No intrinsic focus sorting of interactive objects exists, although you could use other available properties to establish an ordering principle. For example, you could sort interactive objects according to their positions on the Stage or in the display list. Calling is equivalent to setting the property, with the additional ability to indicate the direction from which the focus is being set. The will dispatch a event on receiving focus. The property of the FocusEvent object will report the setting of the parameter. If you assign an HTMLLoader object to the parameter, the HTMLLoader object selects the appropriate focusable object in the HTML DOM, based on the parameter value. If it is , the focusable object in the HTML DOM at the end of the reading order is given focus. If it is , the focusable object in the HTML DOM at the beginning of the reading order is given focus. If it is , the HTMLLoader object receives focus without changing its current focused element. — The object to focus, or to clear the focus from any element on the Stage. — The direction from which is being focused. Valid values are enumerated as constants in the FocusDirection class. \n\n — If focus cannot be set to the target or direction is not a valid type. Dispatches an event into the event flow. The event target is the EventDispatcher object upon which the method is called. — The Event object that is dispatched into the event flow. If the event is being redispatched, a clone of the event is created automatically. After an event is dispatched, its property cannot be changed, so you must create a new copy of the event for redispatching to work. — A value of if the event was successfully dispatched. A value of indicates failure or that was called on the event. \n\n — Calling the method of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. Checks whether the EventDispatcher object has any listeners registered for a specific type of event. This allows you to determine where an EventDispatcher object has altered handling of an event type in the event flow hierarchy. To determine whether a specific event type actually triggers an event listener, use . The difference between and is that examines only the object to which it belongs, whereas examines the entire event flow for the event specified by the parameter. The event flow applies to the ActionScript 3.0 display list, used in SWF content. When is called from a LoaderInfo object, only the listeners that the caller can access are considered. — A value of if a listener of the specified type is registered; otherwise. \n\n — Calling the method of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. Calling the method signals Flash runtimes to alert display objects on the next opportunity it has to render the display list (for example, when the playhead advances to a new frame). After you call the method, when the display list is next rendered, the Flash runtime sends a event to each display object that has registered to listen for the event. You must call the method each time you want the Flash runtime to send events. The event gives you an opportunity to make changes to the display list immediately before it is actually rendered. This lets you defer updates to the display list until the latest opportunity. This can increase performance by eliminating unnecessary screen updates. The event is dispatched only to display objects that are in the same security domain as the code that calls the method, or to display objects from a security domain that has been granted permission via the method. Determines whether the property returns for security reasons. In other words, returns if the object that has focus belongs to a security sandbox to which the SWF file does not have access. — if the object that has focus belongs to a security sandbox to which the SWF file does not have access. Notify to the runtime that a preloader is complete and request to load the main class. If a preloader class has been defined as the default class for a SWF, then this will be created once it's defined and the rest of the SWF can then be loaded in to memory and processed whilst the preloader is being displayed. Once the rest of the SWF has finished loading, this method can be used to reset the runtime to a stat as if the class definition given by was the default class for the SWF file. — The fully qualified class name to be created as the new 'main' SWF class. — True if the definition of the class was found and instantiated. Removes a child DisplayObject from the specified position in the child list of the DisplayObjectContainer. The property of the removed child is set to , and the object is garbage collected if no other references to the child exist. The index positions of any display objects above the child in the DisplayObjectContainer are decreased by 1. The garbage collector reallocates unused memory space. When a variable or object is no longer actively referenced or stored somewhere, the garbage collector sweeps through and wipes out the memory space it used to occupy if no other references to it exist. — The child index of the DisplayObject to remove. — The DisplayObject instance that was removed. \n\n — Calling the method of a Stage object throws an exception for any caller that is not in the same security sandbox as the object to be removed. To avoid this, the owner of that object can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. Sets the stage to an orientation with the specified aspect ratio. If the stage orientation changes as a result of the method call, the Stage object dispatches an orientationChange event. To check whether device orientation is supported, check the value of the property. AIR profile support: This feature is supported on mobile devices, but it is not supported on desktop operating systems or AIR for TV devices. You can test for support at run time using the property. See AIR Profile Support for more information regarding API support across multiple profiles. — The type code for the desired aspect ratio ( , , or ). \n\n — The value passed as the parameter is not valid. The value must match one of the constants defined in the StageAspectRatio class. Changes the position of an existing child in the display object container. This affects the layering of child objects. For example, the following example shows three display objects, labeled a, b, and c, at index positions 0, 1, and 2, respectively: When you use the method and specify an index position that is already occupied, the only positions that change are those in between the display object's former and new position. All others will stay the same. If a child is moved to an index LOWER than its current index, all children in between will INCREASE by 1 for their index reference. If a child is moved to an index HIGHER than its current index, all children in between will DECREASE by 1 for their index reference. For example, if the display object container in the previous example is named , you can swap the position of the display objects labeled a and b by calling the following code: This code results in the following arrangement of objects: — The child DisplayObject instance for which you want to change the index number. — The resulting index number for the display object. \n\n — Calling the method of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. Sets the stage to the specified orientation. Set the parameter to one of the following four values defined as constants in the StageOrientation class: Set the stage orientation to the default orientation (right-side up). Set the stage orientation to be rotated right. Set the stage orientation to be rotated left. Set the stage orientation to be rotated upside down. Do not set the parameter to or any string value other than those listed in the table. To check whether changing device orientation is supported, check the value of the property. Check the list provided by the property to determine which orientations are supported by the current device. Setting the orientation is an asynchronous operation. It is not guaranteed to be complete immediately after you call the method. Add an event listener for the event to determine when the orientation change is complete. Important: The method was not supported on Android devices before AIR 2.6. Note: The method does not cause an event to be dispatched. — The new orientation of the stage. \n\n — The stage has resized as a result of the call to the method. \n\n — The value passed as the parameter is not valid. The value must match one of the constants defined in the StageOriention class, except for the constant. Themethod does not cause anevent to be dispatched. Swaps the z-order (front-to-back order) of the child objects at the two specified index positions in the child list. All other child objects in the display object container remain in the same index positions. — The index position of the first child object. — The index position of the second child object. \n\n — Calling the method of a Stage object throws an exception for any caller that is not in the same security sandbox as the owner of either of the objects to be swapped. To avoid this, the object owners can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type. This method returns if an event listener is triggered during any phase of the event flow when an event of the specified type is dispatched to this EventDispatcher object or any of its descendants. The difference between the and the methods is that examines only the object to which it belongs, whereas the method examines the entire event flow for the event specified by the parameter. The event flow applies to the ActionScript 3.0 display list, used in SWF content. When is called from a LoaderInfo object, only the listeners that the caller can access are considered. — A value of if a listener of the specified type will be triggered; otherwise. \n\n — Calling the method of a Stage object throws an exception for any caller that is not in the same security sandbox as the Stage owner (the main SWF file). To avoid this, the Stage owner can grant permission to the domain of the caller by calling the method or the method. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide. \n\n \n\n Dispatched when the property of the Stage object is changed. The constant defines the value of the property of an event object. The event applies to the ActionScript 3.0 display list and is not relevant to JavaScript code. This event has the following properties: ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. \n\n \n\n Dispatched when the Stage object enters, or leaves, full-screen mode. A change in full-screen mode can be initiated through ActionScript, or the user invoking a keyboard shortcut, or if the current focus leaves the full-screen window. The constant defines the value of the property of a event object. This event has the following properties: if the display state is full screen or if it is normal. ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. \n\n \n\n Dispatched by the Stage object when the pointer moves out of the stage area. If the mouse button is pressed, the event is not dispatched. The constant defines the value of the property of a event object. This event has the following properties: ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. The Stage object. The is not always the object in the display list that registered the event listener. Use the property to access the object in the display list that is currently processing the event. \n\n \n\n Dispatched by the Stage object when the stage orientation changes. Orientation changes can occur when the user rotates the device, opens a slide-out keyboard, or when the is called. Note: If the property is , then the stage orientation does not change when a device is rotated. Thus, StageOrientationEvents are only dispatched for device rotation when is . The constant defines the value of the property of a event object. This event has the following properties: The new orientation of the stage. The old orientation of the stage. The Stage object that dispatched the orientation change. Indicates the object that is actively processing the Event object with an event listener. ; it is too late to cancel the change. \n\n Dispatched by the Stage object when the stage orientation begins changing. Important: orientationChanging events are not dispatched on Android devices.\n• If the property is , then the stage orientation does not change when a device is rotated. Thus, StageOrientationEvents are only dispatched for device rotation when is .\n• When you set the orientation programatically with the method, the event is not dispatched. \n\n \n\n Dispatched when the property of the Stage object is set to and the SWF file is resized. Also dispatched when screen orientation changes while in full screen mode in Flash Player 15 and later. The constant defines the value of the property of a event object. This event has the following properties: ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. \n\n Dispatched by the Stage object when the state of the stageVideos property changes. \n\n \n\nThe following example uses the class to dispatch events whenever the stage is activated or resized. This is accomplished by performing the following steps:\n• The class constructor first sets the Flash application to be fixed, regardless of the size of the Flash Player window and then adds two event listeners with the and methods.\n• The method runs when the left mouse button is clicked.\n• The method runs when the stage is resized. The following example uses theclass to dispatch events whenever the stage is activated or resized. This is accomplished by performing the following steps: \n\n Dispatched by the Stage object when the state of the vsync property is changed. Defines the value of the type property of a event object. \n\n \n\nThe following example uses the class to dispatch events whenever the vsync state of the stage can be enabled or disabled. This is accomplished by performing the following steps:\n• The constructor first fires the stage event\n• Then the method is called in which it is checked whether the is avalable or not.\n• If available one can toggle the vsync state of the stage or else the value of the property remains read only.\n• The value of vsync enable can be triggered if and only if the event is fired. package { import flash.display.Sprite; import flash.events.VsyncStateChangeAvailabilityEvent public class VsyncExample extends Sprite { public function VsyncExample() { stage.addEventListener(VsyncStateChangeAvailabilityEvent.VSYNC_STATE_CHANGE_AVAILABILITY, onVsyncStateChangeAvailability); } public function onVsyncStateChangeAvailability(event:VsyncStateChangeAvailabilityEvent):void { if (event.available) { // vsyncEnabled is now changeable and can be turned off. stage.vsyncEnabled = false; // Now, AS can change VSYNC state because event.available is true trace(\"vsyncEnabled of Stage object is changeable\"); } else { // vsyncEnabled is not changeable now. This could be due to fallback to software rendering, for example. stage.vsyncEnabled = false; // This will be ignored because event.available is now false trace(\"vsyncEnabled of Stage object is read-only\"); trace(\"Current value of vsyncEnabled of Stage object is \"+ stage.vsyncEnabled); } } } } The following example uses theclass to dispatch events whenever the vsync state of the stage can be enabled or disabled. This is accomplished by performing the following steps:"
    },
    {
        "link": "https://stackoverflow.com/questions/15993359/how-to-modify-sprite-class-in-actionscript-3",
        "document": "I recommend picking another class name for your subclass. Even if you find a way to replace Adobe's Sprite with your own, this is a bad idea. Also, unless you have the source code for an existing subclass of Sprite, I recommend against trying to change it directly (eg. recompiling as a child of your Sprite class rather than Adobe's Sprite class).\n\nSprite is a very commonly used class, and you will probably want another developer to be able to follow your code some day. If you use 'EnhancedSprite' or similar, it will be obvious that there is more/different functionality available.\n\nIt is obvious why you need to use the full class path when you try to use the same class name. This will always be the case within your Sprite/EnhancedSprite file. If you really must use the name 'Sprite', You need to find a way to have your actionscript compiler import all of the Adobe classes except Sprite, plus your own sprite class.\n\nIf you want all sprite subclasses to extend from your improved class, you basically need to recompile them all (MovieClip being the big one I personally don't mess with under the hood). This is also a bad idea, because an existing subclass could have a method matching the name of your own method and would cause further problems. For example, if you have a method stop(), how will MovieClip be compiled? Before using 'doStuff' as a method name, you would have to check that no existing subclass of Sprite already has that as a method or variable name, whether public or private."
    },
    {
        "link": "https://doc.neolao.com/as3_langref/flash/display/Stage.html",
        "document": "The Stage class represents the main drawing area. For SWF content running in the browser (in Flash® Player), the Stage represents the entire area where Flash content is shown. For content running in AIR on desktop operating systems, each NativeWindow object has a corresponding Stage object. The Stage object is not globally accessible. You need to access it through the property of a DisplayObject instance. The Stage class has several ancestor classes — DisplayObjectContainer, InteractiveObject, DisplayObject, and EventDispatcher — from which it inherits properties and methods. Many of these properties and methods are either inapplicable to Stage objects, or require security checks when called on a Stage object. The properties and methods that require security checks are documented as part of the Stage class. In addition, the following inherited properties are inapplicable to Stage objects. If you try to set them, an IllegalOperationError is thrown. These properties may always be read, but since they cannot be set, they will always contain default values. Some events that you might expect to be a part of the Stage class, such as , , , and , cannot be Stage events because a reference to the Stage object cannot be guaranteed to exist in every situation where these events are used. Because these events cannot be dispatched by the Stage object, they are instead dispatched by every DisplayObject instance, which means that you can add an event listener to any DisplayObject instance to listen for these events. These events, which are part of the DisplayObject class, are called broadcast events to differentiate them from events that target a specific DisplayObject instance. Two other broadcast events, and , belong to DisplayObject's superclass, EventDispatcher. The and events behave similarly to the DisplayObject broadcast events, except that these two events are dispatched not only by all DisplayObject instances, but also by all EventDispatcher instances and instances of other EventDispatcher subclasses. For more information on broadcast events, see the DisplayObject class."
    },
    {
        "link": "https://stackoverflow.com/questions/25902767/actionscript-3-and-nativemenus",
        "document": "If I understand correctly, the menu that comes up at the top of my app (File, View, Control, Help) is a native menu that comes from the operating system instead of as3. I don't want to have a menu there, and I am looking for ways to remove it. Here is my current code, based on the information here.\n\nI get the following errors:\n\nSuggestions? Or is there a tutorial I could use?\n\nLater note- the statement that \"Static methods do belong to class itself not instances of it\" makes perfect sense. However, I am getting the same errors. I'm guessing that I am not importing the right files, but have not been able to find the correct files. Right now I'm importing:\n\nIf I try to import \"flash.desktop.NativeApplication\" I get another error."
    },
    {
        "link": "https://stackoverflow.com/questions/9858806/loading-and-using-swf-files",
        "document": "I'm new to AS3, and am trying to understand how externally loaded SWFs work in AS3. Since Flash 4/5, it was common to have one main SWF file in a Flash web project, and then load other SWF files into it, often for various \"sections\" of a website or web project. In the main file, we'd have masks animating the container movieclip(in which external sections/SWF files were loaded) and have animations and transitions play as the section finished loading and the loaded content was displayed.\n\nIn AS3, I've used the Loader class to load and display the external file, my main problem is in communicating with the loaded content, call it's functions, or call root functions from it.\n\nIn AS2, we could use someMovieClip.loadMovie(\"ExternalContent.swf\") and the ExternalContent file would load inside someMovieClip. You could access functions on the \"External.swf\" main timeline using someMovieClip.function();. And inside the \"ExternalContent.swf\", we could use _root.function() to access functions in the main file ExternalContent was being loaded into. Doing this in AS3 seems bizarre and neurotic, and I feel like I'm missing something fairly basic here.\n\nThe boxesPrompt() function inside the \"ExternalContent.swf\" just traces it's parent, grand-parent, and great grand-parent - trace(this.parent.parent.parent);. And when I call that function inside the onLoaded event-handler using \"event.target.content.boxes.boxesPrompt()\", it shows that the Boxes object(which was on the main timeline of External.SWF), has a parent movieclip, a grand-parent sprite, and a great grand-parent object mainTimeline.\n\nI thought re-parenting the loaded content into the sprite would allow me to access the loaded content as easily as loadMovie() used to be - accessing loaded content like it was present directly inside the clip it was loaded in. But that doesn't work at all.\n\nSo to rephrase, my question is:\n• None How do I communicate from the main \"loader\" SWF file, with the content that's loaded in. I don't want to communicate using event.target.content.{etc} because then I'd only be able to address the loaded content inside the Loader's event.complete event handler.\n• None How do I \"re-parent\" loaded content, so I can place it inside some movieclip/sprite on the main timeline of the loader file, rather than using some really long convoluted way.\n• None How to communicate from inside the loaded content, to the main/loader file. Previously, we'd use _root.functionName() to do stuff like play some animation transitioning from the current externally loaded \"section\" to another section. How'd I go about doing that."
    },
    {
        "link": "https://airsdk.dev/reference/actionscript/3.0/flash/display/Loader.html",
        "document": "The Loader class is used to load SWF files or image (JPG, PNG, or GIF) files. Use the method to initiate loading. The loaded display object is added as a child of the Loader object. The Loader class is used to load SWF files or image (JPG, PNG, or GIF) files. Use themethod to initiate loading. The loaded display object is added as a child of the Loader object. Use the URLLoader class to load text or binary data. The Loader class overrides the following methods that it inherits, because a Loader object can only have one child display object—the display object that it loads. Calling the following methods throws an exception: , , , , and . To remove a loaded display object, you must remove the Loader object from its parent DisplayObjectContainer child array. In AIR applications on iOS, you can only load a SWF file containing ActionScript from the application package. This restriction includes any ActionScript, such as assets with class names exported for ActionScript. For loading any SWF file, you must load the SWF using the same application domain as the parent SWF, as shown in the following example: var loader:Loader = new Loader(); var url:URLRequest = new URLRequest(\"swfs/SecondarySwf.swf\"); var loaderContext:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain, null); loader.load(url, loaderContext); In addition, on iOS you can't load a SWF file that contains any ActionScript ByteCode (ABC) then unload it and reload it. If you attempt to do this, the runtime throws error 3764. Prior to AIR 3.6, only SWF files that do not contain ActionScript bytecode can be loaded, regardless of whether they're loaded from the application package or over a network. As an alternative to using an external SWF file with ActionScript, create a SWC library and link it in to your main SWF. AIR 3.7 and higher supports loading of externally hosted secondary SWFs. The detailed description about this feature can be found here. These iOS restrictions restrictions do not apply when an application is running in the iOS Simulator (ipa-test-interpreter-simulator or ipa-debug-interpreter-simulator) or interpreter mode (ipa-test-interpreter or ipa-debug-interpreter.) When you use the Loader class, consider the Flash Player and Adobe AIR security model:\n• You can load content from any accessible source.\n• Loading is not allowed if the calling SWF file is in a network sandbox and the file to be loaded is local.\n• If the loaded content is a SWF file written with ActionScript 3.0, it cannot be cross-scripted by a SWF file in another security sandbox unless that cross-scripting arrangement was approved through a call to the or the method in the loaded content file.\n• If the loaded content is an AVM1 SWF file (written using ActionScript 1.0 or 2.0), it cannot be cross-scripted by an AVM2 SWF file (written using ActionScript 3.0). However, you can communicate between the two SWF files by using the LocalConnection class.\n• If the loaded content is an image, its data cannot be accessed by a SWF file outside of the security sandbox, unless the domain of that SWF file was included in a URL policy file at the origin domain of the image.\n• Movie clips in the local-with-file-system sandbox cannot script movie clips in the local-with-networking sandbox, and the reverse is also prevented.\n• You cannot connect to commonly reserved ports. For a complete list of blocked ports, see \"Restricting Networking APIs\" in the ActionScript 3.0 Developer's Guide. However, in AIR, content in the security sandbox (content installed with the AIR application) are not restricted by these security limitations. For more information related to security, see the Flash Player Developer Center Topic: Security. When loading a SWF file from an untrusted source (such as a domain other than that of the Loader object's root SWF file), you may want to define a mask for the Loader object, to prevent the loaded content (which is a child of the Loader object) from drawing to portions of the Stage outside of that mask, as shown in the following code: import flash.display.*; import flash.net.URLRequest; var rect:Shape = new Shape(); rect.graphics.beginFill(0xFFFFFF); rect.graphics.drawRect(0, 0, 100, 100); rect.graphics.endFill(); addChild(rect); var ldr:Loader = new Loader(); ldr.mask = rect; var url:String = \"http://www.unknown.example.com/content.swf\"; var urlReq:URLRequest = new URLRequest(url); ldr.load(urlReq); addChild(ldr); Note: App Transport Security is being introduced from Apple in iOS9, which doesnt allow unsecure connections between App and Web services. Due to this change all the connections which are made to Unsecure web sites via Loader, URLLoader will discontinue and not work due to App Transport Security. Please specify exceptions to the default behaviour by adding keys to Info.plist in your app. To turn off the feature completely you can add following in your Info.plist and it will work as before. Please specify exceptions to the default behavior by adding keys to InfoAdditions tag of application descriptor of your app. <iPhone> <InfoAdditions> <![CDATA[ <key>NSAppTransportSecurity</key> <dict> <key>NSExceptionDomains</key> <dict> <key>www.example.com</key> <dict> <!--Include to allow subdomains--> <key>NSIncludesSubdomains</key> <true/> <!--Include to allow HTTP requests--> <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key> <true/> <!--Include to specify minimum TLS version--> <key>NSTemporaryExceptionMinimumTLSVersion</key> <string>TLSv1.1</string> </dict> </dict> </dict> ]]> </InfoAdditions> </iPhone> \n\n\n\n[read-only] Contains the root display object of the SWF file or image (JPG, PNG, or GIF) file that was loaded by using the or methods. \n\n \n\n \n\n \n\n — The loaded SWF file or image file belongs to a security sandbox to which you do not have access. For a loaded SWF file, you can avoid this situation by having the file call the method or by having the loading file specify a parameter with its property set to when you call the or method. [read-only] Returns a LoaderInfo object corresponding to the object being loaded. LoaderInfo objects are shared between the Loader object and the loaded content object. The LoaderInfo object supplies loading progress information and statistics about the loaded file. Events related to the load are dispatched by the LoaderInfo object referenced by the property of the Loader object. The property is set to a valid LoaderInfo object, even before the content is loaded, so that you can add event listeners to the object prior to the load. To detect uncaught errors that happen in a loaded SWF, use the property, not the property. \n\n \n\n \n\n \n\nThe following example shows how you can load and position an image in ActionScript 3.0 using the Loader class and the complete event on the Loader object's contentLoaderInfo property. Example provided by var url:String = \"http://www.helpexamples.com/flash/images/image2.jpg\"; var urlRequest:URLRequest = new URLRequest(url); var loader:Loader = new Loader(); loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loader_complete); loader.load(urlRequest); addChild(loader); function loader_complete(evt:Event):void { var target_mc:Loader = evt.currentTarget.loader as Loader; target_mc.x = (stage.stageWidth - target_mc.width) / 2; target_mc.y = (stage.stageHeight - target_mc.height) / 2; } The following example shows how you can load and position an image in ActionScript 3.0 using the Loader class and the complete event on the Loader object's contentLoaderInfo property. Example provided by ActionScriptExamples.com [read-only] An object that dispatches an event when an unhandled error occurs in the SWF that's loaded by this Loader object. An uncaught error happens when an error is thrown outside of any blocks or when an ErrorEvent object is dispatched with no registered listeners. Note that a Loader object's property dispatches events that bubble through it, not events that it dispatches directly. It never dispatches an in the target phase. It only dispatches the event in the capture and bubbling phases. To detect an uncaught error in the current SWF (the SWF in which the Loader object is defined) use the property instead. If the content loaded by the Loader object is an AVM1 (ActionScript 2) SWF file, uncaught errors in the AVM1 SWF file do not result in an event. \n\n \n\n \n\n \n\nThe following example demonstrates the use of an uncaught error event handler to detect uncaught errors in a loaded SWF. The example defines an event handler to detect uncaught errors. The following example demonstrates the use of an uncaught error event handler to detect uncaught errors in a loaded SWF. The example defines anevent handler to detect uncaught errors. In the constructor, the code creates a Loader object and registers a listener for the event dispatched by the Loader object's property. In the method, the code checks the data type of the property and responds accordingly. package { import flash.display.Loader; import flash.display.Sprite; import flash.events.ErrorEvent; import flash.events.UncaughtErrorEvent; import flash.net.URLRequest; public class LoaderUncaughtErrorEventExample extends Sprite { private var ldr:Loader; public function LoaderUncaughtErrorEventExample() { ldr = new Loader(); ldr.load(new URLRequest(\"child.swf\")); ldr.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler); } private function uncaughtErrorHandler(event:UncaughtErrorEvent):void { if (event.error is Error) { var error:Error = event.error as Error; // do something with the error } else if (event.error is ErrorEvent) { var errorEvent:ErrorEvent = event.error as ErrorEvent; // do something with the error } else { // a non-Error, non-ErrorEvent type was thrown and uncaught } } } } Creates a Loader object that you can use to load files, such as SWF, JPEG, GIF, or PNG files. Call the method to load the asset as a child of the Loader instance. You can then add the Loader object to the display list (for instance, by using the method of a DisplayObjectContainer instance). The asset appears on the Stage as it loads. You can also use a Loader instance \"offlist,\" that is without adding it to a display object container on the display list. In this mode, the Loader instance might be used to load a SWF file that contains additional modules of an application. To detect when the SWF file is finished loading, you can use the events of the LoaderInfo object associated with the property of the Loader object. At that point, the code in the module SWF file can be executed to initialize and start the module. In the offlist mode, a Loader instance might also be used to load a SWF file that contains components or media assets. Again, you can use the LoaderInfo object event notifications to detect when the components are finished loading. At that point, the application can start using the components and media assets in the library of the SWF file by instantiating the ActionScript 3.0 classes that represent those components and assets. To determine the status of a Loader object, monitor the following events that the LoaderInfo object associated with the property of the Loader object:\n• The event is dispatched when loading begins.\n• The , or event is dispatched if the file cannot be loaded or if an error occured during the load process.\n• The event fires continuously while the file is being loaded.\n• The event is dispatched when a file completes downloading, but before the loaded movie clip's methods and properties are available.\n• The event is dispatched after the properties and methods of the loaded SWF file are accessible, so you can begin manipulating the loaded SWF file. This event is dispatched before the handler. In streaming SWF files, the event can occur significantly earlier than the event. For most purposes, use the handler. Notes (iOS only): In AIR applications on iOS, you can only load a SWF file containing ActionScript from the application package. This restriction includes any ActionScript, such as assets with class names exported for ActionScript. For loading any SWF file, you must load the SWF using the same application domain as the parent SWF. Prior to AIR 3.6, only SWF files that do not contain ActionScript bytecode can be loaded, regardless of whether they're loaded from the application package or over a network. As an alternative to using an external SWF file with ActionScript, create a SWC library and link it in to your main SWF. These restrictions do not apply when an application is running in the iOS Simulator (ipa-test-interpreter-simulator or ipa-debug-interpreter-simulator) or interpreter mode (ipa-test-interpreter or ipa-debug-interpreter.) Cancels a method operation that is currently in progress for the Loader instance. Loads a SWF, JPEG, progressive JPEG, unanimated GIF, or PNG file into an object that is a child of this Loader object. If you load an animated GIF file, only the first frame is displayed. As the Loader object can contain only a single child, issuing a subsequent request terminates the previous request, if still pending, and commences a new load. Note: In AIR 1.5 and Flash Player 10, the maximum size for a loaded image is 8,191 pixels in width or height, and the total number of pixels cannot exceed 16,777,215 pixels. (So, if an loaded image is 8,191 pixels wide, it can only be 2,048 pixels high.) In Flash Player 9 and earlier and AIR 1.1 and earlier, the limitation is 2,880 pixels in height and 2,880 pixels in width. A SWF file or image loaded into a Loader object inherits the position, rotation, and scale properties of the parent display objects of the Loader object. Use the method to remove movies or images loaded with this method, or to cancel a load operation that is in progress. You can prevent a SWF file from using this method by setting the parameter of the the and tags in the HTML page that contains the SWF content. In AIR applications on iOS, you can only load a SWF file containing ActionScript from the application package. This restriction includes any ActionScript, such as assets with class names exported for ActionScript. For loading any SWF file, you must load the SWF using the same application domain as the parent SWF, as shown in the following example: var loader:Loader = new Loader(); var url:URLRequest = new URLRequest(\"swfs/SecondarySwf.swf\"); var loaderContext:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain, null); loader.load(url, loaderContext); In addition, on iOS you can't load a SWF file that contains any ActionScript ByteCode (ABC) then unload it and reload it. If you attempt to do this, the runtime throws error 3764. Prior to AIR 3.6, only SWF files that do not contain ActionScript bytecode can be loaded, regardless of whether they're loaded from the application package or over a network. As an alternative to using an external SWF file with ActionScript, create a SWC library and link it in to your main SWF. These restrictions do not apply when an application is running in the iOS Simulator (ipa-test-interpreter-simulator or ipa-debug-interpreter-simulator) or interpreter mode (ipa-test-interpreter or ipa-debug-interpreter.) When you use this method, consider the Flash Player security model, which is described in the Loader class description. In Flash Player 10 and later, if you use a multipart Content-Type (for example \"multipart/form-data\") that contains an upload (indicated by a \"filename\" parameter in a \"content-disposition\" header within the POST body), the POST operation is subject to the security rules applied to uploads:\n• The POST operation must be performed in response to a user-initiated action, such as a mouse click or key press.\n• If the POST operation is cross-domain (the POST target is not on the same server as the SWF file that is sending the POST request), the target server must provide a URL policy file that permits cross-domain access. Also, for any multipart Content-Type, the syntax must be valid (according to the RFC2046 standard). If the syntax appears to be invalid, the POST operation is subject to the security rules applied to uploads. For more information related to security, see the Flash Player Developer Center Topic: Security. — The absolute or relative URL of the SWF, JPEG, GIF, or PNG file to be loaded. A relative path must be relative to the main SWF file. Absolute URLs must include the protocol reference, such as http:// or file:///. Filenames cannot include disk drive specifications. (default = ) — A LoaderContext object, which has properties that define the following:\n• Whether or not to check for the existence of a policy file upon loading the object\n• The ApplicationDomain for the loaded object\n• The SecurityDomain for the loaded object\n• The ImageDecodingPolicy for the loaded image object If the parameter is not specified or refers to a null object, the loaded content remains in its own security domain. iOS only: When calling the method in AIR for iOS, the LoaderContext instance must specify the main application domain ( ). For complete details, see the description of the properties in the LoaderContext class. \n\n — Dispatched by the object if the property has been specified and it is not possible to add the loaded content as a child to the specified DisplayObjectContainer. This could happen if the loaded content is a or if the call to the requestedContentParent throws an error. — Dispatched by the object when the file has completed loading. The event is always dispatched after the event. — Dispatched by the object when a network request is made over HTTP and Flash Player can detect the HTTP status code. — Dispatched by the object when the properties and methods of the loaded SWF file are accessible. The event always precedes the event. — Dispatched by the object when an input or output error occurs that causes a load operation to fail. — Dispatched by the object when the loading operation starts. — Dispatched by the object as data is received while load operation progresses. — Dispatched by the object if a SWF file in the local-with-filesystem sandbox attempts to load content in the local-with-networking sandbox, or vice versa. — Dispatched by the object if a load request is made to a secure server that has an invalid (e.g. self-signed) certificate. Listening for this event will override any default OS-specific behaviour and cause the connection to be rejected, unless the method is called on the event. — Dispatched by the object if the property has been specified and the security sandbox of the does not have access to the loaded SWF. — Dispatched by the object when a loaded object is removed. \n\n — The property of the object is not . You should only set the property of a URLRequest object when calling the method when loading a SWZ file (an Adobe platform component). — The value of must be either or . This reflects the fact that you can only place the loaded media in its natural security sandbox or your own (the latter requires a policy file). — Local SWF files may not set to anything other than . It is not permitted to import non-local media into a local sandbox, or to place other local media in anything other than its natural sandbox. — You cannot connect to commonly reserved ports. For a complete list of blocked ports, see \"Restricting Networking APIs\" in the ActionScript 3.0 Developer's Guide. — If the or properties of the parameter are from a disallowed domain. — If a local SWF file is attempting to use the property of the parameter. — If the property of the parameter is a . — If the parameter is set to non-null and has some values which are not Strings. — On iOS, if the application attempts to load a SWF file in an application domain other than the main application domain. — On iOS, if the application attempts to reload a SWF that has been loaded and unloaded and the SWF contains ABC code. — On iOS, if the application attempts to load a SWF file from outside the application package that contains ActionScript code. This error can't be caught. It appears as a dialog box on the app screen with the title \"Uncompiled ActionScript.\" Prior to AIR 3.6, this error occurs when you attempt to load any SWF file containing ActionScript, whether it is external or included in the application package. The method is asynchronous. You must wait for the \"init\" event before accessing the properties of a loaded object. When you use this method, consider the Flash Player security model, which is described in the Loader class description. Note (iOS only): In AIR applications on iOS, you can only load a SWF file containing ActionScript from the application package. This restriction includes any ActionScript, such as assets with class names exported for ActionScript. For loading any SWF file, you must load the SWF using the same application domain as the parent SWF. Prior to AIR 3.6, calling this method has no effect on iOS. — A ByteArray object. The contents of the ByteArray can be any of the file formats supported by the Loader class: SWF, GIF, JPEG, or PNG. (default = ) — A LoaderContext object. Only the property of the LoaderContext object applies; the and properties of the LoaderContext object do not apply. If the parameter is not specified or refers to a null object, the content is loaded into the current security domain— a process referred to as \"import loading\" in Flash Player security documentation. Specifically, if the loading SWF file trusts the remote SWF by incorporating the remote SWF into its code, then the loading SWF can import it directly into its own security domain. For more information related to security, see the Flash Player Developer Center Topic: Security. \n\n — Dispatched by the object if the property has been specified and it is not possible to add the loaded content as a child to the specified DisplayObjectContainer. This could happen if the loaded content is a or if the call to the requestedContentParent throws an error. — Dispatched by the object when the operation is complete. The event is always dispatched after the event. — Dispatched by the object when the properties and methods of the loaded data are accessible. The event always precedes the event. — Dispatched by the object when the runtime cannot parse the data in the byte array. — Dispatched by the object when the operation starts. — Dispatched by the object as data is transfered in memory. — Dispatched by the object if the property has been specified and the security sandbox of the does not have access to the loaded SWF. — Dispatched by the object when a loaded object is removed. \n\n — If the property of the ByteArray object is not greater than 0. — If the or property of the parameter are non-null. — If the property of the parameter is a . — If the parameter is set to non-null and has some values which are not Strings. — On iOS, if the application attempts to load a SWF file in an application domain other than the main application domain. — On iOS, if the application attempts to reload a SWF that has been loaded and unloaded and that contains ABC code. — On iOS, if the application attempts to load a SWF file from outside the application package that contains ActionScript code. This error can't be caught. It appears as a dialog box on the app screen with the message \"Uncompiled ActionScript.\" Prior to AIR 3.6, this error occurs when you attempt to load any SWF file containing ActionScript, whether it is external or included in the application package. — If the provided property of the property is from a disallowed domain. — You cannot connect to commonly reserved ports. For a complete list of blocked ports, see \"Restricting Networking APIs\" in the ActionScript 3.0 Developer's Guide. The method takes an object and loads the binary data. If the data is a progressive stream, such as a video wait for the \"init\" or progress events before accessing the properties of the loaded object. Otherwise, wait for the complete event to make sure that the data is fully loaded. When you use this method, consider the Flash Player security model, which is described in the Loader class description. — An IFilePromise object. The data source of the object can be any of the file formats supported by the Loader class: SWF, GIF, JPEG, or PNG. (default = ) — A LoaderContext object. Only the property of the LoaderContext object applies; the and properties of the LoaderContext object do not apply. If the parameter is not specified or refers to a null object, the content is loaded into the current security domain— a process referred to as \"import loading\" in Flash Player security documentation. Specifically, if the loading SWF file trusts the remote SWF by incorporating the remote SWF into its code, then the loading SWF can import it directly into its own security domain. For more information related to security, see the Flash Player Developer Center Topic: Security. \n\n — Dispatched by the object if the property has been specified and it is not possible to add the loaded content as a child to the specified DisplayObjectContainer. This could happen if the loaded content is a or if the call to the requestedContentParent throws an error. — Dispatched by the object when the operation is complete. The event is always dispatched after the event. — Dispatched by the object when the properties and methods of the loaded data are accessible. The event always precedes the event. — Dispatched by the object when the runtime cannot parse the data in the data source or if the data source stream is not readable. — Dispatched by the object when the operation starts. — Dispatched by the object as data is transfered in memory. — Dispatched by the object if the property has been specified and the security sandbox of the does not have access to the loaded SWF. — Dispatched by the object when a loaded object is removed. \n\n — If the property of the parameter is a . — If the parameter is set to non-null and has some values which are not Strings. — If the object passed as parameter is null Removes a child of this Loader object that was loaded by using the method. The of the associated LoaderInfo object is reset to . The child is not necessarily destroyed because other objects might have references to it; however, it is no longer a child of the Loader object. When you call the method, the Loader object's property is set to . Any visual assets that were loaded with the SWF are unloaded and removed from memory. ActionScript class definitions in the loaded SWF remain in memory, and code in the same application domain as the loaded SWF can access instances of those classes and create new instances. Note (iOS only): Prior to AIR 3.6, this method has no effect on iOS. As a best practice, before you unload a child SWF file, you should explicitly close any streams in the child SWF file's objects, such as LocalConnection, NetConnection, NetStream, and Sound objects. Otherwise, audio in the child SWF file might continue to play, even though the child SWF file was unloaded. To close streams in the child SWF file, add an event listener to the child that listens for the event. When the parent calls , the event is dispatched to the child. The following code shows how you might do this: Attempts to unload child SWF file contents and stops the execution of commands from loaded SWF files. This method attempts to unload SWF files that were loaded using or by removing references to EventDispatcher, NetConnection, Timer, Sound, or Video objects of the child SWF file. As a result, the following occurs for the child SWF file and the child SWF file's display list:\n• Event listeners for , , , and are removed. When you call the method, the Loader object's property is set to . Any visual assets that were loaded with the SWF are unloaded and removed from memory. ActionScript class definitions in the loaded SWF remain in memory, and code in the same application domain as the loaded SWF can access instances of those classes and create new instances. Note (iOS only): Prior to AIR 3.6, this method has no effect on iOS. (default = ) — Provides a hint to the garbage collector to run on the child SWF objects ( ) or not ( ). If you are unloading many objects asynchronously, setting the paramter to might improve application performance. However, if the parameter is set to , media and display objects of the child SWF file might persist in memory after running the command.\n• A property is created, which is the location and name of the image file\n• In the constructor, a new Loader object named is created, which is then passed to the method, described in step 3.\n• The constructor creates a new instance of a URLRequest object, , with passed so that the file name and location are known.\n• The object is passed to the object's method, which loads the image onto the display list.\n• A event listener is registered for the event on the loader. After a mouse click, the loaded image is unloaded.\n• The method adds seven event listeners by using the following methods:\n• The method executes when the image finishes loading.\n• The method executes if the image is not loaded locally and only if the network request is made available and the Flash Player can detect it.\n• The method executes before the method and after the method. Generally, the event is more useful when loading SWF files.\n• The method executes if the image file is not available or not accessible.\n• The method executes when the image file is first opened.\n• The method executes when the image file starts to load and again when the image is finished loading.\n• The method executes when the image is unloaded by using the method when the user clicks the image. The following example uses the LoaderExample class to illustrate how various event listeners are used. This task is accomplished by performing the following steps: Keep in mind the following requirements:\n• This example requires that you place a file named Image.gif in the same directory as the compiled SWF file. Use an image that has an area that fits within the dimensions of the main SWF file.\n• Although this example makes use of all events available to the LoaderInfo object, most situations require only a subset. In particular, when loading only an image file, the event (and perhaps the event) are sufficient when loading a local image."
    },
    {
        "link": "https://stackoverflow.com/questions/5339112/as3-problem-in-loading-external-swf-into-loader",
        "document": "I have main application that loads external swf's through the Loader Component. But some swf's that are working well on their own don't load into the main app. When I tried to load one of that swf's from fla of main app it gave error that it's looking for some classes. By the name of this classes it looks like it were parts of loaded swf but as swf that is already compiled and working well why is it looking for this class when it's trying to be loaded by the main app?\n\nI didn't find anything that would refer to this kind of issue. Any help will be highly appreciated."
    },
    {
        "link": "https://airsdk.dev/reference/actionscript/3.0/flash/system/LoaderContext.html",
        "document": "When loading images (JPEG, GIF, or PNG) instead of SWF files, there is no need to specify a SecurityDomain or an application domain, because those concepts are meaningful only for SWF files. Instead, you have only one decision to make: do you need programmatic access to the pixels of the loaded image? If so, see the checkPolicyFile property. If you want to apply deblocking when loading an image, use the JPEGLoaderContext class instead of the LoaderContext class.\n\nWhen loading a SWF file with the Loader.loadBytes() method, you have the same application domain choice to make as for Loader.load() , but it's not necessary to specify a security domain, because Loader.loadBytes() always places its loaded SWF file into the security domain of the loading SWF file.\n\nWhen loading SWF files with the Loader.load() method, you have two decisions to make: into which security domain the loaded SWF file should be placed, and into which application domain within that security domain? For more details on these choices, see the applicationDomain and securityDomain properties.\n\nThe LoaderContext class provides options for loading SWF files and other media by using the Loader class. The LoaderContext class is used as theparameter in theandmethods of the Loader class.\n\nAn Object containing the parameters to pass to the LoaderInfo object of the content.\n\nSpecifies whether to decode bitmap image data when it is used or when it is loaded.\n\nSpecifies whether the application should attempt to download a URL policy file from the loaded object's server before beginning to load the object itself.\n\nSpecifies whether you can use a Loader object to import content with executable code, such as a SWF file, into the caller's security sandbox.\n\nIndicates whether an instance of the Object class is in the prototype chain of the object specified as the parameter.\n\nSpecifies whether you can use a object to import content with executable code, such as a SWF file, into the caller's security sandbox. There are two affected importing operations: the method, and the method with . (The latter operation is not supported in the AIR application sandbox.) With the property set to , these importing operations are restricted to safe operations, such as loading images. Normal, non-importing SWF file loading with the method is not affected by the value of this property. This property is useful when you want to import image content into your sandbox - for example, when you want to replicate or process an image from a different domain - but you don't want to take the security risk of receiving a SWF file when you expected only an image file. Since SWF files may contain ActionScript code, importing a SWF file is a much riskier operation than importing an image file. In AIR content in the application sandbox, the default value is . In non-application content (which includes all content in Flash Player), the default value is . The property was added in Flash Player 10.1 and AIR 2.0. However, this property is made available to SWF files and AIR applications of all versions when the Flash Runtime supports it.\n\n[read-write] Legacy property, replaced by , but still supported for compatibility. Previously, the only operation affected by was the method, but as of Flash Player 10.1 and AIR 2.0, the import-loading operation of with is affected as well. (The latter operation is not supported in the AIR application sandbox.) This dual effect made the property name overly specific, so now is the preferred property name. Setting either of or will affect the value of both. Specifies whether you can use a object to import content with executable code, such as a SWF file, into the caller's security sandbox. With this property set to , these importing operations are restricted to safe operations, such as loading images. In AIR content in the application sandbox, the default value is . In non-application content, the default value is . \n\n \n\n \n\n\n\nSpecifies the application domain to use for the or method. Use this property only when loading a SWF file written in ActionScript 3.0 (not an image or a SWF file written in ActionScript 1.0 or ActionScript 2.0). Every security domain is divided into one or more application domains, represented by ApplicationDomain objects. Application domains are not for security purposes; they are for managing cooperating units of ActionScript code. If you are loading a SWF file from another domain, and allowing it to be placed in a separate security domain, then you cannot control the choice of application domain into which the loaded SWF file is placed; and if you have specified a choice of application domain, it will be ignored. However, if you are loading a SWF file into your own security domain — either because the SWF file comes from your own domain, or because you are importing it into your security domain — then you can control the choice of application domain for the loaded SWF file. You can pass an application domain only from your own security domain in . Attempting to pass an application domain from any other security domain results in a exception. You have four choices for what kind of property to use:\n• Child of loader's ApplicationDomain. The default. You can explicitly represent this choice with the syntax . This allows the loaded SWF file to use the parent's classes directly, for example by writing . The parent, however, cannot use this syntax; if the parent wishes to use the child's classes, it must call to retrieve them. The advantage of this choice is that, if the child defines a class with the same name as a class already defined by the parent, no error results; the child simply inherits the parent's definition of that class, and the child's conflicting definition goes unused unless either child or parent calls the method to retrieve it.\n• Loader's own ApplicationDomain. You use this application domain when using . When the load is complete, parent and child can use each other's classes directly. If the child attempts to define a class with the same name as a class already defined by the parent, the parent class is used and the child class is ignored.\n• Child of the system ApplicationDomain. You use this application domain when using . This separates loader and loadee entirely, allowing them to define separate versions of classes with the same name without conflict or overshadowing. The only way either side sees the other's classes is by calling the method.\n• Child of some other ApplicationDomain. Occasionally you may have a more complex ApplicationDomain hierarchy. You can load a SWF file into any ApplicationDomain from your own SecurityDomain. For example, loads a SWF file into a new child of the current domain's parent's parent. When a load is complete, either side (loading or loaded) may need to find its own ApplicationDomain, or the other side's ApplicationDomain, for the purpose of calling . Either side can retrieve a reference to its own application domain by using . The loading SWF file can retrieve a reference to the loaded SWF file's ApplicationDomain via . If the loaded SWF file knows how it was loaded, it can find its way to the loading SWF file's ApplicationDomain object. For example, if the child was loaded in the default way, it can find the loading SWF file's application domain by using . For more information, see the \"ApplicationDomain class\" section of the \"Client System Environment\" chapter of the ActionScript 3.0 Developer's Guide.\n\nSpecifies whether the application should attempt to download a URL policy file from the loaded object's server before beginning to load the object itself. This flag is applicable to the method, but not to the method. Set this flag to when you are loading an image (JPEG, GIF, or PNG) from outside the calling SWF file's own domain, and you expect to need access to the content of that image from ActionScript. Examples of accessing image content include referencing the property to obtain a Bitmap object, and calling the method to obtain a copy of the loaded image's pixels. If you attempt one of these operations without having specified at loading time, you may get a exception because the needed policy file has not been downloaded yet. When you call the method with set to , the application does not begin downloading the specified object in until it has either successfully downloaded a relevant URL policy file or discovered that no such policy file exists. Flash Player or AIR first considers policy files that have already been downloaded, then attempts to download any pending policy files specified in calls to the method, then attempts to download a policy file from the default location that corresponds to , which is on the same server as . In all cases, the given policy file is required to exist at by virtue of the policy file's location, and the file must permit access by virtue of one or more tags. If you set to , the main download that specified in the method does not load until the policy file has been completely processed. Therefore, as long as the policy file that you need exists, as soon as you have received any or events from the property of your Loader object, the policy file download is complete, and you can safely begin performing operations that require the policy file. If you set to , and no relevant policy file is found, you will not receive any error indication until you attempt an operation that throws a exception. However, once the LoaderInfo object dispatches a or event, you can test whether a relevant policy file was found by checking the value of the property. If you will not need pixel-level access to the image that you are loading, you should not set the property to . Checking for a policy file in this case is wasteful, because it may delay the start of your download, and it may consume network bandwidth unnecessarily. Also try to avoid setting to if you are using the method to download a SWF file. This is because SWF-to-SWF permissions are not controlled by policy files, but rather by the method, and thus has no effect when you load a SWF file. Checking for a policy file in this case is wasteful, because it may delay the download of the SWF file, and it may consume network bandwidth unnecessarily. (Flash Player or AIR cannot tell whether your main download will be a SWF file or an image, because the policy file download occurs before the main download.) Be careful with if you are downloading an object from a URL that may use server-side HTTP redirects. Policy files are always retrieved from the corresponding initial URL that you specify in . If the final object comes from a different URL because of HTTP redirects, then the initially downloaded policy files might not be applicable to the object's final URL, which is the URL that matters in security decisions. If you find yourself in this situation, you can examine the value of after you have received a or event, which tells you the object's final URL. Then call the method with a policy file URL based on the object's final URL. Then poll the value of until it becomes . You do not need to set this property for AIR content running in the application sandbox. Content in the AIR application sandbox can call the method using any loaded image content as the source.\n\nSpecifies whether to decode bitmap image data when it is used or when it is loaded. Under the default policy, , the runtime decodes the image data when the data is needed (for display or some other purpose). This policy maintains the decoding behavior used by previous versions of the runtime. Under the policy, the runtime decodes the image immediately after it is loaded and before dispatching the event. Decoding images on load rather than on demand can improve animation and user interface performance. You can see improvements when several loaded images are displayed in quick succession. Some examples of a rapid display of images are scrolling lists, or cover flow control. On the other hand, using the policy indiscriminately can increase the peak memory usage of your application. More decoded image data could be in memory at one time than would be the case under the policy. Under both policies, the runtime uses the same cache and flush behavior after the image is decoded. The runtime can flush the decoded data at any time and decode the image again the next time it is required. To set the image decoding policy (for example, to ):\n\nAn Object containing the parameters to pass to the LoaderInfo object of the content. Normally, the value of the property is obtained by parsing the requesting URL. If the var is set, the gets its value from the LoaderContext object, instead of from the requesting URL. The var accepts only objects containing name-value string pairs, similar to URL parameters. If the object does not contain name-value string pairs, an is thrown. The intent of this API is to enable the loading SWF file to forward its parameters to a loaded SWF file. This functionality is especially helpful when you use the method, since does not provide a means of passing parameters through the URL. Parameters can be forwarded successfully only to another AS3 SWF file; an AS1 or AS2 SWF file cannot receive the parameters in an accessible form, although the AVM1Movie's AS3 loaderInfo.parameters object will be the forwarded object. For example, consider the following URL: The following code uses the LoaderContext.parameters property to replicate a parameter passed to this URL: To verify that the parameter passed properly, use the following trace statement after you run this code: If the content loaded successfully, this trace prints \"bar\".\n\nThe parent to which the Loader will attempt to add the loaded content. When content is completely loaded, the Loader object normally becomes the parent of the content. If is set, the object that it specifies becomes the parent, unless a runtime error prevents the assignment. This reparenting can also be done after the event without use of this property. However, specifying the parent with eliminates extra events. sets the desired parent before frame one scripts in the loaded content execute, but after the constructor has run. If is null (the default), the Loader object becomes the content's parent. If the loaded content is an AVM1Movie object, or if an error is thrown when is called on the object, then the following actions occur:\n• The Loader object becomes the parent of the loaded content. If the requested parent and the loaded content are in different security sandboxes, and if the requested parent does not have access to the loaded content, then the following actions occur:\n• The Loader becomes the parent of the loaded content. The following code uses to place the loaded content into a Sprite object: import flash.system.LoaderContext; import flash.display.Loader; import flash.display.Sprite; var lc:LoaderContext = new LoaderContext(); var l:Loader = new Loader(); var s:Sprite = new Sprite(); lc.requestedContentParent = s; addChild(s); l.load(new URLRequest(\"child.swf\"), lc); When this code runs, the child SWF file appears on stage. This fact confirms that the Sprite object you added to the stage is the parent of the loaded child.swf file.\n\nSpecifies the security domain to use for a operation. Use this property only when loading a SWF file (not an image). The choice of security domain is meaningful only if you are loading a SWF file that might come from a different domain (a different server) than the loading SWF file. When you load a SWF file from your own domain, it is always placed into your security domain. But when you load a SWF file from a different domain, you have two options. You can allow the loaded SWF file to be placed in its \"natural\" security domain, which is different from that of the loading SWF file; this is the default. The other option is to specify that you want to place the loaded SWF file placed into the same security domain as the loading SWF file, by setting to be equal to . This is called import loading, and it is equivalent, for security purposes, to copying the loaded SWF file to your own server and loading it from there. In order for import loading to succeed, the loaded SWF file's server must have a policy file trusting the domain of the loading SWF file. You can pass your own security domain only in . Attempting to pass any other security domain results in a exception. Content in the AIR application security sandbox cannot load content from other sandboxes into its SecurityDomain. For more information, see the \"Security\" chapter in the ActionScript 3.0 Developer's Guide."
    },
    {
        "link": "https://cs.vu.nl/~eliens/assets/flex3/langref/flash/display/Loader.html",
        "document": "The Loader class is used to load SWF files or image (JPG, PNG, or GIF) files. Use the method to initiate loading. The loaded display object is added as a child of the Loader object. The Loader class is used to load SWF files or image (JPG, PNG, or GIF) files. Use themethod to initiate loading. The loaded display object is added as a child of the Loader object. Use the URLLoader class to load text or binary data. The Loader class overrides the following methods that it inherits, because a Loader object can only have one child display object—the display object that it loads. Calling the following methods throws an exception: , , , , and . To remove a loaded display object, you must remove the Loader object from its parent DisplayObjectContainer child array. Note: The ActionScript 2.0 MovieClipLoader and LoadVars classes are not used in ActionScript 3.0. The Loader and URLLoader classes replace them. When you use the Loader class, consider the Flash Player and Adobe AIR security model:\n• You can load content from any accessible source.\n• Loading is not allowed if the calling SWF file is in a network sandbox and the file to be loaded is local.\n• If the loaded content is a SWF file written with ActionScript 3.0, it cannot be cross-scripted by a SWF file in another security sandbox unless that cross-scripting arrangement was approved through a call to the or the method in the loaded content file.\n• If the loaded content is an AVM1 SWF file (written using ActionScript 1.0 or 2.0), it cannot be cross-scripted by an AVM2 SWF file (written using ActionScript 3.0). However, you can communicate between the two SWF files by using the LocalConnection class.\n• If the loaded content is an image, its data cannot be accessed by a SWF file outside of the security sandbox, unless the domain of that SWF file was included in a cross-domain policy file at the origin domain of the image.\n• Movie clips in the local-with-file-system sandbox cannot script movie clips in the local-with-networking sandbox, and the reverse is also prevented. However, in the Apollo runtime, content in the security sandbox (content installed with the Apollo application) are not restricted by these security limitations. For more information, see the following:\n• The security chapter in the Programming ActionScript 3.0 book and the latest comments on LiveDocs When loading a SWF file from an untrusted source (such as a domain other than that of the Loader object's root SWF file), you may want to define a mask for the Loader object, to prevent the loaded content (which is a child of the Loader object) from drawing to portions of the Stage outside of that mask, as shown in the following code: import flash.display.*; import flash.net.URLRequest; var rect:Shape = new Shape(); rect.graphics.beginFill(0xFFFFFF); rect.graphics.drawRect(0, 0, 100, 100); rect.graphics.endFill(); addChild(rect); var ldr:Loader = new Loader(); ldr.mask = rect; var url:String = \"http://www.unknown.example.com/content.swf\"; var urlReq:URLRequest = new URLRequest(url); ldr.load(urlReq); addChild(ldr); \n\n\n\n[read-only] Contains the root display object of the SWF file or image (JPG, PNG, or GIF) file that was loaded by using the or methods. \n\n \n\n \n\n \n\n \n\n — The loaded SWF file or image file belongs to a security sandbox to which you do not have access. For a loaded SWF file, you can avoid this situation by having the file call the method or by having the loading file specify a parameter with its property set to when you call the or method. [read-only] Returns a LoaderInfo object corresponding to the object being loaded. LoaderInfo objects are shared between the Loader object and the loaded content object. The LoaderInfo object supplies loading progress information and statistics about the loaded file. Events related to the load are dispatched by the LoaderInfo object referenced by the property of the Loader object. The property is set to a valid LoaderInfo object, even before the content is loaded, so that you can add event listeners to the object prior to the load. \n\n \n\n \n\n Creates a Loader object that you can use to load files, such as SWF, JPEG, GIF, or PNG files. Call the method to load the asset as a child of the Loader instance. You can then add the Loader object to the display list (for instance, by using the method of a DisplayObjectContainer instance). The asset appears on the Stage as it loads. You can also use a Loader instance \"offlist,\" that is without adding it to a display object container on the display list. In this mode, the Loader instance might be used to load a SWF file that contains additional modules of an application. To detect when the SWF file is finished loading, you can use the events of the LoaderInfo object associated with the property of the Loader object. At that point, the code in the module SWF file can be executed to initialize and start the module. In the offlist mode, a Loader instance might also be used to load a SWF file that contains components or media assets. Again, you can use the LoaderInfo object event notifications to detect when the components are finished loading. At that point, the application can start using the components and media assets in the library of the SWF file by instantiating the ActionScript 3.0 classes that represent those components and assets. To determine the status of a Loader object, monitor the following events that the LoaderInfo object associated with the property of the Loader object:\n• The event is dispatched when loading begins.\n• The or event is dispatched if the file cannot be loaded or if an error occured during the load process.\n• The event fires continuously while the file is being loaded.\n• The event is dispatched when a file completes downloading, but before the loaded movie clip's methods and properties are available.\n• The event is dispatched after the properties and methods of the loaded SWF file are accessible, so you can begin manipulating the loaded SWF file. This event is dispatched before the handler. In streaming SWF files, the event can occur significantly earlier than the event. For most purposes, use the handler. Cancels a method operation that is currently in progress for the Loader instance. Loads a SWF, JPEG, progressive JPEG, unanimated GIF, or PNG file into an object that is a child of this Loader object. If you load an animated GIF file, only the first frame is displayed. As the Loader object can contain only a single child, issuing a subsequent request terminates the previous request, if still pending, and commences a new load. A SWF file or image loaded into a Loader object inherits the position, rotation, and scale properties of the parent display objects of the Loader object. Use the method to remove movies or images loaded with this method, or to cancel a load operation that is in progress. When you use the method, consider the Flash Player or Adobe AIR security model:\n• You can load content from any accessible source.\n• Loading is not allowed if the calling SWF file is in a network sandbox and the file to be loaded is local.\n• If the loaded content is a SWF file, it cannot be scripted by a SWF file in another security sandbox unless that cross-scripting arrangement was approved through a call to the method in the loaded content file.\n• SWF files written in ActionScript 1.0 or 2.0, which are loaded as AVM1Movie objects, cannot cross-script SWF files written in ActionScript 3.0, which are loaded as Sprite or MovieClip objects. You can use the LocalConnection class to have these files communicate with each other.\n• If the loaded content is an image, its data cannot be accessed by a SWF file outside of the security sandbox, unless the domain of that SWF file was included a cross-domain policy file at the origin domain of the image.\n• Movie clips in the local-with-file-system sandbox cannot cross-script movie clips in the local-with-networking sandbox, and the reverse is also prevented.\n• You can prevent a SWF file from using this method by setting the parameter of the the and tags in the HTML page that contains the SWF content. However, in the Apollo runtime, content in the security sandbox (content installed with the Apollo application) are not restricted by these security limitations. For more information, see the following:\n• The security chapter in the Programming ActionScript 3.0 book and the latest comments on LiveDocs — The absolute or relative URL of the SWF, JPEG, GIF, or PNG file to be loaded. A relative path must be relative to the main SWF file. Absolute URLs must include the protocol reference, such as http:// or file:///. Filenames cannot include disk drive specifications. (default = ) — A LoaderContext object, which has properties that define the following:\n• Whether or not to check for the existence of a policy file upon loading the object\n• The ApplicationDomain for the loaded object\n• The SecurityDomain for the loaded object For complete details, see the description of the properties in the LoaderContext class. \n\n — Dispatched by the associated LoaderInfo object when the file has completed loading. The event is always dispatched after the event. — Dispatched by the associated LoaderInfo object when a network request is made over HTTP and the HTTP status code can be detected. — Dispatched by the associated LoaderInfo object when the properties and methods of the loaded SWF file are accessible. The event always precedes the event. — Dispatched by the associated LoaderInfo object when an input or output error occurs that causes a load operation to fail. — Dispatched by the associated LoaderInfo object when the loading operation starts. — Dispatched by the associated LoaderInfo object as data is received while load operation progresses. — Dispatched by the associated LoaderInfo object when a loaded object is removed. \n\n — The value of must be either or . This reflects the fact that you can only place the loaded media in its natural security sandbox or your own (the latter requires a policy file). — Local SWF files may not set LoaderContext.securityDomain to anything other than . It is not permitted to import non-local media into a local sandbox, or to place other local media in anything other than its natural sandbox. — If the or properties of the parameter are from a disallowed domain. — If a local SWF file is attempting to use the property of the parameter. — A ByteArray object. The contents of the ByteArray can be any of the file formats supported by the Loader class: SWF, GIF, JPEG, or PNG. (default = ) — A LoaderContext object. Only the property of the LoaderContext object applies; the and properties of the LoaderContext object do not apply. \n\n — If the property of the ByteArray object is not greater than 0. — If the or property of the parameter are non-null. — If the provided property of the property is from a disallowed domain. Removes a child of this Loader object that was loaded by using the method. The of the associated LoaderInfo object is reset to . The child is not necessarily destroyed because other objects might have references to it; however, it is no longer a child of the Loader object. As a best practice, before you unload a child SWF file, you should explicitly close any streams in the child SWF file's objects, such as LocalConnection, NetConnection, NetStream, and Sound objects. Otherwise, audio in the child SWF file might continue to play, even though the child SWF file was unloaded. To close streams in the child SWF file, add an event listener to the child that listens for the event. When the parent calls , the event is dispatched to the child. The following code shows how you might do this: How to use examples\n• A property is created, which is the location and name of the image file\n• In the constructor, a new Loader object named is created, which is then passed to the method, described in step 3.\n• The constructor creates a new instance of a URLRequest object, , with passed so that the file name and location are known.\n• The object is passed to the object's method, which loads the image onto the display list.\n• A event listener is registered for the event on the loader. After a mouse click, the loaded image is unloaded.\n• The method adds seven event listeners by using the following methods:\n• The method executes when the image finishes loading.\n• The method executes if the image is not loaded locally and only if the network request is made available and the Flash Player can detect it.\n• The method executes before the method and after the method. Generally, the event is more useful when loading SWF files.\n• The method executes if the image file is not available or not accessible.\n• The method executes when the image file is first opened.\n• The method executes when the image file starts to load and again when the image is finished loading.\n• The method executes when the image is unloaded by using the method when the user clicks the image. The following example uses the LoaderExample class to illustrate how various event listeners are used. This task is accomplished by performing the following steps: Keep in mind the following requirements:\n• This example requires that you place a file named Image.gif in the same directory as the compiled SWF file. Use an image that has an area that fits within the dimensions of the main SWF file.\n• Although this example makes use of all events available to the LoaderInfo object, most situations require only a subset. In particular, when loading only an image file, the event (and perhaps the event) are sufficient when loading a local image."
    },
    {
        "link": "https://stackoverflow.com/questions/11440474/as3-loading-screen",
        "document": "How do you create these \"loading, please wait\" splash screens with a loading bar and percentage for your swf? Does as3 have some built-in methods or should it be designed from scratch?\n\nI mean, how do you detect that your swf file is being loaded into client's browser?\n\nOh and I have all my content stored in one frame only. pure as3 code."
    },
    {
        "link": "https://stackoverflow.com/questions/9629548/flash-actionscript-3-0-loading-screen",
        "document": "I'm trying to get a loading screen to work in Flash. This is how my project is set up:\n• None All of the game occurs in \"Layer 1,\" which is set up into many different scenes: \"Level 0,\" \"Level 1,\" etc. Its code is run in a \".as\" file\n• None I tried implementing a simple loading screen (with a progress bar) in a new layer, \"Preloader.\" Its code is run in the layer's \"Actions.\"\n\nI realize that putting the Preloader's code in its \"Actions\" wasn't the best idea because I had Layer 1's \".as\" file load Level 0 at first. So the \"Preloader\" and \"Layer 1\" layers tried to run at the same time. This caused problems.\n\nNow I have tried putting the Preloader into a scene of its own. That is not working.\n\nHere is the code I've tried using for the Preloader - \"scene\" version:\n\nCould anyone help me?"
    },
    {
        "link": "https://community.adobe.com/t5/animate-discussions/creating-a-sprite-and-linking-a-progress-bar-with-it/m-p/2565832",
        "document": "I am new to AS3 and would appreciate it if someone can help me with this. I am writing a small app, and the very first thing I do is to create a sprite called \"mainSprite\" on Stage. This way, whatever I need to lood, I load it into the \"mainSprite\" NOT directory on to the stage. Now I would like to connect a progress bar to this \"mainSprite\" so whenever an asset is loaded, progress bar would pop in and show the progress. I would like to know if I am on right track with what I am trying to achieve, and if I am right, then how can I employ a progress component to just listen to \"mainSprite\". Any help be wondeful.\n\nI do know how to trace the download progress through ProgressEvent.PROGRESS."
    },
    {
        "link": "https://reddit.com/r/gamemaker/comments/14ltu9y/how_do_i_do_a_progress_bar_using_sprites",
        "document": "I would like to create a progress bar which updates using sprites. For example, if one objective is complete, the bar updates to the sprite that shows one section of the bar filled. I already have the sprites and am currently using drag and drop, but I guess I can use the execute code block if I need to. I tried to do this by making an if statement with the if variable blocks so that it sets the sprite for each score, but this didn’t work and I assume that’s because I’ve drawn it wrong or have put this in the wrong place. I’m sorry if this doesn’t make and sense and thank you in advance for any help!"
    },
    {
        "link": "https://atksolutions.com/articles/flash_as3_load_display_sprite.html",
        "document": "Import an image to the flash project library.This is easily done by selecting->->Once it is imported, you can see the image in your library by selecting \"Window\" -> \"Library\" from the main menu.From there, you would want tothe image and selectOnce the linkage window appears as shown below, you will need to give the image aname. In this case we named it. Keep in mind that we are not using any spaces and no periods. If we want a placeholder for clarity, we use an underscore (_). We also check the box that saysandClick the mouse on the first frame in the timeline and press. This will bring up the action-script window. Proceed to enter the action-script as shown. In this example we first create an empty sprite. we then create a bitmap_data and assign it the same name as the image class name with dimensions. In this example, the image size is 168 x 152. We create a new bitmap and assign it the bitmap data and then we attach the bitmap to the sprite and the sprite to the stage. Once it is on the stage, it will be visible when you run it."
    }
]