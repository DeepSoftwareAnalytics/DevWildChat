[
    {
        "link": "https://p5js.org/reference",
        "document": ""
    },
    {
        "link": "https://p5js.org/reference/p5/background",
        "document": "Sets the color used for the background of the canvas.\n\nBy default, the background is transparent. is typically used within draw() to clear the display window at the beginning of each frame. It can also be used inside setup() to set the background on the first frame of animation.\n\nThe version of with one parameter interprets the value one of four ways. If the parameter is a , it's interpreted as a grayscale value. If the parameter is a , it's interpreted as a CSS color string. RGB, RGBA, HSL, HSLA, hex, and named color strings are supported. If the parameter is a p5.Color object, it will be used as the background color. If the parameter is a p5.Image object, it will be used as the background image.\n\nThe version of with two parameters interprets the first one as a grayscale value. The second parameter sets the alpha (transparency) value.\n\nThe version of with three parameters interprets them as RGB, HSB, or HSL colors, depending on the current colorMode(). By default, colors are specified in RGB values. Calling sets the background a bright yellow color."
    },
    {
        "link": "https://p5js.org/reference/p5/text",
        "document": "The first parameter, , is the text to be drawn. The second and third parameters, and , set the coordinates of the text's bottom-left corner. See textAlign() for other ways to align text.\n\nThe fourth and fifth parameters, and , are optional. They set the dimensions of the invisible rectangle containing the text. By default, they set its maximum width and height. See rectMode() for other ways to define the rectangular text box. Text will wrap to fit within the text box. Text outside of the box won't be drawn.\n\nText can be styled a few ways. Call the fill() function to set the text's fill color. Call stroke() and strokeWeight() to set the text's outline. Call textSize() and textFont() to set the text's size and font, respectively.\n\nNote: mode only supports fonts loaded with loadFont(). Calling stroke() has no effect in mode."
    },
    {
        "link": "https://p5js.org/reference/p5/image",
        "document": "Draws an image to the canvas.\n\nThe first parameter, , is the source image to be drawn. can be any of the following objects:\n\nThe second and third parameters, and , set the coordinates of the destination image's top left corner. See imageMode() for other ways to position images.\n\nHere's a diagram that explains how optional parameters work in :\n\nThe fourth and fifth parameters, and , are optional. They set the the width and height to draw the destination image. By default, draws the full source image at its original size.\n\nThe sixth and seventh parameters, and , are also optional. These coordinates define the top left corner of a subsection to draw from the source image.\n\nThe eighth and ninth parameters, and , are also optional. They define the width and height of a subsection to draw from the source image. By default, draws the full subsection that begins at and extends to the edges of the source image.\n\nThe ninth parameter, , is also optional. It enables a subsection of the source image to be drawn without affecting its aspect ratio. If is passed, the full subsection will appear within the destination rectangle. If is passed, the subsection will completely cover the destination rectangle. This may have the effect of zooming into the subsection.\n\nThe tenth and eleventh paremeters, and , are also optional. They determine how to align the fitted subsection. can be set to either , , or . can be set to either , , or . By default, both and are set to ."
    },
    {
        "link": "https://p5js.org/reference#/p5/image",
        "document": ""
    },
    {
        "link": "https://p5js.org/reference/p5.sound/p5.AudioIn",
        "document": "Get sound from an input source, typically a computer microphone.\n\nenabled Client must allow browser to access their microphone / audioin source. Default: false. Will become true when the client enables access. amplitude Input amplitude, connect to it by default but not to master out\n\nconnect Connect to an audio unit. If no parameter is provided, will connect to the main output (i.e. your speakers).\n\n disconnect Disconnect the AudioIn from all audio units. For example, if connect() had been called, disconnect() will stop sending signal to your speakers.\n\n getLevel Read the Amplitude (volume level) of an AudioIn. The AudioIn class contains its own instance of the Amplitude class to help make it easy to get a microphone's volume level. Accepts an optional smoothing value (0.0 < 1.0). NOTE: AudioIn must .start() before using .getLevel().\n\n amp Set amplitude (volume) of a mic input between 0 and 1.0. getSources Returns a list of available input sources. This is a wrapper for MediaDevices.enumerateDevices() - Web APIs | MDN and it returns a Promise. setSource Set the input source. Accepts a number representing a position in the array returned by getSources(). This is only available in browsers that support navigator.mediaDevices.enumerateDevices()\n\nNotice any errors or typos? Please let us know . Please feel free to edit src/AudioIn.js and open a pull request!"
    },
    {
        "link": "https://medium.spatialpixel.com/sounds-bd05429aba38",
        "document": "Ok great, so we have a sound, and we’ve loaded it. But now we want to hear it. So we need to write code that tells P5 to play the sound.\n• In the setup() function, play the sound when the sketch starts:\n• Click the “Play” button at the top of the code editor to run your p5.js sketch.\n• You’ll hear the “goat.wav” sound file play automatically when the sketch starts. If you don’t hear it but don’t see any errors it may be too quiet. Let’s play with making it louder.\n• You can change the volume by using before the . In p5.js and many other programming languages, the dot (.) notation is used to access and manipulate properties and methods of objects. So when we have created this variable goatSound that represents our sound file, we can use the dot notation to manipulate the properties of this file. Here represents the volume level. Try changing this to or to see it change.\n\nYour full sketch should look like this:\n\nThat’s it! You’ve created a simplified p5.js sketch that plays the sound. Remember to save your project in the web editor so you can access it later.\n• How might you create a button to play the sound?\n• We can then do fun things like change the pitch based on the position of our mouse. Here’s an example!\n\nSince you probably aren’t interested in making a contraption that sounds like a goat…you’re probably wondering “How can I load a larger sound file and one of my own files.” To which I respond, “Great question!”\n\nIn order to do this, you’ll need to run P5.js locally on your machine and run a local web server. This is quite common in software development and used during the development phase before hosting code projects on the cloud. We’ll do this in a future tutorial. For now just be satisfied with with “goat.wav” and the varieties of projects that can be done with “goat.wav.”\n\nIf you’re adament about using other sounds, you can find your own sounds but they’ll need to be smaller than 5mb in order to be hosted on the P5.js web editor. You can find many sounds online here: https://freesound.org/ You’ll need to create an account and most files will need to be downsized."
    },
    {
        "link": "https://p5js.org/reference/p5.sound",
        "document": ""
    },
    {
        "link": "https://js6450.github.io/audio-viz/index.html",
        "document": "You can use an audio file inside of a p5 sketch for various uses, such as to do sound analysis (we will get to this later) and to trigger it at specified situations. In order to use audio files, we use the loadSound() function. loadSound() function should generally be saved to a variable, in which case the variable can be used to refer to the sound file inside the sketch. It should also be called inside of the preload() function, to load the audio files before running setup(). This ensures that the file is fully loaded to be playable and usable all the way through without buffering.\n\nAll af the javascript functions that you already know to control the audio file exist within the p5.sound libary as well, such as, play() and pause(), in addition to many others. Below are a selection of available functions that p5.sound library provides to control the audio file."
    },
    {
        "link": "https://nishanc.medium.com/audio-visualization-in-javascript-with-p5-js-cf3bc7f1be07",
        "document": "This time I thought of visualizing audio from JavaScript. There’s no reason for why I wanted to do this in the first place! but, I thought it would be interesting to do and in the process, learn something new. Here’s what I learned.\n\nYou can clone the project from here, and follow along.\n\nWe’re doing this from p5.js, advertised as ‘a JavaScript library for creative coding, with a focus on making coding accessible and inclusive for artists, designers, educators, beginners, and anyone else!’. Well I must say that this really is the case. You can do graphical manipulations with less lines of code and they are easy to understand.\n\nYou can get started pretty easy, following snippet shows a sample HTML page with p5.js\n\nlooks like this.\n\nYou can learn more about this at p5js.org/get-started. But in this tutorial we will use a node development server(with express) to run our code (install Node and Git if you haven’t already.). To get started, you can clone the first commit of the above github repository by executing following commands in order. Open a new folder from your terminal/cmd and execute,\n\nThis will give you following directory structure.\n\nIn the same terminal, restore npm packages with,\n\nNow you can run the server with,\n\nNavigate to http://localhost:3000 and you will see something like this. Which is an ellipse that follows your mouse pointer.\n\ncreates a canvas element in the document, and sets the dimensions of it in pixels. The function sets the color used for the background of the p5.js canvas. draws an ellipse (oval) to the screen. An ellipse with equal width and height is a circle. By default, the first two parameters set the location, and the third and fourth parameters set the shape’s width and height. The system variable mouseX always contains the current horizontal position of the mouse, relative to (0, 0) of the canvas. The system variable mouseY always contains the current vertical position of the mouse, relative to (0, 0) of the canvas.\n\nOkay. Now we know what we’re dealing with. Let’s move on.\n\nBefore visualizing any audio, let’s see how we can get mic input.\n\nWe can get user microphone using and overall amplitude/ volume from Then we draw an ellipse in the center of the canvas(height/2, width/2) with the radius of , because the volume is a float between 0–1, so we need to convert it into a large number.\n\nAlright! now we will try to do the same for an audio file. Create a new folder named audio in folder and add an mp3 file. Then create a function name and read the song.\n\nThen in the start playing the song and get it’s amplitude using which measures volume between 0.0 and 1.0. Listens to all p5sound by default, or use to listen to a specific sound source.\n\nNow instead of we can say in the function.\n\nNow we will graph the amplitude on the canvas. To create a graph we need history of the amplitude. So create an empty array in line 2.\n\nIn draw function, push each amplitude value to this array. Then we loop through the array and draw a in and coordinates, is given by index of the array and is a created to map the amplitude (0–1) to values between canvas and\n\nInstead of a point, now we will draw a line. Using the and functions allow creating more complex forms. begins recording vertices for a shape and stops recording. All shapes are constructed by connecting a series of vertices. is used to specify the vertex coordinates for points, lines, triangles, quads, and polygons. So replace the with . Completed function is as follows.\n\nNotice the condition. You might have noticed that when we draw the point graph, it goes till the end of the canvas and stops. That is because our array is lengthier than the width of the canvas. So what we do is if the is lengthier than the , at position , remove item using , first item of the array will be removed making space for new item at the end.\n\nNow let’s modify the linear graph to a radial graph. To achieve this you need to know the relationship between radius, angle of a circle with Cartesian plain.\n\nYou know that we need and coordinate to draw a vertex. If you know the -radius, in our case is the amplitude and the angle — θ, this is an easy task.\n\nAs you know we may not use the amplitude as it is because that is too small (between 0–1), so we will map to and to . The maximum number of items that the array can have is also 360, corresponding to the total number of degrees in a circle. specifies an amount to displace objects within the display window. The x parameter specifies left/right translation, the y parameter specifies up/down translation. We also want to set the current mode of p5 to degrees using (default mode is RADIANS) in the function.\n\nTo do this, we will use . FFT stands for Fast Fourier transform. Fourier analysis converts a signal from its original domain (often time or space) to a representation in the frequency domain and vice versa. This operation is useful in many fields, but computing it directly from the definition is often too slow to be practical. A fast Fourier transform algorithm manages to reduce the complexity. That’s all you need to know.\n\nAs a start, let’s rename to and instead of we will use a . This takes two arguments, smooth is a value between 0.0 and 1.0, we will set it to 0.9 (used to smooth FFT analysis by averaging with the last analysis frame). is basically the number of frequencies / bands that we want to take out, default is 1024. We will set it to 128. Also, we will be using the function to get the frequency spectrum. It returns an array of amplitude values (between 0 and 255) across the frequency spectrum.\n\nWhat we’re trying to do is draw a line for each frequency band. Height of each line is equal to the amplitude of that band. Using function as before, we will map this value to the of the canvas. And I have added a button to Pause and Play the audio. Modified is as follows.\n\nIt’s stacked together right? Let’s get some space between them. If we want to expand this 128(bin size we set earlier) line across entire of the canvas, the space between each line should be .\n\nCreate a new variable and set it to in function.\n\nNow you will get something like this.\n\nInstead of lines you can draw rectangles using\n\nAdd to the function. Then in replace,\n\nOutput will look something like this.\n\nIf you want to flip the spectrum on axis, change the above line as follows.\n\nTry to change the values and come up with a creative design of your own. With a bit of tweaking try if you can create the following effect.\n\nCode for this output is in branch Clone the repository and switch branch using\n\nWell that’s it. I hope you learned something! Stay safe!."
    }
]