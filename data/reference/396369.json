[
    {
        "link": "https://dev.mysql.com/doc/refman/8.4/en/replication-encrypted-connections.html",
        "document": "To use an encrypted connection for the transfer of the binary log required during replication, both the source and the replica servers must support encrypted network connections. If either server does not support encrypted connections (because it has not been compiled or configured for them), replication through an encrypted connection is not possible.\n\nSetting up encrypted connections for replication is similar to doing so for client/server connections. You must obtain (or create) a suitable security certificate that you can use on the source, and a similar certificate (from the same certificate authority) on each replica. You must also obtain suitable key files.\n\nFor more information on setting up a server and client for encrypted connections, see Section 8.3.1, “Configuring MySQL to Use Encrypted Connections”.\n\nTo enable encrypted connections on the source, you must create or obtain suitable certificate and key files, and then add the following configuration parameters to the section of the source file, changing the file names as necessary:\n\nThe paths to the files may be relative or absolute; we recommend that you always use complete paths for this purpose.\n\nThe configuration parameters are as follows:\n\nTo enable encrypted connections on the replica, use the statement.\n• None To name the replica's certificate and SSL private key files using , add the appropriate options, like this: These options correspond to the options with the same names, as described in Command Options for Encrypted Connections. For these options to take effect, must also be set. For a replication connection, specifying a value for either of or corresponds to setting . The connection attempt succeeds only if a valid matching Certificate Authority (CA) certificate is found using the specified information.\n• None To activate host name identity verification, add the option, like this: For a replication connection, specifying corresponds to setting , as described in Command Options for Encrypted Connections. For this option to take effect, must also be set. Host name identity verification does not work with self-signed certificates.\n• None To activate certificate revocation list (CRL) checks, add the or option, as shown here: These options correspond to the options with the same names, as described in Command Options for Encrypted Connections. If they are not specified, no CRL checking takes place.\n• None To specify lists of ciphers, ciphersuites, and encryption protocols permitted by the replica for the replication connection, use the , , and options, like this:\n• None The option specifies a colon-separated list of one or more ciphers permitted by the replica for the replication connection.\n• None The option specifies a comma-separated list of the TLS encryption protocols permitted by the replica for the replication connection, in a format like that for the server system variable. The connection procedure negotiates the use of the highest TLS version that both the source and the replica permit. To be able to connect, the replica must have at least one TLS version in common with the source.\n• None The option specifies a colon-separated list of one or more ciphersuites that are permitted by the replica for the replication connection if TLSv1.3 is used for the connection. If this option is set to when TLSv1.3 is used (which is the default if you do not set the option), the ciphersuites that are enabled by default are allowed. If you set the option to an empty string, no cipher suites are allowed, and TLSv1.3 is therefore not used. The protocols, ciphers, and ciphersuites that you can specify in these lists depend on the SSL library used to compile MySQL. For information about the formats, the permitted values, and the defaults if you do not specify the options, see Section 8.3.2, “Encrypted Connection TLS Protocols and Ciphers”. You can use the option to specify any selection of ciphersuites, including only non-default ciphersuites if you want.\n• None After the source information has been updated, start the replication process on the replica, like this: You can use the statement to confirm that an encrypted connection was established successfully.\n• None Requiring encrypted connections on the replica does not ensure that the source requires encrypted connections from replicas. If you want to ensure that the source only accepts replicas that connect using encrypted connections, create a replication user account on the source using the option, then grant that user the privilege. For example: mysql> CREATE USER 'repl'@'%.example.com' IDENTIFIED BY 'password' -> REQUIRE SSL; mysql> GRANT REPLICATION SLAVE ON *.* -> TO 'repl'@'%.example.com'; If you have an existing replication user account on the source, you can add to it with this statement:"
    },
    {
        "link": "https://snapshooter.com/learn/mysql/MySQL-replication",
        "document": "Replication is the process of copying data from one server to another at the same time. Generally, it is used to increase the data availability and recover the data in case of failure. After implementing the MySQL replication, you don't need a regular database backup. All databases from the Master node will be replicated automatically to the Slave node. Replication can also reduce the load from the master server as the slave node will be involved in serving the application requests. In the event of failures, you can bring up the Slave node.\n\nIn this post, we will show you how to set up a MySQL Master-Slave replication on Ubuntu 20.04 server.\n• None A root password is set up on each server.\n\nFirst, you will need to install the MySQL server on both nodes. You can install it with the following command:\n\nOnce the installation has been completed, you will need to set a MySQL root password on both nodes.\n\nYou can set it with the following command:\n\nYou will be asked to set a root password as shown below:\n\nBy default, MySQL listens on the localhost and doesn't allow connection from the remote system. So you will need to configure MySQL to listen on the public IP.\n\nTo do so, edit the MySQL default configuration file:\n\nReplaced it with the following line:\n\nNext, uncomment the following line:\n\nNext, add the following lines at the end of the file:\n\nSave and close the file then restart the MySQL service to apply the changes:\n\nNext, you will need to create a new user for replication and grant privileges to the replication slave.\n\nFirst, connect to the MySQL shell with the following command:\n\nOnce login, create a replication user with the following command:\n\nNext, grant all privileges to replication slave with the following command:\n\nNext, flush the privileges with the following command:\n\nNext, verify the Master status with the following command:\n\nYou should get the following output:\n\nFrom the above output, note down the mysql-bin.000001 value and the Position ID 900. You will need both to set up a slave server.\n\nFirst, edit the MySQL default configuration file with the following comamnd:\n\nReplace it with the following line:\n\nNext, uncomment and change the server-id value:\n\nNext, add the following lines at the end of the file:\n\nFinally, restart the MySQL service to apply the changes:\n\nNext, log in to MySQL with the following command:\n\nOnce login, stop the slave server to connect to the master server:\n\nRun the following command to allow the slave server to replicate the Master server:\n\nNext, start the SLAVE with the following command:\n\nAt this point, Master-Slave replication is configured. Now it's time to test whether the replication works or not.\n\nTo do so, we will create a database on the Master Node and verify whether it will be replicated on the Slave Node.\n\nFirst, log in to the MySQL on the Master Node:\n\nOnce you are log in, create a database with the following command:\n\nNext, exit from the MySQL with the following command:\n\nNext, log in to the MySQL on the Slave Node:\n\nOnce you are log in, list all the databases:\n\nYou should see the following output:\n\nAs you can see, the newdb database has been replicated to the Slave Node.\n\nCongratulations! you have successfully set up a MySQL Master-Slave replication on the Ubuntu 20.04 server. You can now use this setup in the production environment to save your data in the event of failure."
    },
    {
        "link": "https://percona.com/blog/setting-up-mysql-ssl-and-secure-connections",
        "document": "There are different articles on how to setup MySQL with SSL but it’s sometimes difficult to end up with a good simple one. Usually, setting up MySQL SSL is not really a smooth process due to such factors like “it’s not your day”, something is broken apparently or the documentation lies 🙂 I am going to provide the brief instructions on how to setup MySQL with SSL, SSL replication and how to establish secure connections from the console and scripts showing the working examples.\n\n1. Generate SSL certificates according to the example 1. Use the different Common Name for server and client certificates.\n\n2. For the reference, I store the generated files under /etc/mysql-ssl/\n\n3. Add the following lines to /etc/my.cnf under [mysqld] section:\n\n\n\n5. Create an user to permit only SSL-encrypted connection:\n\n1. If the client is on a different node, copy /etc/mysql-ssl/ from the server to that node.\n\n2. Add the following lines to /etc/my.cnf under [client]:\n\n\n\n1. Establish a secure connection from the console on slave like described above, to make sure SSL works fine.\n\n2. On Master add “REQUIRE SSL” to the replication user:\n\n1. Install php and php-mysql packages. I use the version >=5.3.3, otherwise, it may not work.\n\nAlternative local SSL connection setup\n\n If you connect locally to the server enabled for SSL you can also establish a secure connection this way:\n\n 1. Create ca.pem:\n\n2. Have only the following ssl- lines in /etc/my.cnf under [client]:\n\n\n\nError with “ssl-ca” on local connections\n\n If you left the line “ssl-ca=/etc/mysql-ssl/ca-cert.pem” under [client] section in /etc/my.cnf on the server enabled for SSL and try to establish local SSL connection, you will get “ERROR 2026 (HY000): SSL connection error: error:00000001:lib(0):func(0):reason(1)”.\n\nDiscrepancy in documentation\n\n A client can connect securely like this: shell> mysql –ssl-ca=ca-cert.pem” which does not work with “REQUIRE SSL”. You still have to supply the client cert and key for any or a combined client+server cert for a local secure connection."
    },
    {
        "link": "https://techdocs.broadcom.com/us/en/ca-enterprise-software/layer7-api-management/api-gateway/10-0/install-configure-upgrade/enable-ssl-connections-for-mysql.html",
        "document": "Thu Aug 29 10:47:22 PDT 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification. Thu Aug 29 10:47:22 PDT 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification. Thu Aug 29 10:47:22 PDT 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.\n\nCertain SSL/TLS-enabled MySQL databases may be restricted to only allow TLS v.1.2 when clients such as the Gateway are connecting to it as part of security requirements. The database driver used by the Gateway may make some assumptions of the external database it’s connecting to and limit the TLS version to TLS v1.1. This is especially the case for MySQL databases that did not come with the Gateway (e.g., cloud-based MySQL databases such as AWS Aurora)."
    },
    {
        "link": "https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html",
        "document": "Makes the replication channel assign a GTID to replicated transactions that do not have one, enabling replication from a source that does not use GTID-based replication, to a replica that does. For a multi-source replica, you can have a mix of channels that use , and channels that do not. The default is , meaning that the feature is not used. assigns a GTID including the replica's own UUID (the setting). assigns a GTID including the specified UUID, such as the setting for the replication source server. Using a nonlocal UUID lets you differentiate between transactions that originated on the replica and transactions that originated on the source, and for a multi-source replica, between transactions that originated on different sources. The UUID you choose only has significance for the replica's own use. If any of the transactions sent by the source do have a GTID already, that GTID is retained. Channels specific to Group Replication cannot use , but an asynchronous replication channel for another source on a server instance that is a Group Replication group member can do so. In that case, do not specify the Group Replication group name as the UUID for creating the GTIDs. To set to or , the replica must have set, and this cannot be changed afterwards. This option is for use with a source that has binary log file position based replication, so cannot be set for the channel. Both the replication SQL thread and the replication I/O (receiver) thread must be stopped before setting this option. A replica set up with on any channel cannot be promoted to replace the replication source server in the event that a failover is required, and a backup taken from the replica cannot be used to restore the replication source server. The same restriction applies to replacing or restoring other replicas that use on any channel. For further restrictions and information, see Section 19.1.3.6, “Replication From a Source Without GTIDs to a Replica With GTIDs”.\n\nStops the replication channel persisting file names and file positions in the replication metadata repositories. is available as of MySQL 8.0.27. The option is disabled by default for asynchronous replication channels, but it is enabled by default for Group Replication channels, and it cannot be disabled for them. For replication channels with this setting, in-memory file positions are still tracked, and file positions can still be observed for debugging purposes in error messages and through interfaces such as statements (where they are shown as being invalid if they are out of date). However, the writes and reads required to persist and check the file positions are avoided in situations where GTID-based replication does not actually require them, including the transaction queuing and application process. This option can be used only if both the replication SQL (applier) thread and replication I/O (receiver) thread are stopped. To set for a replication channel, GTIDs must be in use on the server ( ), and row-based binary logging must be in use on the source (statement-based replication is not supported). The options and must be set for the replication channel. When is set, the replica uses if that system variable is set to zero for the server, so it is always technically a multi-threaded applier. This is because a multi-threaded applier uses saved positions rather than the replication metadata repositories to locate the start of a transaction that it needs to reapply. If you disable after setting it, the existing relay logs are deleted and the existing known binary log file positions are persisted, even if they are stale. The file positions for the binary log and relay log in the replication metadata repositories might be invalid, and a warning is returned if this is the case. Provided that is still enabled, GTID auto-positioning is used to provide the correct positioning. If you also disable , the file positions for the binary log and relay log in the replication metadata repositories are used for positioning if they are valid. If they are marked as invalid, you must provide a valid binary log file name and position ( and ). If you also provide a relay log file name and position ( and ), the relay logs are preserved and the applier position is set to the stated position. GTID auto-skip ensures that any transactions already applied are skipped even if the eventual applier position is not correct.\n\nMakes the replica ignore events originating from the specified servers. The option takes a comma-separated list of 0 or more server IDs. Log rotation and deletion events from the servers are not ignored, and are recorded in the relay log. In circular replication, the originating server normally acts as the terminator of its own events, so that they are not applied more than once. Thus, this option is useful in circular replication when one of the servers in the circle is removed. Suppose that you have a circular replication setup with 4 servers, having server IDs 1, 2, 3, and 4, and server 3 fails. When bridging the gap by starting replication from server 2 to server 4, you can include in the statement that you issue on server 4 to tell it to use server 2 as its source instead of server 3. Doing so causes it to ignore and not to propagate any statements that originated with the server that is no longer in use. If contains the server's own ID and the server was started with the option enabled, an error results. When global transaction identifiers (GTIDs) are used for replication, transactions that have already been applied are automatically ignored, so the function is not required and is deprecated. If is set for the server, a deprecation warning is issued if you include the option in a statement. The source metadata repository and the output of provide the list of servers that are currently ignored. For more information, see Section 19.2.4.2, “Replication Metadata Repositories”, and Section 15.7.7.35, “SHOW REPLICA STATUS Statement”. If a statement is issued without any option, any existing list is preserved. To clear the list of ignored servers, it is necessary to use the option with an empty list: A deprecation warning is issued if is issued when any channel has existing server IDs set with . Before starting GTID-based replication, check for and clear all ignored server ID lists on the servers involved. The statement displays the list of ignored IDs, if there is one. If you do receive the deprecation warning, you can still clear a list after is set by issuing a statement containing the option with an empty list.\n\nMakes the replica attempt to connect to the source using the auto-positioning feature of GTID-based replication, rather than a binary log file based position. This option is used to start a replica using GTID-based replication. The default is 0, meaning that GTID auto-positioning and GTID-based replication are not used. This option can be used with only if both the replication SQL (applier) thread and replication I/O (receiver) thread are stopped. Both the replica and the source must have GTIDs enabled ( , or on the replica, and on the source). , , , and cannot be specified together with . If multi-source replication is enabled on the replica, you need to set the option for each applicable replication channel. With set, in the initial connection handshake, the replica sends a GTID set containing the transactions that it has already received, committed, or both. The source responds by sending all transactions recorded in its binary log whose GTID is not included in the GTID set sent by the replica. This exchange ensures that the source only sends the transactions with a GTID that the replica has not already recorded or committed. If the replica receives transactions from more than one source, as in the case of a diamond topology, the auto-skip function ensures that the transactions are not applied twice. For details of how the GTID set sent by the replica is computed, see Section 19.1.3.3, “GTID Auto-Positioning”. If any of the transactions that should be sent by the source have been purged from the source's binary log, or added to the set of GTIDs in the system variable by another method, the source sends the error to the replica, and replication does not start. The GTIDs of the missing purged transactions are identified and listed in the source's error log in the warning message . Also, if during the exchange of transactions it is found that the replica has recorded or committed transactions with the source's UUID in the GTID, but the source itself has not committed them, the source sends the error to the replica and replication does not start. For information on how to handle these situations, see Section 19.1.3.3, “GTID Auto-Positioning”. You can see whether replication is running with GTID auto-positioning enabled by checking the Performance Schema table or the output of . Disabling the option again makes the replica revert to file-based replication.\n\nControls the heartbeat interval, which stops the connection timeout occurring in the absence of data if the connection is still good. A heartbeat signal is sent to the replica after that number of seconds, and the waiting period is reset whenever the source's binary log is updated with an event. Heartbeats are therefore sent by the source only if there are no unsent events in the binary log file for a period longer than this. The heartbeat interval is a decimal value having the range 0 to 4294967 seconds and a resolution in milliseconds; the smallest nonzero value is 0.001. Setting to 0 disables heartbeats altogether. The heartbeat interval defaults to half the value of the or system variable. It is recorded in the source metadata repository and shown in the Performance Schema table. The system variable (from MySQL 8.0.26) or (before MySQL 8.0.26) specifies the number of seconds that the replica waits for either more data or a heartbeat signal from the source, before the replica considers the connection broken, aborts the read, and tries to reconnect. The default value is 60 seconds (one minute). Note that a change to the value or default setting of or does not automatically change the heartbeat interval, whether that has been set explicitly or is using a previously calculated default. A warning is issued if you set the global value of or to a value less than that of the current heartbeat interval. If or is changed, you must also issue to adjust the heartbeat interval to an appropriate value so that the heartbeat signal occurs before the connection timeout. If you do not do this, the heartbeat signal has no effect, and if no data is received from the source, the replica can make repeated reconnection attempts, creating zombie dump threads.\n\nThe user name for the replication user account to use for connecting to the replication source server. The maximum length of the string value is 96 characters. For Group Replication, this account must exist on every member of the replication group. It is used for distributed recovery if the XCom communication stack is in use for the group, and also used for group communication connections if the MySQL communication stack is in use for the group. With the MySQL communication stack, the account must have the permission. It is possible to set an empty user name by specifying , but the replication channel cannot be started with an empty user name. In releases before MySQL 8.0.21, only set an empty user name if you need to clear previously used credentials from the replication metadata repositories for security purposes. Do not use the channel afterwards, due to a bug in these releases that can substitute a default user name if an empty user name is read from the repositories (for example, during an automatic restart of a Group Replication channel). From MySQL 8.0.21, it is valid to set an empty user name and use the channel afterwards if you always provide user credentials using the statement or statement that starts the replication channel. This approach means that the replication channel always needs operator intervention to restart, but the user credentials are not recorded in the replication metadata repositories. To connect to the source using a replication user account that authenticates with the plugin, you must either set up a secure connection as described in Section 19.3.1, “Setting Up Replication to Use Encrypted Connections”, or enable the unencrypted connection to support password exchange using an RSA key pair. The authentication plugin is the default for new users created from MySQL 8.0 (for details, see Section 8.4.1.2, “Caching SHA-2 Pluggable Authentication”). If the user account that you create or use for replication uses this authentication plugin, and you are not using a secure connection, you must enable RSA key pair-based password exchange for a successful connection. You can do this using either the option or the option for this statement.\n\nEnables a replica to select its own policy for primary key checks. The default is . is available as of MySQL 8.0.20. When the option is set to for a replication channel, the replica always uses the value for the system variable in replication operations, requiring a primary key. When the option is set to , the replica always uses the value for the system variable in replication operations, so that a primary key is never required, even if the source required one. When the option is set to , which is the default, the replica uses whatever value is replicated from the source for each transaction. For multisource replication, setting to or enables a replica to normalize behavior across the replication channels for different sources, and keep a consistent setting for the system variable. Using safeguards against the accidental loss of primary keys when multiple sources update the same set of tables. Using allows sources that can manipulate primary keys to work alongside sources that cannot. When is set, setting to or means that the user account does not need session administration level privileges to set restricted session variables, which are required to change the value of to match the source's setting for each transaction. For more information, see Section 19.3.3, “Replication Privilege Checks”."
    },
    {
        "link": "https://dev.mysql.com/doc/refman/8.4/en/replication-encrypted-connections.html",
        "document": "To use an encrypted connection for the transfer of the binary log required during replication, both the source and the replica servers must support encrypted network connections. If either server does not support encrypted connections (because it has not been compiled or configured for them), replication through an encrypted connection is not possible.\n\nSetting up encrypted connections for replication is similar to doing so for client/server connections. You must obtain (or create) a suitable security certificate that you can use on the source, and a similar certificate (from the same certificate authority) on each replica. You must also obtain suitable key files.\n\nFor more information on setting up a server and client for encrypted connections, see Section 8.3.1, “Configuring MySQL to Use Encrypted Connections”.\n\nTo enable encrypted connections on the source, you must create or obtain suitable certificate and key files, and then add the following configuration parameters to the section of the source file, changing the file names as necessary:\n\nThe paths to the files may be relative or absolute; we recommend that you always use complete paths for this purpose.\n\nThe configuration parameters are as follows:\n\nTo enable encrypted connections on the replica, use the statement.\n• None To name the replica's certificate and SSL private key files using , add the appropriate options, like this: These options correspond to the options with the same names, as described in Command Options for Encrypted Connections. For these options to take effect, must also be set. For a replication connection, specifying a value for either of or corresponds to setting . The connection attempt succeeds only if a valid matching Certificate Authority (CA) certificate is found using the specified information.\n• None To activate host name identity verification, add the option, like this: For a replication connection, specifying corresponds to setting , as described in Command Options for Encrypted Connections. For this option to take effect, must also be set. Host name identity verification does not work with self-signed certificates.\n• None To activate certificate revocation list (CRL) checks, add the or option, as shown here: These options correspond to the options with the same names, as described in Command Options for Encrypted Connections. If they are not specified, no CRL checking takes place.\n• None To specify lists of ciphers, ciphersuites, and encryption protocols permitted by the replica for the replication connection, use the , , and options, like this:\n• None The option specifies a colon-separated list of one or more ciphers permitted by the replica for the replication connection.\n• None The option specifies a comma-separated list of the TLS encryption protocols permitted by the replica for the replication connection, in a format like that for the server system variable. The connection procedure negotiates the use of the highest TLS version that both the source and the replica permit. To be able to connect, the replica must have at least one TLS version in common with the source.\n• None The option specifies a colon-separated list of one or more ciphersuites that are permitted by the replica for the replication connection if TLSv1.3 is used for the connection. If this option is set to when TLSv1.3 is used (which is the default if you do not set the option), the ciphersuites that are enabled by default are allowed. If you set the option to an empty string, no cipher suites are allowed, and TLSv1.3 is therefore not used. The protocols, ciphers, and ciphersuites that you can specify in these lists depend on the SSL library used to compile MySQL. For information about the formats, the permitted values, and the defaults if you do not specify the options, see Section 8.3.2, “Encrypted Connection TLS Protocols and Ciphers”. You can use the option to specify any selection of ciphersuites, including only non-default ciphersuites if you want.\n• None After the source information has been updated, start the replication process on the replica, like this: You can use the statement to confirm that an encrypted connection was established successfully.\n• None Requiring encrypted connections on the replica does not ensure that the source requires encrypted connections from replicas. If you want to ensure that the source only accepts replicas that connect using encrypted connections, create a replication user account on the source using the option, then grant that user the privilege. For example: mysql> CREATE USER 'repl'@'%.example.com' IDENTIFIED BY 'password' -> REQUIRE SSL; mysql> GRANT REPLICATION SLAVE ON *.* -> TO 'repl'@'%.example.com'; If you have an existing replication user account on the source, you can add to it with this statement:"
    },
    {
        "link": "https://dev.mysql.com/doc/mysql-replication-excerpt/5.7/en/replication-encrypted-connections.html",
        "document": "To use an encrypted connection for the transfer of the binary log required during replication, both the source and the replica servers must support encrypted network connections. If either server does not support encrypted connections (because it has not been compiled or configured for them), replication through an encrypted connection is not possible.\n\nSetting up encrypted connections for replication is similar to doing so for client/server connections. You must obtain (or create) a suitable security certificate that you can use on the source, and a similar certificate (from the same certificate authority) on each replica. You must also obtain suitable key files.\n\nFor more information on setting up a server and client for encrypted connections, see Configuring MySQL to Use Encrypted Connections.\n\nTo enable encrypted connections on the source, you must create or obtain suitable certificate and key files, and then add the following configuration parameters to the source's configuration within the section of the source's file, changing the file names as necessary:\n\nThe paths to the files may be relative or absolute; we recommend that you always use complete paths for this purpose.\n\nThe configuration parameters are as follows:\n\nTo enable encrypted connections on the replica, use the statement.\n• None To name the replica's certificate and SSL private key files using , add the appropriate options, like this: These options correspond to the options with the same names, as described in Command Options for Encrypted Connections. For these options to take effect, must also be set. For a replication connection, specifying a value for either of or corresponds to setting . The connection attempt succeeds only if a valid matching Certificate Authority (CA) certificate is found using the specified information.\n• None To activate host name identity verification, add the option: This option corresponds to the option, which is deprecated as of MySQL 5.7.11 and removed in MySQL 8.0. For a replication connection, specifying corresponds to setting , as described in Command Options for Encrypted Connections. For this option to take effect, must also be set. Host name identity verification does not work with self-signed certificates.\n• None To activate certificate revocation list (CRL) checks, add the or option, as shown here: These options correspond to the options with the same names, as described in Command Options for Encrypted Connections. If they are not specified, no CRL checking takes place.\n• None To specify lists of ciphers and encryption protocols permitted by the replica for the replication connection, add the and options, like this: The option specifies the list of ciphers permitted by the replica for the replication connection, with one or more cipher names separated by colons. The option specifies the encryption protocols permitted by the replica for the replication connection. The format is like that for the system variable, with one or more comma-separated protocol versions. The protocols and ciphers that you can use in these lists depend on the SSL library used to compile MySQL. For information about the formats and permitted values, see Encrypted Connection TLS Protocols and Ciphers.\n• None After the source information has been updated, start the replication process on the replica, like this: You can use the statement to confirm that an encrypted connection was established successfully.\n• None Requiring encrypted connections on the replica does not ensure that the source requires encrypted connections from replicas. If you want to ensure that the source only accepts replicas that connect using encrypted connections, create a replication user account on the source using the option, then grant that user the privilege. For example: mysql> CREATE USER 'repl'@'%.example.com' IDENTIFIED BY 'password' -> REQUIRE SSL; mysql> GRANT REPLICATION SLAVE ON *.* -> TO 'repl'@'%.example.com'; If you have an existing replication user account on the source, you can add to it with this statement:"
    },
    {
        "link": "https://stackoverflow.com/questions/20058136/mysql-replication-w-ssl-how-does-it-work",
        "document": "thank you for the help.\n\nI was hoping that someone could shed some light on how mysql uses SSL. I am currently up and running with master/slave replication, however, I'd like to make sure that the traffic is secured through SSL. The instructions that I am using are here:\n\nThe question that I have is does the master or the slave store and use the .key?\n\nWhen I configure the slave, I use the CHANGE MASTER TO command and specify the CA, PATH, CERT, and KEY. Are these the files that are housed on my master server?\n\nI'm also told to specify in my.cnf the [client] CA, CERT, and KEY. Again, are these the files on the master?\n\nI guess I'm just not understanding the workflow. It would seem that the slave would contact the master, the master would require ssl, then the slave would request the public key from the master to establish the secure connection.\n\ncan anyone help me with this? Thanks again!"
    },
    {
        "link": "https://dba.stackexchange.com/questions/144663/trying-to-understand-mysql-replication-with-ssl",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://red-gate.com/simple-talk/databases/mysql/a-beginners-guide-to-mysql-replication-part-6-security-considerations-in-mysql-replication",
        "document": "This article is part of Aisha Bukar's 6 part series: A Beginners Guide to MySQL Replication. The entries include: Protecting and controlling access to your data against unauthorized person(s) is crucial in any organization. Unauthorized entry or modification of your data can lead to severe and sometimes irreversible damage.\n\nJust like we mentioned at the beginning of this series, MySQL Replication is a process where data from one MySQL database known as the source is copied over to one or more other databases called replicas. It is possible for data to get breached during this process.\n\nWhen setting up replication in MySQL, it is essential to understand the security issues that may arise as well as understand ways to counteract them. Choosing the suitable security method for your server instances and setting up ways to recover corrupted or lost information is necessary. In the last part of this series, we will look at security risks, best practices, and backup and disaster recovery methods in MySQL replication.\n\nSecurity in database systems cannot be overemphasized especially at a time when careless exposure of data could lead to serious damages. The amount of data stored in databases has significantly increased due to the rapid development of technology around the world, therefore, careful structure needs to be put in place to avoid these data falling into the wrong hands. There are so many factors to consider when looking at security in databases such as data protection, accountability, compliance, and so on. Yet, all of these factors can be distilled into these four essential categories, which are:\n\nKeeping your data private and preventing unauthorized access to these data is super important. Data confidentiality aims to protect your data from unwanted access. Neglecting data confidentiality can lead to privacy violations, financial setbacks, legal repercussions, and harm an organization’s reputation. Employing security measures such as access controls, encryption, and login checks helps safeguard confidentiality, they are like your data’s bodyguards.\n\nData integrity is all about ensuring that data remains accurate and reliable from the moment it’s first generated or input into a system, right through its entire life cycle. This is especially crucial in fields like finance, healthcare, and research, where the precision and trustworthiness of data are paramount for making informed decisions and complying with regulations To safeguard data integrity, it’s important to have regular data backups and a robust recovery plan in place. These measures can prove invaluable in restoring data to its accurate and consistent state in the event of data loss or corruption.\n\nData availability simply means making sure you can get your data when you want it. Its primary goal is to guarantee that data remains consistently accessible and functional. To maintain data availability, it’s crucial to regularly generate data backups and establish disaster recovery strategies. This is effective in the case of data loss. Also, enforcing strong security measures like firewalls and access control methods helps safeguard data availability and protect against unauthorized entry.\n\nData authenticity is all about making sure the information in a database is real, correct, and reliable. We need to check that no one has changed it without permission and that it truly shows the right things. Organizations use this data to make big decisions. If the data isn’t authentic, they might make choices that can be harmful. Keeping data authentic is a big part of keeping it safe and making sure it stays authentic.\n\nWhile MySQL Replication is a powerful feature for data transfer and availability, it still introduces different potential security risks that need to be considered and mitigated. Here are some of the security risks you may encounter in MySQL replication:\n• Unauthorized access to replication data: When an attacker gains access to a replication stream, they can intercept sensitive data that is being replicated between servers. This sensitive data could be passwords or confidential files or maybe customer data. This could lead to compromising existing data by modification, or sometimes even deletion of the data.\n• Authentication and Authorization: If your MySQL credentials are mishandled, it opens the door for attackers to infiltrate your databases, including gaining access to replication privileges. When an attacker gets hold of replication privileges, they can potentially increase their control over the target server, which can result in more serious security breaches. Ultimately, this could lock out authorized users from accessing the database.\n• Network Security: If there are no adequate encryption methods in place such as SSL/TLS, the data traveling between MySQL servers during replication becomes vulnerable to interception. This means that if an attacker has access to the network, they can secretly monitor the replication traffic. In the absence of encryption, attackers could even go as far as intercepting (man-in-the-middle attacks) and altering the replication data packets, which can result in data tampering or unauthorized modifications.\n• Vulnerabilities in Replication Protocols: Just like any software, MySQL replication itself may be susceptible to some vulnerabilities that attackers can exploit to disrupt the replication process or the entire database system. Regularly updating MySQL and monitoring security performance is essential in addressing these issues.\n\nUnderstanding the potential risks that could occur in a replication topology is one thing, knowing how to counteract these risks is another. There are standard methods available for securing replication, here are some of the best practices:\n\nSSL/TLS (Secure Sockets Layer/Transport Layer Security) encryption safeguards the data exchanged between MySQL servers by encrypting it, thus preventing unauthorized monitoring and unauthorized alterations. To use SSL/TLS encryption for replication traffic, you must configure MYSQL replication to use these encrypted connections by taking advantage of OpenSSL. OpenSSL is a freely available software library and set of tools that offers comprehensive support for SSL/TLS protocols, as well as an extensive array of cryptographic features and utilities. Here’s a very basic step on what you need to do:\n• Generate a security certificate and the necessary key files using the OpenSSL command line and provide the necessary information.\n• Move the certificate and key files to the appropriate location\n• Add the certificate and key file-related parameters to the [mysqld] section of the MySQL configuration file (my.cnf or my.ini). Here’s an example of how this may look like:\n• Restart the MySQL server to apply the configuration changes.\n• Create an equivalent certificate from the identical certificate authority generated on the source server for each replica.\n• Add the appropriate file parameters to the “CHANGE REPLICATION SOURCE” or “CHANGE MASTER” statement. Here’s an example of how this should look like:\n• After configuring the replication source on each replica, start the replication process using the ‘START REPLICA’ or ‘START SLAVE’ command.\n\nThis is just a basic guide on how to implement SSL encryption for replication environments. For more information on obtaining an SSL certificate and key files using OpenSSL, please visit the official documentation.\n\nIt is advisable to use complex passwords for your MySQL root accounts. Avoid the use of default usernames or passwords, rather take advantage of password policies that implement different combinations of numbers, letters, and symbols. An important guideline mentioned in the MySQL documentation is also to: “Restrict access to the ‘user’ table in the ‘MySQL’ system database to MySQL root accounts ONLY”. This grants the necessary permissions only to the appropriate users.\n\nRole-Based Access Control (RBAC) can be a valuable approach in MySQL replication. RBAC can improve security by reducing the potential for human error in assigning and managing permissions. It also makes it more difficult for malicious users to gain unauthorized access. Here are some ways to consider implementing RBAC for enhanced security in MySQL replication:\n• Clearly define specific replication roles based on the responsibilities and privileges required for replication tasks. For example, you might have roles like “Replication Master,” or “Replication Slave”.\n• Determine the specific privileges each replication role should have. For example, a “Replication Master” role might have privileges for creating and modifying replication configurations, while a “Replication Slave” role might have read-only privileges for replication monitoring.\n• Users involved in replication should be assigned the relevant replication roles, while users with other database responsibilities should be assigned appropriate database roles.\n• Conduct regular reviews of role assignments and privileges to ensure they align with the current requirements and responsibilities of users involved in replication.\n• Ensure that each role is assigned the minimum necessary privileges to perform its tasks. This reduces the risk of unintended actions and security breaches.\n\nImplementing network security measures is an important aspect of security in MySQL replication. Firewalls are important when it comes to managing incoming and outgoing traffic to and from MySQL servers engaged in replication. Below are key firewall strategies to consider:\n• IP Whitelisting: Employ the practice of IP whitelisting to exclusively permit replication traffic from trusted IP addresses or specific subnets. This involves configuring firewall rules that exclusively authorize connections originating from the designated IP addresses of validated MySQL servers, while actively blocking access from all other sources.\n• Port Restriction: Limiting the exposure of MySQL replication ports enhances security, typically port 3306 for MySQL. By doing so, you confine access to the MySQL service solely to systems that have been explicitly authorized.\n• Logging and Monitoring: Enable the logging and monitoring features of your firewall to actively observe network traffic. This vigilant approach allows for the identification of any unauthorized or suspicious connection attempts, enabling timely detection and response to potential security threats.\n\nIt is also advisable to incorporate a Virtual Private Network(VPN). Using a VPN for replication traffic introduces an additional security layer. A VPN typically establishes a secure, encrypted tunnel across the public network, guaranteeing the confidentiality and security of replication data as it traverses the network.\n\nPreparing for disaster recovery and regularly backing up databases is crucial in case unexpected accidents or disasters occur. MySQL offers replication features such as asynchronous replication, which can be used for disaster recovery. In this setup, the replica server(s) replicates data from the source server. If the source server fails, the replica can take over.\n\nMySQL offers different types of backup methods such as physical backups, logical backups, online backups, offline backups, and snapshot backups, to name a few. It’s important to know some key differences between these backup methods.\n\nFor example, logical backups are made using tools like to generate SQL files containing both the database schema and its data. Although these files are easy for humans to read, they may perform more slowly for large databases. On the other hand, physical backups entail copying the actual database files, resulting in a faster backup and restore process. However, they may not be as easily transported as logical backups.\n\nAnother example would be snapshot backups. Snapshot backups are like quick pictures of your MySQL database that show exactly how it looked at one specific moment in time. For more information on backup and recovery methods, please visit the MySQL official documentation.\n\nAt this point, I can safely say it’s crystal clear how security is of paramount importance in MySQL replication. I’d like to express my gratitude for your unwavering support from the start to the very end of this series. I hope you’ve understood how replication works and can put it into practice in real-world scenarios. Thank you for reading!"
    }
]