[
    {
        "link": "https://coin-or.github.io/pulp",
        "document": "PuLP is an linear and mixed integer programming modeler written in Python.\n\nWith PuLP, it is simple to create MILP optimisation problems and solve them with the latest open-source (or proprietary) solvers. PuLP can generate MPS or LP files and call solvers such as GLPK, COIN-OR CLP/CBC, CPLEX, GUROBI, MOSEK, XPRESS, CHOCO, MIPCL, HiGHS, SCIP/FSCIP.\n\nHere are some ways to get started using PuLP:\n• None for instructions about installing PuLP see Installing PuLP at Home.\n• None If you’re new to Python and optimisation we recommend that you read Optimisation Concepts, The Optimisation Process, and the Basic Python Coding.\n• None If you want to jump right in then start reading the case studies starting with A Blending Problem.\n\nThe full PuLP API documentation is available, and useful functions are also explained in the case studies. The case studies are in order, so the later case studies will assume you have (at least) read the earlier case studies. However, we will provide links to any relevant information you will need."
    },
    {
        "link": "https://coin-or.github.io/pulp/main/includeme.html",
        "document": "PuLP is an linear and mixed integer programming modeler written in Python. With PuLP, it is simple to create MILP optimisation problems and solve them with the latest open-source (or proprietary) solvers. PuLP can generate MPS or LP files and call solvers such as GLPK, COIN-OR CLP/CBC, CPLEX, GUROBI, MOSEK, XPRESS, CHOCO, MIPCL, HiGHS, SCIP/FSCIP.\n\nThe documentation for PuLP can be found here.\n\nPuLP is part of the COIN-OR project.\n\nThe easiest way to install PuLP is with . If is available on your system, type: Otherwise follow the download instructions on the PyPi page.\n\nUse to create new variables. To create a variable x with 0 ≤ x ≤ 3: To create a binary variable, y, with values either 0 or 1: Use to create new problems. Create a problem called “myProblem” like so: Combine variables in order to create expressions and constraints, and then add them to the problem.: An expression is a constraint without a right-hand side (RHS) sense (one of , or ). If you add an expression to a problem, it will become the objective: To solve the problem with the default included solver: If you want to try another solver to solve the problem: Display the status of the solution: You can get the value of the variables using . ex:\n• None – Variables that are added into constraints in the LP problem\n• None – A special type of constraint for constructing column of the model in column-wise modelling\n• None – Finds the value of a variable or expression\n• None – Given a list of the form [a1*x1, a2*x2, …, an*xn] will construct a linear expression to be used as a constraint or variable\n• None – Given two lists of the form [a1, a2, …, an] and [x1, x2, …, xn] will construct a linear expression to be used as a constraint or variable\n\nSeveral tutorial are given in documentation and pure code examples are available in examples/ directory . The examples use the default solver (CBC). To use other solvers they must be available (installed and accessible). For more information on how to do that, see the guide on configuring solvers."
    },
    {
        "link": "https://benalexkeen.com/linear-programming-with-python-and-pulp",
        "document": "Introduction to Linear Programming with Python and PuLP\n\nLinear Programming, also sometimes called linear optimisation, involves maximising or minimising a linear objective function, subject to a set of linear inequality or equality constraints.\n\nIt has great applications in the field of operations management but can be used to solve a range of problems.\n\nLeonard Kantrovich was awarded the 1975 Nobel Price in Economics for the optimal allocation of resources using linear programming.\n\nExamples of problems that can be solved by linear programming include:\n• Scheduling – Rota or Factory scheduling to meet production/workload demands at lowest cost\n• Resourcing Problems – How best to allocate resources to maximise profits\n\nIn this series of posts, we explore some linear programming examples, starting with some very basic Mathematical theory behind the technique and moving on to some real world examples.\n\nWe will be using python and the PuLP linear programming package to solve these linear programming problems. PuLP largely uses python syntax and comes packaged with the CBC solver; it also integrates nicely with a range of open source and commercial LP solvers.\n\nThis tutorial should have you up and running and solving your own linear programming problems using python in no time.\n\nIntroduction\n\n Part 1 – Introduction to Linear Programming \n\n Part 2 – Introduction to PuLP \n\n Part 3 – Real world examples – Resourcing Problem \n\n Part 4 – Real world examples – Blending Problem \n\n Part 5 – Using PuLP with pandas and binary constraints to solve a scheduling problem \n\n Part 6 – Mocking conditional statements using binary constraints\n\nIf you’re interested in downloading the jupyter notebooks to have a go yourself with the examples I’ve written out here, they’re all available on Github here"
    },
    {
        "link": "https://medium.com/@telmosubirar/linear-programming-optimizing-solutions-with-python-using-pulp-e0c4379696c8",
        "document": "While you may have heard that most computer science problems are solved with Deep Learning techniques nowadays, there are many optimization problems that don’t require too many resources and complex architectures to find optimum (or sub-optimum) solutions.\n\nThis is the case of Linear Programming problems, in which we need to optimize some linear target function based on a set of constraints. The variables of the target function may take continuous or discrete values or even binary values than encode states of decisions. If you want to learn more about what is Linear Programming and the mathematics behind the most common solutions, I recommend you to check the references [1], [2], and [3].\n\nHowever, in this article, I will suppose what you already know about Linear Programming — or you don’t really care that much right now, but you need to solve an optimization problem ASAP! I really hope you will find some time to learn about this matter later.\n\nNow that we have settled the introduction, let’s get into the matter. We recommend you the library PuLP [4], which is really helpful for writing down the model of the optimization problem. PuLP includes a default solver algorithm for these problems based on simplex combined with other algorithms, but it allows you to use other solvers (GUROBI, GLPK, CPLEX, etc.) through API connections [5].\n\nBefore we use PuLP in a simple example that will serve you as a problem-solver template, we must answer - are there other remarkable alternatives to PuLP?\n\nYes, there are. The first and most sound is probably the linprog package from scipy.optimize. I prefer PuLP just because the scipy option only includes a minimization solver, and does not allow you to define restrictions with a ‘higher or equal than’ condition. Even when you can bypass these limitations by reformulating your problem, the PuLP approach is just clearer and more simple.\n\nThe second alternative that I recommend is the linear_solver of the OR-Tools from Google. If you are interested in this option, check reference [6].\n\nThe objective of the Transport Problem is to minimize the total cost of transport for a product that should be delivered in certain known places with known demand from storage centers with known offer capacity.\n\nLet’s start by modeling an example of the problem:\n\nSuppose that our company has three warehouses W1, W2, and W3 in this area. Every warehouse has the capacity to store O1, O2 and O3 units of the product (offer). The sum of these capacities is the same as the total demand expected in this area, according to the supply contracts established with the local stores. The company must supply the orders (demand) of this product for three different stores, S1, S2, and S3. Every store asks for D1, D2, and D3 units.\n\nAdditionally, we calculated the cost of delivering every unit from warehouse i to store j as Cij. We know the cost from, for example, a preliminary study based on the distance between the buildings, the weight of the products, and the price of gas. If we name the number of units delivered from warehouse i to store j as Xij, we can compute the cost as Cij·Xij.\n\nWe can easily represent this model as a graph, in which every delivery route is labeled with the total cost of delivering Xij products with a cost of Cij per unit:\n\nIn the end, we want to minimize the total cost of delivering all the demanded units from the warehouses to the stores. We can model this as the following target function:\n\nand by the definition of the problem, we know that the search of the minimum is limited by the following restrictions:\n\nand, of course, the value of every Xij must be equal to or higher than 0. One can understand that these sums are just the mathematical formality to express exactly what I have already stated before with natural language.\n\nHow do we start with PuLP? First of all, you will need to install it:\n\nAnd once you have it ready to use, begin your script/program/notebook with the import line:\n\nNow, you can create the LP problem object as follows. In this case, we name it “Transport_Problem” and we set the optimization problem a minimization.\n\nFrom the description of the problem, we will need some constants to define the costs Cij of every link between warehouses and stores, and the offer and demand of every location.\n\nIn this case, I just assigned some random values and I made sure that the total demand equals the total offer from the warehouses:\n\nNow, we have to create the variables to optimize. In this case, every Xij. We set them as integers (attribute cat) since we can only deliver complete units of the product, and we set the attribute lowBound to 0 as an initial restriction so the solver does not assign negative values to them.\n\nNow that we have already created the variables for the PuLP model, we can add the target function to the model as a function of these variables. Note that the target function will always be a linear expression, not an equation or inequation. Working with PuLP, we just add the expression to the model:\n\nThe last step before solving the problem is setting the constraints. As we did with the target function, we just add them to the model. However, in this case, we are adding equations or inequations (comparations) and not just linear expressions:\n\nAnd we finally call the default solver to find the solution to the problem:\n\nHere, we can check the values assigned to the variables and the target function:\n\nIn this case, the results are:\n\nIf you want to check and try this code, you can access my collab notebook:\n\nSolving LP problems with PuLP is fast and easy for Python developers.\n\nMost of the time, deciding the correct model for the problem and efficiently setting all the constraints are the most challenging tasks. Imagine a problem with 1000 warehouses and 5000 stores: we cannot just create all the variables by hand. We might also have additional constraints such as time restrictions or sub-area dependencies, leading to the creation of even hundreds of constraints.\n\nIn these cases, the developer should think of some smart programming and the use of vector and matrix structures (NumPy would be handy, as always) to add the information to the PuLP model.\n\n[5] How to configure a solver in PuLP. https://coin-or.github.io/pulp/guides/how_to_configure_solvers.html"
    },
    {
        "link": "https://pypi.org/project/PuLP",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://medium.com/towards-data-science/supply-chain-process-optimization-using-linear-programming-b1511800630f",
        "document": "In the case study presented below, we will introduce the methodology using the problem of warehouse fleet management.\n\nI aim to give you a detailed recipe that can be replicated for other problems.\n\nThe operations manager of a multi-user warehouse is requesting your support to optimize the management of its fleet of reach trucks.\n\nReach trucks are material handling equipment used in warehouses for multiple applications such as:\n\nAfter aligning with the different team leaders, he compiled demand forecasts for the next five weeks.\n\nThe demand fluctuates from one week to another.\n\nBecause of budget constraints, you cannot rent 10 trucks for six weeks.\n\nThis type of equipment is usually leased to have more flexibility. You have the choice between several types of trucks:\n• Type 1 — Long-term lease trucks: These trucks need to be leased for six weeks for 225 euros/week\n• Type 2 — Short team lease trucks: These trucks can be leased for one week for 395 euros/week\n• Type 3 — Shared trucks: Long-term lease trucks shared with another warehouse are only available WEEK 2, WEEK 4 and WEEK 6 for 205 euros/week\n• Type 4— Special price: These trucks can be leased for the last three weeks at a discounted price of 200 euros/week with a maximum order quantity of 2 trucks\n\nThese conditions are realistic. Indeed, leasing companies are adapting their offers to reduce the costs for logistics companies.\n\nProblem Statement\n\nThe operations manager asked for your support to answer the following question.\n\nDecision variables\n\nThey will be integers because you can only rent full trucks.\n\n💡 TIP: You need to translate the conditions into mathematical equations\n\nConstraints are not always straightforward, therefore you need to adapt them to fit with the framework of LP.\n\nBecause Type 2 trucks can be rented at any time we will need to create six variables for the six weeks.\n\nDemand Constraints\n\nThe first constraint is related to the demand. Each week, you need to ensure that you have enough trucks.\n\nLet me use the example of the first week to explain the process\n• We need 5 trucks at least\n• Type 1 trucks can be rented: include t[1] in the equation\n• Type 2 trucks can be rented: include t[2] in the equation\n• Type 3 trucks cannot be rented: do not include t[8] in the equation\n• Type 4 trucks cannot be rented: do not include t[9] in the equation\n\nThe final equation after translation of the conditions is: t[1] + t[2] >= 5\n\nObjective Function\n\nThis is the total rental cost for the six weeks of operations, the sum of the number of reach trucks per type multiplied by the unit rental price.\n\nThe implementation is straightforward. It uses the PuLP library, a Python modelling framework for linear (LP) and Integer Programming (IP) problems.\n\nYou can find in this article a detailed example of the implementation\n\nThe most important part is the problem statement.\n\nGather all the information needed and double-check with operational teams to ensure that your understanding of the problem is correct."
    },
    {
        "link": "https://stackoverflow.com/questions/74363675/python-inventory-allocation-optimization-using-pulp",
        "document": "It is impossible to troubleshoot this well because the problem is not reproducible without data. However a couple things to help you:\n• None Get all of your data squared away (and look at it) before you start the model. Get out of and just put the material, costs, demands, etc. into dictionaries. You have masking, groupby, etc. all going on some something is probably wrong in there, but it is impossible to figure out. After you get the model working using only dictionaries, then maybe tweak it back to work from a dataframe if you like. Basic idea: get the simple model working.\n• None Your objective statement is not properly constructed. You have an inequality in there and you are trying to sum over that? It doesn't make sense.\n\nThe first major issue you have is that you are trying to index by the items in , but you only have it as a list. It should be:\n\nI'm not sure what you are doing with the function, but you cannot use an arbitrary function as part of a constraint. You need to construct a linear expression out of the variables and parameters in the model, which might be quite complicated for what you appear to be trying to do."
    },
    {
        "link": "https://chopaul.com/pulp-optimization",
        "document": "Forecasting is never perfect. Therefore, there is need of re-balancing inventory in every retail or manufacturing organization. I will provide very basic example so someone can grasp some understanding.\n\nThe transportation problem revolves around determining the most cost-effective distribution plan that meets all supply and demand constraints. Imagine we have a set of warehouses (suppliers) and a set of stores (consumers). Each warehouse has a certain supply capacity, each store has a demand that must be met, and there are costs associated with transporting goods from each warehouse to each store. The goal is to minimize the total transportation cost.\n\nInstallation: To solve this with PuLP, we first need to install the library if you haven’t\n\nDefine constants: Now, let’s dive into a simple example. Suppose we have three warehouses or factories, A and B, C with inventories of 100, 300, and 150 units, respectively. We need to supply three stores, V, W, X, Y, and Z, with demands of 190, 40, 180, 160, and 60 units, respectively. The transportation costs per unit are given in a cost matrix.\n\nConverts the cost matrix into a dictionary for easier manipulation in PuLP. The makeDict utility function is used to map the costs matrix to the corresponding warehouses and stores, setting a default value of 0 for any missing entries.\n\nInitializes the optimization problem in PuLP. “LpMinimize” indicates that the goal is to minimize the total transportation cost.\n\n\n\nGenerates a list of tuples representing all possible routes for transportation, combining each warehouse with each store.\n\nCreates a dictionary of decision variables representing the quantity of products to be transported along each route. These variables are integer (LpInteger) and must be greater than or equal to 0.\n\nDefines the objective function of the problem, which is to minimize the total transportation cost. This is achieved by summing up the product of the quantity transported along each route and its corresponding cost.\n\nAdds supply constraints for each warehouse, ensuring that the total quantity transported from a warehouse does not exceed its supply capacity.\n\nAdds demand constraints for each store, ensuring that the total quantity transported to a store meets or exceeds its demand requirement.\n\nPrints the status of the solution (Optimal, Infeasible, Unbounded, etc.).\n\nIterates through each decision variable (route) and prints its optimal value (quantity to be transported) if the problem was solved successfully.\n\n\n\nPrints the total minimum cost of transportation calculated by the solver.\n\nIn conclusion, leveraging PuLP in Python to solve the transportation optimization problem offers a powerful and flexible approach to navigating the complexities of supply chain logistics. Through the thoughtful structuring of cost matrices and the careful application of linear programming principles, businesses can significantly reduce their transportation costs while ensuring that supply and demand constraints are met."
    },
    {
        "link": "https://sciencedirect.com/science/article/abs/pii/S0377221703004739",
        "document": ""
    },
    {
        "link": "https://linkedin.com/advice/0/how-can-you-effectively-manage-inventory-paper-qr2cc",
        "document": ""
    }
]