[
    {
        "link": "https://learn.microsoft.com/en-us/powershell/scripting/learn/shell/running-commands?view=powershell-7.5",
        "document": "PowerShell is a command-line shell and a scripting language used for automation. Similar to other shells, like on Linux or the Windows Command Shell ( ), PowerShell lets you to run any command available on your system, not just PowerShell commands.\n\nFor any shell in any operating system there are three types of commands:\n• None Shell language keywords are part of the shell's scripting language. Shell language keywords can only be used within the runtime environment of the shell. There is no executable file, external to the shell, that provides the keyword's functionality.\n• None OS-native commands are executable files installed in the operating system. The executables can be run from any command-line shell, like PowerShell. This includes script files that may require other shells to work properly. For example, if you run a Windows batch script ( file) in PowerShell, PowerShell runs and passes in the batch file for execution.\n• None Shell environment-specific commands are commands defined in external files that can only be used within the runtime environment of the shell. These include scripts and functions, or they can be specially compiled modules that add commands to the shell runtime. In PowerShell, these commands are known as cmdlets (pronounced \"command-lets\").\n\nAny native command can be run from the PowerShell command line. Usually you run the command exactly as you would in or . The following example shows running the command in on Ubuntu Linux.\n\nAfter starting PowerShell on Ubuntu, you can run the same command from the PowerShell command line:\n\nMost shells include features for using variables, evaluating expressions, and handling strings. But each shell does these things differently. In PowerShell, all parameters start with a hyphen ( ) character. In , most parameters use a slash ( ) character. Other command-line tools may not have a special character for parameters.\n\nEach shell has its own way of handling and evaluating strings on the command line. When running native commands in PowerShell that expect strings to be quoted in a specific way, you may need adjust how you pass those strings.\n\nFor more information, see the following articles:\n\nPowerShell 7.2 introduced a new experimental feature that improved native command handling. For more information, see .\n\nPowerShell also has several more output streams than other shells. The and shells have stdout and stderr. PowerShell has six output streams. For more information, see about_Redirection and about_Output_Streams.\n\nIn general, the output sent to stdout by a native command is sent to the Success stream in PowerShell. Output sent to stderr by a native command is sent to the Error stream in PowerShell.\n\nWhen a native command has a non-zero exit code, is set to . If the exit code is zero, is set to .\n\nHowever, this changed in PowerShell 7.2. Error records redirected from native commands, like when using redirection operators ( ), aren't written to PowerShell's variable and the preference variable doesn't affect the redirected output.\n\nMany native commands write to stderr as an alternative stream for additional information. This behavior can cause confusion in PowerShell when looking through errors and the additional output information can be lost if is set to a state that mutes the output.\n\nPowerShell 7.3 added a new experimental feature that allows you to control whether output to is treated as an error. For more information, see .\n\nAs previously noted, PowerShell commands are known as cmdlets. Cmdlets are collected into PowerShell modules that can be loaded on demand. Cmdlets can be written in any compiled .NET language or using the PowerShell scripting language itself.\n\nThe PowerShell call operator ( ) lets you run commands that are stored in variables and represented by strings or script blocks. You can use this to run any native command or PowerShell command. This is useful in a script when you need to dynamically construct the command-line parameters for a native command. For more information, see the call operator.\n\nThe cmdlet can be used to run native commands, but should only be used when you need to control how the command is executed. The cmdlet has parameters to support the following scenarios:\n• Hide the console window created by the new process\n• Use a different working directory for the command\n\nThe following example runs the native command with redirected input and output streams.\n\nFor more information, see Start-Process.\n\nOn Windows, the cmdlet performs the default action for the specified item. For example, it runs an executable file or opens a document file using the application associated with the document file type. The default action depends on the type of item and is resolved by the PowerShell provider that provides access to the item.\n\nThe following example opens the PowerShell source code repository in your default web browser.\n\nFor more information, see Invoke-Item."
    },
    {
        "link": "https://github.com/MicrosoftDocs/PowerShell-Docs/blob/main/reference/docs-conceptual/learn/shell/running-commands.md",
        "document": "PowerShell is a command-line shell and a scripting language used for automation. Similar to other shells, like on Linux or the Windows Command Shell ( ), PowerShell lets you to run any command available on your system, not just PowerShell commands.\n\nFor any shell in any operating system there are three types of commands:\n• Shell language keywords are part of the shell's scripting language. Shell language keywords can only be used within the runtime environment of the shell. There is no executable file, external to the shell, that provides the keyword's functionality.\n• OS-native commands are executable files installed in the operating system. The executables can be run from any command-line shell, like PowerShell. This includes script files that may require other shells to work properly. For example, if you run a Windows batch script ( file) in PowerShell, PowerShell runs and passes in the batch file for execution.\n• Shell environment-specific commands are commands defined in external files that can only be used within the runtime environment of the shell. These include scripts and functions, or they can be specially compiled modules that add commands to the shell runtime. In PowerShell, these commands are known as cmdlets (pronounced \"command-lets\").\n\nAny native command can be run from the PowerShell command line. Usually you run the command exactly as you would in or . The following example shows running the command in on Ubuntu Linux.\n\nAfter starting PowerShell on Ubuntu, you can run the same command from the PowerShell command line:\n\nMost shells include features for using variables, evaluating expressions, and handling strings. But each shell does these things differently. In PowerShell, all parameters start with a hyphen ( ) character. In , most parameters use a slash ( ) character. Other command-line tools may not have a special character for parameters.\n\nEach shell has its own way of handling and evaluating strings on the command line. When running native commands in PowerShell that expect strings to be quoted in a specific way, you may need adjust how you pass those strings.\n\nFor more information, see the following articles:\n\nPowerShell 7.2 introduced a new experimental feature that improved native command handling. For more information, see .\n\nPowerShell also has several more output streams than other shells. The and shells have stdout and stderr. PowerShell has six output streams. For more information, see about_Redirection and about_Output_Streams.\n\nIn general, the output sent to stdout by a native command is sent to the Success stream in PowerShell. Output sent to stderr by a native command is sent to the Error stream in PowerShell.\n\nWhen a native command has a non-zero exit code, is set to . If the exit code is zero, is set to .\n\nHowever, this changed in PowerShell 7.2. Error records redirected from native commands, like when using redirection operators ( ), aren't written to PowerShell's variable and the preference variable doesn't affect the redirected output.\n\nMany native commands write to stderr as an alternative stream for additional information. This behavior can cause confusion in PowerShell when looking through errors and the additional output information can be lost if is set to a state that mutes the output.\n\nPowerShell 7.3 added a new experimental feature that allows you to control whether output to is treated as an error. For more information, see .\n\nAs previously noted, PowerShell commands are known as cmdlets. Cmdlets are collected into PowerShell modules that can be loaded on demand. Cmdlets can be written in any compiled .NET language or using the PowerShell scripting language itself.\n\nThe PowerShell call operator ( ) lets you run commands that are stored in variables and represented by strings or script blocks. You can use this to run any native command or PowerShell command. This is useful in a script when you need to dynamically construct the command-line parameters for a native command. For more information, see the call operator.\n\nThe cmdlet can be used to run native commands, but should only be used when you need to control how the command is executed. The cmdlet has parameters to support the following scenarios:\n• Hide the console window created by the new process\n• Use a different working directory for the command\n\nThe following example runs the native command with redirected input and output streams.\n\nFor more information, see Start-Process.\n\nOn Windows, the cmdlet performs the default action for the specified item. For example, it runs an executable file or opens a document file using the application associated with the document file type. The default action depends on the type of item and is resolved by the PowerShell provider that provides access to the item.\n\nThe following example opens the PowerShell source code repository in your default web browser.\n\nFor more information, see Invoke-Item."
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scripts?view=powershell-7.5",
        "document": "Describes how to run and write scripts in PowerShell.\n\nA script is a plain text file that contains one or more PowerShell commands. PowerShell scripts have a file extension.\n\nRunning a script is a lot like running a cmdlet. You type the path and file name of the script and use parameters to submit data and set options. You can run scripts on your computer or in a remote session on a different computer.\n\nWriting a script saves a command for later use and makes it easy to share with others. Most importantly, it lets you run the commands simply by typing the script path and the filename. Scripts can be as simple as a single command in a file or as extensive as a complex program.\n\nScripts have additional features, such as the special comment, the use of parameters, support for data sections, and digital signing for security. You can also write Help topics for scripts and for any functions in the script.\n\nBefore you can run a script on Windows, you need to change the default PowerShell execution policy. Execution policy does not apply to PowerShell running on non-Windows platforms.\n\nThe default execution policy, , prevents all scripts from running, including scripts that you write on the local computer. For more information, see about_Execution_Policies.\n\nThe execution policy is saved in the registry, so you need to change it only once on each computer.\n\nTo change the execution policy, use the following procedure.\n\nTo run a script, type the full name and the full path to the script file.\n\nFor example, to run the Get-ServiceLog.ps1 script in the C:\\Scripts directory, type:\n\nTo run a script in the current directory, type the path to the current directory, or use a dot to represent the current directory, followed by a path backslash ( ).\n\nFor example, to run the ServicesLog.ps1 script in the local directory, type:\n\nIf the script has parameters, type the parameters and parameter values after the script filename.\n\nFor example, the following command uses the ServiceName parameter of the Get-ServiceLog script to request a log of WinRM service activity.\n\nAs a security feature, PowerShell does not run scripts when you double-click the script icon in File Explorer or when you type the script name without a full path, even when the script is in the current directory. For more information about running commands and scripts in PowerShell, see about_Command_Precedence.\n\nBeginning in PowerShell 3.0, you can run scripts from File Explorer.\n\nTo use the \"Run with PowerShell\" feature:\n\nRun File Explorer, right-click the script filename and then select \"Run with PowerShell\".\n\nThe \"Run with PowerShell\" feature is designed to run scripts that do not have required parameters and do not return output to the command prompt.\n\nFor more information, see about_Run_With_PowerShell.\n\nTo run a script on one or more remote computers, use the FilePath parameter of the cmdlet.\n\nEnter the path and filename of the script as the value of the FilePath parameter. The script must reside on the local computer or in a directory that the local computer can access.\n\nThe following command runs the script on the remote computers named Server01 and Server02.\n\nGet help for scripts\n\nThe Get-Help cmdlet gets the help topics for scripts as well as for cmdlets and other types of commands. To get the help topic for a script, type followed by the path and filename of the script. If the script path is in your environment variable, you can omit the path.\n\nFor example, to get help for the ServicesLog.ps1 script, type:\n\nA script can contain any valid PowerShell commands, including single commands, commands that use the pipeline, functions, and control structures such as If statements and loops.\n\nTo write a script, open a new file in a text editor, type the commands, and save them in a file with a valid filename with the file extension.\n\nThe following example is a simple script that gets the services that are running on the current system and saves them to a log file. The log filename is created from the current date.\n\nTo create this script, open a text editor or a script editor, type these commands, and then save them in a file named .\n\nTo define parameters in a script, use a statement. The statement must be the first statement in a script, except for comments and any statements.\n\nScript parameters work like function parameters. The parameter values are available to all of the commands in the script. All of the features of function parameters, including the Parameter attribute and its named arguments, are also valid in scripts.\n\nWhen running the script, script users type the parameters after the script name.\n\nThe following example shows a script that has a ComputerName parameter. Both of the script functions can access the ComputerName parameter value.\n\nTo run this script, type the parameter name after the script name. For example:\n\nFor more information about the statement and the function parameters, see about_Functions and about_Functions_Advanced_Parameters.\n\nYou can write a help topic for a script by using either of the two following methods:\n• Create a Help topic by using special keywords in the comments. To create comment-based Help for a script, the comments must be placed at the beginning or end of the script file. For more information about comment-based Help, see about_Comment_Based_Help.\n• Create an XML-based Help topic, such as the type that is typically created for cmdlets. XML-based Help is required if you are translating Help topics into multiple languages.\n\nTo associate the script with the XML-based Help topic, use the Help comment keyword. For more information, see:\n• How to Write Cmdlet Help\n\nBy default, scripts do not return an exit status when the script ends. You must use the statement to return an exit code from a script. By default, the statement returns . You can provide a numeric value to return a different exit status. A nonzero exit code typically signals a failure.\n\nOn Windows, any number between and is allowed.\n\nOn Unix, only positive numbers between (0) and (255) are allowed. A negative number in the range of through is automatically translated into a positive number by adding 256. For example, is transformed to .\n\nIn PowerShell, the statement sets the value of the variable. In the Windows Command Shell (cmd.exe), the exit statement sets the value of the environment variable.\n\nAny argument that is non-numeric or outside the platform-specific range is translated to the value of .\n\nEach script runs in its own scope. The functions, variables, aliases, and drives that are created in the script exist only in the script scope. You cannot access these items or their values in the scope in which the script runs.\n\nTo run a script in a different scope, you can specify a scope, such as Global or Local, or you can dot source the script.\n\nThe dot sourcing feature lets you run a script in the current scope instead of in the script scope. When you run a script that is dot sourced, the commands in the script run as though you had typed them at the command prompt. The functions, variables, aliases, and drives that the script creates are created in the scope in which you are working. After the script runs, you can use the created items and access their values in your session.\n\nTo dot source a script, type a dot (.) and a space before the script path.\n\nAfter the script runs, the functions and variables that the script creates are added to the current scope.\n\nFor example, the script creates the function and the variable.\n\nIf you run the script in its own script scope, the function and the variable exist only while the script is running. When the script exits, the function and variable are removed, as shown in the following example.\n\nWhen you dot source the script and run it, the script creates the function and the variable in your session in your scope. After the script runs, you can use the function in your session, as shown in the following example.\n\nFor more information about scope, see about_Scopes.\n\nA module is a set of related PowerShell resources that can be distributed as a unit. You can use modules to organize your scripts, functions, and other resources. You can also use modules to distribute your code to others, and to get code from trusted sources.\n\nYou can include scripts in your modules, or you can create a script module, which is a module that consists entirely or primarily of a script and supporting resources. A script module is just a script with a file extension.\n\nFor more information about modules, see about_Modules.\n\nPowerShell has many useful features that you can use in scripts.\n• None - You can use a statement to prevent a script from running without specified modules or snap-ins and a specified version of PowerShell. For more information, see about_Requires.\n• None - Contains the full path and name of the script that is being run. This parameter is valid in all scripts. This automatic variable is introduced in PowerShell 3.0.\n• None - Contains the directory from which a script is being run. In PowerShell 2.0, this variable is valid only in script modules ( ). Beginning in PowerShell 3.0, it is valid in all scripts.\n• None - The automatic variable contains information about the current script, including information about how it was started or \"invoked.\" You can use this variable and its properties to get information about the script while it is running. For example, the .MyCommand.Path variable contains the path and filename of the script. .Line contains the command that started the script, including all parameters and values. Beginning in PowerShell 3.0, has two new properties that provide information about the script that called or invoked the current script. The values of these properties are populated only when the invoker or caller is a script.\n• None PSCommandPath contains the full path and name of the script that called or invoked the current script.\n• None PSScriptRoot contains the directory of the script that called or invoked the current script. Unlike the and automatic variables, which contain information about the current script, the PSCommandPath and PSScriptRoot properties of the variable contain information about the script that called the current script.\n• None Data sections - You can use the keyword to separate data from logic in scripts. Data sections can also make localization easier. For more information, see about_Data_Sections and about_Script_Internationalization.\n• None Script Signing - You can add a digital signature to a script. Depending on the execution policy, you can use digital signatures to restrict the running of scripts that could include unsafe commands. For more information, see about_Execution_Policies and about_Signing."
    },
    {
        "link": "https://slai.github.io/posts/powershell-and-external-commands-done-right",
        "document": "PowerShell and external commands done right\n\nWindows PowerShell is a massive step up from the VBScript horror used to manage Windows systems, but one of the things that annoyed me was how there seemed to be black magic involved when trying to make PowerShell execute external commands, i.e. not PowerShell cmdlets.\n\nIt is actually quite straight-forward once you wrap your head around it - it’s just that we try to do things the way we did in VBScript or in OO languages, and PowerShell doesn’t like that.\n\nI’m currently writing a script to automate creating and deleting volume shadow copies, creating a ShadowProtect image in between.\n\nThis includes normal looking commands like,\n\nAs well as funny looking ShadowProtect commands,\n\nThe wrong way to do it\n\nIf you ask Google, you’ll probably get responses telling you to do this:\n\nThis works, but it isn’t the right way to going about mainly because it isn’t the PowerShell way. You’re actually calling the class in the .NET Framework (which PowerShell is based on) that application developers use to launch external applications. Not only is this more code, but also makes it a bit more complicated if you want to process the standard output/error, and also results in a new command window popping up even if it is just another command line application. This method has gained a bit more legitimacy in some use cases though, and in PowerShell v2, is now accessible using the Start-Process cmdlet.\n\nThe next most popular way, but also somewhat error prone and hence the most frustrating, is this:\n\nThe ampersand ( ) here tells PowerShell to execute that command, instead of treating it as a cmdlet or a string. The backticks (the funny looking single-quotes) are there to escape the following character, similar to the in C-based languages, or double-double-quotes ( ) in VB. Otherwise the character will end the string and the parser will cry when it can’t understand what you’re trying to say after that. (You can alternatively use single-quotes instead in this case, as I have in the previous example.)\n\nThe reason why this doesn’t work is because PowerShell is a shell first and foremost. What PowerShell is actually doing is executing the specified executable, but then passes all your parameters within quotes (or if it makes more sense, as a single parameter), as you can see in this alternate, more concise version:\n\nYou’ll probably spend hours pulling your hair out wondering why things aren’t working even when the arguments seem to be passed ok (to make things worse, some command line apps work fine with it). You’ll also likely get cryptic error messages like,\n\nAnd you’ll be left wondering why the hell that is invalid.\n\nEchoargs is a simple tool that spits out the arguments it receives. It is part of the PowerShell Community Extensions download.\n\nIf you replaced the executable in the above command with , you’ll be able to see what’s happening.\n\nExecute that and you’ll get the following output,\n\nSee how all the parameters are being interpreted as one string? That is not what you want - you want them to be interpreted as separate arguments.\n\nHow to do it the PowerShell way\n\nRemember that PowerShell is a shell first and foremost. To run the above external command, just do the following:\n\nNotice that I’m not putting all the arguments into a single string, I’m just writing them as they are. If you run this with Echoargs, you’ll get the following:\n\nThat is what the command line application expects. Notice that each parameter is considered a different argument, as opposed to a single string for all parameters.\n\nUsing PowerShell v3 or later?\n\nIf you’re using PowerShell v3 (which shipped with Windows 8 and Windows Server 2012 and is also available for Windows 7 / 2008 as a separate download), there is a new language feature that simplifies a lot of this. Instead of having to stuff around with escaping and quoting parameters to dodge the PowerShell parser, you can now use the operator which tells PowerShell to stop parsing from that point onward until the end of the line. Everything from that operator onwards is parsed by the parser used by the program (e.g. MS C/C++ runtime) and all those rules apply instead. This means that you can’t reference any PowerShell variables after that operator (any references will be past literally, i.e. will be passed to the external command as ), but it also means you can reference environment variables using the cmd.exe syntax, e.g. (I have no idea what expands them; is cmd.exe still involved somehow?).\n\nFor example, the following command (which will work only in cmd.exe and not PowerShell in its current form),\n\ncan be written as,\n\nfor execution within PowerShell - there is no need to bother with escaping the brackets.\n\nRemember that this only exists in PowerShell v3 or later so if your scripts target older versions of PowerShell, you cannot use this. Also, if you need to reference PowerShell variables, you can’t use this trick either. Read on.\n\nWhat about parameters with spaces in them?\n\nNow, you might be asking, how do I send parameters that contain spaces? Normally we would quote the part that has spaces, e.g.\n\nBut not in Powershell. That will simply confuse it. Instead, just place the entire parameter in quotes, e.g.\n\nOr parameters where the quote characters need to passed on?\n\nIf it is necessary for the quotes to be passed on to the external command (it very rarely is), you will need to double-escape the quotes inside the string, once for PowerShell using the backtick character (`), and again for the parser using the backslash character ( ). For example,\n\nWhen you execute an external command, Powershell grabs the command and the arguments (after the strings have been processed by Powershell and the Powershell escape characters removed), then passes it as a single string to the Windows Command Processor (or possibly straight to the Windows Shell/ Win32 API) program for execution. The program, depending on the parser used (e.g. MS C/C++ runtime), has a separate set of rules for escaping things, therefore it is necessary to escape again to prevent it from interpreting the quotes. Most (but annoyingly, not all) use the MS C/C++ runtime parser, and from what I can gather, it splits up the string into arguments by splitting at each space, unless the space is inside quotes. Because the inner quotes were not escaped using the parser escape character (the backslash), the parser interpreted them as if the quoted parts contained “-script=” and “\", therefore the space between and isn’t actually within any quotes and hence split.\n\nYou can see this happening by playing with echoargs.exe (which uses the MS C/C++ runtime parser) inside the Command Prompt (not the PowerShell prompt).\n\nThe order of the escape characters is important - it must be the backslash character first, then the backtick character. Otherwise, because PowerShell processes the command first, the backtick will escape the backslash instead of the quote as intended.\n\nIf the program does not use the MS C/C++ runtime parser to parse command line arguments, then how it is parsed is entirely dependent on how the program implemented it. The following is a quick PowerShell script that shows you what the raw command line is being passed to the program as well as how one of the alternate methods of parsing it works (CommandLineToArgvW - I believe this is not what the MS C/C++ runtime uses).\n\nSave the above script to a file, e.g. , and execute it like so -\n\nIt is important to execute it in a separate instance of PowerShell (hence the ‘powershell’ in the command line). Otherwise, it will simply show you the arguments of the current instance of PowerShell when it was launched. Use the output of the raw command line to see what PowerShell is passing to the program you’re running, i.e. after any parsing and manipulating that PowerShell does. In this example, notice how the position of the quote characters have changed between the original command line and the raw command line as printed by the script - this is PowerShell manipulating the strings (I’m not quite sure what it is doing though; looks like string concatenation for adjacent strings, but not sure why the quote character has moved).\n\nFor more on the bizarre and inconsistent world of Windows command argument parsing, see http://www.daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV and https://gist.github.com/dolmen/6030690/raw/5dde469149420f12acd6f5a6120c3a90474e4088/ref.md.\n\nRemember the variable expansion rules in PowerShell. Enclose strings inside double-quotes, and variables inside will be expanded, e.g.\n\nBecause variable expansion only works if strings are enclosed inside double-quotes, double-quotes are required, regardless if whether or not there are spaces in the parameter. You can have as many variables as you want inside each parameter.\n\nNo double-quotes are required here because the variable is surrounded by whitespace, so PowerShell will automatically expand the variable into a parameter. Using double-quotes won’t break anything though; they are just redundant.\n\nBut what if I want to build the arguments to pass in my script?\n\nYou need to know a PowerShell secret. If you specify an array of values, it will automatically expand them into separate parameters. For example,\n\nIf today was the first of the month, and if you run echoargs.exe you’ll get the following output:\n\nAll of the above tricks work fine with command line apps that use the forward-slash ( ) to denote the start of a parameter too (instead of a dash/hyphen), e.g.\n\nBut it still doesn’t work!?!!!\n\nSometimes you run into command line apps that use non-standard notation (not that there ever was much of a defined standard). Something like this for example (this is a command line from scripting ShadowProtect),\n\nIf we run this using the tricks above, or even with echoargs.exe, you’ll get PowerShell errors. This is because the parentheses in PowerShell denote code that should be executed and the result inserted in place of the parentheses. So in the above code, PowerShell is trying to find a cmdlet named sbvol, or an executable named sbvol in PATH. It fails because no such command exists by default.\n\nTo stop PowerShell from interpreting the parentheses and just pass them on instead, simple enclose them in quotes, e.g.\n\nUsing the curly brackets, or braces, will also trip up Powershell. If you need to pass the brace characters ( or ) to an external command, they will need to be enclosed in quotes, otherwise you’ll get cryptic parameters passed to your external command app, e.g.\n\nWhat’s actually happening is that PowerShell considers the contents of the braces to be a script block, which are often used with cmdlets such as or .\n\nThe square brackets ( and ) also have special meaning in PowerShell (globbing), but generally won’t be interpreted as anything special when you’re executing external commands; only certain cmdlets trigger the globbing behaviour, e.g. . So using them without enclosing them in quotes is fine.\n\nAlso remember the character that triggers PowerShell’s variable expansion, the dollar sign ( ). It should be escaped using a backtick if it is to be passed to the external executable. PowerShell is actually quite specific when it comes to parsing the sign, but it is often safer to escape just in case. If in doubt, try using single-quotes instead (variable expansion does not happen with single-quoted strings).\n\nOther bits of useful info\n\nTo refer to the current directory, use the dot, e.g.\n\nNote that the current directory may not necessarily be the directory the script is running from - it is dependent on the ‘working directory’ when executing the script, and also if you do any or commands.\n\nTo get the script directory, include the following line within the script file, in the script scope (i.e. not within a function or some other script block). Source.\n\nLastly, if you want to send the output of the command line app to the screen, and you’re running that inside a function, pipe the command to Out-Host to force it to the screen, e.g.\n\nAnd if you want PowerShell to wait until that external process has finished before proceeding (but you don’t want the output going anywhere), use , e.g.\n\nIf you did want the output you can either pipe it to instead to show it on the screen or if you want it in a variable, you can pipe it to the cmdlet first, like this —\n\nThe output can then be accessed using the variable, e.g.\n\nWhen the output of a command is piped to another cmdlet, PowerShell has to stop and wait for the initial command and the cmdlets the output has been piped into to complete before continuing."
    },
    {
        "link": "https://stackoverflow.com/questions/58241440/capturing-the-output-of-a-very-simple-power-shell-script",
        "document": "I would like to execute and capture the output of a very simple powershell script. Its a \"Hello World\" script and it looks like this. I used this post for reference\n\nNow I would like to execute that script using C# so I am doing this\n\nNow when I run this code, I get nothing in results. Any suggestions on how I can resolve this issue?"
    },
    {
        "link": "https://stackoverflow.com/questions/13534935/adb-uninstall-failed",
        "document": "Do I need to do sign something? Do I need to do something in debug mode? Or does it depend on the version?\n\nI am writing some sample apps. After I debug these apps, I don't see an uninstall button in my device's application management. When I do adb uninstall, it always says Failure without any reason. In DDMS I saw that my apk is stored in /data/app/com.k2g.leaveDemo-1.apk . I am not sure what am I missing. I always have to reset my device to get rid of these apps :(\n\nI assume that you enabled on your Android device. Next, you connected to it with 'USB debugging' mode. Finally, you have adb installed. Once this is done, you can uninstall the application with these commands: I recommend using the first command, . However, if you go with , then 0 is the ID of the main user in the Android system. With either method, you don't need to root your device. Here is an example of how I removed bloatware from my Huawei and Samsung devices. # gain shell access $ adb shell # check who you are $ whoami shell # obtain user id $ id uid=2000(shell) gid=2000(shell) # list packages $ pm list packages | grep google package:com.google.android.youtube package:com.google.android.ext.services package:com.google.android.googlequicksearchbox package:com.google.android.onetimeinitializer package:com.google.android.ext.shared package:com.google.android.apps.docs.editors.sheets package:com.google.android.configupdater package:com.google.android.marvin.talkback package:com.google.android.apps.tachyon package:com.google.android.instantapps.supervisor package:com.google.android.setupwizard package:com.google.android.music package:com.google.android.apps.docs package:com.google.android.apps.maps package:com.google.android.webview package:com.google.android.syncadapters.contacts package:com.google.android.packageinstaller package:com.google.android.gm package:com.google.android.gms package:com.google.android.gsf package:com.google.android.tts package:com.google.android.partnersetup package:com.google.android.videos package:com.google.android.feedback package:com.google.android.printservice.recommendation package:com.google.android.apps.photos package:com.google.android.syncadapters.calendar package:com.google.android.gsf.login package:com.google.android.backuptransport package:com.google.android.inputmethod.latin # uninstall google play services (warning: take backup first!) pm uninstall --user 0 com.google.android.gms\n\nYes, mobile device management would bring its own problems, but i bet 'Failure' is a dos2unix problem. On my Linux machines, adb is appending a DOS newline which causes 'Failure' because uninstall thinks the CR character is part of the package name. Also remove '-1.apk' from the end of the package-1.apk filename. In my case, i have a phone that is in permanent 'Safe mode' so only apps under /system/app/ have a chance of running. So i install them to get the .apk files copied off, then uninstall in bulk and copy to /system/app/, wipe the /cache and reboot. Now i have more apps running even though in safe mdoe. # adb root # pm list packages -3 > /root/bulkuninstall.txt # vi /root/bulkuninstall.txt and check ^M characters at end of each line. If ^M, then must run dos2unix /root/bulkuninstall.txt. Remove '-1.apk' using vi search and replace: :%s/-1\\.apk//g Or sed... # cp /data/app/* /storage/sdcard1/APKs/ # for f in `cat /root/bulkuninstall.txt`; do echo $f; pm uninstall $f; done; # # echo Now remount system and copy the APK files to /system/app/ # mount | grep system # mount -o remount,rw /dev/block/(use block device from previous step) /system # cp /storage/sdcard1/APKs/* /system/app/ # reboot\n\nokey I was in same situation I tried all of this without result.. and the last answer was close.. I got it doing the follow: in order to get the right name of your package do the follow: adb shell pm list packages | grep \"name of your app here\" you should see the right name of your app.. so now this one just works:\n\nSeems like you have an app that contains a hidden Device Administrator like this one here: http://www.symantec.com/security_response/writeup.jsp?docid=2013-060411-4146-99 you can only uninstall such an app when you disable the device admin first. You can use https://play.google.com/store/apps/details?id=com.trendmicro.mtrt.hiddenDAcleaner to disable it or do it by your own by sending the intent to the app that invokes the receiver that will disable the device admin.\n\nIn my case I often get this issue when I first complise a app in debug mode and later try to install the google signed app. That is because both apps have the same package name but diffent signatures. Since I upgraded to Android lollypop I sometimes even get this error if I uninstall the app via the settings\\Apps. If you have this problem check if the app is installed in a other User profile and uninstall it in all user accounts.\n\nIn 2024 April I used the following steps to uninstall Apps from my Samsung A51 using MacOs\n• None Install homebrew by following the instruction https://brew.sh or you can Google a way to install android platform tools above command should show like below (If it shows un-authorized then you should unplug and plug again and authorise the device Step 03: Find the package name By using the following command you can find the package name Step 04: Uninstall the Apps remember when copying the package name copy the required part only"
    },
    {
        "link": "https://stackoverflow.com/questions/59795600/adb-failure-delete-failed-internal-error",
        "document": "I'm dealing with a pretty major malware issue on an Elite 6.0L+ Sky Device. I'm working with a fellow from the malware bytes forums trying to get it cleaned out. I'm trying to uninstall a few apps through adb via command prompt but it's throwing errors.\n\nIf I try it as\n\nThen is throws: Failure [no installed for 0]\n\nI have managed to uninstall other things using these commands but the two things I've been told to remove both throw these same errors when I try to remove them.\n\nDoes anyone have any idea how to get around this?"
    },
    {
        "link": "https://android.stackexchange.com/questions/179575/how-to-uninstall-a-system-app-using-adb-uninstall-command-not-remove-via-rm-or",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://repeato.app/troubleshooting-adb-uninstall-failures",
        "document": "When developing Android applications, you may encounter an issue where the command fails without providing a clear reason. This can be frustrating, especially when you’re trying to streamline your development process. This guide aims to provide a comprehensive solution to successfully uninstall applications using ADB (Android Debug Bridge).\n\nBefore diving into solutions, ensure that your device is in developer mode with USB debugging enabled. This is crucial for ADB to communicate with your device effectively. Additionally, verify that ADB is correctly installed on your system.\n\nThere are several methods to resolve the ADB uninstall issue. Here, we will outline the most effective approaches:\n\nThe preferred method to uninstall an application is using the following command:\n\nIf this command does not work, consider using the package manager (pm) command:\n\nThis method does not require rooting your device and is effective for removing applications tied to the main user account.\n• Hidden Device Administrator: If the application has device administrator privileges, it must be disabled first. Navigate to Settings > Security > Phone Administrators and uncheck the app.\n• Line Ending Issues: On Linux systems, ADB may append a DOS newline, causing the command to fail. Ensure line endings are correct using if needed.\n\nIf the above solutions do not resolve the issue, you may need to delve deeper:\n• Check for any characters in package names and ensure they are removed.\n• Verify that the application is not running during uninstallation. If it is, kill the process before attempting to uninstall.\n\nFor developers looking to streamline their testing and development processes, tools like Repeato can be invaluable. Repeato is a no-code test automation tool for iOS and Android that allows you to create, run, and maintain automated tests efficiently. Its ability to execute ADB commands in sequence can help manage application installations and removals seamlessly.\n\nFor more information on leveraging ADB and test automation, you might find our documentation on virtual test devices useful.\n\nBy following the outlined methods and utilizing tools like Repeato, you can effectively manage and troubleshoot ADB uninstall issues. This not only enhances your development efficiency but also ensures a smoother workflow.\n\nLike this article? there’s more where that came from!"
    },
    {
        "link": "https://xdaforums.com/t/delete-failure-via-adb.4014731",
        "document": "Hello everyone,\n\n \n\n I spent a couple of hours searching on the forum before asking this question. Maybe I am not searching the right thing but I just received a new company phone. It is a Samsung Galaxy S10e. My previous one was an S7.\n\n The company has this Intelligent Hub app installed with admin rights that doesn't allow me to turn off the location services. It drains the battery fast when the services are enabled especially that most of my work is being done in a weak signal or no signal area. (Placing the phone in airplane mode doesn't work since it's admin controlled.\n\n I tried to uninstall the app via adb but I get this DELETE_FAILED_DEVICE_POLICY_MANAGER. The package name is com.airwatch.androidagent\n\n Can anyone please let me know if there's a way to uninstall this package by bypassing the admin rights?\n\n \n\n Thank you!"
    }
]