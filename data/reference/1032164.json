[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Accessibility/CSS_and_JavaScript",
        "document": "It is possible to use CSS to make any HTML element look like anything, but this doesn't mean that you should. As we frequently mentioned in our HTML: A good basis for accessibility article, you should use the appropriate semantic element for the job, whenever possible. If you don't, it can cause confusion and usability issues for everyone, but particularly users with disabilities. Using correct semantics has a lot to do with user expectations — elements look and behave in certain ways, according to their functionality, and these common conventions are expected by users. As an example, a screen reader user can't navigate a page via heading elements if the developer hasn't appropriately used heading elements to markup the content. By the same token, a heading loses its visual purpose if you style it so it doesn't look like a heading. Bottom line, you can update the styling of a page feature to fit in your design, but don't change it so much that it no longer looks or behaves as expected. The following sections summarize the main HTML features to consider. Headings, paragraphs, lists — the core text content of your page: Some typical CSS might look like this:\n• Select sensible font sizes, line heights, letter spacing, etc. to make your text logical, legible, and comfortable to read.\n• Make sure your headings stand out from your body text, typically big and bold like the default styling. Your lists should look like lists.\n• Your text color should contrast well with your background color. See Headings and paragraphs in HTML and CSS text styling for more information. Inline markup that confers specific emphasis to the text that it wraps: <p>The water is <em>very hot</em>.</p> <p> Water droplets collecting on surfaces is called <strong>condensation</strong>. </p> You might want to add some simple coloring to your emphasized text: You will however rarely need to style emphasis elements in any significant way. The standard conventions of bold and italic text are very recognizable, and changing the style can cause confusion. For more on emphasis, see Emphasis and importance. An element that allows an abbreviation, acronym, or initialization to be associated with its expansion: <p> Web content is marked up using Hypertext Markup Language, or <abbr>HTML</abbr>. </p> Again, you might want to style it in some simple way: The recognized styling convention for abbreviations is a dotted underline, and it is unwise to significantly deviate from this. For more on abbreviations, see Abbreviations. Hyperlinks — the way you get to new places on the web: Some very simple link styling is shown below: The standard link conventions are underlined and a different color (default: blue) in their standard state, another color variation when the link has previously been visited (default: purple), and yet another color when the link is activated (default: red). In addition, the mouse pointer changes to a pointer icon when links are moused over, and the link receives a highlight when focused (e.g. via tabbing) or activated. The following image shows the highlight in both Firefox (a dotted outline) and Chrome (a blue outline): You can be creative with link styles, as long as you keep giving users feedback when they interact with the links. Something should definitely happen when states change, and you shouldn't get rid of the pointer cursor or the outline — both are very important accessibility aids for those using keyboard controls. Elements to allow users to input data into websites: You can see some good example CSS in our form-css.html example (see it live also). Most of the CSS you'll write for forms will be for sizing the elements, lining up labels and inputs, and getting them looking neat and tidy. You shouldn't however deviate too much from the expected visual feedback form elements receive when they are focused, which is basically the same as links (see above). You could style form focus/hover states to make this behavior more consistent across browsers or fit in better with your page design, but don't get rid of it altogether — again, people rely on these clues to help them know what is going on. You can see a good, simple example of table HTML and CSS in our table-css.html example (see it live also). Table CSS generally serves to make the table fit better into your design and look less ugly. It is a good idea to make sure the table headers stand out (normally using bold), and use zebra striping to make different rows easier to parse.\n\nWhen choosing a color scheme for your website, make sure that the text (foreground) color contrasts well with the background color. Your design might look cool, but it is no good if people with visual impairments like color blindness can't read your content. There is an easy way to check whether your contrast is large enough to not cause problems. There are a number of contrast checking tools online that you can enter your foreground and background colors into, to check them. For example WebAIM's Color Contrast Checker is simple to use, and provides an explanation of what you need to conform to the WCAG criteria around color contrast. Note: A high contrast ratio will also allow anyone using a smartphone or tablet with a glossy screen to better read pages when in a bright environment, such as sunlight. Another tip is to not rely on color alone for signposts/information, as this will be no good for those who can't see the color. Instead of marking required form fields in red, for example, mark them with an asterisk and in red.\n\nThere are many instances where a visual design will require that not all content is shown at once. For example, in our Tabbed info box example (see source code) we have three panels of information, but we are positioning them on top of one another and providing tabs that can be clicked to show each one (it is also keyboard accessible — you can alternatively use Tab and Enter/Return to select them). Screen reader users don't care about any of this — they are happy with the content as long as the source order makes sense, and they can get to it all. Absolute positioning (as used in this example) is generally seen as one of the best mechanisms of hiding content for visual effect because it doesn't stop screen readers from getting to it. On the other hand, you shouldn't use or , because they do hide content from screen readers. Unless of course, there is a good reason why you want this content to be hidden from screen readers. Note: Invisible Content Just for Screen Reader Users has a lot more useful detail surrounding this topic.\n\nJavaScript can also break accessibility, depending on how it is used. Modern JavaScript is a powerful language, and we can do so much with it these days, from simple content and UI updates to fully-fledged 2D and 3D games. There is no rule that says all content has to be 100% accessible to all people — you just need to do what you can, and make your apps as accessible as possible. Simple content and functionality is arguably easy to make accessible — for example text, images, tables, forms and push button that activate functions. As we looked at in our HTML: A good basis for accessibility article, the key considerations are:\n• Good semantics: Using the right element for the right job. For example, making sure you use headings and paragraphs, and and elements\n• Making sure content is available as text, either directly as text content, good text labels for form elements, or text alternatives, e.g. alt text for images. We also looked at an example of how to use JavaScript to build in functionality where it is missing — see Building keyboard accessibility back in. This is not ideal — really you should just use the right element for the right job — but it shows that it is possible in situations where for some reason you can't control the markup that is used. Another way to improve accessibility for non-semantic JavaScript-powered widgets is to use WAI-ARIA to provide extra semantics for screen reader users. The next article will also cover this in detail. Complex functionality like 3D games are not so easy to make accessible — a complex 3D game created using WebGL will be rendered on a element, which has no facility at this time to provide text alternatives or other information for severely visually impaired users to make use of. It is arguable that such a game doesn't really have this group of people as a part of its main target audience, and it would be unreasonable to expect you to make it 100% accessible to blind people. However, you could implement keyboard controls so it is usable by non-mouse users, and make the color scheme contrasting enough to be usable by those with color deficiencies.\n\nYou should keep unobtrusive JavaScript in mind when creating your content. The idea of unobtrusive JavaScript is that it should be used wherever possible to enhance functionality, not build it in entirely — basic functions should ideally work without JavaScript, although it is appreciated that this is not always an option. But again, a large part of it is using built-in browser functionality where possible. Good example uses of unobtrusive JavaScript include:\n• Providing client-side form validation, which alerts users to problems with their form entries quickly, without having to wait for the server to check the data. If it isn't available, the form will still work, but validation might be slower.\n• Providing custom controls for HTML s that are accessible to keyboard-only users, along with a direct link to the video that can be used to access it if JavaScript is not available (the default browser controls aren't keyboard accessible in most browsers). As an example, we've written a quick and dirty client-side form validation example — see form-validation.html (also see the demo live). Here you'll see a simple form; when you try to submit the form with one or both fields left empty, the submit fails, and an error message box appears to tell you what is wrong. This kind of form validation is unobtrusive — you can still use the form absolutely fine without the JavaScript being available, and any sensible form implementation will have server-side validation active as well, because it is too easy for malicious users to bypass client-side validation (for example, by turning JavaScript off in the browser). The client-side validation is still really useful for reporting errors — users can know about mistakes they make instantly, rather than having to wait for a round trip to the server and a page reload. This is a definite usability advantage. Note: Server-side validation has not been implemented in this simple demo. We've made this form validation pretty accessible too. We've used elements to make sure the form labels are unambiguously linked to their inputs, so screen readers can read them out alongside: We only do the validation when the form is submitted — this is so that we don't update the UI too often and potentially confuse screen reader (and possibly other) users: form.onsubmit = validate; function validate(e) { errorList.textContent = \"\"; for (let i = 0; i < formItems.length; i++) { const testItem = formItems[i]; if (testItem.input.value === \"\") { errorField.style.left = \"360px\"; createLink(testItem); } } if (errorList.hasChildNodes()) { e.preventDefault(); } } Note: In this example, we are hiding and showing the error message box using absolute positioning rather than another method such as visibility or display, because it doesn't interfere with the screen reader being able to read content from it. Real form validation would be much more complex than this — you'd want to check that the entered name actually looks like a name, the entered age is actually a number and is realistic (e.g. nonnegative and less than 4 digits). Here we've just implemented a simple check that a value has been filled in to each input field ( ). When the validation has been performed, if the tests pass then the form is submitted. If there are errors ( ) then we stop the form submitting (using ), and display any error messages that have been created (see below). This mechanism means that the errors will only be shown if there are errors, which is better for usability. For each input that doesn't have a value filled in when the form is submitted, we create a list item with a link and insert it in the . function createLink(testItem) { const listItem = document.createElement(\"li\"); const anchor = document.createElement(\"a\"); const name = testItem.input.name; anchor.textContent = `${name} field is empty: fill in your ${name}.`; anchor.href = `#${name}`; listItem.appendChild(anchor); errorList.appendChild(listItem); } Each link serves a dual purpose — it tells you what the error is, plus you can click on it/activate it to jump straight to the input element in question and correct your entry. In addition, the is placed at the top of the source order (although it is positioned differently in the UI using CSS), meaning that users can find out exactly what's wrong with their form submissions and get to the input elements in question by going back up to the start of the page. As a final note, we have used some WAI-ARIA attributes in our demo to help solve accessibility problems caused by areas of content constantly updating without a page reload (screen readers won't pick this up or alert users to it by default): We will explain these attributes in our next article, which covers WAI-ARIA in much more detail. Note: Some of you will probably be thinking about the fact that HTML forms have built-in validation mechanisms like the , / , and / attributes (see the element reference for more information). We didn't end up using these in the demo because cross-browser support for them is patchy (for example IE10 and above only). Note: WebAIM's Usable and Accessible Form Validation and Error Recovery provides some further useful information about accessible form validation.\n\nThere are other things to be aware of when implementing JavaScript and thinking about accessibility. We will add more as we find them. As you will be aware, most user interactions are implemented in client-side JavaScript using event handlers, which allow us to run functions in response to certain events happening. Some events can have accessibility issues. The main example you'll come across is mouse-specific events like mouseover, mouseout, dblclick, etc. Functionality that runs in response to these events will not be accessible using other mechanisms, like keyboard controls. To mitigate such problems, you should double up these events with similar events that can be activated by other means (so-called device-independent event handlers) — focus and blur would provide accessibility for keyboard users. Let's look at an example that highlights when this could be useful. Maybe we want to provide a thumbnail image that shows a larger version of the image when it is moused over or focused (like you'd see on an e-commerce product catalog.) We've made a very simple example, which you can find at mouse-and-keyboard-events.html (see also the source code). The code features two functions that show and hide the zoomed-in image; these are run by the following lines that set them as event handlers: The first two lines run the functions when the mouse pointer hovers over and stops hovering over the thumbnail, respectively. This won't allow us to access the zoomed view by keyboard though — to allow that, we've included the last two lines, which run the functions when the image is focused and blurred (when focus stops). This can be done by tabbing over the image, because we've included on it. The click event is interesting — it sounds mouse-dependent, but most browsers will activate onclick event handlers after Enter/Return is pressed on a link or form element that has focus, or when such an element is tapped on a touchscreen device. This doesn't work by default however when you allow a non-default-focusable event to have focus using tabindex — in such cases you need to detect specifically when that exact key is pressed (see Building keyboard accessibility back in)."
    },
    {
        "link": "https://edistys.dev/blog/css-best-practices-enhance-accessibility-and-usability",
        "document": ""
    },
    {
        "link": "https://moldstud.com/articles/p-a-complete-guide-to-effectively-implementing-accessibility-best-practices-through-css-techniques",
        "document": "Creating an inclusive digital environment is not merely a trend but a necessity. Millions of users encounter barriers while navigating online content. This can lead to frustration and disengagement. Thoughtful design can bridge these gaps effectively. Integrating user-centric approaches in web development enhances usability for everyone.\n\nConsider this: approximately 15% of the global population lives with some form of disability. Yet, many websites still overlook the needs of these users. By focusing on intentional design strategies, we can foster an environment that welcomes diverse audiences. Simple adjustments in layout, color choices, and interactions can significantly improve the overall experience.\n\nIt's essential to recognize that accessibility is not just a checkbox to tick. It is a holistic philosophy that should permeate every stage of development. When developers prioritize creating user-friendly content, they not only comply with regulations but also cultivate a loyal user base. The incorporation of standards into design can lead to broader reach and higher engagement levels.\n\nBeyond legal obligations, there lies a compelling business case for inclusive design. Studies show that companies focusing on accessibility report increased customer satisfaction and profitability. As we delve into effective techniques and approaches, remember that the aim is to craft a web presence that resonates with all users, regardless of their abilities.\n\nCreating digital environments that everyone can navigate is essential. Inclusivity in design not only enhances user experience but also broadens audience reach. Ensuring that all individuals, regardless of their abilities, have equal access to content is a fundamental aspect of modern web development. This goes beyond simply meeting legal requirements; it reflects a commitment to user-centered design.\n\nStatistics show that around 15% of the global population experiences some form of disability. This means nearly one billion people could face barriers when interacting with online platforms. Ignoring these users can lead to missed opportunities and negative perceptions of a brand or service. Therefore, it's crucial to prioritize usability for all.\n• Consider visual impairments when choosing colors and contrasts.\n• Ensure text is clear and legible at different sizes.\n• Utilize keyboard navigation for those who cannot use a mouse.\n\nAdopting an inclusive approach not only satisfies diverse user needs but also enhances overall functionality and engagement. Websites that prioritize user-friendly design often experience greater retention rates and customer satisfaction. The key lies in understanding that thoughtful design is for everyone, reflecting society’s diversity and encouraging participation.\n\nUltimately, fostering a web environment that caters to all facilitates a more equitable digital landscape. By embracing inclusivity, designers can create experiences that resonate with every individual, ultimately leading to richer interactions and a stronger community.\n\nUnderstanding the numbers behind web usability is crucial for everyone involved in digital design. Statistics offer clear insights into how users interact with technology. They reveal patterns, highlight gaps, and emphasize the need for inclusivity. More than that, they provide a compelling case for change. Organizations can no longer afford to overlook these figures.\n\nConsider this: approximately 15% of the global population experiences some form of disability. This statistic is not just a number; it represents millions of individuals navigating online spaces. Ignoring their needs implies excluding a significant portion of potential users. Furthermore, sites that are well-suited for all users enjoy higher retention rates and improved user satisfaction.\n\nFor businesses, the stakes are high. Research shows that accessible digital experiences can lead to increased revenue. Companies that prioritize inclusivity not only foster goodwill but also tap into new markets. This is particularly essential in today’s competitive landscape.\n\nAdditionally, web accessibility can influence search engine optimization (SEO). A well-structured site with thoughtful design often ranks higher in search results. When designing any digital product, consider statistics that underscore these points, such as the correlation between user engagement and accessibility standards.\n\nAs you explore the tech landscape, remember to read about how to choose a tech product that aligns with inclusive strategies. The statistics available are not mere trivia; they are critical indicators of where improvements can be made. Incorporating these insights can shape a more welcoming web, benefitting everyone involved.\n\nCreating an inclusive environment is essential for every website or application. Ensuring that all users can interact with digital content empowers individuals with various abilities. This ensures a broader reach and enhances overall user experience. A thoughtful approach can significantly improve usability for everyone. It is not just about compliance; it’s about understanding user needs.\n\nOne of the foundational elements is clarity in communication. Clear messages, intuitive navigation, and well-structured content resonate with users. Also, consider the visual aspect: contrast between text and background plays a vital role in readability. Statistics show that nearly 15% of the global population has some form of disability, making it crucial to account for diverse user experiences. Engaging designs should support various user preferences, whether through font size adjustments or adaptable layouts.\n\nAnother significant consideration is responsiveness. This principle ensures that websites function seamlessly across various devices and screen sizes. A consistently excellent experience results in higher user satisfaction and retention rates. Moreover, utilizing semantic HTML provides context to assistive technologies. For instance, screen readers thrive on clearly defined headings, lists, and landmarks. Proper markup helps all users to navigate efficiently.\n\nDon’t forget about alternative text for images. Descriptive labels can transform visual information into comprehensible content for those relying on screen readers. The same logic applies to multimedia elements; captions and transcripts are key to accessibility. As you dive deeper into design, evaluating user journeys becomes crucial. This includes understanding how diverse groups, including those searching for services like barber shop pos, interact with your site.\n\nFinally, testing is paramount. Regular evaluations with real users reveal hidden barriers. Gathering feedback can guide improvements that elevate the user experience. Ensuring that your design is truly accessible involves ongoing commitment and adaptability. The digital landscape is always evolving, and staying current is essential for fostering inclusivity.\n\nIndividuals with disabilities often face significant challenges when interacting with digital content. These obstacles can hinder their experience and lead to frustration. It is essential to recognize these barriers to foster an inclusive environment. Many users encounter issues stemming from a lack of consideration for their unique needs. Understanding these difficulties is crucial to improve overall user experiences.\n\nOne prevalent issue is navigating complex interfaces. Many websites are designed with intricate layouts that can confuse users who rely on assistive technologies. Screen readers may struggle to interpret poorly structured content, leading to miscommunication. Additionally, visual elements like images and diagrams may lack descriptive captions. In fact, studies indicate that around 70% of users with visual impairments report difficulties in accessing online information due to inadequate text alternatives.\n\nAnother critical barrier involves color contrast. Many sites utilize color schemes that fail to meet minimum contrast ratios, making it hard for users with low vision to distinguish between elements. Furthermore, reliance on color alone to convey information excludes individuals with color blindness. Research shows that nearly 8% of men and 0.5% of women experience some form of color vision deficiency. Thus, ensuring that visual information is accessible to everyone is vital.\n\nKeyboard navigation presents yet another challenge. Many online platforms focus heavily on mouse interactions, which can alienate users who cannot use a mouse due to physical disabilities. Those depending on keyboard shortcuts find themselves unable to access menus or buttons if they aren't designed with this functionality in mind. Approximately 20% of the population has some form of disability, making it essential for developers to account for different ways of interacting with content.\n\nFinally, time constraints can significantly impact users with disabilities. Some may require extra time to comprehend and navigate content, especially if it includes multimedia elements that don't allow for adjustable playback. For instance, videos without captions or transcripts can leave deaf or hard-of-hearing users at a disadvantage. Studies reveal that users with cognitive disabilities may need up to 50% more time to complete tasks online compared to their peers, reinforcing the importance of accommodating varying paces of interaction.\n\nCreating a user-friendly experience for everyone is crucial. Every detail counts, especially when it comes to visual design. Strong consideration for various needs helps foster inclusivity. This is essential not just for users with disabilities but for all visitors.\n\nOne effective method is to utilize appropriate color contrasts. According to the Web Content Accessibility Guidelines (WCAG), the minimum contrast ratio between text and background should be 4.5:1 for normal text. Ensuring contrast enhances readability significantly. Additionally, using semantic HTML elements supports screen readers, which leads to a better understanding of the content structure.\n\nMaking use of relative units for sizing is another important approach. Using percentages or ems can significantly improve adaptability across devices. This flexibility ensures that your content scales properly, enhancing the experience for users who may need larger text. Remember that not all users interact with the same settings; responsiveness plays a key role.\n\nAnother element to consider is spacing. Adequate padding and margins create a less cluttered interface. Crowded layouts can be overwhelming. Users may struggle to focus on critical content. Research indicates that well-spaced elements can lead to a 20% increase in comprehension.\n\nIncorporating transitions and animations should be done mindfully. While they can add visual interest, excessive motion may disorient some users. Being conscious of how these elements interact with assistive technologies can also make a difference. Users appreciate features that enhance their experience without distractions.\n\nTaking time to review the effectiveness of these strategies can yield rewarding results. For example, incorporating feedback from individuals can lead to unexpected insights. It’s fascinating how small tweaks can impact usability positively. Resources such as liberal arts studies provide a unique perspective on user-centered design. All in all, prioritizing every user's needs leads to a more vibrant web.\n\nSemantic HTML plays a crucial role in creating an inclusive web environment. It allows assistive technologies to better interpret and navigate content. This results in improved user experience for individuals with various disabilities. For example, clear structure helps screen readers communicate information effectively. The right choice of elements can make a significant difference.\n\nWhen building a website, consider using elements like , , , and . Each of these conveys specific meanings and enhances context. Meaningful tags ensure that critical information is more accessible. A well-structured document can increase comprehension and usability.\n• Links: Make links descriptive to inform users of the destination.\n\nAccording to recent studies, approximately 15% of the world's population lives with some form of disability, highlighting the necessity for thoughtful design choices. By incorporating meaningful markup, developers can create experiences that cater to a wider audience, ultimately fostering a more inclusive digital landscape.\n• Identify appropriate semantic elements for your content.\n• Consistently apply these elements throughout your pages.\n• Test your site with various assistive technologies to ensure effectiveness.\n\nIncorporating semantic tags not only benefits those with disabilities but also enhances SEO performance. Search engines rely on well-structured content to deliver relevant results. Therefore, by prioritizing semantic HTML, developers can simultaneously improve discoverability and user engagement.\n\nIncorporating ARIA roles and attributes into your web design can significantly enhance user experience. They serve as additional information for assistive technologies. This guidance is particularly vital for users who rely on screen readers. By specifying roles, elements become more meaningful. Ensuring clear communication with all users is crucial for an inclusive environment.\n\nFor example, using the role attribute can transform a generic div into a recognized button or navigation landmark, creating a more intuitive interface. Statistically, around 15% of the global population experiences some form of disability, which highlights the necessity of thoughtful design choices. When implemented correctly, these attributes bridge the gap between standard HTML elements and the expectations of diverse users. They provide context and purpose to the structure, enabling a more seamless interaction.\n\nMoreover, roles like banner, navigation, and main help outline the layout of the page clearly. This design assists users in navigating content effectively. Attributes such as aria-label and aria-hidden also play a pivotal role in conveying the right information without cluttering the interface. By prioritizing meaningful roles and attributes, sites can ensure they are not only functional but also user-friendly.\n\nDesigning interfaces that adapt smoothly to different devices and are easy to navigate is essential. Users expect a seamless experience, regardless of how they access your site. A responsive layout ensures content is presented clearly on screens of all sizes. Furthermore, the ability to navigate using keyboard shortcuts enhances usability for many individuals.\n\nStatistics show that around 15% of the global population lives with some form of disability. Therefore, accommodating various navigation methods, such as keyboard usage, is vital. This can greatly increase engagement and satisfaction among users who rely on alternative input methods rather than a mouse.\n\nResponsive design involves fluid grids and flexible images that adjust based on the screen size. This adaptability prevents content from being truncated or misaligned. Combined with keyboard navigation, it creates an environment where all users can interact comfortably.\n\nImplementing responsive grids and ensuring keyboard accessibility are not merely suggestions; they are requirements for modern web design. As the web continues to evolve, prioritizing these features will enhance overall user satisfaction and create a welcoming atmosphere for everyone. Taking these steps not only broadens your audience but also contributes to a more inclusive digital environment."
    },
    {
        "link": "https://audioeye.com/post/10-web-design-principles-to-increase-accessibility",
        "document": "Accessible web design ensures individuals with disabilities can easily access and use digital content. Unfortunately, it's often overlooked in the design process. Below, we'll discuss 10 web design principles that can be used to improve the user experience for individuals with disabilities.\n\nA purple accessibility symbol overlaid on a stylized web page, with labels that read \"consistency\", \"responsive design\", \"visual hierarchy\", \"color schemes\", and \"white space\" surrounding the accessibility symbol.\n\nIn today’s digital age, where the internet serves as a primary source of information and interaction, website design plays a key role in shaping how customers feel about organizations. In fact, research indicates that a well-designed website can significantly improve user perception and satisfaction, with 94% of first impressions being design-related. Yet, despite the importance of good web design, creating websites and digital experiences that are accessible to the 1 in 6 people globally with a disability is sometimes overlooked. In fact, the 2024 WebAIM Million report found that 96% of the world’s top one million home pages are inaccessible to people with disabilities, underscoring the need for organizations to prioritize digital accessibility and inclusion. In this blog, we’ll break down some of the key elements of accessible web design — and share tips on how organizations can deliver digital experiences that work for all users.\n\nWeb design is the process of creating websites and web pages that are visually appealing, user-friendly, and reflect a company's brand. At its core, effective web design balances creativity with practicality. More simply, it’s all about ensuring content is easy to understand for all users, in all environments. The basic tenets of web design — such as visual hierarchy, consistent navigation, and clear, simple content — serve as guidelines to help designers create websites that are easy to use.\n\nAccessible web design is the practice of designing websites and digital experiences in a way that people with disabilities can easily navigate, consume, and interact with the content. It differs slightly from the traditional web design process in the sense that it focuses on designing digital content that’s accessible and usable specifically for individuals with disabilities. According to the Web Content Accessibility Guidelines (WCAG), there are four key principles that lay the foundation for accessible web design. For a website to be accessible, it must be:\n• Perceivable: Information and user interface (UI) components must be presentable and perceivable to all users.\n• Operable: UI components and navigation must be operable by all users.\n• Understandable: Website content and operation of the UI must be understandable to all users.\n• Robust: Content must be robust enough for all users and assistive technologies to interpret it reliably.\n\n By incorporating accessible design practices, websites become more navigable and usable for everyone, regardless of their physical or cognitive abilities.\n\n As an added benefit, many of the principles of accessible web design — such as clear, consistent navigation, adequate color contrast, and multiple ways to engage with multimedia content — benefit all users.\n\nAccording to the World Wide Web Consortium’s (W3C) Supplemental Guidance to WCAG 2, putting white space around objects and text can help reduce clutter and draw focus to important content. \n\nFor people with cognitive or learning disabilities, white space has been shown to ease reading difficulties and improve comprehension. And like other accessibility best practices, it has the added benefit of making pages easier to navigate and read for everyone.\n\nWhen it comes to mobile accessibility, small screen sizes can make it difficult for some people with motor disabilities to comfortably navigate between pages. Any on-screen element that someone can click, touch, or otherwise interact with should be large enough for reliable interaction. According to WCAG, the minimum touch target size for buttons and at least one of two adjacent links (or equivalent targets) must be at least 44x44 CSS pixels.\n\n You should also have enough padding between your links to help ensure users don’t click or tap the wrong one by accident.\n\nColor is one of the most powerful tools in a designer’s arsenal, but the colors we choose (and how we implement them) can make it difficult for people with low vision or color blindness to fully perceive, navigate, or understand digital content. \n\nAs a best practice, you should avoid using color as the only element that gets your users’ attention — or alerts them to key information. If you do use color to communicate information, be sure to combine it with another element (such as an error message or symbol) to help people with color deficiencies follow along.\n\n\n\nYou should also avoid digital black typeface or pure black on a pure white background — the stark contrast may cause eye strain."
    },
    {
        "link": "https://pamsalon.medium.com/best-practices-for-designing-accessible-websites-dc56efa8e289",
        "document": "Accessibility in web design is the approach to building websites that are usable to everyone, including persons with disability, on any device or connectivity. Key to this is enhancing a site’s content readability and structure, improving site engagement.\n\nHow Important Is Accessibility In Web Design?\n\nAccessible website design ensures that the site, from its interface, digital content, and features, is understandable and easy to navigate, even for users with disabilities.\n\nThe Web Content Accessibility Guidelines was established in order for web developers to develop websites that are accessible to all. WCAG guidelines revolve around several key principles for assessing whether the website is accessible or not. Here are the four key principles of accessibility in web design.\n\nUsers should be able to perceive or understand the website’s content and how it is presented. One way to ensure this is to add alternative text (alt text) to images. Screen readers can then read the text to provide users with more context about the visual content.\n\nBeing perceivable doesn’t focus on seeing alone. Thus, advanced strategies for ensuring accessibility include the use of screen reader software in converting text into speech or braille characters.\n\nWebsite operability revolves around making the contents and interface easy to operate. This defines how users should be able to navigate through the website using keyboards. For instance, users can check out different pages, select an option from a menu, or even play attached media.\n\nAnother important principle of an accessible website design is ensuring the site is understandable. This refers to how well users can comprehend your website, including text and media content. Many users, especially those with cognitive disabilities, prefer more appealing websites with easy-to-use interfaces.\n\nThe provided study underscores the importance of prioritizing user-focused designs to boost engagement and visitor returns.\n\nProper assessment of a site’s robustness examines whether it can be accessed through different devices and platforms. Your site should be easily interpreted through other assistive technologies as well, which include screen readers and braille displays. You can use semantic HTML to ensure its compatibility.\n\nAccessibility in website design compliments other factors that affect the site’s presence and functionality. As a result, web accessibility impacts Search Engine Optimization strategies and improves competitiveness.\n\nHere are some helpful practices for ensuring website accessibility:\n\nIt is crucial to consider usability when it comes to planning how the website’s content is displayed and perceived:\n• Text Content: Practices such as proper tagging and balancing contrasts are needed to ensure easy navigation and order within the site.\n• Multimedia Content: Adding captions is essential for multimedia content, such as pictures and videos. These become readable transcripts that deaf or blind users can understand with the help of a screen reader.\n• Forms and Input Fields: Ensure all form controls have clear labels for accessibility. These include input fields, checkboxes, and radio buttons.\n\nAn appealing appearance is only part of an accessible website. The website should also be easy to explore and navigate through (going to different pages, scrolling up and down, etc.) By prioritizing and ensuring keyboard accessibility, you can optimize your website’s usability\n• Ensuring all interactive elements are keyboard accessible. Users should be able to explore all of the website’s interactive elements even if they’re not relying on a computer mouse. This includes links, form fields, and buttons.\n• Providing skip navigation links. For users who rely more on keyboards or screen readers, a web design company can incorporate skip navigation links at the outset of each page. These links enable users to swiftly navigate past repetitive content.\n• Using consistent navigation menus across the website. Having consistency in navigation menus helps in developing a model of how the website is structured. This makes it easier for users to navigate menus and information. It’s crucial for users with cognitive disabilities.\n\nEnsuring an accessible website design is a necessity. Initial testing and assessment play a critical role in checking the finished site. Undergoing these tests guarantees the website’s usability. This testing also helps identify potential glitches, errors, and barriers that may lead to accessibility issues.\n\nManual testing involves hands-on evaluation performed by actual volunteers who represent the end users. Web testers gauge the accessibility of the website’s design, performance, and interface. They will undergo specific tests, such as:\n• Testing with keyboard navigation. Testing volunteers will try to navigate through the website by mouse and by keyboard only. This simulates the experience of users who rely on assistive technologies to understand the end-users’ perspectives.\n• Checking color contrast using tools. Testers will also use other assistive tools in assessing the visual contents, such as color contrasts between text and background elements.\n• Assessing website performance. Testers will be using test management tools to help them assess how the website and its interface perform.\n\nCompared to manual testing, automated testing involves developers using automatic tools in order to reveal general issues within the site. This testing is necessary in order to increase user engagement.\n\nDevelopers use Quality Assurance tools for checking websites. These tools will identify potential issues related to markup, coding, multimedia content, and more. Some examples of these tools include a BrowserStack, WAVE Web Accessibility Evaluation Tool, and PerfectPixel.\n\nAutomated testing tools pinpoint prevalent accessibility issues like absent alternative text for images, improper heading structure, or insufficient keyboard focus indicators.\n\nWhen it comes to testing the website’s accessibility design, web developers should have the proper tools and resources to ensure website usability. These include the following:\n\nAccessibility validators automatically analyze each web page, single out accessibility issues, and provide suggestions for improvements.\n\nTesters can use tools that can be added to web browsers rather than downloading entirely new software. These extensions have specific functionalities for different aspects of accessibility testing.\n\nUsing assistive technologies is essential in understanding how all kinds of users experience the website. They’re designed to help users interact with the site’s digital content. These include screen readers and voice recognition software.\n\nEnsuring accessibility in website design during the development process is necessary to create a website that is usable upon launch. Here’s how each of these practices can be implemented:\n• Integrating accessibility into the design phase. Website developers must account for accessibility considerations throughout the web development process. This includes consulting with team members regarding the design planning and identifying potential limitations.\n• Conducting regular accessibility audits. Even after integrating the necessary features, developers should schedule regular audits and regression testing. This way, they can assess the product’s performance prior to and after launch. It requires both automatic and manual tests to eliminate overlooked issues.\n• Providing accessibility training for team members. Businesses must ensure that their web designers, developers, testers, and other team members grasp their responsibilities in upholding accessibility. They can provide organized training sessions regarding the processes and necessary tools.\n\nCount on a Skilled Web Development Company to Deliver on Accessible Website Design!\n\nThe need for accessible website design cannot be overstated. If your business platform embodies handiness, more users will be intrigued by your site and want to interact with it more, increasing its online presence.\n\nAdopting necessary practices is necessary to ensure the website is easy to interact with. Partnering with a skilled web development company in the Philippines can positively contribute to website accessibility efforts."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/animation",
        "document": "The order of time values within each animation definition is important: the first value that can be parsed as a is assigned to the , and the second one is assigned to .\n\nThe order of other values within each animation definition is also important for distinguishing an value from other values. If a value in the shorthand can be parsed as a value for an animation property other than , then the value will be applied to that property first and not to . For this reason, the recommended practice is to specify a value for as the last value in a list of values when using the shorthand; this holds true even when you specify multiple, comma-separated animations using the shorthand.\n\nWhile an animation name must be set for an animation to be applied, all values of the shorthand are optional, and default to the initial value for each long-hand component. The initial value of is , meaning if no value is declared in the shorthand property, there is no animation to apply on any of the properties.\n\nWhen the value is omitted from the shorthand property, the value for this property defaults to . In this case, the animation will still occur (the and events will be fired) but no animation will be visible.\n\nIn the case of the forwards value, animated properties behave as if included in a set property value. If a new stacking context is created during the animation, the target element retains the stacking context after the animation has finished."
    },
    {
        "link": "https://animate.style",
        "document": "Or install with Yarn (this will only work with appropriate tooling like Webpack, Parcel, etc. If you are not using any tool for packing or bundling your code, you can simply use the CDN method below): Import it into your file: Or add it directly to your webpage using a CDN: After installing Animate.css, add the class to an element, along with any of the animation names (don't forget the prefix!): That's it! You've got a CSS animated element. Super! Animations can improve the UX of an interface, but keep in mind that they can also get in the way of your users! Please read the best practices and gotchas sections to bring your web-things to life in the best way possible. Even though the library provides you a few helper classes like the class to get you up running quickly, you can directly use the provided animations . This provides a flexible way to use Animate.css with your current projects without having to refactor your HTML code. .my-element { display: inline-block; margin: 0 0.5rem; animation: bounce; /* referring directly to the animation's @keyframe declaration */ animation-duration: 2s; /* don't forget to set a duration! */ } Be aware that some animations are dependent on the property set on the animation's class. Changing or not declaring it might lead to unexpected results. Since version 4, Animate.css uses custom properties (also known as CSS variables) to define the animation's duration, delay, and iterations. This makes Animate.css very flexible and customizable. Need to change an animation duration? Just set a new value globally or locally. /* This only changes this particular animation duration */ .animate__animated.animate__bounce { --animate-duration: 2s; } /* This changes all the animations globally */ :root { --animate-duration: 800ms; --animate-delay: 0.9s; } Custom properties also make it easy to change all your animation's time-constrained properties on the fly. It means that you can have a slow-motion or time-lapse effect with a javascript one-liner: // All animations will take twice the time to accomplish document.documentElement.style.setProperty('--animate-duration', '2s'); // All animations will take half the time to accomplish document.documentElement.style.setProperty('--animate-duration', '.5s'); Even though some aging browsers do not support custom properties, Animate.css provides a proper fallback, widening its support for any browser that supports CSS animations.\n\nAnimate.css comes packed with a few utility classes to simplify its use. You can add delays directly on the element's class attribute, just like this: Animate.css provides the following delays: The provided delays are from 1 to 5 seconds. You can customize them setting the property to a longer or a shorter duration: /* All delay classes will take 2x longer to start */ :root { --animate-delay: 2s; } /* All delay classes will take half the time to start */ :root { --animate-delay: 0.5s; } You can control the speed of the animation by adding these classes, as below: The class has a default speed of . You can also customize the animations duration through the property, globally or locally. This will affect both the animations and the utility classes. Example: /* All animations will take twice as long to finish */ :root { --animate-duration: 2s; } /* Only this element will take half the time to finish */ .my-element { --animate-duration: 0.5s; } Notice that some animations have a duration of less than 1 second. As we used the CSS function, setting the duration through the property will respect these ratios. So, when you change the global duration, all the animations will respond to that change! You can control the iteration count of the animation by adding these classes, like below: As with the delay and speed classes, the class is based on the property and has a default iteration count of . You can customize them by setting the property to a longer or a shorter value: /* The element will repeat the animation 2x It's better to set this property locally and not globally or you might end up with a messy situation */ .my-element { --animate-repeat: 2; } Notice that doesn't use any custom property, and changes to will have no effect. Don't forget to read the best practices section to make the best use of repeating animations.\n\nAnimations can greatly improve an interface's UX, but it's important to follow some guidelines to not overdo it and deteriorate the user experience on your web-things. Following the following rules should provide a good start. You should avoid animating an element just for the sake of it. Keep in mind that animations should make an intention clear. Animations like attention seekers (bounce, flash, pulse, etc) should be used to bring the user's attention to something special in your interface and not only as a way to bring \"flashiness\" to it. Entrances and exit animations should be used to orientate what is happening in the interface, clearly signaling that it's transitioning into a new state. It doesn't mean that you should avoid adding playfulness to the interface, just be sure that the animations are not getting in the way of your user and that the page's performance is not affected by an exaggerated use of animations. Avoid it as it won't bring much value to the user and will probably only cause confusion. Besides that, there is a good chance that the animations will be junky, culminating in bad UX. Animating the or tags is possible, but you should avoid it. There were some reports pointing out that this could trigger some weird browser bugs. Besides, making the whole page bounce would hardly provide good value to your UX. If you indeed need this sort of effect, wrap your page in an element and animate it, like this: Even though Animate.css provides utility classes for repeating animations, including an infinite one, you should avoid endless animations. It will just distract your users and might annoy a good slice of them. So, use it wisely! Mind the initial and final state of your elements All the Animate.css animations include a CSS property called , which controls the states of an element before and after animation. You can read more about it here. Animate.css defaults to , but you can change it to suit your needs. Since version 3.7.0 Animate.css supports the media query which disables animations based on the OS system's preference on supporting browsers (most current browsers support it). This is a critical accessibility feature and should never be disabled! This is built into browsers to help people with vestibular and seizure disorders. You can read more about it here. If your web-thing needs the animations to function, warn users, but don't disable the feature. You can do it easily with CSS only. Here's a simple example: See the Pen Prefers-reduce-motion media query by Elton Mesquita (@eltonmesquita) on CodePen. Even though some browsers can animate inline elements, this goes against the CSS animation specs and will break on some browsers or eventually cease to work. Always animate block or inline-block level elements (grid and flex containers and children are block-level elements too). You can set an element to when animating an inline-level element. Most of the Animate.css animations will move elements across the screen and might create scrollbars on your web-thing. This is manageable using the property. There's no recipe to when and where to use it, but the basic idea is to use it in the parent holding the animated element. It's up to you to figure out when and how to use it, this guide can help you understand it. Unfortunately, this isn't possible with pure CSS right now. You have to use Javascript to achieve this result.\n\nYou can do a whole bunch of other stuff with animate.css when you combine it with Javascript. A simple example: You can detect when an animation ends: You can also use a simple function to add the animations classes and remove them automatically: const animateCSS = (element, animation, prefix = 'animate__') => // We create a Promise and return it new Promise((resolve, reject) => { const animationName = `${prefix}${animation}`; const node = document.querySelector(element); node.classList.add(`${prefix}animated`, animationName); // When the animation ends, we clean the classes and resolve the Promise function handleAnimationEnd(event) { event.stopPropagation(); node.classList.remove(`${prefix}animated`, animationName); resolve('Animation ended'); } node.addEventListener('animationend', handleAnimationEnd, {once: true}); }); animateCSS('.my-element', 'bounce'); // or animateCSS('.my-element', 'bounce').then((message) => { // Do something after the animation }); If you had a hard time understanding the previous function, have a look at const, classList, arrow functions, and Promises.\n\nMigration from v3.x and Under Animate.css v4 brought some improvements, improved animations, and new animations, which makes it worth upgrading. However, it also comes with a breaking change: we have added a prefix for all of the Animate.css classes - defaulting to - so a direct migration is impossible. But fear not! Although the default build, , brings the prefix we also provide the file which brings no prefix at all, like the previous versions (3.x and under). If you're using a bundler, update your import: Notice that depending on your project's configuration, this might change a bit. In case of using a CDN, update the link in your HTML: In the case of a new project, it's highly recommended to use the default prefixed version as it'll make sure that you'll hardly have classes conflicting with your project. Besides, in later versions, we might decide to discontinue the file."
    },
    {
        "link": "https://stephaniewalter.design/blog/enhancing-user-experience-with-css-animations",
        "document": "With CSS and JS progress, implementing animations on websites has never been easier. But how do we make sure that our CSS animations and transitions will be meaningful to our users? That they will not be just some annoying “in-your-face” eye candy? How can CSS animations enhance your user experience?\n\nIn the talk, I give a quick reminder of CSS syntax to build transitions and animations. With practical examples, I show why certain animations work better than others and how to find the best timing and duration to build UI animations that “feel right”. I explain how our brain works, why and how animations contribute to improving user experience. And what you need to be careful about to build inclusive and accessible motion and avoid making some people sick.\n\nI published the PDF version of the slides, but a PDF of a talk on animations is boring. So you will also find here a transcript with CSS codepen and video examples and LOT of resources to dig further in specific topics and the replay of the talk at the end of the article.\n\nUX ❤ Animations – How and where animations can help users\n\nSo big warning: this talk and those slides contain a LOT of animations.\n\nMost of the time when we say “animation”, people think about cartoons. Those are Disney’s 12 animation principles illustrated. But animations are not limited to cartoons.\n\nOperating systems, videos games, and more recently apps and websites also started using animations in the last years to build better product and make the user experience better. Today, the power of CSS brings a lot of animation options and possibilities directly in the browser.\n\nNo change in nature is instant. Think about a sunset for example. So, animations decrease cognitive load, by making state changes more natural.\n\nChange of states without animation is disruptive to human mental models and are hard to process. When abrupt change happen, the brain is trying to figure what happened between the states. And it’s a cognitive effort for our users.\n\nIt’s a little bit like the flip books. You know, when we were drawing stick humans in different positions in the right corner of a note book. Then we flipped the notebook, creating a moving character animation? When change happened without transition, the brain tries to detail all the steps to understand the “what just happened between those two states?” The brain does the flipbook drawing. And this drains resources from the brain, aka cognitive load.\n\nSo, animation explicitly show users the in-betweens. This helps decreases the cognitive load for the brain. The brain doesn’t have to interpolate the stares, so the interface feels less disruptive.\n\nIn this example, the animation shows how the menu opens and how the elements appear. User can concentrate on the task (of finding an element).\n\nIf you want to learn more on that topic, Scott E. Hudson and John T. Stasko published a paper called “Animation support in a user interface toolkit: flexible, robust, and reusable abstractions” . In the paper they explain how animations even allow users to continue thinking about the main task because they don’t need to think about the context shift of the interface.\n\nIf you ask someone a question and they don’t replay, stay silent for a moment, you might wonder if something actually happen. If they heard the question, understood it. If they wrinkles their forehead, you know they heard it and are thinking about an answer. It’s the same for interfaces. You can use animations and transitions to build micro-interactions. They give feedback to the users: “the action worked you can expect a response soon”. They make the experience feel fluid, generating the illusion of continuity. They bring a degree of “responsiveness” to the interface. Responsiveness, as in “the interfaces responds to user input”, not as responsive web design.\n\nNote: if you are also interested in responsive web design and building robust systems of components, check out my other talk “Designing Adaptive Components, Beyond Responsive Breakpoint“\n\nFor small wait time that are above 1 second, you need to “tell the user” that the system is still working, nothing froze. This is where those kind of spinner animations become handy.\n\nAnother note: if you are interested in spinner, loaders, performance and user experience, make sure to check my talks on perceived performance. I show a few techniques to help you bring your products and services to the next levels by building not only interfaces that load fast, but that also feel fast.\n\nPredicting the outcome of an action\n\nAnimations can also be used to show and to tell the future state of the element. If you are building a drag and drop feature, you can animate the “future place of the element” to show to the user where this element will be if the user drops it. Here the animation is used to show the user the possible outcome of the action.\n\nThe human eye is attracted to moving things. Our brain is wired to notice and react to motion. It’s encoded in our DNA, it’s an evolutionary advantage. It helps humans discern danger and protect themselves. So, things moving around attract user’s attention. And you can use this at your advantage in interfaces for a few things.\n\nAnimations can make a subtle signifier more obvious. Like the little red button on this website. The pulsing animation gives a subtle nudge to invite to discovery.\n\nPeople are prone to change blindness. If something changes in an area far away from their focus, they might not see that change.\n\nAnimations can help with that, by again, grabbing user’s attention so that they see those changes. For example: on archiduchesse, when users adds something to the basket, the only think that changes is the number in the top right. When users hit the “add to card” button, it triggers this cute little flying sock. This attracts user’s attention to the card number that changed. This gives user a visual confirmation that their action worked. Users might have missed it because the number change is so subtle without animation.\n\nYou could also use animations to distract user from slow loading for example on some websites (again, more about that on my talk on perceived performance).\n\nBut, this is a double edge sword. Animations can also become annoying for your users quite quickly. Let’s learn from the horrible time of flashing blinking banners on websites and never NEVER go back to that again.\n\nSo please, don’t hijack user’s attention with deceptive design patterns! Avoid using animations to create FOMO (fear of missing out) and other deceptive design patterns like that horrible counter to trick them into buying things. Don’t get me wrong: it’s really cool that we can build this in CSS. It doesn’t mean you SHOULD. Don’t.\n\nIf something disappears from the screen the user might ask “where did this go?” and be lost. Animations help establish the “physical space” in interfaces and keep user oriented.\n\nThink about the menu on my blog for example: thanks to the animation you understand where the menu comes from when it opens and where it goes when you close it. Think about a list where you add elements: where do the elements come from when you create them? Where do they go if you delete them?\n\nAnimations also helps users move towards different special steps. They can also help establish that a user is moving forward or backward in different steps. Think about a carousel for example.\n\nIn the little quiz, each time I fill a question, the animation brings me to the next question. So I don’t have to think about the steps, the interface does the job for me.\n\nAnimations can prevent disorientation, especially on context change.\n\nIn this example, when users click on the form elements, they enter in this “full screen modal” on mobile. This content change can be disorienting for some users. They might not get that this is an overlay and think it’s a new page. Then, they hit the back button to come back to the previous state. But the back button here will bring them back to the previous page: the search results. I have seen this happen in user testing: users not understanding the “full screen modal change” and hitting back button. Baymard wrote an article called “4 Design Patterns That Violate “Back” Button Expectations – 59% of Sites Get It Wrong” a few years ago on that specific problem.\n\nHow to fix? You could use a transition when the full screen pop-up opens to help user understand that they are on a layer on top of the page.\n\nLast but not least, animations help crafting a unique and memorable experience. Animations and motion can create pleasure and delight.\n\nYou know the show, don’t tell motto? Why explain something complex when you can actually show how it works? Animations are a good candidate for storytelling and interactive data-vizualisation and infographics.\n\nThe Washington Post animates the globe when you scroll in their interactive article about the global spreading of the COVID-19.\n\nAnimations can also help you capture mood and emotion. Mailchimp for example has a cool little “high five” animation when you send the newsletter. What more perfect way to celebrate sending you newsletter to all those ?\n\nA well crafted animation can bring delight and a little touch of whimsical on a super clean website. Take a look at Josh Comeau’s website, in the article sections. There’s nothing super fancy, the layout is super clean, great content. And suddenly in the sidebar you see this cute little heart. The heart is playful, follows your mouse and can be clicked multiple times to say that you like the article. Filling the heart until it’s totally red is actually really satisfying. This is a great example of a small little “cherry of the top” detail that makes the experience memorable. Be sure to check the rest of his site, he has some little interaction gems there.\n\nAnimations also serve and reinforce the brand identity. Just like colors, voice and tone, etc. For example, the animations on the game dots match perfectly the whole personality and visual identity of the game.\n\nBe careful though, Animations should fit and illustrate the message without overwhelming users. This is where we enter more and more the realm of pure “illustrative” animations that are supporting messages, not just UI transitions.\n\n For example, on the homepage, I have a “growing plant animation”. This animation is triggered when the user arrives in the blog section. The plant grows, supporting the message that I help other people grow by giving talks, writing articles, etc. You notice here that the animation only plays once then the plant stays grown even if you keep scrolling back and forth. Someone asked me why that plant didn’t “ungrow” when they scrolled outside of the area and regrow again. And the answer is simple: I wanted that animation to support the message, not overwhelm users. So playing it once it sufficient. Because, animations like that can actually be pretty annoying, even damaging for some users when you do it wrong.\n\nNow that we’ve seen how and where to use motion, let’s see how we can actually build those animations in the browser.\n\nWith CSS you can build 2 things: Transitions and Animations.\n\nA transition lets you change one (or many) properties between 2 different states. With animations, you can change those properties between as many states as you want.\n\nThis codepen shows an example of CSS transition: I transition the background color from yellow to purple over 1 second on hover. So my two states are “default” to “hover”.\n\nCSS transitions usually need a trigger, but you are not limited to :hover.\n\nIn this codepen, I trigger a CSS transition on :checked when the user clicks on “remember me”. I display the little checkmark and I change the background color to purple.\n\nThe syntax looks like that:\n• : to set the propertie(s) you want to change\n• transition-duration: to set how long the transition will last\n• : to set the speed curve of an animation (more on that in next part)\n• : to define how long the browser waits before triggering the transition\n• if you want the shorthand property\n\nTransitions are connected to triggers (hover, tap, etc.) and mostly used for UI feedback and to help users understand UI changes A to B (menu opening, etc.)\n\nThis codepen shows an example of an animation. The syntax is close to “traditional” animation . You write a set of , one per state, to define what you change over time (yellow, pink, purple). You then attach this animation to an element. Here it’s attached to a link with no trigger so it will play on page load.\n\nThe really cool thing is that you can mix CSS animations with JavaScript. Build the animations in CSS. Then attach it to a in CSS. Trigger it by adding the class to JavaScript events on , , , form , etc.\n\nI used my form codepen to show you the checkbox animation, but have you tried submitting the form with no data? That’s right, the form shakes! I created a “shakeMe” animation with 3 that move the form from left to right. Then there’s a JavaScript that checks on the form submit event if I have errors in the form. If so, I attach the .error class to the form, and voila, shake it shake it!\n\nSo to sum it up, to build animations you need to set up some to create the different steps of your changes. Then you attach this animation to a CSS element, with or without a trigger.\n\nThe syntax is the following:\n• : is the name of the animation to be able to attach it later\n• : how long will it play\n• : the timing curve, we’ll come back to that later\n• : how many times does it play\n• : (normal,reverse,alternate, alternate-reverse): how the animation will play during each cycle. Check the MDN documentation for more information.\n• : is it running or paused. Check the MDN documentation for more information.\n• : how long before it starts\n• : (none, forward, backwards, both) is to set what style is applied once the animation is finished. Check the MDN documentation for more information.\n\nIf you want to understand a little bit better how keyframes work, keyframes.app is a cool tool to play around with animations. You see the timeline and the concept of keyframes at the bottom.\n\nAnimations are mostly used for more complex UI motion involving different stages, looping motion and “illustrative” animations\n\nAnimating certain properties can become costly on the paint in the browser. The two things the browser can “cheaply” animate are transforms and opacity. So to build performant animations, I would advise to use those (and avoid animating absolute positions for example). Color and Background color are a little bit more performance costly but still okay to animation and transition.\n\nIn the talk I quickly show the 4 main transform possibilities:\n• Scale — : to make things bigger, smaller and hide them on X,Y and Z axis. Note that the default value is scale(none) (also equal to scale(1) and if you write scale(0) you will hide the element\n• Rotate — : to turn elements on X,Y and Z axis using degree unit, turn units, rads and more\n• Skew — : to skew things and make those strange polygon effects I have under my titles on my blog ^^\n\nI don’t enter into all the details of the 3d transforms with matrix3() and perspective but feel free to read the spec about those it you enjoy 3D cubes and other 3D animations in the browser.\n• csstriggers.com, on online resource that shows you which properties trigger layout, paint and composite\n\nNow that we’ve seen how to build those in CSS, let’s go back to the “timing function” I talked to you about. Finding the perfect timing is key to build user friendly animations.\n\nHere are a few best practices:\n• Use almost instant durations (<100ms) for fades and color animations\n• Use shorter durations (100ms – 300ms) for simpler effects and relatively small-sized animations. Also use those for user initiated action that need feedback (touch, click, swipe, etc.)\n• Use longer durations (> 300ms) for more complex effects and larger scale animations (such as page transitions or moving objects on and offscreen);\n• Keep slow animations (> 500ms) for large movements and background elements that bring mood\n\nThis graph is based on Val Head’s amazing article on UI animations timing and Rachel Nabors’s book Animation At Work.\n\nAlso note that the optimal timing can change based on viewport size. For example: on wearables like smart watches, the screen is quite small. So the distance for an element to go from one side of the screen to another is smaller. Which means that your “moving elements” animations should be faster for those devices, otherwise users will have to wait. Make your wearable animation durations something like 30% shorter.\n\nWhatever you do, the key is to test that duration: with different types of users, different devices, network conditions, etc. It’s okay to fine tune animations in the browser.\n\nAnother crucial part of having those animations “feel right” is the timing function I talked to you about before. Transition-timing-function and animation-timing-function specifies how a CSS animation progress over the duration of each cycle.\n\nThe default value is ease: the animation starts slowly, accelerates in the middle, and slows down at the end. This works when in doubt, but we can do better than that.\n\nThe step() timing function can be used if you need to build some step by step animations. Like a clock, or a CSS counter.\n\nSee this codepen to understand the different timing functions visually:\n\nThe object travels the same distance at the same time. This brings a quite unnatural feeling to the animation, almost mechanical. But it’s actually what you are going for? An example would be this train animation on codepen . You actually want the train speed to feel mechanical here to give this illusion of train passing by. It can also be used for elements and objects that are not affected by physical forces, for color and opacity animations and transitions.\n\nThe animation starts out slow and gets faster until the end of the cycle (like a car). This gives the impression of something that accelerates. It works well with elements and objects flying out of the user screen that leave the screen forever. For example: when user dismisses a notification.\n\nThe animation starts out fast and gets slower until the end of the timing. This works well for elements that emerge or arrive on a screen, like notifications that appear from example (you know those Material UI toasts?). It works for anything like cards that appear from outside of the screen and slide into the viewport. It also works well for page transitions.\n\nThe animation starts out slow and gets faster until the midpoint of the timing; then it gets slower again. This kind of timing is usually used for objects that move from one part of the screen to another. It’s also used when the element disappears but the user can bring it back to the previous place (menus, etc.). Last but not least is works well with buttons and things that require instant reaction.\n\nCreating your own custom timing-functions with cubic-bezier\n\nThose where the default CSS keywords you can use for the animation/transition-timing-function. But the REALLY cool part is that you can build your own custom curves using cubic-bezier curves.\n\nThey are some online tools to build this visually:\n• cubic-bezier.com: play with the toggle to build the perfect curve. You can go beyond the edge to create some bouncing effects, if bouncing effects work with your identity.\n• easings.net is a gallery of pre-built custom cubic-bezier curves you can use for your projects.\n\nSo to illustrate the different between CSS transitions and CSS animations for this talk, I decided to a little “Day and Night” demo. Feel free to refer to this if you want to explain the difference to students for example.\n\nThe left part is only built with CSS transitions (I will detail some parts later and might write a whole article with some videos about the process later).\n\n I change the colors of the elements and the position of some of those on hover. The right part is a CSS animation. It doesn’t need any trigger and is set to loop infinitely. The pulsing of the sun for example is an animation of the opacity and of the size over 3 different values.\n\nI will detail here a few interesting things that I discovered while playing with SVG and CSS animations.\n\nCSS custom properties is the fancy name of the CSS “native” variables. MDN explains the following:\n\nAnd we are going to use that scoping to make our lives easier when playing with SVG and CSS animations.\n\nFor the day/night color shift I did the following:\n• I defined the colors of the day background, the cactuses and the hills as CSS variables\n• Then I assigned those variables as SVG property to color my whole day artwork.\n\nThe really cool thing with CSS custom properties is that you can “redefine” them later in your CSS and assign other values if you need. So, on hover, I am re-defining my variables with a new “night” colorset.\n\nHere is what the code looks like. You can see in the console on the right that my “day” color set get overridden by the night one when I hover the element.\n\nGeoffrey Crofte gave a nice talk on CSS custom properties and talks about using a similar technique to create a dark theme.\n\nAnother place I am using those custom properties is in my Sun ripple effect. You can put as many properties as you want and as many keyframes as you want. For example here I am animating both the and the of the sun rays to create this ripple effect. I again used CSS custom properties instead of static values here for more flexibility in the transform property. This lets me redefine the scale factor of the second sun ray in its own scope. While the small ray starts at 1, scales to 1.05 and goes back to 1, the second ray (the one outside) does the opposite. It starts big at 1.1, then and then scales down to 1.01 and back to 1.1.\n\nThis change is what gives it the nice ripple effect. This way I avoid having to duplicate the animation declaration with a second scale factor. Here’s what it looks like:\n\nOne thing you need to be aware of if you start playing with SVG animations in CSS is the coordinate system. Here I am not talking about animating an SVG you would use as an image in an tag. I am talking about inline SVG in your HTML DOM and animations of paths inside that SVG.\n\nThe tricky part about SVG transforms is the origin. For HTML elements, the origin of transformations is the CSS transform origin: 50%, 50%, 0. So in the center on the 0 Z axis.\n\nFor SVG, the default value of transform-origin is 0,0 for all SVG elements except for root <svg> elements and <svg> elements that are a direct child of a foreignObject.\n\nYou usually want your SVG transforms to work like your HTML transforms: to have the origin in the center of the path/element. To achieve that you can use the . This lets you manually set up the coordinates for the origin of that transformation.\n\nHere is an example of the rotation of the sun inside my SVG element (with the yellow background). The rotation looks broken at the beginning because of this origin. I am fixing it by manually setting the transform-origin to 700px on both axes because I want the middle of my SVG parent as origin for my rotation. (you can also play with the codepen demo here)\n\nYou can use keywords (center, left, right, etc) but sometimes some browsers mess those up. So I prefer pixels. Also note that those pixels are relative to your SVG. If you scale it down or up it doesn’t change you can still use the pixels.\n\nTo find the exact coordinates I need I usually open the SVG in Illustrator. Then I select the element I need (here the sun) and check the coordinates of its center in the properties box.\n\nOne really cool trick in CSS is that you can use SVG paths to define a path for an element to follow during the animation. This is the trick I used to give the moon and sun the curvy animation. Here is the “behind the scene” of that part of the demo.\n• I set a path for this transition to follow with . Note: the path of the sun is shown in yellow in the video above, but, by default it doesn’t show. I just added some extra code for the demo to show it.\n• With , I place the sun at 32% of the beginning of this path to show the sun for the daylight default version.\n• On hover, I transition the to 43%, hiding the sun behind the hills.\n• I also put a second transition on the default sun element for the “mouse leave” transition. I want this one to have a delay of 1.2s so that the transition of the moon has time to finish.\n\nThe moon works the exact same way, it’s just hidden by default the goes along the blue path when the sun hides.\n• Get Moving (or not) with CSS Motion Path\n• CSS Motion Path beyond the Big Three Properties\n\nWith great powers, come great animations. I showed you how animations can make user experience better. But you should use those tools with caution. I already talked about how you should not use animations to create deceptive design patterns. Let’s talk about accessibility now.\n\nSome motion can make your users sick\n\nYour animations might may some people sick. To be more precise: motion might may people with vestibular disorders sick. Some people like me suffer from vestibular disorders. It’s any disease, damage or injury that affects the internal balance. It usually happens when there is a mismatch between what my eyes see and what happen around me. A little bit like you can get sick in a can when you read a book because the road moves around you. Well this happens for me, and for some people, with websites. and with videos games. And it’s complicated to predict and detect for your users, because a lot of different criteria can trigger the motion sickness. It depends from one person to another. Some people get nausea, some people get headaches for a whole day long.\n\nFor example : I can play and love Borderlands, but I can’t play Kingdome Heart 3 (I bought that damn game…) and I could not play Spyro the dragon on PS1. Buying a game is a gamble. Sometimes I know from video gameplays that it’s not going to be a game for me. But sometimes the videos make me sick, but playing the actual game is okay. Or it can be okay for a certain amount of time. And it’s the same on the web: some motion might make some people sick and might be okay for some other people.\n\nIf you are interested in the topic (and I kind of hope you are since you read my blog and I talk a lot about accessibility here), you can read:\n• Accessibility for Vestibular Disorders: How My Temporary Disability Changed My Perspective\n\nApple in 2017 wrote an article about the potential triggers of this motion sickness. It’s called “Responsive Design for Motion” and has a lot of visual examples.\n\nThe article includes the following triggers:\n\nIn this example, my brain has a problem with the fact that elements move around on the screen while I scroll at a different speed than the scroll. It creates this mismatch that trigger the sickness.\n\nSo, what can we do about this? Apple introduced reduce motion to iOS settings in 2013. They did that because the animation they created to open apps made some people sick. Literally. A lot of users complained. And now this reduced motion option is also available in MacOS in the accessibility options. I think Windows 10 also offers this kind of option under the Ease and Access section. MDN has a list of where you can find those options.\n\nApple (then other browsers) recently introduced the “prefers-reduced-motion” media query. It is is used to detect if the user has requested that the system minimize the amount of non-essential motion it uses. Current support is Safari, Chrome and Chrome Android and Firefox).\n\nDefault value is “no-preference”. This is a little bit the tricky part. no-preference can either mean that the user is okay with motion or has no prefer, but it can also mean that the user is not aware of this option. The other value us “reduce”. The means the user explicitly checked the box to tell the operating system to reduce the motion.\n\nSo you can use the media query to query for that parameter: if the prefers-reduce motion comes as true, you can ADAPT your motion. I insist on adapt, it doesn’t mean you need to remove all animations.\n\nThe idea is not to remove all animations, but more like to fine tune and reduce those animations that might trigger motion sickness (see the Apple article linked above). For example, in my CSS Transition CSS animation demo, the sun and moon moving around, on top of those shooting stars in the background and the timing of the solar system might be issues for some people. I implemented the following on\n• I remove the moving transition for the sun, cloud and moon and replace them by a color transition instead\n• I slowed down the animation on the right (you can bearly see it).\n• I also changed the speed of the earth rotation and removed the ripple effects on the sun\n\nResources to dig further into accessibility and motion:\n• An Introduction to the Reduced Motion Media Query\n• prefers-reduced-motion: Sometimes less movement is more\n\nAnimation is not “just” some sugar you add when the cake if backed. It needs to be part of the whole design process. So it also means that at some point, we need to communicate those animations with the development team.\n\nMy first idea was to use more classic movies, animes and video games tricks and to document the animations with storyboard. I still do this today for complex SVG animations like the Day/Night.\n\nAnother way to document animations can be to build a kind of “animation” timeline. The example in the middle in the image bellow shows the animations that we built for loading the video on a mobile app. It starts with a 0 to 300ms transition of the 2 mobile views. Then a fade-in transition while the video loads, etc.\n\nI sometimes also add some actual screens to the timeline to make if more visual for developers. So it is kind of a “storyboard” but with real screens at different “steps” of the UI transition. We have like delays “the first 10 items load in maximum 2 seconds”\n\n Then Indications about the fade animation, the opacity going from 0 to 1\n\n And indications about the loader.\n\nThis by the way is documentation I make available to the dev team in the tools they use (currently with have such documentation in the Jira stories for example).\n\nBut static documentation quickly has its limits…\n\nSo, when I have the time, I usually prefer to build some kind of UI prototypes with the different animations and transitions. I am currently using Axure to do that because it has a lot of features that are close to what you can do in CSS transitions and animations. Here is an example of what it looks like in Axure + the prototype demo on the right.\n• I can test the actual motion ideas I had in my mind by building them, playing around with easing and timings to make sure it’s efficient, not too slow, not too fast, etc.\n• I can also do usability testing on those animations to make sure it works with my users\n• I again use them to show to the developers exactly what is expected from the UI transition. I attach those into the Jira tickets (with all the static documentation) for documentation.\n\nI am currently using Sketch + Axure for that, but there’s a LOT of tools that can help you prototype some animations today. You could build those with Figma, or Flinto, and Framer. It you are creating more “illustrative” animations in After Effect, you can also export them with the LottieFiles plugin. It lets you export AE animations to iOS, Android and web compatible format.\n\nA last way I communicate animations and motion is by showing my dev teams examples of things I like and explain to them how I could like this to be implemented. For example:\n• Codepen has some collections you can explore by topic\n\nDesign in tools, Decide in the browser!\n\nWhatever tool you are using, I think that the most important part is to test those animations in the browser as soon as possible. This is why I am a big fan of designing in tools, but deciding in browser. This means that even with thorough specifications, I always end up fine tuning the animations directly in the browser in a designer/dev peer reviewing session. Because this is mostly the only way to “feel” if those animations work or not.\n\nMotion as part of the design systems\n\nAnimations are now parts of design systems. In her free eBook “Animation in Design System” Val Head gives a list of great examples of brands that included motion as part of their design system documentation. Take a look at Audi, or at the Google Material UI motion principles.\n\nAnimations tend to become some “design tokens“, just like colors, or icons. You need to document them if you want to build brand and UI consistency. A few things that often get documented when it comes to animations and design systems:\n• Purpose (when and why animate)\n• Types of animations (what to animate)\n\nFor some interesting examples you can take a look at Microsoft’s motion documentation or at the documentation of animations in the Design system of Foyer (an insurance company in Luxembourg).\n• Does it distract my users from accomplishing their tasks?\n• If there’s a risk of distraction, maybe adding a kill switch would help?\n• Does it annoy my user?\n• Does it respond well?\n• Is it too long\n• Don’t make user wait for your animation to end be able to accomplish their tasks\n• Does it provide useful information and adds value to the interface ?\n• Does the animation serve a purpose or is it just annoying eye candy?\n• Make the animation fit the whole message : playful animations are cool on games, but not on sleek sophisticated serious sites\n• Can my user turn off/ pause animations?\n• Even better: can they chose to turn them on?\n• with different users who have different types of disabilities\n\nI hosted the HTML export from keynote here. To go from one slide to another you can either click on the slide, or use the mouse arrows. There’s also a previous of the slide summary if you hover the left part of the deck. It might be quite slow though since the whole HTML export is 13Mb.\n\nYou can also enjoy the PDF version from Speakerdeck.\n\nWatch the replay of the talk\n\nThis is the 30 minutes version of this talk (the video for the 45 minutes is coming later)"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations/Using_CSS_animations",
        "document": "CSS animations make it possible to animate transitions from one CSS style configuration to another. Animations consist of two components: a style describing the CSS animation and a set of keyframes that indicate the start and end states of the animation's style, as well as possible intermediate waypoints. There are three key advantages to CSS animations over traditional script-driven animation techniques:\n• They're easy to use for basic animations; you can create them without even having to know JavaScript.\n• The animations run well, even under moderate system load. Simple animations can often perform poorly in JavaScript. The rendering engine can use frame-skipping and other techniques to keep the performance as smooth as possible.\n• Letting the browser control the animation sequence lets the browser optimize performance and efficiency by, for example, reducing the update frequency of animations running in tabs that aren't currently visible.\n\nTo create a CSS animation sequence, you style the element you want to animate with the property or its sub-properties. This lets you configure the timing, duration, and other details of how the animation sequence should progress. This does not configure the actual appearance of the animation, which is done using the at-rule as described in the Defining animation sequence using keyframes section below. The sub-properties of the property are: Specifies the composite operation to use when multiple animations affect the same property simultaneously. This property is not part of the shorthand property. Specifies the delay between an element loading and the start of an animation sequence and whether the animation should start immediately from its beginning or partway through the animation. Specifies whether an animation's first iteration should be forward or backward and whether subsequent iterations should alternate direction on each run through the sequence or reset to the start point and repeat. Specifies the length of time in which an animation completes one cycle. Specifies how an animation applies styles to its target before and after it runs. Note: In the case of animation forwards fill mode, animated properties behave as if included in a set property value. If a new stacking context was created during the animation, the target element retains the stacking context after the animation has finished. Specifies the number of times an animation should repeat. Specifies the name of the at-rule describing an animation's keyframes. Specifies whether to pause or play an animation sequence. Specifies the timeline that is used to control the progress of a CSS animation. Specifies how an animation transitions through keyframes by establishing acceleration curves.\n\nAfter you've configured the animation's timing, you need to define the appearance of the animation. This is done by establishing one or more keyframes using the at-rule. Each keyframe describes how the animated element should render at a given time during the animation sequence. Since the timing of the animation is defined in the CSS style that configures the animation, keyframes use a to indicate the time during the animation sequence at which they take place. 0% indicates the first moment of the animation sequence, while 100% indicates the final state of the animation. Because these two times are so important, they have special aliases: and . Both are optional. If / or / is not specified, the browser starts or finishes the animation using the computed values of all attributes. You can optionally include additional keyframes that describe intermediate steps between the start and end of the animation.\n\nThe CSS animation longhand properties can accept multiple values, separated by commas. This feature can be used when you want to apply multiple animations in a single rule and set different durations, iteration counts, etc., for each of the animations. Let's look at some quick examples to explain the different permutations. In this first example, there are three duration and three iteration count values. So each animation is assigned a value of duration and iteration count with the same position as the animation name. The animation is assigned a duration of and an iteration count of , and the animation is assigned a duration of and an iteration count of . In this second example, three animation names are set, but there's only one duration and iteration count. In this case, all three animations are given the same duration and iteration count. In this third example, three animations are specified, but only two durations and iteration counts. In such cases where there are not enough values in the list to assign a separate one to each animation, the value assignment cycles from the first to the last item in the available list and then cycles back to the first item. So, gets a duration of , and gets a duration of , which is the last value in the list of duration values. The duration value assignment now resets to the first value; , therefore, gets a duration of . The iteration count values (and any other property values you specify) will be assigned in the same way. If the mismatch in the number of animations and animation property values is inverted, say there are five values for three values, then the extra or unused animation property values, in this case, two values, don't apply to any animation and are ignored.\n\nThis basic example styles a element using the and transition properties so that the text slides in from off the right edge of the browser window. In this example, the style for the element specifies that the animation should take 3 seconds to execute from start to finish, using the property and that the name of the at-rule defining the keyframes for the animation sequence is . In this case, we have just two keyframes. The first occurs at (using the alias ). Here, we configure the property of the element to be at (that is, beyond the far right edge of the containing element), and the of the element to be 200% (or two times its default inline size), causing the paragraph to be twice as wide as its containing block. This causes the first frame of the animation to have the header drawn off the right edge of the browser window. The second keyframe occurs at (using the alias ). The property is set to and the of the element is set to , which is . This causes the header to finish its animation in its default state, flush against the left edge of the content area. <p> The Caterpillar and Alice looked at each other for some time in silence: at last the Caterpillar took the hookah out of its mouth, and addressed her in a languid, sleepy voice. </p> Note: Reload page to see the animation.\n\nLet's add another keyframe to the previous example's animation. Let's say we want Alice's name to turn pink and grow and then shrink back to its original size and color as it moves from right to left. While we could change the , changing any properties that impact the box model negatively impacts performance. Instead, we wrap her name in a and then scale and assign a color to that separately. That requires adding a second animation impacting only the : The full code now looks like this: <p> The Caterpillar and <span>Alice</span> looked at each other for some time in silence: at last the Caterpillar took the hookah out of its mouth, and addressed her in a languid, sleepy voice. </p> This tells the browser the name should be normal for the first and last 25% of the animation, but turn pink while being scaled up and back again in the middle. We set the spans's property to as the properties do not affect non-replaced inline-level content. Note: Reload page to see the animation.\n\nYou can get additional control over animations — as well as useful information about them — by making use of animation events. These events, represented by the object, can be used to detect when animations start, finish, and begin a new iteration. Each event includes the time at which it occurred as well as the name of the animation that triggered the event. We'll modify the sliding text example to output some information about each animation event when it occurs, so we can get a look at how they work. We've included the same keyframe animation as the previous example. This animation will last 3 seconds, be called \"slide-in\", repeat 3 times, and travel in an alternate direction each time. In the , the scale and translation are manipulated along the x-axis to make the element slide across the screen. We'll use JavaScript code to listen for all three possible animation events. This code configures our event listeners; we call it when the document is first loaded in order to set things up. This is pretty standard code; you can get details on how it works in the documentation for . The last thing this code does is set the on the element we'll be animating to \"slide-in\"; we do this to start the animation. Why? Because the event fires as soon as the animation starts, and in our case, that happens before our code runs. So we'll start the animation ourselves by setting the class of the element to the style that gets animated after the fact. The events get delivered to the function, which is shown below. function listener(event) { const l = document.createElement(\"li\"); switch (event.type) { case \"animationstart\": l.textContent = `Started: elapsed time is ${event.elapsedTime}`; break; case \"animationend\": l.textContent = `Ended: elapsed time is ${event.elapsedTime}`; break; case \"animationiteration\": l.textContent = `New loop started at time ${event.elapsedTime}`; break; } document.getElementById(\"output\").appendChild(l); } This code, too, is very simple. It looks at the to determine which kind of animation event occurred, then adds an appropriate note to the (unordered list) we're using to log these events. The output, when all is said and done, looks something like this: Note that the times are very close to, but not exactly, those expected given the timing established when the animation was configured. Note also that after the final iteration of the animation, the event isn't sent; instead, the event is sent. Just for the sake of completeness, here's the HTML that displays the page content, including the list into which the script inserts information about the received events: <h1 id=\"watch-me\">Watch me move</h1> <p> This example shows how to use CSS animations to make <code>H1</code> elements move across the page. </p> <p> In addition, we output some text each time an animation event fires, so you can see them in action. </p> <ul id=\"output\"></ul> Note: Reload page to see the animation."
    },
    {
        "link": "https://w3.org/TR/css-view-transitions-1",
        "document": "This module defines the View Transition API, along with associated properties and pseudo-elements, which allows developers to create animated visual transitions representing changes in the document state.\n\nThis document was produced by a group operating under the W3C Patent Policy . W3C maintains a public list of any patent disclosures made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains Essential Claim(s) must disclose the information in accordance with section 6 of the W3C Patent Policy .\n\nThis document is governed by the 12 June 2023 W3C Process Document .\n\nPlease send feedback by filing issues in GitHub (preferred), including the spec code “css-view-transitions” in the title, like this: “[css-view-transitions] …summary of comment… ”. All issues and comments are archived . Alternately, feedback can be sent to the ( archived ) public mailing list www-style@w3.org .\n\nThis document was published by the CSS Working Group as a Candidate Recommendation Snapshot using the Recommendation track . Publication as a Candidate Recommendation does not imply endorsement by W3C and its Members. A Candidate Recommendation Snapshot has received wide review , is intended to gather implementation experience, and has commitments from Working Group members to royalty-free licensing for implementations. This document is intended to become a W3C Recommendation; it will remain a Candidate Recommendation at least until 5 December 2023 to gather additional feedback.\n\nThis section describes the status of this document at the time of its publication. A list of current W3C publications and the latest revision of this technical report can be found in the W3C technical reports index at https://www.w3.org/TR/.\n\nThis specification introduces a DOM API and associated CSS features that allow developers to create animated visual transitions, called between different states of a document.\n\nTraditionally, creating a visual transition between two document states required a period where both states were present in the DOM at the same time. In fact, it usually involved creating a specific DOM structure that could represent both states. For example, if one element was “moving” between containers, that element often needed to exist outside of either container for the period of the transition, to avoid clipping from either container or their ancestor elements.\n\nThis extra in-between state often resulted in UX and accessibility issues, as the structure of the DOM was compromised for a purely-visual effect.\n\nView Transitions avoid this troublesome in-between state by allowing the DOM to switch between states instantaneously, then performing a customizable visual transition between the two states in another layer, using a static visual capture of the old state, and a live capture of the new state. These captures are represented as a tree of pseudo-elements (detailed in § 3.2 View Transition Pseudo-elements), where the old visual state co-exists with the new state, allowing effects such as cross-fading while animating from the old to new size and position.\n\nBy default, creates a view transition consisting of a page-wide cross-fade between the two DOM states. Developers can also choose which elements are captured independently using the view-transition-name CSS property, allowing these to be animated independently of the rest of the page. Since the transitional state (where both old and new visual captures exist) is represented as pseudo-elements, developers can customize each transition using familiar features such as CSS Animations and Web Animations.\n\nA successful view transition goes through the following phases:\n• Developer’s function is called, which updates the document state.\n• Transition pseudo-elements created. See § 3.2 View Transition Pseudo-elements for an overview of this structure.\n\nA key part of the View Transition API design is that an animated transition is a visual enhancement to an underlying document state change. That means a failure to create a visual transition, which can happen due to misconfiguration or device constraints, will not prevent the developer’s being called, even if it’s known in advance that the transition animations cannot happen.\n\nFor example, if the developer calls at the start of the view transition lifecycle, the steps relating to the animated transition, such as creating the view transition tree, will not happen. However, the will still be called. It’s only the visual transition that’s skipped, not the underlying state change.\n\nNote: If the DOM change should also be skipped, then that needs to be handled by another feature. is an example of a feature developers could use to handle this.\n\nAlthough the View Transition API allows DOM changes to be asynchronous via the , the API is not responsible for queuing or otherwise scheduling DOM changes beyond any scheduling needed for the transition itself. Some asynchronous DOM changes can happen concurrently (e.g if they’re happening within independent components), whereas others need to queue, or abort an earlier change. This is best left to a feature or framework that has a more holistic view of the application.\n\nView Transition works by replicating an element’s rendered state using UA generated pseudo-elements. Aspects of the element’s rendering which apply to the element itself or its descendants, for example visual effects like filter or opacity and clipping from overflow or clip-path, are applied when generating its image in Capture the image.\n\nHowever, properties like mix-blend-mode which define how the element draws when it is embedded can’t be applied to its image. Such properties are applied to the element’s corresponding ::view-transition-group() pseudo-element, which is meant to generate a box equivalent to the element.\n\nIf the ::view-transition-group() has a corresponding element in the \"new\" states, the browser keeps the properties copied over to the ::view-transition-group() in sync with the DOM element in the \"new\" state. If the ::view-transition-group() has a corresponding both in the \"old\" and \"new\" state, and the property being copied is interpolatable, the browser also sets up a default animation to animate the property smoothly.\n\nThe view-transition-name property “tags” an element for capture in a view transition, tracking it independently in the view transition tree under the specified . An element so captured is animated independently of the rest of the page.\n\nNote: For the purposes of this API, if one element has view transition name foo in the old state, and another element has view transition name foo in the new state, they are treated as representing different visual state of the same element, and will be paired in the view transition tree. This may be confusing, since the elements themselves are not necessarily referring to the same object, but it is a useful model to consider them to be visual states of the same conceptual page entity.\n\nIf the element’s principal box is fragmented, skipped, or not rendered, this property has no effect. See § 7 Algorithms for exact details.\n\nElements captured in a view transition during a view transition or whose view-transition-name computed value is not none (at any time):\n\nNote: This is a general definition for trees of pseudo-elements. If other features need this behavior, these definitions will be moved to [css-pseudo-4].\n\nA is a type of tree-abiding pseudo-element that is the root in a tree of tree-abiding pseudo-elements, known as the .\n\nThe pseudo-element tree defines the document order of its descendant tree-abiding pseudo-elements.\n\nWhen a pseudo-element participates in a pseudo-element tree, its originating pseudo-element is its parent.\n\nIf a descendant of a pseudo-element root has no other siblings, then :only-child matches that .\n\nNote: This means that will only select if the parent contains a single child. As in, there is no sibling .\n\nThe visualization of a view transition is represented as a pseudo-element tree called the composed of the defined below. This tree is built during the setup transition pseudo-elements step, and is rooted under a ::view-transition pseudo-element originating from the root element. All of the view transition pseudo-elements are selected from their ultimate originating element, the document element.\n\nSeveral of the view transition pseudo-elements are , which are functional tree-abiding view transition pseudo-elements associated with a view transition name. These pseudo-elements take a <pt-name-selector> as their argument, and their syntax follows the pattern:\n\nwhere <pt-name-selector> selects a view transition name, and has the following syntax definition:\n\nA named view transition pseudo-element selector only matches a corresponding pseudo-element if its <pt-name-selector> matches that pseudo-element’s view transition name, i.e. if it is either * or a matching <custom-ident>.\n\nNote: The view transition name of a view transition pseudo-element is set to the view-transition-name that triggered its creation.\n\nThe specificity of a named view transition pseudo-element selector with a <custom-ident> argument is equivalent to a type selector. The specificity of a named view transition pseudo-element selector with a * argument is zero.\n\nThe pseudo-element is a tree-abiding pseudo-element that is also a pseudo-element root. Its originating element is the document’s document element, and its containing block is the snapshot containing block.\n\nNote: This element serves as the parent of all ::view-transition-group() pseudo-elements.\n\nThe pseudo-element is a named view transition pseudo-element that represents a matching named view transition capture. A ::view-transition-group() pseudo-element is generated for each view transition name as a child of the ::view-transition pseudo-element, and contains a corresponding ::view-transition-image-pair().\n\nThe pseudo-element is a named view transition pseudo-element that represents a pair of corresponding old/new view transition captures. This pseudo-element is a child of the corresponding ::view-transition-group() pseudo-element and contains a corresponding ::view-transition-old() pseudo-element and/or a corresponding ::view-transition-new() pseudo-element (in that order).\n\nThe pseudo-element is an empty named view transition pseudo-element that represents a visual snapshot of the “old” state as a replaced element; it is omitted if there’s no “old” state to represent. Each ::view-transition-old() pseudo-element is a child of the corresponding ::view-transition-image-pair() pseudo-element.\n\nNote: The content and natural dimensions of the image are captured in capture the image, and set in setup transition pseudo-elements.\n\nNote: Additional styles in the dynamic view transition style sheet added to animate these pseudo-elements are detailed in setup transition pseudo-elements and .\n\nThe pseudo-element (like the analogous ::view-transition-old() pseudo-element) is an empty named view transition pseudo-element that represents a visual snapshot of the “new” state as a replaced element; it is omitted if there’s no “new” state to represent. Each ::view-transition-new() pseudo-element is a child of the corresponding ::view-transition-image-pair() pseudo-element.\n\nNote: The content and natural dimensions of the image are captured in capture the image, then set and updated in setup transition pseudo-elements and .\n\nThe view transition pseudo-elements are styled, laid out, and rendered like normal elements, except that they originate in the snapshot containing block rather than the initial containing block and are painted in the view transition layer above the rest of the document.\n\nThe is a rectangle that covers all areas of the window that could potentially display page content (and is therefore consistent regardless of root scrollbars or interactive widgets). This makes it likely to be consistent for the document element's old image and new element.\n\nThe refers to the top-left corner of the snapshot containing block.\n\nThe refers to the width and height of the snapshot containing block as a tuple of two numbers.\n\nThe snapshot containing block is considered to be an absolute positioning containing block and a fixed positioning containing block for ::view-transition and its descendants.\n\nThis specification introduces a new stacking layer, the view transition layer, to the end of the painting order established in CSS2§E Elaborate Description of Stacking Contexts. [CSS2]\n\nThe ::view-transition pseudo-element generates a new stacking context, called the , which paints after all other content of the document (including any content rendered in the top layer), after any filters and effects that are applied to such content. (It is not subject to such filters or effects, except insofar as they affect the rendered contents of the ::view-transition-old() and ::view-transition-new() pseudo-elements.)\n\nNote: The intent of the feature is to be able to capture the contents of the page, which includes the top layer elements. In order to accomplish that, the view transition layer cannot be a part of the captured stacking contexts, since that results in a circular dependency. Therefore, the view transition layer is a sibling of all other content.\n\nWhen a 's active view transition's phase is \" \", the boxes generated by any element in that with captured in a view transition are invisible.\n\nThe is a user-agent origin style sheet containing the following rules:\n\nAdditional styles are dynamically added to the user-agent origin during a view transition through the dynamic view transition style sheet.\n\nThe interface represents and controls a single same-document view transition, i.e. a transition where the starting and ending document are the same, possibly with changes to the document’s DOM structure.\n\nA has the following:\n\nA must never have both an and a process old state captured.\n\nNote: is optionally set for same-document view transitions, and process old state captured is set for cross-document view transitions.\n\nThe getter steps are to return this’s finished promise.\n\nThe getter steps are to return this’s ready promise.\n\nThe getter steps are to return this’s .\n\nNote: This spec uses CSS’s definition of element, which includes pseudo-elements.\n\nA is a struct with the following:\n\nIn addition, a captured element has the following :\n\nNote: These are used to update, and later remove styles from a document's dynamic view transition style sheet.\n\nThis specification introduces no new privacy considerations.\n\nThe images generated using capture the image algorithm could contain cross-origin data (if the Document is embedding cross-origin resources) or sensitive information like visited links. The implementations must ensure this data can not be accessed by the Document. This should be feasible since access to this data should already be prevented in the default rendering of the Document.\n• Use a keyframe to add plus-lighter blending during cross-fade. See issue 8924.\n• Add mix-blend-mode to list of properties copied over to the ::view-transition-group. See issue 8962.\n• Add text-orientation to list of properties copied over to the ::view-transition-group. See issue 8230.\n• Refactor the old capture algorithm to properly set captured in a view transition before reading the value.\n• Pointer events resolve to the documentElement when rendering is suppressed. See issue 7797.\n• Add rendering constraints to elements participating in a transition. See issue 8139 and issue 7882.\n• Remove html specifics from UA stylesheet to support ViewTransitions on SVG Documents.\n• Skip the transition if viewport size changes. See issue 8045.\n• Add concept of a tree of pseudo-elements under pseudo-element root. See issue 8113.\n• When skipping a transition, the is called in own task rather than synchronously. See issue 7904\n• When capturing images, at least the in-viewport part of the image should be captured, downscale if needed. See issue 8561.\n• Applying the ink overflow to the captured image is implementation defined, and doesn’t affect the image’s natural size. See issue 8597.\n• Rename \"snapshot root\" to \"snapshot containing block\", and make it an absolute positioning containing block and a fixed positioning containing block for its descendants. See issue 8505.\n• Add dynamic view transition style sheet concept for dynamically generated UA styles scoped to the current Document.\n• Clarify timing for resolving/rejecting promises when skipping the transition. See issue 7956.\n• Elements under a content-visibility:auto element that skips its contents are ignored. See issue 7874.\n• UA styles on the pseudo-DOM stay in sync with author DOM for any developer observable API. See issue 7812.\n• Changes in size/position of elements in the new Document generate new UA animation keyframes. See issue 7813.\n• Scope keyframes to user agent stylesheets using -ua- prefix. See issue 7560."
    }
]