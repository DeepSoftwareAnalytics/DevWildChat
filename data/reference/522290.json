[
    {
        "link": "https://documentation.sas.com/doc/en/lestmtsref/9.4/p0f9yk6pd4znukn1rlw6hzkg1url.htm",
        "document": ""
    },
    {
        "link": "https://documentation.sas.com/doc/en/lrcon/9.4/n1w749t788cgi2n1txpuccsuqtro.htm",
        "document": ""
    },
    {
        "link": "https://documentation.sas.com/doc/en/lestmtsref/9.4/n0oaql83drile0n141pdacojq97s.htm",
        "document": ""
    },
    {
        "link": "https://documentation.sas.com/doc/no/lrcon/9.4/n1w749t788cgi2n1txpuccsuqtro.htm",
        "document": ""
    },
    {
        "link": "https://libguides.library.kent.edu/SAS/Informats-Formats",
        "document": "In SAS, formats and informats are pre-defined patterns for interpreting or displaying data values. In this tutorial, we'll focus on SAS's built-in formats, which mostly cover numeric, date, and character variables.\n\nTo understand the need for informats and formats, let's start with a simple example.\n\nSuppose I tell you that a person's birthday is on 12-01-99. How do you know if I mean \"December 1, 1999\" or \"January 12, 1999\"?\n\nIf you're in the United States, you probably write your dates using MM-DD-YY order, and would therefore interpret the date as \"December 1, 1999\". But if you're in Europe or Canada, you probably write your dates using DD-MM-YY order, and therefore interpret the date as \"12 January 1999\". That's quite a difference!\n\nWhen reading data, SAS also must make the same judgement to interpret the true meaning of the values. Informats are the way we give SAS an explicit rule to follow so that it makes the right judgements.\n\nFormats, on the other hand, allow SAS to change the display value \"after the fact\" -- i.e., once SAS knows that 12-01-99 should be interpreted as MM-DD-YY, it knows that date could also be displayed as \"12/01/1999\" or \"December 1, 1999\" or \"1 December 1999\".\n\nSo informats and formats are a shared set of common patterns for reading and writing data values -- the only difference is whether we apply them at the \"interpretation\" stage (informats) or at the \"display\" stage (formats).\n\nFormats and informats in SAS use a common set of pattern codes.\n\nThere are three main types of built-in informats in SAS: character, numeric, and date. Generically, the informat/format codes follow these patterns:\n\nIn these codes, w denotes the width of the variable, and d denotes the number of decimal places.\n\nNotice that the format/informat names contain a period. This helps SAS recognize that it is an informat name rather than a variable name. SAS will not recognize the informat name without the dot.\n\nIn addition to the above generic informats, there are also many specific display formats. Here's a small selection of built-in SAS formats that can change the display of numeric variables:\n\nThis may seem like a small matter, but it's incredibly powerful: it allows you to have variables in your dataset that function as numbers (i.e. you can add, subtract, multiply, and divide them), but arbitrarily change the formatted display of those numbers without sacrificing the \"numeric-ness\" of the variable.\n\nFor a full list of built-in formats, see the SAS documentation:"
    },
    {
        "link": "https://documentation.sas.com/doc/en/proc/9.4/p1dlh3svb4rrasn14h8jm6nyrj5o.htm",
        "document": ""
    },
    {
        "link": "https://documentation.sas.com/doc/en/proc/latest/p1dlh3svb4rrasn14h8jm6nyrj5o.htm",
        "document": ""
    },
    {
        "link": "https://listendata.com/2023/08/sas-proc-print-learn-with-examples.html",
        "document": "This tutorial explains how to use the PROC PRINT procedure in SAS, along with examples.\n\nPROC PRINT is a commonly used SAS procedure that displays the contents of a dataset.\n\nLet's create a sample SAS dataset that will be used in the examples of this tutorial.\n\nThe simplest usage of PROC PRINT is that it displays all variables in the dataset.\n\nThe option in PROC PRINT is used to display first N observations in the dataset. In this example, it displays first 5 observations.\n\nYou can specify which variables you want to display using the VAR statement.\n\nYou can tell SAS not to display observation number in the output using the NOOBS option.\n\nYou can use the WHERE statement to display only specific observations that meet a condition. The following code generates an output that displays only the observations where the 'sex' variable has a value of 'M'.\n\nHow to Use Formats in PROC PRINT\n\nYou can apply formats to the variables using the format statement. In the code below, format sale dollar10.1; applies a dollar format to the \"sale\" variable.\n\nHow to Use Title and Footnote in PROC PRINT\n\nYou can use the TITLE and FOOTNOTE statements to print the dataset with a title and a footer.\n\nYou can use the label statement to specify labels for the variables.\n\nYou can use the sum statement to display total at the bottom of the output.\n\nTo sum all the numeric variables, you can use the SUM statement with keyword . To label the grand total, use the grandtotal_label= option.\n\nThe following code displays the data in groups based on the \"sex\" variable. It is important to sort the dataset when you are using the BY statement in PROC SORT. If data is already sorted by the variable which is used in the BY statement, you don't need to sort the dataset prior to PROC PRINT procedure.\n\nThe following code generates a report that displays sales data by 'sex', including a total row, a count of observations, and a dynamic title for each group. The sales values will be formatted as dollars with one decimal place.\n\nWhen you use PROC PRINT with the NOBYLINE option, each BY group starts on a new page. The TITLE statement adds a title in the output. The #BYVAL keyword tells SAS to include the current value of the BY variable \"sex\" in the title.\n\nHow to Style Table in PROC PRINT\n\nYou can use the option to modify the appearance of the output. In the code below, the header cells of the output will appear with an italic font and a black background, while the data cells will have a red background with white text."
    },
    {
        "link": "https://documentation.sas.com/doc/it/pgmsascdc/v_045/viyaconnref/titlepage.htm",
        "document": ""
    },
    {
        "link": "https://libguides.library.kent.edu/SAS/ViewData",
        "document": "Alternatively, a SAS dataset can be viewed using the the PRINT procedure, which produces a print-out of your dataset in the Output window. The PRINT procedure offers the flexibility to specify what variables and/or observations to print. The general format of PROC PRINT is:\n\nIn the first line of the SAS code above, tells SAS to execute the print procedure on the dataset specified by the argument. Immediately following PROC PRINT is where you put any procedure-level options you want to include. Let’s review some of the more common options:\n• Print variable labels instead of variable names if variable labels have been assigned. (Does not apply to value labels.)\n• Do not print row numbers/row identifiers. (NOOBS is an abbreviation for \"no observation numbers\".)\n\nAs with all SAS procedures, the command is optional, but recommended. If you do not specify a dataset, SAS will use the most recently created dataset by default. Note that if you want to begin printing at a specific record number or print a range of records (such as the first 20 records), you can supply the and options immediately after the name of the dataset passed to the argument, enclosed by parentheses. For example, the code\n\nwill print all of the observations in the sample dataset from row 20 through row 30.\n\nThe other statements (BY, ID, VAR, WHERE, and FORMAT) are optional, but are useful when you want to change what content is printed:\n• The statement is an optional statement that can be used to print the data in groups. Note that this action requires that the data is sorted with respect to the variable(s) included in the statement. This can be achieved by running PROC SORT before running PROC PRINT.\n• The statement allows you to specify a variable containing unique identifier labels for each observation. The variable you specify in the ID statement will print as the observation identifier in place of a row number.\n• The statement allows you to specify which variables to print, and what order to print them in. If this statement is omitted, SAS will print all variables in the dataset.\n• The statement allows you to limit which rows are printed, based on a logical condition involving variables and values in your dataset. (If you want to print only the first n observations, or if you want to begin printing with the nth observation, use the FIRSTOBS and OBS options mentioned above.) We cover logical conditions in our Subsetting & Splitting Datasets tutorial.\n• The statement allows you to apply (or override) variable formats for printing. This can be useful, for example, if your numeric variables normally have 2-3 decimal places, but you to suppress decimal places in the PROC PRINT output. We cover variable formats and the FORMAT statement in our Informats and Formats tutorial.\n\nThere are other optional statements available in PROC PRINT; see the SAS Help and Documentation guide for their descriptions."
    }
]