[
    {
        "link": "https://threejs.org/docs/api/en/loaders/TextureLoader.html",
        "document": "Class for loading a [page:Texture texture]. This uses the [page:ImageLoader] internally for loading files.\n\nPlease note three.js r84 dropped support for TextureLoader progress events. For a TextureLoader that supports progress events, see [link:https://github.com/mrdoob/three.js/issues/10439#issuecomment-293260145 this thread].\n\n[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].\n\n\n\n Creates a new [name].\n\nSee the base [page:Loader] class for common properties.\n\nSee the base [page:Loader] class for common methods.\n\n[page:String url] — the path or URL to the file. This can also be a [link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs Data URI].\n\n [page:Function onLoad] (optional) — Will be called when load completes. The argument will be the loaded [page:Texture texture].\n\n [page:Function onProgress] (optional) — This callback function is currently not supported.\n\n [page:Function onError] (optional) — Will be called when load errors.\n\n\n\n Begin loading from the given URL and pass the fully loaded [page:Texture texture] to onLoad. The method also returns a new texture object which can directly be used for material creation. If you do it this way, the texture may pop up in your scene once the respective loading process is finished."
    },
    {
        "link": "https://threejs.org/docs#api/en/loaders/TextureLoader.load",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/66881138/how-to-load-a-texture-in-three-js-javascript-without-interrupting-main-thread",
        "document": "In a project of mine I need to load some pretty large textures and map them onto spheres. They are generally acceptable in their loading time with the exception of a few large ones. These large textures take up to ten seconds to load and during this time the entire app freezes. I'd like to somehow do all the loading in the background and then once and only once the textures are downloaded, map them onto my spheres.\n\nI have tried using callback function and promises, even the built in .loadAsync of the texture loader but it never changed the duration of the freeze.\n\nIf someone knows how to load without this problem it would be of great use. My project can be found here."
    },
    {
        "link": "https://r3f.docs.pmnd.rs/tutorials/loading-textures",
        "document": "To load the textures we will use the from three.js in combination with that will allow us to pass the location of the texture and get the map back.\n\nIt's better to explain with code, let's say you downloaded this texture and placed it in the public folder of your site, to get the color map from it you could do:\n\nLet's then with this information create a small scene where we can use this texture:\n\nIf everything went according to plan, you should now be able to apply this texture to the sphere like so:\n\nAwesome! That works but we have a lot more textures to import and do we have to create a different useLoader for each of them?\n\nThat's the great part! You don't, the second argument is an array where you can pass all the textures you have and the maps will be returned and ready to use:\n\nNow we can place them in our mesh like so:\n\nThe displacement will probably be too much, usually setting it to 0.2 will make it look good. Our final code would look something like:\n\nAnother way to import these is using from , that will make it slightly easier and there is no need to import the , our code would look like:\n\nYou can also use object-notation which is the most convenient:\n\nYou can play with the sandbox and see how it looks:"
    },
    {
        "link": "https://how.dev/answers/how-to-load-and-apply-textures-in-threejs",
        "document": "Three.js is a JavaScript library that renders animations on the web. It makes use of WebGL for this purpose. Before we can apply texture to a scene, we need to understand how to create a scene in three.js.\n\ncan be loaded and applied to In three.js, materials define the appearance of objects—the way they appear smooth, rough, or handle reflection of light. , which, when applied to shapes, give them the pattern of the asset that was loaded. We can use to achieve this task.\n\nHere's the syntax to initialize, load, and apply a texture to a material:"
    },
    {
        "link": "https://threejs.org/docs/api/en/materials/MeshBasicMaterial.html",
        "document": "A material for drawing geometries in a simple shaded (flat or wireframe) way.\n\n\n\n This material is not affected by lights.\n\n[page:Object parameters] - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from [page:Material]) can be passed in here.\n\n\n\n The exception is the property [page:Hexadecimal color], which can be passed in as a hexadecimal string and is `0xffffff` (white) by default. [page:Color.set]( color ) is called internally.\n\nSee the base [page:Material] class for common properties.\n\nThe alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.\n\n\n\n Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the [page:WebGLRenderer WebGL] renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.\n\nThe red channel of this texture is used as the ambient occlusion map. Default is null. The aoMap requires a second set of UVs.\n\nIntensity of the ambient occlusion effect. Range is 0-1, where `0` disables ambient occlusion. Where intensity is `1` and the [page:.aoMap] red channel is also `1`, ambient light is fully occluded on a surface. Default is `1`.\n\n[page:Color] of the material, by default set to white (0xffffff).\n\nHow to combine the result of the surface's color with the environment map, if any.\n\n\n\n Options are [page:Materials THREE.MultiplyOperation] (default), [page:Materials THREE.MixOperation], [page:Materials THREE.AddOperation]. If mix is chosen, the [page:.reflectivity] is used to blend between the two colors.\n\nThe rotation of the environment map in radians. Default is `(0,0,0)`.\n\nWhether the material is affected by fog. Default is `true`.\n\nThe light map. Default is null. The lightMap requires a second set of UVs.\n\nIntensity of the baked light. Default is `1`.\n\nThe color map. May optionally include an alpha channel, typically combined with [page:Material.transparent .transparent] or [page:Material.alphaTest .alphaTest]. Default is null.\n\nHow much the environment map affects the surface; also see [page:.combine]. The default value is `1` and the valid range is between `0` (no reflections) and `1` (full reflections).\n\nThe index of refraction (IOR) of air (approximately 1) divided by the index of refraction of the material. It is used with environment mapping modes [page:Textures THREE.CubeRefractionMapping] and [page:Textures THREE.EquirectangularRefractionMapping]. The refraction ratio should not exceed `1`. Default is `0.98`.\n\nSpecular map used by the material. Default is null.\n\nRender geometry as wireframe. Default is `false` (i.e. render as flat polygons).\n\nDefine appearance of line ends. Possible values are \"butt\", \"round\" and \"square\". Default is 'round'.\n\n\n\n This corresponds to the [link:https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap 2D Canvas lineCap] property and it is ignored by the [page:WebGLRenderer WebGL] renderer.\n\nDefine appearance of line joints. Possible values are \"round\", \"bevel\" and \"miter\". Default is 'round'.\n\n\n\n This corresponds to the [link:https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineJoin 2D Canvas lineJoin] property and it is ignored by the [page:WebGLRenderer WebGL] renderer.\n\nControls wireframe thickness. Default is `1`.\n\n\n\n Due to limitations of the [link:https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf OpenGL Core Profile] with the [page:WebGLRenderer WebGL] renderer on most platforms linewidth will always be `1` regardless of the set value.\n\nSee the base [page:Material] class for common methods."
    },
    {
        "link": "https://threejs.org/docs#api/en/materials/MeshBasicMaterial.map",
        "document": ""
    },
    {
        "link": "https://threejs.org/docs",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/25108574/update-texture-map-in-threejs",
        "document": "For future viewers, I was able to solve it by using\n\nAs part of my ThreeJS project, I need to change the texture on a mesh. Unfortunately, I can't get Three to update to the new texture.\n\nI've tried all the things mentioned in the following SO questions, but nothing has worked so far:\n• How to update texture in ThreeJS with loaded image data?\n\nThe texture that I am trying to change is and the structure looks like this:\n\ntexture is the one I want to update and these are the following methods I've tried:\n• practically remaking the entire object and replacing that into the scene"
    },
    {
        "link": "https://threejs.org/docs#api/en/textures/Texture.format",
        "document": ""
    }
]