[
    {
        "link": "https://midnight-commander.org",
        "document": "GNU Midnight Commander (or ) is a visual, dual-pane file manager. It is released under the GNU General Public License and therefore qualifies as Free Software.\n\nMidnight Commander is a feature-rich, full-screen, text-mode application that allows you to copy, move, and delete files and entire directory trees, search for files, and execute commands in the subshell. Internal viewer, editor and diff viewer are included.\n\nuses versatile text interface libraries such as ncurses or S-Lang, which allows it to work on a regular console, inside an X Window terminal, over connections, and in all kinds of remote shells.\n\nThe easiest way to install is to use your system package manager:\n\nOur source releases are kindly mirrored by OSU OSL. Our canonical repository is hosted on GitHub. See the Source code page for details.\n\nThe primary way to learn about is to use the context-sensitive online help available via .\n\nWe also have extensive manual pages, which are the primary source of official documentation:\n• For support, see the Communication page.\n• To contribute to , proceed to the \"Development\" section.\n• Release notes for the development version are collected on the wiki."
    },
    {
        "link": "https://hamwaves.com/cli/doc/mc.pdf",
        "document": ""
    },
    {
        "link": "https://enos.itcollege.ee/~edmund/osadmin/materials/linux-cheatsheets/mc/lc-mc.pdf",
        "document": ""
    },
    {
        "link": "https://midnight-commander.org/wiki/doc/faq",
        "document": ""
    },
    {
        "link": "https://linuxcommand.org/lc3_adv_mc.php",
        "document": "At the beginning of Chapter 4 in TLCL there is a discussion of GUI-based file managers versus the traditional command line tools for file manipulation such as , , and . While many common file manipulations are easily done with a graphical file manager, the command line tools provide additional power and flexibility.\n\nIn this adventure we will look at Midnight Commander, a character-based directory browser and file manager that bridges the two worlds of the familiar graphical file manager and the common command line tools.\n\nThe design of Midnight Commander is based on a common concept in file managers: dual directory panes where the listings of two directories are shown at the same time. The idea is that files are moved or copied from the directory shown in one pane to the directory shown in the other. Midnight Commander can do this, and much, much more.\n\nMidnight Commander is quite powerful and boasts an extensive set of features:\n• None Performs all the common file and directory manipulations such as copying, moving, renaming, linking, and deleting.\n• None Allows manipulation of file and directory permissions.\n• None Can treat remote systems (via FTP or SSH) as though they were local directories.\n• None Can treat archive files (like .tar and .zip) as though they were local directories.\n• None Allows creation of a user-defined “hotlist” of frequently used directories.\n• None Can search for files based on file name or file contents, and treat the search results like a directory.\n\nMidnight Commander is part of the GNU project. It is installed by default in some Linux distributions, and is almost always available in every distribution’s software repositories as the package “mc”.\n\nTo start Midnight Commander, enter the command followed optionally by either 1 or 2 directories to browse at start up.\n• The center portion of the screen is dominated by two large directory panels. One of the two panels (called the current panel) is active at any one time. To change which panel is the current panel, press the key.\n• The bottom line on the display contains function key (F1-F10) shortcuts to the most commonly used functions.\n• The top line of the display contains a set of pull-down menus. These can be activated by pressing the key.\n• Just above the function key labels there is a shell prompt. Commands can be entered in the usual manner. One especially useful command is followed by a directory pathname. This will change the directory shown in the current directory panel.\n• At the very bottom of the directory panel and above the command line is the mini-status line. This area is used to display supplemental information about the currently selected item such as the targets of symbolic links.\n\nUsing the Keyboard and Mouse\n\nBeing a character-based application with a lot of features means Midnight Commander has a lot of keyboard commands, some of which it shares with other applications; others are unique. This makes Midnight Commander a bit challenging to learn. Fortunately, Midnight Commander also supports mouse input on most terminal emulators (and on the console if the package is installed), so it’s easy to pick up the basics. Learning the keyboard commands is needed to take full advantage of the program’s features, however.\n\nAnother issue when using the keyboard with Midnight Commander is interference from the window manager and the terminal emulator itself. Many of the function keys and Alt-key combinations that Midnight Commander uses are intercepted for other purposes by the terminal and window manager.\n\nTo work around this problem, Midnight Commander allows the key to function as a Meta-key. In cases where a function key or Alt-key combination is not available due to interference from outside programs, use the key instead. For example, to input the key, press and release the key followed by the “1” key (use “0” for ). The same method works with troublesome Alt-key combinations. For example, to enter , press and release the key followed by the “t” key. To close dialog boxes in Midnight Commander, press the key twice.\n\nBefore we start performing file operations, it’s important to learn how to use the directory panels and navigate the file system.\n\nAs we can see, there are two directory panels, the left panel and the right panel. At any one time, one of the panels is active and is called the current panel. The other panel is conveniently called the other panel in the Midnight Commander documentation.\n\nThe current panel can be identified by the highlighted bar in the directory listing, which can be moved up and down with the arrow keys, , , etc. Any file or directory which is highlighted is said to be selected.\n\nSelect a directory and press . The current directory panel will change to the selected directory. Highlighting the topmost item in the listing selects the parent directory. It is also possible to change directories directly on the command line below the directory panels. To do so, simply enter followed by a path name as usual.\n\nThe directory listing can be displayed in several different formats. Pressing cycles through them. There is a dual column format, a format resembling the output of , and others.\n\nThere is also an “information mode.” This will display detailed file system information in the other panel about the selected item in the current panel. To invoke this mode, type . To return the other panel to its normal state, type again.\n\nSetting the Directory on the Other Panel\n\nIt is often useful to select a directory in the current panel and have its contents listed on the other panel; for example, when moving files from a parent directory into a subdirectory. To do this, select a directory and type . To force the other panel to list the same directory as the current panel, type .\n\nMidnight Commander can store a list of frequently visited directories. This “hotlist” can displayed by pressing .\n\nTo add a directory to the hotlist while browsing, select a directory and type .\n\nEach directory panel maintains a list of directories that it has displayed. To access this list, type . From the list, a directory can be selected for browsing. Even without the history list display, we can traverse the history list forward and backward by using the and keys respectively.\n\nWe can perform many Midnight Commander operations using the mouse. A directory panel item can be selected by clicking on it and a directory can be opened by double clicking. Likewise, the function key labels and menu bar items can be activated by clicking on them. What is not so apparent is that the directory history can be accessed and traversed. At the top of each directory panel there are small arrows (circled in the image below). Clicking on them will show the directory history (the up arrow) and move forward and backward through the history list (the right and left arrows).\n\nThere is also an arrow to the extreme lower right edge of the command line which reveals the command line history.\n\nAn activity often performed while directory browsing is examining the content of files. Midnight Commander provides a capable file viewer which can be accessed by selecting a file and pressing the key.\n\nAs we can see, when the file viewer is active, the function key labels at the bottom of the screen change to reveal viewer features. Files can be searched and the viewer can quickly go to any position in the file. Most importantly, files can be viewed in either ASCII (regular text) or hexadecimal, for those cases when we need a really detailed view.\n\nIt is also possible to put the other panel into “quick view” mode to view the currently selected file. This is especially nice if we are browsing a directory full of text files and want to rapidly view the files, as each time a new file is selected in the current panel, it’s instantly displayed in the other. To start quick view mode, type .\n\nOnce in quick view mode, we can press and the focus changes to the other panel in quick view mode. This will change the function key labels to a subset of the full file viewer. To exit the quick view mode, press to return to the directory panel and press .\n\nSince we are already viewing files, we will probably want to start editing them too. Midnight Commander accommodates us with the key, which invokes a text editor loaded with the selected file. Midnight Commander can work with the editor of your choice. On Debian-based systems we are prompted to make a selection the first time we press . Debian suggests as the default selection, but various flavors of are also available along with Midnight Commander’s own built-in editor, . We can try out on its own at the command line for a taste of this editor.\n\nWe have already seen how to select a file in the current directory panel by simply moving the highlight, but operating on a single file is not of much use. After all, we can perform those kinds of operations more easily by entering commands directly on the command line. However, we often want to operate on multiple files. This can be accomplished through tagging. When a file is tagged, it is marked for some later operation such as copying. This is why we choose to use a file manager like Midnight Commander. When one or more files are tagged, file operations (such as copying) are performed on the tagged files and selection has no effect.\n\nTo tag an individual file or directory, select it and press the key. To untag it, press the key again.\n\nTo tag a group of files or directories according to a selection criteria, such as a wildcard pattern, press the key. This will display a dialog where the pattern may be specified.\n\nThis dialog stores a history of patterns. To traverse it, use Ctrl up and down arrows.\n\nIt is also possible to un-tag a group of files. Pressing the key will cause a pattern entry dialog to display.\n\nTo explore the basic file manipulation features of Midnight Commander, we need a “playground” like we had in Chapter 4 of TLCL.\n\nThe first step in creating a playground is creating a directory called, aptly enough, . First, we will navigate to our home directory, then press the F7 key.\n\nType “playground” into the dialog and press . Next, we want the other panel to display the contents of the playground directory. To do this, highlight the directory and press .\n\nNow let’s put some files into our playground. Press to switch the current panel to the playground directory panel. We’ll create a couple of subdirectories by repeating what we did to create . Create subdirectories and . Finally, using the command line, we will create a few files:\n\nOkay, here is where things start to get weird.\n\nSelect , then press to display in the other panel. Select the file and press F5 to copy (The F6-RenMov command is similar). We are now presented with this formidable-looking dialog box:\n\nTo see Midnight Commander’s default behavior, just press and is copied into directory (i.e., the file is copied from the directory displayed in current panel to the directory displayed in the other panel).\n\nThat was straightforward, but what if we want to copy to a file in named ? To do this, we select and press F5 again and enter the new filename into the Copy dialog:\n\nAgain, this is pretty straightforward. But let’s say we tagged a group of files and wanted to copy and rename them as they are copied (or moved). How would we do that? Midnight Commander provides a way of doing it, but it’s a little strange.\n\nThe secret is the source mask in the copy dialog. At first glance, it appears that the source mask is simply a file selection wildcard, but first appearances can be deceiving. The mask does filter files as we would expect, but only in a limited way. Unlike the range of wildcards available in the shell, the wildcards in the source mask are limited to “?” (for matching single characters) and \"*\" (for matching multiple characters). What’s more, the wildcards have a special property.\n\nIt works like this: let’s say we had a file name with an embedded space such as “ugly file” and we want to copy (or move) it to as the file “uglyfile”, instead. Using the source mask, we could enter the mask \"* *\" which means break the source file name into two blocks of text separated by a space. This wildcard pattern will match the file , since its name consists of two strings of characters separated by a space. Midnight Commander will associate each block of text with a number starting with 1, so block 1 will contain “ugly” and block 2 will contain “file”. Each block can be referred to by a number as with regular expression grouping. So to create a new file name for our target file without the embedded space, we would specify “\\1\\2” in the “to” field of the copy dialog like so:\n\nThe “?” wildcard behaves the same way. If we make the source mask “???? ????” (which again matches the file ), we now have eight pieces of text that we can rearrange at will. For example, we could make the “to” mask “\\8\\7\\6\\5\\4\\3\\2\\1”, and the resulting file name would be “elifylgu”. Pretty neat.\n\nMidnight Commander can also perform case conversion on file names. To do this, we include some additional escape sequences in the to mask:\n• None \\u Converts the next character to uppercase.\n• None \\U Converts all characters to uppercase until another sequence is encountered.\n• None \\l Converts the next character to lowercase.\n• None \\L Converts all characters to lowercase until another sequence is encountered.\n\nSo if we wanted to change the name to camel case, we could use the mask “\\u\\L\\1\\u\\L\\2” and we would get the name .\n\nMidnight Commander can create both hard and symbolic links. They are created using these 3 keyboard commands which cause a dialog to appear where the details of the link can be specified:\n• None creates a hard link, in the directory shown in the current panel.\n• None creates a symbolic link in the directory shown in the other panel, using an absolute directory path.\n• None creates a symbolic link in the directory shown in the other panel, using a relative directory path.\n\nThe two symbolic link commands are basically the same. They differ only in the fact that the paths suggested in the Symbolic Link dialog are absolute or relative.\n\nWe’ll demonstrate creating a symbolic link by creating a link to . To do this, we select in the current panel and type . The Symbolic Link dialog appears and we can either enter a name for the link or we can accept the program’s suggestion. For the sake of clarity, we will change the name to .\n\nFile modes (i.e., permissions) can be set on the selected or tagged files by typing . Doing so will display a dialog box in which each attribute can be turned on or off. If Midnight Commander is being run with superuser privileges, file ownership can be changed by typing . A dialog will be displayed where the owner and group owner of selected/tagged files can be set.\n\nTo demonstrate changing file modes, we will make executable. First, we will select and then type . The Chmod command dialog will appear, listing the file’s mode settings. By using the arrow keys we can select the check box labeled “execute/search by owner” and toggle its setting by using the space bar.\n\nPressing the key deletes the selected or tagged files and directories. By default, Midnight Commander always prompts the user for confirmation before deletion is performed.\n\nWe’re done with our playground for now, so it’s time to clean up. We will enter at the shell prompt to get the current panel to list our home directory. Next, we will select and press to delete the playground directory.\n\nBeyond basic file manipulation, Midnight Commander offers a number of additional features, some of which are very interesting.\n\nMidnight Commander can treat some types of archive files and remote hosts as though they are local file systems. Using the command at the shell prompt, we can access these.\n\nFor example, we can look at the contents of tar files. To try this out, let’s create a compressed tar file containing the files in the directory. We can do this by entering this command at the shell prompt:\n\nOnce this command completes (there will be some “permission denied” errors but these don’t matter for our purposes), the file will appear among the files in the current panel. If we select this file and press , the contents of the archive will be displayed in the current panel. Notice that the shell prompt does not change as it does with ordinary directories. This is because while the current panel is displaying a list of files like before, Midnight Commander cannot treat the virtual file system in the same way as a real one. For example, we cannot delete files from the tar archive, but we can copy files from the archive to the real file system.\n\nVirtual file systems can also treat remote file systems as local directories. In most versions of Midnight Commander, both FTP and FISH (FIles transferred over SHell) protocols are supported and, in some versions, SMB/CIFS as well.\n\nAs an example, let’s look at the software library FTP site at Georgia Tech, a popular repository for Linux software. Its name is ftp.gtlib.gatech.edu. To connect with directory on this site and browse its files, we enter this command:\n\nSince we don’t have write permission on this site, we cannot modify any any files there, but we can copy files from the remote server to our local file system.\n\nThe FISH protocol is similar. This protocol can be used to communicate with any Unix-like system that runs a secure shell (SSH) server. If we have write permissions on the remote server, we can operate on the remote system’s files as if they were local. This is extremely handy for performing remote administration. The command for FISH protocol looks like this:\n\nMidnight Commander has a useful file search feature. When invoked by pressing , the following dialog will appear:\n\nOn this dialog we can specify: where the search is to begin, a colon-separated list of directories we would like to skip during our search, any restriction on the names of the files to be searched, and the content of the files themselves. This feature is well-suited to searching large trees of source code or configuration files for specific patterns of text. For example, let’s look for every file in that contains the string “bashrc”. To do this, we would fill in the dialog as follows:\n\nOnce the search is completed, we will see a list of files which we can view and/or edit.\n\nThere is a button at the bottom of the search results dialog labeled “Panelize.” If we click it, the search results become the contents of the current panel. From here, we can act on the files just as we can with any others.\n\nIn fact, we can create a panelized list from any command line program that produces a list of path names. For example, the program. To do this, we use Midnight Commander’s “External Panelize” feature. Type and the External Panelize dialog appears:\n\nOn this dialog we see a predefined list of panelized commands. Midnight Commander allows us to store commands for repeated use. Let’s try it by creating a panelized command that searches the system for every file whose name has the extension starting from the current panel directory. Select “Other command” from the list and type the following command into the “Command” field:\n\nAfter typing the command we can either press to execute the command or, for extra fun, we can click the “Add new” button and assign our command a name and save it for future use.\n\nWe may, at any time, move from the Midnight Commander to a full shell session and back again by pressing . The sub-shell is a copy of our normal shell, so whatever environment our usual shell establishes (aliases, shell functions, prompt strings, etc.) will be present in the sub-shell as well. If we start a long-running command in the sub-shell and press , the command is suspended until we return to the sub-shell. Note that once a command is suspended, Midnight Commander cannot execute any further external commands until the suspended command terminates.\n\nSo far we have avoided discussion of the mysterious command. This is the user menu, which may be Midnight Commander’s most powerful and useful feature. The user menu is, as the name suggests, a menu of user-defined commands.\n\nWhen we press the key, Midnight Commander looks for a file named in the current directory. If the file does not exist, Midnight Commander looks for . If that file does not exist, then Midnight Commander falls back to a system-wide menu file named .\n\nThe neat thing about this scheme is that each directory can have its own set of user menu commands, so that we can create commands appropriate to the contents of the current directory. For example, if we have a “Pictures” directory, we can create commands for processing images; if we have a directory full of HTML files, we can create commands for managing a web site, and so on.\n\nSo, after we press the first time, we are presented with the default user menu that looks something like this:\n\nThe default user menu contains several example entries. These are by no means set in stone. We are encouraged to edit the menu and create our own entries. The menu file is ordinary text and it can be edited with any text editor, but Midnight Commander provides a menu editing feature found in the “Command” pulldown menu. The entry is called “Edit menu file.”\n\nIf we select this entry, Midnight Commander offers us a choice of “Local” and “User.” The Local entry allows us to edit the file in the current directory while selecting User will cause us to edit the file. Note that if we select Local and the current directory does not contain a menu file, Midnight Commander will copy the default menu file into current directory as a starting point for our editing.\n\nSome parts of the user menu file format are pretty simple; other parts, not so much. We’ll start with the simple parts first.\n\nA menu file consists of one or more entries. Each entry contains:\n• None A single character (usually a letter) that will act as a hot key for the entry when the menu is displayed.\n• None Following the hot key, on the same line, is the description of the menu entry as it will appear on the menu.\n• None On the following lines are one or more commands to be performed when the menu entry is selected. These are ordinary shell commands. Any number of commands may be specified, so quite sophisticated operations are possible. Each command must be indented by at least one space or tab.\n• None A blank line to separate one menu entry from the next.\n• None Comments may appear on their own lines. Each comment line starts with a character.\n\nHere is an example user menu entry that creates an HTML template in the current directory:\n\nNotice the absence of the option on the commands used in this example. Normally, the option is required to interpret the backslash escape sequences like and . The reason they are omitted here is that Midnight Commander does not use as the shell when it executes user menu commands. It uses instead. Different distributions use different shell programs to emulate . For example, Red Hat-based distributions use but Debian-based distributions like Ubuntu and Raspberry Pi OS use instead. is a compact shell program that is compatible but lacks many of the features found in . The man page describes the features of that shell.\n\nThis command will reveal which program is actually providing the emulation (i.e., is symbolically linked to ):\n\nWith that bit of silliness out of the way, let’s look at how we can get a user menu entry to act on currently selected or tagged files. First, it helps to understand a little about how Midnight Commander executes user menu commands. It’s done by writing the commands to a file (essentially a shell script) and then launching to execute the contents of the file. During the process of writing the file, Midnight Commander performs macro substitution, replacing embedded symbols in the menu entry with alternate values. These macros are single alphabetic characters preceded by a percent sign. When Midnight Commander encounters one of these macros, it substitutes the value the macro represents. Here are the most commonly used macros:\n\nLet’s say we wanted to create a user menu entry that would resize a JPEG image using the ever-handy program from the ImageMagick suite. Using macros, we could write a menu entry like this, which would act on the currently selected file:\n\nUsing the and macros, we are able to construct a new output file name for the resized image. There is still one potential problem with this menu entry. It’s possible to run the menu entry command on a directory, or a non-image file (Doing so would not be good).\n\nWe could include some extra code to ensure that is actually the name of an image file, but Midnight Commander also provides a method for only displaying menu entries appropriate to the currently selected (or tagged) file(s).\n\nMidnight Commander supports two types of conditionals that affect the behavior of a menu entry. The first, called an addition conditional determines if a menu entry is displayed. The second, called default conditional sets the default entry on a menu.\n\nA conditional is added to a menu entry just before the first line. A conditional starts with either a (for an addition) or a (for a default) followed by one or more sub-conditions. Sub-conditions are separated by either a (meaning or) or a (meaning and) allowing us to express some complex logic. It is also possible to have a combined addition and default conditional by beginning the conditional with or . Two separate conditionals, one addition and one default, are also permitted preceding a menu entry.\n\nLet’s look at sub-conditions. They consist of one of the following:\n\npattern is either a shell pattern (i.e., wildcards) or a regular expression according to the global setting configured in the Options/Configuration dialog. This setting can be overridden by adding as the first line of the menu file. A value of 1 forces use of shell patterns, while a value of 0 forces regular expressions instead.\n\ntype is one or more of the following:\n\nWhile this seems really complicated, it’s not really that bad. To change our image resizing entry to only appear when the currently selected file has the extension or , we would add one line to the beginning of the entry (regular expressions are used in this example):\n\nThe conditional begins with meaning that it’s an addition condition. It is followed by two sub-conditions. The separating them signifies an “or” relationship between the two. So, the finished conditional means “display this entry if the selected file name ends with or the selected file name ends with .”\n\nThe default menu file contains many more examples of conditionals. It’s worth a look.\n\nEven though it takes a little time to learn, Midnight Commander offers a lot of features and facilities that make file management easier when using the command line. This is particularly true when operating on a remote system where a graphical user interface may not be available. The user menu feature is especially good for specialized file management tasks. With a little configuration, Midnight Commander can become a powerful tool in our command line arsenal.\n• None The Midnight Commander man page is extensive and discusses even more features than we have covered here.\n• None midnight-commander.org is the official site for the project."
    },
    {
        "link": "https://forum.openmediavault.org/index.php?thread/12723-midnight-commander/",
        "document": "In MC you simply open both folders in the left and right pane.\n\nSelect all the files/folders you want to copy or move using the ins key or right clicking them.\n\nThen Decide if you want to copy or move. Copy will make a copy of the files in the directory you have open in the other pane. Move will move the files to the other pane and remove them from the source."
    },
    {
        "link": "https://linuxcommand.org/lc3_adv_mc.php",
        "document": "At the beginning of Chapter 4 in TLCL there is a discussion of GUI-based file managers versus the traditional command line tools for file manipulation such as , , and . While many common file manipulations are easily done with a graphical file manager, the command line tools provide additional power and flexibility.\n\nIn this adventure we will look at Midnight Commander, a character-based directory browser and file manager that bridges the two worlds of the familiar graphical file manager and the common command line tools.\n\nThe design of Midnight Commander is based on a common concept in file managers: dual directory panes where the listings of two directories are shown at the same time. The idea is that files are moved or copied from the directory shown in one pane to the directory shown in the other. Midnight Commander can do this, and much, much more.\n\nMidnight Commander is quite powerful and boasts an extensive set of features:\n• None Performs all the common file and directory manipulations such as copying, moving, renaming, linking, and deleting.\n• None Allows manipulation of file and directory permissions.\n• None Can treat remote systems (via FTP or SSH) as though they were local directories.\n• None Can treat archive files (like .tar and .zip) as though they were local directories.\n• None Allows creation of a user-defined “hotlist” of frequently used directories.\n• None Can search for files based on file name or file contents, and treat the search results like a directory.\n\nMidnight Commander is part of the GNU project. It is installed by default in some Linux distributions, and is almost always available in every distribution’s software repositories as the package “mc”.\n\nTo start Midnight Commander, enter the command followed optionally by either 1 or 2 directories to browse at start up.\n• The center portion of the screen is dominated by two large directory panels. One of the two panels (called the current panel) is active at any one time. To change which panel is the current panel, press the key.\n• The bottom line on the display contains function key (F1-F10) shortcuts to the most commonly used functions.\n• The top line of the display contains a set of pull-down menus. These can be activated by pressing the key.\n• Just above the function key labels there is a shell prompt. Commands can be entered in the usual manner. One especially useful command is followed by a directory pathname. This will change the directory shown in the current directory panel.\n• At the very bottom of the directory panel and above the command line is the mini-status line. This area is used to display supplemental information about the currently selected item such as the targets of symbolic links.\n\nUsing the Keyboard and Mouse\n\nBeing a character-based application with a lot of features means Midnight Commander has a lot of keyboard commands, some of which it shares with other applications; others are unique. This makes Midnight Commander a bit challenging to learn. Fortunately, Midnight Commander also supports mouse input on most terminal emulators (and on the console if the package is installed), so it’s easy to pick up the basics. Learning the keyboard commands is needed to take full advantage of the program’s features, however.\n\nAnother issue when using the keyboard with Midnight Commander is interference from the window manager and the terminal emulator itself. Many of the function keys and Alt-key combinations that Midnight Commander uses are intercepted for other purposes by the terminal and window manager.\n\nTo work around this problem, Midnight Commander allows the key to function as a Meta-key. In cases where a function key or Alt-key combination is not available due to interference from outside programs, use the key instead. For example, to input the key, press and release the key followed by the “1” key (use “0” for ). The same method works with troublesome Alt-key combinations. For example, to enter , press and release the key followed by the “t” key. To close dialog boxes in Midnight Commander, press the key twice.\n\nBefore we start performing file operations, it’s important to learn how to use the directory panels and navigate the file system.\n\nAs we can see, there are two directory panels, the left panel and the right panel. At any one time, one of the panels is active and is called the current panel. The other panel is conveniently called the other panel in the Midnight Commander documentation.\n\nThe current panel can be identified by the highlighted bar in the directory listing, which can be moved up and down with the arrow keys, , , etc. Any file or directory which is highlighted is said to be selected.\n\nSelect a directory and press . The current directory panel will change to the selected directory. Highlighting the topmost item in the listing selects the parent directory. It is also possible to change directories directly on the command line below the directory panels. To do so, simply enter followed by a path name as usual.\n\nThe directory listing can be displayed in several different formats. Pressing cycles through them. There is a dual column format, a format resembling the output of , and others.\n\nThere is also an “information mode.” This will display detailed file system information in the other panel about the selected item in the current panel. To invoke this mode, type . To return the other panel to its normal state, type again.\n\nSetting the Directory on the Other Panel\n\nIt is often useful to select a directory in the current panel and have its contents listed on the other panel; for example, when moving files from a parent directory into a subdirectory. To do this, select a directory and type . To force the other panel to list the same directory as the current panel, type .\n\nMidnight Commander can store a list of frequently visited directories. This “hotlist” can displayed by pressing .\n\nTo add a directory to the hotlist while browsing, select a directory and type .\n\nEach directory panel maintains a list of directories that it has displayed. To access this list, type . From the list, a directory can be selected for browsing. Even without the history list display, we can traverse the history list forward and backward by using the and keys respectively.\n\nWe can perform many Midnight Commander operations using the mouse. A directory panel item can be selected by clicking on it and a directory can be opened by double clicking. Likewise, the function key labels and menu bar items can be activated by clicking on them. What is not so apparent is that the directory history can be accessed and traversed. At the top of each directory panel there are small arrows (circled in the image below). Clicking on them will show the directory history (the up arrow) and move forward and backward through the history list (the right and left arrows).\n\nThere is also an arrow to the extreme lower right edge of the command line which reveals the command line history.\n\nAn activity often performed while directory browsing is examining the content of files. Midnight Commander provides a capable file viewer which can be accessed by selecting a file and pressing the key.\n\nAs we can see, when the file viewer is active, the function key labels at the bottom of the screen change to reveal viewer features. Files can be searched and the viewer can quickly go to any position in the file. Most importantly, files can be viewed in either ASCII (regular text) or hexadecimal, for those cases when we need a really detailed view.\n\nIt is also possible to put the other panel into “quick view” mode to view the currently selected file. This is especially nice if we are browsing a directory full of text files and want to rapidly view the files, as each time a new file is selected in the current panel, it’s instantly displayed in the other. To start quick view mode, type .\n\nOnce in quick view mode, we can press and the focus changes to the other panel in quick view mode. This will change the function key labels to a subset of the full file viewer. To exit the quick view mode, press to return to the directory panel and press .\n\nSince we are already viewing files, we will probably want to start editing them too. Midnight Commander accommodates us with the key, which invokes a text editor loaded with the selected file. Midnight Commander can work with the editor of your choice. On Debian-based systems we are prompted to make a selection the first time we press . Debian suggests as the default selection, but various flavors of are also available along with Midnight Commander’s own built-in editor, . We can try out on its own at the command line for a taste of this editor.\n\nWe have already seen how to select a file in the current directory panel by simply moving the highlight, but operating on a single file is not of much use. After all, we can perform those kinds of operations more easily by entering commands directly on the command line. However, we often want to operate on multiple files. This can be accomplished through tagging. When a file is tagged, it is marked for some later operation such as copying. This is why we choose to use a file manager like Midnight Commander. When one or more files are tagged, file operations (such as copying) are performed on the tagged files and selection has no effect.\n\nTo tag an individual file or directory, select it and press the key. To untag it, press the key again.\n\nTo tag a group of files or directories according to a selection criteria, such as a wildcard pattern, press the key. This will display a dialog where the pattern may be specified.\n\nThis dialog stores a history of patterns. To traverse it, use Ctrl up and down arrows.\n\nIt is also possible to un-tag a group of files. Pressing the key will cause a pattern entry dialog to display.\n\nTo explore the basic file manipulation features of Midnight Commander, we need a “playground” like we had in Chapter 4 of TLCL.\n\nThe first step in creating a playground is creating a directory called, aptly enough, . First, we will navigate to our home directory, then press the F7 key.\n\nType “playground” into the dialog and press . Next, we want the other panel to display the contents of the playground directory. To do this, highlight the directory and press .\n\nNow let’s put some files into our playground. Press to switch the current panel to the playground directory panel. We’ll create a couple of subdirectories by repeating what we did to create . Create subdirectories and . Finally, using the command line, we will create a few files:\n\nOkay, here is where things start to get weird.\n\nSelect , then press to display in the other panel. Select the file and press F5 to copy (The F6-RenMov command is similar). We are now presented with this formidable-looking dialog box:\n\nTo see Midnight Commander’s default behavior, just press and is copied into directory (i.e., the file is copied from the directory displayed in current panel to the directory displayed in the other panel).\n\nThat was straightforward, but what if we want to copy to a file in named ? To do this, we select and press F5 again and enter the new filename into the Copy dialog:\n\nAgain, this is pretty straightforward. But let’s say we tagged a group of files and wanted to copy and rename them as they are copied (or moved). How would we do that? Midnight Commander provides a way of doing it, but it’s a little strange.\n\nThe secret is the source mask in the copy dialog. At first glance, it appears that the source mask is simply a file selection wildcard, but first appearances can be deceiving. The mask does filter files as we would expect, but only in a limited way. Unlike the range of wildcards available in the shell, the wildcards in the source mask are limited to “?” (for matching single characters) and \"*\" (for matching multiple characters). What’s more, the wildcards have a special property.\n\nIt works like this: let’s say we had a file name with an embedded space such as “ugly file” and we want to copy (or move) it to as the file “uglyfile”, instead. Using the source mask, we could enter the mask \"* *\" which means break the source file name into two blocks of text separated by a space. This wildcard pattern will match the file , since its name consists of two strings of characters separated by a space. Midnight Commander will associate each block of text with a number starting with 1, so block 1 will contain “ugly” and block 2 will contain “file”. Each block can be referred to by a number as with regular expression grouping. So to create a new file name for our target file without the embedded space, we would specify “\\1\\2” in the “to” field of the copy dialog like so:\n\nThe “?” wildcard behaves the same way. If we make the source mask “???? ????” (which again matches the file ), we now have eight pieces of text that we can rearrange at will. For example, we could make the “to” mask “\\8\\7\\6\\5\\4\\3\\2\\1”, and the resulting file name would be “elifylgu”. Pretty neat.\n\nMidnight Commander can also perform case conversion on file names. To do this, we include some additional escape sequences in the to mask:\n• None \\u Converts the next character to uppercase.\n• None \\U Converts all characters to uppercase until another sequence is encountered.\n• None \\l Converts the next character to lowercase.\n• None \\L Converts all characters to lowercase until another sequence is encountered.\n\nSo if we wanted to change the name to camel case, we could use the mask “\\u\\L\\1\\u\\L\\2” and we would get the name .\n\nMidnight Commander can create both hard and symbolic links. They are created using these 3 keyboard commands which cause a dialog to appear where the details of the link can be specified:\n• None creates a hard link, in the directory shown in the current panel.\n• None creates a symbolic link in the directory shown in the other panel, using an absolute directory path.\n• None creates a symbolic link in the directory shown in the other panel, using a relative directory path.\n\nThe two symbolic link commands are basically the same. They differ only in the fact that the paths suggested in the Symbolic Link dialog are absolute or relative.\n\nWe’ll demonstrate creating a symbolic link by creating a link to . To do this, we select in the current panel and type . The Symbolic Link dialog appears and we can either enter a name for the link or we can accept the program’s suggestion. For the sake of clarity, we will change the name to .\n\nFile modes (i.e., permissions) can be set on the selected or tagged files by typing . Doing so will display a dialog box in which each attribute can be turned on or off. If Midnight Commander is being run with superuser privileges, file ownership can be changed by typing . A dialog will be displayed where the owner and group owner of selected/tagged files can be set.\n\nTo demonstrate changing file modes, we will make executable. First, we will select and then type . The Chmod command dialog will appear, listing the file’s mode settings. By using the arrow keys we can select the check box labeled “execute/search by owner” and toggle its setting by using the space bar.\n\nPressing the key deletes the selected or tagged files and directories. By default, Midnight Commander always prompts the user for confirmation before deletion is performed.\n\nWe’re done with our playground for now, so it’s time to clean up. We will enter at the shell prompt to get the current panel to list our home directory. Next, we will select and press to delete the playground directory.\n\nBeyond basic file manipulation, Midnight Commander offers a number of additional features, some of which are very interesting.\n\nMidnight Commander can treat some types of archive files and remote hosts as though they are local file systems. Using the command at the shell prompt, we can access these.\n\nFor example, we can look at the contents of tar files. To try this out, let’s create a compressed tar file containing the files in the directory. We can do this by entering this command at the shell prompt:\n\nOnce this command completes (there will be some “permission denied” errors but these don’t matter for our purposes), the file will appear among the files in the current panel. If we select this file and press , the contents of the archive will be displayed in the current panel. Notice that the shell prompt does not change as it does with ordinary directories. This is because while the current panel is displaying a list of files like before, Midnight Commander cannot treat the virtual file system in the same way as a real one. For example, we cannot delete files from the tar archive, but we can copy files from the archive to the real file system.\n\nVirtual file systems can also treat remote file systems as local directories. In most versions of Midnight Commander, both FTP and FISH (FIles transferred over SHell) protocols are supported and, in some versions, SMB/CIFS as well.\n\nAs an example, let’s look at the software library FTP site at Georgia Tech, a popular repository for Linux software. Its name is ftp.gtlib.gatech.edu. To connect with directory on this site and browse its files, we enter this command:\n\nSince we don’t have write permission on this site, we cannot modify any any files there, but we can copy files from the remote server to our local file system.\n\nThe FISH protocol is similar. This protocol can be used to communicate with any Unix-like system that runs a secure shell (SSH) server. If we have write permissions on the remote server, we can operate on the remote system’s files as if they were local. This is extremely handy for performing remote administration. The command for FISH protocol looks like this:\n\nMidnight Commander has a useful file search feature. When invoked by pressing , the following dialog will appear:\n\nOn this dialog we can specify: where the search is to begin, a colon-separated list of directories we would like to skip during our search, any restriction on the names of the files to be searched, and the content of the files themselves. This feature is well-suited to searching large trees of source code or configuration files for specific patterns of text. For example, let’s look for every file in that contains the string “bashrc”. To do this, we would fill in the dialog as follows:\n\nOnce the search is completed, we will see a list of files which we can view and/or edit.\n\nThere is a button at the bottom of the search results dialog labeled “Panelize.” If we click it, the search results become the contents of the current panel. From here, we can act on the files just as we can with any others.\n\nIn fact, we can create a panelized list from any command line program that produces a list of path names. For example, the program. To do this, we use Midnight Commander’s “External Panelize” feature. Type and the External Panelize dialog appears:\n\nOn this dialog we see a predefined list of panelized commands. Midnight Commander allows us to store commands for repeated use. Let’s try it by creating a panelized command that searches the system for every file whose name has the extension starting from the current panel directory. Select “Other command” from the list and type the following command into the “Command” field:\n\nAfter typing the command we can either press to execute the command or, for extra fun, we can click the “Add new” button and assign our command a name and save it for future use.\n\nWe may, at any time, move from the Midnight Commander to a full shell session and back again by pressing . The sub-shell is a copy of our normal shell, so whatever environment our usual shell establishes (aliases, shell functions, prompt strings, etc.) will be present in the sub-shell as well. If we start a long-running command in the sub-shell and press , the command is suspended until we return to the sub-shell. Note that once a command is suspended, Midnight Commander cannot execute any further external commands until the suspended command terminates.\n\nSo far we have avoided discussion of the mysterious command. This is the user menu, which may be Midnight Commander’s most powerful and useful feature. The user menu is, as the name suggests, a menu of user-defined commands.\n\nWhen we press the key, Midnight Commander looks for a file named in the current directory. If the file does not exist, Midnight Commander looks for . If that file does not exist, then Midnight Commander falls back to a system-wide menu file named .\n\nThe neat thing about this scheme is that each directory can have its own set of user menu commands, so that we can create commands appropriate to the contents of the current directory. For example, if we have a “Pictures” directory, we can create commands for processing images; if we have a directory full of HTML files, we can create commands for managing a web site, and so on.\n\nSo, after we press the first time, we are presented with the default user menu that looks something like this:\n\nThe default user menu contains several example entries. These are by no means set in stone. We are encouraged to edit the menu and create our own entries. The menu file is ordinary text and it can be edited with any text editor, but Midnight Commander provides a menu editing feature found in the “Command” pulldown menu. The entry is called “Edit menu file.”\n\nIf we select this entry, Midnight Commander offers us a choice of “Local” and “User.” The Local entry allows us to edit the file in the current directory while selecting User will cause us to edit the file. Note that if we select Local and the current directory does not contain a menu file, Midnight Commander will copy the default menu file into current directory as a starting point for our editing.\n\nSome parts of the user menu file format are pretty simple; other parts, not so much. We’ll start with the simple parts first.\n\nA menu file consists of one or more entries. Each entry contains:\n• None A single character (usually a letter) that will act as a hot key for the entry when the menu is displayed.\n• None Following the hot key, on the same line, is the description of the menu entry as it will appear on the menu.\n• None On the following lines are one or more commands to be performed when the menu entry is selected. These are ordinary shell commands. Any number of commands may be specified, so quite sophisticated operations are possible. Each command must be indented by at least one space or tab.\n• None A blank line to separate one menu entry from the next.\n• None Comments may appear on their own lines. Each comment line starts with a character.\n\nHere is an example user menu entry that creates an HTML template in the current directory:\n\nNotice the absence of the option on the commands used in this example. Normally, the option is required to interpret the backslash escape sequences like and . The reason they are omitted here is that Midnight Commander does not use as the shell when it executes user menu commands. It uses instead. Different distributions use different shell programs to emulate . For example, Red Hat-based distributions use but Debian-based distributions like Ubuntu and Raspberry Pi OS use instead. is a compact shell program that is compatible but lacks many of the features found in . The man page describes the features of that shell.\n\nThis command will reveal which program is actually providing the emulation (i.e., is symbolically linked to ):\n\nWith that bit of silliness out of the way, let’s look at how we can get a user menu entry to act on currently selected or tagged files. First, it helps to understand a little about how Midnight Commander executes user menu commands. It’s done by writing the commands to a file (essentially a shell script) and then launching to execute the contents of the file. During the process of writing the file, Midnight Commander performs macro substitution, replacing embedded symbols in the menu entry with alternate values. These macros are single alphabetic characters preceded by a percent sign. When Midnight Commander encounters one of these macros, it substitutes the value the macro represents. Here are the most commonly used macros:\n\nLet’s say we wanted to create a user menu entry that would resize a JPEG image using the ever-handy program from the ImageMagick suite. Using macros, we could write a menu entry like this, which would act on the currently selected file:\n\nUsing the and macros, we are able to construct a new output file name for the resized image. There is still one potential problem with this menu entry. It’s possible to run the menu entry command on a directory, or a non-image file (Doing so would not be good).\n\nWe could include some extra code to ensure that is actually the name of an image file, but Midnight Commander also provides a method for only displaying menu entries appropriate to the currently selected (or tagged) file(s).\n\nMidnight Commander supports two types of conditionals that affect the behavior of a menu entry. The first, called an addition conditional determines if a menu entry is displayed. The second, called default conditional sets the default entry on a menu.\n\nA conditional is added to a menu entry just before the first line. A conditional starts with either a (for an addition) or a (for a default) followed by one or more sub-conditions. Sub-conditions are separated by either a (meaning or) or a (meaning and) allowing us to express some complex logic. It is also possible to have a combined addition and default conditional by beginning the conditional with or . Two separate conditionals, one addition and one default, are also permitted preceding a menu entry.\n\nLet’s look at sub-conditions. They consist of one of the following:\n\npattern is either a shell pattern (i.e., wildcards) or a regular expression according to the global setting configured in the Options/Configuration dialog. This setting can be overridden by adding as the first line of the menu file. A value of 1 forces use of shell patterns, while a value of 0 forces regular expressions instead.\n\ntype is one or more of the following:\n\nWhile this seems really complicated, it’s not really that bad. To change our image resizing entry to only appear when the currently selected file has the extension or , we would add one line to the beginning of the entry (regular expressions are used in this example):\n\nThe conditional begins with meaning that it’s an addition condition. It is followed by two sub-conditions. The separating them signifies an “or” relationship between the two. So, the finished conditional means “display this entry if the selected file name ends with or the selected file name ends with .”\n\nThe default menu file contains many more examples of conditionals. It’s worth a look.\n\nEven though it takes a little time to learn, Midnight Commander offers a lot of features and facilities that make file management easier when using the command line. This is particularly true when operating on a remote system where a graphical user interface may not be available. The user menu feature is especially good for specialized file management tasks. With a little configuration, Midnight Commander can become a powerful tool in our command line arsenal.\n• None The Midnight Commander man page is extensive and discusses even more features than we have covered here.\n• None midnight-commander.org is the official site for the project."
    },
    {
        "link": "https://linode.com/docs/guides/how-to-install-midnight-commander",
        "document": "This credit will be applied to any valid services used during your first days.\n\nFor beginners, managing files on their Linux servers from the command line can be intimidating, time-consuming, and sometimes even risky. More experienced users might want to switch to better suited tools for dealing with files and directories in many different locations. One tool that can help both Linux newbies and veterans is Midnight Commander, a Text User Interface (TUI) file manager.\n\nA TUI facilitates interaction between users and their systems in a visually oriented way instead of typing commands. While lacking in visual components compared to a graphical user interface (GUI), a TUI offers windows, panels, menus, and mouse support.\n\nThe methods in this tutorial have been tested on Debian 9. There is no special requirement to install Midnight Commander, and it works on all Linux distributions. While this file manager should work in almost identically on all Linux distributions, a particular distro may not package the exact same Midnight Commander version (4.8.18, in this case). This may result in small behavioral differences on other operating systems.\n• None On CentOS, the command is:\n• None To start Midnight Commander with the command prompt: Keep in mind that running as root is not a good idea unless you need to modify or delete files/directories owned by this user. In most cases, reading or copying objects owned by root doesn’t require special privileges, so try to run as a regular user.\n• None By default, Midnight Commander uses a blue background color and highlights important menu items. To turn off color:\n• None The file manager is vertically split into two panels. The logic behind this is that copy and move operations are done from one place to another. At the bottom, you will see ten labeled rectangles: The numbers preceding each label represent the function key you need to press to perform those actions. For example pressing F10 will quit the program and return to your shell.\n• None Above those ten buttons, you’ll see . This allows you to type commands in your current working directory. Try it now, type: After you press ENTER, you’ll see a new file appear in your active panel. Now, delete it without typing any commands. Use the arrow keys, pressing UP or DOWN until the file named is highlighted. Now press F8. A dialog box pops up and asks for confirmation. Press ENTER. If you press F8 by mistake this gives you chance to cancel the action.\n• None At the top of the screen, you can see a colored bar with text: Left, File, Command, Options, Right. These are drop-down menus that can be accessed by pressing F9 and then navigating with your arrow keys. Press F9 and then the DOWN arrow key multiple times until Tree is highlighted. Press ENTER. The panel has now changed to tree view.\n• None Once you hit the F9 key, some letters get highlighted, e.g., C in Command. These are keys that you can press to navigate the menus faster. Let’s return to your previous view: press F9 then l (L) and then g to get back to File listing. When an input field is selected, hold ALT down before pressing on the highlighted letter.\n• None Shortcut keys are a combination of keys pressed together that allow you to quickly access specific actions. For example, try pressing CTRL+O. This lets you focus on the command line or see previous command output while Midnight Commander runs in the background. You can quickly return to its interface by hitting the same key combination.\n• None You can also use your mouse pointer to click on interface elements.\n\nUse the Two Panels to Work with Files and Directories\n• None Switch between the left and the right vertical panels by pressing TAB.\n• None Close Midnight Commander by pressing F10. Open a temporary working directory in both panels: This is a directory containing temporary files that will be deleted at next boot, so we can experiment freely here.\n• None Create a directory by pressing F7. Name this .\n• None Using your arrow keys, navigate to and press ENTER (after creating a directory, this should already be highlighted).\n• None Say you want to copy three files from to . Use the arrow keys to navigate to . Once it’s highlighted press INSERT three times. Pressing F5 and then ENTER will copy all three files to the working directory opened in the opposite panel. Alternate ways to make selections are: holding down SHIFT and then pressing UP or DOWN arrow key.\n• to deselect all objects that match a pattern (e.g., typing will deselect every file or directory whose names start with “f”) In these patterns, stands for zero or more characters while stands for one character. So would match , , or anything else starting with “f” and ending with “e”. would match , , but will not match . There needs to be exactly one character between “a” and “c.” If you prefer to use the mouse, then right clicking will make individual selections. Holding down the right click and dragging will select multiple entries.\n• None Pressing F4 will open a file in the default editor. On Debian you will get this output if you never used an editor before: Select an editor. To change later, run 'select-editor'. 1. /bin/nano <---- easiest 2. /usr/bin/mcedit 3. /usr/bin/vim.basic 4. /usr/bin/vim.tiny Choose 1-4 [1]: It’s recommended you choose 2 here since integrates with Midnight Commander and is easier to use than . A large amount of functions can be accessed by pressing F9 to activate the editor’s menu. Press F10 to exit the utility or ESC two times. Actions can be cancelled in MC by pressing the ESC key twice.\n• None Accessing the parent directory or “going up” one level can be a bit tedious because you have to scroll/navigate all the way up to the /.. entry. Press F9, followed by o and then p. This will take you to Panel options where you can activate Lynx-like motion. (Highlight it and press space or click it with your mouse.) With this on, you can now go up a directory by simply pressing your LEFT arrow key and enter a directory by pressing the RIGHT arrow key.\n• None Another tool that can save you time is Midnight Commander’s user menu. Go back to where you created nine files. Press F2 and bring up the user menu. Select Compress the current subdirectory (tar.gz). After you choose the name for the archive, this will be created in (one level up from the directory being compressed). If you highlight the .tar.gz file and press ENTER you’ll notice it will open like a regular directory. This allows you to browse archives and extract files by simply copying them (F5) to the opposite panel’s working directory.\n• None To find out the size of a directory (actually, the size of all the files it contains), highlight the directory and then press CTRL+SPACE.\n• None To search, go up in your directory tree until you reach the top level, , called root directory. Now press F9, then c, followed by f. After the Find File dialog opens, type . This will find any accessible gzip archive on the system. In the results dialog, press l (L) for Panelize. All the results will be fed to one of your panels so you can easily browse, copy, view and so on. If you enter a directory from that list, you lose the list of found files, but you can easily return to it with F9, l (L) then z (to select Panelize from the Left menu).\n• None Managing files is not always done locally. Midnight Commander also supports accessing remote filesystems through SSH’s Secure File Transfer Protocol, SFTP. This way you can easily transfer files between servers. Press F9, followed by l (L), then select the SFTP link menu entry. In the dialog box titled SFTP to machine enter . Replace with the username you have created on the remote machine and with the IP address of your server. This will work only if the server at the other end accepts password logins. If you’re logging in with SSH keys, then you’ll first need to create and/or edit . It could look something like this: You can choose whatever you want as the Host value, it’s only an identifier. IdentityFile is the path to your private SSH key. After the config file is setup, access your SFTP server by typing the identifier value you set after Host in the SFTP to machine dialog. In this example, enter .\n\nMidnight Commander has many more features than those presented here. Before making many customizations to the default settings, it’s a good idea to backup your settings by copying to your local computer. You can also clone these settings to other servers by copying them to the same location.\n\nYou may wish to consult the following resources for additional information on this topic. While these are provided in the hope that they will be useful, please note that we cannot vouch for the accuracy or timeliness of externally hosted materials."
    },
    {
        "link": "https://reddit.com/r/unRAID/comments/14l3azi/use_midnight_commander_for_movingmigrating_data",
        "document": "I also tested Dynamix file manager, root share, and Krusader. So far, MC is very stable and the transfer rate is great.\n\nIt is built in Unraid and has nice simple GUI. I struggled for almost two month, so here is my advice for new user :)"
    },
    {
        "link": "https://retropie.org.uk/forum/topic/20541/can-t-find-flash-drive-on-midnight-commander",
        "document": "Your browser does not seem to support JavaScript. As a result, your viewing experience will be diminished, and you have been placed in read-only mode.\n\nPlease download a browser that supports JavaScript, or enable it if it's disabled (i.e. NoScript)."
    }
]