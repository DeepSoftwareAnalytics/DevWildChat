[
    {
        "link": "https://python-ldap.org/doc/html/ldap.html",
        "document": "This module provides access to the LDAP (Lightweight Directory Access Protocol) C API implemented in OpenLDAP. It is similar to the C API, with the notable differences that lists are manipulated via Python list operations and errors appear as exceptions.\n\nThis documentation is current for the Python LDAP module, version 3.4.3. Source and binaries are available from https://www.python-ldap.org/.\n\nThis module defines the following functions: Initializes a new connection object for accessing the given LDAP server, and return an used to perform operations on that server. The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Note that when using multiple URIs you cannot determine to which URI your client gets connected. If fileno parameter is given then the file descriptor will be used to connect to an LDAP server. The fileno must either be a socket file descriptor as or a file-like object with a fileno() method that returns a socket file descriptor. The socket file descriptor must already be connected. does not take ownership of the file descriptor. It must be kept open during operations and explicitly closed after the is unbound. The internal connection type is determined from the URI, for / , ( ) for . The parameter is not available on macOS when python-ldap is compiled with system libldap, see . Note that internally the OpenLDAP function ldap_initialize(3) is called which just initializes the LDAP connection struct in the C API - nothing else. Therefore the first call to an operation method (bind, search etc.) then really opens the connection (lazy connect). Before that nothing is sent on the wire. The error handling in the calling application has to correctly handle this behaviour. Three optional arguments are for generating debug log information: trace_level specifies the amount of information being logged, trace_file specifies a file-like object as target of the debug log and trace_stack_limit specifies the stack limit of tracebacks in debug log. Possible values for trace_level are for no logging, for only logging the method calls with arguments, for logging the method calls with arguments and the complete results and for also logging the traceback of method calls. This function is a thin wrapper around instantiating . Any additional keyword arguments are passed to . It is also fine to instantiate a (or a subclass) directly. The function additionally takes bytes_mode and bytes_strictness keyword arguments, which are deprecated and ignored. See Bytes/text management for details. New in version 3.3: The fileno argument was added. Deprecated since version 3.4: bytes_mode and bytes_strictness arguments are deprecated. This function returns the value of the global option specified by option. This function sets the value of the global option specified by option to invalue. Most global settings do not affect existing connections. Applications should call before they establish connections with . Changed in version 3.1: The deprecated functions and were removed.\n\nThe module defines various constants. Note that some constants depend on the build options and which underlying libs were used or even on the version of the libs. So before using those constants the application has to explicitly check whether they are available. The assigned TCP port number (389) that LDAP servers listen on. Integer where a non-zero value indicates that python-ldap was built with support for SASL (Cyrus-SASL). Integer where a non-zero value indicates that python-ldap was built with support for SSL/TLS (OpenSSL or similar libs). Integer where a non-zero value indicates that python-ldap supports from a file descriptor. The feature is generally available except on macOS when python-ldap is compiled with system libldap. For use with functions and and methods and the following option identifiers are defined as constants: Sets the debug level within the underlying OpenLDAP C lib (libldap). libldap sends the log messages to stderr. Specifies how alias dereferencing is done within the underlying LDAP C lib. Changed in version 3.0: A timeout of or resets timeout to infinity. Sets the LDAP protocol version used for a connection. This is mapped to object attribute int specifying whether referrals should be automatically chased within the underlying LDAP C lib. Changed in version 3.0: A timeout of or resets timeout to infinity. Unlike most other options, SASL options must be set on an instance. If set to zero, SASL host name canonicalization is disabled. libldap does not materialize all TLS settings immediately. You must use with value to instruct libldap to apply pending TLS settings and create a new internal TLS context: set and apply TLS settings to internal TLS context. Value creates a new client-side context. Get TLS implementation, known values are get/set path to file with PEM encoded cert for client cert authentication, requires . get/set path to file with PEM encoded key for client cert authentication, requires . Perform CRL checks for the whole cert chain get/set how OpenLDAP validates subject alternative name extension, available in OpenLDAP 2.4.52 and newer. Check SAN first, always fall back to subject common name (default) Check SAN first, only fall back to subject common name, when no SAN extension is present (RFC 6125 conform validation) Value for and Value for and Value for and Value for and Deprecated since version 3.3.0: This value is only used by slapd server internally. It will be removed in the future. get cipher suite name from TLS session get address of internal memory address of TLS context (DO NOT USE) get/set maximum protocol version (wire protocol version as int), available in OpenLDAP 2.5 and newer. Value for and , represents SSL 3 Value for and , represents TLS 1.0 Value for and , represents TLS 1.1 Value for and , represents TLS 1.2 Value for and , represents TLS 1.3 get/set path to /dev/urandom (DO NOT USE) Deprecated since version 3.3.0: The option is deprecated in OpenLDAP and should no longer be used. It will be removed in the future. OpenLDAP supports several TLS/SSL libraries. OpenSSL is the most common backend. Some options may not be available when libldap uses NSS, GnuTLS, or Apple’s Secure Transport backend. This constants are used for DN-parsing functions found in sub-module .\n\nThe module defines the following exceptions: This is the base class of all exceptions raised by the module . Unlike the C interface, errors are not returned as result codes, but are instead turned into exceptions, raised as soon an the error condition is detected. The exceptions are accompanied by a dictionary with additional information. All fields are optional and more fields may be added in the future. Currently, may set the following fields:\n• : string giving a description of the error class, as provided by calling OpenLDAP’s on the .\n• : string containing more information that the server may have sent. The value is server-specific: for example, the OpenLDAP server may send different info messages than Active Directory or 389-DS.\n• : truncated form of the name provided or alias. dereferenced for the lowest entry (object or alias) that was matched.\n• : ID of the matching asynchronous request. This can be used in asynchronous code where raises the result of an operation as an exception. For example, this is the case for , always raises the boolean result as an exception ( or ).\n• : list of instances attached to the error.\n• : the C , usually set by system calls or rather than the LDAP libraries. A problem was encountered when dereferencing an alias. (Sets the field.) An alias in the directory points to a nonexistent entry. (Sets the field.) The entry already exists. E.g. the dn specified with already exists in the DIT. The authentication method specified to is not known. A compare operation returned false. (This exception should only be seen asynchronous operations, because returns a boolean result.) A compare operation returned true. (This exception should only be seen asynchronous operations, because returns a boolean result.) Indicates that the session is not protected by a protocol such as Transport Layer Security (TLS), which provides session confidentiality. An attribute value specified or an operation started violates some server-side constraint (e.g., a postalAddress has too many lines or a line that is too long or a password is expired). An error was encountered decoding a result from the LDAP server. An error was encountered encoding parameters to send to the LDAP server. An invalid filter was supplied to (e.g. unbalanced parentheses). Inappropriate authentication was specified (e.g. was specified and the entry does not have a userPassword attribute). Filter type not supported for the specified attribute. The user has insufficient access to perform the operation. Invalid credentials were presented during or . (e.g., the wrong password). A syntactically invalid DN was specified. (Sets the field.) An attribute value specified by the client did not comply to the syntax defined in the server-side schema. The object specified is a leaf of the directory tree. Sets the field of the exception dictionary value. Some local error occurred. This is usually due to failed memory allocation. A naming violation occurred. This is raised e.g. if the LDAP server has constraints about the tree naming. Modifying the objectClass attribute as requested is not allowed (e.g. modifying structural object class of existing entry). The operation is not allowed on a non-leaf object. The operation is not allowed on an RDN. The attribute type specified does not exist in the entry. The specified object does not exist in the directory. Sets the field of the exception dictionary value. An object class violation occurred when the LDAP server checked the data sent by the client against the server-side schema (e.g. a “must” attribute was missing in the entry data). An ldap routine was called with a bad parameter. Partial results only returned. This exception is raised if a referral is received when using LDAPv2. (This exception should never be seen with LDAPv3.) A violation of the LDAP protocol was detected. The result does not fit into a UDP packet. This happens only when using UDP-based CLDAP (connection-less LDAP) which is not supported anyway. An LDAP size limit was exceeded. This could be due to a configuration on the LDAP server. The LDAP server does not support strong authentication. Strong authentication is required for the operation. A timelimit was exceeded while waiting for a result from the server. An attribute type or attribute value specified already exists in the entry. Indicates that the LDAP server was unable to satisfy a request because one or more critical extensions were not available. Either the server does not support the control or the control is not appropriate for the operation type. An attribute type used is not defined in the server-side schema. The DSA is unwilling to perform the operation. The operation was cancelled via the method. The above exceptions are raised when a result code from an underlying API call does not indicate success."
    },
    {
        "link": "https://python-ldap.org/en/python-ldap-3.3.0/reference/ldap.html",
        "document": "This module provides access to the LDAP (Lightweight Directory Access Protocol) C API implemented in OpenLDAP. It is similar to the C API, with the notable differences that lists are manipulated via Python list operations and errors appear as exceptions.\n\nThis documentation is current for the Python LDAP module, version 3.3.0. Source and binaries are available from https://www.python-ldap.org/.\n\nThis module defines the following functions: Initializes a new connection object for accessing the given LDAP server, and return an used to perform operations on that server. The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Note that when using multiple URIs you cannot determine to which URI your client gets connected. If fileno parameter is given then the file descriptor will be used to connect to an LDAP server. The fileno must either be a socket file descriptor as or a file-like object with a fileno() method that returns a socket file descriptor. The socket file descriptor must already be connected. does not take ownership of the file descriptor. It must be kept open during operations and explicitly closed after the is unbound. The internal connection type is determined from the URI, for / , ( ) for . Note that internally the OpenLDAP function ldap_initialize(3) is called which just initializes the LDAP connection struct in the C API - nothing else. Therefore the first call to an operation method (bind, search etc.) then really opens the connection (lazy connect). Before that nothing is sent on the wire. The error handling in the calling application has to correctly handle this behaviour. Three optional arguments are for generating debug log information: trace_level specifies the amount of information being logged, trace_file specifies a file-like object as target of the debug log and trace_stack_limit specifies the stack limit of tracebacks in debug log. The bytes_mode and bytes_strictness arguments specify text/bytes behavior under Python 2. See Bytes/text management for a complete documentation. Possible values for trace_level are for no logging, for only logging the method calls with arguments, for logging the method calls with arguments and the complete results and for also logging the traceback of method calls. This function is a thin wrapper around instantiating . Any additional keyword arguments are passed to . It is also fine to instantiate a (or a subclass) directly. New in version 3.3: The fileno argument was added. This function returns the value of the global option specified by option. This function sets the value of the global option specified by option to invalue. Most global settings do not affect existing connections. Applications should call before they establish connections with . Changed in version 3.1: The deprecated functions and were removed.\n\nThe module defines various constants. Note that some constants depend on the build options and which underlying libs were used or even on the version of the libs. So before using those constants the application has to explicitly check whether they are available. The assigned TCP port number (389) that LDAP servers listen on. Integer where a non-zero value indicates that python-ldap was built with support for SASL (Cyrus-SASL). Integer where a non-zero value indicates that python-ldap was built with support for SSL/TLS (OpenSSL or similar libs). For use with functions and and methods and the following option identifiers are defined as constants: Sets the debug level within the underlying OpenLDAP C lib (libldap). libldap sends the log messages to stderr. Specifies how alias dereferencing is done within the underlying LDAP C lib. Changed in version 3.0: A timeout of or resets timeout to infinity. Sets the LDAP protocol version used for a connection. This is mapped to object attribute int specifying whether referrals should be automatically chased within the underlying LDAP C lib. Changed in version 3.0: A timeout of or resets timeout to infinity. If set to zero SASL host name canonicalization is disabled. libldap does not materialize all TLS settings immediately. You must use with value to instruct libldap to apply pending TLS settings and create a new internal TLS context: set and apply TLS settings to internal TLS context. Value creates a new client-side context. Get TLS implementation, known values are get/set path to file with PEM encoded cert for client cert authentication, requires . get/set path to file with PEM encoded key for client cert authentication, requires . Perform CRL checks for the whole cert chain Deprecated since version 3.3.0: This value is only used by slapd server internally. It will be removed in the future. get cipher suite name from TLS session get address of internal memory address of TLS context (DO NOT USE) Get peer’s certificate as binary ASN.1 data structure (not supported) get/set path to /dev/urandom (DO NOT USE) Deprecated since version 3.3.0: The option is deprecated in OpenLDAP and should no longer be used. It will be removed in the future. OpenLDAP supports several TLS/SSL libraries. OpenSSL is the most common backend. Some options may not be available when libldap uses NSS, GnuTLS, or Apple’s Secure Transport backend. This constants are used for DN-parsing functions found in sub-module .\n\nThe module defines the following exceptions: This is the base class of all exceptions raised by the module . Unlike the C interface, errors are not returned as result codes, but are instead turned into exceptions, raised as soon an the error condition is detected. The exceptions are accompanied by a dictionary with additional information. All fields are optional and more fields may be added in the future. Currently, may set the following fields:\n• : string giving a description of the error class, as provided by calling OpenLDAP’s on the .\n• : string containing more information that the server may have sent. The value is server-specific: for example, the OpenLDAP server may send different info messages than Active Directory or 389-DS.\n• : truncated form of the name provided or alias. dereferenced for the lowest entry (object or alias) that was matched.\n• : ID of the matching asynchronous request. This can be used in asynchronous code where raises the result of an operation as an exception. For example, this is the case for , always raises the boolean result as an exception ( or ).\n• : list of instances attached to the error.\n• : the C , usually set by system calls or rather than the LDAP libraries. A problem was encountered when dereferencing an alias. (Sets the field.) An alias in the directory points to a nonexistent entry. (Sets the field.) The entry already exists. E.g. the dn specified with already exists in the DIT. The authentication method specified to is not known. A compare operation returned false. (This exception should only be seen asynchronous operations, because returns a boolean result.) A compare operation returned true. (This exception should only be seen asynchronous operations, because returns a boolean result.) Indicates that the session is not protected by a protocol such as Transport Layer Security (TLS), which provides session confidentiality. An attribute value specified or an operation started violates some server-side constraint (e.g., a postalAddress has too many lines or a line that is too long or a password is expired). An error was encountered decoding a result from the LDAP server. An error was encountered encoding parameters to send to the LDAP server. An invalid filter was supplied to (e.g. unbalanced parentheses). Inappropriate authentication was specified (e.g. was specified and the entry does not have a userPassword attribute). Filter type not supported for the specified attribute. The user has insufficient access to perform the operation. Invalid credentials were presented during or . (e.g., the wrong password). A syntactically invalid DN was specified. (Sets the field.) An attribute value specified by the client did not comply to the syntax defined in the server-side schema. The object specified is a leaf of the directory tree. Sets the field of the exception dictionary value. Some local error occurred. This is usually due to failed memory allocation. A naming violation occurred. This is raised e.g. if the LDAP server has constraints about the tree naming. Modifying the objectClass attribute as requested is not allowed (e.g. modifying structural object class of existing entry). The operation is not allowed on a non-leaf object. The operation is not allowed on an RDN. The attribute type specified does not exist in the entry. The specified object does not exist in the directory. Sets the field of the exception dictionary value. An object class violation occurred when the LDAP server checked the data sent by the client against the server-side schema (e.g. a “must” attribute was missing in the entry data). An ldap routine was called with a bad parameter. Partial results only returned. This exception is raised if a referral is received when using LDAPv2. (This exception should never be seen with LDAPv3.) A violation of the LDAP protocol was detected. The result does not fit into a UDP packet. This happens only when using UDP-based CLDAP (connection-less LDAP) which is not supported anyway. An LDAP size limit was exceeded. This could be due to a configuration on the LDAP server. The LDAP server does not support strong authentication. Strong authentication is required for the operation. A timelimit was exceeded while waiting for a result from the server. An attribute type or attribute value specified already exists in the entry. Indicates that the LDAP server was unable to satisfy a request because one or more critical extensions were not available. Either the server does not support the control or the control is not appropriate for the operation type. An attribute type used is not defined in the server-side schema. The DSA is unwilling to perform the operation. The operation was cancelled via the method. The above exceptions are raised when a result code from an underlying API call does not indicate success."
    },
    {
        "link": "https://ldap3.readthedocs.io/en/latest/tutorial_searches.html",
        "document": "A more pythonic LDAP : LDAP operations look clumsy and hard-to-use because they reflect the age-old idea that time-consuming operations should be done on the client in order not to clutter and hog the server with unneeded elaboration. ldap3 includes a fully functional Abstraction Layer that lets you interact with the DIT in a modern and pythonic way. With the Abstraction Layer you don’t need to directly issue any LDAP operation at all.\n\nTo find entries in the DIT you must use the Search operation. This operation has a number of parameters, but only two of them are mandatory:\n• : the location in the DIT where the search will start\n• : a string that describes what you are searching for\n\nSearch filters are based on assertions and look odd when you’re unfamiliar with their syntax. One assertion is a bracketed expression that affirms something about an attribute and its values, as or . On the server, each assertion resolves to True, False, or Undefined (which is treated as False) for one or more entries in the DIT. Assertions can be grouped in boolean groups where all assertions (and group, specified with ) or at least one assertion (or group, specified with ) must be True. A single assertion can be negated (not group, specified with ). Each group must be bracketed, allowing for recursive filters.\n\nOperators allowed in an assertion are (equal), (less than or equal), (greater than or equal), (present), (approximate), and (extensible). Surprisingly the less than and the greater than operators don’t exist in the LDAP filter syntax. The aproximate and the extensible operators are obscure and seldom used. In an equality filter you can use the character as a wildcard.\n\nFor example, to search for all users named John with an email ending with ‘@example.org’ the filter will be , to search for all users named John or Fred with an email ending in ‘@example.org’ the filter will be , while to search for all users that have a givenName different from Smith the filter will be .\n\nLong search filters are difficult to understand. It may be useful to divide the text on multiple indented lines:\n\nLet’s search all users in the FreeIPA demo LDAP server:\n\nHere you request all the entries of class person, starting from the dc=demo1,dc=freeipa,dc=org context with the default subtree scope. You have not requested any attribute, so in the response we only get the Distinguished Name of the found entries.\n\nNow let’s try to request some attributes from the admin user:\n\nWhen using attributes in a search filter, it’s a good habit to always request for the structural class of the objects you expect to retrieve. Why? You cannot be sure that the attribute you’re searching for is not used is some other object class. Even if you are sure that no other object class uses it, this attribute could always change in the future when the schema is extended with an object class that uses that very same attribute, thus leading your program to suddenly break for no apparent reason.\n\nNote that the attribute of the Connection object is derived from the ldap3 Abstraction Layer and it’s specially crafted to be used in interactive mode at the prompt. It gives a visual representation of the entry data structure and each value is, according to the schema, properly formatted (the date value in krbLastPwdChange is actually stored as , but it’s shown as a Python date object). Attributes can be queried either as a class or as a dict, with some additional features as case-insensitivity and blank-insensitivity. You can get the formatted value and the raw value (the value actually returned by the server) in the and attributes:\n\nNote that the entry status is Read. This is not relevant if you only need to retrieve the entries from the DIT but it’s vital if you want to take advantage of the ldap3 Abstraction Layer making it Writable and change or delete its content via the Abstraction Layer. The Abstraction Layer also records the time of the last data read operation for the entry.\n\nIn the previous search operations you specified as the base of the search, but the entries you were returned were in the context of the DIT. So the server has, with no apparent reason, walked down every context under the base applying the filter to each of the entries in the sub-containers. The server actually performed a whole subtree search. Other possible kinds of searches are the single level search (that searches only in the level specified in the base) and the base object search (that searches only in the attributes of the entry specified in the base). What changes in this different kinds of search is the ‘breadth’ of the portion of the DIT that is searched. This breadth is called the scope of the search and can be specified with the parameter of the search operation. It can take three different values: , and . The latter value is the default for the search operation, so this clarifies why you got back all the entries in the sub-containers of the base in previous searches.\n\nYou can have a LDIF representation of the response of a search with:\n\nor you can save the response to a JSON string:"
    },
    {
        "link": "https://medium.com/@alpolishchuk/a-little-python-ldap-tutorial-4a6a79676157",
        "document": "One day we decided to change our own-written C++ app for interaction with LDAP. Of course, we choose python-ldap (python-ldap site).\n\nBut it wasn’t so simple, as I thought, and docs are not very simple, I can’t find any acceptable tutorial and spend some time at StackOverflow. After that I decided to write this little tutorial.\n\nFirst, we need to import our module\n\nThen, initialize our connect to ldap-server\n\nThen we need to use our credentials to search LDAP\n\nHere you need to insert your login and password instead of ldap_login and ldap_password.\n\nThat’s it! Now we can search in ldap whatever we want!\n\nAnd a little tip about why simple_bind_s — ‘_s’ at the end mean that this request will be executed synchronously. Without that all requests are called asynchronously.\n\nHere is an example for user search\n\nIn that example we search in which groups is our user.\n\nldap.SCOPE_SUBTREE — to search the object and all its descendants\n\n‘userPrincipalName=user@somedomain.com’ — search method of out user (instead of userPrincipalName we can use displayName (and instead of user@somedomain.com — User User, for example), because it unique too)\n\n[‘memberOf’] — attributes, that we want to receive. If we will not fill this part — we will receive all user ldap-attributes.\n\nThe result is a list of tuples. Tuple consist of full domain name and dict with attributes as keys, and values is lists.\n\nIn this manner we can search not only users, but also all domain objects."
    },
    {
        "link": "https://python-ldap.org/en/latest/reference/ldap.html",
        "document": "This module provides access to the LDAP (Lightweight Directory Access Protocol) C API implemented in OpenLDAP. It is similar to the C API, with the notable differences that lists are manipulated via Python list operations and errors appear as exceptions.\n\nThis documentation is current for the Python LDAP module, version 3.4.3. Source and binaries are available from https://www.python-ldap.org/.\n\nThis module defines the following functions: Initializes a new connection object for accessing the given LDAP server, and return an used to perform operations on that server. The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Note that when using multiple URIs you cannot determine to which URI your client gets connected. If fileno parameter is given then the file descriptor will be used to connect to an LDAP server. The fileno must either be a socket file descriptor as or a file-like object with a fileno() method that returns a socket file descriptor. The socket file descriptor must already be connected. does not take ownership of the file descriptor. It must be kept open during operations and explicitly closed after the is unbound. The internal connection type is determined from the URI, for / , ( ) for . The parameter is not available on macOS when python-ldap is compiled with system libldap, see . Note that internally the OpenLDAP function ldap_initialize(3) is called which just initializes the LDAP connection struct in the C API - nothing else. Therefore the first call to an operation method (bind, search etc.) then really opens the connection (lazy connect). Before that nothing is sent on the wire. The error handling in the calling application has to correctly handle this behaviour. Three optional arguments are for generating debug log information: trace_level specifies the amount of information being logged, trace_file specifies a file-like object as target of the debug log and trace_stack_limit specifies the stack limit of tracebacks in debug log. Possible values for trace_level are for no logging, for only logging the method calls with arguments, for logging the method calls with arguments and the complete results and for also logging the traceback of method calls. This function is a thin wrapper around instantiating . Any additional keyword arguments are passed to . It is also fine to instantiate a (or a subclass) directly. The function additionally takes bytes_mode and bytes_strictness keyword arguments, which are deprecated and ignored. See Bytes/text management for details. New in version 3.3: The fileno argument was added. Deprecated since version 3.4: bytes_mode and bytes_strictness arguments are deprecated. This function returns the value of the global option specified by option. This function sets the value of the global option specified by option to invalue. Most global settings do not affect existing connections. Applications should call before they establish connections with . Changed in version 3.1: The deprecated functions and were removed.\n\nThe module defines various constants. Note that some constants depend on the build options and which underlying libs were used or even on the version of the libs. So before using those constants the application has to explicitly check whether they are available. The assigned TCP port number (389) that LDAP servers listen on. Integer where a non-zero value indicates that python-ldap was built with support for SASL (Cyrus-SASL). Integer where a non-zero value indicates that python-ldap was built with support for SSL/TLS (OpenSSL or similar libs). Integer where a non-zero value indicates that python-ldap supports from a file descriptor. The feature is generally available except on macOS when python-ldap is compiled with system libldap. For use with functions and and methods and the following option identifiers are defined as constants: Sets the debug level within the underlying OpenLDAP C lib (libldap). libldap sends the log messages to stderr. Specifies how alias dereferencing is done within the underlying LDAP C lib. Changed in version 3.0: A timeout of or resets timeout to infinity. Sets the LDAP protocol version used for a connection. This is mapped to object attribute int specifying whether referrals should be automatically chased within the underlying LDAP C lib. Changed in version 3.0: A timeout of or resets timeout to infinity. Unlike most other options, SASL options must be set on an instance. If set to zero, SASL host name canonicalization is disabled. libldap does not materialize all TLS settings immediately. You must use with value to instruct libldap to apply pending TLS settings and create a new internal TLS context: set and apply TLS settings to internal TLS context. Value creates a new client-side context. Get TLS implementation, known values are get/set path to file with PEM encoded cert for client cert authentication, requires . get/set path to file with PEM encoded key for client cert authentication, requires . Perform CRL checks for the whole cert chain get/set how OpenLDAP validates subject alternative name extension, available in OpenLDAP 2.4.52 and newer. Check SAN first, always fall back to subject common name (default) Check SAN first, only fall back to subject common name, when no SAN extension is present (RFC 6125 conform validation) Value for and Value for and Value for and Value for and Deprecated since version 3.3.0: This value is only used by slapd server internally. It will be removed in the future. get cipher suite name from TLS session get address of internal memory address of TLS context (DO NOT USE) get/set maximum protocol version (wire protocol version as int), available in OpenLDAP 2.5 and newer. Value for and , represents SSL 3 Value for and , represents TLS 1.0 Value for and , represents TLS 1.1 Value for and , represents TLS 1.2 Value for and , represents TLS 1.3 get/set path to /dev/urandom (DO NOT USE) Deprecated since version 3.3.0: The option is deprecated in OpenLDAP and should no longer be used. It will be removed in the future. OpenLDAP supports several TLS/SSL libraries. OpenSSL is the most common backend. Some options may not be available when libldap uses NSS, GnuTLS, or Apple’s Secure Transport backend. This constants are used for DN-parsing functions found in sub-module .\n\nThe module defines the following exceptions: This is the base class of all exceptions raised by the module . Unlike the C interface, errors are not returned as result codes, but are instead turned into exceptions, raised as soon an the error condition is detected. The exceptions are accompanied by a dictionary with additional information. All fields are optional and more fields may be added in the future. Currently, may set the following fields:\n• : string giving a description of the error class, as provided by calling OpenLDAP’s on the .\n• : string containing more information that the server may have sent. The value is server-specific: for example, the OpenLDAP server may send different info messages than Active Directory or 389-DS.\n• : truncated form of the name provided or alias. dereferenced for the lowest entry (object or alias) that was matched.\n• : ID of the matching asynchronous request. This can be used in asynchronous code where raises the result of an operation as an exception. For example, this is the case for , always raises the boolean result as an exception ( or ).\n• : list of instances attached to the error.\n• : the C , usually set by system calls or rather than the LDAP libraries. A problem was encountered when dereferencing an alias. (Sets the field.) An alias in the directory points to a nonexistent entry. (Sets the field.) The entry already exists. E.g. the dn specified with already exists in the DIT. The authentication method specified to is not known. A compare operation returned false. (This exception should only be seen asynchronous operations, because returns a boolean result.) A compare operation returned true. (This exception should only be seen asynchronous operations, because returns a boolean result.) Indicates that the session is not protected by a protocol such as Transport Layer Security (TLS), which provides session confidentiality. An attribute value specified or an operation started violates some server-side constraint (e.g., a postalAddress has too many lines or a line that is too long or a password is expired). An error was encountered decoding a result from the LDAP server. An error was encountered encoding parameters to send to the LDAP server. An invalid filter was supplied to (e.g. unbalanced parentheses). Inappropriate authentication was specified (e.g. was specified and the entry does not have a userPassword attribute). Filter type not supported for the specified attribute. The user has insufficient access to perform the operation. Invalid credentials were presented during or . (e.g., the wrong password). A syntactically invalid DN was specified. (Sets the field.) An attribute value specified by the client did not comply to the syntax defined in the server-side schema. The object specified is a leaf of the directory tree. Sets the field of the exception dictionary value. Some local error occurred. This is usually due to failed memory allocation. A naming violation occurred. This is raised e.g. if the LDAP server has constraints about the tree naming. Modifying the objectClass attribute as requested is not allowed (e.g. modifying structural object class of existing entry). The operation is not allowed on a non-leaf object. The operation is not allowed on an RDN. The attribute type specified does not exist in the entry. The specified object does not exist in the directory. Sets the field of the exception dictionary value. An object class violation occurred when the LDAP server checked the data sent by the client against the server-side schema (e.g. a “must” attribute was missing in the entry data). An ldap routine was called with a bad parameter. Partial results only returned. This exception is raised if a referral is received when using LDAPv2. (This exception should never be seen with LDAPv3.) A violation of the LDAP protocol was detected. The result does not fit into a UDP packet. This happens only when using UDP-based CLDAP (connection-less LDAP) which is not supported anyway. An LDAP size limit was exceeded. This could be due to a configuration on the LDAP server. The LDAP server does not support strong authentication. Strong authentication is required for the operation. A timelimit was exceeded while waiting for a result from the server. An attribute type or attribute value specified already exists in the entry. Indicates that the LDAP server was unable to satisfy a request because one or more critical extensions were not available. Either the server does not support the control or the control is not appropriate for the operation type. An attribute type used is not defined in the server-side schema. The DSA is unwilling to perform the operation. The operation was cancelled via the method. The above exceptions are raised when a result code from an underlying API call does not indicate success."
    },
    {
        "link": "https://stackoverflow.com/questions/43511453/error-handling-in-python-with-ldap",
        "document": "I have this bit of code below, it is part of a python script iv been working on(piecing it together blocks at a time as learning curve). This bit binds to an ldap directory to query, so the rest of the script can to the queries. When successful, it will print the below message in the block. When not successful it will throw an error- or at least i want to control the error.\n\nIf im not domain bound/vpn it will throw this message:\n\nnowhere in my script is it defined for the error message, how can i find where its fetching what to print that messsage- and possibly create or customize it? (for what its worth i am using PyCharm)"
    },
    {
        "link": "https://python-ldap.org/en/python-ldap-3.3.0/reference/ldap.html",
        "document": "This module provides access to the LDAP (Lightweight Directory Access Protocol) C API implemented in OpenLDAP. It is similar to the C API, with the notable differences that lists are manipulated via Python list operations and errors appear as exceptions.\n\nThis documentation is current for the Python LDAP module, version 3.3.0. Source and binaries are available from https://www.python-ldap.org/.\n\nThis module defines the following functions: Initializes a new connection object for accessing the given LDAP server, and return an used to perform operations on that server. The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Note that when using multiple URIs you cannot determine to which URI your client gets connected. If fileno parameter is given then the file descriptor will be used to connect to an LDAP server. The fileno must either be a socket file descriptor as or a file-like object with a fileno() method that returns a socket file descriptor. The socket file descriptor must already be connected. does not take ownership of the file descriptor. It must be kept open during operations and explicitly closed after the is unbound. The internal connection type is determined from the URI, for / , ( ) for . Note that internally the OpenLDAP function ldap_initialize(3) is called which just initializes the LDAP connection struct in the C API - nothing else. Therefore the first call to an operation method (bind, search etc.) then really opens the connection (lazy connect). Before that nothing is sent on the wire. The error handling in the calling application has to correctly handle this behaviour. Three optional arguments are for generating debug log information: trace_level specifies the amount of information being logged, trace_file specifies a file-like object as target of the debug log and trace_stack_limit specifies the stack limit of tracebacks in debug log. The bytes_mode and bytes_strictness arguments specify text/bytes behavior under Python 2. See Bytes/text management for a complete documentation. Possible values for trace_level are for no logging, for only logging the method calls with arguments, for logging the method calls with arguments and the complete results and for also logging the traceback of method calls. This function is a thin wrapper around instantiating . Any additional keyword arguments are passed to . It is also fine to instantiate a (or a subclass) directly. New in version 3.3: The fileno argument was added. This function returns the value of the global option specified by option. This function sets the value of the global option specified by option to invalue. Most global settings do not affect existing connections. Applications should call before they establish connections with . Changed in version 3.1: The deprecated functions and were removed.\n\nThe module defines various constants. Note that some constants depend on the build options and which underlying libs were used or even on the version of the libs. So before using those constants the application has to explicitly check whether they are available. The assigned TCP port number (389) that LDAP servers listen on. Integer where a non-zero value indicates that python-ldap was built with support for SASL (Cyrus-SASL). Integer where a non-zero value indicates that python-ldap was built with support for SSL/TLS (OpenSSL or similar libs). For use with functions and and methods and the following option identifiers are defined as constants: Sets the debug level within the underlying OpenLDAP C lib (libldap). libldap sends the log messages to stderr. Specifies how alias dereferencing is done within the underlying LDAP C lib. Changed in version 3.0: A timeout of or resets timeout to infinity. Sets the LDAP protocol version used for a connection. This is mapped to object attribute int specifying whether referrals should be automatically chased within the underlying LDAP C lib. Changed in version 3.0: A timeout of or resets timeout to infinity. If set to zero SASL host name canonicalization is disabled. libldap does not materialize all TLS settings immediately. You must use with value to instruct libldap to apply pending TLS settings and create a new internal TLS context: set and apply TLS settings to internal TLS context. Value creates a new client-side context. Get TLS implementation, known values are get/set path to file with PEM encoded cert for client cert authentication, requires . get/set path to file with PEM encoded key for client cert authentication, requires . Perform CRL checks for the whole cert chain Deprecated since version 3.3.0: This value is only used by slapd server internally. It will be removed in the future. get cipher suite name from TLS session get address of internal memory address of TLS context (DO NOT USE) Get peer’s certificate as binary ASN.1 data structure (not supported) get/set path to /dev/urandom (DO NOT USE) Deprecated since version 3.3.0: The option is deprecated in OpenLDAP and should no longer be used. It will be removed in the future. OpenLDAP supports several TLS/SSL libraries. OpenSSL is the most common backend. Some options may not be available when libldap uses NSS, GnuTLS, or Apple’s Secure Transport backend. This constants are used for DN-parsing functions found in sub-module .\n\nThe module defines the following exceptions: This is the base class of all exceptions raised by the module . Unlike the C interface, errors are not returned as result codes, but are instead turned into exceptions, raised as soon an the error condition is detected. The exceptions are accompanied by a dictionary with additional information. All fields are optional and more fields may be added in the future. Currently, may set the following fields:\n• : string giving a description of the error class, as provided by calling OpenLDAP’s on the .\n• : string containing more information that the server may have sent. The value is server-specific: for example, the OpenLDAP server may send different info messages than Active Directory or 389-DS.\n• : truncated form of the name provided or alias. dereferenced for the lowest entry (object or alias) that was matched.\n• : ID of the matching asynchronous request. This can be used in asynchronous code where raises the result of an operation as an exception. For example, this is the case for , always raises the boolean result as an exception ( or ).\n• : list of instances attached to the error.\n• : the C , usually set by system calls or rather than the LDAP libraries. A problem was encountered when dereferencing an alias. (Sets the field.) An alias in the directory points to a nonexistent entry. (Sets the field.) The entry already exists. E.g. the dn specified with already exists in the DIT. The authentication method specified to is not known. A compare operation returned false. (This exception should only be seen asynchronous operations, because returns a boolean result.) A compare operation returned true. (This exception should only be seen asynchronous operations, because returns a boolean result.) Indicates that the session is not protected by a protocol such as Transport Layer Security (TLS), which provides session confidentiality. An attribute value specified or an operation started violates some server-side constraint (e.g., a postalAddress has too many lines or a line that is too long or a password is expired). An error was encountered decoding a result from the LDAP server. An error was encountered encoding parameters to send to the LDAP server. An invalid filter was supplied to (e.g. unbalanced parentheses). Inappropriate authentication was specified (e.g. was specified and the entry does not have a userPassword attribute). Filter type not supported for the specified attribute. The user has insufficient access to perform the operation. Invalid credentials were presented during or . (e.g., the wrong password). A syntactically invalid DN was specified. (Sets the field.) An attribute value specified by the client did not comply to the syntax defined in the server-side schema. The object specified is a leaf of the directory tree. Sets the field of the exception dictionary value. Some local error occurred. This is usually due to failed memory allocation. A naming violation occurred. This is raised e.g. if the LDAP server has constraints about the tree naming. Modifying the objectClass attribute as requested is not allowed (e.g. modifying structural object class of existing entry). The operation is not allowed on a non-leaf object. The operation is not allowed on an RDN. The attribute type specified does not exist in the entry. The specified object does not exist in the directory. Sets the field of the exception dictionary value. An object class violation occurred when the LDAP server checked the data sent by the client against the server-side schema (e.g. a “must” attribute was missing in the entry data). An ldap routine was called with a bad parameter. Partial results only returned. This exception is raised if a referral is received when using LDAPv2. (This exception should never be seen with LDAPv3.) A violation of the LDAP protocol was detected. The result does not fit into a UDP packet. This happens only when using UDP-based CLDAP (connection-less LDAP) which is not supported anyway. An LDAP size limit was exceeded. This could be due to a configuration on the LDAP server. The LDAP server does not support strong authentication. Strong authentication is required for the operation. A timelimit was exceeded while waiting for a result from the server. An attribute type or attribute value specified already exists in the entry. Indicates that the LDAP server was unable to satisfy a request because one or more critical extensions were not available. Either the server does not support the control or the control is not appropriate for the operation type. An attribute type used is not defined in the server-side schema. The DSA is unwilling to perform the operation. The operation was cancelled via the method. The above exceptions are raised when a result code from an underlying API call does not indicate success."
    },
    {
        "link": "https://stackoverflow.com/questions/57793084/python-ldap-query-errors",
        "document": "I'm trying to run a basic ldap query with python code and get error. please help me to solve this issue. I already tried to convert the code from Python 2 to Python 3 because someone said me that is one of the issues."
    },
    {
        "link": "https://python-ldap.org/en/latest/reference/ldap.html",
        "document": "This module provides access to the LDAP (Lightweight Directory Access Protocol) C API implemented in OpenLDAP. It is similar to the C API, with the notable differences that lists are manipulated via Python list operations and errors appear as exceptions.\n\nThis documentation is current for the Python LDAP module, version 3.4.3. Source and binaries are available from https://www.python-ldap.org/.\n\nThis module defines the following functions: Initializes a new connection object for accessing the given LDAP server, and return an used to perform operations on that server. The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Note that when using multiple URIs you cannot determine to which URI your client gets connected. If fileno parameter is given then the file descriptor will be used to connect to an LDAP server. The fileno must either be a socket file descriptor as or a file-like object with a fileno() method that returns a socket file descriptor. The socket file descriptor must already be connected. does not take ownership of the file descriptor. It must be kept open during operations and explicitly closed after the is unbound. The internal connection type is determined from the URI, for / , ( ) for . The parameter is not available on macOS when python-ldap is compiled with system libldap, see . Note that internally the OpenLDAP function ldap_initialize(3) is called which just initializes the LDAP connection struct in the C API - nothing else. Therefore the first call to an operation method (bind, search etc.) then really opens the connection (lazy connect). Before that nothing is sent on the wire. The error handling in the calling application has to correctly handle this behaviour. Three optional arguments are for generating debug log information: trace_level specifies the amount of information being logged, trace_file specifies a file-like object as target of the debug log and trace_stack_limit specifies the stack limit of tracebacks in debug log. Possible values for trace_level are for no logging, for only logging the method calls with arguments, for logging the method calls with arguments and the complete results and for also logging the traceback of method calls. This function is a thin wrapper around instantiating . Any additional keyword arguments are passed to . It is also fine to instantiate a (or a subclass) directly. The function additionally takes bytes_mode and bytes_strictness keyword arguments, which are deprecated and ignored. See Bytes/text management for details. New in version 3.3: The fileno argument was added. Deprecated since version 3.4: bytes_mode and bytes_strictness arguments are deprecated. This function returns the value of the global option specified by option. This function sets the value of the global option specified by option to invalue. Most global settings do not affect existing connections. Applications should call before they establish connections with . Changed in version 3.1: The deprecated functions and were removed.\n\nThe module defines various constants. Note that some constants depend on the build options and which underlying libs were used or even on the version of the libs. So before using those constants the application has to explicitly check whether they are available. The assigned TCP port number (389) that LDAP servers listen on. Integer where a non-zero value indicates that python-ldap was built with support for SASL (Cyrus-SASL). Integer where a non-zero value indicates that python-ldap was built with support for SSL/TLS (OpenSSL or similar libs). Integer where a non-zero value indicates that python-ldap supports from a file descriptor. The feature is generally available except on macOS when python-ldap is compiled with system libldap. For use with functions and and methods and the following option identifiers are defined as constants: Sets the debug level within the underlying OpenLDAP C lib (libldap). libldap sends the log messages to stderr. Specifies how alias dereferencing is done within the underlying LDAP C lib. Changed in version 3.0: A timeout of or resets timeout to infinity. Sets the LDAP protocol version used for a connection. This is mapped to object attribute int specifying whether referrals should be automatically chased within the underlying LDAP C lib. Changed in version 3.0: A timeout of or resets timeout to infinity. Unlike most other options, SASL options must be set on an instance. If set to zero, SASL host name canonicalization is disabled. libldap does not materialize all TLS settings immediately. You must use with value to instruct libldap to apply pending TLS settings and create a new internal TLS context: set and apply TLS settings to internal TLS context. Value creates a new client-side context. Get TLS implementation, known values are get/set path to file with PEM encoded cert for client cert authentication, requires . get/set path to file with PEM encoded key for client cert authentication, requires . Perform CRL checks for the whole cert chain get/set how OpenLDAP validates subject alternative name extension, available in OpenLDAP 2.4.52 and newer. Check SAN first, always fall back to subject common name (default) Check SAN first, only fall back to subject common name, when no SAN extension is present (RFC 6125 conform validation) Value for and Value for and Value for and Value for and Deprecated since version 3.3.0: This value is only used by slapd server internally. It will be removed in the future. get cipher suite name from TLS session get address of internal memory address of TLS context (DO NOT USE) get/set maximum protocol version (wire protocol version as int), available in OpenLDAP 2.5 and newer. Value for and , represents SSL 3 Value for and , represents TLS 1.0 Value for and , represents TLS 1.1 Value for and , represents TLS 1.2 Value for and , represents TLS 1.3 get/set path to /dev/urandom (DO NOT USE) Deprecated since version 3.3.0: The option is deprecated in OpenLDAP and should no longer be used. It will be removed in the future. OpenLDAP supports several TLS/SSL libraries. OpenSSL is the most common backend. Some options may not be available when libldap uses NSS, GnuTLS, or Apple’s Secure Transport backend. This constants are used for DN-parsing functions found in sub-module .\n\nThe module defines the following exceptions: This is the base class of all exceptions raised by the module . Unlike the C interface, errors are not returned as result codes, but are instead turned into exceptions, raised as soon an the error condition is detected. The exceptions are accompanied by a dictionary with additional information. All fields are optional and more fields may be added in the future. Currently, may set the following fields:\n• : string giving a description of the error class, as provided by calling OpenLDAP’s on the .\n• : string containing more information that the server may have sent. The value is server-specific: for example, the OpenLDAP server may send different info messages than Active Directory or 389-DS.\n• : truncated form of the name provided or alias. dereferenced for the lowest entry (object or alias) that was matched.\n• : ID of the matching asynchronous request. This can be used in asynchronous code where raises the result of an operation as an exception. For example, this is the case for , always raises the boolean result as an exception ( or ).\n• : list of instances attached to the error.\n• : the C , usually set by system calls or rather than the LDAP libraries. A problem was encountered when dereferencing an alias. (Sets the field.) An alias in the directory points to a nonexistent entry. (Sets the field.) The entry already exists. E.g. the dn specified with already exists in the DIT. The authentication method specified to is not known. A compare operation returned false. (This exception should only be seen asynchronous operations, because returns a boolean result.) A compare operation returned true. (This exception should only be seen asynchronous operations, because returns a boolean result.) Indicates that the session is not protected by a protocol such as Transport Layer Security (TLS), which provides session confidentiality. An attribute value specified or an operation started violates some server-side constraint (e.g., a postalAddress has too many lines or a line that is too long or a password is expired). An error was encountered decoding a result from the LDAP server. An error was encountered encoding parameters to send to the LDAP server. An invalid filter was supplied to (e.g. unbalanced parentheses). Inappropriate authentication was specified (e.g. was specified and the entry does not have a userPassword attribute). Filter type not supported for the specified attribute. The user has insufficient access to perform the operation. Invalid credentials were presented during or . (e.g., the wrong password). A syntactically invalid DN was specified. (Sets the field.) An attribute value specified by the client did not comply to the syntax defined in the server-side schema. The object specified is a leaf of the directory tree. Sets the field of the exception dictionary value. Some local error occurred. This is usually due to failed memory allocation. A naming violation occurred. This is raised e.g. if the LDAP server has constraints about the tree naming. Modifying the objectClass attribute as requested is not allowed (e.g. modifying structural object class of existing entry). The operation is not allowed on a non-leaf object. The operation is not allowed on an RDN. The attribute type specified does not exist in the entry. The specified object does not exist in the directory. Sets the field of the exception dictionary value. An object class violation occurred when the LDAP server checked the data sent by the client against the server-side schema (e.g. a “must” attribute was missing in the entry data). An ldap routine was called with a bad parameter. Partial results only returned. This exception is raised if a referral is received when using LDAPv2. (This exception should never be seen with LDAPv3.) A violation of the LDAP protocol was detected. The result does not fit into a UDP packet. This happens only when using UDP-based CLDAP (connection-less LDAP) which is not supported anyway. An LDAP size limit was exceeded. This could be due to a configuration on the LDAP server. The LDAP server does not support strong authentication. Strong authentication is required for the operation. A timelimit was exceeded while waiting for a result from the server. An attribute type or attribute value specified already exists in the entry. Indicates that the LDAP server was unable to satisfy a request because one or more critical extensions were not available. Either the server does not support the control or the control is not appropriate for the operation type. An attribute type used is not defined in the server-side schema. The DSA is unwilling to perform the operation. The operation was cancelled via the method. The above exceptions are raised when a result code from an underlying API call does not indicate success."
    },
    {
        "link": "https://reddit.com/r/learnpython/comments/tktd7y/python_ldap_errors_structure",
        "document": "For my job I have to analyze a lot of log files with LDAP/authentication issues similar to the one below. Note that I'm not familiar with Python myself, so sorry if this is a blunt question.\n\nI'm looking to compile a list of all sorts of errors and there cause.\n\nTherefore, I'm also looking for some pointers where I can find all the info about the different parts returned here.\n\nldap.INVALID_CREDENTIALS: I found a reference list here: https://readthedocs.org/projects/python-ldap/downloads/pdf/latest/ , so that's covered.\n\nInfo: 80090308: what does this refer to?\n\nLdapErr: what does this refer to? Online I read this is related to the directory, file and line of the original source code (is this of the Python LDAP module or of the Python project using the module?)\n\ndata 52e: https://ldapwiki.com/wiki/Common%20Active%20Directory%20Bind%20Errors has a nice overview. Is this returned by the LDAP server itself or by the Python LDAP module?\n\nvece: what does this refer to?"
    }
]