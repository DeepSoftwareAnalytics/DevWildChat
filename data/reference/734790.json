[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/Structuring_documents",
        "document": "In addition to defining individual parts of your page (such as \"a paragraph\" or \"an image\"), HTML also boasts a number of block level elements used to define areas of your website (such as \"the header\", \"the navigation menu\", \"the main content column\"). This article looks into how to plan a basic website structure, and write the HTML to represent this structure. Basic HTML familiarity, as covered in Basic HTML Syntax. Text-level semantics such as headings and paragraphs and lists.\n• The common HTML semantic structural elements, for example , , , , , and , and how to use them correctly.\n• The need to use semantic elements in appropriate places, rather than just using elements wherever a block-level container is required, and the benefits of this (such as improved accessibility).\n\nWebpages can and will look pretty different from one another, but they all tend to share similar standard components, unless the page is displaying a fullscreen video or game, is part of some kind of art project, or is just badly structured: Usually a big strip across the top with a big heading, logo, and perhaps a tagline. This usually stays the same from one page of a website to another. Links to the site's main sections; usually represented by menu buttons, links, or tabs. Like the header, this content usually remains consistent from one webpage to another — having inconsistent navigation on your website will just lead to confused, frustrated users. Many web designers consider the navigation bar to be part of the header rather than an individual component, but that's not a requirement; in fact, some also argue that having the two separate is better for accessibility, as screen readers can read the two features better if they are separate. A big area in the center that contains most of the unique content of a given webpage, for example, the video you want to watch, or the main story you're reading, or the map you want to view, or the news headlines, etc. This is the one part of the website that definitely will vary from page to page! Some peripheral info, links, quotes, ads, etc. Usually, this is contextual to what is contained in the main content (for example on a news article page, the sidebar might contain the author's bio, or links to related articles) but there are also cases where you'll find some recurring elements like a secondary navigation system. A strip across the bottom of the page that generally contains fine print, copyright notices, or contact info. It's a place to put common information (like the header) but usually, that information is not critical or secondary to the website itself. The footer is also sometimes used for SEO purposes, by providing links for quick access to popular content. A \"typical website\" could be structured something like this: Note: The image above illustrates the main sections of a document, which you can define with HTML. However, the appearance of the page shown here — including the layout, colors, and fonts — is achieved by applying CSS to the HTML.\n\nActive learning: exploring the code for our example Our example seen above is represented by the following code (you can also find the example in our GitHub repository). We'd like you to look at the example above, and then look over the listing below to see what parts make up what section of the visual. <!doctype html> <html lang=\"en-US\"> <head> <meta charset=\"utf-8\" /> <meta name=\"viewport\" content=\"width=device-width\" /> <title>My page title</title> <link href=\"https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One\" rel=\"stylesheet\" /> <link rel=\"stylesheet\" href=\"style.css\" /> </head> <body> <!-- The main header used across all the pages of our website --> <header> <h1>Header</h1> </header> <nav> <ul> <li><a href=\"#\">Home</a></li> <li><a href=\"#\">Our team</a></li> <li><a href=\"#\">Projects</a></li> <li><a href=\"#\">Contact</a></li> </ul> <!-- A Search form: another common non-linear way to navigate through a site. --> <form> <input type=\"search\" name=\"q\" placeholder=\"Search query\" /> <input type=\"submit\" value=\"Go!\" /> </form> </nav> <!-- Our page's main content --> <main> <!-- An article --> <article> <h2>Article heading</h2> <p> Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. </p> <section> <h3>Subsection</h3> <p> Donec ut librero sed accu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aenean ut gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. </p> <p> Pelientesque auctor nisi id magna consequat sagittis. Curabitur dapibus, enim sit amet elit pharetra tincidunt feugiat nist imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. </p> </section> <section> <h3>Another subsection</h3> <p> Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum soclis natoque penatibus et manis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est. </p> <p> Vivamus fermentum semper porta. Nunc diam velit, adipscing ut tristique vitae sagittis vel odio. Maecenas convallis ullamcorper ultricied. Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, is fringille sem nunc vet mi. </p> </section> </article> <!-- the aside content can also be nested within the main content --> <aside> <h2>Related</h2> <ul> <li><a href=\"#\">Oh I do like to be beside the seaside</a></li> <li><a href=\"#\">Oh I do like to be beside the sea</a></li> <li><a href=\"#\">Although in the North of England</a></li> <li><a href=\"#\">It never stops raining</a></li> <li><a href=\"#\">Oh well…</a></li> </ul> </aside> </main> <!-- The footer that is used across all the pages of our website --> <footer> <p>©Copyright 2050 by nobody. All rights reversed.</p> </footer> </body> </html> Take some time to look over the code and understand it — the comments inside the code should also help you to understand it. We aren't asking you to do much else in this article, because the key to understanding document layout is writing a sound HTML structure, and then laying it out with CSS. We'll wait for this until you start to study CSS layout as part of the CSS topic.\n\nSometimes you'll come across a situation where you can't find an ideal semantic element to group some items together or wrap some content. Sometimes you might want to just group a set of elements together to affect them all as a single entity with some CSS or JavaScript. For cases like these, HTML provides the and elements. You should use these preferably with a suitable attribute, to provide some kind of label for them so they can be easily targeted. is an inline non-semantic element, which you should only use if you can't think of a better semantic text element to wrap your content, or don't want to add any specific meaning. For example: <p> The King walked drunkenly back to his room at 01:00, the beer doing nothing to aid him as he staggered through the door. <span class=\"editor-note\"> [Editor's note: At this point in the play, the lights should be down low]. </span> </p> In this case, the editor's note is supposed to merely provide extra direction for the director of the play; it is not supposed to have extra semantic meaning. For sighted users, CSS would perhaps be used to distance the note slightly from the main text. is a block level non-semantic element, which you should only use if you can't think of a better semantic block element to use, or don't want to add any specific meaning. For example, imagine a shopping cart widget that you could choose to pull up at any point during your time on an e-commerce site: This isn't really an , as it doesn't necessarily relate to the main content of the page (you want it viewable from anywhere). It doesn't even particularly warrant using a , as it isn't part of the main content of the page. So a is fine in this case. We've included a heading as a signpost to aid screen reader users in finding it. Warning: Divs are so convenient to use that it's easy to use them too much. As they carry no semantic value, they just clutter your HTML code. Take care to use them only when there is no better semantic solution and try to reduce their usage to the minimum otherwise you'll have a hard time updating and maintaining your documents.\n\nTwo elements that you'll use occasionally and will want to know about are and . creates a line break in a paragraph; it is the only way to force a rigid structure in a situation where you want a series of fixed short lines, such as in a postal address or a poem. For example: <p> There once was a man named O'Dell<br /> Who loved to write HTML<br /> But his structure was bad, his semantics were sad<br /> and his markup didn't read very well. </p> Without the elements, the paragraph would just be rendered in one long line (as we said earlier in the course, HTML ignores most whitespace); with elements in the code, the markup renders like this: elements create a horizontal rule in the document that denotes a thematic change in the text (such as a change in topic or scene). Visually it just looks like a horizontal line. As an example: <p> Ron was backed into a corner by the marauding netherbeasts. Scared, but determined to protect his friends, he raised his wand and prepared to do battle, hoping that his distress call had made it through. </p> <hr /> <p> Meanwhile, Harry was sitting at home, staring at his royalty statement and pondering when the next spin off series would come out, when an enchanted distress letter flew through his window and landed in his lap. He read it hazily and sighed; \"better get back to work then\", he mused. </p>"
    },
    {
        "link": "https://kinsta.com/blog/html-best-practices",
        "document": "HTML best practices help developers offer innovative and highly interactive websites and web apps. These best practices help you develop the most feature-rich and business-centric applications. Plus, organizations can harness these best practices to provide a seamless user experience.\n\nToday, when we talk about HTML, we typically discuss HTML5 (and not its immediate predecessors). HTML5 is a powerful markup language that allows web developers to create a web document. It’s easy to use and understand, and almost all browsers support it. Also, it’s the foundation of almost all Content Management Systems (CMS)\n\nAs a web developer with minimal experience, questions such as “How can I write better HTML?” often arise. This article aims to help you get started on the right foot.\n\nYou probably already have a grasp of this markup language, but here are some HTML5 best practices that will let you code better.\n\nWhen creating an HTML document, the declaration is required for informing the browser what standards you’re using. Its purpose is to render your markup correctly.\n\nThe declaration should be in the first line of your HTML document. Here is a comparison between its right and wrong implementation:\n\nAlternatively, you can use the doctype corresponding to the HTML/XHTML version you want to use. Learn about the recommended list of doctype declarations to help you choose the right one.\n\nDevelopers know that the purpose of tags is to help web browsers distinguish between HTML content and ordinary content. HTML tags contain an opening tag, content, and closing tag. However, they’re often confused about the proper placement of tags, the elements that require closing tags, or when to omit tags.\n\nFor instance, where’s the best place to put tags?\n\nScript tags are typically placed inside the element. But a modern HTML best practice is to place them at the bottom of the document instead, before closing the tag, to delay their download. The webpage will load the Document Object Model (DOM) first, show it to the user, and then request the scripts afterward, reducing time to first byte (TTFB).\n\nThe browser interprets your HTML document line by line from top to bottom. So, when it reads the head and comes across a script tag, it starts a request to the server to get the file. There’s nothing inherently wrong with this process, but if the page is loading a huge file, it will take a long time and greatly affect the user experience.\n\nUnder the root element is the , or language, attribute. This attribute helps in translating an HTML document into the proper language. The best practice is to keep this attribute’s value as short as possible.\n\nFor example, the Japanese language is mostly used in Japan. Therefore, the country code is not necessary when targeting the Japanese language.\n\nOne of the most common HTML best practices is to check on the do’s and don’ts. Here are some known don’ts in HTML coding:\n\nLike any coding practice, the “keep it simple” principle is very applicable to HTML and HTML5. Generally, HTML5 is compatible with older HTML versions and XHTML. For that reason, we recommend avoiding the use of XML declarations or attributes.\n\nYou don’t need to declare code as such unless you want to write an XHTML document. Similarly, you don’t need XML attributes, such as:\n\nDevelopers should code with SEO in mind. Web contents that are not found are also not indexed. For that reason, here are some best SEO best practices to consider:\n\nThe tag is a handy tag, but misusing it may result in some non-intuitive behaviors. Thus, if you declare a base tag, then every link in the document will be relative unless explicitly specified:\n\nThis syntax changes the default behavior of some links. For example, linking to an external webpage with only the page name and extension:\n\nOr the browser will interpret it as:\n\nThis interpretation becomes chaotic, so it’s safer to always use absolute paths for your links.\n\nOn the other hand, writing metatag descriptions is not strictly a part of HTML best practices, but it’s still equally important. The attribute is what search engine crawlers reference when they index your page, so it’s vital to your SEO health.\n\nThe tag makes a web page search engine-friendly. For one thing, the text inside the tag appears in Google’s Search Engine Result Pages (SERP) and the user’s web browser bar and tabs.\n\nTake, for example, when you search the keyword “HTML5.” The title in this search result indicates the specific title attribute and the author. This is very important in SEO and site traffic generation.\n\nImages Must Have an Alt Attribute\n\nUsing a meaningful alt attribute with elements is a must for writing valid and semantic code.\n\nIn the table below, the bad practice column shows an element without an alt attribute. Although the second example in the same column has an alt attribute, its value is meaningless.\n\nThe meta description is an HTML element that describes and summarizes the contents of a webpage. Its purpose is for the users to find the context of the page. Although metadata doesn’t help anymore with SEO rankings, the meta description still plays a significant role in on-page SEO.\n\nHere is a sample code that includes the keywords, description, author’s name, and character set. The character set is used to support almost all the characters and symbols from different languages. On the other hand, you can set cookies, add a revision date, and allow the page to refresh.\n\nIn the anchor elements, the best practice is to use title attributes to improve accessibility. The title attribute increases the meaning of the anchor tag. The tag (or anchor element) paired with its attribute, creates a hyperlink to web pages, email addresses, and files. It is used to link locations within the same page or external addresses.\n\nCheck the example under the bad practice column — it’s there for being redundant. This type of practice is evident if a user uses a screen reader to read the anchor tag and read the same text twice to the listener. A screen reader is an assistive technology provided to the visually impaired or those with a learning disability. As a good practice, if you’re just repeating the anchor’s text, then it’s better not to use a title at all.\n\nWebsite development isn’t simply a matter of creating a block of text and headers, link pages, and you’re done. There are some best practices in HTML to consider to make the best of your website.\n\nThe HTML documents will still work without the primary elements: , , and . However, pages may not render correctly if these elements are missing. To that end, it’s important to use proper document structure consistently.\n\nFor a thematic grouping of content, use the section element. According to the W3C specification, a should contain a heading (H1, H2, etc.). Some developers skip the use of the heading element entirely, but we recommend including it to reach those better using screen readers:\n\nThe tag serves as a container for an external resource. This includes web pages, pictures, videos, or plug-ins. However, you must consider that most browsers no longer support Java Applets and plug-ins. What’s more, ActiveX controls are no longer supported in any browser, and the support for Shockwave Flash has also been turned off in modern browsers.\n\nWe recommend the following:\n• For a picture, use the tag.\n• For HTML pulled in from another site, use the tag.\n• For videos or audios, use the and tags.\n\nThe alt attribute in the element provides an image description useful to search engines and screen readers. It can come in especially handy to users when the images can’t be processed:\n\nLeave the alt attribute empty if there’s supplemental text to explain the image. This is to avoid redundancy:\n\nLeave elements empty if there are some restrictions in its content. An empty iframe element is always safe:\n\nDevelopers should provide fallback content, or backup links, for any or elements, just as with images. Fallback content is needed, especially for newly introduced elements in HTML:\n\nHTML documents become complicated, especially for web pages with a lot of content. It’s best to reduce the number of elements on a page to as few as you can manage. Learn how to use the heading elements wisely and follow how to elements denote HTML’s content hierarchy. This makes your content more meaningful for your readers, screen-reading software, and search engines.\n\nFor WordPress developers and content creators, use the element for the blog post’s title instead of the site’s name. This helps in search engine crawling, and this approach is SEO-friendly.\n\nIn addition, use the right HTML element to convey the information it contains to achieve a semantic and meaningful content structure. For example, use for emphasis and for heavy emphasis instead of their predecessors or , which are now deprecated.\n\nJust as importantly, use for paragraphs, and avoid using to add a new line between paragraphs. Instead, make use of CSS margin and/or padding properties to position your content better. Sometimes, you might find yourself tempted to use the tag for indentation purposes. Avoid this pitfall — use it exclusively when quoting text.\n\nOne of the best HTML best practices is to use semantically appropriate elements in your page layout. Several elements will help you organize your layout in sections.\n\nWith the wide breadth of topics under HTML layout, it’s best to highlight the do’s and don’ts in layout quickly. For instance, HTML gives more semantic meaning to the header and footer elements, so don’t neglect the use of the tag as it’s used in any given section or article. Aside from controlling the and tags and other stylistic elements of the document, it’s used in headings, publish dates, and other introductory content of your page or section. Similarly, you can do away with the notion that footers belong to the copyright section only — now, you can use it just about everywhere.\n\nFor the element, you should use it for site-wide navigation. There is no need to declare a role as the usage is already implied in the tag.\n\nAs for the element, it is already part of the latest HTML5 versions, which denote the main content of the document body. So, there is no longer any need to use when we have a more specific tag for our main content.\n\nThe is used for a content block. It is a stand-alone and makes sense without the need to give further explanation, while the tag is used to divide a page into different subject areas or to section an individual article. Unfortunately, many developers still use the two interchangeably.\n\nConsider that the tag is a more generic tag than the tag. This means that the former denotes content related to the topic at hand, but not necessarily self-contained. The latter, conversely, is a stand-alone property.\n\nBut when there’s no appropriate markup tag for your purposes, what should you use? The answer is to use when no other element works or when it’s a specifically stylistic element. For our purposes, using is also a bad practice.\n\nLet’s go back to the tag, which is a semantic markup tag. It is not a stylistic one, and it is important to emphasize it. In effect, a good coding practice should include a heading tag.\n\nNow, the don’ts with follows that you shouldn’t use it to tag a wrapper, a container, or any other purely stylistic block. Below is an example of bad coding practice with the tag:\n\nHere is a better approach, but it overuses the tag:\n\nHence, a much better coding practice is:\n\nA popular part of many layouts are figures for data representation, and the element is mostly used with pictures. However, it has a wider range of possible uses, as anything related to the document could be positioned anywhere and wrapped in a element. Some examples include illustrations, tables, or diagrams in a book.\n\nAn interesting characteristic of is that it does not contribute to the document’s outline. Therefore, you can use it to group elements with a common theme — for instance, several images with one common , or even a block of code.\n\nIn grouping elements with , use . The caption should go either directly after the opening tag, or directly before the closing tag :\n\nHTML is one of the core technologies in web development. It has awesome power and features that made it popular with developers and business owners. Frontend development keeps on innovating, and to keep up with it, developers should know the best practices in HTML scripting.\n\nInline styles will make your code cluttered and unreadable. To that end, always link to and use external stylesheets. Also, avoid using import statements in your CSS files as they produce an extra server request.\n\nThe same goes for inline CSS and JavaScript. Apart from readability issues, this will make your document heavier and more difficult to maintain so that you can avoid inlining code.\n\nUsing lowercase characters in code is an industry-standard practice. Although using uppercase or other text cases will still render your page, the problem is not standardization but code readability.\n\nCode readability is an important aspect of coding as it helps make applications maintainable and secure. Not only that, web development mostly comprises a team. Making your code readable makes your work and the work of your team less complicated.\n\nWhile there are many don’ts in coding HTML, we’ll share two basics don’ts in scripting:\n• Write well-indented and consistently formatted codes: Clean and well-written code promotes better readability on your site, which is a huge help to your developer and other people who might work with the site. It also shows great professionalism and attention to detail, reflecting well on your attitude as a developer.\n• Refrain from including excessive comments: Comments are essential and make your code easier to understand. However, HTML syntax is very self-explanatory, so commenting is not necessary unless you have to clarify semantics and naming conventions.\n\nValidating and minifying codes are used to identify errors early on. Don’t wait until you finish your HTML document — make it a habit to validate and identify errors frequently. You can do validation either manually or use any known validator tool such as W3C Markup Validator.\n\nAt the same time, practice minification by removing anything that is not essential such as comments or whitespace. Ensure that you write clean and concise codes to reduce the size of your HTML file. You can use tools such as HTML Minifier and others.\n\nMany HTML5 best practices resources for 2021 are available online to assist you. However, remember the general rule in coding: consistency. This article has provided basic insights and helped you kick-start that frontend development journey. Using this guide, you’ll be an expert in semantically correct HTML5 in no time.\n\nWhen you’re ready, look beyond what HTML can offer and explore some open source HTML frameworks too for building modern, single-page web apps. They offer excellent synchronization between the data and UI and work seamlessly with CSS and JavaScript.\n\nDid we miss any HTML best practices that you use in your own coding? Let us know in the comments section!"
    },
    {
        "link": "https://reddit.com/r/Frontend/comments/k7xk38/is_there_an_industry_standard_in_how_you_need_to",
        "document": "Hi r/frontend, I have a question in regards to 'best practices' in terms of styling (css) your webpages.\n\nSo i've been specifically studying html and css over the past few months. Definitely not at a professional level yet but i've definitely reached a point where i have a pretty good understanding of html and css overall.\n\nI am aware that everyone has their own ways on how they structure their webpages. You can take 10 great developers and tell them to replicate the design of a specific website. At the very end, all 10 websites that each developer created will look and function the exact same way, only difference is the way they put the code together.\n\nHeres where my question comes in. I've been watching some tutorials on how to develop a website from scratch, some parts of their website is coded in a really specific way which is pretty different compared to the code i write but the end result is the same.\n\nIs there an 'industry standard' or a 'best practice' in how you need to structure your html and css that all professional developers just know or will every dev do it their own way and as long as the results are the same at the end, thats all that really matters?\n\nIt is just a little stressful watching a coding tutorial online and having them code a section of a website that is a lot different compared to how i did it, even if my design ends up being pretty identical to how they did it at the end.\n\nI hope my question makes sense, thanks to anyone for any help/advice i can get!"
    },
    {
        "link": "https://freecodecamp.org/news/html-best-practices",
        "document": "HTML is the backbone of any website. It's the first thing people see. Without it, there would be no website.\n\nBecause of this, it's important that you stick to good coding practices. If you don't follow the best practices, you will create a bad user experience for the web user.\n\nThere's always something new to learn in HTML, whether you're a coding newbie or an experienced pro.\n\nIn this article, we will talk about the basic best practices of HTML.\n\nHTML best practices are rules that help you create websites that are easy to maintain and read.\n\nHere are some guidelines to keep in mind when building an HTML-based website:\n\nUse only one\n\nThere are six different heading tags in HTML, to . The tag is the main heading (subject of the web page) while the tag is the least important heading.\n\nThe tag is bigger than the tag, the tag is bigger than the tag, all the way down to the tag. Each of the headings decreases in size according to its importance.\n\nIt is important to avoid using more than one element for one code sheet.\n\nIn the above example, we used the tag on the first and second . Coding this way will work, but although you will achieve the same goal, this is not the best practice.\n\nDo this instead ⬇️:\n\nHaving only one element on a web page is vital for Search Engine Optimization (SEO). It helps search engines understand what a web page is all about (the main idea of a web page).\n\nDo not skip heading levels in HTML\n\nWhen using the header tags, it's vital to proceed from to to to and so on...\n\nDon't use and then jump to when using header tags. It's difficult for web visitors using a screen reader to understand the contents of your web page when you skip heading levels.\n\nA screen reader is a technology that helps people who have difficulty seeing access and interact with digital content, like websites or applications via audio or touch. The main users of screen readers are people who are blind or have very limited vision.\n\nYou can read a little introduction to screen readers here.\n\nDo this instead ⬇️:\n\nUse the figure element to add captions to your images in HTML\n\nIt's advisable to use the element when adding captions to your images. It is important to use the element along with the element for it to work.\n\nThe above example will work as expected but is not the best way to go about it. In a situation where the image fails to load you will have the text and the text on the element showing on the screen. It will be difficult for a web visitor using a screen reader to tell the difference between the and text.\n\nAlways keep in mind that just because your code works doesn't mean you're following best practices.\n\nDo this instead ⬇️:\n\nThe above example is the best way to add captions to your images.\n\nIt is important to add captions to your images this way for:\n• Search engine optimization: It is easier to find your images on search engines.\n• It will be easier for web visitors who use screen readers to understand the content of your web page.\n\nHTML semantic elements mark up the structure of a document in a more meaningful way on a webpage. It is best practice to use HTML semantic elements for the proper assembly of your web page.\n\nAvoid using in place of HTML semantics. Do not use elements to show headers and footers on your web page. Use semantic and elements instead.\n\nThe element shows the navigation or the opening part of the web page.\n\nThe element shows copyright information or navigation links about the web page.\n\nIn the above example, we used the tag as a container for the and . Coding this way will work, but although you will achieve the same goal, this is not the best practice.\n\nDo this instead ⬇️:\n\nThe above example is the best way to add and to your web page.\n\nIt is important to add and using HTML semantic elements because:\n• None Using semantic elements for your and makes your code easier to read.\n• None It provides a better user experience for web visitors. It will be easier for web visitors who use screen readers to understand the content of your web page.\n\nCheckout this article to know more about HTML semantic elements.\n\nAvoid using and to bold and italicize texts on a web page\n\nThe and tags are also known as the bold and italics tag. They are both used to highlight words in a text on a web page.\n\nYou shouldn't use and for bolding and italics because they have no semantic meaning. Use the CSS property or use the and the tags instead.\n\nYou use the tag to make a text on a webpage important. It highlights or bolds a text on a webpage. The tag emphasizes the text in a webpage. It also displays the text in italics like the tag.\n\nThe displayed texts will be bold and italicized in the example above. It will be of no importance to the web user using a screen reader. It has no semantic meaning.\n\nThe HTML5 specification says that the and tags should only be used as a last resort if no other tag is available.\n\nDo this instead ⬇️:\n\nBlock-level elements start in a new line on a web page. By default, they stretch from the beginning of the line to the end on a web page. You won't be able to add more content inline to a block element without using CSS.\n\nThe , , and the elements are some of the examples of a block level element.\n\nThe inline element covers the smallest area on a web page. They do not start on a new line on a web page.\n\nThe , , and the elements are some of the examples of inline elements.\n\nYou cannot wrap inside a element because is a block-level element and is an inline element.\n\nDo this instead ⬇️:\n\nThe above example is the best way to nest inline elements inside a block-level element.\n\nIt is important to note that:\n• The block-level element cannot be nested inside an inline element.\n• The inline element can be nested inside a block-level element.\n• The inline and the block-level element can be nested inside the block-level element.\n\nJust a quick note: nested, in the above example, means to place inside. So when I say it can't be nested, I'm referring to the fact that it can't be placed inside.\n\nI hope you understand these three simple rules used for nesting elements.\n\nIt is also possible to convert block-level elements to inline elements and vice versa using CSS. Use and to convert from block-level to inline element.\n\nIt's important to remember that just because your code works doesn't mean you're following best practices.\n\nThis is why I always recommend using the W3C markup validation service to double-check your codes.\n\nThis validator checks the markup validity of web documents in HTML, XHTML, SMIL, MathML, etc: W3c markup validation service.\n\nYou can double-check your code by copying its URL and pasting it on the site or uploading your HTML file.\n\nI hope this article helped you learn a thing or two about HTML best practices. I tried to include only the most useful tips so you can start using them right away!\n\nIf you have any other questions or comments, please feel free to contact me anytime on Twitter: @cessss_ and LinkedIn: Success\n\nI'll try to respond as soon as possible! Thank you for reading 💙."
    },
    {
        "link": "https://sitepoint.com/a-basic-html5-template",
        "document": "In this article, we’ll look at how to get started with building your own HTML5 boilerplate. We’ll walk through the essential elements of an HTML base template, ending with a basic template that you can take with you and build upon.\n\nBy the end of this article, you’ll have your own HTML5 boilerplate. If you’d rather just grab the HTML template code now and read this article later, here’s our finished HTML5 template.\n• HTML5 boilerplates serve as reusable templates that include essential HTML elements, helping to avoid repetitive coding at the start of each project.\n• A basic HTML5 template should include a doctype declaration, the `` element with language attributes, character encoding via ` `, and viewport settings for responsive design.\n• Key elements within the `` section of an HTML5 boilerplate typically contain metadata for SEO, links to CSS stylesheets, and optionally, JavaScript files.\n• For social media optimization, incorporating Open Graph meta tags can enhance how content appears when shared across social platforms.\n• Including favicons and Apple touch icons in the boilerplate helps in establishing brand identity and improves user experience across devices.\n• Placing JavaScript files just before the closing “ tag can improve page load speed, as it allows the browser to render the page faster by deferring the loading of scripts.\n\nWhat Is an HTML Boilerplate?\n\nEvery website is different, but there are many things that are essentially the same from one web site to the next. Rather than write the same code over and over, it’s a good idea to create your own “boilerplate”. A boilerplate is a template that you break out each time you start a project, saving you from having to start from scratch.\n\nAs you learn HTML5 and add new techniques to your toolbox, you’re likely going to want to build yourself an HTML boilerplate to start off all future projects. This is definitely worth doing, and there are many starting points online to help you build your own HTML5 template.\n\nA Really Simple Example of a Starter HTML 5 Boilerplate\n\nThe full template that we offer at the end of this article has a lot in it. But you don’t have to get that fancy — especially if you’re just getting started. Here’s a really simple “getting started” HTML5 template that may be all you need:\n\nIf you paste the code above into an file, you’ll have a web page! This basic HTML5 template includes some of the elements listed in the next section, as well as a simple heading element that will be displayed in your web browser.\n\nLet’s look at this anatomy in more detail.\n\nThe Anatomy of an HTML5 Template\n\nAn HTML template typically includes the following parts:\n\nOther than the document type declaration and element, the elements listed above will mostly be found inside the section of the HTML template.\n\nYour HTML5 template needs to start with a document type declaration, or doctype. A doctype is simply a way to tell the browser — or any other parser — what type of document it’s looking at. In the case of HTML files, it means the specific version and flavor of HTML. The doctype should always be the first item at the top of any HTML file. Many years ago, the doctype declaration was an ugly and hard-to-remember mess, often specified as “XHTML Strict” or “HTML Transitional”.\n\nWith the advent of HTML5, those indecipherable eyesores are gone and now all you need is this:\n\nSimple, and to the point. The doctype can be written in uppercase, lowercase, or mixed case. You’ll notice that the “5” is conspicuously missing from the declaration. Although the current iteration of web markup is known as “HTML5”, it really is just an evolution of previous HTML standards — and future specifications will simply be a development of what we have today. There’s never going to be an “HTML6”, so it’s common to refer to the current state of web markup as simply “HTML”.\n\nBecause browsers are required to support older content on the Web, there’s no reliance on the doctype to tell browsers which features should be supported in a given document. In other words, the doctype alone isn’t going to make your pages compliant with modern HTML features. It’s really up to the browser to determine feature support on a case-by-case basis, regardless of the doctype used. In fact, you can use one of the older doctypes with new HTML5 elements on a page and the page will render the same as it would if you used the new doctype.\n\nThe element is the top-level element in an HTML file — meaning that it contains everything in the document other than the doctype. The element is divided into two parts — the and sections. Everything else in the web page file will be placed either in the element or inside the element.\n\nThe code below shows the element, which follows the doctype declaration and includes the and elements:\n\nThe section contains important information about the document that isn’t displayed to the end user — such as the character encoding and links to CSS files and possibly JavaScript files too. This information is used by machines such as browsers, search engines and screen readers:\n\nAll of the elements contained between those tags above is important but not seen by end users — except perhaps the text, which will appear in online searches and in browser tabs.\n\nThe section contains everything that’s displayed in the browser — such as text, images, and so on. If you want to present something to the end user, make sure it’s placed between the opening and closing tags:\n\nWhat is the Attribute?\n\nThe element ideally includes the attribute, as shown in the code above ( ). Its main purpose is to tell assistive technologies such as screen readers how to pronounce the words when read aloud. (This attribute isn’t required for a page to validate, but you’ll get a warning from most validators if you don’t include it.)\n\nThe attribute shown above has a value of , which specifies that the document is written in English. There are values for all other spoken languages, such as for French, for German, for Hindi, and so on. (You can find a comprehensive list of language codes on Wikipedia.)\n\nThe first line inside the section of an HTML document is the one that defines the character encoding for the document. The letters and symbols that we read on a web page are defined for computers as a series of numbers, and some characters (such as letters) are encoded in multiple ways. So it’s useful to tell your computer which encoding your web page should refer to.\n\nIndicating the character encoding is an optional feature and won’t cause any warnings in validators, but it’s recommended for most HTML pages:\n\nNote: to ensure that certain older browsers read the character encoding correctly, the entire character encoding declaration must be included somewhere within the first 512 characters of your document. It should also appear before any content-based elements (like the element that appears later in our example).\n\nWhy use UTF-8 character encoding in HTML5 templates?\n\nThe character encoding example above uses the UTF-8 character set. In nearly all cases, is the value you should in your documents. This encoding covers a wide range of characters not included in other encodings. You’ve probably come across weird characters on the Web — such as � — that were obviously a mistake. This often happens because the browser can’t find the intended character in the character set that’s been specified in the document.\n\nUTF-8 covers a wide range of characters, including the many characters of languages across the globe, and also lots of useful symbols. As explained by the World Wide Web Consortium:\n\nA full explanation of character encoding is beyond the scope of this article, but if you want to delve a little deeper, you can read about character encoding in the HTML specification.\n\nWhat Does X-UA-Compatible Mean?\n\nYou will sometimes see this line in the head of an HTML document:\n\nThis tag allows web authors to choose what version of Internet Explorer the page should be rendered as. Now that Internet Explorer is largely just a bad memory, you can safely leave this line out of your code. (We’ve left it out of our HTML5 boilerplate.) If you know for sure that your web page might be viewed in old versions of IE, it might be worth including it. You can read more about this meta tag on the Microsoft site.\n\nThe viewport meta element is a feature you’ll see in just about every HTML5 template. It’s important for responsive web design and mobile-first design:\n\nThis element includes two attributes that work together as a name/value set. In this case, the is set to and the value is . This is used by mobile devices only. You’ll notice the value has two parts to it, described here:\n• : the pixel width of the viewport that you want the website to be rendered at.\n• : this should be a positive number between 0.0 and 10.0. A value of “1” indicates that there’s a 1:1 ratio between the device width and the viewport size.\n\nYou can read up a little more on these meta element features on MDN, but for now just know that, in most cases, this meta element with these settings is best for mobile-first, responsive websites.\n\nThe next section of the HTML base template contains the following three lines:\n\nThe is what’s displayed in the browser’s title bar (such as when you hover over a browser tab), and it’s also shown in search results. This element is the only mandatory element inside the section. The and meta elements are optional, but they do provide important information for search engines. In a search result, the title and description in the code sample above would appear as shown in the following image.\n\nYou can put as many valid meta elements in the as you like.\n\nAs said above, all meta elements are optional, but many have benefits for SEO and social media marketing. The next section in our HTML5 boilerplate includes some of those meta element options:\n\nThese elements take advantage of something called the Open Graph protocol, and there are many others you can use. These are the ones you’re likely to use most often. You can view a full list of available Open Graph meta options on the Open Graph website.\n\nThe ones we’re including here will enhance the appearance of the web page when it’s linked in a social media post. For example, the five elements included here will appear in social cards embedding the following data:\n• the type of content being delivered\n• the canonical URL for the content\n• an image to associate with the content\n\nWhen you see a post shared on social media, you’ll often see these bits of data automatically added to the social media post. For example, below is what would appear in a tweet if you included a link to GitHub’s home page.\n\nThe next section in the HTML5 template includes elements that indicate resources to include as a favicon and apple touch icon:\n\nA favicon will appear in the browser tab when someone is viewing your site. The file is for legacy browsers and doesn’t have to be included in the code. As long as your file is included in the root of your project, the browser will automatically find it. The file is for modern browsers that support SVG icons. You could also use a file instead.\n\nThe last element references the icon that’s used on Apple devices when the page is added to the user’s home screen.\n\nThere are other options you can include here, including a web app manifest file that references other icons. For a full discussion, we recommend Andrey Sitnik’s post on the subject. But the ones included here will suffice for a simple HTML starter template.\n\nThe last two significant portions of our HTML starter template are the references to one or more stylesheets and possibly also JavaScript files. Both are optional, of course, although it would be rare to have a site without at least some CSS styling.\n\nA stylesheet can be included anywhere in a document, but you’ll normally see it inside the section:\n\nThe element points the web browser to an external stylesheet so that it can apply those CSS styles to the page. The element needs attribute of . In the past, a attribute was also normally included, but it was never actually needed, so just leave it out if you find older code on the Web that includes it.\n\nNotice that we added the query string to the end of the CSS link. This is completely optional. It’s a handy trick when you’ve updated your stylesheet to also update this query string (say, to or ), because doing so ensures that browsers will throw out any older, cached copy of the CSS file and load the fresh, new version.\n\nIt’s worth noting that you don’t have to use a element to include CSS on a web page, as you can instead place all your styles on the page itself within tags in the section. This is handy when experimenting with layouts, but in general it’s not efficient to do this on a live site, as those styles won’t be accessible on other pages, leading to inefficient and/or repetitive code.\n\nJavaScript code is normally added to an HTML page via a element. This element’s attribute provides a link to the JavaScript file. You can link to JavaScript files from anywhere in your HTML template. You’ll often see them within the section, but as a general rule, it’s considered best practice to place them at the bottom of the document, just before the closing tag:\n\nPlacing the element at the bottom of the page is partly to help the page-load speed. When a browser encounters a script, it will pause downloading and rendering the rest of the page while it parses the script. This results in the page appearing to load much more slowly when large scripts are included at the top of the page before any content. Thus, most scripts should be placed at the very bottom of the page, so that they’ll only be parsed after the rest of the page has loaded.\n\nAnother advantage of placing scripts near the bottom of the page is that any elements the script needs to act on are loaded first. That said, in some cases the script may need to be placed in the head of your document, because you want it to take effect before the browser starts rendering the page.\n\nSimilar to stylesheet references, the attribute on scripts is not (and never was) needed. Since JavaScript is, for all practical purposes, the only real scripting language used on the Web, and since all browsers will assume that you’re using JavaScript even when you don’t explicitly declare that fact, you can safely leave off , which often appears in legacy code.\n\nAs with CSS, you can actually embed JavaScript in the template itself, rather than link to an external JavaScript file. Again, this is generally inefficient, so don’t do this unless you’re testing some code, or if you’re sure the script won’t be needed on any other pages. You can embed your script by placing it inside plain tags:\n\nA Note About Older Browsers and New Elements\n\nWhen HTML5 was introduced, it included a number of new elements, such as and . You might think that support for unrecognized elements would be a major problem for older browsers — but it’s not! The majority of browsers don’t actually care what tags you use. If you had an HTML document with a element (or even a element) in it, and your CSS attached some styles to that element, nearly every browser would proceed as if this were totally normal, applying your styling without complaint.\n\nOf course, such a hypothetical document would fail to validate and may have accessibility problems, but it would render correctly in almost all browsers — the exception being old versions of Internet Explorer (IE). Prior to version 9, IE prevented unrecognized elements from receiving styling. These mystery elements were seen by the rendering engine as “unknown elements”, so you were unable to change the way they looked or behaved. This includes not only our imagined elements, but also any elements that had yet to be defined at the time those browser versions were developed, including new HTML5 elements.\n\nFortunately, older browsers that don’t support styling of new elements are virtually nonexistent today, so you can safely use any new HTML element without worry in almost any project.\n\nThat being said, if you really need to support ancient browsers, you can still use the trusty HTML5 Shiv, a simple piece of JavaScript originally developed by John Resig. Inspired by the work of Sjoerd Visscher, it made the new HTML5 elements styleable in older versions of IE. Really, though, this shouldn’t be needed today. As indicated by caniuse.com, HTML5 elements are supported across all in-use browsers.\n\nHere’s our final HTML5 Template — a basic boilerplate that you can use for any project:\n\nYou can drop this simple, ready-to-use HTML5 template code into any project today! Building on this, you can add whatever content you want between the and tags.\n\nThere are lots of HTML starter templates and frameworks available online that come with ready-made CSS and JavaScript files and a lot of pre-written content that you can play around with and modify. That wasn’t our aim here. The basic boilerplate we’ve presented here includes all the things you’re likely to need when designing any web page, so that you don’t have to start completely from scratch every time.\n\nFeel free to copy the basic HTML page template we showed at the start, or the complete one shown above, and use them in your projects. Over time, you’ll probably find that there are bits you don’t often need, and other things we didn’t mention here that you use a lot, so you can update your boilerplate to adapt to your workflow.\n\nA great way to take your web layouts to the next level is with The Principles of Beautiful Web Design, 4th Edition. This book will teach you the principles of design and show you how to implement them for the Web. It was completely rewritten in September 2020 and includes cutting-edge techniques you haven’t read about anywhere else.\n\nTo hone your CSS knowledge, our curriculum of modern CSS projects will help you master the latest, advanced editions to CSS3.\n\nBeyond that point, you can take your website or web app development to the next level with interactivity and programmatic, reactive UIs. Check out SitePoint’s extensive resources on JavaScript and React, for example. And find out how to start new projects faster with our guide to the best scaffolding web tools and libraries. Alternatively, if you’d like to build web experiences without learning to code, read our primer on the no-code movement. The latest no-code tools have changed the game. For the first time, they’re powerful enough to provide a serious alternative to coding in many situations."
    },
    {
        "link": "https://w3schools.com/html/html_css.asp",
        "document": "CSS saves a lot of work. It can control the layout of multiple web pages all at once.\n\nCascading Style Sheets (CSS) is used to format the layout of a webpage.\n\nWith CSS, you can control the color, font, the size of text, the spacing between elements, how elements are positioned and laid out, what background images or background colors are to be used, different displays for different devices and screen sizes, and much more!\n\nTip: The word cascading means that a style applied to a parent element will also apply to all children elements within the parent. So, if you set the color of the body text to \"blue\", all headings, paragraphs, and other text elements within the body will also get the same color (unless you specify something else)!\n\nCSS can be added to HTML documents in 3 ways:\n• Inline - by using the attribute inside HTML elements\n• Internal - by using a element in the section\n• External - by using a element to link to an external CSS file\n\nThe most common way to add CSS, is to keep the styles in external CSS files. However, in this tutorial we will use inline and internal styles, because this is easier to demonstrate, and easier for you to try it yourself.\n\nAn inline CSS is used to apply a unique style to a single HTML element.\n\nAn inline CSS uses the attribute of an HTML element.\n\nThe following example sets the text color of the element to blue, and the text color of the element to red:\n\nAn internal CSS is used to define a style for a single HTML page.\n\nAn internal CSS is defined in the section of an HTML page, within a element.\n\nThe following example sets the text color of ALL the elements (on that page) to blue, and the text color of ALL the elements to red. In addition, the page will be displayed with a \"powderblue\" background color:\n\nAn external style sheet is used to define the style for many HTML pages.\n\nTo use an external style sheet, add a link to it in the section of each HTML page:\n\nThe external style sheet can be written in any text editor. The file must not contain any HTML code, and must be saved with a .css extension.\n\nHere is what the \"styles.css\" file looks like:\n\nHere, we will demonstrate some commonly used CSS properties. You will learn more about them later.\n\nThe CSS property defines the text color to be used.\n\nThe CSS property defines the font to be used.\n\nThe CSS property defines the text size to be used.\n\nThe CSS property defines a border around an HTML element.\n\nTip: You can define a border for nearly all HTML elements.\n\nThe CSS property defines a padding (space) between the text and the border.\n\nThe CSS property defines a margin (space) outside the border.\n\nExternal style sheets can be referenced with a full URL or with a path relative to the current web page.\n• Use the HTML attribute for inline styling\n• Use the HTML element to define internal CSS\n• Use the HTML element to refer to an external CSS file\n• Use the HTML element to store <style> and <link> elements\n• Use the CSS property for text colors\n• Use the CSS property for text fonts\n• Use the CSS property for text sizes\n• Use the CSS property for borders\n• Use the CSS property for space inside the border\n• Use the CSS property for space outside the border"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics",
        "document": "CSS allows you to create great-looking web pages, but how does it work under the hood? This article explains what CSS, what the basic syntax looks like, and how your browser applies CSS to HTML to style it.\n\nIn this article, we will take a simple HTML document and apply CSS to it, learning some practical details of the language along the way. We will also review the CSS syntax features you've not looked at yet.\n\nAs you know from your study of HTML, elements can have attributes that give further detail about the element being marked up. In CSS you can use attribute selectors to target elements with certain attributes. This lesson will show you how to use these very useful selectors.\n\nThe next set of selectors we will look at are referred to as pseudo-classes and pseudo-elements. There are a large number of these, and they often serve quite specific purposes. Once you know how to use them, you can look through the different types to see if there is something which works for the task you are trying to achieve.\n\nThe final selectors we will look at are called combinators. Combinators are used to combine other selectors in a way that allows us to select elements based on their location in the DOM relative to other elements (for example, child or sibling).\n\nEverything in CSS has a box around it, and understanding these boxes is key to being able to create more complex layouts with CSS, or to align items with other items. In this lesson, we will take a look at the CSS Box model. You'll get an understanding of how it works and the terminology that relates to it.\n\nThe aim of this lesson is to develop your understanding of some of the most fundamental concepts of CSS — the cascade, specificity, and inheritance — which control how CSS is applied to HTML and how conflicts between style declarations are resolved.\n\nCSS rules contain declarations, which in turn are composed of properties and values. Each property used in CSS has a value type that describes what kind of values it is allowed to have. In this lesson, we will take a look at some of the most frequently used value types, what they are, and how they work.\n\nUnderstanding how big the different features in your design will be is important. In this lesson we will summarize the various ways elements get a size via CSS and define a few terms about sizing that will help you in the future.\n\nIn this lesson, we will take a look at some of the creative things you can do with CSS backgrounds and borders. From adding gradients, background images, and rounded corners, backgrounds and borders are the answer to a lot of styling questions in CSS.\n\nIn this lesson we will take a look at how certain special elements are treated in CSS. Images, other media, and form elements behave a little differently from regular boxes in terms of your ability to style them with CSS. Understanding what is and isn't possible can save some frustration, and this lesson will highlight some of the main things that you need to know.\n\nThis article will give you guidance on how to go about debugging a CSS problem, and show you how the DevTools included in all modern browsers can help you to find out what is going on."
    },
    {
        "link": "https://w3schools.com/html/html_layout.asp",
        "document": "London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.\n\nStanding on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/CSS_layout/Introduction",
        "document": "This lesson recaps some of the CSS layout features we've already touched upon in previous modules, such as different values, as well as introducing some of the concepts we'll be covering throughout this module. It also covers the concept of normal flow in depth.\n• Recognise the methods used to implement modern page layouts.\n• Understand that normal flow is the default way a browser lays out block and inline content.\n• Know that properties such as , , and are intended to change how the browser lays out content. CSS page layout techniques allow us to take elements contained in a web page and control where they're positioned relative to the following factors: their default position in normal layout flow, the other elements around them, their parent container, and the main viewport/window. The page layout techniques we'll mention below and cover in detail through the module have their uses, advantages, and disadvantages. No technique is designed to be used in isolation. By understanding what each layout method is designed for you'll be in a good position to understand which method is most appropriate for each task.\n\nElements on a webpage lay out in normal flow if you haven't applied any CSS to change the way they behave. You can change how elements behave either by adjusting their position in normal flow or by removing them from it altogether. Starting with a solid, well-structured document that's readable in normal flow is the best way to begin any webpage. It ensures that your content is readable even if the user's using a very limited browser or a device such as a screen reader that reads out the content of the page. In addition, since normal flow is designed to make a readable document, by starting in this way you're working with the document rather than struggling against it as you make changes to the layout. Before digging deeper into different layout methods, it's worth revisiting some of the things you have studied in previous modules with regard to normal document flow.\n\nHow are elements laid out by default? The process begins as the boxes of individual elements are laid out in such a way that any padding, border, or margin they happen to have is added to their content. This is what we call the box model. By default, a block-level element's content fills the available inline space of the parent element containing it, growing along the block dimension to accommodate its content. The size of inline-level elements is just the size of their content. You can set or on some elements that have a default property value of , like , but the value will still remain . If you want to control the property of an inline-level element in this manner, use CSS to set it to behave like a block-level element (e.g., with or , which mixes characteristics from both). That explains how elements are structured individually, but how about the way they're structured when they interact with one another? The normal layout flow (mentioned in the layout introduction article) is the system by which elements are placed inside the browser's viewport. By default, block-level elements are laid out in the block flow direction, which is based on the parent's writing mode (initial: horizontal-tb). Each element will appear on a new line below the last one, with each one separated by whatever margin that's been specified. In English, for example, (or any other horizontal, top to bottom writing mode) block-level elements are laid out vertically. Inline elements behave differently. They don't appear on new lines; instead, they all sit on the same line along with any adjacent (or wrapped) text content as long as there is space for them to do so inside the width of the parent block level element. If there isn't space, then the overflowing content will move down to a new line. If two vertically adjacent elements both have a margin set on them and their margins touch, the larger of the two margins remains and the smaller one disappears. This is known as margin collapsing. Collapsing margins is only relevant in the vertical direction.\n\nLet's look at a simple example that explains all of this: <h1>Basic document flow</h1> <p> I am a basic block level element. My adjacent block level elements sit on new lines below me. </p> <p> By default we span 100% of the width of our parent element, and we are as tall as our child content. Our total width and height is our content + padding + border width/height. </p> <p> We are separated by our margins. Because of margin collapsing, we are separated by the size of one of our margins, not both. </p> <p> Inline elements <span>like this one</span> and <span>this one</span> sit on the same line along with adjacent text nodes, if there is space on the same line. Overflowing inline elements will <span>wrap onto a new line if possible (like this one containing text)</span>, or just go on to a new line if not, much like this image will do: <img src=\"https://mdn.github.io/shared-assets/images/examples/long.jpg\" alt=\"snippet of cloth\" /> </p> Note how the HTML is displayed in the exact order in which it appears in the source code, with block elements stacked on top of one another. For many of the elements on your page, the normal flow will create exactly the layout you need. However, for more complex layouts you will need to alter this default behavior using some of the tools available to you in CSS. Starting with a well-structured HTML document is very important because you can then work with the way things are laid out by default rather than fighting against it.\n\nThe methods that can override normal flow and change how elements are laid out in CSS, which we will cover in detail in this module, are: Standard values such as , or can change how elements behave in normal flow, for example, by making a block-level element behave like an inline-level element (we covered these back in the Box model lesson). Applying a value such as can cause block-level elements to wrap along one side of an element, like the way images sometimes have text floating around them in magazine layouts. The property allows you to precisely control the placement of boxes inside other boxes. positioning is the default in normal flow, but you can cause elements to be laid out differently using other values, for example, fixing them to the top of the browser viewport using . We also have entire layout methods that are enabled via specific values. The most important ones for you to know about are CSS grid and Flexbox, which both alter how child elements are laid out inside their parents. Responsive design refers to creating layouts that adapt to different devices the web page is rendered on (for example, desktops and mobile phones). Responsive design doesn't provide any specific layout tools of its own; its most significant component is the at-rule, which allows you to apply different layouts depending on device attributes such as screen width or resolution."
    },
    {
        "link": "https://urnisha09.medium.com/mastering-css-layout-a-comprehensive-guide-to-key-properties-8ca7edd0bf72",
        "document": "CSS layout plays a pivotal role in shaping the visual structure of web pages. Understanding and mastering layout properties is essential for creating visually appealing, responsive, and well-structured websites.\n\nIn this comprehensive guide, we’ll delve into key CSS layout properties, including display (inline, block, inline-block), width and max-width, position (static, relative, absolute, fixed, sticky), z-index, overflow (visible, hidden, scroll, auto), float (left, right, none, inherit), and clear (left, right, none, both, inherit). We’ll also explore techniques for aligning elements both horizontally and vertically.\n\nWhen it comes to controlling the layout of elements on a web page, the property stands out as one of the most crucial tools in a web developer's arsenal. This property is used to determine how an HTML element is presented within the document.\n\nEvery HTML element comes with a default display value, which is based on its type. The most common default display values are ‘block’ and ‘inline’.\n\nA block-level element always starts on a new line and occupies the full width available, extending from the left to the right.\n\nExamples of block-level elements include , to , , , , , and .\n\nAn inline element doesn’t initiate a new line and takes up only as much width as necessary.\n\nThe property is utilized to modify the default display behavior of HTML elements. One common use is to switch an inline element to a block element or vice versa, providing more flexibility in designing the layout while adhering to web standards.\n\nNote: Altering the display property does not change the type of element; it only affects how the element is visually displayed.\n• Compared to , the major difference is that allows to set a width and height on the element. Also, with , the top and bottom margins/paddings are respected, but with they are not.\n• Compared to , the major difference is that does not add a line-break after the element, so the element can sit next to other elements.\n\nThe following example shows the different behavior of , and :\n\nOne common use for display: inline-block is to display list items horizontally instead of vertically. The following example creates horizontal navigation links:\n\nHiding elements is a common task in web development and the property plays a key role in this. Two commonly used approaches are and .\n\nThis property removes the element from the document, making it completely invisible and taking up no space in the layout. It is often employed with JavaScript to dynamically hide and show elements without deleting or recreating them.\n\nThis property hides the element while retaining its space in the layout. Although invisible, the hidden element affects the document’s overall structure.\n\nIt’s essential to understand the difference between and . While both hide elements, retains the space it occupies in the layout, whereas removes the element from the document, not taking up any space.\n\nDifferences between display: none; and visibility: hidden\n\nIn addition to the basic display values, CSS offers various layout properties to further enhance the design and responsiveness of web pages.\n\nA block-level element always takes up the full width available (stretches out to the left and right as far as it can).\n\nSetting the width of a block-level element will prevent it from stretching out to the edges of its container. Then, you can set the margins to auto, to horizontally center the element within its container. The element will take up the specified width, and the remaining space will be split equally between the two margins.\n\nNote: The problem with the <div> above occurs when the browser window is smaller than the width of the element. The browser then adds a horizontal scrollbar to the page.\n\nUsing max-width instead, in this situation, will improve the browser’s handling of small windows. This is important when making a site usable on small devices.\n\nResize the browser window to less than 500px wide, to see the difference between the two divs: https://www.w3schools.com/css/tryit.asp?filename=trycss_max-width\n\nThe property is used to specify the positioning method for an element. There are five different values for the property: , , , , and .\n\nElements are then positioned using the top, bottom, left, and right properties. However, these properties will not work unless the position property is set first. They also work differently depending on the position value.\n\nBy default, HTML elements are positioned statically. They follow the normal flow of the page and are not affected by the , , , and properties.\n\nElements with are positioned relative to their normal position. The , , , and properties can be used to adjust their position. Other content will not be adjusted to fit into any gap left by the element.\n\nElements with are positioned relative to the viewport, ensuring they stay in the same place even when the page is scrolled. The top, right, bottom, and left properties are used to position the element. A fixed element does not leave a gap in the page where it would normally have been located.\n\nElements with are positioned relative to the nearest positioned ancestor(instead of positioned relative to the viewport, like fixed). However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.\n\nNote: Absolute positioned elements are removed from the normal flow, and can overlap elements.\n\nThe property is based on the user's scroll position. A sticky element toggles between and , depending on the scroll position. It is positioned relative until a given offset position is met in the viewport — then it “sticks” in place (like position:fixed).\n\nNote: Internet Explorer does not support sticky positioning. Safari requires a -webkit- prefix (see example below). You must also specify at least one of top, right, bottom or left for sticky positioning to work.\n\nThe ability to position text over an image is a common design requirement. Text can be positioned at various locations, including-\n\nWhen elements overlap, the property determines the stacking order of elements. It specifies which element should appear in front of or behind others and can have positive or negative values.\n\nBecause the image has a z-index of -1, it will be placed behind the text.\n\nNote: only works on positioned elements ( , , , or ) and flex items.\n\nWithout a specified , the element defined last in the HTML code will be shown on top.\n\nThe property manages content that is too big to fit into an area, providing values like , , , and .\n\nNote: The overflow property only works for block elements with a specified height.\n\nBy default, the overflow is visible, meaning that it is not clipped and it renders outside the element’s box.\n\nWith the hidden value, the overflow is clipped, and the rest of the content is hidden.\n\nSetting the value to scroll, the overflow is clipped and a scrollbar is added to scroll inside the box. Note that this will add a scrollbar both horizontally and vertically (even if you do not need it).\n\nThe auto value is similar to scroll, but it adds scrollbars only when necessary.\n\nThe and properties specifies whether to change the overflow of content just horizontally or vertically (or both):\n• overflow-x specifies what to do with the left/right edges of the content.\n• overflow-y specifies what to do with the top/bottom edges of the content.\n• The CSS property specifies how an element should float.\n• The CSS property specifies what elements can float beside the cleared element and on which side.\n\nThe property is used for positioning and formatting content. It can take values like , , , and . Floating elements can be useful for creating layouts where elements are positioned side by side.\n\nNormally div elements will be displayed on top of each other. However, if we use float: left we can let elements float next to each other.\n\nWhen we use the float property, and we want the next element below (not on right or left), we will have to use the property. The property specifies what should happen with the element that is next to a floating element.\n\nThe clear property can have one of the following values:\n• none — The element is not pushed below left or right floated elements. This is default\n• left — The element is pushed below left floated elements\n• right — The element is pushed below right floated elements\n• both — The element is pushed below both left and right floated elements\n• inherit — The element inherits the clear value from its parent\n\nWhen clearing floats, you should match the clear to the float: If an element is floated to the left, then you should clear to the left. Your floated element will continue to float, but the cleared element will appear below it on the web page.\n\nThis example clears the float to the left. Here, it means that the <div2> element is pushed below the left floated <div1> element:\n\nIf a floated element is taller than the containing element, it will “overflow” outside of its container. We can then add a clearfix hack to solve this problem.\n\nThe property is versatile and can be used for various layout scenarios. Here are some examples:\n\nWith the float property, it is easy to float boxes of content side by side.\n\nThe grid of boxes can also be used to display images side by side.\n\nn the previous example, you learned how to float boxes side by side with an equal width. However, it is not easy to create floating boxes with equal heights. A quick fix however, is to set a fixed height, like in the example below.\n\nHowever, this is not very flexible. It is ok if you can guarantee that the boxes will always have the same amount of content in them. But many times, the content is not the same. This is where CSS3 Flexbox comes in handy — as it can automatically stretch boxes to be as long as the longest box.\n\nNote: Flexbox is a more flexible solution for equal-height boxes.\n\nExample of Using Flexbox to Create Flexible Boxes\n\nYou can also use float with a list of hyperlinks to create a horizontal menu.\n\nIt is also common to do entire web layouts using the float property:\n\nAligning elements is a crucial aspect of web design. CSS provides several ways to achieve horizontal and vertical alignment.\n\nTo horizontally center a block element (like <div>), use margin: auto. Setting the width of the element will prevent it from stretching out to the edges of its container. The element will then take up the specified width, and the remaining space will be split equally between the two margins.\n\nNote: Center aligning has no effect if the property is not set.\n\nTo just center the text inside an element, use text-align: center;\n\nTo center an image, set left and right margin to auto and make it into a block element.\n\nLeft and Right Align — Using\n\nOne method for aligning elements is to use position: absolute;\n\nNote: Absolute positioned elements are removed from the normal flow, and can overlap elements.\n\nLeft and Right Align — Using\n\nAnother method for aligning elements is to use the float property:\n\nThere are many ways to center an element vertically in CSS. A simple solution is to use top and bottom padding.\n\nTo center both vertically and horizontally, use and :\n\nAnother trick is to use the line-height property with a value that is equal to the height property.\n\nIf padding and line-height are not options, another solution is to use positioning and the transform property.\n\nYou can also use flexbox to center things.\n\nMastering CSS layout properties empowers web developers to create aesthetically pleasing and responsive designs. By understanding how to leverage , , , , , , and other properties, designers can build engaging and well-structured web layouts. Experiment with these techniques to enhance your web development skills and craft visually stunning websites."
    }
]