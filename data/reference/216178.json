[
    {
        "link": "https://docs.arduino.cc/libraries/stepper",
        "document": ""
    },
    {
        "link": "https://reference.arduino.cc/reference/en/libraries/stepper",
        "document": "Allows Arduino boards to control a variety of stepper motors. \n\n This library allows you to control unipolar or bipolar stepper motors. To use it you will need a stepper motor, and the appropriate hardware to control it.\n\nThis library is compatible with all architectures so you should be able to use it on all the Arduino boards.\n\nTo use this library, open the Library Manager in the Arduino IDE and install it from there.\n\nThis library allows you to control unipolar or bipolar stepper motors. To use it you will need a stepper motor, and the appropriate hardware to control it.\n• Stepper one revolution: Turn the shaft one revolution clockwise and one counterclockwise.\n• Stepper one step at a time: Turn the shaft step by step to check the proper wiring of the motor."
    },
    {
        "link": "https://reference.arduino.cc/reference/en/libraries/stepper/stepper",
        "document": "The Arduino Reference text is licensed under a Creative Commons Attribution-Share Alike 3.0 License.\n\nFind anything that can be improved? Suggest corrections and new documentation via GitHub.\n\nDoubts on how to use Github? Learn everything you need to know in this tutorial."
    },
    {
        "link": "https://github.com/arduino-libraries/Stepper/blob/master/docs/api.md",
        "document": "This function creates a new instance of the Stepper class that represents a particular stepper motor attached to your Arduino board. Use it at the top of your sketch, above and . The number of parameters depends on how you've wired your motor, either using two or four pins of the Arduino board.\n• : the number of steps in one revolution of your motor. If your motor gives the number of degrees per step, divide that number into 360 to get the number of steps (e.g. 360 / 3.6 gives 100 steps).\n• : two pins that are attached to the motor.\n• : the last two pins attached to the motor, if it's connected to four pins.\n\nA new instance of the Stepper motor class.\n\nThis function sets the motor speed in rotations per minute (RPMs). This function doesn't make the motor turn, just sets the speed at which it will when you call step().\n• : the speed at which the motor should turn in rotations per minute (positive long).\n\nThis function turns the motor a specific number of steps, at a speed determined by the most recent call to . This function is blocking; that is, it will wait until the motor has finished moving to pass control to the next line in your sketch. For example, if you set the speed to, say, 1 RPM and called step(100) on a 100-step motor, this function would take a full minute to run. For better control, keep the speed high and only go a few steps with each call to .\n• : the number of steps to turn the motor. Positive integer to turn one direction, negative integer to turn the other."
    },
    {
        "link": "https://docs.arduino.cc/libraries/accelstepper",
        "document": ""
    },
    {
        "link": "https://lastminuteengineers.com/tmp36-temperature-sensor-arduino-tutorial",
        "document": "One of the easiest and inexpensive ways to add temperature sensing in your Arduino project is to use TMP36 Temperature Sensor. These sensors are fairly precise and needs no external components to work. So, with just a few connections and some Arduino code you’ll be sensing temperature in no time!\n\nThe TMP36 is a low voltage, precision centigrade temperature sensor manufactured by Analog Devices. It is a chip that provides a voltage output that is linearly proportional to the temperature in °C and is, therefore, very easy to use with an Arduino.\n\nThe TMP36 temperature sensor is fairly precise, never wears out, works under many environmental conditions and requires no external components to work. In addition, the TMP36 sensor does not require calibration and provides a typical accuracy of ±1°C at +25°C and ±2°C over the −40°C to +125°C temperature range.\n\nThe sensor can be powered with a 2.7V to 5.5V power supply and consumes only 50µA during active temperature conversions, providing very low self-heating (less than 0.1°C in still air). In addition, a shutdown function is provided to reduce the supply current to less than 0.5µA.\n\nHere are the complete specifications:\n\nFor more information, please refer below datasheet.\n\nThe TMP36 uses a solid-state technique to measure the temperature. It makes use of the fact that the voltage drop between the base and emitter (forward voltage – V ) of the Diode-connected transistor decreases at a known rate as the temperature increases. By precisely amplifying this voltage change, it is easy to generate an analog signal that is directly proportional to temperature.\n\nThis linear relationship between forward voltage and temperature is the reason why diode-connected transistors are used as temperature measurement devices. Essentially this is how temperature is measured, although there have been some improvements in this technique over the years. More information about this technique can be found here.\n\nThe good news is that all these complex calculations are done inside the TMP36. It just outputs a voltage that is linearly proportional to temperature.\n\nThe TMP36 is easy to use, just connect the left pin to power (2.7-5.5V) and the right pin to ground (assuming the flat side of the sensor is facing you). Then the middle pin will have an analog voltage that is directly proportional (linear) to the temperature in °C. This can be easily seen in the output voltage vs temperature characteristic. Note that the analog output voltage is independent of the power supply.\n\nTo convert the voltage to temperature, simply use the basic formula:\n\nSo for example, if the voltage out is 1V that means that the temperature is (1 – 0.5) * 100 = 50 °C\n\nTesting the TMP36 is pretty easy, just connect the left pin to 2.7-5.5V power supply (Two AA batteries work great) and the right pin to ground (assuming the flat side of the sensor is facing you). Now connect your multimeter in DC voltage mode to ground and the middle pin. At the room temperature (25°C), the voltage should be about 0.75V.\n\nTry squeezing the plastic case of the sensor gently to see a rise in temperature.\n\nOr try touching the sensor with an ice cube (in a plastic bag so your circuit doesn’t come into contact with water) and watch the temperature drop.\n\nThe TMP36 comes in three different form factors, but the most common type is the 3-pin TO-92 package, which looks just like a transistor. Let’s take a look at its pinout.\n\n+Vs is the power supply for the sensor which can be anywhere between 2.7V to 5.5V.\n\nVout pin produces an analog voltage that is directly proportional (linear) to the temperature. It should be connected to an Analog (ADC) input.\n\nConnecting the TMP36 Temperature Sensor to an Arduino\n\nHooking up the TMP36 to an Arduino is super simple. You only need to connect three pins: two for power and one for reading the sensor value.\n\nThe sensor can be powered from 3.3 or 5V output. The positive voltage connects to ‘+Vs’ and ground connects to ‘GND‘. The middle pin ‘Vout’ is the analog signal output from the sensor and connects to the A0 analog input of an Arduino.\n\nBelow is the hookup for the experiments with the TMP36:\n\nTo measure air temperature leave the sensor in the open air or attach it to an object you want to measure the temperature of, such as a hit sink.\n\nAs you can see in the wiring diagram above, the output of the TMP36 is connected to one of the analog inputs of the Arduino. The value of this analog input can be read with the function.\n\nHowever, the function does not actually return the output voltage of the sensor. Instead it maps the input voltage between 0 and the ADC reference voltage (technically it is the operating voltage i.e. 5V or 3.3V unless you change it) to 10-bit integer values ​​ranging from 0 to 1023. To convert this value back to the sensor’s output voltage, use this formula:\n\nThis formula converts the number 0-1023 from the ADC into 0-5V\n\nIf you’re using a 3.3V Arduino, you’ll want to use this:\n\nThis formula converts the number 0-1023 from the ADC into 0-3.3V\n\nThen, to convert volts into temperature, use this formula:\n\nThe following sketch shows a quick way to read a TMP36 temperature sensor and can serve as the basis for more practical experiments and projects. It simply reads the value from the TMP36 using analog port A0 and prints the current temperature (in both °C and °F) on the serial monitor. Go ahead and upload it to your Arduino.\n\nYou should see the following output in the serial monitor.\n\nThe sketch starts by defining the Arduino pin to which the sensor’s Vout pin is connected.\n\nIn the setup, we initialize the serial connection with the computer.\n\nIn the loop, we first read in the analog signal from the TMP36 using the function.\n\nNext, we will use the formulas we discussed earlier in the article to convert the analog reading into voltage and then into temperature.\n\nNext, the results are printed on the Serial Monitor.\n\nThe temperature value we get is in Celsius (°C). It is converted in to Fahrenheit (°F) using a simple formula and printed on the Serial Monitor.\n\nImproving the Accuracy of the TMP36 Sensor\n\nBecause we didn’t configure the reference voltage (ARef) used for analog input (the default analog reference on 5V Arduino boards is 5 volts), the maximum resolution we get from the ADC is 5/1024 = 4.88 mV or 0.49°C.\n\nFor better results, using the 3.3v reference voltage as ARef instead of the 5V will be more precise and less noisy. With 3.3V as the reference voltage, we get a resolution of 3.3/1024 = 3.22 mV or 0.32°C.\n\nTo use the 3.3v pin as your analog reference, connect it to the AREF (Analog Reference) input like this.\n\nAlso you need to make some changes to the code. I have highlighted the lines you need to add/change in the code below:\n\nYou should see the following output in the serial monitor.\n\nYou can see that the accuracy can be improved a bit, but for most projects, this will not be enough.\n\nAn alternative to the TMP36 is to use a digital temperature sensor like the DS18B20 which comes in the same package. Digital temperature sensors have better noise immunity which is useful when the sensor is placed at a distance or in an electrically noisy environment.\n\nArduino Project – Standalone Thermometer with TMP36 and an I2C LCD\n\nSometimes you come up with an idea where you want to display the temperature readings in real time and show an alert when the temperature is outside the specified range. Then you’ll probably need a 16×2 character LCD instead of a serial monitor.\n\nIn this example, we’ll hook the I2C LCD up to the Arduino along with the TMP36.\n\nConnecting the I2C LCD is quite easy as you can see in the wiring diagram below. If you’re not familiar with 16×2 character I2C LCDs, consider reading (at least skimming) below tutorial.\n\nThe following diagram shows you how to wire everything.\n\nThe following sketch will print the temperature values on the 16×2 character I2C LCD. The code is similar to the first example, except that the values are printed on the I2C LCD.\n\nYou should see the following output on the LCD:"
    },
    {
        "link": "https://instructables.com/Temperature-Sensor-With-Arduino-UNO",
        "document": "About: Programming is my love and engineering is my third party :)\n\nLearn how to read Temperature using LM35 Temperature sensor!\n\nThe LM35 series are precision integrated-circuit temperature devices with an output voltage linearly proportional to the Centigrade temperature. The LM35 device has an advantage over linear temperature sensors calibrated in Kelvin, as the user is not required to subtract a large constant voltage from the output to obtain convenient Centigrade scaling.\n\nYou can used this sensor for many projects, like fire prevention monitoring, weather forecasting, overheat monitor and many more."
    },
    {
        "link": "https://lastminuteengineers.com/lm35-temperature-sensor-arduino-tutorial",
        "document": "One of the easiest and inexpensive ways to add temperature sensing in your Arduino project is to use LM35 Temperature Sensor. These sensors are fairly precise and needs no external components to work. So, with just a few connections and some Arduino code you’ll be sensing temperature in no time!\n\nThe LM35 is a low voltage, precision centigrade temperature sensor manufactured by Texas Instruments. It is a chip that provides a voltage output that is linearly proportional to the temperature in °C and is, therefore, very easy to use with an Arduino.\n\nThe LM35 temperature sensor is fairly precise, never wears out, works under many environmental conditions and requires no external components to work. In addition, the LM35 sensor does not require calibration and provides a typical accuracy of ±0.5°C at room temperature and ±1°C over a full −55°C to +155°C temperature range.\n\nThe sensor can be powered with a 4V to 30V power supply and consumes less than 60µA during active temperature conversions, providing very low self-heating (less than 0.08°C in still air).\n\nHere are the complete specifications:\n\nFor more information, please refer below datasheet.\n\nThe only disadvantage of the LM35 sensor is that it requires a negative bias voltage to measure negative temperature. So if you are planning to use the sensor to measure negative temperature, it is recommended that you use TMP36 temperature sensor. The TMP36 by Analog Devices is fairly accurate (-40°C to 125°C) and has the advantage of being able to measure negative temperatures without the need for negative bias voltage. You can find a dedicated tutorial for the TMP36 below.\n\nA better alternative to the LM35 is to use a digital temperature sensor like the DS18B20 which comes in the same package. Digital temperature sensors have better noise immunity which is useful when the sensor is placed at a distance or in an electrically noisy environment.\n\nThe LM35 uses a solid-state technique to measure the temperature. It makes use of the fact that the voltage drop between the base and emitter (forward voltage – V ) of the Diode-connected transistor decreases at a known rate as the temperature increases. By precisely amplifying this voltage change, it is easy to generate an analog signal that is directly proportional to temperature.\n\nThis linear relationship between forward voltage and temperature is the reason why diode-connected transistors are used as temperature measurement devices. Essentially this is how temperature is measured, although there have been some improvements in this technique over the years. More information about this technique can be found here.\n\nThe good news is that all these complex calculations are done inside the LM35. It just outputs a voltage that is linearly proportional to temperature.\n\nThe LM35 is easy to use; just connect the left pin to power (4V to 30V) and the right pin to ground (assuming the flat side of the sensor is facing you). Then the middle pin will have an analog voltage that is directly proportional (linear) to the temperature in °C. This can be easily seen in the output voltage vs temperature characteristic. Note that the analog output voltage is independent of the power supply.\n\nTo convert the voltage to temperature, simply use the basic formula:\n\nFor example, if the voltage out is 0.5V that means that the temperature is 0.5 * 100 = 50 °C\n\nTesting the LM35 is pretty easy, just connect the left pin to 4V to 30V power supply (Four AA batteries work great) and the right pin to ground (assuming the flat side of the sensor is facing you). Now connect your multimeter in DC voltage mode to ground and the middle pin. At the room temperature (25°C), the voltage should be about 0.25V.\n\nTry squeezing the plastic case of the sensor gently to see a rise in temperature.\n\nOr try touching the sensor with an ice cube (in a plastic bag so your circuit doesn’t come into contact with water) and watch the temperature drop.\n\nThe LM35 comes in three different form factors, but the most common type is the 3-pin TO-92 package, which looks just like a transistor. Let’s take a look at its pinout.\n\n+Vs is the power supply for the sensor which can be anywhere between 4V to 30V.\n\nVout pin produces an analog voltage that is directly proportional (linear) to the temperature. It should be connected to an Analog (ADC) input.\n\nConnecting the LM35 Temperature Sensor to an Arduino\n\nHooking up the LM35 to an Arduino is super simple. You only need to connect three pins: two for power and one for reading the sensor value.\n\nThe sensor can be powered from 5V. The positive voltage connects to ‘+Vs’ and ground connects to ‘GND‘. The middle pin ‘Vout’ is the analog signal output from the sensor and connects to the A0 analog input of an Arduino.\n\nBelow is the hookup for the experiments with the LM35:\n\nTo measure air temperature leave the sensor in the open air or attach it to an object you want to measure the temperature of, such as a heat sink.\n\nAs you can see in the wiring diagram above, the output of the LM35 is connected to one of the analog inputs of the Arduino. The value of this analog input can be read with the function.\n\nHowever, the function does not actually return the output voltage of the sensor. Instead it maps the input voltage between 0 and the ADC reference voltage (technically it is the operating voltage i.e. 5V or 3.3V unless you change it) to 10-bit integer values ​​ranging from 0 to 1023. To convert this value back to the sensor’s output voltage, use this formula:\n\nThis formula converts the number 0-1023 from the ADC into 0-5V\n\nThen, to convert volts into temperature, use this formula:\n\nThe following sketch shows a quick way to read LM35 temperature sensor and can serve as the basis for more practical experiments and projects. It simply reads the value from the LM35 using analog port A0 and prints the current temperature (in both °C and °F) on the serial monitor. Go ahead and upload it to your Arduino.\n\nYou should see the following output in the serial monitor.\n\nThe sketch starts by defining the Arduino pin to which the sensor’s Vout pin is connected.\n\nIn the setup, we initialize the serial connection with the computer.\n\nIn the loop, we first read in the analog signal from the LM35 using the function.\n\nNext, we will use the formulas we discussed earlier in the article to convert the analog reading into voltage and then into temperature.\n\nNext, the results are printed on the Serial Monitor.\n\nThe temperature value we get is in Celsius (°C). It is converted in to Fahrenheit (°F) using a simple formula and printed on the Serial Monitor.\n\nArduino Project – Standalone Thermometer with LM35 and an I2C LCD\n\nSometimes you come up with an idea where you want to display the temperature readings in real time and show an alert when the temperature is outside the specified range. Then you’ll probably need a 16×2 character LCD instead of a serial monitor.\n\nIn this example, we’ll hook the I2C LCD up to the Arduino along with the LM35.\n\nConnecting the I2C LCD is quite easy as you can see in the wiring diagram below. If you’re not familiar with an I2C LCDs, consider reading (at least skimming) below tutorial.\n\nThe following diagram shows you how to wire everything.\n\nThe following sketch will print the temperature values on the I2C LCD. The code is similar to the previous example, except that the values are printed on the I2C LCD.\n\nYou should see the following output on the LCD:"
    },
    {
        "link": "https://randomnerdtutorials.com/guide-for-ds18b20-temperature-sensor-with-arduino",
        "document": "This guide shows how to use the DS18B20 temperature sensor with the Arduino board. You’ll learn how to wire the sensor, install the required libraries and get temperature from one or multiple DS18B20 sensors.\n\nYou might also like reading other DS18B20 guides:\n\nThe DS18B20 temperature sensor is a one-wire digital temperature sensor. This means that it just requires one data line (and GND) to communicate with the Arduino.\n\nIt can be powered by an external power supply or it can derive power from the data line (called “parasite mode”), which eliminates the need for an external power supply.\n\nThe following table shows how you should wire the DS18B20 sensor to your Arduino board:\n\nEach DS18B20 temperature sensor has a unique 64-bit serial code. This allows you to wire multiple sensors to the same data wire. So, you can get temperature from multiple sensors using just one Arduino digital pin.\n\nThe DS18B20 temperature sensor is also available in waterproof version.\n\nHere’s a summary of the most relevant specs of the DS18B20 temperature sensor:\n• Accuracy +/-0.5 ºC (between the range -10ºC to 85ºC)\n\nFor more information consult the DS18B20 datasheet.\n\nTo show you how the sensor works, we’ll build a simple example that reads the temperature from the DS18B20 sensor with the Arduino and displays the values on the Arduino Serial Monitor.\n\nHere’s a list of parts you need to complete this tutorial\n\nYou can use the preceding links or go directly to MakerAdvisor.com/tools to find all the parts for your projects at the best price!\n\nThe sensor can operate in two modes:\n• Normal mode: 3-wire connection is needed. You provide power to the VDD pin. Here’s the schematic you need to follow:\n• Parasite mode: You only need data and GND. The sensor derives its power from the data line. In this case, here’s the schematic you need to follow:\n\nYou can read the temperature of more than one sensor at the same time using just one Arduino digital pin. For that, you just need to wire together all the sensors data pins to an Arduino digital pin.\n\nTo interface with the DS18B20 temperature sensor, you need to install the One Wire library by Paul Stoffregen and the Dallas Temperature library. Follow the next steps to install those libraries.\n\n1. Open your Arduino IDE and go to Sketch > Include Library > Manage Libraries. The Library Manager should open.\n\n2. Type “OneWire” in the search box and install the OneWire library by Paul Stoffregen.\n\n3. Then, search for “Dallas” and install the Dallas Temperature library by Miles Burton.\n\nAfter installing the needed libraries, upload the following code to your Arduino board. This sketch is based on an example from the Dallas Temperature library.\n\nThere are many different ways to get the temperature from DS18B20 temperature sensors. If you’re using just one single sensor, this is one of the easiest and simplest ways.\n\nStart by including the OneWire and the DallasTemperature libraries.\n\nCreate the instances needed for the temperature sensor. The temperature sensor is connected to Pin 4.\n\nIn the setup(), initialize the Serial Monitor at a baud rate of 9600.\n\nIn the loop() is where you’ll get the temperature. You need to call the requestTemperatures() method before getting the actual temperature value.\n\nThen, get and print the temperature in Celsius. To get the temperature in Celsius, use the getTempCByIndex() method :\n\nOr use the getTempFByIndex() to get the temperature in Fahrenheit.\n\nThe getTempCByIndex() and the getTempFByIndex() methods accept the index of the temperature sensor. Because we’re using just one sensor its index is 0. If you have more than one sensor, you use index 0 for the first sensor, index 1 for the second sensor, and so on.\n\nNew temperature readings are requested every second.\n\nAfter uploading the code, open the Arduino IDE Serial Monitor at a 9600 baud rate. You should get the temperature displayed in both Celsius and Fahrenheit:\n\nThe DS18B20 temperature sensor communicates using one-wire protocol and each sensor has a unique 64-bit serial code, so you can read the temperature from multiple sensors using just one single Arduino digital Pin.\n\nTo read the temperature from multiple sensors, you just need to wire all data lines together as shown in the following schematic diagram:\n\nThen, upload the following code. It scans for all devices on Pin 4 and prints the temperature for each one. This sketch is based on the example provided by the DallasTemperature library.\n\nThe code uses several useful methods to handle multiple DS18B20 sensors.\n\nYou use the getDeviceCount() method to get the number of DS18B20 sensors on the data line.\n\nThe address is unique for each sensor. So each sensor can be identified by its address.\n\nThen, you use the getTempC() method that accepts as argument the device address. With this method you can get the temperature from a specific sensor:\n\nTo get the temperature in Fahrenheit degrees, you can use the getTemF(). Alternatively, you can convert the temperature in Celsius to Fahrenheit as follows:\n\nThe DS18B20 temperature sensor is a one-wire digital sensor. To use this sensor with the Arduino, you need the OneWire and the DallasTemperature libraries. You can use one sensor or multiple sensors on the same data line because you can identify each sensor by its unique address.\n\nNow, you can take this project further and display your sensor readings in an OLED display, for example.\n\nWe have more tutorials for other Arduino compatible sensors that you may find useful:\n\nWe hope you’ve found this guide useful.\n\nIf you want to learn more about Arduino, take a look at our resources:"
    },
    {
        "link": "https://circuitbasics.com/arduino-thermistor-temperature-sensor-tutorial",
        "document": "Thermistors are simple, inexpensive, and accurate components that make it easy to get temperature data for your projects. Remote weather stations, home automation systems, and equipment control and protection circuits are some applications where thermistors would be ideal. They’re analog sensors, so the code is relatively simple compared to digital temperature sensors that require special libraries and lots of code.\n\nIn this article, I’ll explain how thermistors work, then I’ll show you how to set up a basic thermistor circuit with an Arduino that will output temperature readings to the serial monitor or to an LCD.\n\nWatch the video for this tutorial here:\n\nThermistors are variable resistors that change their resistance with temperature. They are classified by the way their resistance responds to temperature changes. In Negative Temperature Coefficient (NTC) thermistors, resistance decreases with an increase in temperature. In Positive Temperature Coefficient (PTC) thermistors, resistance increases with an increase in temperature.\n\nNTC thermistors are the most common, and that’s the type we’ll be using in this tutorial. NTC thermistors are made from a semiconducting material (such as a metal oxide or ceramic) that’s been heated and compressed to form a temperature sensitive conducting material.\n\nThe conducting material contains charge carriers that allow current to flow through it. High temperatures cause the semiconducting material to release more charge carriers. In NTC thermistors made from ferric oxide, electrons are the charge carriers. In nickel oxide NTC thermistors, the charge carriers are electron holes.\n\nLet’s build a basic thermistor circuit to see how it works, so you can apply it to other projects later.\n\nSince the thermistor is a variable resistor, we’ll need to measure the resistance before we can calculate the temperature. However, the Arduino can’t measure resistance directly, it can only measure voltage.\n\nThe Arduino will measure the voltage at a point between the thermistor and a known resistor. This is known as a voltage divider. The equation for a voltage divider is:\n\nIn terms of the voltage divider in a thermistor circuit, the variables in the equation above are:\n\nThis equation can be rearranged and simplified to solve for R2, the resistance of the thermistor:\n\nFinally, the Steinhart-Hart equation is used to convert the resistance of the thermistor to a temperature reading.\n\nConnect the thermistor and resistor to your Arduino like this:\n\nThe value of the resistor should be roughly equal to the resistance of your thermistor. In this case, the resistance of my thermistor is 100K Ohms, so my resistor is also 100K Ohms.\n\nThe manufacturer of the thermistor might tell you it’s resistance, but if not, you can use a multimeter to find out. If you don’t have a multimeter, you can make an Ohm meter with your Arduino by following our Arduino Ohm Meter tutorial. You only need to know the magnitude of your thermistor. For example, if your thermistor resistance is 34,000 Ohms, it is a 10K thermistor. If it’s 340,000 Ohms, it’s a 100K thermsitor.\n\nAfter connecting the circuit above, upload this code to your Arduino to output the temperature readings to the serial monitor in Fahrenheit:\n\nTo display the temperature in degrees Celsius, just comment out line 18 by inserting two forward slashes (“//”) at the beginning of the line.\n\nThis program will display Celsius and Fahrenheit at the same time:\n\nTo output the temperature readings to a 16X2 LCD, follow our tutorial, How to Set Up an LCD Display on an Arduino, then upload this code to the board:\n\nHere’s a video of the temperature sensor so you can watch me set it up and see how it works:\n\nWell, that’s about it. Just leave a comment below if you have any questions about this project. And if you like our articles here at Circuit Basics, subscribe and we’ll let you know when we publish new articles. Also, feel free to share this if you know anyone that would find it helpful!"
    }
]