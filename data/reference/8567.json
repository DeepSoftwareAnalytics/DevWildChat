[
    {
        "link": "https://stackoverflow.com/questions/4733835/how-to-use-breakpoints-in-eclipse",
        "document": "To put breakpoints in your code, double click in the left margin on the line you want execution to stop on. You may alternatively put your cursor in this line and then press + + .\n\nTo control execution use the Step Into, Step Over and Step Return buttons. They have the shortcuts , and respectively.\n\nTo allow execution to continue normally or until it hits the next breakpoint, hit the Resume button or ."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-debug-a-java-project-in-eclipse",
        "document": "Every Java developer needs to work in Debug mode to resolve the errors. Experienced Java developer already knows how to debug the code but if you are new as a Java developer this article will cover the topics which help to debug the code faster in eclipse and also use the “Debug Mode” efficiently and efficiently. Let’s understand some terms to begin.\n\nDebugging is one of the broadest topics in Software Engineering. It is a process to find subtle and remove bugs, and errors, and to understand the flow of the code as well. It is a must-have skill for all Java developers because debugging can help in locating the bugs which are not visible during code reviews. Let’s discuss the steps to debug the code in eclipse.\n\nFirst, we need to set breakpoints in the code to stop the execution at your desired location. While running the program in debug mode it will temporarily stop execution at a particular point in the code. So, there are some ways to set breakpoints in code.\n• First, is to put the cursor on a line in code which you want to set as a breakpoint then press Ctrl+Shift+B.\n• Second, is to double-click on the left margin or right-click in the editor and select “Toggle Breakpoint“.\n\nYou will see a blue dot will appear next to that line.\n\nNow to debug the project have different ways in Eclipse.\n\nFirst, right-click on the project which you want to debug and select “Debug As” then “Java Application”.\n\nEclipse asks you want to switch to the Debug Perspective once the compiler reached the first breakpoint. Like the below image\n\nOnce you click on Switch, you will see Debug Mode in eclipse.\n\nSecond, on the right corner of the eclipse editor have an Icon debug double Click on it.\n\nYou will observe that debug mode is activated. Like the below image.\n\nOn the right side, in the “Breakpoints” section you can see a list of all the Breakpoints which has been set for you.\n\nIn the toolbar of Eclipse editor appears several buttons for controlling the flow of execution of the program.\n\nTo control the flow of execution eclipse provide the most commonly used buttons are:\n\nFor every Java Developer having good debugging skills is necessary. it can be got by practice there are not any particular techniques to learn and get the debugging skills for that you need to spend more time and learn the different views of debugging this article is for beginners who are just starting their journey as Java developers. Hope this article helps and start your debugging journey."
    },
    {
        "link": "https://baeldung.com/eclipse-debugging",
        "document": "In this quick guide, we’ll see how to debug Java programs using the Eclipse IDE.\n\nEclipse has great support for debugging an application. It visualizes step-by-step execution and helps us uncover bugs.\n\nTo demonstrate the debugging features in Eclipse, we’ll use a sample program PerfectSquareCounter. This program counts the total perfect squares and even perfect squares under a given number:\n\nFirst, we need to start the Java program within Eclipse in debug mode. This can be achieved in two ways:\n• Right-click on the editor and select Debug As -> Java Application (shown in below screenshot)\n• Debug the program from the toolbar (highlighted in below screenshot)\n\nWe need to define the points at which the program execution should pause for investigation. These are called breakpoints and are applicable for methods. They can also be defined anytime before or during execution.\n\nBasically, there are 3 ways to add breakpoints to the program:\n• Right-click on the marker bar (vertical ruler) corresponding to the line and select Toggle Breakpoint (shown in the below screenshot)\n• Press Ctrl+Shift+B on the necessary line while in the editor\n• Double-click on the marker bar (vertical ruler) corresponding to the necessary line\n\nNow that the debugger stops at the given breakpoints, we can proceed with further execution.\n\nLet’s assume that the debugger is currently positioned as per the below screenshot, at Line 16:\n\nThe most commonly used debug options are:\n• Step Into (F5) – This operation goes inside the methods used in the current line (if any); else, it proceeds to the next line. In this example, it will take the debugger inside the method isPerfectSquare()\n• Step Over (F6) – This operation processes the current line and proceeds to the next line. In this example, this will execute the method isPerfectSquare() and proceed to the next line\n• Step Return (F7) – This operation finishes the current method and takes us back to the calling method. Since in this case, we have a breakpoint in the loop, it will be still within the method, else it would go back to the main method\n• Resume (F8) – This operation will simply continue with the execution until the program ends unless we hit any further breakpoint\n\nWhen we start the program in debug mode, Eclipse will prompt with an option to switch to the Debug perspective. The Debug perspective is a collection of some useful views that help us visualize and interact with the debugger.\n\nWe can also switch to the Debug perspective manually at any time.\n\nHere are some of the most useful views that this contains:\n• Debug view – This shows the different threads and call stack traces\n• Variables view – This shows the values of the variables at any given point. If we need to see the static variables, we need to explicitly specify that\n• Breakpoints – This shows the different breakpoints and watchpoints (which we will see below)\n• Debug Shell – This allows us to write and evaluate custom code while debugging (an example is covered later)\n\nIn this section, we’ll go through some important techniques that will help us to master debugging in Eclipse.\n\nWe can see the values of variables during the execution under the Variables view. In order to see the static variables, we can select the drop-down option Java -> Show Static Variables.\n\nUsing the variables view, it’s possible to change any value to the desired value during the execution.\n\nFor example, if we need to skip a few numbers and directly start with the number 80, we could do that by changing the value of the variable number:\n\nIf we need to inspect the value of a Java expression or statement, we can select the particular expression in the editor, right-click, and Inspect, as shown below. A handy shortcut is to hit Ctrl+Shift+I on the expression to see the value:\n\nIn case we need to permanently inspect this expression, we can right-click and Watch. Now, this gets added to the Expressions view and the value of this expression can be seen for different runs.\n\nIn the context of the debugging session, we can write and run custom code to evaluate possibilities. This is done in the Debug Shell.\n\nFor example, if we need to cross-check the correctness of the sqrt functionality, we could do it in the Debug Shell. On the code, Right-click -> Inspect to see the value:\n\nThere will be cases in which we want to debug only for specific conditions. We can achieve this by adding conditions to a breakpoint in one of two ways:\n• Right-click on the breakpoint and choose Breakpoint Properties\n• In Breakpoint view, select the breakpoint and specify the condition\n\nFor example, we can specify the breakpoint to suspend the execution only if number is equal to 10:\n\nWhat breakpoints are for methods, watchpoints are for class-level variables. In this current example, the breakpoint on evenPerfectSquareNumbers declaration is called a watchpoint. Now, the debugger will pause the execution every time the field is accessed or modified on a watchpoint.\n\nThis is the default behavior, which can be changed in the watchpoint’s properties.\n\nIn this example, the debugger will stop execution every time a perfect square is an even number:\n\nLet’s assume that we’re debugging a complex issue in an application with a huge amount of source code. The debugger will keep suspending the flow due to scattered breakpoints.\n\nWhen a breakpoint is marked as a trigger point, it means that the rest of the breakpoints will be enabled only if this breakpoint is hit.\n\nFor example, in the screenshot below, the breakpoint on isPerfectSquare() is supposed to be hit for every iteration in the loop. However, we’ve specified the breakpoint on calculateCount() method as a trigger point, along with a condition.\n\nSo, when the iteration count reaches 10, this will trigger the rest of the breakpoints. Hence, from now on, if the breakpoint on isPerfectSquare() is hit, the execution will get suspended:\n\nFinally, if the application is running outside Eclipse, we can still use all the above functionalities, provided that the remote application allows debugging. From Eclipse, we would select Debug as Remote Java Application.\n\nIn this quick guide, we’ve seen the basics and different techniques of debugging programs in Eclipse IDE."
    },
    {
        "link": "https://stackoverflow.com/questions/370814/how-to-set-a-breakpoint-in-eclipse-in-a-third-party-library",
        "document": "The most sure-fire way to do this (and end up with something that's actually useful) is to download the source (you say that it is open-source), and set up another \"Java Project\" pointing at that source.\n\nTo do that, get the source downloaded and unzipped somewhere on your system. Click \"File\"->\"New\"->\"Java Project\". In the next dialog, give it a project name and select \"Create Project from Existing Source\". Browse to the root location of the open source library.\n\nSupposing that all the additional libraries that are required by the project and such are included in the project you downloaded, Eclipse will figure everything out and set the build path up for you.\n\nYou'll need to remove the open source jar from your project's build path, and add this new project to the build path of your project.\n\nNow, you can just treat this as your code, and debug at will.\n\nThis gets around at least a couple of problems with other approaches:\n• None You could \"attach source\" to the jar file, but if the jar file was compiled without debug information, this still won't work. If the jar file was compiled with debug information ( ...see http://java.sun.com/j2se/1.3/docs/tooldocs/win32/javac.html, and the option).\n• None You could add an \"exception breakpoint\" to see when the NullPointerException is raised, but that's a common exception, and may well get raised and dealt with many (hundreds of?) times prior to the one you're looking for. Plus, without the original source, you won't be able to really see much of anything about the code that is throwing the NullPointerException - the likelihood you'll be able to figure out what's wrong is pretty low."
    },
    {
        "link": "https://courses.cs.washington.edu/courses/cse143/11wi/eclipse-tutorial/debugging.shtml",
        "document": ""
    },
    {
        "link": "https://eclipse.org/community/eclipse_newsletter/2017/june/article1.php",
        "document": "Debugging is the routine process of locating and removing bugs, errors or abnormalities from programs. It’s a must have skill for any Java developer because it helps to find subtle bug that are not visible during code reviews or that only happens when a specific condition occurs. The Eclipse Java IDE provides many debugging tools and views grouped in the Debug Perspective to help the you as a developer debug effectively and efficiently.\n\nThere are many improvements included in the latest Eclipse Java Development Tools (JDT) release included in the Eclipse Oxygen Simultaneous Release. This article will start with a beginner’s guide to start you with debugging. In the second part of the article, you will find a more advanced guide to debugging and you’ll discover what’s new for debugging in Eclipse Oxygen.\n\nHere are some quick tips and tools that will help you get started quickly with debugging your Java project.\n\nA Java program can be debugged simply by right clicking on the Java editor class file from Package explorer. Select Debug As → Java Application or use the shortcut Alt + Shift + D, J instead.\n\nEither actions mentioned above creates a new Debug Launch Configuration and uses it to start the Java application.\n\nIn most cases, users can edit and save the code while debugging without restarting the program.This works with the support of HCR (Hot Code Replacement), which has been specifically added as a standard Java technique to facilitate experimental development and to foster iterative trial-and-error coding.\n\nA breakpoint is a signal that tells the debugger to temporarily suspend execution of your program at a certain point in the code.\n\nTo define a breakpoint in your source code, right-click in the left margin in the Java editor and select Toggle Breakpoint. Alternatively, you can double-click on this position.\n\nThe Breakpoints view allows you to delete and deactivate Breakpoints and modify their properties.\n\nAll breakpoints can be enabled/disabled using Skip All Breakpoints. Breakpoints can also be imported/exported to and from a workspace.\n\nThe debug perspective offers additional views that can be used to troubleshoot an application like Breakpoints, Variables, Debug, Console etc. When a Java program is started in the debug mode, users are prompted to switch to the debug perspective.\n• Debug view – Visualizes call stack and provides operations on that.\n• Variables/Expression view – Shows the declared variables and their values. Press Ctrl+Shift+d or Ctrl+Shift+i on a selected variable or expression to show its value. You can also add a permanent watch on an expression/variable that will then be shown in the Expressions view when debugging is on.\n• Display view – Allows to Inspect the value of a variable, expression or selected text during debugging.\n\nThe Eclipse Platform helps developers debug by providing buttons in the toolbar and key binding shortcuts to control program execution.\n\nFor more information about debugging visit: Eclipse Stepping Commands Help\n\nThis section will give you more advanced tips and tricks to help you debug your Java project. The Eclipse Oxygen release includes many great improvements for Java debugging. Here’s a quick overview.\n\na. Watchpoints - A watchpoint is a special breakpoint that stops the execution of an application whenever the value of a given expression/field changes, without specifying where it might occur. User can specify by Breakpoint Properties… if they want the execution to stop when the watch expression is Accessed, Modified or both.\n\nb. Exception Breakpoints – An exception breakpoint is specified for thrown exception using Add Java Exception Breakpoint.\n\nBreakpoint for NullPointerException will halt whenever/wherever this exception is thrown.\n\nc. Condition Breakpoints – Eclipse users can create conditions to restrict the activation of breakpoints.\n\nBreakpoint will be activated only if value of Boolean b is true. Hit count can be provided to halt the execution at nth hit of the breakpoint. The breakpoint is disabled until either it is re-enabled or its hit count is changed or the program ends.\n\n– The Eclipse IDE allows you to debug applications that runs on another Java Virtual Machine (JVM) or even on another machine. You can create a new debug configuration of thetype. To enable remote debugging you need to start your Java application with certain flags. Connection Type can be specified as a Socket Attach or Socket Listen. Socket Listen supports multiple incoming connections.\n\nHere are the new features that have been added to the latest Eclipse Java IDE release.\n\nA new feature in the Eclipse Platform that allows users to creates conditional breakpoints to print out messages without halting at the breakpoints and cluttering the code base.\n\nNow users can activate Trigger Point. A set of trigger points can be defined for the breakpoints in a workspace.\n\nAll the other breakpoints that are initially suppressed by triggers will be hit only after any of the all Trigger Points have been hit. All the triggers are disabled after a Trigger Point is hit and will be re-enabled after the run.\n\nAny breakpoint can be set as a trigger point by using Breakpoint Properties via the dialog or the detail pane of the Breakpoints view.\n\nTriggers are rendered with an overlay of \"T\" and the breakpoints suppressed by the triggers are rendered with an overlay of \"T\" with a cut.\n\nIn the Variables view, collection objects directly show their contained elements instead of their internal structure. Logical structures are now activated by default in the Oxygen release. Show Logical Structure can be turned off to show the internal structure.\n\nThe Show Logical Structure context menu lets you create, choose or edit the representation.\n\nAlso new to the Oxygen release are Method Results. During debugging, the last method result (per return or throw) that was observed during Step Into, Step Over or Step Return, is shown as first line in the Variables view.\n\nAlso new in Oxygen, Launch Group launch configuration type allows you to launch multiple other launch configurations sequentially, with configurable actions after launching each group member. New launch groups can be created via the Run → Run Configurations... or Run → Debug Configurations... dialogs.\n\nEclipse users can now group the breakpoints by different categories in Eclipse Oxygen. Breakpoint Working Sets defines a group of breakpoints. User can perform actions like enable/disable on a working set.\n\nBreakpoints are sorted by Name by default, sorting order can be changed to Creation Time.\n\nFor more information about debugging visit: Eclipse Remote Debugging Help\n\nThis article covered some of the important debugging tools and some new tools provided by the Eclipse Java IDE in the Oxygen Release. Eclipse Oxygen is now available for download here.\n\nFor in depth knowledge, user can refer to:"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-debug-a-java-project-in-eclipse",
        "document": "Every Java developer needs to work in Debug mode to resolve the errors. Experienced Java developer already knows how to debug the code but if you are new as a Java developer this article will cover the topics which help to debug the code faster in eclipse and also use the “Debug Mode” efficiently and efficiently. Let’s understand some terms to begin.\n\nDebugging is one of the broadest topics in Software Engineering. It is a process to find subtle and remove bugs, and errors, and to understand the flow of the code as well. It is a must-have skill for all Java developers because debugging can help in locating the bugs which are not visible during code reviews. Let’s discuss the steps to debug the code in eclipse.\n\nFirst, we need to set breakpoints in the code to stop the execution at your desired location. While running the program in debug mode it will temporarily stop execution at a particular point in the code. So, there are some ways to set breakpoints in code.\n• First, is to put the cursor on a line in code which you want to set as a breakpoint then press Ctrl+Shift+B.\n• Second, is to double-click on the left margin or right-click in the editor and select “Toggle Breakpoint“.\n\nYou will see a blue dot will appear next to that line.\n\nNow to debug the project have different ways in Eclipse.\n\nFirst, right-click on the project which you want to debug and select “Debug As” then “Java Application”.\n\nEclipse asks you want to switch to the Debug Perspective once the compiler reached the first breakpoint. Like the below image\n\nOnce you click on Switch, you will see Debug Mode in eclipse.\n\nSecond, on the right corner of the eclipse editor have an Icon debug double Click on it.\n\nYou will observe that debug mode is activated. Like the below image.\n\nOn the right side, in the “Breakpoints” section you can see a list of all the Breakpoints which has been set for you.\n\nIn the toolbar of Eclipse editor appears several buttons for controlling the flow of execution of the program.\n\nTo control the flow of execution eclipse provide the most commonly used buttons are:\n\nFor every Java Developer having good debugging skills is necessary. it can be got by practice there are not any particular techniques to learn and get the debugging skills for that you need to spend more time and learn the different views of debugging this article is for beginners who are just starting their journey as Java developers. Hope this article helps and start your debugging journey."
    },
    {
        "link": "https://docs.oracle.com/en/java/javacard/3.2/jcdksu/debugging-java-card-applet-eclipse-plug.html",
        "document": "From Eclipse, you can run the debug proxy to set breakpoints, get or set variable values, and debug a library. The following steps provide an overview of debugging an application using Eclipse. The Java Card Plug-in for Eclipse must already be installed.\n• None Create (or import) your Java Card project. Make sure that debugging information is generated when the project is built. The debugging information is generated only if you select the check box in the CAP file settings. The debugging information is generated only if you select thecheck box in the CAP file settings.\n• None Create a new Java Card Project Debug configuration and select the tab. Perform the following tasks:\n• None Specify commands to be executed when the simulator starts. The commands run in an order represented in the table.\n• None Add cap files for the applet and imported libraries, which include the code that you want to debug. These not only include CAP files generated in the directory, but also the CAP files that you generated. The CAP files generated by current project, will be added automatically. The CAP files generated by current project, will be added automatically.\n• None Once the debug session starts, starts in debug mode, the commands(s) are executed, the debug proxy is started, and the Eclipse debugger connects to the debug proxy. You can experiment with the debug perspective and look at the debug console for debug proxy output.\n• None Due to Eclipse's handling of the class unload events, unload commands cannot be used in the middle of a debugging session. All unload commands must be done at the end, with no breakpoints set. Due to Eclipse's handling of the class unload events, unload commands cannot be used in the middle of a debugging session. All unload commands must be done at the end, with no breakpoints set.\n\nDebug Configuration can be used to automate how commands are run before sending the commands to hit the breakpoints. You can specify a list of commands to be executed. In the JC Debug Configuration, under Connect tab -> Connection Properties -> Port the value must match the Proxy to IDE port from the device properties which, by default, both are 8000. The Debug Configuration has an option to start the simulator, inside Eclipse, for you. This option can be disabled to just debug the applet and execute selected commands, the plug-in will connect to an already running simulator. The running simulator must match the configuration made in the selected device (ex. ) for the current project (Communication type, Port number, Config file, Debug Port). If the selected device for the current project has set a other than localhost, this option is disabled. If the selected device for the current project has set aother than localhost, this option is disabled. The Debug Configuration also allows you to run a client application externally (option External Client). That is, if you select this option, after the debug starts you can use any client application for sending APDUs to the simulator. From the Eclipse side, the commands will be disabled. The Debug Configuration also allows you to run a client application externally (option External Client). That is, if you select this option, after the debug starts you can use any client application for sending APDUs to the simulator. From the Eclipse side, the commands will be disabled.\n\nThese steps show you how to debug the sample. The Java Card Plug-in for Eclipse must already be installed. Start Eclipse. and must already be created.\n• None Click the menu, select , and select the directory from the project to import the Java Card project into your workspace. If the build doesn't start automatically, start it manually.\n• None Make sure debugging information generation is enabled for the package:\n• None Right-click on the imported project and select and .\n• None In the new wizard, click on the first page.\n• None In the second page, select the check box.\n• None Click and , and close the wizard.\n• None\n• None Right-click on the project in the Package Explorer and select and .\n• None In the dialog, double-click (in the list). This will create a new debug configuration named .\n• None Click . Browse to the project directory and select the file. This script will install the applet without creating an applet instance. The debug configuration starts. First, is started in debug mode, then the commands are executed, the debug proxy is started and, finally, the Eclipse debugger connects to the debug proxy.\n• None The dialog appears, asking if you want to open the Debug perspective. You may choose to open it, depending on your preference. The Debug console shows output from the debug proxy.\n• None In the Package Explorer, locate and open it. Set two breakpoints: one in the method of the applet, the other in the beginning of the method. There are several ways to set a breakpoint in Eclipse. In the source code editor, position the cursor on the desired line and do one of the following:\n• None Double-click the left most space on the source code line (the line number will be to the right).\n• None Press to toggle the breakpoint (the type of breakpoint will be selected automatically depending on the source code).\n• None Select a specific breakpoint to toggle from the menu.\n• None Execute the two remaining scripts in the order that they appear in the Package Explorer in the dropdown from (Install and Select command). After each script is run, execution will suspend on the corresponding breakpoint. and debugger commands can be used to resume applet code execution."
    },
    {
        "link": "https://docs.particle.io/archives/debugging-with-eclipse",
        "document": "This FAQ describes how to use Eclipse, a free IDE for Windows, Mac, and Linux, along with OpenOCD, to do source-level debugging of code running on a Particle Photon, P1, or Electron.\n\nSome of the things you can do:\n\nWhile you can still use these instructions, a much easier way to install Particle Workbench. It provides an automated way to install local development tools and do source-level debugging without the extreme hassle of the method described below.\n• Install a gcc-arm toolchain for local building for Windows, Mac or Linux\n\nThe instructions are in the local build FAQ. This is necessary because the cloud compilers are not configured to generate debugging builds.\n\nIn this tutorial, we'll use three different debugger devices, but they all work in the same way so you can choose whatever device you prefer.\n\nSome debuggers support SWD (Single Wire Debug) mode, JTAG mode or both to talk to the STM32 microcontroller.\n\nThe Particle Programmer Shield is designed to fit the Photon. You can also use it with an Electron, with the extra pins hanging over the edge.\n\nIf you need your device to be in a breadboard while you debug you can look at using one of the other interfaces.\n\nYou will need to use two separate micro USB cables. One connects to the Programmer Shield to access the JTAG features, and the other connects directly to the Photon.\n\nThe Photon USB cable isn't entirely necessary because the shield can power the Photon, but since the Eclipse debug process below by default uses DFU to load the debugging code onto the Photon, it's easier if you use a direct USB connection to the Photon for that.\n\nIn order to use a Particle Programmer Shield with OpenOCD under Windows you'll need to assign the STM32 STLink device using Zadig.\n\nYou may need to select List All Devices from the Options menu to see the device.\n\nSelect USB <-> Serial Converter (Interface 0)-> (USB ID 0403 6010 00). Then set the driver to libusbK. Make sure you select Interface 0, not Interface 1.\n\nThis doesn't seem to be a problem with El Capitan and Sierra versions of Mac OS (OS X), but you may encounter a driver conflict that makes it difficult to use the Programmer Shield on the Mac. The detailed instructions for the workaround are in the instructions for the Programmer Shield.\n\nIn some cases, you may need to unload and reload the driver to get the Programmer Shield to work. This will need to be done after each reboot. Try it first without running this, as sometimes it works without it. It may be sufficient to only do this and not the more elaborate steps listed above, as well.\n\nYou can find inexpensive USB stick that support SWD (Serial Wire Debug) at places like Amazon and eBay for US$12 or less. They work great with the Photon, P1, and Electron, requiring only two data lines and ground.\n\nThey are compatible with the official ST-LINK/V2, however these devices generally only support SWD.\n\nHere's an example on how to connect one brand of such an interface; verify that yours is the same before wiring.\n• USB connector side away from you\n\nYou will only use the bottom row (SWD). The SWIM connections are for the STM8 processors, not the STM32 processors used in the Particle devices.\n\nIn this picture, it's wired as follows. Note that the color code is not official, it's just what it happened to be with the female-to-male jumper wires that I used.\n\nIt's a little unclear whether the VCC pin (orange) should be connected for the mini devices. I generally leave it unconnected for the mini devices but connected for the actual ST-LINK/V2 real device.\n\nIn order to use a mini SWD device with OpenOCD under Windows you'll need to assign the STM32 STLink device using Zadig.\n\nYou may need to select List All Devices from the Options menu to see the STLink device.\n\nSelect STM32 STLink (USB ID 0483 3748). Then set the driver to libusbK.\n\nYou can also use an official ST-LINK/V2 device. It supports both JTAG and SWD mode.\n\nIf you have a full 20-pin JTAG connector (0.1\"x0.1\" pitch, in 2x10 layout) on your board, that's the easiest way to connect the device. The connector is keyed so you can usually only insert it one way.\n\nYou can also connect the ST-LINK/V2 using jumper wires; this is more practical for SWD as it only requires 3 or 4 pins.\n\nYou only need to connect one GND line, though it's best to connect all of them if possible to reduce noise on the ribbon cable if you are making a board with a 20-pin JTAG connector.\n\nIf you're just using SWD like you would with the mini SWD device, you should connect it as follows:\n\nThe pins on the connector are numbered this way when you have the programmer positioned so the logo is upright and the notch is on the bottom of the 20-pin connector.\n\nAs above, the color code is not official, it's just what I happened to have on the female-to-male jumper wires that I used.\n\nImportant: Make sure your software doesn't use the debugger pins: D6 and D7 for SWD, or D4, D5, D6, and D7 for JTAG. This means you can't use the D7 user LED while using the debugger.\n\nThe firmware compiled through the Web IDE, Desktop IDE or CLI are don't contain debug information. You'll need a local gcc-arm toolchain to make builds that are compatible with the debugger.\n\nFor debugging using JTAG/SWD you create special monolithic debug builds. They're monolithic in that they are a single file that contains the system and user firmware instead of the usual modular binaries (system parts and user part). The disadvantage of the monolithic binaries is that they are large, maybe 480 Kbytes for a simple program that might only be 6 Kbytes normally!\n\nWhenever you switch between debug and non-debug builds, or monolithic to non-monolithic, you must add the clean option to make.\n\nIn this example I created a new directory in src called \"tinkerbreak\" that contains tinkerbreak.cpp, a modified version of tinker that responds to the Particle function \"break\" to break into the debugger under software control.\n\nTo build manually (not using Eclipse), you'd use a command line like this, based on the directory layout in the gcc-arm installation instructions linked to above.\n\nIn the tinkerbreak/target directory are a few files that you may need:\n• tinkerbreak.bin - monolithic firmware build (can flash with the Particle CLI or dfu-util)\n\nTo restore normal modular firmware, to allow for user flashing independent of Device OS firmware and normal OTA flashing, put the device in DFU mode and:\n\nAfter it reboots, immediately put it back in DFU mode, then:\n\nThis is the abbreviated method that will allow you to use the source debugger in Eclipse. Setting up a project that has full code analysis and auto-completion is much more complicated, and will be the topic of a separate FAQ. For this version, we just turn off displaying some errors.\n\nYou may need to install a modern Java 8 JDK (not just the JRE) in order to use Eclipse. The JDK install page has a link to download the JDK, which is what you need.\n\nSelect a download from the first group, Java SE Development Kit 8u_some number_. It was 8u111 when I wrote this, but select the current version.\n\nI used the 64-bit Windows version, jdk-8u111-windows-x64.exe. You should use the latest version of JDK 8 for your operating system, not specifically build 111.\n\nFor this example, I selected Eclipse IDE for C/C++ Developers but you can choose a different one if desired. If you already have Eclipse installed, you can also just add in the packages to your existing install. The examples here use Eclipse Neon (4.6).\n\nThe download is a zip file, not an installer. Select the file in your Downloads folder and right-click. Select Extract All. You will probably want to change the destination directory. I put mine in C:\\Program Files. It will create the eclipse directory in that for you.\n\nFor convenience, I created a desktop shortcut icon as well. Right click on eclipse.exe and select Create Shortcut and select Yes to create it on the desktop (or drag and drop it there).\n\nNow you should be able to launch Eclipse and complete the next step of the instructions, Eclipse Install GNU ARM C/C++, which is common for all operating systems.\n\nFor this example, I selected Eclipse IDE for C/C++ Developers but you can choose a different one if desired. If you already have Eclipse installed, you can also just add in the packages to your existing install. The examples here use Eclipse Neon (4.6).\n• Drag the Eclipse file to your Applications folder.\n\nEclipse doesn't have an installer or dmg file.\n\nAlso, you may be prompted to install the Legacy Java SE 6 for Mac OS when you first run Eclipse. If this happens, just follow the instructions for doing so.\n• Upgrade to Java JDK 8 if necessary\n\nHowever, if you install the Legacy Java SE 6, you will also need to install a more modern version of Java as well. You need to install the JDK, not the JRE, in order to use Eclipse. The JDK install page has a link to download the JDK, which is what you need.\n• Select a download from the first group, Java SE Development Kit 8u_some number_.\n\nIt was 8u111 when I wrote this, but select the current version.\n\nI used the 64-bit Mac version, jdk-8u111-Mac OSx-x64.dmg. You should use the latest version of JDK 8 for your operating system, not specifically build 111.\n\nThen you need to swap version 8 for the version 6 of the Mac system JVM. Open a Terminal window:\n\nMake sure you link to the version of the JDK you installed, which might not be build 111.\n\nNow you should be able to launch Eclipse and complete the next step of the instructions, Eclipse Install GNU ARM C/C++, which is common for all operating systems.\n\nWhile you can install Eclipse using apt-get, at the time of writing it was an old version, and all of the other platforms I'm using Eclipse Neon, so I opted for a manual install.\n• You may need to install a modern Java 8 JDK (not just the JRE) in order to use Eclipse.\n\nThe JDK install page has a link to download the JDK, which is what you need. You can also use OpenJDK if you prefer.\n• Select a download from the first group, Java SE Development Kit 8u_some number_.\n\nIt was 8u111 when I wrote this, but select the current version.\n\nI selected the Linux x64 tar.gz version, jdk-8u111-linux-x64.tar.gz. You should use the latest version of JDK 8 for your operating system, not specifically build 111.\n• Extract the archive and move it to a suitable location.\n\nYou'll probably have to log out and log back in after that.\n\nFor this example, I selected Eclipse IDE for C/C++ Developers but you can choose a different one if desired. If you already have Eclipse installed, you can also just add in the packages to your existing install. The examples here use Eclipse Neon (4.6).\n\nExtract the archive and move it to a suitable location:\n\nNow you should be able to launch Eclipse and complete the next step of the instructions, Eclipse Install GNU ARM C/C++, which is common for all operating systems.\n\nThese steps are required for Windows, Mac and Linux to use the gcc-arm compiler and GDB with the Photon and Electron.\n• Download the latest release of the GNU ARM Eclipse plugin.\n• From the Help menu select Install New Software...\n• Click Add then Archive and select the zip file of GNU ARM Eclipse.\n\nYou will need the following:\n\nIf you're using a different debugging hardware like the Segger J-Link, be sure to select that as well. There are additional instructions at the official download site.\n• Proceed through the rest of the installation steps\n\nYou may get a warning for unsigned content. You should select OK and proceed with the installation.\n\nThere is a separate install for the operating system-specific GNU ARM Eclipse OpenOCD bits.\n\nThere are further installation instructions in the GNU ARM Eclipse OpenOCD installation instructions.\n\nFor Windows, just run the appropriate installer and accept all of the default options. The default install location is a little unwieldy but you can run the openocd --version command to test the new installation with a command something like this:\n\nOr better yet, the more involved example, using a ST-LINK/V2 mini SWD USB stick connected to a Photon in DFU mode (DFU has debugger support regardless of what firmware is flashed):\n\nIf you are using the Particle Programmer Shield, you will need to copy the configuration file. Download particle-ftdi.cfg and copy it into your OpenOCD installation directory, into scripts/interface/ftdi/particle-ftdi.cfg.\n\nFor Gen 3 devices, also download nrf52-particle.cfg and copy it to the scripts/target directory.\n\nThere is a separate install for the operating-specific GNU ARM Eclipse OpenOCD bits.\n\nThere are further installation instructions in the GNU ARM Eclipse OpenOCD installation instructions.\n\nFor Mac, download the pkg installer and run it. You may need to go into Control Panel then Security & Privacy and use the Open Anyway button because of the unsigned content.\n\nThe installation directory will be something like: /Applications/GNU ARM Eclipse/OpenOCD/0.10.0-201610281609-dev.\n\nYou can test it by connecting the debugging device to a Photon in DFU mode (DFU has debugger support regardless of what firmware is flashed). In this case, I connected a ST-LINK/V2 mini device to a Photon with SWD:\n\nIf you are using the Particle Programmer Shield, you will need to copy the configuration file. Download particle-ftdi.cfg and copy it into your OpenOCD installation directory, into scripts/interface/ftdi/particle-ftdi.cfg.\n\nFor Gen 3 devices, also download nrf52-particle.cfg and copy it to the scripts/target directory.\n\nThere is a separate install for the operating-specific GNU ARM Eclipse OpenOCD bits.\n\nThere are further installation instructions in the GNU ARM Eclipse OpenOCD installation instructions.\n\nI downloaded the Debian 64-bit version, gnuarmeclipse-openocd-debian64-0.10.0-201610281609-dev.tgz but you should download whatever the current version is, along with 32-bit or 64-bit as appropriate.\n\nExtract the archive and move it to a suitable location.\n\nYou can test it by connecting the debugging device to a Photon in DFU mode (DFU has debugger support regardless of what firmware is flashed). In this case, I connected a ST-LINK/V2 mini device to a Photon with SWD:\n\nIf you are using the Particle Programmer Shield, you will need to copy the configuration file. Download particle-ftdi.cfg and copy it into your OpenOCD installation directory, into scripts/interface/ftdi/particle-ftdi.cfg.\n\nFor Gen 3 devices, also download nrf52-particle.cfg and copy it to the scripts/target directory.\n• From the File menu select New then Makefile Project with Existing Code.\n\nIn this example, we'll create a project for the tinkerbreak code we used in the command line example. Select that and make sure Cross ARM GCC is selected.\n• Download Makefile and save it into your project directory.\n\nIt will be the same for all projects. You will need to right click on the project name (tinkerbreak) in the Project Explorer and select Refresh for it to display in Eclipse.\n\nThere must be a single tab before each of the two indented cd commands. The make will fail if there are spaces, which may happen if you copy and paste from the web page.\n• Right click on tinkerbreak in the Project Explorer and select Properties. Most of the settings that you need to modify are located here.\n\nYou should not need to change any setting on this page, but here's what it should look like:\n• Use the Add button (2) to add two new build variables:\n\nIt should look like this when done:\n\nAfter making a change in the preferences, it's a good idea to click Apply (3) to make sure the changes are saved.\n• For Windows: Use the Add button (2) to add new environment variables:\n• For Mac OS: Use the Add button (2) to add new environment variables:\n• For Linux: Use the Add button (2) to add new environment variables:\n\nAPPDIR is the path to your source directory, the one you previously created a Makefile in. For Windows, make sure you use forward slashes (/) as the directory separator, not backward slashes commonly used in Windows. The reason is that the path is passed to GNU make, which handles the directory separators in a more Unix-like manner.\n\nFIRMWARE is the path to the firmware release you downloaded earlier as part of the installation of the local gcc-arm build chain. For Windows, make sure you use forward slashes (/) as the directory separator.\n\nMAKEOPTS are the options passed to make. When using the debugger with a monolithic debugging build, you typically use:\n\nFor the simplest non-debug modular build, the MAKEOPTS can be an empty string.\n\nPATH specifies the PATH to pass to the shell running the Make. This may vary from computer to computer and operating system.\n\nFor Windows, insert at the beginning, C:/cygwin64/bin;C:/cygwin64/usr/local/bin or where you have your Cygwin directory. This is necessary because Cygwin tools are not added to the Windows System PATH because they can cause odd problems when Linux-style tools conflict with DOS-style tools (like find), but Eclipse needs to be able to call tools like make.\n\nFor Linux and Mac, you should make sure that the gcc-arm local build chain is in the path. For example, /usr/local/bin/gcc-arm/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin.\n\nPLATFORM is the platform you're building for, typically photon, p1, or electron.\n\nTARGETBIN is the relative path to the built firmware binary. Setting it to:\n\nwill automatically change it to match your project name. In this example, it would be target/tinkerbreak.bin.\n\nThis is necessary because the Device OS firmware is not fully integrated into Eclipse in this FAQ, so the lack of definitions causes many lines to be flagged as errors.\n\nSelect C/C++ General then Code Analysis (1). Select Use project settings (2). Scroll down and uncheck the box for Syntax and Semantic Errors (3).\n\nClick Apply then OK to close the Properties window.\n• Try a build. Right click on the project name (1) and select Build Project (2).\n\nAfter successfully building and flashing, you'll see a message in the CDT Build Console pane at the bottom of the window.\n\nThe firmware binary (target/tinkerbreak.bin) in this case will still be fine, but the Photon won't have that firmware automatically loaded on it, of course. If you don't want to flash the device automatically, remove the option from C/C++ Build then Environment in the variable MAKEOPTS.\n\nIf the Run menu is nearly empty, from the Window menu select Perspective then Open Perspective then C/C++ and the Debug Configurations menu should appear.\n\nSelect GDB OpenOCD Debugging and click the New button.\n\nIn the Main tab, in the C/C++ Application: box, enter:\n\nIf you've named your project differently, the pattern is still target/_project_name_.elf.\n\nIn the Debugger tab, in the Config options enter:\n\nIf you're using a different debugger, specify that interface instead. For the Particle Programmer Shield, enter:\n\nYou only need to set the Debug configuration once; the next time you want to run using the debugger, from the Run menu select Debug History then tinkerbreak Default.\n\nMake sure you select the project name Default option; selecting project name.elf will try (and fail) to launch the local debugger, not the SWD debugger. Likewise, clicking on the debug toolbar icon may try to launch the local debugger, as well.\n• Click Yes to switch to a Debug perspective.\n\nYou should see a screen similar to the one below after a few seconds. A ST-LINK/V2 Mini SWD stick should be alternating red and green, and the Photon will probably have a solid white status LED.\n\nOf importance is that the execution is stopped at 0x0 (1) and you need to click the Resume button (2) to continue.\n\nThis is what the screen looks like when firmware is running. The Photon should be breathing cyan and the a ST-LINK/V2 Mini SWD stick should be still be alternating red and green.\n\nIf you see errors in the debugging console like these make sure your code is not using pins D6 and D7 (SWD), or D4, D5, D6 and D7 (JTAG).\n\nSome more techniques are described below in the Debugging Examples section.\n\nEclipse keeps multiple console views, one for each process. So there's one for the build, one for running openocd, one for running gdb, and so on.\n\nBy default, the standard Makefile optimizes for size, which makes complete sense. When debugging code, however, this can be annoying because it will make it impossible to set breakpoints at certain locations in the code, you won't be able to step some individual lines of code, and some variables won't be able to be inspected by the debugger.\n\nThe file typically will have something like this near the top:\n\nSimply remove the -Os (optimize for size). This is probably best done only for monolithic debug builds, since you may run out of space for some system parts in a modular build without optimization.\n\nAssuming you've set things up as described above, the tinkerbreak application will respond to a Particle function break. In a separate command prompt window, run a command like this, replacing test4 with the name or device ID of your Photon.\n\nThe screen will change to show the call stack (1) and the line where the breakpoint occurred (2).\n\nYou can click the Resume button (3) to continue executing code on the Photon. It should reconnect to the cloud and resume breathing cyan.\n\nTo set a breakpoint in the code, double-click in the blue bar to the left of the line number. A small icon with a check mark and a tiny blue circle will appear.\n• The P2 and Photon 2 (RTL872x) support up to 2 hardware breakpoints\n\nIn this example, I set a breakpoint on line 51.\n\nThen, in a separate command prompt window, issue a command like:\n\nThe Eclipse window should change to something like the following.\n\nExecution is suspended because of a breakpoint at line 51 (1).\n\nThe code at that line is highlighted (2).\n\nThe value of div is 100. The value of result is random because it hasn't been set yet.\n\nFinally, click the Step Over toolbar icon (4) to proceed to to the next line of code.\n\nNow you can see that that the next line of code is selected (1) and the value of result has been set appropriately (2).\n\nTo switch between the Debug and C/C++ Perspective, use the perspective icons in the toolbar in the upper right corner of the screen.\n\nTo switch between Photon and Electron, for example, right click on the project name, select Properties then C/C++ Build then Environment and edit the PLATFORM setting. In this case, I changed it to electron.\n\nYou should always delete the target directory as well to make sure all of the necessary files are rebuilt. It's not necessary to do a Clean, which takes a very long time to run, as long as you delete the target directory.\n\nIf you've built a board with a P1, it's highly recommended that you include as many debugging ports as possible. However, as long as you include D6, D7, and GND for SWD, you can use OpenOCD and Eclipse for debugging.\n• Right click on the project name, select Properties then C/C++ Build then Environment and edit the PLATFORM variable, setting it to p1 (lowercase). Also remove program-dfu from the MAKEOPTS variable, as you can't use the program-dfu option if you don't have USB.\n• Delete the target directory if you've changed the platform setting.\n• Right click on the project name and select Build Project.\n• Open two command prompt windows. In one, run the OpenOCD server in telnet mode. The directory may vary depending on version and operating system; other examples are shown above.\n• In the other, telnet to the OpenOCD server and issue command such as these to program the binary.\n• Close both windows to stop this instance of OpenOCD.\n• From the Run menu in Eclipse, select Debug History then tinkerbreak Default. You should have a working debug session as above."
    },
    {
        "link": "https://help.eclipse.org/latest/topic/org.eclipse.jdt.doc.user/concepts/cdebugger.htm",
        "document": "The Java development toolkit (JDT) includes a debugger that enables you to detect and diagnose errors in your programs running either locally or remotely.\n\nThe debugger allows you to control the execution of your program by setting breakpoints, suspending launched programs, stepping through your code, and examining the contents of variables.\n\nThe debugger has a client/server design so you can debug programs running remotely on other systems in the network as well as programs running locally on your workstation. The debug client runs inside the workbench on your workstation. The debugger server runs on the same system as the program you want to debug. This could be a program launched on your workstation (local debugging) or a program started on a computer that is accessible through a network (remote debugging)."
    }
]