[
    {
        "link": "https://pygame.org/docs",
        "document": "Welcome to pygame! Once you've got pygame installed ( or for most people), the next question is how to get a game loop running. Pygame, unlike some other libraries, gives you full control of program execution. That freedom means it is easy to mess up in your initial steps.\n\nHere is a good example of a basic setup (opens the window, updates the screen, and handles events)--\n\nHere is a slightly more fleshed out example, which shows you how to move something (a circle in this case) around on screen--\n\nFor more in depth reference, check out the Tutorials section below, check out a video tutorial (I'm a fan of this one), or reference the API documentation by module."
    },
    {
        "link": "https://geeksforgeeks.org/pygame-tutorial",
        "document": "Python PyGame library is used to create video games. This library includes several modules for playing sound, drawing graphics, handling mouse inputs, etc. It is also used to create client-side applications that can be wrapped in standalone executables.\n\nThis Python PyGame tutorial will help to learn the Pygame from basic to advance with the help of good and well-explained examples.\n\nPygame is a special tool that helps people to make fun and exciting video games using the Python. In PyGame, you can create your own computer game world using a set of tools. It includes computer graphics and sound libraries designed to be used with the Python programming language.\n\nTo get the latest stable version of pygame, you can download it from this link.\n• None How to install Pygame in Windows?\n• None How to initialize all the imported modules in PyGame?\n• None How to create an empty PyGame window?\n• None How to get the size of the PyGame Window?\n• None How to change screen background color in Pygame?\n• None How to Change the Name of a Pygame window?\n• None How to set up the Game Loop in PygGame?\n• None How to change the PyGame icon?\n• None How to draw a rectangle in Pygame?\n• None How to draw a rectangle with rounded corners in PyGame?\n• None How to add Custom Events in Pygame?\n• None How to get keyboard input in pygame?\n• None How to create a text input box with Pygame?\n• None Getting the width and height of an image in Pygame\n• None How to Rotate and Scale images using PyGame?\n• None How to move an image with the mouse in PyGame?\n• None How to use the mouse to scale and rotate an image in PyGame?\n• None How to Create Buttons in a game using PyGame?\n• None Adding Boundary to an Object in Pygame\n• None How to add color breezing effect using pygame?\n• None How to add color breezing effect using pygame?\n\nIs pygame better than Unity?"
    },
    {
        "link": "https://github.com/pygame/pygame",
        "document": "Pygame is a free and open-source cross-platform library for the development of multimedia applications like video games using Python. It uses the Simple DirectMedia Layer library and several other popular libraries to abstract the most common functions, making writing these programs a more intuitive task.\n\nWe need your help to make pygame the best it can be! New contributors are welcome.\n\nBefore installing pygame, you must check that Python is installed on your machine. To find out, open a command prompt (if you have Windows) or a terminal (if you have MacOS or Linux) and type this:\n\nIf a message such as \"Python 3.8.10\" appears, it means that Python is correctly installed. If an error message appears, it means that it is not installed yet. You must then go to the official website to download it.\n\nOnce Python is installed, you have to perform a final check: you have to see if pip is installed. Generally, pip is pre-installed with Python but we are never sure. Same as for Python, type the following command:\n\nIf a message such as \"pip 20.0.2 from /usr/lib/python3/dist-packages/pip (python 3.8)\" appears, you are ready to install pygame! To install it, enter this command:\n\nOnce pygame is installed, quickly test your library by entering the following command, which opens one of the many example games that comes pre-installed:\n\nIf this doesn’t work, the Getting Started section of the official website has more information for platform specific issues, such as adding python to your machine’s PATH settings\n\nIf you are just getting started with pygame, you should be able to get started fairly quickly. Pygame comes with many tutorials and introductions. There is also full reference documentation for the entire library. Browse the documentation on the docs page. You can also browse the documentation locally by running in your terminal. If the docs aren't found locally, it'll launch the online website instead.\n\nThe online documentation stays up to date with the development version of pygame on GitHub. This may be a bit newer than the version of pygame you are using. To upgrade to the latest full release, run in your terminal.\n\nBest of all, the examples directory has many playable small programs which can get you started playing with the code right away.\n\nPygame is a powerful library for game development, offering a wide range of features to simplify your coding journey. Let's delve into what pygame has to offer:\n\nGraphics - With pygame, creating dynamic and engaging graphics has never been easier. The library provides simple yet effective tools for 2D graphics and animation, including support for images, rectangles, and polygon shapes. Whether you're a seasoned game developer or just starting out, pygame has you covered.\n\nSound - Pygame also includes support for playing and manipulating sound and music, making it easy to add sound effects and background music to your games. With support for WAV, MP3, and OGG file formats, you have plenty of options to choose from.\n\nInput - Pygame provides intuitive functions for handling keyboard, mouse, and joystick input, allowing you to quickly and easily implement player controls in your games. No more struggling with complex input code, pygame makes it simple.\n\nGame Development - Lastly, pygame provides a comprehensive suite of tools and features specifically designed for game development. From collision detection to sprite management, pygame has everything you need to create exciting and engaging games. Whether you're building a platformer, puzzle game, or anything in between, pygame has you covered.\n\nIf you want to use features that are currently in development, or you want to contribute to pygame, you will need to build pygame locally from its source code, rather than pip installing it.\n\nInstalling from source is fairly automated. The most work will involve compiling and installing all the pygame dependencies. Once that is done, run the script which will attempt to auto-configure, build, and install pygame.\n\nMuch more information about installing and compiling is available on the Compilation wiki page.\n• Documentation Contributions - Guidelines for contributing to the main documentations\n• Writing your first unit test - Step by step guide on how to write your first unit test in Python for Pygame.\n• How to Hack Pygame - Information on hacking, developing, and modifying Pygame\n• Issue Tracker for beginners - A way for beginners to contribute to the project\n• Communication tools - More information and ways to get in touch with the Pygame team\n\nThanks to everyone who has helped contribute to this library. Special thanks are also in order.\n• Marcus Von Appen: many changes, and fixes, 1.7.1+ freebsd maintainer\n• Lenard Lindstrom: the 1.8+ windows maintainer, many changes, and fixes\n• Brian Fisher for svn auto builder, bug tracker and many contributions\n• Rene Dudfield: many changes, and fixes, 1.7+ release manager/maintainer\n• Phil Hassey for his work on the pygame.org website\n• DR0ID for his work on the sprite module\n• Jan Ekhol, Ray Kelm, and Peter Nicolai: putting up with early design ideas\n• TheCorruptor for his incredible logos and graphics\n\nThanks to those sending in patches and fixes: Niki Spahiev, Gordon Tyler, Nathaniel Pryce, Dave Wallace, John Popplewell, Michael Urman, Andrew Straw, Michael Hudson, Ole Martin Bjoerndalen, Herve Cauwelier, James Mazer, Lalo Martins, Timothy Stranex, Chad Lester, Matthias Spiller, Bo Jangeborg, Dmitry Borisov, Campbell Barton, Diego Essaya, Eyal Lotem, Regis Desgroppes, Emmanuel Hainry, Randy Kaelber Matthew L Daniel, Nirav Patel, Forrest Voight, Charlie Nolan, Frankie Robertson, John Krukoff, Lorenz Quack, Nick Irvine, Michael George, Saul Spatz, Thomas Ibbotson, Tom Rothamel, Evan Kroske, Cambell Barton.\n\nAnd our bug hunters above and beyond: Angus, Guillaume Proux, Frank Raiser, Austin Henry, Kaweh Kazemi, Arturo Aldama, Mike Mulcheck, Michael Benfield, David Lau\n\nThere's many more folks out there who've submitted helpful ideas, kept this project going, and basically made our life easier. Thanks!\n\nMany thank you's for people making documentation comments, and adding to the pygame.org wiki.\n\nAlso many thanks for people creating games and putting them on the pygame.org website for others to learn from and enjoy.\n\nLots of thanks to James Paige for hosting the pygame bugzilla.\n\nAlso a big thanks to Roger Dingledine and the crew at SEUL.ORG for our excellent hosting.\n\nPygame is obviously strongly dependent on SDL and Python. It also links to and embeds several other smaller libraries. The font module relies on SDL_ttf, which is dependent on freetype. The mixer (and mixer.music) modules depend on SDL_mixer. The image module depends on SDL_image, which also can use libjpeg and libpng. The transform module has an embedded version of SDL_rotozoom for its own rotozoom function. The surfarray module requires the Python NumPy package for its multidimensional numeric arrays. Dependency versions:\n\nThis library is distributed under GNU LGPL version 2.1, which can be found in the file . We reserve the right to place future versions of this library under a different license.\n\nThis basically means you can use pygame in any project you want, but if you make any changes or additions to pygame itself, those must be released with a compatible license (preferably submitted back to the pygame project). Closed source and commercial games are fine.\n\nThe programs in the subdirectory are in the public domain.\n\nSee docs/licenses for licenses of dependencies."
    },
    {
        "link": "https://pygame.org/docs/tut/PygameIntro.html",
        "document": "Pygame started in the summer of 2000. Being a C programmer of many years, I discovered both Python and SDL at about the same time. You are already familiar with Python, which was at version 1.5.2. You may need an introduction to SDL, which is the Simple DirectMedia Layer. Created by Sam Lantinga, SDL is a cross-platform C library for controlling multimedia, comparable to DirectX. It has been used for hundreds of commercial and open source games. I was impressed at how clean and straightforward both projects were and it wasn't long before I realized mixing Python and SDL was an interesting proposal. I discovered a small project already under-way with exactly the same idea, PySDL. Created by Mark Baker, PySDL was a straightforward implementation of SDL as a Python extension. The interface was cleaner than a generic SWIG wrapping, but I felt it forced a \"C style\" of code. The sudden death of PySDL prompted me to take on a new project of my own. I wanted to put together a project that really took advantage of Python. My goal was to make it easy to do the simple things, and straightforward to do the difficult things. Pygame was started in October, 2000. Six months later pygame version 1.0 was released.\n\nI find the best way to understand a new library is to jump straight into an example. In the early days of pygame, I created a bouncing ball animation with 7 lines of code. Let's take a look at a friendlier version of that same thing. This should be simple enough to follow along, and a complete breakdown follows. This is as simple as you can get for a bouncing animation. First we see importing and initializing pygame is nothing noteworthy. The imports the package with all the available pygame modules. The call to initializes each of these modules. Make sure the gif file of the bouncing ball is in the same folder as the code block. On line 4 we set the size of the display window, for best results you can change these numbers to match your own monitor's resolution. On line 8 we create a graphical window with the call to . Pygame and SDL make this easy by defaulting to the best graphics modes for the graphics hardware. You can override the mode and SDL will compensate for anything the hardware cannot do. Pygame represents images as Surface objects. The function creates a new Surface object that represents the actual displayed graphics. Any drawing you do to this Surface will become visible on the monitor. At line 10 we load our ball image. Pygame supports a variety of image formats through the SDL_image library, including BMP, JPG, PNG, TGA, and GIF. The function returns us a Surface with the ball data. The Surface will keep any colorkey or alpha transparency from the file. After loading the ball image we create a variable named ballrect. Pygame comes with a convenient utility object type named , which represents a rectangular area. Later, in the animation part of the code, we will see what the Rect objects can do. On line 23 we erase the screen by filling it with a black RGB color. If you have never worked with animations this may seem strange. You may be asking \"Why do we need to erase anything, why don't we just move the ball on the screen?\" That is not quite the way computer animation works. Animation is nothing more than a series of single images, which when displayed in sequence do a very good job of fooling the human eye into seeing motion. The screen is just a single image that the user sees. If we did not take the time to erase the ball from the screen, we would actually see a \"trail\" of the ball as we continuously draw the ball in its new positions. On line 24 we draw the ball image onto the screen. Drawing of images is handled by the method. A blit basically means copying pixel colors from one image to another. We pass the blit method a source to copy from, and a position to place the source onto the destination. That concludes this short introduction to pygame. Pygame also has modules to do things like input handling for the keyboard, mouse, and joystick. It can mix audio and decode streaming music. With the Surfaces you can draw simple shapes, rotate and scale the picture, and even manipulate the pixels of an image in realtime as numpy arrays. Pygame also has the ability to act as a cross platform display layer for PyOpenGL. Most of the pygame modules are written in C, few are actually done in Python.\n\nOver the past several years there has been an interesting trend in game development, the move towards higher level languages. Usually a game is split into two major parts. The game engine, which must be as fast as possible, and the game logic, which makes the engine actually do something. It wasn't long ago when the engine of a game was written in assembly, with portions written in C. Nowadays, C has moved to the game engine, while often the game itself is written in higher level scripting languages. Games like Quake3 and Unreal run these scripts as portable bytecode. Pygame and SDL serve as an excellent C engine for 2D games. Games will still find the largest part of their runtime is spent inside SDL handling the graphics. SDL can take advantage of graphics hardware acceleration. Enabling this can change a game from running around 40 frames per second to over 200 frames per second. When you see your Python game running at 200 frames per second, you realize that Python and games can work together. Still, there are very clear limitations. The best way to manage hardware accelerated graphics is not always the way to get fastest results from software rendering. Hardware support is not available on all platforms. When a game gets more complex, it often must commit to one or the other. SDL has some other design limitations, things like full screen scrolling graphics can quickly bring your game down to unplayable speeds. While SDL is not suitable for all types of games, remember companies like Loki have used SDL to run a wide variety of retail quality titles. Pygame is fairly low-level when it comes to writing games. You'll quickly find yourself needing to wrap common functions into your own game environment. The great thing about this is there is nothing inside pygame to get in your way. Your program is in full control of everything. The side effect of that is you will find yourself borrowing a lot of code to get a more advanced framework put together. You'll need a better understanding of what you are doing.\n\nOne thing that has caught my attention is the amount of people coming to Python for the first time to try game development. I can see why games are a draw for new programmers, but it can be difficult since creating games requires a firmer understanding of the language. I've tried to support this group of users by writing many examples and pygame tutorials for people new to these concepts. In the end, my advice is to keep it simple. I cannot stress this enough. If you are planning to create your first game, there is a lot to learn. Even a simpler game will challenge your designs, and complex games don't necessarily mean fun games. When you understand Python, you can use pygame to create a simple game in only one or two weeks. From there you'll need a surprising amount of time to add the polish to make that into a full presentable game."
    },
    {
        "link": "https://pypi.org/project/pygame",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://stackoverflow.com/questions/16044229/how-to-get-keyboard-input-in-pygame",
        "document": "You can get the events from pygame and then watch out for the event, instead of looking at the keys returned by (which gives you keys that are currently pressed down, whereas the event shows you which keys were pressed down on that frame).\n\nWhat's happening with your code right now is that if your game is rendering at 30fps, and you hold down the left arrow key for half a second, you're updating the location 15 times.\n\nTo support continuous movement while a key is being held down, you would have to establish some sort of limitation, either based on a forced maximum frame rate of the game loop or by a counter which only allows you to move every so many ticks of the loop.\n\nThen somewhere during the game loop you would do something like this:\n\nThis would only let you move once every 10 frames (so if you move, the ticker gets set to 10, and after 10 frames it will allow you to move again)"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-get-keyboard-input-in-pygame",
        "document": "While using pygame module of Python, we sometimes need to use the keyboard input for various operations such as moving a character in a certain direction. To achieve this, we have to see all the events happening. Pygame keeps track of events that occur, which we can see with the events.get() function. In this article, we are going to discuss how we can get and use various keyboard inputs in pygame.\n\nWhenever a key is pressed or released, pygame.event() queue methods pygame.KEYDOWN and pygame.KEYUP events respectively.\n\nFor example, if we want to detect if a key was pressed, we will track if any event of pygame.KEYDOWN occurred or not and, accordingly, we will get to know if any key was pressed or not. The code for detecting if any key was pressed or not can be written as:\n\nAfter running this code, it is seen that whenever a key has pressed a string “A key has been pressed” is printed on the terminal\n\nTo know which key was pressed, we have to check the event.key variable corresponds to which pygame keys. For example, the pygame key for the letter “A” is “K_a” then we will compare event.Key with K a and if it comes to be same that means the key “A” was pressed.\n\nThe various keyboard key and corresponding pygame keys are:\n\nFor example, let’s create a code to check if key “A” or “J” or “P” or “M” was pressed or not. The code for checking will be:\n\nWhen we run this code and press the given keys the corresponding strings will be printed on the terminal."
    },
    {
        "link": "https://stackoverflow.com/questions/50783175/pygame-how-to-put-keyboard-control-in-separate-module-without-loosing-continuou",
        "document": "Overview I am making a game with a spaceship that can move in all 4 directions. In the game while loop my spaceship can be controlled by the keyboard as seen below. For the sake of simplicity I have only shown some part of my code, and only the part where I move my spaceship to the right.\n\nMethod As seen, I use a 'for loop' and the pygame module to receive the input from the keyboard. And I am using the flag method to enable continuous moving. I start by setting all the flags to False. Then depending on the keyboard press it moves in the different direction and set to False again when the key goes up. Its all working fine... NB: the variable surf_centerx is the center of my spaceship and the screen.blit(surf, surf_rect), pygame.display.flip() at the end is just displaying the spaceship on the screen and updating the latest changes in position of the spaceship, respectively.\n\nCode refactoring - I thought But because my while loop keeps growing I want to do some code refactoring, I thought :o) So I would put my keyboard stuff in a separate module, with a function I would then call in my while loop. I save the value from k_c.check_key_events() in the variable, 'returned' and below that the value is unpacked by the line 'move_right = returned'. My while loop now look like this (a lot shorter):\n\nAnd the side module controlling the keyboard (keyboard_control) is:\n\nI now call the keyboard_control module within the 'while loop' in the main module and the keyboard_control module should now return the value of the 'move_right' variable. Putting the for loop etc. in its own module is effectively simplifying the main module.\n\nProblem But running my program now gives the error: *return move_right UnboundLocalError: local variable 'move_right' referenced before assignment *\n\nThe problem is that the function does not know the variable 'move_right', because it is not defined within the function 'check_key_events()'. And if I defines it at the beginning of the function, something like this:\n\nThen my problem is that I loose the continuous moving, because in every cycle of the while loop the line 'returned = k_c.check_key_events()' calls the function 'check_key_events()', which sets the variable move_right to False even though I haven't released the 'move right' key. So my question is how do I cleverly come around this problem?? I just can't figure that out."
    },
    {
        "link": "https://geeksforgeeks.org/pygame-event-handling",
        "document": "An event is an action that is performed by the user in order to get the desired result. For instance, if a user clicks a button then it is known as a click event. Now, all the events that are performed by the user are inserted into a queue known as an event queue. Since it is a queue, it follows the First In First Out rule i.e. element inserted first will come out first. In this case, when an event is created it is added to the back of the queue and when the event is processed then it comes out from the front. Every element in this queue is associated with an attribute which is nothing but an integer that represents what type of event it is. Let us learn a few important attributes of the common event types.\n\nOwing to the fact that you have understood what an event in pygame is now let us dive deep into this topic. It is essential to know that the processing of an event must be done within the main function. This is because if in case if it is done, then there is a chance of having an input lag which can result in a poor user experience. The processing is done using pygame.event.get(). This is a function that will return the list of events that can be processed one after another.\n\nAs mentioned above, an event is an action conducted by the user. So let us wonder, what actions can be performed on the keyboard? The simple answer is either pressing the key or releasing it. Pressing the key is known as KEYDOWN and releasing it is known as KEYUP. The attribute associated with these events is known as the key of type integer. Its use is to represent the key of the keyboard. The common keys are represented by a pre-defined integer constant which is a capital K. This K is followed by an underscore and then the name of the key is written. For example K_s, K_F7.\n\nThe fact of the matter is that capital letters do not have an integer constant. The solution to this problem is something known as a modifier also known as a mod which is the modifier such as for shift, alt, ctrl, etc. that are being pressed simultaneously as the key. The integer value of mod is stored in something known as KMOD_ which is followed by the name of the key. For example KMOD_RSHIFT, KMOD_CTRL, etc. Let us revise the concepts that we have learned in the keyboard event topic with the help of a small code.\n\nLet us now understand the different types of mouse events. The first two are MOUSEBUTTONDOWN and MOUSEBUTTONUP which are similar to KEYDOWN and KEYUP except for the fact that here we are using a mouse. In addition to them, there is another mouse event known as MOUSEMOTION. Let us understand all 3 mouse events in detail.\n\ni) MOUSEBUTTONDOWN: The MOUSEBUTTONDOWN event occurs when the user presses the mouse button. It has a couple of attributes which are as follows :\n• button: It is an integer that represents the button that has been pressed. The left button of the mouse is represented by 1, for mouse-wheel the integer is 2, and integer 3 is when the right button of the mouse is pressed.\n• pos: It is the absolute position of the mouse (x, y) when the user presses the mouse button.\n\nii) MOUSEBUTTONUP: The MOUSEBUTTONUP event occurs when the user releases the mouse button. It has the same button and pos attributes that the MOUSEBUTTONDOWN has which have been mentioned above.\n\niii) MOUSEMOTION: This event occurs when the user moves his mouse in the display window. It has the attributes buttons, pos, and rel.\n• buttons: It is a tuple that represents whether the mouse buttons (left, mouse-wheel, right) are pressed or not.\n• pos: It is the absolute position (x, y) of the cursor in pixels.\n• rel: It represents the relative position to the previous position (rel_x, rel_y) in pixels.\n\nLet us revise the values for every mouse button attribute with the help of the following table:\n\nLet us revise the concepts that we have learned in the mouse event topic with the help of a small code.\n\nLet us now have a look at a couple of pygame programs related to event handling.\n\nThe following program will check whether we have pressed the left key or the right key and display output accordingly.\n\nThe following program will check whether we are moving the mouse or pressing the mouse button or releasing it and display output accordingly."
    },
    {
        "link": "https://pygame.org/docs/ref/key.html",
        "document": "This module contains functions for dealing with the keyboard.\n\nThe pygame module for interacting with events and queues queue gets and events when the keyboard buttons are pressed and released. Both events have and attributes.\n\nThe event has the additional attributes and .\n\nThe following is a list of all the constants (from pygame constants) used to represent keyboard keys.\n\nPortability note: The integers for key constants differ between pygame 1 and 2. Always use key constants ( ) rather than integers directly ( ) so that your key handling code works well on both pygame 1 and pygame 2.\n\nThe keyboard also has a list of modifier states (from pygame constants) that can be assembled by bitwise-ORing them together.\n\nThe modifier information is contained in the attribute of the and events. The attribute is a bitmask of all the modifier keys that were in a pressed state when the event occurred. The modifier information can be decoded using a bitwise AND (except for , which should be compared using equals ). For example:\n\nget the state of all keyboard buttons Returns a sequence of boolean values representing the state of every key on the keyboard. Use the key constant values to index the array. A value means that the button is pressed. Getting the list of pushed buttons with this function is not the proper way to handle text entry from the user. There is no way to know the order of keys pressed, and rapidly pushed keys can be completely unnoticed between two calls to . There is also no way to translate these pushed keys into a fully translated character value. See the events on the pygame module for interacting with events and queues queue for this functionality. New in pygame 2.2.0: The collection of bools returned by can not be iterated over because the indexes of the internal tuple does not correpsond to the keycodes. New in pygame 2.5.0: Iteration over the collection of bools returned by is now restored. However it still does not make sense to iterate over it. Currently.\n\nWhen the keyboard repeat is enabled, keys that are held down will generate multiple events. The parameter is the number of milliseconds before the first repeated event will be sent. After that, another event will be sent every milliseconds. If a value is provided and an value is not provided or is 0, then the will be set to the same value as . To disable key repeat call this function with no arguments or with set to 0. When pygame is initialized the key repeat is disabled. ValueError -- if or is < 0 Changed in pygame 2.0.0: A is now raised (instead of a ) if or is < 0.\n\nget the name of a key identifier Get the descriptive name of the button from a keyboard button id constant. Returns an empty string ( ) if the key is not found. If argument is (which is the default), this function returns the legacy name of a key where applicable. The return value is expected to be the same across different pygame versions (provided the corresponding key constant exists and is unique). If the return value is passed to the function, the original constant will be returned. Experimental: paramater still in development for testing and feedback. It may change. Please leave use_compat feedback with authors If this argument is , the returned name may be prettier to display and may cover a wider range of keys than with , but there are no guarantees that this name will be the same across different pygame versions. If the name returned is passed to the function, the original constant is returned back (this is an implementation detail which may change later, do not rely on this) Changed in pygame 2.1.3: Added argument and guaranteed API stability for it"
    }
]