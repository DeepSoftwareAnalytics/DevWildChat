[
    {
        "link": "https://stackoverflow.com/questions/14829105/2d-dynamic-memory-allocation-array-in-c",
        "document": "A few days ago I learned about creating 2D allocated memory arrays from the internet, it works perfect. To access the array we just simply use , however is there any way that I can dereference this 2D array by using notation instead of for input as well as other methods?\n\nFirst questions is solved I can use\n\nNow I got another question, last code segment is to free the allocated memory (I got it from internet as well), but I don't understand it, why cant I just use ?"
    },
    {
        "link": "https://stackoverflow.com/questions/46354262/how-to-dynamically-allocate-a-contiguous-2d-array-in-c",
        "document": "As other answers have said: allocate entries to create the contiguous data, and then it can be wrapped in pointers to create a 2d array.\n\nI'm not sure if is a constraint based on the API being used, or requirements -- but it's worth noting that can be used for the memory management of the implementation -- while still using the raw data (which can be accessed by or , which returns a pointer to the first element of the array, and can be used with functions accepting raw pointers).\n\nSince this question is about c++, one option is to wrap an array of in a that acts like a 2-d array while actually being contiguous.\n\nA simple example could be:\n\nThis example overloads the call operator ( ) -- but this could also be a named function like ; the choice would be up to you. The use of such type would then be:\n\nOptionally, if the syntax is important to behave like a 2d-array (rather than the syntax), you can return a proxy type from a call to an overloaded (untested):\n\nThis would allow you to have the 'normal' 2d-array syntax, while still being contiguous:"
    },
    {
        "link": "https://reddit.com/r/C_Programming/comments/rtwuwh/correct_way_of_doing_dynamically_allocated",
        "document": "There are 3 ways that I know of to dynamically allocate a multidimensional array in C:\n\nThis seems to be the worst method of them all. It's verbose to create and free and generates fragmented memory blocks. Also gets progressively bigger the more dimensions there are.\n\n2- The 1D array with indexing way\n\nThis is better but not much. Having to call every time you access the array is a pain. You would also need to create a index function for each number of dimensions.\n\n2.1- The indexing way with a macro\n\nI guess you could consider this better, but I personally don't really like it. Also has the same problems that number 2 has.\n\nThis really looks like the perfect solution. Easy to adapt to any number of dimensions and easy to index. The only downside I could find is that VLA support is not required since C11, but I'm not sure if any big compiler doesn't support them.\n\nSo, is number 3 really the best way of doing it by a far margin? Or are there any downsides to it that I don't know of? What is the method you would use on some real world project?"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-declare-a-2d-array-dynamically-in-c-using-new-operator",
        "document": "How to declare a 2D array dynamically in C++ using new operator\n\nPrerequisite: Array Basics\n\nIn C/C++, multidimensional arrays in simple words as an array of arrays. Data in multidimensional arrays are stored in tabular form (in row major order). Below is the general form of declaring N-dimensional arrays:\n\nBelow is the diagrammatic representation of 2D arrays:\n\nFor more details on multidimensional and 2D arrays, please refer to Multidimensional arrays in C++ article.\n\nProblem: Given a 2D array, the task is to dynamically allocate memory for a 2D array using new in C++.\n\nSolution: Following 2D array is declared with 3 rows and 4 columns with the following values:\n\nNote: Here M is the number of rows and N is the number of columns.\n\nMethod 1: using a single pointer – In this method, a memory block of size M*N is allocated and then the memory blocks are accessed using pointer arithmetic. Below is the program for the same:\n\nMethod 2: using an array of pointer: Here an array of pointers is created and then to each memory block. Below is the diagram to illustrate the concept:\n\nBelow is the program for the same:"
    },
    {
        "link": "https://reddit.com/r/cpp_questions/comments/122zh0v/memory_best_practices",
        "document": "I'm currently improving my C++ skills and have been reading about how the stack and heap memory work in C++.\n\nI was wondering which are in your opinion the best practices with this regards. Malloc, pointers, references, arrays,... when to use them and when to avoid them.\n\nHow to use the power of stack and heap memory in the best way possible."
    },
    {
        "link": "https://stackoverflow.com/questions/74175950/choosing-random-numbers-in-a-2d-arrays",
        "document": "As others have pointed out, this is a problem:\n\nIf was updated to exceed , e.g. . You will start encounter buffer overrun issues in the second value of your lab array. If were to increase further, you will encoutner buffer overrun issues in the second value of your lab array. Like others have mention, the computation of the lab[] value is irrelevant since does not take an argument for input, so, what you're doing with the array will, ultimately, be ignored.\n\nThe actual intention is not clear. Perhaps a random x value followed by a random y value?\n\nFrom a data science perspective, it doesn't make sense. You had 3 unique x values but 2 unique y values. The above could generate 6 random combinations.\n\nSince you preloaded your lab with 3 coordinates, perhaps you merely want to randomly select one of those coordinates random?"
    },
    {
        "link": "https://geeksforgeeks.org/rand-and-srand-in-ccpp",
        "document": "The std::rand() is a built-in function that is used to generate a series of random numbers. It will generate random numbers in the range [0, RAND_MAX) where RAND_MAX is a constant whose default value may vary but is granted to be at least 32767. It is defined inside <cstdlib> and <stdlib.h> header files.\n\nIn this article, we will learn about rand() function in C++ and how to use it to generate random numbers.\n• None This function does not take any parameters.\n• None Returns a pseudo-random number in the range of [0, RAND_MAX).\n\nThe random number generated by rand() function is generated using an algorithm that gives a series of non-related numbers by taking 1 as the starting point or seed. Due to this, the random number series will aways be same for different function calls. To resolve this problem, we use srand() function.\n\nThe srand() function changes the “seed” or the starting point of the algorithm. A seed is an integer used to initialize the random number generator.\n• seed: Integer used to initialize the random number generator. It is common to use the current time ( from ) to ensure a different sequence of random numbers.\n• None This function does not return anything return.\n\nApplications of rand() in C++\n\nrand() function is mainly used to generate random numbers in our program which can be used in the following applications:"
    },
    {
        "link": "https://stackoverflow.com/questions/49268011/creating-a-2d-array-with-random-numbers",
        "document": "I am hoping to get some help. I go to University of Phoenix and we were assigned a project. This is possibly the worst class I have ever had. They explain nothing relevant to the assignments. I have spent a week trying to figure this out and maybe I am just searching this wrong. I cannot figure out how to link the array[5][5] to the random function (they must be random numbers). I cannot figure out how to populate the array in such a way that I can calculate average and totals of each row. It must be formatted like this for each row: \n\nRow 1 \n\nTotal = \n\nAverage =\n\nThe code I have so far, which is probably really wrong, is this:\n\nAny help I can get is appreciated. I have no idea where to go from here, if I am even correct so far. I love the c++ I got to learn in C++ without fear but this class just sucks all the fun and life out of it. Thank you again."
    },
    {
        "link": "https://cboard.cprogramming.com/cplusplus-programming/170040-random-2d-array-function.html",
        "document": ""
    },
    {
        "link": "https://cplusplus.com/forum/beginner/40767",
        "document": "Hey all, I'm currently trying to write a code that will create an array of randomly generated numbers whose size is based on user input, the input has to be between 3 and 100 and the array must put in rows and columns of 10. The actual assignment reads:\n\n void fillArray (int array[], int number)\n\n parameters : array of integers\n\n number of integers to store in the array\n\n description: generate \"number\" random numbers from 1 to 100 and store them in positions [0..number-1]\n\n So the array is always the same size, but may be filled with a different number of random values on each run\n\n void printArray (int array[], int number)\n\n parameters : array of integers\n\n number of integers stored in the array\n\n description: print the values in the array. The values appear 10 per line and are comma separated. The last value on each line does not have a comma after it. The last line may or may not have 10 values: for example, if the user asked for 15 numbers, then the last line would only have 5 values; or if the user asked for 92 values, then the output would be 9 lines containing 10 values and the last out put line would have 2 values.\n\n \n\n For the most part I've got it down, the only issue i'm having is actually printing the array...it's all coming out as one long column.\n\n \n\n here's the code:\n\n #include<iostream>\n\n #include<iomanip>\n\n #include<time.h>\n\n using namespace std;\n\n \n\n void fillArray (int number);\n\n void printArray (int array[], int number);\n\n \n\n int main()\n\n \n\n {\n\n \n\n int number, array[10][10] = {};\n\n \n\n cout << \"Enter how many integers you'd like generated\" << endl; \n\n cout << \"\\tbetween 3 and 100: \"; \n\n cin >> number;\n\n if (number < 3 || number > 100)\n\n {\n\n cout << \"ERROR: THAT IS NOT A VALID NUMBER\" << endl;\n\n return 0;\n\n }\n\n else\n\n {\n\n fillArray(number); }\n\n }\n\n \n\n void fillArray(int number)\n\n \n\n { \n\n int input;\n\n input = number;\n\n \n\n int* array = new int[input]; \n\n \n\n srand(time(NULL));\n\n \n\n for (int i = 1; i <= input; i++) {\n\n \n\n array[i] = rand() % 100 + 1;\n\n cout << setw(4) << array[i] << (i%10?\"\":\"\n\n\") << endl;\n\n \n\n }\n\n } \n\n \n\n I'm new to programming and and tips or advise is welcome."
    }
]