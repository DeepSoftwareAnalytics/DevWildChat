[
    {
        "link": "https://stackoverflow.com/questions/3066027/bash-script-code-help-to-make-zip-tar-of-several-folders",
        "document": "You could create a bash file for it, if you intend to run it in a cronjob for example and add some other commands like a mysqldump beforehand\n\nYou need to create a file like backup.sh with the following contents (You may need to alter the path to bash, you can find bash with )\n\nPS. This is untested code. It's just an example of how a bash script works in the current replied context."
    },
    {
        "link": "https://stackoverflow.com/questions/20525806/bash-script-for-tar-menu-syntax-errors-in-case-conditionals",
        "document": "I'm trying to make a bash script that echos a menu from which a user can archive , extract and update files. I keep getting syntax errors however in my case conditionals, i've only recently started bash regex and other linux tools so i'm a bit muddled syntactically, could someone point out the right syntax to use for conditionals in *the case structure* for this example ? here's some of the code i have so far:\n\nsome of the error messages i've been getting are:"
    },
    {
        "link": "https://unix.stackexchange.com/questions/129599/test-tar-file-integrity-in-bash",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://w3resource.com/bash-script-exercises/archiving-and-compressing-files.php",
        "document": "In the exercise above,\n\nThis script uses the \"tar\" command to create a tar archive named \"workarea.tar\" of the directory named \"workarea\". The -c option is used to create a new archive, -v is used for verbose output (optional), and -f specifies the name of the archive file. The script then checks the exit status of the tar command to determine if the archive was created successfully or not and prints an appropriate message.\n\nWrite a Bash script that extracts the contents of a tar archive named 'workarea.tar' into a directory named \"extracted_files\".\n\nIn the exercise above,\n• tar -xf workarea.tar -C extracted_files: This command extracts (-x) the contents of the 'workarea.tar' archive into the directory specified by -C option, which is 'extracted_files'.\n• if [ $? -eq 0 ]: This checks the exit status of the previous command. If the exit status is 0 (indicating success), it prints a message showing that the extraction was successful. Otherwise, it prints a message indicating the extraction failed.\n\nIn the exercise above,\n• tar -czf workarea.tar.gz workarea: This command creates a gzip compressed archive (-z) of the directory named \"workarea\". The -c option indicates creating an archive, -f specifies the filename of the archive, and \"workarea\" is the directory to be archived.\n• if [ $? -eq 0 ]: This checks the exit status of the previous command. If the exit status is 0 (indicating success), it prints a message indicating that compression was successful and provides the name of the created archive. Otherwise, it prints a message indicating compression failed.\n\nWrite a Bash script that extracts the contents of a tar archive named \"workarea.tar.gz\" into a directory named \"extracted_files\".\n\nIn the exercise above,\n\nThe Bash script extracts the contents of the tar archive \"workarea.tar.gz\" into the directory \"extracted_files\". It then checks if the extraction was successful by verifying the exit status of the \"tar\" command. If the exit status is 0, it prints a success message; otherwise, it prints a failure message.\n\nIn the exercise above,\n• zip -r workarea.zip workarea: This command creates a zip archive named \"workarea.zip\" containing the contents of the \"workarea\" directory. The -r option is used to recursively include all files and subdirectories within \"workarea\".\n• if [ $? -eq 0 ]; then ... else ... fi: This construct checks the exit status of the previous command. If the exit status is 0 (indicating success), it prints the message \"Zip archive 'workarea.zip' created successfully.\" Otherwise, it prints \"Failed to create zip archive 'workarea.zip'.\"\n\nWrite a Bash script that extracts the contents of a zip archive named \"workarea.zip\" into a directory named \"new_dir\".\n\nIn the exercise above,\n• zip -r workarea.zip workarea: This command creates a zip archive named \"workarea.zip\" containing the contents of the \"workarea\" directory. The -r option is used to recursively include all files and subdirectories within \"workarea\".\n• if [ $? -eq 0 ]; then ... else ... fi: This construct checks the exit status of the previous command. If the exit status is 0 (indicating success), it prints the message \"Zip archive 'workarea.zip' created successfully.\" Otherwise, it prints \"Failed to create zip archive 'workarea.zip'.\"\n\nWrite a Bash script that creates a tar archive of a directory named \"source_directory\", excluding files with a \".txt\" extension.\n\nIn the exercise above,\n\nThe script creates a tar archive of the directory \"source_directory\" while excluding files with a \".txt\" extension. After creating the archive, it checks the exit status ($?) to determine whether the operation was successful or not and prints an appropriate message.\n\nIn the exercise above,\n• tar -czf compressed_files.tar.gz file1.txt file2.txt: This command creates a gzip compressed tar archive named \"compressed_files.tar.gz\" containing files file1.txt and file2.txt. The -c option creates a new archive, the -z option compresses the archive with gzip, and the -f option specifies the output file name.\n• if [ $? -eq 0 ]; then ... else ... fi: This construct checks the exit status of the previous command. If the exit status is 0 (indicating success), it prints the message \"Files compressed successfully into 'compressed_files.tar.gz'.\" Otherwise, it prints \"Failed to compress files into 'compressed_files.tar.gz'.\"\n\nWrite a Bash script that extracts specific files (e.g., file1.txt, file2.txt) from a tar archive named \"archive.tar.gz\" into a directory named \"extracted_files\".\n\nIn the exercise above,\n• tar -xzf archive.tar.gz file1.txt file2.txt -C extracted_files/: This command extracts the specified files (file1.txt and file2.txt) from the tar archive \"archive.tar.gz\" using the -x (extract), -z (gzip), and -f (file) options. The -C option specifies the directory where the files will be extracted (in this case, \"extracted_files/\").\n• if [ $? -eq 0 ]; then ... else ... fi: This construct checks the exit status of the previous command. If the exit status is 0 (indicating success), it prints the message \"Files extracted successfully into 'extracted_files' directory.\" Otherwise, it prints \"Failed to extract files.\"\n\nWrite a Bash script that compresses a directory named \"workarea\" into a zip archive named \"archive.zip\" with password protection.\n\nIn the exercise above,\n• read -s -p \"Input password for zip archive: \" password: This command prompts the user to enter a password for the zip archive. The -s option is used to hide the input.\n• zip -r --encrypt --password \"$password\" archive.zip workarea: This command compresses the directory \"workarea\" into a zip archive named \"archive.zip\" with password protection.\n• -r option is used to recursively include all files and directories within the \"workarea\" directory.\n• The script then checks the exit status of the zip operation. If the exit status is 0 (indicating success), it prints \"Zip archive 'archive.zip' created successfully with password protection.\" Otherwise, it prints \"Failed to create zip archive 'archive.zip'.\"\n\nMore to Come !\n\nDo not submit any solution of the above exercises at here, if you want to contribute go to the appropriate exercise page."
    },
    {
        "link": "https://tecmint.com/tar-command-examples-linux",
        "document": "The Linux “tar” stands for tape archive, which is used by a large number of Linux/Unix system administrators to deal with tape drive backup in Linux.\n\nThe tar command in Linux is used to rip a collection of files and directories into a highly compressed archive file commonly called tarball or tar, gzip, and bzip in Linux.\n\nThe tar is the most widely used command to create compressed archive files that can be moved easily from one disk to another disk or machine to machine.\n\nIn this article, we will be going to review and discuss various tar command examples including how to create archive files using (tar, tar.gz, and tar.bz2) compression, how to extract archive files, extract a single file, view the content of the file, verify a file, add files or directories to the existing archive file, estimate the size of tar archive file, etc.\n\nThe main purpose of this guide is to provide various tar command examples that might be helpful for you to understand and become an expert in tar archive manipulation.\n\n\n\nThe below example of the tar command will create a tar archive file for a directory /home/tecmint in the current working directory.\n\nSee the example of the tar command in action.\n\nLet’s discuss each option used in the above tar command.\n• – File name type of the archive file.\n\nTo create a compressed archive file, we use the option (compress the archive using gzip). For example, the command below will generate a compressed file named for the directory ‘/home/MyImages‘. (Note: and are interchangeable terms).\n\nThe bz2 feature compresses and creates an archive file that is smaller in size compared to gzip. However, the bz2 compression method requires more time for both compression and decompression, whereas gzip is faster in both processes.\n\nTo create a highly compressed new tar archive named Phpfiles-org.tar.bz2 by bundling all files and subdirectories within the /home/php directory, use the option, which instructs tar to utilize the bzip2 compression algorithm, resulting in a smaller file size for efficient storage and transfer.\n\nNote: tar.bz2 and tbz are similar terms, both referring to tb2.\n\nTo untar or extract a tar file, simply execute the following command using the option (extract). For instance, the command below will untar the file named ‘tecmint-17-11-2023.tar‘ in the present working directory.\n\nIf you want to untar in a different directory then use option (specified directory).\n\nTo extract the contents of a compressed tar archive file named “MyImages-17-11-2023.tar.gz“, use the following command.\n\nIf you would like to extract in a different directory, just use the option , which will extract the files into the specified directory as shown.\n\nTo uncompress the highly compressed tar.bz2 file, simply use the following command, which will untar all the files from the archive file.\n\nTo list or view the contents of the tar archive file, simply run the following command with the option (list content), which will display a detailed list of files and directories contained within the ‘tecmint-17-11-2023.tar‘ archive.\n\nThe following command will display a detailed list of files and directories contained within the “MyImages-17-11-2023.tar.gz” archive.\n\nThe following command provides an overview of the contents within the “Phpfiles-org.tar.bz2” archive without extracting the files.\n\nTo extract a single file named from the archive Phpfiles-org.tar.bz2, use the following command. Make sure to provide the correct path to the file you wish to extract.\n\nTo extract or untar multiple files from , , and archive files, use the following command, which will extract files from the specified archive files.\n\n12. Extract a Group of Files Using Wildcard in Linux\n\nTo extract a group of files we use wildcard-based extracting. For example, to extract a group of all files whose pattern begins with from a , , and archive files, use:\n\nTo add files or directories to the existing , , and archive files, use the option , which will add the files to an existing archive file.\n\nThe following command will display a detailed list of files and directories contained within the specified archive file, allowing you to visually verify the archive’s contents. If the archive is corrupted or incomplete, this verification process may reveal errors during the listing.\n\nTo check the size of any , , and archive file, use the following command, which will display the size of the archive file in Kilobytes (KB).\n\nTo exclude certain files and directories while creating a tar archive file, you can use the following command with the an option that will exclude files and directories when creating the tar archive file as shown.\n\nIn the above command, we excluded file ‘file1.txt‘ and ‘uploads‘ directory from the /home/tecmint folder.\n\nTo exclude files with specific file extensions when creating a tar archive file, use:\n\nThe following tar command will delete a file or directory from an already created tar file using the option, as shown.\n\nThe following tar command will only extract files with the specific extension from the tar archive file using the option as shown.\n\nUnderstanding the following various options and usage patterns of the ‘tar‘ command is essential for efficient file archiving, compression, and extraction.\n• – show the progress of the archive file.\n• – viewing the content of the archive file.\n• – archives and adds to an existing archive file.\n• – append or update files or directories to the existing archive files.\n• – Specify patterns in the UNIX tar command.\n• – excludes files and directories when creating the archive.\n• – remove the file and directory from the archive.\n\nThat’s it for now, hope the above tar command examples are enough for you to learn, and for more information please use the man tar command.\n\nIf you are looking to split any large tar archive file into multiple parts or blocks, just go through this article:\n• How to Split Tar File Into Multiple Files of Certain Size\n• How to Download and Extract Tar Files with One Command\n\nIf we’ve missed any examples please do share with us via the comment box and please don’t forget to share this article with your friends. This is the best way to say thanks….."
    },
    {
        "link": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/managing_storage_devices/managing-tape-devices_managing-storage-devices",
        "document": "A tape device is a magnetic tape where data is stored and accessed sequentially. Data is written to this tape device with the help of a tape drive. There is no need to create a file system in order to store data on a tape device. Tape drives can be connected to a host computer with various interfaces like, SCSI, FC, USB, SATA, and other interfaces.\n\nThe following is a list of the different types of tape devices:\n• is a non-rewinding tape device. Use non-rewinding devices for daily backups. There are several advantages to using tape devices. They are cost efficient and stable. Tape devices are also resilient against data corruption and are suitable for data retention.\n\nA rewind tape device rewinds the tape after every operation. To back up data, you can use the command. By default, in tape devices the is 10KB ( ). You can set the environment variable using the attribute. Use the device option instead, to specify the tape device file. This option is useful when you use more than one tape device.\n• You have installed the package. For more information, see Installing tape drive management tool.\n• None # SCSI 2 tape drive: File number=-1, block number=-1, partition=0. Tape block size 0 bytes. Density code 0x0 (default). Soft error count since last status=0 General status bits on (50000): DR_OPEN IM_REP_EN\n• the defines the tape head. By default, it is set to -1.\n• the 0 indicates that the tape device does not have a fixed block size.\n• the indicates the number of encountered errors after executing the mt status command.\n• the explains the stats of the tape device.\n• indicates that the door is open and the tape device is empty. is the immediate report mode.\n• None If the tape device is not empty, overwrite it: This command overwrites the data on a tape device with the content of .\n• None Back up the to the tape device:\n• None View the status of the tape device:\n• None View the list of all files on the tape device:\n• , , and man pages on your system\n• How to check if tape drives are detected in the system (Red Hat Knowledgebase)\n\nA non-rewinding tape device leaves the tape in its current status, after completing the execution of a certain command. For example, after a backup, you could append more data to a non-rewinding tape device. You can also use it to avoid any unexpected rewinds.\n• You have installed the package. For more information, see Installing tape drive management tool.\n• None Check the tape head of the non-rewinding tape device :\n• None Specify the pointer at the head or at the end of the tape:\n• None Append the data on the tape device:\n• None Back up the to the tape device:\n• None View the status of the tape device:\n• None View the list of all files on the tape device:\n• , , and man pages on your system\n• How to check if tape drives are detected in the system (Red Hat Knowledgebase)\n\nYou can switch the tape head in the tape device by using the option.\n• You have installed the package. For more information, see Installing tape drive management tool.\n• Data is written to the tape device. Fore more information, see Writing to rewinding tape devices or Writing to non-rewinding tape devices.\n• None To view the current position of the tape pointer:\n• None To switch the tape head, while appending the data to the tape devices:\n• None To go to the previous record:\n• None To go to the forward record:"
    },
    {
        "link": "https://community.hpe.com/t5/operating-system-hp-ux/dd-command-to-test-tape-drive/td-p/5044197",
        "document": ""
    },
    {
        "link": "https://docs.oracle.com/cd/E26505_01/html/E37385/bkupsavefiles-130.html",
        "document": "Indicates a secure shell that is started to extract the files from the tape device by using the command.\n\nPipes the output of the command to the command, which is used to restore the files."
    },
    {
        "link": "https://cyberciti.biz/hardware/unix-linux-basic-tape-management-commands",
        "document": "Tape devices should be used on a regular basis only for archiving files or for transferring data from one server to another. Usually, tape devices are all hooked up to Unix boxes, and controlled with mt or mtx. You must backup all data to both disks (may be in the cloud) and the tape device. In this tutorial you will learn about:\n\nWhy do you need backups?\n\nA backup plan is necessary for you to backup your files on a regular basis. If you choose not to back up your own files, you risk losing important data. A backup allows you to:\n• Complete server destruction, including the destruction of on-site backups due to fire or other problems\n• Viruses and ransomware can corrupt or delete files\n\nYou can use tape-based archives to backup the whole server and move tapes off-site.\n\nHow is data stored on a tape drive\n• /dev/rmt/0 or /dev/rmt/1 or /dev/rmt/[0-127] : Regular tape device name on Unix. The tape is rewound.\n• /dev/rmt/0n : This is know as no rewind i.e. after using tape, leaves the tape in current status for next command.\n• /dev/rmt/0b : Use magtape interface i.e. BSD behavior. More-readable by a variety of OS’s such as AIX, Windows, Linux, FreeBSD, and more.\n• /dev/esa0 : FreeBSD specific SCSI tape device name that eject on close (if capable).\n• The indicate that I’m using unity 1, compressed density and no rewind.\n• The indicate that I’m using unity 0, high density and BSD behavior.\n• The auto rewind SCSI tape device name on Linux : /dev/st0\n• The non-rewind SCSI tape device name on Linux : /dev/nst0\n• The auto rewind SCSI tape device name on FreeBSD: /dev/sa0\n• The non-rewind SCSI tape device name on FreeBSD: /dev/nsa0\n\nEach tape device can store multiple tape backup files. Tape backup files are created using cpio, tar, dd, and so on. However, tape device can be opened, written data to, and closed by the various program. You can store several backups (tapes) on physical tape. Between each tape file is a “tape file mark”. This is used to indicate where one tape file ends and another begins on physical tape. You need to use mt command to positions the tape (winds forward and rewinds and marks).All data is stored subsequently in sequential tape archive format using tar. The first tape archive will start on the physical beginning of the tape (tar #0). The next will be tar #1 and so on.\n\nIn Linux and Unix-like system, the mt command is used to control operations of the tape drive, such as finding status or seeking through files on a tape or writing tape control marks to the tape. You must type the following command as root user. The syntax is:\n\nYou can set shell variable. This is the pathname of the tape drive. The default (if the variable is unset, but not if it is null) is /dev/nsa0 on FreeBSD. It may be overridden with the option passed to the command as explained below.\n\nYou can use shell loop as follows to poll a system and locate all of its tape drives:\n\n4: Erase the tape (rewind the tape and, if applicable, unload the tape)\n\nIf errors occur when a tape is being read, you can retension the tape, clean the tape drive, and then try again as follows:\n\n6: Writes n EOF marks in the current position of tape\n\nThe tape is positioned on the first block of the next file i.e. tape will position on first block of the field (see fig.01):\n\nThe tape is positioned on the first block of the next file i.e. tape positions after EOF mark (see fig.01):\n\nHere is a list of the tape position commands:\n\nLet us see commands to backup and restore files\n\n13: Start writing at the beginning of the tape (see fig.02)\n\nTo restore from the beginning of the tape:\n\n14: Start writing after the last tar (see fig.02)\n\nHow do I verify backup tapes created using tar?\n\nIt is important that you do regular full system restorations and service testing, it’s the only way to know for sure that the entire system is working correctly. See our tutorial on verifying tar command tape backups for more information.\n\nBoth Linux and Unix-like system provides many third-party utilities which you can use to schedule the creation of backups including tape backups such as:\n\n🥺 Was this helpful? Please add a comment to show your appreciation or feedback."
    },
    {
        "link": "https://unix.com/bsd/42321-how-reach-files-tape-drive-using-dd.html",
        "document": ""
    }
]