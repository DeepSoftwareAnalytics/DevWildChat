[
    {
        "link": "https://unity.com/how-to",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/Unity3D/comments/rzyaao/unity_c_architecture_best_practices_books",
        "document": "I've been a software engineer for many years. For the past few years, I've been transitioning to game dev using Unity. I can write fine C# code, but as I've become more advanced, I've started to wonder about \"best practices\" in terms of the architecture of my code. It feels like the systems I've designed work well in my single-developer use cases, but I'm wondering how well they scale.\n\nDoes anyone have any recommendations for books about best practices for Unity C# architecture? I'd like books with a technical and general approach. I'm not really looking for tutorials about specific things. Any pointers would be great. Thanks!"
    },
    {
        "link": "https://reddit.com/r/gamedev/comments/x1az0m/how_do_i_get_better_at_c_specific_for_unity",
        "document": "The only reason I want to learn to program is that I am interested in game development and am currently learning Unity. I know the basics of programming but I am finding it very hard to catch up with any tutorials that I am viewing which are specific to c# for unity.\n\nAny suggestions on how I should proceed with it?"
    },
    {
        "link": "https://linkedin.com/advice/0/what-best-practices-programming-c-unity-gaming-vrhzc",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/Manual/best-practice-guides.html",
        "document": "Use this page to discover and learn production-tested best practices from Unity experts. The Technical Content Marketing team at Unity created the guides listed on this page together with industry experts, and engineers and technical artists from Unity R&D and the Accelerate Games Solutions teams.\n\nBest practices for project organization and version control This guide explains the key concepts of version controlA system for managing file changes. You can use Unity in conjunction with most common version control tools, including Perforce, Git, Mercurial and PlasticSCM. More info\n\nSee in Glossary, compares some of the different version control systems available, and provides an introduction to additional Unity DevOps tools like Unity Asset Manager and Build AutomationA continuous integration service for Unity projects that automates the process of creating builds on Unity‚Äôs servers. More info\n\nSee in Glossary."
    },
    {
        "link": "https://phaser.io/tutorials/getting-started-phaser3",
        "document": "Phaser is an HTML5 game framework designed specifically for web browsers. It is built using, and relying on, web technologies. And the games it creates are meant to be played in desktop or mobile browsers, or apps capable of running web games, such as Discord, SnapChat, Facebook and more. There are ways to convert browser games to native mobile or desktop apps using 3rd party tools, and many Phaser developers have done this successfully. However, Phasers primary focus is, and always will be, the web.\n\nPhaser is a 2D game framework. This means that both its features and internal design are based entirely around creating lightning fast 2D games. It does not include 3D rendering or 3D physics as built-in features. Again, there are ways to integreate 3rd party libraries to provide this, but Phaser itself is 2D and our documentation and examples reflect this.\n\nPhaser was developed in JavaScript, because this is the language of the web browser. As such, you will need to code your game using either JavaScript or TypeScript. All of our examples and documentation are provided in JavaScript, but we also provide TypeScript definitions.\n\nIn this tutorial we're going to cover setting-up a development environment with which you can build your Phaser games. This will include running a local web server, picking an IDE, getting the latest version of Phaser and checking it all works together.\n\nIf you trust us that you do need a local web server for development, then you can skip the explanation below and head directly to part 2.\n\nIf you'd like to know the reasoning why, please read on ...\n\nA web server? But I want to make games!\n\nNot these days, no. I appreciate that it's a bit confusing, even contradictory at times, but it all boils down to browser security. If you're making a static html web page then you can happily drag this file into your browser and see the end results. You can also \"Save As\" entire web pages locally and re-open them with most the contents intact. If both of these things work why can't you drag an HTML5 game into a browser and run it?\n\nIt's to do with the protocol used to access the files. When you request anything over the web you're using , and the server level security is enough to ensure you can only access files you're meant to. But when you drag a file in it's loaded via the local file system (technically ) and that is massively restricted, for obvious reasons. Under there's no concept of domains, no server level security, just a raw file system. If JavaScript had free reign while operating under there would be nothing stopping it loading pretty much any file, and sending it off who knows where.\n\nBecause this is so dangerous browsers lock themselves down when running under . Every single page becomes treated as a unique local domain. That is why \"Save Web page\" works, to a degree. It opens under the same cross-site restrictions as if they were on a live server.\n\nThere's a detailed post about it on the Chromium blog that is well worth a read if you'd like to learn more.\n\nYour game is going to need to load resources: images, audio files, JSON data, maybe other JavaScript files. And in order to do this it needs to run unhindered by the browser security shackles. It needs access to the game files. And for that we need a web server."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser",
        "document": "In this step-by-step tutorial, we create a simple mobile MDN Breakout game written in JavaScript, using the Phaser framework. Every step has editable, live samples available to play with, so you can see what the intermediate stages should look like. You will learn the basics of using the Phaser framework to implement fundamental game mechanics like rendering and moving images, collision detection, control mechanisms, framework-specific helper functions, animations and tweens, and winning and losing states. To get the most out of this series of articles you should already have basic to intermediate JavaScript knowledge. After working through this tutorial, you should be able to build your own simple Web games with Phaser."
    },
    {
        "link": "https://shakuro.com/blog/phaser-js-a-step-by-step-tutorial-on-making-a-phaser-3-game",
        "document": "In this article, we are going to develop from scratch a game made with Phaser.js. You‚Äôll learn how to set up a build on webpack, load assets, create characters and animations, add keyboard controls, handle a powerful tool for creating maps that is Tiled, and even how to implement a simple bot behavior. Let‚Äôs go!\n\n Table of contents\n‚Ä¢ Part 2: The first scene, loading assets and showing a character on screen\n\nFirst, a little background. Phaser is an open-source JavaScript 2D game development framework developed by the folks at Photon Storm. It uses Canvas and WebGL renderers. You can play games developed with Phaser 3 in any modern web browser, and with tools like Apache Cordova, you can even turn them into mobile or native desktop apps. Phaser is open-source, easy to get started, and generally a great option for people who are looking to try JS for game development.\n\nWhat you need to start\n‚Ä¢ None Basic knowledge of TypeScript to be able to get what all those ‚Äútypes‚Äù are\n\nThat‚Äôs it! After completing the tutorial, you‚Äôll be able to create games like this:\n\n \n\n Check it out and play the Demo version.\n\n Here are the assets for this tutorial that you are going to need.\n\n And this is where you can find the final code.\n\n So since it looks like we are ready to start, let‚Äôs turn to the initial stage which is about‚Ä¶\n\nWe begin by setting up the environment, the required packages, and setting up webpack.\n\n For this tutorial, we‚Äôll be using the yarn package manager, but you can use the npm one as well since we only need it to install packages and launch the app build.\n\nWe get the following structure:\n\n‚Äî this is where we‚Äôll store all game assets: png sprites, sprite sheets, and JSON files.\n\n ‚Äî for classes (player, score meter, etc.).\n\n ‚Äî a place to store the game scenes.\n\n Let‚Äôs add the file to an make it an entry point of the application:\n\nHere we tell the game to not scale, remove the screen border padding, and specify the div element that‚Äôll be the parent block where the game will be rendered.\n\nFilling our with the itself:\n\nAnd installing typescript and webpack with the necessary plugins and loaders:\n\nNote that we install html-webpack-plugin@5.0.0-alpha.10 because at the time of this article‚Äôs publication the plugin had an unresolved bug.\n\n Add and match it with and for linting and quick code formatting:\n\nDone! We have installed all the necessary packages, now we can proceed to set up the configs.\n\nWe‚Äôll create the configuration files at the root level of the file structure.\n\n tsconfig.json\n\nYou can read more about the contents of in the documentation.\n\n .eslintrc.js\n\nOptional, to automatically format files when saving to VSCode.\n\n ./vscode/settings.json\n\nTurning standard formatting off to avoid situations where it could get in conflict with eslint formatting.\n\n You can customize rules for eslint, prettier, and vscode to better suit your needs, it won‚Äôt affect working with Phaser in any way üòå\n\n webpack.config.js\n\n So that we can build our creation and run the dev-server, we need to first make a config for webpack:\n\nWhat we indicate in the config:\n‚Ä¢ None what loaders to use for files\n‚Ä¢ None what plugins to apply during the build\n‚Ä¢ None that the minification is done using Terser\n\nYou can find out more about each field of the webpack.config.js file on the official site.\n\n Done!\n\n We have described all the required configs. Now, all we need is to just write a couple of scripts to start dev-server and run the build.\n\n Let‚Äôs go to package.json and add this field:\n\nAwesome!\n\n Now let‚Äôs create a src/index.ts file that acts as an entry point for the bundle scripts and add some code snippets there to make sure everything works fine after starting dev-server.\n\n src/index.ts\n\nAdd a header to src/index.html just for testing purposes, and run dev-server to make sure everything‚Äôs OK.\n\n To start dev-server, execute the command .\n\n \n\n ‚ÄúHello, world!‚Äù and the ‚ÄúYep!‚Äù message in the console indicate that everything is set up alright and we can finally move on to Phaser itself üòé\n\nPart 2: The first scene, loading assets and showing a character on screen\n\n\n\nIn the previous part, we set up the entire development environment from scratch including webpack, TypeScript, linter, and formatter, which means it‚Äôs time to move on to setting up the game and begin placing objects. Don‚Äôt worry, it‚Äôs not one massive file. In this part, we‚Äôll start small by showing our character.\n\n First, we need to declare a Game object. It‚Äôs the most important of the required objects since Phaser won‚Äôt initialize without it. We‚Äôll initialize it at the ‚Äúentry point‚Äù, namely src/index.ts.\n\n A Game must contain the second required object ‚Äî a Scene, at least one. A Scene in the Phaser world is similar to a theater scene in the real world. It contains child elements like a real scene contains actors. These can be Sprites, Images, and Containers. For a start, this set of elements is enough for our purposes, since we‚Äôll be creating our own classes for child elements, inheriting their class properties.\n\n To declare a game, we need to indicate what parameters we‚Äôll launch it with. So, describe the following in the parameters:\n‚Ä¢ CANVAS WEBGL AUTO . Many effects can be unavailable with the CANVAS type that are available with the WEBGL one. In this tutorial, we‚Äôll be using the latter\n‚Ä¢ None ‚Äî DOM element id of the page where we‚Äôll add a Game canvas element)\n‚Ä¢ None ‚Äî the background color of the canvas\n‚Ä¢ None ‚Äî setting for resizing the game canvas. Our choice is since we‚Äôll have our own sizing system. Read more about modes\n‚Ä¢ None ‚Äî an object for setting the game physics\n‚Ä¢ None ‚Äî callbacks that will be triggered BEFORE ( ) or AFTER ( ) the game is initialized\n‚Ä¢ None ‚Äî CSS styles for the canvas element where the game will be rendered\n‚Ä¢ None ‚Äî a list of scenes to load and use in the game.\n\nTo declare a game, we need to indicate what parameters we‚Äôll launch it with. So, describe the following in the parameters:\n\n src/index.ts\n\nLet‚Äôs add to the same file a global function for resizing our game:\n\n src/index.ts\n\nTo avoid getting the error about Window not having a method and a global object, let‚Äôs patch the interface:\n\nNow TypeScript understands what is behind and .\n\nIf we run the game without a single scene, we‚Äôll get an error. Let‚Äôs create the first scene then, which will later act as the main scene for loading assets and launching the rest of the scenes.\n\n Create a scene Loading file to describe the Scene Class. In the constructor, indicate the Scene Key. We‚Äôll use it to select a specific scene among others. The Scene Key is a required parameter.\n\n src/scenes/loading/index.ts\n\nAs you can see, we are using the method. It is one of the built-in scene methods and is the scene lifecycle method. There are several such methods:\n‚Ä¢ None ‚Äî kicks in when a scene is created. It accepts the Data Object that we can pass when we call game.scenes.add(dataForInit) or game.scenes.start(dataForInit). For example, when we create a scene while being in some other scene (yes, you can do that). All scenes will be at the same hierarchy level, with no nested scenes.\n‚Ä¢ None ‚Äî a method that defines what we need to load before the scene and from where. We‚Äôll use it to load assets later on.\n‚Ä¢ None ‚Äî a method that gets triggered when a scene is created. In it, we‚Äôll specify positioning for such scene elements as Character and Enemies.\n‚Ä¢ None ‚Äî a method that gets called with every render frame (on average, 60 times per second). It‚Äôs a game loop in which redrawing, moving objects, etc. occurs.\n\nAlso, for convenient scene import, let‚Äôs create a file with which we will ‚Äútransmit‚Äù the exports in nested directories.\n\n src/scenes/index.ts\n\nNow we can start our game to see that the scene has been created and has triggered the message to the console, which we‚Äôd specified in the method. The brown of the background is the we specified in .\n\n \n\n Let‚Äôs load a character for this background!\n\n To do it, create a folder src/assets/sprites/, and add there a picture of our character ‚Äî . Next, in the method of the scene class, add the following:\n\n src/scenes/loading/index.ts\n\nNow to creating our character, let it be a simple sprite. Declare a character field, and write the following in the scene‚Äôs method:\n\n src/scenes/loading/index.ts\n\nHere we indicate that we add a sprite (add.sprite), place it at such and such XY coordinates, and use a texture with the key which we specified during loading in the method.\n\n Now, if we run the dev-server, instead of a character we‚Äôll get a black square with a green border. Squares like these signal that Phaser was unable to detect the texture or sprite along a path.\n\n But the path is right, so what gives?\n\n It has to do with webpack. We haven‚Äôt specified the assets‚Äô movement when building or running in dev mode. Let‚Äôs fix it.\n\n Add plugin import and initialization to webpack.config.js.\n\n webpack.config.js\n\nNow, when running in dev mode, we can see our character üòé\n\nGreat! We now know how to load and place sprites. One thing left‚Ä¶ Need more interactivity! Let‚Äôs bring our character to life by giving him the ability to move.\n\n We‚Äôll start by creating a separate class for our character and a separate scene for the level and call it . We begin with the scene since we‚Äôve already placed our character there in the previous part of this tutorial. \n\n Let‚Äôs create a scene folder with the index.ts scene file.\n\n src/scenes/level-1/index.ts\n\nDon‚Äôt forget to add the ‚Äútransmitter‚Äù to the scene. \n\n src/scenes/index.ts\n\nNow we need to add our scene to the scene array in \n\n src/index.ts\n\nAnd move our from the Loading scene to the Level1 scene:\n\nIn the Loading scene, we set our scene-level to launch after all other loadings are finished:\n\n src/scenes/loading/index.ts\n\nIn the method, we specify the key of the scene we want to launch.\n\n Let‚Äôs run the dev server and make sure our character is displayed.\n\n Awesome! Looks like he‚Äôs in his proper place.\n\nSince in the future there will be enemies behaving somewhat similar to the player character, let‚Äôs create an actor class to store general properties and methods, and then create a player class by extending the actor one.\n\n src/classes/actor.ts\n\nHere we indicate that the class is not just some sprite but a physical one. This is to adjust its collisions and physical dimensions for contact with walls and other objects.\n\n The and methods tell us that we are adding our physical sprite to the scene and need it considered in terms of scene physics.\n\n The method tells the world to react to the physical model of the sprite, its ‚Äúbox‚Äù.\n\n The protected method is designed to rotate an actor as it moves left or right.\n\n The public method is for attacking the actor. We can see a tween inside ‚Äî something like an animation done by manipulating some properties of the target object. Here we describe that the transparency will change 3 times within 100 ms , each time returning to the original alpha value . At the start of the blinking animation , we change the actor‚Äôs HP value in accordance with how much damage it received. At the end of the animation, we forcefully set the current character‚Äôs opacity to . The value of the property varies from 0 to 1. The lower the value, the more transparent the object.\n\n The method was created due to errors in Phaser types and helps us get that very physical model of a physical object.\n\nNow that the main actor class has been created, we can create the player class.\n\n src/classes/player.ts\n\nLet‚Äôs analyze the code above.\n\n Here we describe the keys to track which one of them is being pressed:\n\nIn each frame, we check if any control key is pressed and change the XY movement speed depending on the direction. If a key is not pressed, set the speed = 0. Also, when moving left-right, we check whether we need to rotate the character.\n\nSometimes character sprites are quite large or have white space. In this case, we can specify the size of the physical model (box) and set the point by XY coordinates to calculate the physical model.\n\nNote that when rotating the character, we move the rendering point of the physical model. We have to do it because of the body miscalculation error of Phaser.\n\nWonderful! We have created a character class, now we need to create a character on the first level scene.\n\n src/scenes/level-1/index.ts\n\nIn the method of the scene, we specify for each frame to call the method on the player character, which in turn changes its position.\n\nTime for a bit of running around\n\nRun the dev server and try some running around with your character.\n\n Excellent! The character moves and turns in the right direction üòé\n\n\n\nOK, our character can move now, but quite clumsily. Let‚Äôs add a movement animation and figure out what sprite sheets are.\n\n2D animation in Phaser is created using frames. Frames are sprites. Sprite sheets (atlases) are collections of sprites. The sprites in a sprite sheet are called frames. That is, you can create animation using frames from a sprite sheet.\n\n For example, this is how our character‚Äôs sprite looks like:\n\n \n\n And this is the sprite sheet with frames which we‚Äôll use for animation:\n\n \n\n But one sprite sheet is not enough. How can we indicate that such and such a frame is in such and such a position of the sprite sheet when a sprite sheet is just a picture? JSON comes to the rescue with information on each sprite: its name, width, height, and XY coordinates on the sprite sheet. Often, sprite sheets are generated automatically using online services or offline solutions, so you don‚Äôt have to create JSON yourself and manually lay the sprites out on the grid. Also, some generators add additional parameters to JSON like the property, for example, which indicates the point at the origin of XY coordinates, where 0 is the beginning, 0.5 is the middle, and 1 is the end of the sprite. The value can be negative, and not necessarily compliant with half sizes, that is, the value can be 1.23, or 0.99, or -3.33.\n\n Let‚Äôs take a look at the description of a frame:\n\n src/assets/spritesheets/a-king_atlas.json\n\nHere we can see that the frame called is located at 0-0 coordinates and has a width of 78px and a height of 58px.\n\nTo use an atlas by its key it must be loaded like the rest of the assets.\n\n Let‚Äôs go to the Loading scene and load our atlas and its JSON file.\n\n src/scenes/loading/index.ts\n\nNow we can use our atlas in the right places with the texture key.\n\n Let‚Äôs add running animation to our character! Go to the class and describe the method for creating animation.\n\n src/classes/player.ts\n\nHere we indicate that we want to create an animation with such and such a key with the animation frames taken from the atlas, by the prefix.\n\n Great, we‚Äôve created two animations: and . Now let‚Äôs add the running animation:\n\n src/classes/player.ts\n\nHere we check for each button whether the animation is currently playing, and if not, we play it with such and such key.\n\n Now let‚Äôs start the dev-server and try runningüòé\n\n\n\nSo, we managed to create a development environment from scratch, load assets, and place them on the stage, and we also added a character with the ability to move. Now let‚Äôs make a location for him to be actually able to do that.\n\nTo create a location, we need the Tiled editor. It‚Äôs free and its developers appreciate donations that help them make it bigger and better.\n\n We also need assets ‚Äî the so-called . They are very similar to sprite sheets but are rigidly attached to the grid. Usually, tileset authors indicate the dimension of a grid. In the assets for this tutorial, we attached the necessary assets (assets/tilemaps/tiles), but you can also find some free packages available in the public domain, for example, on itch.io. Follow the example from the tutorial and create your own world.\n\nOpen the Tiled editor and choose the New Tileset option.\n\n You‚Äôll see the menu for adding a tileset to a project. Select the tileset from the tutorial materials (assets/tilemaps/tiles/dungeon-16-16). Now you need to specify the tile dimension (grid dimension): and . In our case, it‚Äôs 16√ó16. Also, make sure that you check the ‚ÄúEmbed in map‚Äù box. In case it cannot be installed or removed, it‚Äôs okay, we‚Äôll return to it later.\n\n Click OK.\n\n \n\n Next, Tiled is going to ask you about the project file name and where to save it. The project file applies only to the Tiled editor, it‚Äôs not used in the game, so we can save it wherever we want and under any name. Just don‚Äôt forget to select the format of the saved file. We leave it to be the standard .\n\n What we see before us now is the tile tab, where we can select any tile and edit it like adding any parameters, keys, values, names, etc. For now, let‚Äôs leave it as it is, but we are definitely going to return here later.\n\n \n\n By adding a tileset ‚Äî the material for creating the map ‚Äî we can finally create the map itself!\n\n To do this call the menu File ‚Üí New ‚Üí New Map‚Ä¶\n\n We have a choice of map parameters before us. We are going to create a map with standard settings for the width and height (Map size), measured in tiles, and set the sizes of our tiles (Tile size) according to our tileset. As our tileset has a grid of 16√ó16 pixels, so in this window, we set the Tile size to 16√ó16 pixels.\n\n \n\n Great! We now have a map editing tab:\n\n \n\n Let‚Äôs analyze the areas:\n‚Ä¢ None ‚Äî these are map settings that you can edit in case you make a mistake in the New Map‚Ä¶ menu.\n‚Ä¢ None ‚Äî it‚Äôs the map grid where we‚Äôll place our tiles. That is, it‚Äôs like a canvas for drawing a map with tilesüôÇ\n‚Ä¢ None ‚Äî these are map layers. There can be many of them and they can be of different types. For example: on the Ground layer we‚Äôll mark the places where our character will move, and on the Walls layer we‚Äôll place walls and obstacles through which he won‚Äôt be able to pass. Splitting into layers is a good practice since it is both more convenient for creating and editing a map, as well as for a more handy selection of the necessary layers for using some events in the game specifically with these layers.\n‚Ä¢ None ‚Äî this is the tileset window of the tileset we loaded earlier.\n\nSo let‚Äôs create a location already!\n\n To do this, in the layers area, select the tab, then select the standard layer and rename it. In this tutorial, we‚Äôll call it Ground, but you can choose any name.\n\n Now select the tiles from the area and place them on the map, like putting brush to canvas.\n\n You can use any of the tools from the toolbar above the . Stamp Brush, Shape Fill Tool, and Eraser seem to be the most popular ones.\n\n Now let‚Äôs add another layer with walls and name it Walls.\n\n And here‚Äôs our first map!\n\n \n\n That‚Äôs enough for a start. Let‚Äôs transfer the map into the game.\n\nSave the Tiled project.\n\n Then go to File ‚Üí Export As‚Ä¶\n\n You‚Äôll see the window for saving the map file. Select the JSON map files format and save. Let‚Äôs do it under the project name ‚Äî dungeon.\n\n Create folders src/assets/tilemaps/tiles/ for tilesets files (.png images) and src/assets/tilemaps/json/ for json map files, where we‚Äôll transfer our map files.\n\n As a result, our src/assets/ folder will look like this:\n\nNext, load the map using Phaser. To do this, go to the Loading scene, where we load all the assets, and add the following:\n\nSo, first, we load the texture, our tileset, and then load the JSON map file, which stores information about the location of each tile and the way it‚Äôs divided into layers.\n\n Go to the scene of the first level, and define our map to display it.\n\n Let‚Äôs create a function for initializing the map, and describe the property types:\n\nHere, we define tilemap with so-and-so a key and such-and-such width and height tile parameters. After that, we define the connection between of the texture and the JSON file of the map (we indicate the keys that we used while loading on the Loading scene). Next, describe the and layers where the first argument is the name of the layer, the second one is the map information, i.e. , and the arguments number 3 and 4 are the XY coordinates relative to the world where we start drawing the map. After describing all the information about the map and layers, we set the size of the physical world to , where we state that we start counting at so-and-so XY coordinates, and set the width and height of the world to the similar to the wall layer.\n\n It only remains to call our function at the very beginning of the method of the first level scene:\n\nLet‚Äôs start the dev-server to see that‚Ä¶ Our location isn‚Äôt there, and in the console, we see a warning from Phaser that the tileset ‚Äúdungeon‚Äù could not be loaded. Don‚Äôt worry, everything is just as it should be!\n\n This is because when loading the tileset into Tiled, we didn‚Äôt change its name. And if you did everything according to the tutorial, now the map inside the JSON code is trying to associate itself with a tileset named ‚Äúdungeon-16-16‚Äù. Let‚Äôs fix it!\n\n In the tilesets area, click on the settings icon for this tileset, and in the window that opens, change the Name property from ‚Äúdungeon-16-16‚Äù to ‚Äúdungeon‚Äù. Save.\n\n \n\n \n\n Also, make sure that in the tileset area and with the dungeon selected, the ‚ÄúEmbed Tileset‚Äù button is not active. If it is active, click on it.\n\n \n\n Now let‚Äôs re-export our JSON file. File -> Export As ‚Ä¶ -> File format .json.\n\n Transfer the new JSON file into the project and start the dev-server for verification.\n\n Voila! We see the map!\n\n\n\nLet‚Äôs try running around the map. As you can see, the character does not react to the walls, as if the whole map is just a background picture. To fix this, we need to set collisions on certain tiles.\n\n It‚Äôs very convenient to do everything there in the Tiled editor.\n\n Open up our ‚Äúdungeon‚Äù tileset and select all the tiles. Further, on the left, there are Properties. In the ‚ÄúCustom Properties‚Äù area, right-click ‚Üí Add Property ‚Üí choose any property name (we going to use ‚Äúcollides‚Äù), the data type is bool ‚Üí OK.\n\n \n\n There should appear a new field with the option to check the box. It might happen so that the created field is of the wrong type. In such a case, just delete it.\n\n Now that all the tiles have the collides property, select only those tiles that cannot be passed through, and check the collides checkbox.\n\n \n\n Save the project, export the dungeon.json, and transfer it into the game assets.\n\n Now, go to the scene of the first level and to the map creation function and enable collisions on tiles that we want to select by property:\n\nTo see if collisions have been applied OK to the walls, let‚Äôs write a short helper function that will simply show us debug information and highlight the collision walls.\n\nStart the dev-server and you‚Äôll now see exactly which walls have collisions.\n\n \n\n But wait! Our character is still walking through the walls, what‚Äôs the matter?\n\n The fact is, we didn‚Äôt indicate that the character should react to the walls in some way. Let‚Äôs fix this!\n\n On the first level stage, in the method, after initializing the map and the player, add the so-called ‚Äúcollider‚Äù, a method that includes collisions between two objects:\n\nThat‚Äôs it, our character is no longer able to pass through the walls:\n\n \n\n Now you can create your own locations, load them into the game, and identify impassable areas.\n\n Try to improve your location, or expand it. Try different tiles or even choose a tileset for your own idea, the world is yoursüòé\n\nWith the help of Tiled, we can not only build a map but also add points to show where to place the objects.\n\n How about rewarding our character with chests? Let‚Äôs create it all in the same old Tiled.\n\nTo place objects in Tiled, we need to first create a separate layer for them. Go to the Layers area ‚Üí Right-click on the empty space ‚Üí New ‚Üí Object Layer. Let‚Äôs call it ‚ÄúChests‚Äù.\n\n Now select ‚ÄúInsert Point‚Äù on the toolbar and place points where you want the objects to be.\n\n Select all the points, and on the left side, in the object properties, set the ‚ÄúName‚Äù property to ‚ÄúChestPoint‚Äù.\n\n \n\n Export the JSON and go to the first level scene.\n\nNow we can place any object on any point. In our case, it‚Äôs chests.\n\n Due to errors with Phaser types, it‚Äôs better to prepare a small helper adapter in src/helpers/gameobject-to-object-point.ts, with which we‚Äôll translate the GameObject type to ObjectPoint.\n\nAlso, we‚Äôll need to separately load our tileset as a sprite sheet so that we can take certain sprites from there (note, the sprites, not the tiles). To do this, go to the Loading scene and add the loading of the sprite sheet with the tiles_spr key (the name can be anything), specifying the dimension of the sprites:\n\nNow, on the first level stage, we‚Äôll define an array of chests, add a function that creates chests and call it after initialization of the character:\n\nUsing the function, select the required objects from the required layer. The first argument is the layer‚Äôs name, the second one is the callback function for filtering. In our case, if the object has the name ‚ÄúChestPoint‚Äù, then it‚Äôs suitable, and will fall into the array of the same chestPoints objects.\n\n Next, let‚Äôs create a sprite with a physical model for each point from the chestPoints array.\n\n is the sprite‚Äôs ID in the sprite sheet, but how to find it? It‚Äôs simple! Open the tileset in the Tiled editor, select the chest, and on the left side, you‚Äôll see its ID:\n\n \n\n Also, we made sure that when a character ‚Äústeps‚Äù on a chest, there will be a flash, and the chest will disappear as if it had been taken.\n\n Let‚Äôs start the dev server and check it:\n\n\n\nCameras and following the player character\n\nCool, we can now collect chests! But what to do with those chests that are on the map, but that we don‚Äôt see? Time to work with the map.\n\n Each scene has a main camera already, and this is how it is being accessed ‚Äî through . Also, we can create our own cameras. For this tutorial, the main camera is enough, but if you want to learn more about cameras, be sure to look into these examples.\n\n Let‚Äôs add a function, where we‚Äôll call several methods for the camera and call the function after all initializations in the method:\n\nHere we have set the camera size, zoom, and the target that the camera will follow. is the value for the smooth movement of the camera towards the target position, thus we made the movement of the camera smoother.\n\n\n\nWe have already added chests to the map, but so far they don‚Äôt give out anything, they only disappear. Let‚Äôs create a score counter and link it to the moment of the chest collection.\n\n Let‚Äôs start small ‚Äî with the text. So, create a class, which will be common for all text labels.\n\n src/classes/text.ts\n\nNow we‚Äôll create a class for the counter, which will inherit from our main class, where we‚Äôll define a method for changing the value depending on the operation.\n\n src/classes/score.ts\n\nNow we need to create a separate scene for the UI elements, which will be on top of the main game and levels.\n\n And immediately add there our counter:\n\n src/scenes/ui/index.ts\n\nAlso, don‚Äôt forget to add the UI scene to the . We‚Äôll launch it together with the level from the Loading scene.\n\n src/index.ts\n\nGreat, we‚Äôve added a counter, but right now it doesn‚Äôt respond to collecting chests. Let‚Äôs establish this connection using the event system, and send the corresponding event from one scene to another, at the moment when we pick up the chest.\n\n In this tutorial, we‚Äôll not have many events, but in order not to remember the names of events, it is considered a good practice to store events in constants.\n\n Let‚Äôs create a file for these constants, and add only one event there so far ‚Äî the looting.\n\n src/consts.ts\n\nTo work with an event, we must trigger it and describe its handler somewhere. Let‚Äôs add this event trigger to the moment when the game character comes into contact with the chest. At the moment, this action triggers the destruction of the chest and the flash of the camera.\n\n src/scenes/level-1/index.ts\n\nNow let‚Äôs go to the UI scene, declare a listener for the looting event, and also describe its handler, which will change the counter value when we pick up the chest.\n\n src/scenes/ui/index.ts\n\nNow the counter responds to the collection of chests and increases the counter.\n\n\n\nSo we are now in the final part of our Phase 3 game tutorial. We already have a character to explore the locations, and chests that we get game points for. But there‚Äôs not enough action, there‚Äôs not enough of what could create a desire to win ‚Äî challenge. At the moment, our main character lives in greenhouse conditions and aimlessly collects chests. To create a more enjoyable gaming experience, you need to set goals and some obstacles on the way ‚Äî enemies.\n\n In this part, we‚Äôll place enemies on the map and add logic to them so that they attack our hero if he gets too close.\n\n Also, we‚Äôll add the win/lose logic, and depending on the status of the game completion, show the corresponding screen with the corresponding message.\n\nTo begin with, let‚Äôs create a class of enemies, which we‚Äôll use to ‚Äúpopulate‚Äù the location with enemies. The enemy class will be similar to the player‚Äôs class but without keyboard control.\n\n src/classes/enemy.ts\n\nDefine a constant value of the radius for the enemy, i.e. at what distance the target must be for the enemy to start pursuing it.\n\nAlso, add the ability to change the target. We‚Äôll not be using this function in this tutorial, but after completing it, you‚Äôll be able to upgrade the game by adding several extra characters.\n\nPay attention to the function, this is a built-in function for classes like , and it gets triggered every time before the game frames are re-rendered. Here we describe the ‚Äúbrains‚Äù of our enemy. They will appear to be waiting until the target comes close enough to start moving towards it:\n\nThe enemy class is there, now let‚Äôs recall the information about adding chests to the location ‚Äî on a separate Enemies layer. In the same way, add a couple of enemies to the first level scene.\n\n \n\n src/scenes/level-1/index.ts\n\nFor each enemy, specify that they should not go through walls, the character, and through other enemies.\n\n Also, describe that when in contact with the character, the enemy will inflict damage to the player in the amount of 1 HP (without additional restrictions, they will inflict damage very quickly).\n\n \n\n Now let‚Äôs display an HP value above the character‚Äôs head. To do this, add the class.\n\n src/classes/player.ts\n\nNow the HP value will be shown above the game character, even when he moves, since in the method we update the position for the text value of HP.\n\n We‚Äôve also extended the standard method of the superclass to change the HP value.\n\n \n\n When the enemy starts attacking the character, we can see how quickly the damage is dealt. So far, we are satisfied with this result, but you can add additional conditions for taking damage.\n\nNow the enemies can attack us, but we must also be able to defend. And, as they say, the best defense is a good offense. Let‚Äôs add our character the ability to attack by pressing the spacebar.\n\n Go to the class and add this little bit there:\n\n src/classes/player.ts\n\nExcellent! Our character can now attack enemies. When we press the spacebar, we play the attack animation, which was described in one of the previous parts, and trigger the attack event. We‚Äôll declare listeners for this event in the class.\n\n src/classes/enemy.ts\n\nHere we describe the handler for the damage-taking event, and each time we make our player character swing the hammer, we check to see if the enemy is really close enough to get damaged.\n\n When receiving damage, we turn off the physical model of the enemy so that they don‚Äôt continue to attack the player character while in the process of disappearing, and after blinking, we remove them from the scene.\n\n Also, we described that at the moment when the enemy is being removed from the scene, we must stop the damage reception. Otherwise, the enemy will still be able to take damage and will try to process the event.\n\n\n\nGreat, we can now fight the enemies! Time to add a game completion screen to show if we won or lost.\n\n Let‚Äôs start with the losing option. In the class, when receiving damage, add a check for the HP value, and if it becomes 0, then it will trigger the end-of-the-game event with the status of a loss.\n\n Determine the possible game statuses:\n\n src/consts.ts\n\nNext, let‚Äôs add a listener for this event to the UI scene and define an event handler. Also, add a text output to the screen, which will contain our message about the game status.\n\n src/scenes/ui/index.ts\n\nNow, when the main character runs out of HP, we are shown a screen with the corresponding inscription:\n\n \n\n Great, we have the logic of losing ready, now let‚Äôs implement the winning one.\n\n Remember that object where we specified the parameters for the game? We can use this object to store some parameters, for example, the number of points needed to win.\n\n Let‚Äôs go to the file with and add a field where we describe that you need to score 40 points to win, that is, collect 4 chests.\n\n src/index.ts\n\nNow let‚Äôs return to the UI scene, and in the handler for collecting the chest, we‚Äôll check if we have enough points to win.\n\n src/scenes/ui/index.ts\n\nCool, now that we have 40 points, we see the victory screen!\n\n\n\nYou probably noticed that in the inscription there‚Äôs something about restarting the game on click. Let‚Äôs implement it, it‚Äôs pretty simple.\n\n On the UI scene, inside our end-of-the-game event handler, add a click listener. Inside, we‚Äôll be clearing all current event listeners and restarting the scene:\n\n src/scenes/ui/index.ts\n\nTo make one scene from another, we use a record of getting a scene from the list of scenes by its key and then we can work with the resulting one.\n\n Awesome! Now we can restart the gameüòé\n\n When we restart the scene, all objects there are destroyed (the method built into the scene class gets triggered), but all their listeners remain. Because of this, we can observe a bug when, after restarting, when we press the spacebar, an error is displayed in the console that such and such animation cannot be found. This is an attack animation. The error occurs due to the fact that the listener tied to the state of the player BEFORE the restart gets triggered, and is still trying to play an animation that no longer exists. Add the class to remove all listeners when the player character gets destroyed.\n\n src/classes/player.ts\n\nNow there are no errors, and we can start the game again as many times as we likeüòé\n\nThank you for being here!\n\nThis concludes our Phaser 3 tutorial. We have learned from scratch how to set up the environment for developing and building a web game project with Phaser.js. We created scenes and classes for the player character and his enemies. We downloaded and worked with sprites, sprite sheets, atlas, animations. We learned how to create a game map from scratch and place objects. We added keyboard controls for the player character and taught bots to hunt him. And finally, we described the logic for winning and losing.\n\n So, everything‚Äôs in your hands now. This tutorial is enough to get your feet wet so that you could dive deeper, and understand what they all are talking about in other tutorials.\n\n Once again,\n‚Ä¢ None Check the game out and play the\n‚Ä¢ None Here are the\n‚Ä¢ None And this is where you can find the"
    },
    {
        "link": "https://jordan-eckowitz.medium.com/create-2d-javascript-games-using-phaser-fbbbbbe2eed2",
        "document": "Web browsers have fantastic built-in capabilities for creating simple graphs, drawing pictures and rendering animations. The HTML tag, when combined with Javascript, is perfectly suited to making interactive 2D games. In order to simplify and speed up game development a number of Javascript-based game engines have been developed. Some examples of Javascript game engines are P5, Melon, Kiwi, Play Canvas and Phaser. I decided to delve into the world of Phaser as it has a strong user community and fantastic documentation.\n\nPhaser is an extension to Pixi which is an incredibly powerful implementation of WebGL graphics rendering. Phaser currently has two active version streams. Version 3 is the official release and version 2 has been adopted as a community edition (v2 CE). There are significant differences in syntax between the two. Version 3 is still in its infancy while version 2 has a large online community and examples available online. For that reason, I picked the community edition for my exploration.\n\nThe first problem I ran into when trying to get Phaser setup is the loading of assets. I soon realized that due to Cross-Origin Resource Sharing (CORS) the game, even while in local development, needs to be run on a server. The Phaser documentation provides some suggestions such as MAMP, Grunt Connect, PHP 5 built-in web server or a web server extension from the large Node.js community.\n\nI decided to use a Node.js server. The two most popular options are HTTP-Server and Live-Server. I tried both. Each is incredibly easy to get working. All that needs to be done is install the node module globally(e.g. ), go to the root project folder in the terminal and type in either to fire it up. I found Live-Server to be better. It automatically refreshes on changes to the code for one thing. I also found that there were some caching issues with HTTP-Server which caused updates to not work until I manually cleared the cache.\n\nPhaser games have a standardized structure. They have 3 primary functions: . They are each quite intuitive. The assets are called in the preload function so that they‚Äôre ready to be initialized within the game. Any user controlled component in the game is called a . If the Sprite is animated you can create a Sprite Sheet which is essentially like a series of panels that capture the Sprite in multiple positions. This is done so that the preload data is faster to load on startup and during gameplay. The function is where the foundations of the game are created. The function is where you build functions that respond to changes within the created environment. All games have a preload and a create function. The update function is not always required, in many simple games all the requirements for gameplay are established in the create function.\n\nThe best way to illustrate how Phaser works is with an example. This example shows how to create a box that when thrown up comes back down and collides with a ground surface. This basic example shows off Phaser‚Äôs simple implementation of a physics engine together with interaction with the mouse and collision detection.\n\nHere is a GIF showing off our amazing new game!"
    },
    {
        "link": "https://phaser.io/learn",
        "document": "Devour as much information you can in this all-you-can-eat knowledge buffet from the Phaser community\n\nThis tutorial covers installing Phaser Launcher and learning how to use its code editor and media browser, plus creating and running your first sample project. Getting Started\n\nLearn how to create a game completely from scratch. Add a player and make him run and jump around the platforms, collecting stars and avoiding baddies. Making your first Game\n\nThere are over 5000 source code examples available on our examples site. Dig around, explore and see what you find! You can also download them all to browse locally. Visit the Phaser Examples\n\nEasily create, fork and share your Phaser code in our new Sandbox, with a built-in editor fully loaded with the latest Phaser releases. Enter the Phaser Sandbox\n\nThe amazing community are constantly publishing new Phaser tutorials. There are literally hundreds of them, covering everything from custom game objects, to shaders. Search our Tutorials\n\nWe've published over 11 years worth of Developer Logs. Read about how it started and how its going, along with extensive tutorials and structural guides. Browse Developer Logs\n\nGet taught by the experts in this comprehensive series. 11 Courses, 175 Lessons and over 28 hours of video. With downloadable project files and closed captions you'll have learned lots by the end. Visit GameDev Academy"
    }
]