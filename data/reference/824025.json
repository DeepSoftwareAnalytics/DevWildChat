[
    {
        "link": "https://docs.unity3d.com/2023.2/Documentation/Manual/best-practice-guides.html",
        "document": "Use this page to discover and learn production-tested best practices from Unity experts. The Technical Content Marketing team at Unity created the guides listed on this page together with industry experts, and engineers and technical artists from Unity R&D and the Accelerate Games Solutions teams."
    },
    {
        "link": "https://discussions.unity.com/t/how-to-manage-2d-character-spritesheets-also-however-many-sprites-should-an-average-character-have/1602777",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/how-to-add-material-to-2d-sprite/1596935",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/2023.1/Documentation/Manual/best-practice-guides.html",
        "document": "Use this page to discover and learn production-tested best practices from Unity experts. The Technical Content Marketing team at Unity created the guides listed on this page together with industry experts, and engineers and technical artists from Unity R&D and the Accelerate Games Solutions teams.\n\nLearn the fundamentals of version controlA system for managing file changes. You can use Unity in conjunction with most common version control tools, including Perforce, Git, Mercurial and PlasticSCM. More info\n\nSee in Glossary and project organization in Unity. Key topics covered include setting up a Unity project with different version control solutions, organizing a Unity project, proper folder structure, and naming standards."
    },
    {
        "link": "https://discussions.unity.com/t/2d-best-practice/684080",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Resources.Load.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close\n\nThis method returns the asset at if it can be found, otherwise it returns null.\n\n Note that the is case insensitive and must not contain a file extension. All asset names and paths in Unity use forward slashes, so using backslashes in the will not work.\n\n\n\n The is relative to any folder named inside the Assets folder of your project. More than one Resources folder can be used. If you have multiple Resources folders you cannot duplicate the use of an asset name.\n\n\n\nFor example, a project may have Resources folders called and . The path does not need to include and in the string, for example loading a GameObject at would only require as the . Also, if exists it can be loaded using as the string.\n\n If you have multiple Resources folders you cannot duplicate the use of an asset name.\n\n\n\nIf you have multiple assets of different types with the same name, and you don't specify the type, then the object that Unity returns is non-deterministic because the potential candidates are not ordered in any particular way. Instead, use to specify the required asset.\n\nThis method returns the asset at if it can be found and if its type matches the requested generic parameter type, otherwise it returns null. You can use this overload to reduce type conversion in your code by providing a generic type parameter. This allows Unity to perform the C# type conversion for you.\n\nThis method returns the asset at if it can be found and if its type matches the optional parameter, otherwise it returns null.\n\n You may need to cast the returned object to the actual associated C# type of the asset in order to access its methods and properties, or use it with other Unity APIs."
    },
    {
        "link": "https://docs.unity3d.com/Manual/LoadingResourcesatRuntime.html",
        "document": "The class allows you to find and access objects that are in a folder in your project.\n\nImportant: The Resources system is a performance-intensive way to organize assets in your project and isn’t recommended. Use AssetBundles and the Addressables package instead.\n\nYou can use the Resources system to make an asset available to a project without loading it in as part of a sceneA Scene contains the environments and menus of your game. Think of each unique Scene file as a unique level. In each Scene, you place your environments, obstacles, and decorations, essentially designing and building your game in pieces. More info\n\nSee in Glossary. When you add content to a folder named in your project, Unity makes it available to load when needed, independent of the scenes that you build. However, having the content constantly available at runtime has significant performance impact on your project.\n\nIt’s best practice not to use the system for the following reasons:\n• Placing a lot of content in the folder slows down application startup and the length of builds.\n• The system makes it harder to deliver custom content to specific platforms and prevents incremental content upgrades.\n• Making changes to assets in the folder requires a player rebuild and redeployment, whereas AssetBundles are better suited for incremental content updates.\n\nAssetBundles and the Addressables package are the recommended alternative.\n\nUnity combines all assets and objects in the folder into a single serialized file when you build a project. This file contains metadata and indexing information, which includes a serialized lookup tree that Unity uses to resolve a given object’s name into its appropriate File GUID and Local ID. It’s also used to locate the object at a specific byte offset in the serialized file’s body.\n\nOn most platforms, the lookup data structure is a balanced search tree, which has a construction time that causes the index’s loading time to grow more-than-linearly as the number of objects in folders increases.\n\nThis operation is unskippable and happens at application startup time while the initial non-interactive splash screen is displayed. For example, initializing a system containing 10,000 assets takes several seconds on low-end mobile devices, even though most of the objects contained in folders are rarely needed to load into an application’s first scene.\n\nWhen to use the Resources system\n\nThe system can be helpful in the following situations:\n• For rapid prototyping. Remove the folder when a project moves into full production.\n• In smaller projects if the content meets the following criteria:\n• It doesn’t need patching, or doesn’t vary across platforms and devices.\n\nExamples of the latter include MonoBehaviour singletons used to host prefabsAn asset type that allows you to store a GameObject complete with components and properties. The prefab acts as a template from which you can create new object instances in the scene. More info\n\nSee in Glossary, or ScriptableObject instances containing third-party configuration data, such as a Facebook App ID.\n\nTo use the Resources system:\n• Create a new folder called in your project, and add assets to it. Unity then makes these assets available even if they’re not directly referenced in a scene. Note: You can have multiple folders located at different subfolders within your folder, and packages can also contain folders\n• Whenever you want to load an asset from one of these folders, call in your code. Only assets in the folder can be accessed in this way.\n\nUnity stores all assets in the folders and their dependencies in a file in the build output called . If a scene in the build references an asset Unity serializes that asset into a file instead.\n\nAdditional assets might end up in the file if they’re dependencies. For example, a material in the folder might reference a texture outside of the folder. In that case the texture is also included in the file, but isn’t available to load directly.\n\nIf you want to destroy scene objects that were loaded using before loading another scene, call on them. To release assets and reclaim memory, use ."
    },
    {
        "link": "https://discussions.unity.com/t/resources-load-not-working/449366",
        "document": ""
    },
    {
        "link": "https://docs.unity.cn/560/Documentation/Manual/LoadingResourcesatRuntime.html",
        "document": "In some situations, it is useful to make an asset available to a project without loading it in as part of a scene. For example, there may be a character or other object that can appear in any scene of the game but which will only be used infrequently (this might be a “secret” feature, an error message or a highscore alert, say). Furthermore, you may even want to load assets from a separate file or URL to reduce initial download time or allow for interchangeable game content.\n\nUnity supports Resource Folders in the project to allow content to be supplied in the main game file yet not be loaded until requested. You can also create Asset Bundles. These are files completely separate from the main game file which contain assets to be accessed by the game on demand from a file or URL.\n\nAn Asset Bundle is an external collection of assets. You can have many Asset Bundles and therefore many different external collections of assets. These files exist outside of the built Unity player, usually sitting on a web server for end-users to access dynamically.\n\nTo build an Asset Bundle, you call BuildPipeline.BuildAssetBundles() from inside an Editor script. In the arguments, you specify an array of Objects to be included in the built file, along with some other options. This will build a file that you can later load dynamically in the runtime by using AssetBundle.LoadAsset().\n\nResource Folders are collections of assets that are included in the built Unity player, but are not necessarily linked to any GameObject in the Inspector.\n\nTo put anything into a Resource Folder, you simply create a new folder inside the Project View, and name the folder “Resources”. You can have multiple Resource Folders organized differently in your Project. Whenever you want to load an asset from one of these folders, you call Resources.Load().\n\nAll assets found in the Resources folders and their dependencies are stored in a file called resources.assets. If an asset is already used by another level it is stored in the .sharedAssets file for that level. The Edit -> PlayerSettings First Streamed Level setting determines the level at which the resources.assets will be collected and included in the build.\n\nIf a level prior to “First streamed Level” is including an asset in a Resource folder, the asset will be stored in assets for that level. If it is included afterwards, the level will reference the asset from the “resources.assets” file.\n\nOnly assets that are in the Resources folder can be accessed through Resources.Load(). However many more assets might end up in the “resources.assets” file since they are dependencies. (For example a Material in the Resources folder might reference a Texture outside of the Resources folder)\n\nYou can unload resources of an AssetBundle by calling AssetBundle.Unload(). If you pass true for the unloadAllLoadedObjects parameter, both the objects held internally by the AssetBundle and the ones loaded from the AssetBundle using AssetBundle.LoadAsset() will be destroyed and memory used by the bundle will be released.\n\nSometimes you may prefer to load an AssetBundle, instantiate the objects desired and release the memory used up by the bundle while keeping the objects around. The benefit is that you free up memory for other tasks, for instance loading another AssetBundle. In this scenario you would pass false as the parameter. After the bundle is destroyed you will not be able to load objects from it any more.\n\nIf you want to destroy scene objects loaded using Resources.Load() prior to loading another level, call Object.Destroy() on them. To release assets, use Resources.UnloadUnusedAssets()."
    },
    {
        "link": "https://docs.unity.cn/520/Documentation/Manual/LoadingResourcesatRuntime.html",
        "document": "In some situations, it is useful to make an asset available to a project without loading it in as part of a scene. For example, there may be a character or other object that can appear in any scene of the game but which will only be used infrequently (this might be a “secret” feature, an error message or a highscore alert, say). Furthermore, you may even want to load assets from a separate file or URL to reduce initial download time or allow for interchangeable game content.\n\nUnity supports Resource Folders in the project to allow content to be supplied in the main game file yet not be loaded until requested. You can also create Asset Bundles. These are files completely separate from the main game file which contain assets to be accessed by the game on demand from a file or URL.\n\nAn Asset Bundle is an external collection of assets. You can have many Asset Bundles and therefore many different external collections of assets. These files exist outside of the built Unity player, usually sitting on a web server for end-users to access dynamically.\n\nTo build an Asset Bundle, you call BuildPipeline.BuildAssetBundle() from inside an Editor script. In the arguments, you specify an array of Objects to be included in the built file, along with some other options. This will build a file that you can later load dynamically in the runtime by using AssetBundle.LoadAsset().\n\nResource Folders are collections of assets that are included in the built Unity player, but are not necessarily linked to any GameObject in the Inspector.\n\nTo put anything into a Resource Folder, you simply create a new folder inside the Project View, and name the folder “Resources”. You can have multiple Resource Folders organized differently in your Project. Whenever you want to load an asset from one of these folders, you call Resources.Load().\n\nIf your target deployable is a Streaming Web Player, you can define which scene will include everything in your Resource Folders. You do this in the Player Settings, accessible via Edit->Project Settings->Player. Stream queue is determined by Build Settings’ scene order.\n\nAll assets found in the Resources folders and their dependencies are stored in a file called resources.assets. If an asset is already used by another level it is stored in the .sharedAssets file for that level. The Edit -> PlayerSettings First Streamed Level setting determines the level at which the resources.assets will be collected and included in the build.\n\nIf a level prior to “First streamed Level” is including an asset in a Resource folder, the asset will be stored in assets for that level. if it is included afterwards, the level will reference the asset from the “resources.assets” file.\n\nOnly assets that are in the Resources folder can be accessed through Resources.Load(). However many more assets might end up in the “resources.assets” file since they are dependencies. (For example a Material in the Resources folder might reference a Texture outside of the Resources folder)\n\nYou can unload resources of an AssetBundle by calling AssetBundle.Unload(). If you pass true for the unloadAllLoadedObjects parameter, both the objects held internally by the AssetBundle and the ones loaded from the AssetBundle using AssetBundle.LoadAsset() will be destroyed and memory used by the bundle will be released.\n\nSometimes you may prefer to load an AssetBundle, instantiate the objects desired and release the memory used up by the bundle while keeping the objects around. The benefit is that you free up memory for other tasks, for instance loading another AssetBundle. In this scenario you would pass false as the parameter. After the bundle is destroyed you will not be able to load objects from it any more.\n\nIf you want to destroy scene objects loaded using Resources.Load() prior to loading another level, call Object.Destroy() on them. To release assets, use Resources.UnloadUnusedAssets()."
    }
]