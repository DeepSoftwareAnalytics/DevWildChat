[
    {
        "link": "https://w3schools.com/css/css3_flexbox_responsive.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://css-tricks.com/snippets/css/a-guide-to-flexbox",
        "document": "The (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”). The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow. Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.). Note: Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.\n\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”). If “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout. Items will be laid out following either the (from to ) or the cross axis (from to ).\n• main axis – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the property (see below).\n• main-start | main-end – The flex items are placed within the container starting from main-start and going to main-end.\n• main size – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.\n• cross axis – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.\n• cross-start | cross-end – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.\n• cross size – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.\n\nThis defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children. Note that CSS columns have no effect on a flex container. \n\nThis establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.\n• (default): left to right in ; right to left in\n• : right to left in ; left to right in\n• : same as but top to bottom\n• : same as but bottom to top By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.\n• (default): all flex items will be on one line\n• : flex items will wrap onto multiple lines, from top to bottom.\n• : flex items will wrap onto multiple lines from bottom to top. There are some visual demos of here. This is a shorthand for the and properties, which together define the flex container’s main and cross axes. The default value is . \n\nThis defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.\n• (default): items are packed toward the start of the flex-direction.\n• : items are packed toward the end of the flex-direction.\n• : items are packed toward the start of the direction.\n• : items are packed toward the end of the direction.\n• : items are packed toward left edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are packed toward right edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are centered along the line\n• : items are evenly distributed in the line; first item is on the start line, last item on the end line\n• : items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.\n• : items are distributed so that the spacing between any two items (and the space to the edges) is equal. Note that that browser support for these values is nuanced. For example, never got support from some versions of Edge, and start/end/left/right aren’t in Chrome yet. MDN has detailed charts. The safest values are , , and . There are also two additional keywords you can pair with these values: and . Using ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”). \n\nThis defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the version for the cross-axis (perpendicular to the main-axis).\n• / / : items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the rules or the rules.\n• / / : items are placed at the end of the cross axis. The difference again is subtle and is about respecting rules vs. rules.\n• : items are centered in the cross-axis\n• : items are aligned such as their baselines align The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. \n\nThis aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how aligns individual items within the main-axis. Note: This property only takes effect on multi-line flexible containers, where is set to either or ). A single-line flexible container (i.e. where is set to its default value, ) will not reflect .\n• (default): items are packed in their default position as if no value was set.\n• / : items packed to the start of the container. The (more supported) honors the while honors the direction.\n• / : items packed to the end of the container. The (more support) honors the while end honors the direction.\n• : items evenly distributed; the first line is at the start of the container while the last one is at the end\n• : items evenly distributed with equal space around each line\n• : items are evenly distributed with equal space around them\n• : lines stretch to take up the remaining space The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. The property explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. The behavior could be thought of as a minimum gutter, as if the gutter is bigger somehow (because of something like ) then the gap will only take effect if that space would end up smaller. It is not exclusively for flexbox, works in grid and multi-column layout as well. \n\nBy default, flex items are laid out in the source order. However, the property controls the order in which they appear in the flex container. Items with the same revert to source order. \n\nThis defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. If all items have set to , the remaining space in the container will be distributed equally to all children. If one of the children has a value of , that child would take up twice as much of the space as either one of the others (or it will try, at least). This defines the ability for a flex item to shrink if necessary. This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The keyword means “look at my width or height property” (which was temporarily done by the keyword until deprecated). The keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren , , and do. If set to , the extra space around content isn’t factored in. If set to , the extra space is distributed based on its value. See this graphic. This is the shorthand for and combined. The second and third parameters ( and ) are optional. The default is , but if you set it with a single number value, like , that changes the to 0%, so it’s like setting . It is recommended that you use this shorthand property rather than set the individual properties. The shorthand sets the other values intelligently. \n\nThis allows the default alignment (or the one specified by ) to be overridden for individual flex items. Please see the explanation to understand the available values. Note that , and have no effect on a flex item.\n\nFlexbox requires some vendor prefixing to support the most browsers possible. It doesn’t just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an “old”, “tweener”, and “new” versions. Perhaps the best way to handle this is to write in the new (and final) syntax and run your CSS through Autoprefixer, which handles the fallbacks very well. Alternatively, here’s a Sass to help with some of the prefixing, which also gives you an idea of what kind of things need to be done:\n\nLet’s start with a very very simple example, solving an almost daily problem: perfect centering. It couldn’t be any simpler if you use flexbox. .parent { display: flex; height: 300px; /* Or whatever */ } .child { width: 100px; /* Or whatever */ height: 100px; /* Or whatever */ margin: auto; /* Magic! */ } This relies on the fact a margin set to in a flex container absorb extra space. So setting a margin of will make the item perfectly centered in both axes. Now let’s use some more properties. Consider a list of 6 items, all with fixed dimensions, but can be auto-sized. We want them to be evenly distributed on the horizontal axis so that when we resize the browser, everything scales nicely, and without media queries. .flex-container { /* We first create a flex layout context */ display: flex; /* Then we define the flow direction and if we allow the items to wrap * Remember this is the same as: * flex-direction: row; * flex-wrap: wrap; */ flex-flow: row wrap; /* Then we define how is distributed the remaining space */ justify-content: space-around; } Done. Everything else is just some styling concern. Below is a pen featuring this example. Be sure to go to CodePen and try resizing your windows to see what happens. Let’s try something else. Imagine we have a right-aligned navigation element on the very top of our website, but we want it to be centered on medium-sized screens and single-columned on small devices. Easy enough. /* Large */ .navigation { display: flex; flex-flow: row wrap; /* This aligns items to the end line on main-axis */ justify-content: flex-end; } /* Medium screens */ @media all and (max-width: 800px) { .navigation { /* When on medium sized screens, we center it by evenly distributing empty space around items */ justify-content: space-around; } } /* Small screens */ @media all and (max-width: 500px) { .navigation { /* On small screens, we are no longer using row direction but column */ flex-direction: column; } } Let’s try something even better by playing with flex items flexibility! What about a mobile-first 3-columns layout with full-width header and footer. And independent from source order. .wrapper { display: flex; flex-flow: row wrap; } /* We tell all items to be 100% width, via flex-basis */ .wrapper > * { flex: 1 100%; } /* We rely on source order for mobile-first approach * in this case: * 1. header * 2. article * 3. aside 1 * 4. aside 2 * 5. footer */ /* Medium screens */ @media all and (min-width: 600px) { /* We tell both sidebars to share a row */ .aside { flex: 1 auto; } } /* Large screens */ @media all and (min-width: 800px) { /* We invert order of first sidebar and main * And tell the main element to take twice as much width as the other two sidebars */ .main { flex: 3 0px; } .aside-1 { order: 1; } .main { order: 2; } .aside-2 { order: 3; } .footer { order: 4; } }"
    },
    {
        "link": "https://freecodecamp.org/news/learn-flexbox-build-5-layouts",
        "document": "Here's a practical guide to help you learn CSS Flexbox in 2021 by building 5 responsive layouts. Let's dive right in.🥇\n\nYou can check out the Figma design here\n\nYou can also watch this tutorial on my YouTube channel here:\n\nWe need a blueprint when constructing a house. In the same way, we need a blueprint to layout our content across our browser. At the same time, we need to make responsive layouts for various screen sizes.\n\nThis is what Flexbox helps us do – create responsive layouts.\n\nSo how does Flexbox architecture work? The flex-items [Contents] are distributed along the Main Axis and Cross Axis. And, depending on the flex-direction property, the layout position changes between rows and columns.\n\nThis chart contains every possible property and value you can use when using flexbox. You can reference it while doing the project and experimenting with different values.\n\nBefore We Get Started...\n\nYou need to know a little bit of HTML and CSS. Throughout this tutorial, you'll learn how Flexbox works, how its various properties and values work, and how media queries work (which help us make responsive websites).\n\nBefore coding, we need to save some values in variables and clear the default browser styles. Along with that, we will define some media query mixins to save time and avoid code repetition.\n\nSCSS is a preprocessor of CSS which gives us much more functionality than regular CSS.\n\nFor example, we can nest child classes inside their parent class, store values in variables, and much more. It really helps us save time.\n\nLet's start playing around with SCSS. Open CodePen or any code editor and go through this with me, these step by step.👇\n\nHow to Enable SCSS in Codepen 👇\n\nFirst, define the border color, gap, and padding values in your variables.\n\nNext, define various screen breakpoints in the SCSS map. Remember, on our SCSS map, [mobile, tablet, and desktop] are keys and the pixels are values.\n\nTo save time and code, when defining media queries we'll use mixins and loop the breakpoints we defined above. 👆\n\nNow we have to change the default styles of our browser. We remove the margin and padding and set the box-sizing to border-box.\n\nLet's talk about the relationship between the HTML classes we're going to use. Always remember that Flexbox works on child classes.\n\nFor example, Flexbox properties defined on the Container class work on Block, and properties defined on the Block class work on the Box class. Here's an illustrated explanation of what I mean: 👇\n\nNow let's create these layouts. We'll start with an easier difficulty level and move to more advanced layouts.\n\nThe container class will hold 3 children -> block-1, block-2, and block-3.\n\nThe block-1 class will carry 3 boxes -> box-1, box-2, and box-3.\n\nThe same rules apply for the block-2 and block-3 classes, but the values will be changed.\n\nNow, we're going to style our container class. Remember, to trigger Flexbox and access all its powers, you need to write like this:\n\nSelect all the classes and style them together. At the same time, at the bottom, we will define our media query using the mixin we created during the setup phase.\n\nAlright then, next select all the classes and style them together like this:\n\nRemove the HTML code of level-1 and write this code instead. Basically it's 1 parent class with 4 child classes.\n\nHere are the style rules for the container class for level-2. At the bottom, we will set up a media query using the mixin.\n\nNow, we'll work with this code block:\n\nThe Style rules of the container class with the media query mixin are included at the bottom for level-3:\n\nHere, we select and style all classes along with the media query for mobile display:\n\nNow we individually target the block-1 and block-2 classes. We also change the flex-grow value in order to distribute screen space.\n\nThe HTML rules here are similar to level-1 with a few changes:\n\nStyle the container class like this:\n\nNext, select and style all the classes together along with the media query mixin at the bottom for mobile devices:\n\nNow select and style all the classes together:\n\nNow, we'll individually target the boxes and use flex-basis to distribute screen space.\n\nFinally, we will include the media query mixin for the mobile version.\n\nAre you winning yet? Let's turn up the heat. 🥵\n\nThe HTML rules here are similar to level-1 and level-4 with a few changes:\n\nFirst, change the container class styles like this:\n\nThen, target and style all classes together.\n\nNext, target and style all classes together.\n\nThen individually target the boxes and use flex-basis to distribute screen space.\n\nLastly, include the media query mixin for the mobile version. Notice that we are hiding box-2 for the mobile version.\n\nThanks for following along! Hopefully now you understand the basics of Flexbox. Here's your medal for reading till the end. ❤️\n\nSuggestions and criticisms are highly appreciated ❤️ Do get in touch with me via the social media links below if you have any questions."
    },
    {
        "link": "https://blog.pixelfreestudio.com/how-to-use-flexbox-for-responsive-web-design-2",
        "document": "Creating responsive web designs has become essential in today’s multi-device world. Flexbox, or the Flexible Box Layout, is a powerful CSS tool that simplifies the process of building flexible and responsive web layouts. Flexbox provides a straightforward way to align items and distribute space within a container, making it ideal for designing interfaces that adapt seamlessly to various screen sizes. In this article, we will delve into the details of using Flexbox for responsive web design, providing practical examples and tips to enhance your web development skills.\n\nFlexbox is a one-dimensional layout method for arranging items in rows or columns. Unlike traditional layout techniques, Flexbox is designed to distribute space dynamically between items and align them neatly, even when their sizes are unknown or change. This makes Flexbox particularly useful for responsive design, where elements must adapt to different screen sizes and orientations.\n\nThe fundamental concept of Flexbox is based on a flex container and flex items. The flex container is the parent element, and the flex items are the child elements within it. By applying specific CSS properties to the flex container and its items, you can control their layout and alignment efficiently.\n\nTo use Flexbox, you first need to define a flex container. This is done by setting the property of an element to or . Once a flex container is established, all direct children of this container become flex items.\n\nIn this example, the class is now a flex container, and all elements inside it are flex items. This basic setup is the foundation for using Flexbox to create responsive layouts.\n\nThe property determines the direction in which the flex items are placed inside the flex container. It can be set to (default), , , or .\n\nSetting arranges the flex items horizontally from left to right. Using reverses this order, while arranges the items vertically from top to bottom, and reverses this vertical order. This property is crucial for adapting layouts based on the orientation of the device.\n\nThe property controls whether flex items are forced onto one line or can wrap onto multiple lines. It can be set to (default), , or .\n\nSetting allows flex items to wrap onto multiple lines, ensuring they do not overflow the container. This is particularly useful for creating responsive grids where items need to adapt to varying screen sizes. Using reverses the order in which the lines are stacked.\n\nThe property aligns flex items along the main axis of the flex container. It can be set to , , , , , or .\n\nIn this example, distributes the flex items evenly, with the first item at the start and the last item at the end of the container. This property is useful for creating layouts where spacing between items is crucial, such as navigation bars or button groups.\n\nThe property aligns flex items along the cross axis of the container. It can be set to , , , , or (default).\n\nUsing vertically centers the flex items within the container. This property is particularly useful for centering content in both horizontal and vertical flex containers, providing a consistent alignment across different screen sizes.\n\nThe property allows a flex item to grow and fill available space in the container. It accepts a unitless value that serves as a proportion. If all items have a value of 1, they will share the available space equally.\n\nSetting ensures that the item will expand to fill any remaining space in the container. This property is useful for creating fluid layouts where certain elements need to adapt to the available space dynamically.\n\nThe property allows a flex item to shrink if necessary. It also accepts a unitless value. If all items have a value of 1, they will shrink equally when the container size decreases.\n\nUsing ensures that the item will reduce its size proportionally when there is not enough space in the container. This property helps maintain a balanced layout, especially on smaller screens where space is limited.\n\nThe property defines the initial size of a flex item before any remaining space is distributed or the item is shrunk. It can be set to any valid CSS size value (e.g., px, %, em).\n\nSetting makes the item start with a width of 200px. This property is useful for setting a base size for flex items, ensuring they maintain a minimum size while still allowing them to grow or shrink as needed.\n\nA responsive navigation bar is a crucial element for any website. With Flexbox, you can easily create a navigation bar that adapts to different screen sizes, ensuring a seamless user experience.\n\nIn this example, the navigation bar is created using Flexbox. The property ensures that the items are evenly spaced, while the media query adjusts the layout for smaller screens by stacking the items vertically.\n\nA responsive grid layout is essential for displaying content in a structured manner across various devices. Flexbox makes it easy to create grids that adapt to different screen sizes, ensuring a consistent and visually appealing design.\n\nIn this example, the property ensures that each grid item takes up one-third of the container’s width, minus the gap. The property allows items to wrap onto multiple lines. Media queries adjust the layout for smaller screens by changing the width of the grid items, ensuring a responsive design.\n\nOne of the most common layout tasks is centering content both vertically and horizontally. Flexbox simplifies this process, making it easy to center elements within their container.\n\nIn this example, the and properties center the content both horizontally and vertically within the container. This approach is particularly useful for creating hero sections, modals, and other centered content elements.\n\nFlexbox also makes it easy to align items within a column layout. This can be useful for creating vertically centered content or for aligning form elements.\n\nIn this example, the property creates a column layout, while and vertically center the items within the container. This layout is ideal for creating vertically aligned content blocks or stacking elements in a single column.\n\nA horizontal navigation menu is a common element in web design. Flexbox makes it easy to create a responsive navigation menu that adapts to different screen sizes.\n\nIn this example, the and properties create a horizontal navigation menu with evenly spaced items. The menu is styled with background colors and padding to ensure a consistent look and feel.\n\nFor smaller screens, it’s often necessary to convert a horizontal navigation menu into a vertical one. Flexbox makes this conversion simple with the use of media queries.\n\nIn this example, a media query is used to change the property to for screens smaller than 600px. This stacks the menu items vertically, ensuring a user-friendly navigation experience on mobile devices.\n\nA responsive card layout is useful for displaying various content types, such as blog posts, product listings, or portfolio items. Flexbox allows you to create a flexible card layout that adapts to different screen sizes.\n\nIn this example, the card layout uses Flexbox to create a responsive grid. The property ensures each card takes up one-third of the container’s width, with adjustments made for smaller screens using media queries.\n\nSidebars are essential in many web designs, providing navigation, additional content, or tools. Flexbox makes it simple to create responsive sidebars that adjust to various screen sizes, ensuring a seamless user experience.\n\nIn this example, the property ensures that the sidebar takes up a minimum of 200px, while the main content expands to fill the remaining space. The media query stacks the sidebar below the main content on smaller screens, enhancing readability and accessibility.\n\nResponsive forms are crucial for user interaction on various devices. Flexbox simplifies the process of creating forms that adjust gracefully to different screen sizes.\n\nIn this example, the property ensures that form groups take up approximately half of the container’s width, with adjustments for smaller screens using media queries. This layout provides a clean and organized form that remains user-friendly across devices.\n\nSometimes, you need more complex layouts that involve nesting flex containers. Flexbox allows you to create such advanced designs without compromising on responsiveness or maintainability.\n\nIn this example, the uses Flexbox to arrange the elements side by side. Each then uses Flexbox to stack its child elements vertically. This approach allows for complex layouts that remain responsive and easy to manage.\n\nMulti-column layouts are common in web design for creating structured content areas. Flexbox provides a straightforward way to build such layouts, ensuring they adapt well to different screen sizes.\n\nIn this example, the class uses Flexbox to distribute three columns evenly across the container. Each column takes up equal space, ensuring a balanced layout. This technique is useful for blog layouts, product showcases, or any design that benefits from a multi-column structure.\n\nFlexbox is an incredibly powerful tool for creating responsive web designs. Its ability to dynamically distribute space and align items makes it ideal for building layouts that adapt to different screen sizes and orientations. By mastering the use of Flexbox properties such as , , , and , you can create complex and responsive designs with ease.\n\nThis guide has covered the fundamentals of Flexbox, from basic setup to advanced layout techniques. By implementing these concepts in your web design projects, you can enhance the user experience and create visually appealing, responsive layouts. Embrace the power of Flexbox to take your web development skills to the next level.\n\nFlexbox offers a versatile and efficient way to create responsive, user-friendly web designs. By understanding and applying the concepts discussed in this article, you can tackle various layout challenges with confidence and creativity. Whether you’re building simple navigation menus, complex grid systems, or advanced multi-column layouts, Flexbox provides the tools you need to succeed in modern web design.\n• How to Use Asynchronous Loading for Faster Websites\n• The Impact of Network Latency on Web Performance"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/CSS_layout/Responsive_Design",
        "document": "Before responsive web design became the standard approach for making websites work across different device types, web developers used to talk about mobile web design, mobile web development, or sometimes, mobile-friendly design. These are basically the same as responsive web design — the goals are to make sure that websites work well across devices with different physical attributes (screen size, resolution) in terms of layout, content (text and media), and performance. The difference is mainly to do with the devices involved, and the technologies available to create solutions:\n• We used to talk about desktop or mobile, but now there are many different types of device available such as desktop, laptop, mobile, tablets, watches, etc. Instead of catering for a few different screen sizes, we now need to design sites defensively to cater for common screen sizes and resolutions, plus unknowns.\n• Mobile devices used to be low-powered in terms of CPU/GPU and available bandwidth. Some didn't support CSS or even HTML, and as a result, it was common to perform server-side browser sniffing to determine device/browser type before then serving a site that the device would be able to cope with. Mobile devices often had really simple, basic experiences served to them because it was all they could handle. These days, mobile devices are able to handle the same technologies as desktop computers, so such techniques are less common.\n• You should still use the techniques discussed in this article to serve mobile users a suitable experience, as there are still constraints such as battery life and bandwidth to worry about.\n• User experience is also a concern. A mobile user of a travel site might just want to check flight times and delay information, for example, and not be presented with a 3D animated globe showing flight paths and your company history. This can be handled using responsive design techniques, however.\n• Modern technologies are much better for creating responsive experiences. For example, responsive images/media technologies now allow appropriate media to be served to different devices without having to rely on techniques like server-side sniffing.\n\nHTML is fundamentally responsive, or fluid. If you create a web page containing only HTML, with no CSS, and resize the window, the browser will automatically reflow the text to fit the viewport. While the default responsive behavior may sound like no solution is needed, long lines of text displayed full screen on a wide monitor can be difficult to read. If wide screen line length is reduced with CSS, such as by creating columns or adding significant padding, the site may look squashed for the user who narrows their browser window or opens the site on a mobile device. Creating a non-resizable web page by setting a fixed width doesn't work either; that leads to scroll bars on narrow devices and too much empty space on wide screens. Responsive web design, or RWD, is a design approach that addresses the range of devices and device sizes, enabling automatic adaption to the screen, whether the content is viewed on a tablet, phone, television, or watch. Responsive web design isn't a separate technology — it is an approach. It is a term used to describe a set of best practices used to create a layout that can respond to any device being used to view the content. The term responsive design, coined by Ethan Marcotte in 2010, described using fluid grids, fluid images, and media queries to create responsive content. At the time, the recommendation was to use CSS for layout and media queries to query the browser width, creating layouts for different breakpoints. Fluid images are set to not exceed the width of their container; they have their property set to . Fluid images scale down when their containing column narrows but do not grow larger than their intrinsic size when the column grows. This enables an image to scale down to fit its content, rather than overflow it, but not grow larger and become pixelated if the container becomes wider than the image. Modern CSS layout methods are inherently responsive, and, since the publication of Marcotte's article, we have a multitude of features built into the web platform to make designing responsive sites easier. The rest of this article will point you to the various web platform features you might want to use when creating a responsive site.\n\nMedia queries allow us to run a series of tests (for example, whether the user's screen is greater than a certain width or resolution) and apply CSS selectively to style the page appropriately for the user's needs. For example, the following media query tests to see if the current web page is being displayed as screen media (therefore not a printed document) and the viewport is at least wide. The CSS for the selector will only be applied if these two things are true. You can add multiple media queries within a stylesheet, tweaking your whole layout or parts of it to best suit the various screen sizes. The points at which a media query is introduced, and the layout changed, are known as breakpoints. A common approach when using media queries is to create a simple single-column layout for narrow-screen devices (for example, mobile phones), then check for wider screens and implement a multiple-column layout when you know that you have enough screen width to handle it. Designing for mobile first is known as mobile first design. If using breakpoints, best practices encourage defining media query breakpoints with relative units rather than absolute sizes of an individual device. There are different approaches to the styles defined within a media query block; ranging from using media queries to style sheets based on browser size ranges to only including custom properties variables to store values associated with each breakpoint. Media queries can help with RWD, but are not a requirement. Flexible grids, relative units, and minimum and maximum unit values can be used without media queries.\n\nIn flexbox, flex items shrink or grow, distributing space between the items according to the space in their container. By changing the values for and you can indicate how you want the items to behave when they encounter more or less space around them. In the example below the flex items will each take an equal amount of space in the flex container, using the shorthand of as previously discussed (see Flexbox: Flexible sizing of flex items). Here's how we could use flexbox with a media query for responsive design. <div class=\"wrapper\"> <div class=\"col1\"> <p> This layout is responsive. See what happens if you make the browser window wider or narrow. </p> </div> <div class=\"col2\"> <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> <p> Before that night—a memorable night, as it was to prove—hundreds of millions of people had watched the rising smoke-wreaths of their fires without drawing any special inspiration from the fact. </p> </div> </div> Resize your screen. The layout will change when the size of the above example crosses the 600px width threshold.\n\nIn CSS grid layout the unit allows the distribution of available space across grid tracks. The next example creates a grid container with three tracks sized at . This will create three column tracks, each taking one part of the available space in the container. You already looked at this approach (see Flexible grids with the fr unit for a recap). Here's how we could use grid layout with a media query for responsive design. <div class=\"wrapper\"> <div class=\"col1\"> <p> This layout is responsive. See what happens if you make the browser window wider or narrow. </p> </div> <div class=\"col2\"> <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> <p> Before that night—a memorable night, as it was to prove—hundreds of millions of people had watched the rising smoke-wreaths of their fires without drawing any special inspiration from the fact. </p> </div> </div>\n\nIn this example, we want to set our level 1 heading to be , meaning it will be four times our base font size. That's a really large heading! We only want this jumbo heading on larger screen sizes, therefore we first create a smaller heading then use media queries to overwrite it with the larger size if we know that the user has a screen size of at least . We have edited our responsive grid example above to also include responsive type using the method outlined. You can see how the heading switches sizes as the layout goes to the two column version. On mobile the heading is smaller, but on desktop, we see the larger heading size: <div class=\"wrapper\"> <div class=\"col1\"> <h1>Watch my size!</h1> <p> This layout is responsive. See what happens if you make the browser window wider or narrow. </p> </div> <div class=\"col2\"> <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> <p> Before that night—a memorable night, as it was to prove—hundreds of millions of people had watched the rising smoke-wreaths of their fires without drawing any special inspiration from the fact. </p> </div> </div> As this approach to typography shows, you do not need to restrict media queries to only changing the layout of the page. They can be used to tweak any element to make it more usable or attractive at alternate screen sizes.\n\nViewport units can also be used to enable responsive typography, without the need for setting breakpoints with media queries. is equal to one percent of the viewport width, meaning that if you set your font size using , it will always relate to the size of the viewport. The problem with doing the above is that the user loses the ability to zoom any text set using the unit, as that text is always related to the size of the viewport. Therefore you should never set text using viewport units alone. There is a solution, and it involves using . If you add the unit to a value set using a fixed size such as s or s then the text will still be zoomable. Essentially, the unit adds on top of that zoomed value: This means that we only need to specify the font size for the heading once, rather than set it up for mobile and redefine it in the media queries. The font then gradually increases as you increase the size of the viewport. <div class=\"wrapper\"> <div class=\"col1\"> <h1>Watch my size!</h1> <p> This layout is responsive. See what happens if you make the browser window wider or narrow. </p> </div> <div class=\"col2\"> <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> </div> </div>\n\nIf you look at the HTML source of a responsive page, you will usually see the following tag in the of the document. This viewport meta tag tells mobile browsers that they should set the width of the viewport to the device width, and scale the document to 100% of its intended size, which shows the document at the mobile-optimized size that you intended. Why is this needed? Because mobile browsers tend to lie about their viewport width. This meta tag exists because when smartphones first arrived, most sites were not mobile optimized. The mobile browser would, therefore, set the viewport width to 980 pixels, render the page at that width, and show the result as a zoomed-out version of the desktop layout. Users could zoom in and pan around the website to view the bits they were interested in, but it looked bad. By setting you are overriding a mobile device's default, like Apple's default , with the actual width of the device. Without it, your responsive design with breakpoints and media queries may not work as intended on mobile browsers. If you've got a narrow screen layout that kicks in at 480px viewport width or less, but the device is saying it is 980px wide, that user will not see your narrow screen layout. So you should always include the viewport meta tag in the head of your documents.\n\nResponsive design refers to a site or application design that responds to the environment in which it is viewed. It encompasses a number of CSS and HTML features and techniques and is now essentially just how we build websites by default. Consider the sites that you visit on your phone — it is probably fairly unusual to come across a site that is the desktop version scaled down, or where you need to scroll sideways to find things. This is because the web has moved to this approach of designing responsively. It has also become much easier to achieve responsive designs with the help of the layout methods you have learned in these lessons. If you are new to web development today you have many more tools at your disposal than in the early days of responsive design. It is therefore worth checking the age of any materials you are using. While the historical articles are still useful, modern use of CSS and HTML makes it far easier to create elegant and useful designs, no matter what device your visitor views the site with. Next, we will study media queries in more detail and show how to use them to solve some common problems."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_usage",
        "document": "Let's start this tutorial by looking at the HTML element itself. At the end of this page, you will know how to set up a canvas 2D context and have drawn a first example in your browser.\n\nAt first sight a looks like the element, with the only clear difference being that it doesn't have the and attributes. Indeed, the element has only two attributes, and . These are both optional and can also be set using DOM properties. When no and attributes are specified, the canvas will initially be 300 pixels wide and 150 pixels high. The element can be sized arbitrarily by CSS, but during rendering the image is scaled to fit its layout size: if the CSS sizing doesn't respect the ratio of the initial canvas, it will appear distorted. Note: If your renderings seem distorted, try specifying your and attributes explicitly in the attributes, and not using CSS. The attribute isn't specific to the element but is one of the global HTML attributes which can be applied to any HTML element (like for instance). It is always a good idea to supply an because this makes it much easier to identify it in a script. The element can be styled just like any normal image ( , , …). These rules, however, don't affect the actual drawing on the canvas. We'll see how this is done in a dedicated chapter of this tutorial. When no styling rules are applied to the canvas it will initially be fully transparent.\n\nThe element, like the , , , and elements, must be made accessible by providing fallback text to be displayed when the media doesn't load or the user is unable to experience it as intended. You should always provide fallback content, captions, and alternative text, as appropriate for the media type. Providing fallback content is very straightforward: just insert the alternate content inside the element to be accessed by screen readers, spiders, and other automated bots. Browsers, by default, will ignore the content inside the container, rendering the canvas normally unless isn't supported. For example, we could provide a text description of the canvas content or provide a static image of the dynamically rendered content. This can look something like this: Telling the user to use a different browser that supports canvas does not help users who can't read the canvas at all. Providing useful fallback text or sub DOM adds accessibility to an otherwise non-accessible element.\n\nAs a consequence of the way fallback is provided, unlike the element, the element requires the closing tag ( ). If this tag is not present, the rest of the document would be considered the fallback content and wouldn't be displayed. If fallback content is not needed, a simple is fully compatible with all browsers that support canvas at all. This should only be used if the canvas is purely presentational.\n\nThe element creates a fixed-size drawing surface that exposes one or more rendering contexts, which are used to create and manipulate the content shown. In this tutorial, we focus on the 2D rendering context. Other contexts may provide different types of rendering; for example, WebGL uses a 3D context based on OpenGL ES. The canvas is initially blank. To display something, a script first needs to access the rendering context and draw on it. The element has a method called , used to obtain the rendering context and its drawing functions. takes one parameter, the type of context. For 2D graphics, such as those covered by this tutorial, you specify to get a . The first line in the script retrieves the node in the DOM representing the element by calling the method. Once you have the element node, you can access the drawing context using its method.\n\nHere is a minimalistic template, which we'll be using as a starting point for later examples. Note: It is not good practice to embed a script inside HTML. We do it here to keep the example concise. The script includes a function called , which is executed once the page finishes loading; this is done by listening for the event on the document. This function, or one like it, could also be called using , , or any other event handler, as long as the page has been loaded first. Here is how a template would look in action. As shown here, it is initially blank."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images",
        "document": "Until now we have created our own shapes and applied styles to them. One of the more exciting features of is the ability to use images. These can be used to do dynamic photo compositing or as backdrops of graphs, for sprites in games, and so forth. External images can be used in any format supported by the browser, such as PNG, GIF, or JPEG. You can even use the image produced by other canvas elements on the same page as the source! Importing images into a canvas is basically a two step process:\n• Get a reference to an object or to another canvas element as a source. It is also possible to use images by providing a URL.\n• Draw the image on the canvas using the function. Let's take a look at how to do this.\n\nThe canvas API is able to use any of the following data types as an image source: These are images created using the constructor, as well as any element. These are images embedded using the element. Using an HTML element as your image source grabs the current frame from the video and uses it as an image. You can use another element as your image source. A bitmap image, eventually cropped. Such type are used to extract part of an image, a sprite, from a larger image A special kind of that is not displayed and is prepared without being displayed. Using such an image source allows to switch to it without the composition of the content to be visible to the user. An image representing one single frame of a video. There are several ways to get images for use on a canvas.\n\nAnother option is to create new objects in our script. To do this, we have the convenience of an constructor: When this script gets executed, the image starts loading, but if you try to call before the image has finished loading, it won't do anything. Older browsers may even throw an exception, so you need to be sure to use the load event so you don't draw the image to the canvas before it's ready: If you're using one external image, this can be a good approach, but once you want to use many images or lazy-load resources, you probably need to wait for all the files to be available before drawing to the canvas. The examples below that deal with multiple images use an async function and Promise.all to wait for all images to load before calling : async function draw() { // Wait for all images to be loaded: await Promise.all( Array.from(document.images).map( (image) => new Promise((resolve) => image.addEventListener(\"load\", resolve)), ), ); const ctx = document.getElementById(\"canvas\").getContext(\"2d\"); // call drawImage() as usual } draw();\n\nAnother possible way to include images is via the data: URL. Data URLs allow you to completely define an image as a Base64 encoded string of characters directly in your code. One advantage of data URLs is that the resulting image is available immediately without another round trip to the server. Another potential advantage is that it is also possible to encapsulate in one file all of your CSS, JavaScript, HTML, and images, making it more portable to other locations. Some disadvantages of this method are that your image is not cached, and for larger images the encoded URL can become quite long.\n\nIn this example, we'll use an image as a wallpaper and repeat it several times on the canvas. This is done by looping and placing the scaled images at different positions. In the code below, the first loop iterates over the rows. The second loop iterates over the columns. The image is scaled to one third of its original size, which is 50x38 pixels. Note: Images can become blurry when scaling up or grainy if they're scaled down too much. Scaling is probably best not done if you've got some text in it which needs to remain legible. function draw() { const ctx = document.getElementById(\"canvas\").getContext(\"2d\"); const img = new Image(); img.onload = () => { for (let i = 0; i < 4; i++) { for (let j = 0; j < 3; j++) { ctx.drawImage(img, j * 50, i * 38, 50, 38); } } }; img.src = \"https://mdn.github.io/shared-assets/images/examples/rhino.jpg\"; } draw(); The resulting canvas looks like this:\n\nThe third and last variant of the method has eight parameters in addition to the image source. It lets us cut out a section of the source image, then scale and draw it on our canvas. Given an , this function takes the area of the source image specified by the rectangle whose top-left corner is ( , ) and whose width and height are and and draws it into the canvas, placing it on the canvas at ( , ) and scaling it to the size specified by and , maintaining its aspect ratio. To really understand what this does, it may help to look at this image: The first four parameters define the location and size of the slice on the source image. The last four parameters define the rectangle into which to draw the image on the destination canvas. Slicing can be a useful tool when you want to make compositions. You could have all elements in a single image file and use this method to composite a complete drawing. For instance, if you want to make a chart you could have a PNG image containing all the necessary text in a single file and depending on your data could change the scale of your chart fairly easily. Another advantage is that you don't need to load every image individually, which can improve load performance.\n\nIn this example, we'll use the same rhino as in the previous example, but we'll slice out its head and composite it into a picture frame. The picture frame image is a 24-bit PNG which includes a drop shadow. Because 24-bit PNG images include a full 8-bit alpha channel, unlike GIF and 8-bit PNG images, it can be placed onto any background without worrying about a matte color. async function draw() { // Wait for all images to be loaded. await Promise.all( Array.from(document.images).map( (image) => new Promise((resolve) => image.addEventListener(\"load\", resolve)), ), ); const canvas = document.getElementById(\"canvas\"); const ctx = canvas.getContext(\"2d\"); // Draw slice ctx.drawImage( document.getElementById(\"source\"), 33, 71, 104, 124, 21, 20, 87, 104, ); // Draw frame ctx.drawImage(document.getElementById(\"frame\"), 0, 0); } draw(); We took a different approach to loading the images this time. Instead of loading them by creating new objects, we included them as tags in our HTML source and retrieved the images from those when drawing to the canvas. The images are hidden from page by setting the CSS property to for those images. Each is assigned an ID attribute, so we have one for a and one for the , which makes them easy to select using . We're using Promise.all to wait for all images to load before calling . slices the rhino out of the first image and scales it onto the canvas. Lastly, we draw the picture frame using a second call."
    },
    {
        "link": "https://blog.pixelfreestudio.com/how-to-use-the-html5-canvas-element-for-graphics",
        "document": "The HTML5 Canvas element is a powerful tool for creating graphics directly in the browser. Whether you’re making a game, drawing graphs, or creating animations, the Canvas element can do it all. This guide will walk you through everything you need to know about using the HTML5 Canvas element for graphics, in a way that’s easy to understand and follow.\n\nWhat is the Canvas Element?\n\nThe Canvas element is like a drawing board that you can use to create graphics with JavaScript. It doesn’t have any inherent drawing capabilities on its own but provides the space where you can draw.\n\nYou can think of it as an empty sheet of paper.\n\nTo start using the Canvas element, you first need to include it in your HTML file. Here’s a basic example of how to set up a Canvas:\n\nIn this example, we create a Canvas element with an ID of and set its width and height to 500 pixels. The tag points to a JavaScript file where we’ll write our drawing code.\n\nTo draw on the Canvas, you need to get its context. The context is what you use to actually draw the graphics. You can get the context with JavaScript like this:\n\nThis code selects the Canvas element by its ID and gets its 2D drawing context. The variable is now your drawing tool.\n\nRectangles are one of the simplest shapes you can draw on the Canvas. You can draw a rectangle with the method:\n\nThis code sets the fill color to blue and draws a rectangle at (50, 50) with a width of 100 pixels and a height of 150 pixels.\n\nFor more complex shapes, you need to draw paths. Here’s how you can draw a triangle:\n\nThis code starts a new path, moves the pen to (100, 100), draws lines to (150, 200) and (50, 200), and then closes the path. Finally, it fills the triangle with red color.\n\nYou can set the colors for both filling and stroking (outlining) shapes. Here’s how to set different colors:\n\nsets the color for the interior of shapes, while sets the color for the outlines.\n\nYou can also use gradients and patterns to fill shapes. Here’s an example of a linear gradient:\n\nThis code creates a gradient that goes from blue to white and uses it to fill a rectangle.\n\nYou can draw text on the Canvas using the and methods. Here’s how to draw filled text:\n\nThis code sets the font to 30px Arial, sets the fill color to black, and draws the text at (50, 50).\n\nYou can control the alignment of the text with properties like and . Here’s an example:\n\nThis code centers the text both horizontally and vertically on the Canvas.\n\nDrawing lines is a fundamental part of using the Canvas. You can draw lines by defining a path and then stroking it.\n\nThis code starts a path at (100, 100), draws a line to (200, 200), sets the stroke color to purple, the line width to 5 pixels, and then strokes the path.\n\nTo draw arcs or circles, you use the method. Here’s how to draw a circle:\n\nThis code creates a path for a circle with a center at (150, 150), a radius of 75 pixels, and fills it with orange.\n\nBezier and quadratic curves allow for more complex shapes. Here’s an example of a quadratic curve:\n\nAnd here’s an example of a Bezier curve:\n\nScaling changes the size of the shapes you draw. Here’s how to scale a rectangle:\n\nThe and methods are used to save and restore the context’s state, so the scaling only affects the rectangle.\n\nYou can rotate shapes using the method. Here’s an example:\n\nThis code translates the origin to (100, 100) and then rotates the context by 45 degrees (π/4 radians).\n\nTranslating moves the origin of the Canvas to a new position. Here’s how to translate:\n\nThis code moves the origin to (100, 100) and draws a rectangle there.\n\nCreating animations involves repeatedly drawing shapes with slight changes. Here’s a basic example of an animation:\n\nThis code moves a rectangle from left to right, looping back when it goes off the Canvas.\n\nYou can make your Canvas interactive by responding to user input. Here’s an example that changes the color of a rectangle when it’s clicked:\n\nThis code checks if the click is within the rectangle and changes its color if it is.\n\nYou can draw images on the Canvas using the method. Here’s how you can load and draw an image:\n\nThis code creates a new image object, sets its source to your image file, and draws it on the Canvas once it’s loaded.\n\nYou can also manipulate images by accessing the pixel data with the and methods. Here’s a basic example of changing the color of an image:\n\nThis code inverts the colors of the image by modifying its pixel data.\n\nYou can save the content of the Canvas as an image file. Here’s how to do it:\n\nThis code gets a data URL representing the image in PNG format. You can set this URL as the source of an image element or open it in a new tab to save it.\n\nTo allow users to download the Canvas content, you can create a download link:\n\nThis code creates an anchor element, sets the download attribute to the desired file name, sets the href to the Canvas data URL, and programmatically clicks the link to trigger the download.\n\nFor more complex animations, you can use a technique called frame-by-frame animation. Here’s an example of an animated sprite:\n\nThis code draws one frame of the sprite at a time, cycling through the frames to create an animation.\n\nFabric.js is a powerful library that simplifies working with the Canvas. Here’s a basic example of how to use Fabric.js:\n\nThis code creates a Fabric.js canvas and adds a red rectangle to it. Fabric.js provides many features for creating and manipulating shapes, images, and text, making it easier to work with the Canvas.\n\nClipping regions allow you to define an area where drawings are confined. Here’s an example of how to use clipping:\n\nThis code creates a circular clipping region. Only the part of the rectangle that lies within the circle will be visible.\n\nYou can use global composite operations to control how drawings are blended together. Here’s an example:\n\nThis code sets the global composite operation to ‘multiply’, which blends the colors of the overlapping rectangles.\n\nYou can use images to create repeating patterns. Here’s how to create a pattern:\n\nThis code uses an image to create a repeating pattern and fills the entire Canvas with it.\n\nRadial gradients are circular gradients that transition from one color to another. Here’s an example:\n\nThis code creates a radial gradient that transitions from yellow to red and uses it to fill a rectangle.\n\nYou can outline text using the method. Here’s an example:\n\nThis code sets the font, stroke color, and line width, then draws the outlined text.\n\nText shadows add a visual effect to text. Here’s how to add a shadow:\n\nThis code sets the shadow color, offset, and blur, and then draws the text with a shadow.\n\nYou can use external data to create dynamic graphics. Here’s an example of drawing a bar chart from an array of values:\n\nThis code iterates over an array of data values and draws a bar for each value.\n\nYou can integrate the Canvas with external APIs to create dynamic content. Here’s an example of fetching data from an API and drawing it:\n\nThis code fetches data from an API, then draws bars based on the data.\n\nGSAP is a popular library for animations. Here’s an example of how to animate a shape with GSAP:\n\nThis code uses GSAP to animate a rectangle moving across the Canvas.\n\nOffscreenCanvas is a powerful feature for performing graphics operations off the main thread. Here’s an example:\n\nThis code creates an offscreen Canvas, draws on it, and then transfers the drawing to the main Canvas.\n\nYou can handle mouse events to create interactive Canvas applications. Here’s how to handle mouse clicks:\n\nThis code adds an event listener for mouse down events and draws a green square where the user clicks.\n\nFor mobile devices, you can handle touch events. Here’s an example:\n\nThis code adds an event listener for touch start events and draws a purple square where the user touches the Canvas.\n\nAlthough the Canvas itself doesn’t directly handle keyboard events, you can use the document object to listen for them:\n\nThis code listens for the ‘a’ key press and draws a blue square at (100, 100) when the key is pressed.\n\nTo detect if a user clicks inside a shape, you can use simple math to check the coordinates. Here’s how to detect if a click is inside a rectangle:\n\nThis code checks if the click coordinates fall within the bounds of the rectangle.\n\nFor more complex shapes, you can use the object to define and detect hits:\n\nThis code defines a triangle using and detects clicks inside the triangle.\n\nHigh-DPI displays can cause your Canvas graphics to look blurry. To fix this, you can scale the Canvas to match the device’s pixel ratio:\n\nThis code scales the Canvas to match the device’s pixel ratio, ensuring sharp graphics on high-DPI displays.\n\nWebGL (Web Graphics Library) is a JavaScript API for rendering 2D and 3D graphics in a web browser. It allows you to leverage the GPU for more complex graphics. Here’s a basic example of setting up a WebGL context:\n\nThis code initializes a WebGL context and checks if WebGL is supported.\n\nWebGL requires more setup than the 2D context. Here’s a simple example of drawing a triangle:\n\nThis code sets up a basic WebGL program and draws a red triangle.\n\nYou can combine Canvas with SVG (Scalable Vector Graphics) to leverage the strengths of both. For example, you can draw complex shapes with SVG and then render them on the Canvas:\n\nThis code creates an SVG rectangle and draws it on the Canvas.\n\nWeb Workers allow you to run scripts in background threads. You can use them with Canvas to perform heavy computations without blocking the main thread:\n\nThis code uses a Web Worker to generate image data and then renders it on the Canvas.\n\nTo ensure your Canvas content looks good on different screen sizes, you can make the Canvas responsive. Here’s how to achieve a responsive Canvas:\n\nThis code resizes the Canvas to match the window size and redraws the content whenever the window is resized.\n\nAccessibility is crucial for reaching a broader audience. Although Canvas doesn’t inherently support accessibility, you can enhance it with ARIA attributes and alternative text:\n\nAdding an and a descriptive paragraph helps screen readers understand the content of the Canvas.\n\nReact is a popular JavaScript library for building user interfaces. Here’s how to integrate Canvas with a React component:\n\nThis code uses the and hooks to access the Canvas element and draw on it within a React component.\n\nAngular is another popular framework for building web applications. Here’s an example of integrating Canvas with an Angular component:\n\nThis code uses Angular’s decorator to get a reference to the Canvas element and draw on it after the view initializes.\n\nMinimize the number of draw calls by grouping multiple drawing operations together. Instead of clearing and redrawing the entire Canvas frequently, update only the parts that have changed:\n\nFor complex drawings, use multiple Canvas elements as layers. This way, you can update one layer without affecting others:\n\nThis code uses two Canvas elements to separate static and dynamic content, improving performance by only updating the necessary layer.\n\nShadows and gradients can make your graphics look more polished and visually appealing. Here’s how to add shadows:\n\nAnd here’s how to create and use a gradient:\n\nCSS filters can be applied to Canvas elements to add visual effects like blur or grayscale:\n\nThis code applies a blur filter to the Canvas, making the red rectangle appear blurred.\n\nChart.js is a popular library for creating charts. Here’s how to create a simple bar chart with Chart.js:\n\nThis code creates a bar chart with different colored bars representing data points.\n\nCanvas is well-suited for developing 2D games. Use game loops, collision detection, and sprite animations to create engaging gameplay experiences. Libraries like Phaser.js can simplify game development:\n\nThis code sets up a basic Phaser.js game with a background image and a bouncing star.\n\nUse Canvas to create interactive data visualizations like charts and graphs. Libraries like D3.js can help you create complex visualizations with ease:\n\nThis code uses D3.js to create a simple bar chart from an array of data.\n\nThe HTML5 Canvas element is a versatile and powerful tool for creating graphics directly in the browser. It supports a wide range of capabilities, from drawing simple shapes and text to creating complex animations and interactive applications. By leveraging techniques such as responsive design, performance optimization, and integration with other technologies like React, Angular, and WebGL, you can enhance the functionality and visual appeal of your web projects.\n\nUnderstanding and mastering the Canvas API opens up endless possibilities for creative and engaging web content. Whether you’re developing games, data visualizations, or any other interactive graphics, Canvas provides the flexibility and performance to bring your ideas to life effectively.\n• The Importance of Code Reviews in Frontend Development\n• How to Use TypeScript for Better JavaScript Development\n• Best Practices for Accessibility in Frontend Development\n• How to Integrate Frontend Testing into Your Workflow"
    },
    {
        "link": "https://docs.tizen.org/application/web/guides/w3c/graphics/canvas",
        "document": "The HTML5 canvas allows you to use graphics on the screen, and draw and manage various shapes. The HTML Canvas 2D Context API (in mobile, wearable, and TV applications) defines a special canvas element that expresses images or shapes with JavaScript.\n\nThe main features of the Canvas Element API include the following:\n• To draw and manage shapes, you must insert a <canvas> element in the HTML page.\n• You can use images on the canvas by using the applicable method of the HTML Canvas 2D Context API.\n• With the HTML Canvas 2D Context API, you can draw various shapes, such as rectangles, circles, and lines to a canvas. You can also draw and mask objects on the canvas.\n• You can use a canvas to create text or lines other than images and shapes.\n\nFor all canvas objects (images, shapes, text, and lines), you can define colors (the and attributes), shadows (the and attributes), and gradation (the method). You can also use the transformation methods, such as , , , and , to implement, for example, transparency or shape gradient transformations.\n\nIn mobile applications only, in HTML5, the Scalable Vector Graphics (SVG) 2 API provides similar features as the canvas. Their difference is that SVG expresses graphics using vectors, while the canvas is based on pixels. To express complex graphics, use the canvas, and to express graphics with a liberal expansion or reduction, use SVG.\n\nTo create a canvas in your application, follow these steps:\n• The canvas assigns the region (canvas context) where images are drawn with JavaScript: If no and attributes are inserted, the default value is .\n• To check the information on the image connected to the canvas, use the method to restore the URL of the image used on the canvas. To create a blob object of the image file, use the method.\n• Use the interface (in mobile, wearable, and TV applications) to connect to the canvas and get the canvas context: The interface has various methods and attributes for expressing images and shapes.\n• To manage the work stack of the canvas, use the following methods:\n• : Pushes the current state onto the stack.\n• : Pops the top state on the stack, restoring the context to that state.\n\nThere is a need to separately check whether the canvas 2D context can be used by using the method:\n\nFor the complete source code related to this use case, see the following files:\n\nUse images on the canvas\n\nTo use images on the canvas, use the method of the HTML Canvas 2D Context API. The method receives information, such as the image URL and position, and where it is indicated, and then creates the image on the canvas. The created image is pixel-based.\n\nTo use images on a canvas, follow these steps:\n• Use the method to express an image on the canvas. When you define the URL of the image to be imported and its coordinates, the original image is imported as it is. You can hide certain parts of the image by assigning its size accordingly:\n• When the image is connected to the canvas, extract the color value through the method. Re-input the transformed values with the method:\n• Use the interface to transform the selected object, for example, its size, angle, or position. By connecting to the image used on the canvas, you can also rotate it: The following figure applies to mobile applications only.\n\nFor the complete source code related to this use case, see the following files:\n\nWith the HTML Canvas 2D Context API, you can draw various shapes, such as rectangles ( ), circles ( and ), and lines ( and ), to a canvas. You can define the position and size of the shapes, and also merge shapes with other shape objects.\n\nTo create and draw shapes on a canvas, follow these steps:\n• Use the method to create a rectangle. Use the canvas context to assign the rectangle attributes, such as position and size: The following figure applies to mobile applications only.\n• Use the method to create a circle. Use the canvas context to assign the circle attributes, such as position and radius. (The following figure applies to mobile applications only.)\n• Use the interface to transform the created shapes. With compositing, a certain part of the shape can be made transparent. The following figure applies to mobile applications only.\n\nFor the complete source code related to this use case, see the following file:\n\nTo draw masks on a canvas, follow these steps:\n• Create the HTML layout with a canvas and 2 button input elements for brush selection:\n• Define the CSS style for the background image:\n• Declare the JavaScript variables needed in the application. The and variables indicate the last position of a user event. The variable indicates whether a button or touch event has occurred, and the variable indicates the current brush size:\n• Draw an image on the canvas using the method. The user is able to replace the image with another using a brush. Create a new object, including the path of the image file. Define the line width to be based on the brush size selected by the user:\n• The and events only store the event coordinates, the and events define the position and direction of the drawing, and the and events indicate that the user event ends, as illustrated in the following figure.\n• Use the method to update the and variable values. The real coordinates can be calculated by reducing the offset position of the canvas element from the touch position coordinates. The string indicates that the event is a touch event:\n• When the user starts drawing, the or event calls the method, which updates the event position, sets the composite operations property to make the drawing a mask, begins to draw a new path, moves the drawing point to the selected coordinates, and sets the button or touch event state to :\n• While the user is drawing, the and events are handled with the method based on the button state retrieved from the variable. The method calls the method only when the mouse or finger is being moved. Use the method to make the drawn line visible:\n• When the touch event ends or the mouse button is released, use the method to stop drawing:\n\nFor the complete source code related to this use case, see the following file:\n\nCreat text and lines on the canvas\n\nTo create text and lines on a canvas, follow these steps:\n• To draw a line, use the method to assign the beginning point of the line, and the method to assign the end point of the line. The method draws the full line:\n• When adding text on the canvas, use various attributes and methods to define how the text looks and where it is located. The attribute defines the font style, and the attribute the vertical alignment of the text:\n• Use the attribute and the method to position the text in the assigned location:\n\nFor the complete source code related to this use case, see the following files:\n\nPerformance comparison of Canvas 2D and WebGL™ in mobile applications\n\nIn Web documents prior to HTML5, only simple image loading was supported. To create graphic animations, you had to use a separate plug-in. However, as the graphic-related APIs have become more standardized, you can now express graphics by using only JavaScript, without a separate plug-in.\n\nWhen developing Web applications that need to express complex graphics, such as games, the most important issue to consider is graphic performance. Currently, the HTML Canvas 2D Context API and WebGL™ are used to express graphic elements in many games. The following example illustrates how to create an effective graphic animation by comparing the performance of the renderers in the Canvas 2D Context API and WebGL™.\n\nTo compare the performance, 2 simple Web applications must be created, using the Canvas 2D Context API and WebGL™:\n• Create the applications with the following logic:\n• Render the loaded image in the random location of the canvas.\n• Use the method of the Timing control for script-based animations API (in mobile, wearable, and TV applications) to change the color of the loaded image, based on different times.\n• Create a logic that measures FPS (frames per second) in order to check the performance.\n• Execute the applications and measure the FPS.\n• Increase only the number of objects so that the same 1~N images, under the same conditions, are shown repeatedly based on 1~N.\n• Measure the FPS as the number of repeatedly shown objects increase.\n\nThe following figure shows the result of the test: As the number of objects increase, the performance of the Canvas 2D Context API rapidly decreases compared to WebGL™ (the result is subject to change according to the complexity of the application logic). As such, when expressing many graphic objects all differently, it is much more efficient to use WebGL™ than the Canvas 2D Context API.\n\nThere is one problem with using WebGL™; the ratio of mobile browsers supporting it is quite low compared to the Canvas 2D Context API, and even when it is supported, usually only partial features are included (support for 3D acceleration, reflection effect, and camera effect is particularly low). The following figure shows the support status of WebGL™ in computer (top) and mobile (bottom) browsers, as published in http://webglstats.com/ in June 2013.\n\nMany mobile browsers do not support WebGL™ or only partially support WebGL™. Even though Tizen supports WebGL™, it is recommended to use the Canvas 2D Context API for small numbers of 2D drawings, since the API is supported in most mobile browsers. However, for performance critical applications, use WebGL™ for faster 2D performance."
    },
    {
        "link": "https://webfx.com/blog/web-design/canvas-element",
        "document": "The HTML5 element has a unique history. Starting out as an Apple creation and dating back to 2004, was eventually added to the official W3C HTML5 spec, becoming one of the most interesting and exciting parts of HTML5. It is used by web designers all over the world. Unfortunately, this element takes a bit of work to understand and, unlike your usual run-of-the-mill HTML elements, requires more than just static markup and styling. This element is great for sites looking for a more responsive web design, like maybe a realtor.\n\nIn this guide, I hope to get you started on understanding the element and what kinds of things are required and expected in its associated code. This should help you get a firm fundamental understanding of in preparation for creating something interesting and powerful with this unique HTML5 element.\n\nI can’t possibly define the element better than the official W3C spec, so I’ll just quote part of that document here:\n\nI also like the way Wikipedia describes its usage:\n\nAs you can see already, this element has a bit of complexity to it. Let’s take it one step at a time, beginning with the markup. The markup for the element looks like this:\n\nSimilar to the element, has a width and height set in the markup to give it an actual size.\n\nAnd because requires scripting for its full capabilities, I’ve added an attribute that will allow us to target it using either JavaScript or a JavaScript web development library like jQuery or MooTools. Once you have this basic markup, you can use CSS to make the visible or, using CSS3 properties, move it around — the same as you would do with any other HTML element. You can add a border, padding, background color, margins, you can float the , and assign CSS properties to it just like any HTML5 element.\n\nSome Basic Scripting to Make It Work\n\nTo start drawing on a canvas, you need to first target it using the Document Object Model (DOM).\n\nSince you can include more than one element on any given page, this is where an ID attribute comes into play (in this case, our ID is ). Once the is targeted, the JavaScript method needs to be called. This method identifies the context of the targeted element, which means you will have access to the canvas drawing API.\n\nHere’s an example of code that draws an object on the canvas:\n\nAfter defining the element via the DOM (line 1), the context is defined (line 2), then a shape is drawn and colored (lines 3 and 4). The first two lines are more or less standard stuff, whereas the third and fourth lines consist of a few examples of custom code using the properties and methods available in the drawing API. The four values given above in the method represent the distance from the x axis, the distance from the y axis, the width, and the height (in that order).\n\nThe above code would generate a box like this: Having this rudimentary understanding of the element, here are some points of note:\n• Every element starts out blank, so it will not appear on the page until something is drawn on it or if it’s styled via CSS (e.g. giving it a border or giving it a background color).\n• Each element appears in the DOM\n• You can erase everything that is drawn on the by resetting the width and/or height of the element\n• The method “returns an object that exposes an API for drawing” (definition straight from the spec)\n• There are currently two kinds of contexts available: and ( is currently the more commonly used context)\n• The element is “resolution-dependent,” which means (unlike SVG) it will not always scale cleanly after rendering\n• The default color for any shape drawn is black\n• Canvas-drawn objects are given colors using RGBA or Hex values\n\nThe 2D context allows for the use of a number of different drawing methods and properties, each utilizing syntaxes familiar to experienced CSS and JavaScript developers. So don’t be intimidated, it’s pretty straightforward stuff. Here are some of the JavaScript methods associated with drawing rectangles:\n• : Draws a rectangle according to the given size and coordinate values and fills the object with whatever is defined in the fill style\n• : Clears the pixels inside the space defined by the given size and coordinate values\n• : Draws the rectangle using strokes or borders (apart from the fill) according to the given size and coordinate values; this is done using the determined stroke style\n\nSimilar to the concept behind drawing rectangles, you can draw straight lines using the and methods. These methods define, by means of x and y coordinates, the start and end points of the lines, or paths, that will be drawn. These methods, however, do not actually draw the visible lines; they prepare the for the actual stroking of the lines that will occur when you call the method.\n\nAssuming the markup remains the same (with the canvas sized at 400×400), the code above (lines 3-6) draws a diagonal line from the top left corner of the canvas (0, 0) to the bottom right corner (400, 400). The last line of code uses the aforementioned method to stroke the path that was prepared on lines 3 and 4. Line 5 has the optional method that can give the line a color, gradient, or pattern. If a stroke style is not declared, the line will be black by default. This is the line that is drawn by the code block above: Here are some further points to note about the drawing API:\n• Coordinates that define paths and shapes can have decimal values, and this is encouraged to ensure line widths in certain circumstances are represented accurately\n• To draw multiple paths in multiple stroke styles, you use the method for each line, then the method to end the path after it’s drawn\n• You can draw any Unicode character onto a element, utilizing the , , and attributes to style and align the characters\n• If you don’t use the typographic attributes on text, the text will display using CSS styles applied to the element\n\nIn step with what is now possible in CSS3 in most modern browsers, the drawing API allows you to fill your shapes and paths with two types of gradients. Here is an example showing a rectangle being filled with a linear gradient:\n\nOn line 3 above, the gradient is stored in memory and is given 4 arguments. The first two arguments are the x and y coordinates that determine the starting point of the gradient; the second two arguments are the x and y coordinates that determine the end point of the gradient.\n\nAfter the gradient is created (but not drawn yet), color stops are added (lines 4-5). Then the fill style is defined on the canvas context, and the gradient that is created on line 3 is added as the value of the fill (line 5). After line 5, everything is just stored in memory, waiting to be used on a shape or path.\n\nThe last line makes the gradient visible by creating a shape on which to place the gradient. This is what the gradient looks like: Here are some notes on gradients:\n• The position of the gradient is relative to the , not the shape (which seems a little odd at first)\n• To make a diagonal gradient across an entire shape, the coordinates of the gradient would be identical to the coordinates and size of the shape\n• The first and last color stops in a linear gradient are represented by 0 and 1, respectively; any additional color stops are represented by decimal values in between 0 and 1. Putting a color stop at 50% of the object, then, would be .5.\n• Radial gradients are created using the method, which takes 6 arguments; the first 3 arguments create a circle for the starting point, and the last 3 create a circle for the end point\n\nOther Methods and Properties Available\n\nWhat I’ve discussed so far are some of the methods and properties that are easier to deal with and understand. Canvas, however, has a much broader set of tools available in its drawing API. Here’s some of what’s available, with links to appropriate parts of the spec:\n\nIt’s strongly recommended that fallback content be used for non-supporting devices. Fallback content is included by putting them between the opening and closing tags. For example, you might have something like this:\n\nThis is a pretty simple example.\n\nIf, for whatever reason, is unavailable, the user will see the image instead. That image will not display if is supported.\n\nMozilla’s Developer Center has a great “skeleton” template for drawing elements. This is the template with some minor modifications.\n\nThe JavaScript of the template does a couple of things. First, it checks when the window has fully loaded, which means the DOM is ready to be worked on.\n\nThis isn’t very efficient because the DOM will be ready even before the entire window is loaded, so on heavier pages, our function will take longer than it should to execute. The better solution would be to use with the argument of , but this isn’t supported in Internet Explorer (which wouldn’t really matter until IE9). If you use a JavaScript web development library like jQuery, then they’ll usually have methods or functions to handle this for you (i.e.\n\n). Another way to make this more efficient is to use inline JavaScript on the element to call the function (as in ), but this uses obtrusive JavaScript and isn’t really a good practice. Secondly, we use feature detection instead of browser sniffing to see if is supported.\n\nWe do this with an if/else control structure. If is not null, then we can assume is supported and that it is ready to be worked on. Otherwise ( ) we can run some code in the event that is not supported (such as telling the user that the page requires a browser with support).\n\nFor CSS, we just draw a black border around the area of the elements to make it easier to see. Then, finally, the HTML just involves giving the element an ID, width, and height.\n\nIf you’re going to spend the time to create some sort of fallback content, then it would be good to know the extent of browser support for the element and its associated scripting. is supported in the following browsers and devices:\n\nUsing a third-party library called ExplorerCanvas, support is available in Internet Explorer 6 and up. All that’s required is to include a single JavaScript file on any page that uses the element. From my limited experience in running some example pages included with the ExploreCanvas library, IE’s rendering of elements is very slow and resource-heavy, so unfortunately this workaround is not very inviting.\n\nYou might think that it’s a little counterproductive and counterintuitive to create simple objects using such complex means.\n\nCanvas, however, should not be utilized for static object creation. Canvas is best used for drawing objects dynamically according to user input, or for updating the display of objects that are dependent on some kind of a dynamic feed of information (such as real-time stock market fluctuations visualized through a line graph).\n\nAlthough I’m not a huge fan of experimental techniques, it may be of value at this point to show what is possible with the element. Here are a few examples of apps and other experiments that do some interesting and downright cool stuff with HTML5 :\n\nA virtual fish tank in your browser using attractive fish built without any graphic files.\n\nIt has realistic fish movements and bubbles. Click on the tank to add as many fish as you want!\n\nAn experiment taking HTML5 to the next level. Each of the circle you see in the background is a Twitter user.\n\nClick on a circle and you’ll see more information about that user. HTML5 Canvas and Audio Experiment\n\nA little experiment that loads 100 tweets related to HTML5 and displays them using a JavaScript-based particle engine. Each particle represents a tweet — click on one of them and it will appear on the screen.\n\nThe international Billiards Tournament is being infiltrated by the terrorist organization CHALK.\n\nDo not let them win! Sink as many balls as possible before the timer runs out.\n\nThis demo is an implementation of a full 8-bit color cycling engine, rendered into a 32-bit HTML5 in real-time.\n\nThere are many color cycling scenes to choose from, with some ambient environmental soundtracks to match.\n\nA simple motorcycle game using and JavaScript. Use keyboard controls to do as many back flips and front flips as you can.\n\nFinally, here are some further articles, tutorials, and libraries that discuss or use the element:\n• Canvas Toolkit: A basic HTML5 drawing library for those familiar with the java.awt.Graphics class in Java.\n• The canvas element: discussed in Mark Pilgrim’s Dive Into HTML5\n• Processing.js: An open programming language for people who want to program images, animation, and interactions using the HTML5 canvas element\n• <canvas> text: A library that allows canvas’s text-drawing methods to work in non-supporting browsers\n• Canvas Demos: Home to applications, games, tools and tutorials that use the HTML5 element\n• An Introduction to the Canvas 2D API: Tutorial on HTML5 Doctor\n• Bouncing a Ball Around with HTML5 and JavaScript\n\nIf you know of any cool libraries, demos, or experiments that use the HTML5 canvas element, please let us know in the comments.\n• Bouncing a Ball Around with HTML5 and JavaScript\n• The Only HTML5 Resources You Need for Getting Up to Speed"
    }
]