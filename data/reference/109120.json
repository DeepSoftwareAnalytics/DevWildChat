[
    {
        "link": "https://stackoverflow.com/questions/68414810/jumping-moving-and-gravity-in-my-2d-javascript-game",
        "document": "Great effort thus far. Game dev can be a bit tricky in the beginning to get things look and feel like you want it. I modified your main class a bit and made the jump a bit smoother. You are not using dt (delta time) which makes it easier to handle jumping with gravity (not the only way to do it). And remember that gravity is a constant, if you set it to 0 it means we have nothing to pull the player back onto the ground. Gravity is always there and when we jump we counter it for a second or two.\n\nIf you want to read some more about this you can google on \"2D game physics + jumping\" or something similar. Here are some links that I found on the topic.\n\nI recommend the Game Development community on Stack Overflow for these questions too https://gamedev.stackexchange.com/\n\nFeel free to ask if you have further questions"
    },
    {
        "link": "https://sololearn.com/en/Discuss/174919/jumping-mechanic",
        "document": "I've been working on a platforming engine in JavaScript. Collisions and Physics are all calculated from scratch and lately I've been having issue with jumping. Normally, this would be fine for me, but this is the first time I've used my own form of collision detection and physics, (which engines such as unity will make simple for you) and this changes things up. So, I would like to know how you guys would implement a nice jumping mechanic (that also includes a groundcheck if you can!) The only variables you would need to know are y (player's y coordinate), gravity (force of gravity), and a spacebar variable that tracks whether or not the spacebar is being pressed. My overall physics function is being called once per frame with the engine test map running at 60 FPS. TL;DR I would like to see examples of jump code for a 2D platformer that uses standard gravity and y variables that triggers on space press. edit: I don't need physical code if you aren't too familiar with js. Describing in detail the recommended process will work fine as well!"
    },
    {
        "link": "https://gamedev.stackexchange.com/questions/43660/jump-handling-and-gravity",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/11335255/html5-canvas-object-collisions-and-physics",
        "document": "I'm working on a simple html5 platformer, building of a previous game but having trouble with collisions and physics. below is a sample of code regarding the floor and how it handles collisions. the full code is here. http://www.ambitiongames.co.uk/dev/game.php with the game being here http://www.ambitiongames.co.uk/dev/\n\nthe problem I'm having is the collisions are based on events grabbing which sometimes leaves the player in the floor not on it.\n\nalso, due to the way jumping and falling work there's no gravity, meaning a player can simply jump on a higher ledge and then walk off into the air.\n\nwhats the a good way to set up a permanent state of gravity ?\n\nwhats a good way to interact / collide with the floor or other objects ?"
    },
    {
        "link": "https://gamedev.stackexchange.com/questions/66978/how-can-i-implement-jumping-in-a-2d-game-using-bounding-box-collision",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/54299037/js-canvas-game-using-keypress-event-to-modify-speed-when-holding-shift-button",
        "document": "I am learning how to make a game with the canvas via JavaScript, and I have the arrow keys set to move a block on the canvas. I want to add a modifier in which while holding shift, the block moves twice as fast, and I cannot get my function to work properly when the shift key is pressed.\n\nAny suggestions/help would be much appreciated!"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code",
        "document": "The property represents a physical key on the keyboard (as opposed to the character generated by pressing the key). In other words, this property returns a value that isn't altered by keyboard layout or the state of the modifier keys. If the input device isn't a physical keyboard, but is instead a virtual keyboard or accessibility device, the returned value will be set by the browser to match as closely as possible to what would happen with a physical keyboard, to maximize compatibility between physical and virtual input devices. This property is useful when you want to handle keys based on their physical positions on the input device rather than the characters associated with those keys; this is especially common when writing code to handle input for games that simulate a gamepad-like environment using keys on the keyboard. Be aware, however, that you can't use the value reported by to determine the character generated by the keystroke, because the keycode's name may not match the actual character that's printed on the key or that's generated by the computer when the key is pressed. For example, the returned is for the key on a QWERTY layout keyboard, but the same value also represents the key on Dvorak keyboards and the key on AZERTY keyboards. That makes it impossible to use the value of to determine what the name of the key is to users if they're not using an anticipated keyboard layout. To determine what character corresponds with the key event, use the property instead.\n\nThis example establishes an event listener for events that handle keyboard input for a game that uses the typical \"WASD\" keyboard layout for steering forward, left, backward, and right. This will use the same four keys physically regardless of what the actual corresponding characters are, such as if the user is using an AZERTY keyboard. <p>Use the WASD (ZQSD on AZERTY) keys to move and steer.</p> <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" class=\"world\" tabindex=\"0\"> <polygon id=\"spaceship\" points=\"15,0 0,30 30,30\" /> </svg> The first section of the JavaScript code establishes some variables we'll be using. contains the size of the ship the player is moving around, for convenience. is used to track the position of the ship within the play field. is the number of pixels each keystroke moves the ship forward and backward, and is how many degrees of rotation the left and right steering controls apply per keystroke. is the current amount of rotation applied to the ship in degrees; it starts at 0Â° (pointing straight up). Finally, is set to refer to the element with the ID , which is the SVG polygon representing the ship the player controls. let shipSize = { width: 30, height: 30, }; let position = { x: 200, y: 200, }; let moveRate = 9; let turnRate = 5; let angle = 0; let spaceship = document.getElementById(\"spaceship\"); Next comes the function . This function takes as input the distance the ship is to be moved, where positive is a forward movement and negative is a backward movement. This function computes the new position of the ship given the distance moved and the current direction the ship is facing. It also handles ensuring that the ship wraps across the boundaries of the play field instead of vanishing. function updatePosition(offset) { let rad = angle * (Math.PI / 180); position.x += Math.sin(rad) * offset; position.y -= Math.cos(rad) * offset; if (position.x < 0) { position.x = 399; } else if (position.x > 399) { position.x = 0; } if (position.y < 0) { position.y = 399; } else if (position.y > 399) { position.y = 0; } } The function handles applying the rotation and position by using an SVG transform. function refresh() { let x = position.x - shipSize.width / 2; let y = position.y - shipSize.height / 2; let transform = `translate(${x} ${y}) rotate(${angle} 15 15) `; spaceship.setAttribute(\"transform\", transform); } refresh(); Finally, the method is used to start listening for events, acting on each key by updating the ship position and rotation angle, then calling to draw the ship at its new position and angle. window.addEventListener( \"keydown\", (event) => { if (event.defaultPrevented) { return; // Do nothing if event already handled } switch (event.code) { case \"KeyS\": case \"ArrowDown\": // Handle \"back\" updatePosition(-moveRate); break; case \"KeyW\": case \"ArrowUp\": // Handle \"forward\" updatePosition(moveRate); break; case \"KeyA\": case \"ArrowLeft\": // Handle \"turn left\" angle -= turnRate; break; case \"KeyD\": case \"ArrowRight\": // Handle \"turn right\" angle += turnRate; break; } refresh(); if (event.code !== \"Tab\") { // Consume the event so it doesn't get handled twice, // as long as the user isn't trying to move focus away event.preventDefault(); } }, true, ); Try it out To ensure that keystrokes go to the sample code, click or focus the black game play field below before pressing keys. There are several ways this code can be made better. Most real games would watch for events, start motion when that happens, and stop the motion when the corresponding occurs, instead of relying on key repeats. That would allow both smoother and faster movement, but would also allow the player to be moving and steering at the same time. Transitions or animations could be used to make the ship's movement smoother, too."
    },
    {
        "link": "https://restack.io/p/diy-audio-plugin-development-answer-javascript-canvas-keyboard-events",
        "document": "Explore how to handle keyboard events in JavaScript canvas for DIY audio plugin development."
    },
    {
        "link": "https://w3schools.com/jsref/api_canvas.asp",
        "document": "You access a element with the HTML DOM method .\n\nTo draw in the canvas you need to create a 2D context object:\n\nThe common way to draw on the canvas is to:\n\nThere are only 3 methods to draw directly on the canvas:\n\nThe canvas object also supports the standard properties and events.\n\nThe element is an HTML5 standard (2014).\n\nis supported in all modern browsers:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations",
        "document": "Since we're using JavaScript to control elements, it's also very easy to make (interactive) animations. In this chapter we will take a look at how to do some basic animations. Probably the biggest limitation is, that once a shape gets drawn, it stays that way. If we need to move it we have to redraw it and everything that was drawn before it. It takes a lot of time to redraw complex frames and the performance depends highly on the speed of the computer it's running on.\n\nShapes are drawn to the canvas by using the canvas methods directly or by calling custom functions. In normal circumstances, we only see these results appear on the canvas when the script finishes executing. For instance, it isn't possible to do an animation from within a loop. That means we need a way to execute our drawing functions over a period of time. There are two ways to control an animation like this.\n\nFirst there's the , , and functions, which can be used to call a specific function over a set period of time. Starts repeatedly executing the function specified by every milliseconds. Executes the function specified by in milliseconds. Tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. If you don't want any user interaction you can use the function, which repeatedly executes the supplied code. If we wanted to make a game, we could use keyboard or mouse events to control the animation and use . By setting listeners using , we catch any user interaction and execute our animation functions. Note: In the examples below, we'll use the method to control the animation. The method provides a smoother and more efficient way for animating by calling the animation frame when the system is ready to paint the frame. The number of callbacks is usually 60 times per second and may be reduced to a lower rate when running in background tabs. For more information about the animation loop, especially for games, see the article Anatomy of a video game in our Game development zone."
    }
]