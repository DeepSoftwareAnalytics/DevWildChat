[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Text_styling/Fundamentals",
        "document": "What is involved in styling text in CSS? Text inside an element is laid out inside the element's content box. It starts at the top left of the content area (or the top right, in the case of RTL language content), and flows towards the end of the line. Once it reaches the end, it goes down to the next line and flows to the end again. This pattern repeats until all the content has been placed in the box. Text content effectively behaves like a series of inline elements, being laid out on lines adjacent to one another, and not creating line breaks until the end of the line is reached, or unless you force a line break manually using the element. Note: If the above paragraph leaves you feeling confused, then no matter — go back and review our Box model article to brush up on the box model theory before carrying on. The CSS properties used to style text generally fall into two categories, which we'll look at separately in this article:\n• Font styles: Properties that affect a text's font, e.g., which font gets applied, its size, and whether it's bold, italic, etc.\n• Text layout styles: Properties that affect the spacing and other layout features of the text, allowing manipulation of, for example, the space between lines and letters, and how the text is aligned within the content box. Note: Bear in mind that the text inside an element is all affected as one single entity. You can't select and style subsections of text unless you wrap them in an appropriate element (such as a or ), or use a text-specific pseudo-element like (selects the first letter of an element's text), (selects the first line of an element's text), or (selects the text currently highlighted by the cursor).\n\nThe property sets the color of the foreground content of the selected elements, which is usually the text, but can also include a couple of other things, such as an underline or overline placed on text using the property. can accept any CSS color unit, for example: This will cause the paragraphs to become red, rather than the standard browser default of black, like so: <h1>Tommy the cat</h1> <p>Well I remember it as though it were a meal ago…</p> <p> Said Tommy the Cat as he reeled back to clear whatever foreign matter may have nestled its way into his mighty throat. Many a fat alley rat had met its demise while staring point blank down the cavernous barrel of this awesome prowling machine. Truly a wonder of nature this urban predator — Tommy the cat had many a story to tell. But it was a rare occasion such as this that he did. </p>\n\nTo set a different font for your text, you use the property — this allows you to specify a font (or list of fonts) for the browser to apply to the selected elements. The browser will only apply a font if it is available on the machine the website is being accessed on; if not, it will just use a browser default font. A simple example looks like so: This would make all paragraphs on a page adopt the arial font, which is found on any computer. Speaking of font availability, there are only a certain number of fonts that are generally available across all systems and can therefore be used without much worry. These are the so-called web safe fonts. Most of the time, as web developers we want to have more specific control over the fonts used to display our text content. The problem is to find a way to know which font is available on the computer used to see our web pages. There is no way to know this in every case, but the web safe fonts are known to be available on nearly all instances of the most used operating systems (Windows, macOS, the most common Linux distributions, Android, and iOS). The list of actual web safe fonts will change as operating systems evolve, but it's reasonable to consider the following fonts web safe, at least for now (many of them have been popularized thanks to the Microsoft Core fonts for the Web initiative in the late 90s and early 2000s): It's often considered best practice to also add Helvetica as a preferred alternative to Arial as, although their font faces are almost identical, Helvetica is considered to have a nicer shape, even if Arial is more broadly available. Some OSes have an alternative (possibly older) version of the Courier New font called Courier. It's considered best practice to use both with Courier New as the preferred alternative. Some OSes have an alternative (possibly older) version of the Times New Roman font called Times. It's considered best practice to use both with Times New Roman as the preferred alternative. You should be careful with using this font — it isn't widely available on mobile OSes. Note: Among various resources, the cssfontstack.com website maintains a list of web safe fonts available on Windows and macOS operating systems, which can help you make your decision about what you consider safe for your usage. Note: There is a way to download a custom font along with a webpage, to allow you to customize your font usage in any way you want: web fonts. This is a little bit more complex, and we will discuss it in a separate article later on in the module. CSS defines five generic names for fonts: , , , , and . These are very generic and the exact font face used from these generic names can vary between each browser and each operating system that they are displayed on. It represents a worst case scenario where the browser will try its best to provide a font that looks appropriate. , , and are quite predictable and should provide something reasonable. On the other hand, and are less predictable and we recommend using them very carefully, testing as you go. The five names are defined as follows: Fonts that have serifs (the flourishes and other small details you see at the ends of the strokes in some typefaces). Fonts where every character has the same width, typically used in code listings. Fonts that are intended to emulate handwriting, with flowing, connected strokes. Fonts that are intended to be decorative. Since you can't guarantee the availability of the fonts you want to use on your webpages (even a web font could fail for some reason), you can supply a font stack so that the browser has multiple fonts it can choose from. This involves a value consisting of multiple font names separated by commas, e.g., In such a case, the browser starts at the beginning of the list and looks to see if that font is available on the machine. If it is, it applies that font to the selected elements. If not, it moves on to the next font, and so on. It is a good idea to provide a suitable generic font name at the end of the stack so that if none of the listed fonts are available, the browser can at least provide something approximately suitable. To emphasize this point, paragraphs are given the browser's default serif font if no other option is available — which is usually Times New Roman — this is no good for a sans-serif font! Note: While you can use font family names that contain a space, such as , without quoting the name, to avoid mistakes in escaping, it is recommended to quote font family names that contain white space, digits, or punctuation characters other than hyphens. Warning: Any font family name which could be misinterpreted as a generic family name or a CSS-wide keyword must be quoted. While the font-family names can be included as a or a , font family names that happen to be the same as a CSS-wide property value, like , or , or CSS have the same name as one to the generic font family names, like or , must be included as a quoted string. Otherwise, the font family name will be interpreted as being the equivalent CSS keyword or generic family name. When used as keywords, the generic font family names — , , , , and — and the global CSS keywords MUST NOT be quoted, as strings are not interpreted as CSS keywords. Let's add to our previous example, giving the paragraphs a sans-serif font: This gives us the following result: <h1>Tommy the cat</h1> <p>Well I remember it as though it were a meal ago…</p> <p> Said Tommy the Cat as he reeled back to clear whatever foreign matter may have nestled its way into his mighty throat. Many a fat alley rat had met its demise while staring point blank down the cavernous barrel of this awesome prowling machine. Truly a wonder of nature this urban predator — Tommy the cat had many a story to tell. But it was a rare occasion such as this that he did. </p>\n\nIn our previous module's CSS values and units article, we reviewed length and size units. Font size (set with the property) can take values measured in most of these units (and others, such as percentages); however, the most common units you'll use to size text are:\n• (pixels): The number of pixels high you want the text to be. This is an absolute unit — it results in the same final computed value for the font on the page in pretty much any situation.\n• s: 1 is equal to the font size set on the parent element of the current element we are styling (more specifically, the width of a capital letter M contained inside the parent element). This can become tricky to work out if you have a lot of nested elements with different font sizes set, but it is doable, as you'll see below. Why bother? It is quite natural once you get used to it, and you can use to size everything, not just text. You can have an entire website sized using , which makes maintenance easy.\n• s: These work just like , except that 1 is equal to the font size set on the root element of the document (i.e. ), not the parent element. This makes doing the maths to work out your font sizes much easier. The of an element is inherited from that element's parent element. This all starts with the root element of the entire document — — the standard of which is set to across browsers. Any paragraph (or another element that doesn't have a different size set by the browser) inside the root element will have a final size of . Other elements may have different default sizes. For example, an h1 element has a size of set by default, so it will have a final size of . Things become more tricky when you start altering the font size of nested elements. For example, if you had an element in your page, and set its to 1.5 (which would compute to 24 final size), and then wanted the paragraphs inside the elements to have a computed font size of 20 , what value would you use? <!-- document base font-size is 16px --> <article> <!-- If my font-size is 1.5em --> <p>My paragraph</p> <!-- How do I compute to 20px font-size? --> </article> You would need to set its value to 20/24, or 0.83333333 . The maths can be complicated, so you need to be careful about how you style things. It is best to use where you can to keep things simple, and avoid setting the of container elements where possible.\n\nThe property sets the height of each line of text. This property can not only take most length and size units, but can also take a unitless value, which acts as a multiplier and is generally considered the best option. With a unitless value, the gets multiplied and results in the . Body text generally looks nicer and is easier to read when the lines are spaced apart. The recommended line height is around 1.5 – 2 (double spaced). To set our lines of text to 1.6 times the height of the font, we'd use: Applying this to the elements in our example would give us this result: <h1>Tommy the cat</h1> <p>Well I remember it as though it were a meal ago…</p> <p> Said Tommy the Cat as he reeled back to clear whatever foreign matter may have nestled its way into his mighty throat. Many a fat alley rat had met its demise while staring point blank down the cavernous barrel of this awesome prowling machine. Truly a wonder of nature this urban predator — Tommy the cat had many a story to tell. But it was a rare occasion such as this that he did. </p>"
    },
    {
        "link": "https://geeksforgeeks.org/css-text-formatting",
        "document": "CSS Text Formatting allows you to control the visual presentation of text on a webpage. From changing fonts to adjusting spacing and alignment, CSS provides powerful properties to enhance the readability and aesthetic of text.\n• None It helps in creating visually appealing text and improving the user experience.\n• None Various text-related properties can be combined to achieve unique text styles and layouts.\n• Font Size: The text size is set to 40px, making it large and prominent.\n• Font Weight: The text is bold, making it stand out more.\n• Color: The text color is set to a green shade (#4CAF50), giving it a fresh look.\n• Text Transform: The text is converted to uppercase, so the letters appear in capital letters.\n• Font Family: The text uses Arial, which is a sans-serif font, for a clean, modern appearance.\n\nThese are the following text formatting properties.\n\nThis property help’s to set the color of a text on your web page which is inside an element or inside the body tag if no element is parenting it.\n\nThis property aligns the text in an element at a specific position. Also it aligns the text on basis of it’s writing direction with properties like start and end it means to the start and end of the container in which it is written.\n\nThis property in CSS understands the last line as the line after a natural line break sequence. Suppose if a person is writing a paragraph this property will consider the last line as the line after the natural line break due to page width end as the last line of the paragraph.\n\nThis property basically help’s to add a underline to the text written in your element , In this their are various type’s of decoration context’s that you can apply to your text.\n\nThis property help’s to add a color to the underline that is made over or under a text with the use of text-decoration property.\n\nThis property help’s to set the type of line used in decoration of any text.\n\nThis property help’s to set the preview of the line used for a particular text.\n\nThis property in CSS add ‘s an indentation to the first line written in an element from the starting of that particular element.\n\nThis property in CSS specifies the kind of justification that has to be made to a text on basis of inter-word space or inter-character space.\n\nThis is a CSS text property with the help of which you can decide that how you want to show the begining of the hidden text in your document.\n\nThis is a property in CSS with the help of which a user has the control over the casing of the text in your element.\n\nThis is a property which help’s the user to add a shadow to the text in your element.\n\nThis is a tag in html that overrides the content written inside it to a specific direction using the dir attribute with it.\n\nHow do I change the font of text using CSS text formatting?\n\nHow do I justify text within a block using CSS text formatting?\n\nHow do I style the first letter or line of a text block using CSS text formatting?"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-style-text-elements-with-font-size-and-color-in-css",
        "document": "The author selected the Diversity in Tech Fund to receive a donation as part of the Write for DOnations program.\n\nCascading Style Sheets (CSS) is a language designed for two disciplines: that of the programmer and that of the designer. Working with text on the web is one of the clearest examples of this broad accessibility to the language. Styling text uses concepts from the graphic design world but adjusts naming conventions to be more broadly implemented.\n\nIn this tutorial you will learn about web typography, the art of styling text. Similar to working with a printing press, you will set out your content, apply visual style to help communicate the content, and adjust the content for legibility and emphasis. The intent with styling text on the web is to create a visual hierarchy through color, size, shape, and space. This way, headings stand out from sub-headings, which stand out from paragraphs. These concepts help make text more readable and scannable for readers.\n\nYou will start the tutorial by writing the HTML structure, which will consist of placeholder content from Cupcake Ipsum. You will work with different heading levels ( - ) and content types ( , , and ) to apply multiple text-related CSS properties, including , , and . You will also load custom fonts from Google Fonts, a third-party font-hosting service. Each step of this tutorial will introduce a new concept or set of properties to apply to the content. By the end you will have a custom-styled web page.\n• An HTML file saved on your local machine as that you can access from your text editor and web browser of choice. To get started, check out our How To Set Up Your HTML Project tutorial, and follow How To Use and Understand HTML Elements for instructions on how to view your HTML in your browser. If you’re new to HTML, try out the How To Build a Website in HTML series.\n\nSetting Up the Example HTML\n\nIn this first step you will set up the HTML that you will style throughout the rest of the tutorial. The purpose of the HTML in this tutorial is to provide various elements and situations for you to practice styling.\n\nOpen up the file using a text editor, such as nano, Vim, or Visual Studio Code. Add the following boilerplate HTML to give the file necessary baseline code:\n\nThe element already loads in the file, so be sure to have that file ready as well.\n\nNext, you need some content to style. When creating text styles, often a project needs styles before the content is ready. In the graphic design world, placeholder content is used for this purpose. Designers will often use Latin text as a placeholder, known as Lorem Ipsum. There are many modern renditions of this placeholder text, including Cupcake Ipsum. This will be the reference copy used throughout the HTML.\n\nTo start, the HTML needs to depict hierarchy, a clear distinction and order of content. In HTML that is done with heading tags, which span from , the top most heading, through , the bottom most heading. The browser default styles for the headings define the visual hierarchy by size alone, with the element’s default being significantly larger than that of the . Throughout this tutorial you will use other principles of design, such as color and space, to provide visual hierarchy to the content.\n\nTo create this hierarchical content, you will write out various headings and fill each heading with a few words from Cupcake Ipsum within the tags in . You will follow proper HTML semantics, which provide accurate meaning to the browser.\n• There will only be one element on the page. This will usually be the title.\n• Subsequent heading levels will only be one lesser, equal, or any greater level. For example, the only heading level that comes after an will be either , another , or an , but never an or .\n\nWith the rules of heading semantics, add the following highlighted HTML to :\n\nNext, you need some content to fill in space between each heading. These will be paragraphs of text designated by the element to hold each paragraph. Use Cupcake Ipsum again to generate this content and place the paragraphs throughout the page.\n\nAdd the highlighted portions of the following code block. This tutorial will use this format for code blocks throughout:\n\nFinally, add in , , and a combination of the two elements together. This will provide examples of phrases that are emphasized in the content:\n\nNow that you have the HTML written, save and open it in your browser to see what the page looks like with the browser default styles:\n\nThe text ranges in sizes across all the elements, with the default and styles being smaller than the text.\n\nIn this step you set up the HTML content that will be styled throughout the rest of the tutorial. Next, you will work with the property, learn about the font stack, a list of fonts that the browser can use, and apply fonts to different elements.\n\nNext, you will work with the CSS property and load an external font file from the Google Fonts service. The name of this property derives from a typography term that describes the collection of fonts and the variations of that font, including bold and italic versions. A font can have many of these variations, but can all be part of the same , with those variations called with and properties.\n\nTo begin working with , it is helpful to understand the particulars about its value options. The value of a property is a list of fonts called a font stack. The font stack works as a fallback system. Consider the following property value:\n\nThe browser is first going to determine if Helvetica Neue is available for it to use, either as a font that is installed on the computer or as one provided by a website. If the browser doesn’t find a font called Helvetica Neue, then it goes down the list to Helvetica and then to Arial. If the browser is unable to find any of those fonts, then the last font in the list, , will use whatever the browser has set as its default font for a style font.\n\nCreate a file called in the same directory as . Open it up in your text editor and add a default font for the page:\n\nIn this code, you start with a type selector with a property. Next, for the font stack you start with , which will be available on iOS and macOS browsers. is in quotes because the font name is two words. The next font is for Windows browsers. Be sure to put a comma between each font declaration. To provide a more generic font fallback, you then use , which has been widely available on computers since the early 2000s. Finally, since all these fonts are classified as sans serif fonts, you add the browser default as the final font option in the font stack.\n\nSave , then open up in your browser. You will find a new font in place of the browser default font for the content. If you are on an Apple operating system, Avenir Next will render in the browser. If you are on Windows, Calibri will render instead. The following image is what this font stack looks like on MacOS:\n\nIn this section you used the property to set up a default font stack for the web page. You also set up a property that applies specifically to heading text content. In the next section you will use the Google Fonts service to load a custom font file and use it on the page.\n\nNow that you have used the property with fonts already installed on your computer, it is time to load fonts from an external service. This will widen the range of fonts you can use to style your text. In this section, you will work with the Google Fonts service to load and use a font on the web page.\n\nBrowsers have the ability to load any font, so long as it is provided the appropriate font file format for that browser. A font service, such as Google Fonts, alleviates the work of defining and hosting fonts by providing both the CSS and font files needed to load the font. There are many other services like Google Fonts, but Google Fonts hosts royalty and open source fonts and offers the service free of charge.\n\nTo get started, open in you browser.\n\nThere are many different fonts you can choose from in Google Fonts. This tutorial will use two: Public Sans and Quicksand.\n\nFrom the search field on Google Fonts, search for . When the font card shows up from the search result, a preview of the font is displayed. Click the card to go to the page for the font:\n\nThe Public Sans font page will list all the variations of the font. These are known as weights, which range from 100 to 900. For the purposes of this tutorial, find the Regular (400) and the Bold (700) styles and press the + Select this style button next to each style variant, as well as their italic style.\n\nOnce you select the first style, a selected family tool will slide in. This tool will provide you with the HTML and CSS needed to use these fonts:\n\nSelect the method to load the fonts in the browser and copy the provided HTML. Open and add the code into the element after the loading . Keep Google Fonts open, as you will return to it a couple more times:\n\nAt this point, reloading in your browser won’t have any visual changes. The browser is loading the font, but the font needs to be added to the font stack to apply the font to the content.\n\nReturn to Google Fonts to find the CSS rule that loads Public Sans. Google Fonts provides a font stack of Public Sans and the browser default font with . Since you already have a font stack set up with fallback fonts, all that you need to take from Google Fonts’ example is the name to reference Public Sans.\n\nUsing your existing font stack in , replace and with :\n\nNow that the base font stack has been declared all fonts on the page are now Public Sans.\n\nOne common design practice to bring more attention to headings is to use a different font for the headings than for the main text. To apply this to your own HTML, return to Google Fonts and do a search for “Quicksand.” This will be the heading, or display font, for the through elements on the page.\n\nOnce you have found Quicksand, select the font card and add the Semi-bold (600) and Bold (700) font weights to the selected fonts alongside Public Sans. Google Fonts will provide a new URL to load all the selected fonts and variants. Swap out the previous value for the new link in your file:\n\nNow that Quicksand is set to load in the browser, you need to apply it to the heading tags. You will accomplish this by adding a comma-separated list of CSS selectors, called a group selector, to your file. In this case, use the font stack provided by Google Fonts with Quicksand followed by the browser default font:\n\nSave your changes to and return to your browser to reload . Feel free to close Google Fonts at this point. When the browser loads, you will now find two fonts displayed. Quicksand is now on all the headings and Public Sans is on all other content, including the bold and italic content.\n\nIn this section you loaded two fonts from the Google Fonts service and added those fonts to your existing font stacks. The next section will look at using the font variants to specify when and how to apply bold and italic to a font.\n\nIn this section you will use the and properties to adjust how a font appears. There are many reasons to use these variations, such as to emphasize content, as part of a citation style guide, and to provide visual variation.\n\nNow that you are loading in custom fonts from Google Fonts, you can start to fine-tune the characteristics of the text. Starting with the property, you can change how thick or thin the font is displayed. The property has two common values: and . The value is the default for most text in a browser. The value is the default for headings and elements. But for this tutorial, you will need to use the numeric values instead of the name and values.\n\nNumeric values depend on the font that you are loading. When you added the Public Sans font from Google Fonts, you selected the Regular (400) and the Bold (700) weights. The numbers in parenthesis coincide with the values needed to reference and load that font. Additionally, the value of is the numerical equivalent of , like is the numerical equivalent of . Text that uses Public Sans, which is all but the headings, will automatically use these weights.\n\nAlternatively, the Quicksand font selections included the Semi-bold (600) and Bold (700) font weights. The value does not have a numerical counterpart and needs to be defined using a numerical value.\n\nYou will start by setting the of all headings to the semi-bold variant of Quicksand. In your file, locate the group selector with all the heading values and add a declaration to the selector block:\n\nOnce you have made this change, save and reload in your browser. You will see a slight thinning of the headings as they change from the value of Quicksand to the value.\n\nNow that you have set all the heading elements to use the Quicksand weight, there are still places to use the variation of the font. To start, create an type selector in your file and add in the selector block:\n\nThis change will cause the to stand out a bit as it is now bolder than the other headings. As the tutorial progresses, you will make additional changes to the styles to make it stand out but still maintain its hierarchical order.\n\nSave your changes to and then create a new selector that targets text that is wrapped in both and tags. In the case of the styles written so far, this kind of text will get the bold italic variant of Public Sans. Instead, set the styles to use the Quicksand font stack.\n\nSince the HTML to get a bold italic style is and , you will need to create a combinator group selector in your file and then apply the property with as the value:\n\nOnce you have made this addition to your file, save it and then reload in your browser. The text that was bold italic now is using Quicksand and is italic, even though Google Fonts is not providing an italic version of the font. This is called a faux italic, where the browser understands that this content should be italic by default, but since an italic variation is not defined is instead artificially slanting the text.\n\nThe property for handling whether text is italicized or not is . The value options for the property are and . Instead of using the faux bold, change the styles for this selector to have no italicization. Add to the group selector in your file the property with a value of :\n\nThis will change the instance of bold italic text to be only Quicksand bold.\n\nSave your changes to and reload in your browser to see the change:\n\nYou used the and properties in this section to apply variations of the Quicksand font loaded from Google Fonts. Next, you will use the property to create larger, more legible text with clearer hierarchy amongst the headings.\n\nIn this section you will use the property to apply different font sizes to the content throughout the page. The size of text is an important factor in communicating information. Well-sized text is easier to read and appropriately sized headings help convey hierarchy for easier skimming of the information. You will change the of all the elements you created in to create a document that is more readable.\n\nStart by setting a default on the element. The default browser is , but it can be helpful for increased legibility for many fonts to be just a little bigger. Open your file and add a to the element:\n\nOpen in your browser or refresh the page. The change on the element changed all the fonts on the page, increasing their size.\n\nThe default font sizes for elements are relatively sized based on the parent element, in this case the element, using a percent value for the font size. Using the formula will give you a percentage value that is relative to the base font size set on the element.\n\nTo give this formula a try, you will work with setting a target for the element to be . Using the formula, the target size is and the base size is , so the formula for this will be , which comes to . This means that the intended size for the will be 2.5 times the size of the base .\n\nReturn to you file and add an element selector for and add a property and value to set the font size:\n\nNow that you have set a relative font size for the element, apply the same formula to the remaining heading elements. With each you can choose to either round, or keep the full decimal values. It can also be helpful to leave comments explaining the target size or even the formula.\n\nOpen up your file and start by adding a comment after the property explaining the rendered size. Then for each heading apply the formula so the has a equivalent of , the equal to , to , the to , and lastly the to the base size of . The default size of the element is smaller than the base size, so setting it to will ensure that it does not go below the base value:\n\nReturn to your browser and refresh . All the headings will increase their based relatively on the default set on the element. The following image shows how this change will render in a browser:\n\nWith this step you used the property to change the size of the text on the web page. You used the design concept of size to give hierarchy to the content beyond the default browser styles. In the next step, you will take the design of the content further with the property.\n\nUsing the Property to Distinguish Text\n\nThe focus of the next section is the CSS property, using color to differentiate order and add meaning to the content. Color is one of the most common design considerations, in particular with defining different meaning to text. In this section you will use named colors to set your text color. Named colors are a collection of predefined colors that has grown over the years; they match to other web color values, such as hexadecimal color codes. This section will use the named color list found on Wikipedia’s page on Web colors. You may want to keep the Wikipedia Web colors page open in your browser for reference.\n\nLike you did with , you are going to set a default color to the whole document. This will affect all content on the page, as is an inherited value for most elements. It is important to keep color contrast in mind, as it helps legibility, especially when it comes to making the web accessible to all levels of vision. Since the will remain the default white, using bold, darker colors is a good guide. If you wish to learn more about designing with accessible color contrast, watch this short video series on the topic.\n\nTo begin using , return to your file in your text editor. As you did with the section, find the selector and add a property. The default color for text in most browsers is black. For accessible color contrast, it is important to keep the base color dark when on a light background. Use the named color , which is only camel case here for legibility, but can be all lowercase if you wish:\n\nSave your file and refresh in your browser. The color of the content will change from black to a dark blue-green:\n\nNow that the base color is set, you can start using other colors to provide more visual hierarchy. Start with the selector in your file and add a property with a value of :\n\nSave your file, return to your browser, and refresh . The text now has a deep purple color instead of the default dark blue-green color:\n\nNext, you will apply colors to the other headings. Quicksand is a fun, rounded font and you’re using the quirky Cupcake Ipsum sample content, so create a bright and peppy color scheme by using a different color on each heading. Return to and, for each of the heading selectors, add a property and color value. For the element use , for the use , for the add , for the use , then finally for the use :\n\nOnce you have added the properties to the headings, save and return to the browser to refresh . Your content is now full of color:\n\nWith the property you learned about web color named values and how you can use color to provide meaning. You also used the property to give the content personality by adding a colorful palette to the content of the web page.\n\nWorking with text is a major part of writing CSS for the web. Text conveys meaning not only in what it says, but also in how it looks. Using the tools you have learned with the , , , , and properties, you can manipulate text to help provide meaningful context to your website. These properties are not limited to the headings covered in this article: they can be used with any element containing text.\n\nIf you would like to read more CSS tutorials, check out our CSS topic page."
    },
    {
        "link": "https://w3schools.com/css/css_text.asp",
        "document": "CSS has a lot of properties for formatting text.\n\nThis text is styled with some of the text formatting properties. The heading uses the text-align, text-transform, and color properties. The paragraph is indented, aligned, and the space between characters is specified. The underline is removed from this colored \"Try it Yourself\" link."
    },
    {
        "link": "https://medium.com/@aicontentpace/css-typography-best-practices-07d549f88d4f",
        "document": "CSS typography is the art and science of styling text on web pages. While it is easy to overlook, typography plays a critical role in the overall user experience. In this article, you will explore the best practices for CSS typography to enhance readability, visual appeal, and accessibility.\n\nBefore diving into CSS best practices, it’s essential to understand the basic principles of typography. The core elements of typography include typefaces, font sizes, line heights, and letter spacing.\n\nChoosing the right typeface is crucial. Different typefaces convey different tones and personalities. Serif typefaces, such as Times New Roman, often convey a more formal and professional tone. Sans-serif typefaces, like Arial, tend to be viewed as modern and clean. Make sure to select a typeface that aligns with your brand’s voice and purpose.\n\nFont size plays a significant role in readability. Titles and headings should be more prominent, while body text should be easily readable without straining. Using a modular scale for font sizes can create a harmonious and visually appealing hierarchy.\n\nLine height, or leading, determines the space between lines of text. Proper line height improves readability by preventing text from appearing too crowded or too spaced apart. A good rule of thumb is to set the line height to 1.5 times the font size.\n\nLetter spacing, or tracking, refers to the space between characters. Appropriate letter spacing improves legibility, especially for uppercase text and headings. Avoid excessive tracking, as it can make text hard to read.\n\nWeb-safe fonts ensure that your text displays consistently across different devices and browsers. These fonts are pre-installed on most operating systems. Examples include Arial, Verdana, and Georgia. While it’s tempting to use custom fonts, web-safe fonts provide a reliable fallback in case custom fonts fail to load.\n\nGoogle Fonts is a popular online service that offers a vast library of open-source fonts. It allows you to embed custom fonts into your web pages with ease. When using Google Fonts, make sure to load only the font weights and styles you need to optimize page performance.\n\nReadability is a cornerstone of effective typography. Your text should be easy to read across different devices and screen sizes. There are several practices you can adopt to improve readability.\n\nHigh contrast between text and background colors is crucial for readability. Ensure that your text stands out against the background. Use tools like the WebAIM Color Contrast Checker to verify that your color combinations meet accessibility standards.\n\nProper text alignment enhances readability and aesthetics. Left-aligned text is the most readable for left-to-right languages.\n\nCenter-aligned text can be used for headings or short pieces of text, but avoid using it for long paragraphs. Justified text can create uneven spacing and “rivers” of white space, so use it sparingly.\n\nEffective use of white space, or negative space, improves readability and visual appeal. White space helps separate different sections of text and directs the reader’s focus. Avoid cramming too much text into a small area; give your content room to breathe.\n\nWith the proliferation of devices with varying screen sizes, responsive typography has become essential. Your text should adapt dynamically to different screen resolutions and orientations.\n\nFluid typography scales text size based on the viewport size, ensuring readability on all devices. CSS functions like , , and make it possible to create fluid text sizes. For example, you can use to make the font size responsive.\n\nUsing relative units like and ensures consistent scaling across different elements. units are relative to the root font size, while units are relative to the font size of the parent element. These units provide flexibility in designing responsive web pages.\n\nCSS offers advanced features that enable you to create sophisticated and beautiful typography. These features include custom web fonts, text shadows, and advanced properties like hyphenation and ligatures.\n\nHosting custom web fonts enhances brand identity and creativity. Services like Adobe Fonts and Font Squirrel offer extensive libraries of custom fonts. Always provide a fallback font stack to ensure that your text displays correctly if the custom font fails to load.\n\nAdd depth and dimension to your text with CSS text shadows. Use to create subtle shadows for a more polished look. However, use them sparingly to maintain readability.\n\nCSS properties like and allow you to control hyphenation and ligatures within text. Hyphenation can prevent awkward breaks in long words, while ligatures enhance the aesthetic of the text by connecting certain character pairs.\n\nAccessibility ensures your content is usable by people with disabilities. Good typography is key to an inclusive design. There are several practices you can follow to make your text more accessible.\n\nUtilizing semantic HTML elements enhances the context and significance of your content. Incorporating elements such as <h1> for headings, <p> for paragraphs, and </p><blockquote> for quotes not only improves accessibility but also boosts SEO performance. </blockquote></h1>.\n\nARIA roles and attributes enhance the accessibility of your web pages by providing additional information to assistive technologies. Use ARIA roles, such as and , to create meaningful relationships between text and interactive elements.\n\nInclude skip links to allow users to bypass repetitive navigation and go directly to the main content. These links improve the user experience for keyboard and screen reader users.\n\nEnsure that your text remains readable at different zoom levels. Users with low vision often zoom in to read content, so make sure your typography scales appropriately at higher zoom levels.\n\nCSS Grid and Flexbox are powerful layout techniques that allow you to arrange text and other elements efficiently. These techniques provide more control over the positioning and alignment of text.\n\nCSS Grid enables you to create complex layouts with rows and columns. Use the and properties to define the grid structure. The grid system makes it easy to align text and other elements within the layout.\n\nFlexbox simplifies the alignment and distribution of space within a container. Use the property to create flexible layouts. Flexbox is particularly useful for creating responsive designs, as it allows elements to resize and reposition based on the available space.\n\nOptimizing typography performance ensures a smooth user experience. Several techniques can help you achieve this, including font loading strategies and minimizing CSS file size.\n\nEfficient font loading can drastically improve page speed. Use with values such as , , or to control how fonts are loaded and displayed. This practice prevents invisible text and improves user experience.\n\nReduce the size of your CSS files by removing unnecessary styles and properties. Tools like CSS Nano and Purge CSS help you identify and eliminate unused CSS, resulting in faster load times.\n\nTesting and debugging are crucial steps in ensuring that your typography performs well across all devices and browsers. Several tools and techniques can help you identify and resolve issues.\n\nEnsure that your typography renders correctly across different browsers by conducting cross-browser testing. Tools like Browser Stack and Sauce Labs allow you to test your web pages on multiple browsers and devices.\n\nVerify that your typography is responsive and looks good on devices of various sizes. Use the browser’s developer tools to toggle between different device views and adjust your CSS accordingly.\n\nTypography is a constantly evolving field. Stay updated with the latest trends and best practices to keep your typography fresh and effective.\n\nSubscribe to industry blogs, follow CSS experts on social media, and participate in web design communities to stay informed about new developments. Staying current allows you to adopt new techniques and improve your skills continuously.\n\nExperiment with different typography styles and techniques to discover what works best for your projects. Don’t be afraid to iterate and refine your typography. Continuous improvement leads to better results over time.\n\nMastering CSS typography best practices enhances the readability, accessibility, and visual appeal of your web pages.\n\nBy understanding the fundamentals, implementing responsive techniques, and prioritizing accessibility, you can create effective and engaging typography. Remember to stay informed, experiment, and continuously improve your skills.\n\nThank you for reading! If you found this article helpful, please clap, leave a comment, and subscribe to my Medium newsletter for more updates on web design and CSS best practices."
    },
    {
        "link": "https://geeksforgeeks.org/decorating-your-website-for-christmas-and-new-year-html-css-code-snippets",
        "document": "Decorating Your Website for Christmas and New Year - HTML & CSS Code Snippets\n\nThis guide offers simple HTML and CSS snippets to add festive decorations like Christmas trees, gift boxes, and snowfall animations to your website, bringing holiday cheer for Christmas and New Year. Easily customize these effects to create a joyful atmosphere for your visitors.\n\nThis code creates a Christmas card with a centered tree, and falling snowflakes. The tree is made from triangular shapes, and the gifts are placed at its base. When the card is hovered, it lifts slightly. Snowflakes animate from top to bottom, adding a festive touch. The \"Merry Christmas\" text is displayed below the tree.\n\nThis is the 3D cude that has \"Merry Christmas\" written on the faces of the cude. ON clicking that cube it rotates and shows the faces of cube written \"Merry Christmas\"\n\nThis is the envelop that has a Merry Christmas card inside it.\n• None The card starts completely inside the envelope and is invisible.\n• None The card slides fully out of the envelope and is completely visible above it.\n\nThis code creates a festive Christmas scene with a house, tree, mountains, snowflakes, and a fireplace. It includes animated elements like flashing window lights and falling snowflakes using CSS keyframes to create a lively holiday atmosphere.\n\nThis code creates a festive greeting card using HTML and CSS. It features an animated Christmas tree with ornaments, falling snowflakes via keyframe animations, dynamic gradient backgrounds, and styled presents. The entire design relies on CSS for visuals and animations, creating an engaging holiday-themed display.\n\nThis code triggers a New Year animation when the button is clicked. The showNewYear function adds the active class to reveal the hidden message and fireworks. CSS animations handle the smooth fade-in and scale-up for the message and bursting fireworks for a festive effect.\n\nThis HTML and CSS code creates a ribbon with the text \"Happy New Year.\" The ribbon's shape and gradient background are defined using conic-gradient and clip-path, with custom properties controlling its size, depth, and cutout. The text is styled in bold white, and the ribbon's color is set to #CC333F. The result is a festive, angular ribbon displaying the message."
    },
    {
        "link": "https://forum.bootstrapstudio.io/t/multiple-css-changes-for-holiday-decor/2076",
        "document": "I have a couple clients that are Holiday types... if you know what I mean ... They love to decorate everything and that includes their websites. What I'm wondering is if anyone has any suggestions on how to go about swapping out CSS code during things like this since we don't really have comment ability where we can have one live while not the other (well I suppose we do if we check and uncheck all the properties of a class each time, but that could get messy). I have a feeling I'm going to be alternating a lot of classes a lot of times a year for this and would love some input of ideas on the best way to accomplish this in BSS. Thanks! P.S. Right now I'm thinking the only thing we have is that I'd have to create a duplicate and add the holiday name to it, then uncheck every property in the original as well as any other holiday duplicates, and check the ones in the class I want to have active at the time. This is doable, but as I said it could get messy when you're dealing with a dozen holidays or so for each of who knows how many classes and ID's lol. Seems like there should be a simpler way to just turn a class on and off like you would with a comment. Anyways, this option I'm aware of so any others would be appreciated.\n\nWell your pretty much right, you would put a holiday class at the body element level. Then in your CSS you would make duplicate CSS rule(s) for the specific holiday CSS rule(s) You then only need to edit your HTML to switch the holiday classes when you need to. You only need to make rules for the parts of your CSS where you need to make changes, only the rule(s) and the needed property(ies):value. One thing I just was thinking about for this is it could be possible to use JS to set the class on the body dynamically by using a switch case test. $(function(){ var setHoliday = 0; //set holiday value 0 = none, 1 = christmas, 2 = easter etc... switch (setHoliday){ case 0: //if zero do nothing break; //end test case 1: //if 1 $(\"body\").addClass(\"christmas\"); //add class \"christmas\" to the body element break; //end test case 2: //if 2 $(\"body\").addClass(\"easter\"); //add class \"easter\" to the body element break; //end test } // this is similar to a normal if/else if testing I kind like it for somethings // you'd just add more case(s) with their relevant class to add // and then add break; after to stop the rest of the script from processing // then all you would need to do is change var setHoliday = x; // for when the holiday comes up to automatically switch your css to that set of rules });\n\nAlthough I'm not there yet for being able to totally understand how to manipulate that script, I have learned some and understand what you're getting at with it. That might be a good goal for me to learn how to do that as I learn Javascript! Goals are nice, they give me better purpose for learning than just blindly following examples does lol. Thanks for that idea. Other than that, yeah the rest is what I figured it would need to be. Now... if we had the ability to edit the CSS to add comments... that would fix most of this right up too as we could just comment and uncomment classes and id's without giving them holiday names (put the name in the comment instead of the class basically). It would still be some work but you can do a search for the holiday names to find any scripts that need commenting or removing of comments which would be faster than trying to edit the HTML would be I think. Maybe not, not sure lol. I'll mull it over some and see if anything else comes to mind, but I like your idea of using the switch using JS.\n\nI hope that you are getting that your CSS file would look like this :) But yes the HTML is the one needing to always change the classes for the season which is why I was thinking the script would do that in a single file you'd just change that one variable from 0 or 1 or 2 etc... Adding or removing comments I thinking would probably be more work then switching in/out a holiday class name. It is also possible that you could set the JS to work off of calendar dates but that's a bit more tricky. I don't do the JS thing I change the HTML on a site I do for a client that has a spring time guide for a couple weeks. A couple background images and such get switched in the CSS just by adding/removed a class in the HTML on like 3 files I think it is. P.S. Ha, that script totally works as is, just tested it for my self :) If you want just give me the holidays and I'll write out a working version for you. :) All it will do is add a class to the Body element based on which script variable will be set for setHoliday. Just give me a list of the holiday classes you are going to use. You won't need to do anything HTML just CSS and include this extra script file that you will set the to.\n\nOk, so I created 2 scripts and I tested that both work. Setting the to any one of the appropriate holiday numbers does add the appropriate class to the body element. These 2 scripts require jQuery to run so the site you want them on needs to use jQuery. If it doesn't then a vanilla JS script needs to be written instead. You can use \"either one\" that you are more comfortable with using. I made an assumption of the classes names so change those accordingly to what you want. The second script in theory is supposed to execute slightly quicker then script 1. The only real gotcha on doing it this way using JS is that if there is a delay in the execution of the script, you might see the site actually switch styles. :) In the app just right click on Javascript in the Design pane and select \"Create JS\". Then double click on the untitled.js and copy/paste one of the 2 scripts and then click the APPLY button above. Script 2 the more traditional if/else if testing $(function(){ // New Year's Day = 1, Valentine's Day = 2, St. Patrick's Day = 3, Mardi Gras = 4 // Easter = 5, Mother's Day = 6, Memorial Day = 7, Father's Day = 8 // Labor Day = 9, Sweetest Day = 10, Halloween = 11, Veteran's Day = 12 // Thanksgiving Day = 13, Christmas = 14 // no holiday = 0; var setHoliday = 0; if (setHoliday == 0){ }else if (setHoliday == 1){ $(\"body\").addClass(\"new_years_day\"); }else if (setHoliday == 2){ $(\"body\").addClass(\"valentines_day\"); }else if (setHoliday == 3){ $(\"body\").addClass(\"st_patricks_day\"); }else if (setHoliday == 4){ $(\"body\").addClass(\"mardi_gras\"); }else if (setHoliday == 5){ $(\"body\").addClass(\"easter\"); }else if (setHoliday == 6){ $(\"body\").addClass(\"mothers_day\"); }else if (setHoliday == 7){ $(\"body\").addClass(\"memorial_day\"); }else if (setHoliday == 8){ $(\"body\").addClass(\"fathers_day\"); }else if (setHoliday == 9){ $(\"body\").addClass(\"labor_day\"); }else if (setHoliday == 10){ $(\"body\").addClass(\"sweetest_day\"); }else if (setHoliday == 11){ $(\"body\").addClass(\"halloween\"); }else if (setHoliday == 12){ $(\"body\").addClass(\"veterans_day\"); }else if (setHoliday == 13){ $(\"body\").addClass(\"thanksgiving_day\"); }else if (setHoliday == 14){ $(\"body\").addClass(\"christmas\"); } });"
    },
    {
        "link": "https://utilitybend.com/blog/stylish-holidays-creating-a-scroll-driven-christmas-tree-in-css",
        "document": "Every year, I create a little demo right before the holidays as a CSS greeting card. This year is no different. To celebrate the end of the year and all those new amazing features that came into CSS, I decided to let myself go a little with new CSS techniques. A sort of recap of things I learned and put them in one little CodePen. This time, I’m combining scroll-driven animations, anchoring, and @property in CSS.\n\nThis year, I went for a Christmas tree with a whole bunch of goodies in it. That does mean that I had to drop a bit of browser support for it. This year, my Chrismas greetings are Chromium only… sorry 🙁\n\nThe idea behind this article is more about my thoughts and technique behind it, but for how each and every one of those CSS features works, I’ll drop a bunch of links at the end of this article.\n\nBut first a video of the finished product, or you can click here to go to the CodePen at the bottom right away.\n\nThe first thing I had to do was to create my assets. I had 2 single path drawings. One of the tree and one for the baubles. The inside of the baubles were created later on, but the important thing was that they were the same shape and size, to keep my coding consistent.\n\nI knew I was going to animate the strokes of these SVGs with and , so I needed to get those values. I used Illustrator to create my assets, and if you want to know the correct length for these values you can go to window > document info. Inside that panel, you can click the hamburger menu icon and you will find objects. The first thing you will get to see is the path info that holds a length.\n\nI had to set these values as variables and I knew I was going to do some animating with them inside of a single timeline, this is why I chose the syntax right away.\n\nSetting up HTML: The star that follows…\n\nI’m not going to go through everything inside of the HTML, but this is the basic outline (explainer below):\n• The , will be my single point of animation, passing through custom properties to all its children\n• We have 3 items that have the exact same stroke, those are the outlines, the items are purely the decorations which will fade in at the end.\n• The tree has a single path containing the tree outline\n• Finally, we have our that will follow along the same path as the with . We will attach the star to the correct elements by using anchor positioning.\n\nYou might notice that I’ve used some lazy inline CSS with variables on my SVGs. I just set some colors for the strokes on my root:\n\nI will break this demo down as much as possible without getting lost in details.\n\nWe have a bunch of offsets that we will need to animate, these are set with , we will set the initial value to 0. The starting points of these are already declared by and\n\nPresentation styles aside, the tree itself has the following CSS:\n\nHere you see that we set the to the value we set in , the will start with the previously set base-value, but we will update that with the timeline to end at . We also set an , this is where the will be aligned to. We actually do pretty much the same for all of the baubles, here is an example of the first one:\n\nJust like before, this gets a unique and the path containing the bauble outline will get the animations.\n\nThe wrapper that passes everything\n\nIt’s time we talk about the . As this is our single point of passing through custom properties. Once again positioning and presentation styles aside, this is the code:\n\nWe will set the position of the star to the anchor as this is the starting point. The s are set equally to their maximum offset size, we will update those while scrolling to .\n\nFinally, we call our story animation and set the to . This can be found in my root.\n\nI know this isn’t necessary as it is the root scroller I’m using, but I like a named timeline.\n\nThe custom properties for the star are the following:\n\nThis will control the star offset, aka, the animation path it will follow.\n\nThis will update the opacity from time to time, right between jumping between anchors\n\nThis is a property for a space-separated transform list. This is used at the end to enlarge the star.\n\nWoah, a lot is happening here, I know, bear with me. Firstly, I set a general variable, which contains the path of the bauble outline. The actual default property on the star is the same as the tree path. Also, notice that we are setting , this contains as a starting name, but we will update that custom property during the animation, switching it from , to , , etc.\n\nIn those cases, the should be the shape of a bauble, which is why we use style queries to set the to that shape when the anchor changes.\n\nTo create my scroll, I just set the body to a of . The timeline itself might be a bit much…, but I enjoyed making this. You can view the full timeline in the CodePen below. But here is a short explanation of what happens in the timeline:\n• The star keeps the of for the start of the animation\n• Meanwhile, the anchor of the star is set to the and the offset is placed to , creating the animation along the path.\n• Between that the star fades-out\n• From to , the of the tree gets animated from the start value to .\n• Very quickly ( ), the stars offset gets reset and the anchor is shifted to , also triggering that style query we wrote before an setting the correct . The of the ball is set to the initial value of , ready to be animated to as well.\n• The star fades in and stays like that in for some time\n• , we repeat this story to go over to , with a reset of the anchor setting at ,\n• And we continue this loop till the end\n\nEven though this animation won’t run off the main thread (because custom properties just don’t…), it was just so much fun creating this demo. I’ll probably write one more article this year for a recap of 2024. But I just wanted to share my CSS Christmas card for this year.\n\nWhichever holiday you are celebrating this end of the year, I wish you all a beautiful holiday season and a lot of love/warmth with family and friends.\n• Let’s hang! An intro to CSS Anchor Positioning with basic examples\n• Animating clip paths on scroll with @property in CSS\n• Taking a closer look at @property in CSS\n• Scroll driven animations in CSS are a joy to play around with!\n• Scroll-driven-animations.style (your go-to place for all the info)\n• How svg line-animation works (even though a few years old, a great article!)"
    },
    {
        "link": "https://codewizardshq.com/html-css-tutorial-holiday-card",
        "document": "Happy holidays to all of our students and friends. Instead of buying a card this year, use our HTML and CSS tutorial for kids and your programming skills to code a personalized holiday card for your friends and family.\n\nIt’s not the same boring card everyone else is buying, you can personalize this card with your style or match the recipient’s. This is an easy HTML and CSS tutorial for kids or anyone starting to learn. We’ll be building this simple holiday card that opens when you hover over it.\n\nThis tutorial assumes you understand basic HTML and CSS. Let’s get started!\n• Step 2: Add an image to the front of the card\n• Step 3: Add a message to the cover of your card\n• Step 4: Style the message on the cover of your card\n• Step 5: Add a message on the back of your card\n• Step 6: Style the message on the back of your card\n• Step 7: Add your picture or logo to the inside page\n\nWhat you need:\n\nYou can use a simple text editor like Notepad, TextEdit, Sublime Text, etc. You may also use an online text editor like Codepen. Please use the link to set up your account.\n\nDownload the base folder and open the holiday_card.html file. This folder contains all the images and files you will need to complete your card.\n\nEdit the holiday_card.html file inside of any text editor: for example, Notepad on Windows, TextEdit on Mac, or Sublime Text. You can also use an online text editor like Codepen to edit and run this code. The base files will set up a blank card that opens when you hover over it.\n\n💻 Prepare your child for success: If you are looking for your child to learn to code, explore our live, teacher-led coding classes. View Programs.\n\nAdd a background image property to the <body> element and cover the entire page. By default, the background is repeated.\n\nHint: To change the background, use a different JPEG or PNG image file in place of ‘bg.png’.\n\nStep 2: Add an image to the front of the card\n\nAdd a background image property and a background-size to .front. This adds a nice image to the front of our card.\n\nWe also want the same image on the inside front of the card. Instead of creating a separate style for .page, we will add it to the styles for .front.\n\nHint: To change the cover image, use a different JPEG or PNG image file in place of ‘winter_scene.jpg’.\n\nStep 3: Add a message to the cover of your card\n\nAdd a message on the cover using an H1 element inside .front. Include your own holiday message.\n\nHint: To change the message, replace ‘Happy Holidays’ with a personalized message.\n\nStep 4: Style the message on the cover of your card\n\nStyle your <h1> element. We’ve added the Google font “Cookie” in our <head> element.\n\nHint: To change the font, replace ‘Cookie’ in the font-family property. Select from these web safe fonts.\n\nStep 5: Add a message on the back of your card\n\nInside of .back, add a <div> element with class ‘message’ to hold your headings and paragraph.\n\nInside of .message, add a personalized message to your friend or family member with <h5> and <p> elements.\n\nHint: To change the message, replace the content inside your H5 and p elements.\n\nStep 6: Style the message on the back of your card\n\nAdd the following styles to .message and text elements.\n\nHint: You can change the color of the font by changing the color name or hex property of .message (List of colors)\n\nStep 7: Add your picture or logo to the inside page\n\nStyle your <img> element by decreasing the size and flipping it.\n\n\n\nHint: You can change the image by linking a different JPG or PNG file in the src attribute of the element.\n\nDownload the completed HTML and CSS code and open the i_holiday_card.html for the final card project.\n\nCustomize this code to create your own holiday card! It’s that easy. Now you can dazzle your friends and family with your coding skills and a thoughtful card too.\n\nDid you code your own card? Share a picture or link and use #CodeWizardsHQ or tag us to be featured on social media.\n\nLearn more about building games and websites in our live HTML coding classes for kids.\n\nReady to level up your child’s learning experience? See our coding programs for kids ages 8-18:"
    },
    {
        "link": "https://stackoverflow.com/questions/69254659/add-css-class-to-all-heading-html-elements",
        "document": "I'm currently working on a website for some school assignments. I am using Wordpress with the Divi theme.\n\nOnline I found some CSS code, which lets me add a colored line under my text. I've been using this on all my headings.\n• Here's an example of my headings: https://colindedeugd.nl/wp-content/uploads/2021/09/Header-Colored-Line-Example.jpg\n\nThe CSS code for it looks like this;\n\nTo add this to my heading, I used some HTML code;\n\nMy problem is that I have to manually add this HTML code everytime I want to use a heading. Simply converting my text to 'H2' in standard text editor ignores this CSS class. I was wondering if there was a way to automatically add this CSS class to all (H2) headings, sitewide. Is there a simple solution for it? If so that would be a great help!\n\nI've already tried adding the highlight CSS to the heading directly using CSS, but that looks like this:\n\nThe line fills the whole text field, instead of just underlining the text itself. If there's a simpler solution for this issue than the other thing, I would be more than happy!\n\nThanks for your time."
    }
]