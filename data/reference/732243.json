[
    {
        "link": "https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/command/CommandExecutor.html",
        "document": "Executes the given command, returning its success. \n\n If false is returned, then the \"usage\" plugin.yml entry for this command (if defined) will be sent to the player."
    },
    {
        "link": "https://github.com/CommandAPI/CommandAPI",
        "document": ""
    },
    {
        "link": "https://bukkit.fandom.com/wiki/Plugin_Tutorial_(Eclipse)",
        "document": "This rather large tutorial aims at getting you started with plugin development in Bukkit. It is in no way a complete tutorial of all possibilities in Bukkit, but rather a general overview of the basics. It starts with making sure you understand Java, sets up your workspace in an IDE, and introduces the essentials of most Bukkit plugins.\n\nThese tutorials require basic knowledge of the Java programming language. If you are just getting started with Java or need a refresher, the following is a non-exhaustive list.\n• MOOC.fi - A big course, designed to take about 12 weeks\n\nBefore developing a plugin (or learning Java) you will need to set up a development environment. This includes but is not limited to installing an IDE (Integrated Development Environment). The following tutorial contains instructions for the Eclipse IDE.\n\nYou MUST download the Eclipse build for Java developers, NOT the one for Java EE developers. The version for Java EE developers does not ship Maven support, which is required for this tutorial.\n\nAlternatively, you can use IntelliJ IDEA and follow this tutorial if you prefer JetBrains' IDE instead of Eclipse.\n\nBefore starting you'll need to set up your workspace and files in Eclipse. Start Eclipse, then create a new Project by selecting File -> New -> Project:\n\nNow, open up the Maven folder, and select Maven Project. Click next, and then tick the Create a simple project box on the next page, and then click Next: If you can't see Maven folder, then you need to go download the m2eclipse plugin from here\n\nNow, you need to name your group as follows:\n• If you have a domain name, the package would be the domain name in reverse.\n• Ex: i-am-a-bukkit-developer.com your package would be com.i_am_a_bukkit_developer source\n• Avoid using a domain you do not own.\n• No domain? Here are some common conventions\n• Create an account on a source control site such as GitHub or sourceforge\n• For GitHub, follow the instructions here and you will have a sub-domain, so your package would be io.github.<username>\n• Use your email. Ex: <username>@gmail.com would be com.gmail.<username>\n• This is used by many plugin developers. For this, use the Java package me.<name>\n• This is the least preferred method. Simply use any unique group naming, again, use this as your last resort.\n\nThere are several things that your group must not begin with and those are:\n\nOnce you have the base group name, you will want to finish it off with the plugin name. Lets use the GitHub Pages example for this. If you are creating a plugin called TestPlugin your full group name would be io.github.<username>, and your artifact name would be TestPlugin. For the version, simply stick with the default for now. It can be changed later.\n\nIf this is your first time using Eclipse, close the Welcome tab by clicking the \"X\" next to the Welcome tab on the tab bar. Now, you should have a window that looks like this:\n\nClick the arrow to the left of your artifact name, and let's get started!\n\nBefore you begin developing your plugin you will need to add the Bukkit API library to your project as a dependency, you can also add any other API's you may want to use.\n\nDouble-click pom.xml, which is at the bottom of your project's folder. Click the pom.xml tab at the bottom, and you should see something like this:\n\nIf you wish to use Java 6+ language features, you must specify the Java version that the project should be built on. Copy and paste this (specifies that the project should be built under Java 7) before </project>:\n\nYou may use other levels, such as for Java 8 or for Java 11. Please note that according to BStats, a sizeable number of servers run Java 8 (~64% as of April 2021), so compiling for Java 11 will result in many server owners being unable to run your plugin. If you do use Java 1.8 or 11 features, Eclipse will suggest changing the language level when you hover over the code \"error\". Do so.\n\nBefore the </project> at the bottom, copy and paste this block (it tells Eclipse where Bukkit's repository is located):\n\nThe spigot repository is the only working repository as the former repository \"bukkit-repo\" (http://repo.bukkit.org/content/groups/public/) is down.\n\nNext, before the </project> at the bottom, copy and paste this block (it tells Eclipse that we're building against Bukkit):\n\nPreviously you needed build against bukkit, however bukkit artifacts are no longer distributed at spigot with 1.16.\n\nIf you wish to, you may change the version of Bukkit you're building against. You can view the available versions here.\n\nWhen you finish, your pom.xml should look similar to this:\n\nSave your pom.xml using File -> Save or pressing . It will take a few minutes to download the dependencies and build the workspace. Then, right click the projects title and click Maven -> Update Project.\n\nIf you have some experience with Eclipse and Java you will know that when you hover your mouse over any built in class or method a yellow box will pop up, containing the documentation for that class or method. This is known as a Javadoc and can also be accessed online at the Oracle website. Bukkit also has documentation which often contains useful descriptions of each method and class provided by the API, which is available here (Beta Javadocs can be found here, and development build Javadocs here). In order to have this information available within Eclipse, so that it will pop up whenever you hover over a Bukkit method or class, first right click on the Bukkit jar where it appears under \"Maven Dependencies\" in the project explorer, and select \"Properties\". Choose the Javadoc Location item on the left of the window that pops up, and paste the url https://hub.spigotmc.org/javadocs/spigot/ (or that of the beta/development Javadocs linked above) into the textbox under \"Javadoc URL\". It should look like this (with the new url):\n\nClick \"Validate\", and then click \"OK\". Done! Now the Bukkit Javadocs are linked to the Bukkit source, and you can access helpful documentation from within Eclipse.\n\nNow you need to create a 'package' which will store all the Java class files we will be using. Right click on the folder labelled src/main/java and select New > Package:\n\nFor your package name, put your group name, then a period, and then your artifact name in lowercase. For example, if your group name is io.github.name and your artifact name is TestPlugin, your package name would be io.github.name.testplugin.\n\nNow that we have our project set up we can start to add class files and begin making our plugin. The plugin's main class is the class that extends JavaPlugin. There should only ever be one class in your plugin that extends JavaPlugin either directly or indirectly. It's always good practice to create your main class first and give it the same name as your plugin. Right click on the package you created before, and select New > Class. You should have a new class similar to the following\n\nNow you have setup the project and the main class. To allow Bukkit to load your plugin, you must create the plugin.yml file. This file will contain essential information, and without it your plugin will NOT work. This time we want to right click on src/main/resources (WARNING: Sometimes having your plugin.yml here could cause errors when you try to run your plugin, if this is the case try placing the plugin.yml directly in the project folder and not inside any src or other folders. This depends on your IDE and environment.). Select New > File. (If you don't see File as an option, select Other > General > File.) Name the file \"plugin.yml\" and click finish. Eclipse will open your currently blank plugin.yml file in the default text editor. A window may open letting you know editors are available on the Marketplace. Installing one is unnecessary, since .yml files are simple text files. (Hint: If you want to keep your workspace organized, close the text editor and drag the plugin.yml file onto the main workspace(To the right) and you will be able to edit the file inside Eclipse.)\n\nThere are three essential attributes that must be declared in the plugin.yml.\n\nThe most simple plugin.yml file would look like this :\n\nFor more examples, see #Example_Files_and_Templates\n\nAt this point your plugin can be loaded by Bukkit, and will be accompanied with log entries indicating this. But, it will do nothing!\n\nThese methods are called whenever the plugin is enabled and disabled. By default your plugin will automatically enable itself when loaded so you can register your events and provide some debug output here. is invoked when the plugin is enabled, and should contain logic to set up your plugin when it is enabled. is invoked when a plugin is disabled, and should contain logic to clean up your plugin and associated state. Additionally plugins can override the method to perform additional logic when the plugin loads.\n\nCreate the methods and inside the main class created in the previous section. It will look something like the following\n\nThe methods now exist, but they don't do anything yet. Note: There is no reason to print a message such as \"{$PluginName} has been enabled!\" as bukkit will do this automatically. For more information about events, click here.\n\nA plugin can print a message to the console and the server log. It can accomplish this by invoking the correct method from the plugin's logger. First we must invoke the method to retrieve the logger associate with this plugin. Then we can start logging.\n\nWe will write to the log when method is called. We can do that by inserting the following line into the method.\n\nYou can then do the same inside , making sure to change the message.\n\nYour main class should now look something like this:\n\nIt is important to remember that this does not only occur on server shutdown and startup, your plugin can also be disabled and enabled by other plugins or through use of the /reload command while the server is running. Assuming that the server has only just been started when the plugin is enabled is therefore a dangerous assumption, as there may well already be players online, additional worlds loaded, additional chunks loaded, and many other unexpected differences.\n• You have a plugin that stores information about a player in a HashMap on the PlayerJoinEvent\n• You rely on having that information available for every player\n• An operator uses the /reload command\n• Your plugin is disabled and all data stored is lost\n• Your plugin is enabled again with several players already online\n• These players do not have any information stored for them in the HashMap\n• You try to retrieve information about them but there is none!\n\nFor this to work correctly on reload, you would need to find all players currently online during onEnable and store the correct information for that player in the HashMap.\n\nListeners are classes whose methods are invoked in response to an event. All listeners implement org.bukkit.event.Listener. For further details about creating listeners,\n\nSo, you now know how to register events and do something when they happen, but what if you only want something to happen when a command is typed? You use . This code is run whenever a player types a command preceded by the \"/\" character. E.g. typing \"/do something\" would call the method. In this case nothing would happen because no behavior has been programmed.\n\nAvoid using command names that are the same as those that come with Bukkit, and also consider carefully how unique your commands names will be. E.g. the \"give\" command is already used by several plugins, and if you implement yet another \"give\" command, your plugin will become incompatible with those other plugins. You must register your commands in the plugin's plugin.yml or they will not trigger this method.\n\nThe method must always return a boolean value - either true or false. If the value returned is true then you won't see any noticeable events. However if it returns false then the plugin will revert to your plugin files' 'usage: property' and display a message to the user showing them how to use the command as specified in the plugin.yml file.\n\nWhen using , you should always register 4 parameters.\n• - who sent the command\n• - the command that was executed\n• - the command alias that was used\n• - an array of additional arguments, e.g. typing /hello abc def would put abc in args[0], and def in args[1]\n\nWhen coding the function it is always good practice to return false at the very end of the function. Returning false will display the usage dialog set in plugin.yml (see below). This way if anything goes wrong the help message will be displayed. When returning a value the function will exit so if you return true any code underneath won't be run, unless a return statement is nested in an if statement or similar.\n\nThe just means that it won't distinguish between upper and lower case characters. For example, the string \"BAsIc\" and \"BasiC\" would both equal basic and the code would be executed.\n\nPress Cmd-Shift-O (Organize Imports), importing , not (this is the command block), or add these two lines at the top of your file:\n\nAdding your Command to the Plugin.yml\n\nYou will also need to add the command to your plugin.yml file. Add the following to the end of plugin.yml:\n• - the name of the command.\n• - the description of the command .\n• - the help dialog that users will see when you return false in the method. Write clearly, so that others can discern what the command is and how to use it.\n• - This is used by some help plugins to work out which commands to show to the user.\n• - This is output when the player attempts but does not have permission to use the command.\n\nNote that yml files use 2 spaces for tabs, as the tab character will cause problems.\n\nYou may have noticed the parameter above. is a Bukkit interface which has two useful (for plugin writers) subclasses: and . (There are also other subclasses that are less common such as )\n\nWhen you're writing your plugin, it's a very good idea to ensure that commands that can be run from the console actually work, and that commands that should only be run as a logged-in player really are only run as a logged-in player. Some plugins simply return if the sender is not a player (i.e. someone tried to use the plugin's commands from the console), even when those commands make perfect sense from the console (e.g. changing the weather on the server).\n\nOne way to do this is:\n\nIn this example, the command basic can be run by anyone - a logged-in player, or the server operator on the console. But the command basic2 can only be run by logged-in players.\n\nIn general, you should allow as many commands as possible to work on both the console and for players. Commands that need a logged-in player can use the mechanism in the example above to check that the is actually a player before continuing. Such commands would generally depend on some attribute of the player, e.g. a teleportation command needs a player to teleport, an item giving command needs a player to give the item to...\n\nIf you want to get more advanced, you could do some extra checks on your command arguments so that e.g. a teleportation command could be used from the console if and only if a player's name is also supplied.\n\nThe examples above just put the method into the plugin's main class. For small plugins, this is fine, but if you're writing something more extensive, it may make sense to put your method into its own class. Fortunately, this isn't too hard:\n• Create a new class within your plugin's package. Call it something like MyPluginCommandExecutor (although of course replacing MyPlugin with your plugin's actual name). That class must implement the Bukkit CommandExecutor interface.\n• In your plugin's method, you need to create an instance of your new command executor class, and then make a call like , where \"basic\" is the command we want to handle, and is the instance we created.\n\nBest explained by example:\n\nNotice how we send a reference of the main plugin object to MyPluginCommandExecutor. This allows us easy access to the main plugin objects's methods if we need to.\n\nBy doing this, we can better organise our code - if the main method is large and complex, it can be split into submethods without cluttering up the plugin's main class.\n\nNote that if your plugin has multiple commands, you will need set the command executor for each command individually.\n\nWhen writing an onCommand, it's important that you don't assume any information, such as the sender being a Player. Things to keep in mind:\n\nMake sure the sender is a Player before casting\n\nUsing simple code like this makes it possible:\n\nDon't always assume the sender typed the correct amount of arguments.\n\nCheck if a Player is online before getting them\n\nSometimes you want to get another player by the name entered by the player. Always make sure the player is online!\n\nIf you need to modify a Player currently not online, the class provides basic manipulation methods.\n\nThe Bukkit API provides a convenient way for plugins to manage user configurable settings. Additionally it also serves as an easy way to store data.\n\nIf you are looking for how to Develop a permissions plugin, refer to http://wiki.bukkit.org/Developing_a_permissions_plugin\n\nWith the new Bukkit API for permissions, they couldn't be easier. To find out if a player has a particular permission use the following:\n\nYou can also find if a permission has been set or not (equivalent to Java's null) with the following function:\n\nYou may be wondering why there aren't any groups. The answer to that is because they aren't really needed. Previously one of the main uses for groups was to format chat messages. That however can be done just as easily with permissions. Inside your chat plugin's config you would define associations between permissions and prefixes. For example the permission \"someChat.prefix.admin\" would correspond to the prefix [Admin]. Whenever a player speaks with that permission their name will be prefixed with [Admin].\n\nAnother common usage might be to send a message to all users within a group. Again however this can be done with permissions with the following:\n\nFinally you may be asking, well how do I set and organise player's permissions if there are no groups? Although the bukkit API doesn't provide groups itself, you must install a permission provider plugin such as permissionsBukkit to manage the groups for you. This API provides the interface, not the implementation.\n\nIf you want more control over your permissions, for example default values or children then you should consider adding them to your plugin.yml. This is completely optional, however it is advised. Below is an example permissions config that would be appended to the end of your existing plugin.yml:\n\nFirstly, each permission your plugin uses is defined as a child node of the permissions node. Each permission can then optionally have a description, a default value, and children.\n\nBy default when a permission isn't defined for a player hasPermission will return false. Inside your plugin.yml you can change this by setting the default node to be one of four values:\n• true - The permission will be true by default.\n• false - The permission will by false by default.\n• op - If the player is an op then this will be true.\n• not op - If the player is not an op then this will be true.\n\nBefore now you will probably be used to the * permission to automatically assign all sub permissions. This has changed with the bukkit API and you can now define the child permissions. This allows for a lot more flexibility. Below is an example of how you do this:\n\nHere the doorman.* permission has several child permissions assigned to it. The way child permissions work is when doorman.* is set to true, the child permissions are set to their values defined in the plugin.yml. If however doorman.* was set to false then all child permissions would be inverted.\n\nIf you wish to know about developing your own permissions plugins (Ones that actually set permissions) then check out the tutorial on Developing a permissions plugin.\n\nCurrently, Minecraft servers operate nearly all of the game logic in one thread, so each individual task that happens in the game needs to be kept very short. A complicated piece of code in your plugin has the potential to cause huge delays and lag spikes to the game logic, if not handled properly.\n\nLuckily, Bukkit has support for scheduling code in your plugin. You can submit a Runnable task to occur once in the future, or on a recurring basis, or you can spin off a whole new independent thread that can perform lengthy tasks in parallel with the game logic.\n\nThere is a separate Scheduler Programming tutorial which introduces the Scheduler, and gives more information on using it to schedule synchronous tasks, and on kicking off asynchronous tasks in Bukkit.\n\nThe easiest way to create blocks is to get an existing block and modify it. For example, if you want to change the block that is located five blocks above you, you would first have to get your current location, add five to your current y-coordinate, and then change it. For example:\n\nThe above code gets the player's location, gets the block five blocks above the player, and sets it to stone. Note that once you have a , there are other things you can do besides set its type. Consult the JavaDocs for more information.\n\nYou can use a similar concept to generate buildings and individual blocks programmatically through the use of algorithms. For example, to generate a solid cube, you could use nested loops to loop over an entire cube and fill it in.\n\nThis method will construct a 3D cube or cuboid with the given length and starting point. As for deleting blocks simply follow the same method for creating them but set the ID to 0 (air).\n\n\n\nThis section mostly covers player inventory manipulation, but the same applies to chest inventory manipulation as well if you find out how to get a chest's inventory :P. Here is a simple example of inventory manipulation:\n\nSo inside onPlayerJoin we first make a few variables to make our job easier: player, inventory and itemstack. Inventory is the player's inventory and itemstack is a ItemStack that has 64 diamonds. After that we check if the player's inventory contains a stack of diamonds. If the player has a stack of diamonds, we give him/her another stack with inventory.addItem(itemstack) and send a message. So inventory manipulation isn't actually that hard, if we wanted we could remove the stack of diamonds by simply replacing inventory.addItem(itemstack) with inventory.remove(itemstack) and change the message a little bit. Hopefully this helped!\n\nWhen dealing with items in the code, you use the ItemStack class for looking up and setting all information on that stack.\n\nTo enchant an item you must first know the Bukkit enchantments. If you want to enchant items that can't be enchanted inside normal SMP, use addUnsafeEnchantment() instead of addEnchantment()\n\nFor example, to give Sharpness 1 to a stone sword:\n\nYou can set the display name of an item by doing this.\n\nYou can also set the lores of an item. The lores are the small annotations on an item, like \"+5 attack damage\" on a stone sword.\n\nBukkit is trying to make plugin development as easy as possible, so HashMaps with key of type Player, Entity, World or even a Block were replaced by Metadata. Metadata is some kind of alternative to HashMap. It allows you to add custom \"fields\" to Players, Entities, Worlds and Blocks. These things are all members of Metadatable class(check [1])It works very simply. Everything that is Metadatable holds its own HashMap of Metadata which you have access to. That means, for example, if you're creating an economy plugin, you would need a HashMap of Player and Float or Double. With Metadata, you don't have to! You just attach to player new metadata value, and that's it!\n\n\n\nWhy to use Metadata\n• Metadata is all handled by Bukkit, which makes it a very good alternative to HashMaps.\n• Metadata can be used to share information between plugins.\n\nWhy not use Metadata\n• Slightly more difficult to get the value.\n• It is not saved on shutdown (but then again, neither are any Maps that you create).\n\nNote: If you're manipulating with numbers, booleans or strings, use convenient method to get the result. For example, you can use asInt(), asString() or asBoolean() instead of value to find out the value.\n\nSometimes flat files aren't enough for what your looking to do, this is where databases come in. The most common database engines available on Linux/Mac/Windows machines typically run on some flavor of SQL (Structured Query Language).\n\nSoftware offering SQL allow you to create databases with columns and header to identify to contents of each cell. Think of it as a spreadsheet on steroids, where every column you set up in your database can enforce rules to ensure integrity. Apart from being more organised than a simple custom data file, SQL provides faster access and better searching than flat files.\n\nThe SQL standard helps applications like Bukkit implement database storage for their data in a consistent way. Unfortunately, there's more than one SQL-ready database engine, and each has minor differences in how to configure and use it. Which one you choose may depend on your particular needs. (Some plugins even offer configurable options to connect to multiple database engines!)\n\nAlta189 has written a fantastic SQLite tutorial which I suggest you watch if you're interested in using SQL in your plugins, included with the tutorials is a handy library you can download and import to make using SQL easier. Once you have watched these video tutorials I would suggest you go and learn some SQL syntax, it's very straightforward and shouldn't take you long to pick up. SQL Tutorials @W3Schools and @1Keydata.\n\nSQLite is great for very simple databases, because there's no server concerns to set up. Just make a few calls to create a new database and table. It's easy to back up: just copy the whole database file in one go. SQLite is a little bit weaker at data integrity, flexibility in data types, and it may not be something you would want to trust for huge databases of millions of rows. But for a new plugin in development, it's often easiest and fastest to get the SQL basics squared away with SQLite, even if you \"graduate\" to a more server-class database engine later.\n\nAnother popular SQL database engine is called MySQL. It is closer to server-grade than SQLite, where many popular companies or websites depend on it for millions of webpage hits every day. With that security comes a little bit steeper learning-curve, because MySQL has more tunable parameters and capabilities.\n\nThe coding for plugins accessing MySQL is mostly the same as tiny SQLite or mega-sized Oracle, with only small differences in syntax here or there. But the administration has room to grow. You may want to set up accounts and privileges inside your MySQL setup. You may want to set up SQL scripts that organize your backups and rollback to previous states.\n\nOnce you have written your plugin, how do you get it from a collection of source files into a working jar file that can be installed on a server? First, set up a CraftBukkit server on your local machine. To do this, visit the wiki page on Setting up a server. Next you have to export your plugin to a .jar so that you can run it on your new server. To do this in Eclipse, right-click the project and click Run as > Maven install:\n\nIn the future, when you make code changes to your plugin, you want to delete the previous JAR by right-clicking the project and clicking Run as > Maven clean before doing the above. If you're having issues when building your plugin, check if your Java Development Kit (JDK) is properly installed and review Setting Up Your Workspace. You may need to configure your JDK manually if you see a JDK-related error in the console, as Eclipse may not have detected it correctly. Go to Window -> Preferences, and go to Java -> Installed JREs. Add the latest JDK you've installed as a JRE, tick that one, and untick the active one that was giving you issues:\n\nIf your project built successfully, the JAR file is now under the target folder in your project's folder under your Eclipse workspace. The JAR file you have exported should now be a working plugin! Assuming of course that there are no errors in your code or your plugin.yml file. You can now drop the jar file you have exported into your Bukkit server's \"plugins\" folder, reload or relaunch the server, and test away! In order to connect to a server running locally on your computer, simply put \"localhost\" as the IP address of the server in Minecraft multiplayer. If you run into errors that you can't solve for yourself, try visiting the plugin development forum, asking in the bukkitdev IRC channel, or re-reading this wiki. Once you have a useful working plugin, consider submitting your project to dev.bukkit for consumption by the Bukkit community. From the wizard above, you can see that the JAR file will be by default a compressed archive (JARs are based on the ZIP archive format). As such, it does not make sense to put your JAR into a ZIP archive when uploading to BukkitDev and will only increase the file size. Further, config files can be placed within the JAR and copied into the plugin's data folder if the configuration file does not exist. There is usually no good reason for packaging JAR files into another archive.\n\nYou may wish to edit another plugin that has the source available. If that plugin has a pom.xml in its folder (most of the popular ones, for example WorldEdit and Essentials, do), you can import it as a project by selecting File -> Import, and then opening the Maven folder and selecting Existing Maven Projects:\n\nThen select the folder that the pom.xml is in, and the project should be on your sidebar. Edit it and compile it like you usually would.\n\nThe Bukkit API is capable of a lot of cool stuff. Here are some code snippets for some nice effects!\n\nThe following code allows a player to set another player on fire. Running a command like /ignite Notch would cause Notch to be set on fire!\n\nTo keep with the theme, here's a way to kill the player.\n\nUse this for your onCommand method:\n\nHere is an extension to that, that will kill the player with an explosion:\n\nThis code produces the TNT/Creeper Visual and Audio effects. However, no explosion damage is dealt to surrounding entities or blocks. This is useful for nerfing explosions while still keeping the aesthetics of them.\n\nThis will hide the player who used this command from a specified player. Everyone else will be able to see the player.\n\nSpawn Lightning Bolt Where Player is Looking\n\nThe code below allows any player with a fishing rod to create a lightning strike by clicking (and aiming somewhere). It's a simple and funny trick.\n\nEclipse provides functionality to automatically format your code to Oracle conventions, fixing unconventional indentations, spacing, and such. Simply select your project in the sidebar, and then select Source -> Format.\n• Core Java\n\n If you have any more questions on this matter, don't hesitate to visit the BukkitDev IRC channel and ask!"
    },
    {
        "link": "https://bukkit.org/threads/newbie-tutorial-the-ultimate-guide-to-code-a-bukkit-plugin.263074",
        "document": "Perspective, environment, and medium arewhen it comes to how well people learn and absorb the material they are presented. Don't utter such absolute nonsense...As a teaching assistant, I take offense in theof your statement. Who are you to judge anyone based on their ability to digest one specific source of knowledge? Your uneducated twaddle insinuates a world with no more thantextbook on any given subject taught in schools, and students whohave to ask for elaboration, because everyone understands everything in the first go. That's not quite how things work in real life, is it? I've taught quite a few different types of computer science first years; from the nerds who thought they knew everything there was to know before they even got started, to insecure \"never programmed in my life\" newbies who thought they would never make it and ended up acing the exams by the end of the semester. If there's one thing I've learned from my experience, it's that people learndifferently, and being able to accomodate that is part of what makes a great teacher. Do you know what teachers make As a student, I take offense in theof your statement. I happen to be a visual learner, and I struggled through most of the heavy math courses (calculus, probability and statitics, linear algebra), because even though all of the subjects lend themselves very well to drawings, figures, and graphs, there were always very, very few of them in our textbooks (in linear algebra, the only mandatory textbook was an 80-page PDF of theorems and proofs, text-only and with absolutely no context). Salman Khan 's brilliant videos are probably one of the reasons I got through those courses anyway, and actually got something out of them too. So just because I don't learn as well as you from dry, abstract walls of text (I guess this post is very easy for you to digest), I shouldn't be allowed to be part of this community, even though Ivery well be miles ahead of you in every aspect of the Java language and the Bukkit API? We were all newbies once, and most of us still have a lot to learn. Get off your high horse before you fall down and hurt yourself.Onwards...Yes, weneed resources about Java basics for the very reasons presented in my previous post (if I had more time, I'd be all over it). We need resources that teach the \"boring\" stuff (which isn't boring at all when you know it, but it is when it's just blobs of text that you can't abstract away from or see any meaning with) in a Minecraft/Bukkit-related way, because it would attract a lot of the people who wouldn't read up on the basics otherwise. And I know how effective familiar examples can be, because I've used Minecraft and MobArena in my classroom with great success before.Fire up Google and type in \"event-driven programming\" and tell me how many of the results would be easily digestible by newbies. This is probably the best piece, and it's hidden away insearch! Most real-time games are event-driven, and the entire Bukkit API iswith events, yet there is no source of easily digestible information on the topic. Oh, and Oracle's documentation, which you seem to be so fond of... How many clicks are required to get from the tutorial start page to anything that even begins to teach concepts ? Three! And that's after the scary hurdle of the big fat blob about all the new, advanced things in Java 8. Besides, that, how boring is that actual page about objects? Quite.One of my favorite \"online teachers\" of all time (aside from Salman Khan) is Jason \"Buzz\" Busby of 3DBuzz . Way back in 2008 or something, I followed most their XNA series (and before that, all of their Maya Basics and Maya Advanced series), and I learned so much more from their video training material than I did from the random scribbles with a few images that people would post on various sites. They taught object-oriented programming concepts in C# with game programming in mind, and the basics were never boring that way, because theylike they were important. I'm sure something similar can be done with Java and Bukkit.As a final note, when my little brother started taking guitar lessons, he told his teacher he didn't want to play Wonderwall and all those other cliché, boring songs. His teacher started him off with \"Fuck Her Gently\" by Tenacious D and \"Nothing Else Matters\" by Metallica, and he's pretty damn good nowadays. \"Tried and true\" doesn't mean \"one size fits all\", it means \"one size fits many\", and that doesn't mean there isn't a size for the rest."
    },
    {
        "link": "https://mineacademy.org/tutorial-4",
        "document": "Welcome to Episode Four of our Minecraft plugin development series.\n\nClick here to see the third episode where I show you how to listen for any game events (actions) when making Minecraft plugins.\n\nIn this episode, we’re going to cover:\n• Registering commands — Using plugin.yml and the getCommand() method to register a command.\n• All Bukkit commands — You can see a list of all Bukkit commands here: https://bukkit.fandom.com/wiki/CraftBukkit_Commands\n• Plugin.yml tutorial — Everything you can put inside plugin.yml including how to register commands there you can find at: https://docs.papermc.io/paper/dev/plugin-yml\n\nBefore creating any command, you need to register it in plugin.yml file so that the server can recognize it. See the above video for more instructions or the link to plugin.yml tutorial for all available options.\n\nHere is an example of the /cow command which can also be run with the /cowcannon alias:\n\nThen create a new class and make it implement CommandExecutor. Inside that, implement the required onCommand() method taking the following parameters:\n\nThe method returns true or false. Return true if the command was run properly, otherwise return false so that the server can display the “usage” message from your plugin.yml, if specified.\n\nThen implement your code. You will see an example of this in the video above. The most important part is the args[] parameter, which splits everything following the command label (/cow). Such as /cow hello world will give you “hello” as args[0] and “world” as args[1], and args.length will return 2 because there are two arguments.\n\nYou can optionally implement the TabExecutor for the command and implement the onTabComplete() method. Return “null” in the method for the server to suggest all online player names. If you want to disable tab completion, return a new empty array list. You can create a switch statement or if-conditions depending on the args[] length to tab complete different parts of the command.\n\nFinally, don’t forget to get the command from the server and set its executor to your own class.\n\nCreating Minecraft plugins can be confusing, with most YouTube tutorials being painfully outdated, disorganized and offering no live support.\n\nIf you want to learn from the best of the pack and create truly customized plugins, check out Project Orion.\n\nIt’s a full fledged training tried and tested by 2,000+ people showing step-by-step on how to make plugins, advanced systems (minigames, custom mobs, antipiracy, dungeons, claims etc.) and best yet, I am doing live calls multiple times each week and connect with you in our community to answer any and all questions you have.\n\nIt’s just so much better experience than any blog post or video since I can pour my time and heart into it with greater depth and our platform is custom coded with features we need for it specifically. Click here to learn more!"
    },
    {
        "link": "https://bukkit.org/threads/tutorial-metadata-what-it-is-and-how-to-use-it.276338",
        "document": "\n• None * To put some context into it, I use metadata in relation to zombies in my King\n• None * of the Hill plugin. This has saved me lots of time and code from using NMS /\n• None * Reflection where it was unnecessary.\n• None * This static method will spawn a zombie on the player and add metadata.\n• None * Note: Adding metadata does not make the zombie stop attacking the player,\n• None * you will need to listen for that in an EntityTargetEvent.\n• None * this is your main class. Replace \"MainClass\" with the class\n• None * this is the player we want to make the owner of the zombie.\n• None * the metadata tag that we will use to get the zombie anywhere else in\n• None * There are two types of metadata: LazyMetadataValues, and\n• None * FixedMetadataValues which extend lazy ones. We will be working with\n• None * A FixedMetadataValue is, well, fixed. It is unchanging and therefore\n• None * You will need to call a new FixedMetadataValue, which requires a\n• None * plugin argument and an arbitrary string. This string does not matter\n• None * and you can name it whatever you want. I recommend that your plugin\n• None * directly points your main class but Plugin, and JavaPlugin variable\n• None * Metadata is useless unless we can check if the zombie has metadata to\n• None * @return the player, or null if none was found online.\n• None * Remember how we set metadata. We had a string argument, and a\n• None * metadata value. If the zombie has a metadata cache with this\n• None * string value, we have a match.\n• None * So right away with a few lines of code we are able to retrieve a\n• None * player who the zombie belongs to.\n• None * Maybe we want to remove the player as a zombie owner. We can do that\n• None * because the Metadata API allows us to remove metadata with just one line\n• None * the zombie who has the metadata to be removed.\n• None * the player whose name is the metadata.\n• None * we need a plugin argument to remove metadata.\n• None * based on this string argument, so we don't accidentally avoid all\n• None * metadata tags from other plugins or even elsewhere in this\n• None * plugin. (Yes! The plot thickens: You can have multiple metadata\n• None * We also need the plugin argument from which we set metadata."
    },
    {
        "link": "https://spigotmc.org/threads/how-can-you-change-an-items-name-using-nbt.397770",
        "document": ""
    },
    {
        "link": "https://bukkit.org/threads/how-to-change-items-names.118126",
        "document": "I am fairly certain this is the \"proper\" way to do it. Editing NBTTagCompounds should still work, but I think this is easier."
    },
    {
        "link": "https://stackoverflow.com/questions/48325310/bukkit-myinventory-change-item-names",
        "document": "I have made a minecraft bukkit plugin which is a gamemode changer GUI but I can't figure out how to change the block names in the inventory that I opened up. At the moment all they say is Iron_Block, Gold_block ...etc\n\nIf anyone could help me that would be very helpful\n\nThis is the inventory code bit"
    },
    {
        "link": "https://spigotmc.org/threads/changing-item-display-name-from-inventory.387983",
        "document": ""
    }
]