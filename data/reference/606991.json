[
    {
        "link": "https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html",
        "document": "This annotation is processed by the container at deployment time, and the corresponding servlet made available at the specified URL patterns."
    },
    {
        "link": "https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/annotation/WebServlet.html",
        "document": "This annotation is used to declare the configuration of an If the name attribute is not defined, the fully qualified name of the class is used.At least one URL pattern MUST be declared in either theorattribute of the annotation, but not both.Theattribute is recommended for use when the URL pattern is the only attribute being set, otherwise theattribute should be used.The class on which this annotation is declared MUST extend E.g.E.g."
    },
    {
        "link": "https://jakarta.ee/specifications/servlet/4.0/apidocs?javax/servlet/annotation/WebServlet.html",
        "document": "JavaScript is disabled on your browser.\n\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. Link to Non-frame version."
    },
    {
        "link": "https://stackoverflow.com/questions/6535676/webservlet-annotation-with-tomcat-7",
        "document": "Provided that you're sure that you're using Tomcat 7 or newer, the webapp's has to be declared conform Servlet 3.0 spec in order to get Tomcat to scan and process the annotations. Otherwise Tomcat will still run in a fallback modus matching the Servlet version in . The support for servlet API annotations was only added in Servlet 3.0 (Tomcat 7).\n\nSo, the root declaration of your must look like below (make sure you remove any from too, otherwise it will still be interpreted as Servlet 2.3!).\n\nFurther, there's a minor difference in the URL pattern. The URL pattern will let the servlet only listen on requests on exactly that path. It does not kick in on requests with an extra path like or something. The URL pattern will let the servlet listen on requests with extra path info as well.\n\nThe minimum annotation should thus look like this\n\nThe rest of attributes are optional and thus not mandatory to get the servlet to function equally."
    },
    {
        "link": "https://javaguides.net/2019/02/webservlet-annotation-example.html",
        "document": "In this blog post, we'll explore the usage of the annotation from the package to create and configure servlets in Java. The annotation simplifies the process of servlet declaration and configuration, eliminating the need for entries. We will demonstrate a complete example using the latest Jakarta Servlet dependency.\n\nFirst, we need to add the Jakarta Servlet dependency to our file. Here, we are using version 6.1.0.\n\nNow, let's create a simple servlet using the annotation.\n\nIn this example, the servlet is mapped to the URL pattern . When accessed, it displays a simple HTML page.\n\nThe annotation comes with several attributes that allow for fine-grained configuration of servlets. Here are some commonly used attributes:\n• or : Defines the URL patterns to which the servlet responds.\n• : Provides a name for the servlet.\n• : Determines the load order of the servlet.\n• : Indicates whether the servlet supports asynchronous processing.\n\nFor a complete list of attributes, refer to the official Jakarta Servlet API documentation.\n\nA servlet can be mapped to multiple URL patterns.\n\nThe attribute can be used to give the servlet an explicit name.\n\nThe attribute can be used to describe the servlet.\n\nInit parameters can be defined using the attribute.\n\nYou can configure the servlet for asynchronous operation and specify the load-on-startup order.\n\nIn this blog post, we demonstrated the usage of the annotation to create and configure servlets in Java. We covered various attributes of the annotation, including , , , , , and . Using annotations simplifies servlet development by eliminating the need for configuration."
    },
    {
        "link": "https://codejava.net/java-ee/servlet/webservlet-annotation-examples",
        "document": "The @WebServletannotation is used to declare a servlet. The annotated class must extend the javax.servlet.http.HttpServlet class.\n\nNOTE: the attributes displayName, description, smallIcon and largeIcon are primarily used by tools, IDEs or servlet containers, they do not affect operation of the servlet.\n• A servlet is annotated with only the URL pattern: Here the servlet MyServlet is mapped to the URL pattern /processForm. When accessing this servlet, it will return a “Hello” message.\n• A servlet is annotated with multiple URL patterns: Here the servlet UploadServlet can be accessed through two URL patterns: /sendFile and /uploadFile.\n• Declare a servlet with additional information:\n\n import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; @WebServlet( name = \"MyOwnServlet\", description = \"This is my first annotated servlet\", urlPatterns = \"/processServlet\" ) public class MyServlet extends HttpServlet { // implement servlet doPost() and doGet()... } Here we specify name and description for the servlet class MyServlet.\n• Declare a servlet with some init parameters:\n\n Here we declare the ImageUploadServletmapped by the URL pattern /imageUpload and specify two init parameters saveDir and allowedTypes. The doGet() method retrieves values of these parameters and prints them out to the client.\n\nHere we declare the servlet StartupServlet with loadOnStartup = 1 which means that this servlet is initialized automatically by the servlet container when the server is being started (the message in the init() method will be printed). We also specify the servlet supports asynchronous mode.\n• Java Servlet and JSP Hello World Tutorial with Eclipse, Maven and Apache Tomcat\n\n\n\n is certified Java programmer (SCJP and SCWCD). He began programming with Java back in the days of Java 1.4 and has been passionate about it ever since. You can connect with him on \n\n\n\n is certified Java programmer (SCJP and SCWCD). He began programming with Java back in the days of Java 1.4 and has been passionate about it ever since. You can connect with him on Facebook and watch his Java videos on YouTube."
    },
    {
        "link": "https://docs.oracle.com/javaee/6/tutorial/doc/bnafu.html",
        "document": "Use the annotation to define a servlet component in a web application. This annotation is specified on a class and contains metadata about the servlet being declared. The annotated servlet must specify at least one URL pattern. This is done by using the or attribute on the annotation. All other attributes are optional, with default settings. Use the attribute when the only attribute on the annotation is the URL pattern; otherwise use the attribute when other attributes are also used.\n\nClasses annotated with must extend the class. For example, the following code snippet defines a servlet with the URL pattern :\n\nThe web container initializes a servlet after loading and instantiating the servlet class and before delivering requests from clients. To customize this process to allow the servlet to read persistent configuration data, initialize resources, and perform any other one-time activities, you can either override the method of the interface or specify the attribute of the annotation. The attribute contains a annotation. If it cannot complete its initialization process, a servlet throws an .\n\nUse an initialization parameter to provide data needed by a particular servlet. By contrast, a context parameter provides data that is available to all components of a web application."
    },
    {
        "link": "https://docs.oracle.com/javaee/7/tutorial/servlets004.htm",
        "document": "Use the annotation to define a servlet component in a web application. This annotation is specified on a class and contains metadata about the servlet being declared. The annotated servlet must specify at least one URL pattern. This is done by using the or attribute on the annotation. All other attributes are optional, with default settings. Use the attribute when the only attribute on the annotation is the URL pattern; otherwise, use the attribute when other attributes are also used.\n\nClasses annotated with must extend the class. For example, the following code snippet defines a servlet with the URL pattern :\n\nThe web container initializes a servlet after loading and instantiating the servlet class and before delivering requests from clients. To customize this process to allow the servlet to read persistent configuration data, initialize resources, and perform any other one-time activities, you can either override the method of the interface or specify the attribute of the annotation. The attribute contains a annotation. If it cannot complete its initialization process, a servlet throws an .\n\nUse an initialization parameter to provide data needed by a particular servlet. By contrast, a context parameter provides data that is available to all components of a web application."
    },
    {
        "link": "https://geeksforgeeks.org/servlet-with-annotation",
        "document": "As we learned in previous chapters, the Servlet life cycle will be managed by the Servlet container that is under the Web/Application server. Whenever an HttpRequest comes from the client browser, the servlet container will map the request to the corresponding servlet based on the URL mappings provided in the deployment descriptor file – web.xml. For example: Consider the below servlet mappings in the web.xml file.\n\nHere, whenever there is a “/hello” URL coming from the client request, we are mapping it to the “HelloServlet” class. Instead of providing these mappings in the web.xml file, we can simply provide an annotation in the Servlet as below,\n\nJava Servlets provides a number of annotations to allow users to declare servlets, filters, listeners in the javax.servlet.annotation package. It also provides annotations to specify metadata for the components that are declared.\n• At the time of deployment, the servlet container will identify and process the annotation and makes the corresponding servlet available at the specified URL patterns.\n\nThe elements displayName, description, smallIcon and largeIcon are basically used by IDEs, tools or servlet containers. These do not affect the execution of the servlet.\n\nFor better understanding, we will create a simple HTML page to map the Servlet with the URL.\n\nHtml page which maps the servlet with URL “/hello”.\n• When user clicks submit for the welcome page, container will process the “@WebServlet(“/hello”)” annotation and maps the “HelloServlet” class.\n• As the method is mentioned as “post” in Html page, container will execute “doPost()” method in “HelloServlet” class.\n• Run the project on the server to get the output.\n\nYou can see the URL mapping to the “HelloServlet” class and the output.\n• To include the name of the servlet and any description related to the servlet, we can use annotated elements as shown above.\n• The URL mapping can be specified using value element.\n• Run the project and click on submit.\n• Here, we are specifying the parameter values using @WebInitParam annotation. We need to provide the parameter name which we want to initialize and the value to be set.\n• While Servlet Initialization, container will process the @WebInitParam annotation inside the @WebServlet annotation and initializes the specified values.\n• So, we are initializing the parameter “name” to value “Geek” and the same will written to the output in the response.\n• Run the project and click on submit.\n\nServlet annotated with load-on-start up value and asynchronous support:\n• Generally, when the first request comes from the client, then servlet container will identify the corresponding servlet and it will load, instantiate and initialize the servlet.\n• So, the response time for the first request to client is more when compared to the next client requests.\n• If we specify the Load-on-startup value as 1, at the time of servlet deployment into the server itself, container will load, instantiate and initialize the servlet when the server is started.\n• To specify this servlet can support asynchronous mode, set the element asyncSupported value as true.\n• Run the project on the server.\n• You can see the servlet is loaded, instantiated(init() method) and Initialized at the time of servlet deployment into the server.\n• You can see the initialization message in the console at the time of server start and the servlet deployment.\n• And the response will be generated in the browser as below.\n\nInclude two form pages with different URL mapping.\n• When the URL request comes to the servlet, whether it is “/hello” or “/welcome”, both will be mapped to the same servlet.\n• As specified in the HTML form, “/hello” action is with method “/post”. so, container will execute “doPost()” method in the servlet and “/welcome” action is with method “/get“. so, container will execute “doGet()” method in the servlet.\n• When click on “/hello” submit button, container will execute “doPost()” method in the “HelloServlet” and below output will be generated with that URL.\n• When click on “/welcome” submit button, container will execute “doGet()” method in the “HelloServlet” and below output will be generated with that URL.\n• You can see the difference between the URL based on the action which we are calling the corresponding servlet.\n• As we included multiple URLs in the Servlet, the container is able to map the request coming from both “/hello” and “/welcome” to the “HelloServlet” and generate the response.\n\nThis way we can use different annotations available in javax.servlet.annotation package to declare and set the metadata of the Java Servlets inside the servlet itself instead of using web.xml file based on our project requirement."
    },
    {
        "link": "https://javaguides.net/2019/02/webservlet-annotation-example.html",
        "document": "In this blog post, we'll explore the usage of the annotation from the package to create and configure servlets in Java. The annotation simplifies the process of servlet declaration and configuration, eliminating the need for entries. We will demonstrate a complete example using the latest Jakarta Servlet dependency.\n\nFirst, we need to add the Jakarta Servlet dependency to our file. Here, we are using version 6.1.0.\n\nNow, let's create a simple servlet using the annotation.\n\nIn this example, the servlet is mapped to the URL pattern . When accessed, it displays a simple HTML page.\n\nThe annotation comes with several attributes that allow for fine-grained configuration of servlets. Here are some commonly used attributes:\n• or : Defines the URL patterns to which the servlet responds.\n• : Provides a name for the servlet.\n• : Determines the load order of the servlet.\n• : Indicates whether the servlet supports asynchronous processing.\n\nFor a complete list of attributes, refer to the official Jakarta Servlet API documentation.\n\nA servlet can be mapped to multiple URL patterns.\n\nThe attribute can be used to give the servlet an explicit name.\n\nThe attribute can be used to describe the servlet.\n\nInit parameters can be defined using the attribute.\n\nYou can configure the servlet for asynchronous operation and specify the load-on-startup order.\n\nIn this blog post, we demonstrated the usage of the annotation to create and configure servlets in Java. We covered various attributes of the annotation, including , , , , , and . Using annotations simplifies servlet development by eliminating the need for configuration."
    }
]