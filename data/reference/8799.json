[
    {
        "link": "https://docs.blender.org/api/current/index.html",
        "document": "Welcome to the Python API documentation for Blender, the free and open source 3D creation suite.\n\nThis site can be used offline: Download the full documentation (zipped HTML files)"
    },
    {
        "link": "https://docs.blender.org/api/3.5",
        "document": "Welcome to the Python API documentation for Blender, the free and open source 3D creation suite.\n\nThis site can be used offline: Download the full documentation (zipped HTML files)"
    },
    {
        "link": "https://docs.blender.org/api/current/info_quickstart.html",
        "document": "This is generally stable but some areas are still being extended and improved.\n• None Edit any data the user interface can (Scenes, Meshes, Particles etc.).\n• None Create user interface elements such as menus, headers and panels.\n• None Create new rendering engines that integrate with Blender.\n• None Subscribe to changes to data and it’s properties.\n• None Draw in the 3D Viewport using Python.\n\nThis document is intended to familiarize you with Blender Python API but not to fully cover each topic. A quick list of helpful things to know before starting:\n• None The Python Console is great for testing one-liners; it has autocompletion so you can inspect the API quickly.\n• None Button tooltips show Python attributes and operator names (when enabled see above).\n• None The context menu of buttons directly links to this API documentation (when enabled see above).\n• None Many python examples can be found in the text editor’s template menu.\n• None To examine further scripts distributed with Blender, see: The two most common ways to execute Python scripts are using the built-in text editor or entering commands in the Python console. Both the Text Editor and Python Console are space types you can select from the header. Rather than manually configuring your spaces for Python development, you can use the Scripting workspace accessible from the Topbar tabs. From the text editor you can open files or paste them from the clipboard, then test using Run Script. The Python Console is typically used for typing in snippets and for testing to get immediate feedback, but can also have entire scripts pasted into it. Scripts can also run from the command line with Blender but to learn scripting in Blender this isn’t essential.\n\nYou can access Blender’s data with the Python API in the same way as the animation system or user interface; this implies that any setting that can be changed via a button can also be changed with Python. Accessing data from the currently loaded blend-file is done with the module . It gives access to library data, for example: You will notice that an index as well as a string can be used to access members of the collection. Unlike Python dictionaries, both methods are available; however, the index of a member may change while running Blender. Once you have a data-block, such as a material, object, collection, etc., its attributes can be accessed much like you would change a setting using the graphical interface. In fact, the tooltip for each button also displays the Python attribute which can help in finding what settings to change in a script. For testing what data to access it’s useful to use the Python Console, which is its own space type. This supports auto-complete, giving you a fast way to explore the data in your file. Example of a data path that can be quickly found via the console: When you are familiar with other Python APIs you may be surprised that new data-blocks in the bpy API cannot be created by calling the class: This is an intentional part of the API design. The Blender Python API can’t create Blender data that exists outside the main Blender database (accessed through ), because this data is managed by Blender (save, load, undo, append, etc). Data is added and removed via methods on the collections in , e.g: Python can access properties on any data-block that has an ID (data that can be linked in and accessed from ). When assigning a property, you can pick your own names, these will be created when needed or overwritten if they already exist. This data is saved with the blend-file and copied with objects, for example: # Use the get function like a Python dictionary # which can have a fallback value. # dictionaries can be assigned as long as they only use basic types. Note that these properties can only be assigned basic Python types:\n• None dictionary (only string keys are supported, values must be basic types too) These properties are valid outside of Python. They can be animated by curves or used in driver paths. While it’s useful to be able to access data directly by name or as a list, it’s more common to operate on the user’s selection. The context is always available from and can be used to get the active object, scene, tool settings along with many other attributes. Some common use cases are: Note that the context is read-only, which means that these values cannot be modified directly. But they can be changed by running API functions or by using the data API. So will raise an error. But works as expected. The context attributes change depending on where they are accessed. The 3D Viewport has different context members than the Python Console, so take care when accessing context attributes that the user state is known.\n\nPython scripts can integrate with Blender in the following ways:\n• None By inserting new buttons into existing menus, headers and panels. In Python, this is done by defining a class, which is a subclass of an existing type. # Register and add to the \"object\" menu (required to also use F3 search \"Simple Object Operator\" for quick access). Once this script runs, is registered with Blender and can be called from Operator Search or added to the toolbar.\n• None Start Blender and switch to the Scripting workspace.\n• None Click the New button in the text editor to create a new text data-block.\n• None Copy the code from above and paste it into the text editor.\n• None Move your cursor into the 3D Viewport, open the Operator Search menu, and type “Simple”.\n• None Click on the “Simple Operator” item found in search. The class members with the prefix are documented in the API reference . The output from the function is sent to the terminal; in order to see this, be sure to use the terminal. Panels are registered as a class, like an operator. Notice the extra variables used to set the context they display in.\n• None Start Blender and switch to the Scripting workspace.\n• None Click the New button in the text editor to create a new text data-block.\n• None Copy the code from above and paste it into the text editor.\n• None Click on the Object properties icon in the buttons panel (far right; appears as a tiny cube).\n• None Scroll down to see a panel named “Hello World Panel”.\n• None Changing the object name also updates Hello World Panel’s name: field. Note the row distribution and the label and properties that are defined through the code.\n\nThere are two ways to add keyframes through Python. The first is through key properties directly, which is like inserting a keyframe from the button as a user. You can also manually create the curves and keyframe data, then set the path to the property. Here are examples of both methods. Both insert a keyframe on the active object’s Z axis."
    },
    {
        "link": "https://blenderartists.org/t/python-tutorial-how-to-script-in-the-bge/1151378",
        "document": "Python Tutorial: How to script in the BGE\n\n(Not-so-)quick introduction to Python scripting on the BGE.\n\nThere are quite some things to go through, my bad… But it is not that hard, be brave!\n\nA Python controller is basically a logic brick that you can program using Python scripts.\n\nIf you look at how a controller usually behaves, they do pretty simple things:\n• AND Controller: When all connected sensors are positive, activate all connected actuators.\n• OR Controller: When one of the connected sensors is positive, activate all connected actuators.\n• NAND Controller: When no connected sensor is positive, activate all connected actuators.\n• XOR Controller: When only one of the connected sensors is positive, activate all … etc.\n\nThese are all basic logic gates, but what if you want more control?\n\nTest if a sensor is positive, and actually check some values from it?\n\nThat’s when you use a Python controller:\n\nNow to write a script you just open Blender’s text editor, and you can start writing your first script.\n\nSo, little bit of disclaimer: When people see programs they usually go “that’s so hacker, it is too complex”.\n\nBut fear not: Programs are meant to be written using English words, a bit like a recipe! It is a simple list of instructions to get from a state A to a state B.\n\nLot of comments in this code, but if you read the code word by word, usually it is pretty easy to understand what is going to happen once the Python controller will execute it!\n\nAh, maybe worth trying to play with Python on the side, at least to cover the basics.\n\nMaybe a lot to read, but at least they explain a bunch of things, you don’t have to rush…\n\n https://www.techbeamers.com/python-tutorial-step-by-step/\n\nAnd I mean, maybe Google explains better than me:\n\n https://developers.google.com/edu/python/set-up\n\nJust pick your poison. Take your time to read, really.\n\nIf you go through with it, you’ll be ready to try your new spells on the BGE!\n\nHow to see what failed\n\nWhen you will write your scripts, most of the time you will make a typo, or call the wrong method, or do something silly that I cannot describe yet, so it is important that you know where to look for errors:\n\nIn both case you will have some kind of terminal/console where the errors will be displayed.\n\nWhat you are looking for are messages like:\n\nThe error message is very important, in this case it tells me:\n\nSo this is helping me because I thought I had defined some variable, turns out I didn’t…\n\nThe stuff above the message is a stack trace, it mostly tells you from where the error comes from:\n\nIn this case I was running Python as a standalone program in my terminal, so it says that the file is , that just means that it comes from me typing junk in the console. When running BGE scripts it will tell you which file of yours caused the exception, and what line to look at.\n\nIn the beginning you might have a lot of , for these the stack is your enemy: It will say there is an error on some X line, but in reality the error comes from earlier in the code, where you forgot a parenthesis or something.\n\nDon’t focus day and night on the displayed line, maybe it comes from elsewhere\n\nWhere to find each function and variable for Python in the BGE?\n\nIn the above example, I used a bunch of words and you might wonder how in hell are you supposed to know exactly what to write.\n\nFairly enough, there’s a good documentation that basically just list such functions and variables and everything for BGE scripts: https://docs.blender.org/api/2.79/#game-engine-modules\n\nBut if you don’t really know where to start, it is a bit much to ask you to read.\n\nBut oh well, you can start by reading the introduction for the module:\n\n https://docs.blender.org/api/2.79/bge.logic.html\n\nThey kind of explain a lot what you are supposed to do with it.\n\nThe process of reading such a documentation is simply to sit down and browse links that have names that sound like the thing you are looking for.\n\nOk, so we go on the documentation main page:\n\n https://docs.blender.org/api/2.79/#game-engine-modules\n\nHmm, no idea in which module to look, so just use the search: \n\n https://docs.blender.org/api/2.79/search.html?q=bge+move\n\nWe can see a bunch of links, but if you look closely, there’s something interesting:\n\nSo, then let’s go check it out:\n\n https://docs.blender.org/api/2.79/bge.types.KX_GameObject.html?highlight=bge%20move#bge.types.KX_GameObject.applyMovement\n\nAnd now you can just read what the parameters are, what the return value is (if any), etc…\n\nYou can do more searches if some things are not clear, like how do we pass a vector? In this case I will help you a bit: it comes from the module which holds all mathematical objects used by the BGE in Python.\n\nBut there’s a trick as most functions in the BGE that expect a vector as parameter can also take a list of 3 elements, like:\n\nFrom there it’s primarily trial and error, just try things and keep searching the docs!\n\nUsing Python modules from your disk\n\nOk, one important part of scripting on the BGE, is to keep your code organized, somehow…\n\nThe Blender Text Editor is fine to learn and tinker, but you will certainly prefer using a better editor, like I don’t know, Notepad++, Atom, VS Code, or whatever it is you like writing Python with!\n\nBut in order to use such editors that aren’t part of Blender, the Python scripts need to be files on your disk, that means somewhere near your file.\n\nUsually, to be able to import scripts inside Blender, your files must be located next to your file:\n\nThis way, you can import your scripts as modules doing:\n\nYou can also place your scripts in a folder:\n\nThen, you must access your scripts as:\n\nOnce you start doing that, life becomes better, because the Blender Text Editor simply sucks\n\nThe next step in Python scripting on the BGE is to define your custom controller logic not as a full script, but as a function from a module.\n\nWhen you use Python Controller, they expect a file from the Text Editors, but once you start making modules you don’t want to store things inside Blender, as everything is already outside, on your disk.\n\nFortunately, the BGE allows you to point to a function inside one of your module, you just need to change the Python Controller mode from “Script” to “Module”:\n\nOnce that is done, the text box will not show you available scripts to use, because in Python there is no real way of knowing what module or what function is meant to be used in the BGE.\n\nSo you will have to write the import line yourself!\n\nIt works just like we saw modules working a bit above this section: Scripts/modules must be next to your blend, and the path is something like .\n\nYou must refer to a function inside the module now, because functions are executable bits of code, and that’s what the BGE is now looking for.\n\nOk, as an example, imagine a controller function inside the file :\n\nAnd now, we just write the Python import string inside the Python Controller:\n\nWell, welcome in the world of “how am I supposed to program this MMORPG?”.\n\nYou are ready to do like all programmers do:\n• Read documentation, in search of functions that do something that can help you do the bigger thing.\n• Write algorithms that are slow and trying to find what makes it slow\n• Put at strategic points in your code to see what goes wrong and what goes right (it happens).\n\nJust know that thanks to the BGE running Python, you can do a LOT of things. In my case I was able to begin making an online game!\n\nIs it easy though? No. Well, you have to know a big bunch of different things about Python, processes, network, etc… But I didn’t learn everything in one day, I learned writing a lot of stupid scripts, reading a lot of documentation, and spending a lot of time just despairing in front of my code that wasn’t working, just to see a stupid typo in some variable name\n\nProgramming is mostly a game of patience and perseverance."
    },
    {
        "link": "https://docs.blender.org/manual/id/3.5/advanced/scripting/introduction.html",
        "document": "Python scripts are a versatile way to extend Blender functionality. Most areas of Blender can be scripted, including animation, rendering, import and export, object creation and automating repetitive tasks.\n\nOutside of the Blender executable, there are hundreds of add-ons written by many people:\n• None Other Testing add-ons are included in development builds of Blender but not official releases. Many of them work reliably and are very useful but are not yet ensured to be stable for release. These files are imported when starting Blender. They define most of Blender's UI, as well as some additional core operators. All scripts are loaded from the folder of the local, system and user paths. Add-ons are conveniently installed through Blender in the Preferences. Click the Install... button and select the or file."
    },
    {
        "link": "https://docs.blender.org/api/current/info_quickstart.html",
        "document": "This is generally stable but some areas are still being extended and improved.\n• None Edit any data the user interface can (Scenes, Meshes, Particles etc.).\n• None Create user interface elements such as menus, headers and panels.\n• None Create new rendering engines that integrate with Blender.\n• None Subscribe to changes to data and it’s properties.\n• None Draw in the 3D Viewport using Python.\n\nThis document is intended to familiarize you with Blender Python API but not to fully cover each topic. A quick list of helpful things to know before starting:\n• None The Python Console is great for testing one-liners; it has autocompletion so you can inspect the API quickly.\n• None Button tooltips show Python attributes and operator names (when enabled see above).\n• None The context menu of buttons directly links to this API documentation (when enabled see above).\n• None Many python examples can be found in the text editor’s template menu.\n• None To examine further scripts distributed with Blender, see: The two most common ways to execute Python scripts are using the built-in text editor or entering commands in the Python console. Both the Text Editor and Python Console are space types you can select from the header. Rather than manually configuring your spaces for Python development, you can use the Scripting workspace accessible from the Topbar tabs. From the text editor you can open files or paste them from the clipboard, then test using Run Script. The Python Console is typically used for typing in snippets and for testing to get immediate feedback, but can also have entire scripts pasted into it. Scripts can also run from the command line with Blender but to learn scripting in Blender this isn’t essential.\n\nYou can access Blender’s data with the Python API in the same way as the animation system or user interface; this implies that any setting that can be changed via a button can also be changed with Python. Accessing data from the currently loaded blend-file is done with the module . It gives access to library data, for example: You will notice that an index as well as a string can be used to access members of the collection. Unlike Python dictionaries, both methods are available; however, the index of a member may change while running Blender. Once you have a data-block, such as a material, object, collection, etc., its attributes can be accessed much like you would change a setting using the graphical interface. In fact, the tooltip for each button also displays the Python attribute which can help in finding what settings to change in a script. For testing what data to access it’s useful to use the Python Console, which is its own space type. This supports auto-complete, giving you a fast way to explore the data in your file. Example of a data path that can be quickly found via the console: When you are familiar with other Python APIs you may be surprised that new data-blocks in the bpy API cannot be created by calling the class: This is an intentional part of the API design. The Blender Python API can’t create Blender data that exists outside the main Blender database (accessed through ), because this data is managed by Blender (save, load, undo, append, etc). Data is added and removed via methods on the collections in , e.g: Python can access properties on any data-block that has an ID (data that can be linked in and accessed from ). When assigning a property, you can pick your own names, these will be created when needed or overwritten if they already exist. This data is saved with the blend-file and copied with objects, for example: # Use the get function like a Python dictionary # which can have a fallback value. # dictionaries can be assigned as long as they only use basic types. Note that these properties can only be assigned basic Python types:\n• None dictionary (only string keys are supported, values must be basic types too) These properties are valid outside of Python. They can be animated by curves or used in driver paths. While it’s useful to be able to access data directly by name or as a list, it’s more common to operate on the user’s selection. The context is always available from and can be used to get the active object, scene, tool settings along with many other attributes. Some common use cases are: Note that the context is read-only, which means that these values cannot be modified directly. But they can be changed by running API functions or by using the data API. So will raise an error. But works as expected. The context attributes change depending on where they are accessed. The 3D Viewport has different context members than the Python Console, so take care when accessing context attributes that the user state is known.\n\nPython scripts can integrate with Blender in the following ways:\n• None By inserting new buttons into existing menus, headers and panels. In Python, this is done by defining a class, which is a subclass of an existing type. # Register and add to the \"object\" menu (required to also use F3 search \"Simple Object Operator\" for quick access). Once this script runs, is registered with Blender and can be called from Operator Search or added to the toolbar.\n• None Start Blender and switch to the Scripting workspace.\n• None Click the New button in the text editor to create a new text data-block.\n• None Copy the code from above and paste it into the text editor.\n• None Move your cursor into the 3D Viewport, open the Operator Search menu, and type “Simple”.\n• None Click on the “Simple Operator” item found in search. The class members with the prefix are documented in the API reference . The output from the function is sent to the terminal; in order to see this, be sure to use the terminal. Panels are registered as a class, like an operator. Notice the extra variables used to set the context they display in.\n• None Start Blender and switch to the Scripting workspace.\n• None Click the New button in the text editor to create a new text data-block.\n• None Copy the code from above and paste it into the text editor.\n• None Click on the Object properties icon in the buttons panel (far right; appears as a tiny cube).\n• None Scroll down to see a panel named “Hello World Panel”.\n• None Changing the object name also updates Hello World Panel’s name: field. Note the row distribution and the label and properties that are defined through the code.\n\nThere are two ways to add keyframes through Python. The first is through key properties directly, which is like inserting a keyframe from the button as a user. You can also manually create the curves and keyframe data, then set the path to the property. Here are examples of both methods. Both insert a keyframe on the active object’s Z axis."
    },
    {
        "link": "https://vagon.io/blog/using-python-in-blender",
        "document": "When it comes to software for 3D modeling, sculpting, and animation, Blender is mentioned a lot. It is free and open-source, which is a good enough reason for many to use it, whether for hobbyist work or commercial products. It explains why there are so many Blender templates for all sorts of projects.\n\nOn top of that, Python, one of the world’s most popular programming languages, can be used directly in Blender for scripting. There’s a whole lot you can do with Blender 3D Python scripting once you get the hang of it, so this article will take you through the basics of programming in Blender.\n\nGetting Started with Python in Blender\n\nLet’s assume you have some familiarity with Python, but you’ve never put it to use in Blender for scripting. This section will take you through the fundamentals so you can get straight to scripting.\n\nThe great thing about scripting in Blender using Python is that you don’t need to install libraries or add plugins. Simply open the “Scripting” tab (usually the rightmost tab) and you can start writing Python in the console.\n\nThe box in the bottom-left corner is what we call the “console”, where you’ll enter your Python commands and scripts.\n\nBefore we go on, let’s have Python tooltips show when you hover over items in the Blender interface. This will let you know how to refer to them when scripting.\n• None Choose Interface from the options on the left.\n\nand all the Blender 3D terms from our\n\nLet’s get into the actual Blender scripting tutorial beginning with the fundamentals. There’s a lot you can achieve in Blender using Python. Let’s start from the basics. You can enter your code into the Text Editor or the Console available from the Scripting tab.\n\nThere are great assets available for Blender , but at the base, everything is made up of primitives. Here’s the general idea of how to create any primitive, though let’s use a cube as an example:\n\nOnce you’ve copied the line above into the console window, press Enter, and you’ll have created a cube! Of course, you can change the size and location as you please.\n\nYou can create other primitives similarly, but the exact code required differs:\n\nYou can see more of the commands for creating primitives in the API documentation . Just scroll down to the “ ” entries.\n\nIt also has a lot of other cool ways to interact with primitive meshes.\n\nWhen diving into 3D modeling with Python, you’ll need to understand the Blender Python API and what it can bring to the table in terms of your workflow. Python scripting can significantly enhance your workflow, especially when you're working on projects that require optimized game assets. For more tips on asset optimization, check out how to optimize game assets on Blender .\n\nWell, Python can be used to do almost anything in Blender, to be honest. Here’s a list of some of its capabilities:\n\nThe first part of our Blender scripting tutorial shows you how to enter a command or two using Python in Blender. But it is important to also understand the practical uses of scripting in this program. For instance, if you need to export assets from Blender to different platforms like Unity, SketchUp, or Unreal Engine, a Python script can automate the process, making it faster and more efficient. Learn more about exporting assets from Blender to Unity, SketchUp, and Unreal Engine .\n\nOne of the greatest things that Python scripting can do for your Blender workflow is automate various tasks, making it a powerful tool for those learning Python for Blender. This means that a single script can get repetitive tasks completed in seconds, and faster workflows in Blender always help. Let’s talk about a few examples:\n• None Have you ever worked on tens of models and/or scenes and needed to export each from their respective .blend files? You can use a Python script to get that done with the press of a button.\n• None Does each new scene you make need specific lights, cameras, and models from the onset? Blender automation can get your scene set up in seconds.\n• None Python can come in handy when trying to put together complex models that can easily be scripted. For instance, architecture, landscapes, or patterns in a scene that use a lot of repeating geometry.\n\nThe way you use Blender is probably a little different from the next person. Everyone has different workflows, different preferences, and different needs when using this software.\n\nWhen you get really good with Python, you can create custom tools and add-ons (just like the great plugins others have made) that fit perfectly into your workflow and help you achieve things that you can’t when using inbuilt options.\n\nThe usefulness of Python in 3D animation is immense. Complex projects can be made so much easier when you utilize scripting at the right moments.\n\nIn animation work, you can change an object’s properties and set keyframes, animate along defined paths, move bones and armatures, and even control animation playback. In rigging work, you can create, parent, and apply weight to bones and armatures using only Python.\n\nWhen you need to get repetitive animation or rigging work applied to tens or hundreds of models, Python can make things exceptionally easy for you.\n\nWhen using Python with Blender in real-world projects, it’s crucial to know how to troubleshoot when things don’t work as expected. This section will help with debugging, troubleshooting, and learning more about the Python API and what it can do. Running complex scripts can be demanding on your hardware, so it’s essential to have the right setup. If you're unsure, here’s a guide on how to choose the best PC for Blender .\n\nSimilar to how you can run into issues with Blender itself, you can also run into issues with your scripts.\n\nOne thing any programmer will tell you is that code doesn’t always work, even when you seem to have written everything right. This is why debugging code is a thing, and there are many tips you can follow to troubleshoot and find out what might be causing your script to fail.\n• None Pay attention to the console. This is where error messages are displayed and they can give a lot of insight into why the error is being encountered.\n• None Use print() statements. These do not affect your code’s functionality, but they’ll print a specified message to the console. They can be used to tell where your code might be failing.\n• None Selectively comment out code. When errors don’t occur after commenting out a line of code, it can help pinpoint where the problem is coming from.\n• None Ultimately, you might find it necessary to walk through your code line-by-line multiple times to try and find the issue.\n\nand all the Blender 3D terms from our\n\nOptimization in Blender is always helpful, and whether you’re new to scripting or not, it’s never too early to learn how to write clean, optimized code. Here are some best practices that can help, especially when your script might be used by other team members.\n\nYou can also check out our GPU Guide for tips to use GPU, along with speed up and acceleration tips for Blender 3D.\n• None Add descriptive comments to explain what each major section of code is meant to do.\n• None Use functions for repeated code to clean things up.\n• None Make sure any variables used are descriptive so you can tell what they are for just by reading them.\n• None Put error handling in place to better understand any exceptions or errors.\n• None If possible, write your scripts in an IDE like Visual Studio Code as they have a lot of ease-of-use features.\n\nThere’s only so much that can be covered about Python and Blender here. It’s easy to find courses for learning modeling and animation in Blender , but if you’re looking to learn more about scripting in Blender, there are several great resources online.\n\nWhether you’re learning or experimenting, using Blender on a powerful system can make a big difference. If you want to explore using Blender on a high-performance cloud computer, here’s how .\n\nBlender is one of the best options for 3D modeling and animation, even without scripting. However, adding Python to the mix will give you so much more power, especially when it comes to repetitive tasks and customization.\n\nThis article only touched the surface of what Python can do in Blender so make sure to explore learning resources and do some experimentation using Blender on Vagon’s high-end cloud systems for first-hand experience.\n\nEven if you’re working on a less powerful machine, you can still run Blender efficiently. Discover how to use Blender on a low-end device and optimize your workflow.\n\nReady to take your Blender projects to the next level? Whether you're diving into Python scripting or pushing the limits of 3D modeling, Vagon's high-performance cloud PCs provide the power and flexibility you need. With up to 48 cores, 4 x 24GB RTX-enabled Nvidia GPUs, and 192GB of RAM, Vagon offers the perfect environment for even the most demanding Blender tasks. Explore our plans and experience Blender like never before.\n\nPractical Applications of Python in Everyday Blender Use\n\nWhile advanced scripting can unlock powerful tools, Python also excels in addressing everyday challenges and improving efficiency for common tasks. Here are some practical applications to consider:\n\nPython scripts can be employed to systematically rename objects, organize scene hierarchies, or apply bulk modifications across multiple objects. For instance, if your scene contains objects with generic names like \"Cube.001,\" a script can rename them to descriptive titles such as \"Chair_Left\" or \"Wall_Backdrop.\" Grouping or parenting objects through scripts also becomes more efficient, especially when dealing with complex projects.\n\nManaging render settings can become time-consuming in multi-phase projects. Python scripts allow for quick adjustments to resolution, sampling, or output formats. For example, you can create a script to toggle between low-resolution preview renders and high-quality final outputs, ensuring consistent configurations without manual errors.\n\nFine-tuning animations is made simpler with Python. Automating tasks like keyframe generation, setting up constraints, or adjusting animation curves saves time and improves consistency. For example, a script can apply smooth interpolation to all keyframes in a scene or add bounce effects to animations dynamically.\n\nPython simplifies the import and export of assets. Scripts can manage multiple file formats, ensuring seamless integration with other software or pipelines. For instance, automating the import of texture files or exporting selected objects in specific formats can save significant time in production workflows.\n\nProcedural modeling can benefit greatly from Python scripting. From generating repetitive structures like fences and stairs to experimenting with parametric designs, scripts provide an efficient way to create and modify geometry. For example, you can script a tool that dynamically adjusts the number of steps in a staircase or the spacing of a railing based on user input.\n\nThese practical applications demonstrate how Python can simplify and enhance everyday tasks in Blender, making it a versatile tool for creators at all skill levels.\n• None What is the Blender Python API, and how can I use it?\n• None The Blender Python API is a powerful tool that allows you to automate tasks, create custom tools, and manipulate 3D objects programmatically within Blender. It’s ideal for both beginners and experienced developers looking to enhance their Blender workflow.\n• None How can I learn Python scripting for Blender?\n• None There are many resources available to learn Python scripting for Blender, including online courses, tutorials, and documentation. Whether you’re looking to take a Blender Python course or follow a Python Blender tutorial, there’s plenty of content to help you get started.\n• None Can I see examples of Python scripts used in Blender?\n• None Yes, there are numerous Python Blender examples available online. These examples range from simple scripts for adding primitives to complex scripts for automating tasks and creating custom add-ons.\n• None What are the practical uses of Python scripts in Blender?\n• None Python scripts can be used in Blender for various practical applications, such as automating repetitive tasks, creating custom tools, and enhancing animation and rigging processes. This makes scripting in Blender a valuable skill for improving efficiency.\n• None How do I enable Python Tooltips in Blender?\n• None Enabling Python Tooltips in Blender is simple. Go to Edit > Preferences > Interface, and under the Display section, check the box for Python Tooltips. This will help you understand the code behind various actions in Blender.\n• None Can I use Blender on a low-end device for Python scripting?\n• None Yes, you can use Blender on a low-end device for Python scripting, but performance may vary depending on the complexity of the tasks. Consider using a cloud computer for more demanding projects or optimizing your setup to run Blender efficiently."
    },
    {
        "link": "https://adrianszatmari.medium.com/quickstart-blender-scripting-tutorial-the-plane-and-the-ball-886b9ffa2cc8",
        "document": "Hello everyone, using only python code — this is not a python tutorial — , we will be scripting this glorious scene of all scenes:\n\nI wanted to script in order to have more control over my flow, and to be able to reproduce my results. I did not want to create an add-on, it seems most scripting tutorials are focused on that, thus here we are.\n\nStarting from a clean default cube scene, you can see this:\n• In orange you have bpy.data.objects:\n• In green you have different data types:\n• In red you have materials types:\n\nThe code follows the visual structure, the object ‘Cube’ will have as data the mesh ‘Cube’. is the actual mesh of object ‘Cube”, and is the ‘Material’ material of the ‘Cube’ mesh of the ‘Cube’ object. \n\nHowever, the mesh ‘Cube’ is also here and the material ‘Material’ is also here .\n\nFirst erase the cube and leave the camera and the light:\n\nICKY!!! The mesh of the sphere object does not get updated. Everyone knows that catastrophe is imminent, we near the precipice. Let’s fix this!\n\nAhhhhhh, much much better! ❤ Order and discipline ❤ Moreover, if deleting the cube is not in , then the first time you run the script it will work, but the second time it will give an error! Remember to program defensively :)\n\nI will restart on my end — complete script will be at the end — , let’s add a function to add a plane, and make a sphere and a floor.\n\nLet’s change the shading to smooth (although it does not matter for the final render).\n\nLet’s give our scene some colors and textures. I think that the sphere could be tacky plastic pink and the floor could be tacky gold.\n\nIt is imperative to enable to use of nodes with otherwise you will not be able to add nodes to your material (of course you could enable by it by hand also, but we want everything automatic). \n\nNOTE! the code is just the medium editor has formated it. \n\nAn object can have more than one material associated to it, here we make sure that it has only one, i.e. ‘TackyPlastic’.\n\nYou can do on any node and it gives you the name by which you would need to call it in script, here copy paste gives\n\nFinally let’s do the same for the floor.\n\nNote that the world is a bit dark. We can change that with\n\nI care about processing and rendering scenes from script, so I need to be able to move the camera around from script as well. It goes in the same vain as the rest, but note that refers to the intrinsic camera properties, whereas refers to the camera in the scene. You can see this via:\n\nIn script, we can simply set or increment the position like so (you could also rotate the camera via ):\n\nI hope this was useful. If anyone has any criticism or ways to do things better, don’t hesitate to share in the comments below. Thank you for reading and thank you for your time. Happy coding ❤"
    },
    {
        "link": "https://blenderartists.org/t/looking-for-easy-example-script-to-get-started-programming-bpy/1285447",
        "document": "I have been familiar with blender over the years, and I recently picked up python, so I would like to try my hand at building (or study if one exists already) a bpy script to batch process video files into mp3’s and/or sequences. It seems a pretty simple request, and it may be such scripts already exist. If so, then please let me know. But, since the idea is to learn how to make such scripts, then I would then probably want to retrofit the existing code to include stuff like effects or something. In any case, can someone give me a point in the right direction?\n\nIt may not be the easiest thing to get started, I recommend you to start something without purpose just to get an idea of how python and python in blender works, by toying with random stuff then you may get inspired by something easy. You can look at some templates shipped with blender in the text editor. It’s a great way to learn how python in blender works, but maybe not python in general.\n\n Also all the UI part is a bit tricky to grasp, at first you may skip that and things will be much simpler. This one is a bit old but covers different concepts and is a quick introduction : https://urchn.org/post/python_mesh_tutorial Maybe other will have better ideas, it’s a bit short to get started. Once you will be at ease with python, working with the sequencer is similar to adding/manipulating objects to the scene.\n\nThe documentation. Also, there’s not such thing as ‘Programming BPY’. Bpy is a Python ‘module’ used to interact with Blender. I would suggest improving your knowledge of Python if that wasn’t just poor phrasing. Blender is not an appropriate tool for such a task. Instead, it’d be better to use ffmpeg. You could use Python’s subprocess module to interact with the commandline binary or use one of the Python binding modules people have written for it.\n\nWill definitely check out some of the scripting templates. Awhile back I (like 8 years ago) I knew a guy on here named FunkyWorm. He made a script for me that auto was sort of like a macro used to auto align a camera to a given perspective on an object. Everything is so different on blenderartists and in Blender itself. I would love to have that script, but I dont know if he is still around, and I can’t find the script. Anyway, maybe if I can make some simple macros. I know python pretty well. Just gotta get used to bpy, finding my object and method info in the interface, and so on. The commands are there, I know. It just seems to be a question of where to find them.\n\nI would suggest improving your knowledge of Python if that wasn’t just poor phrasing. Let me explain something. I’m not a bot. I am a human being, and I decidedly speak like one. I came here hoping to learn something, not be criticized for the way I speak, as if I were a soulless droid - nor did I come here to compete over correct grammar or technology. So as for my poor phrasing, which you obviously have a problem with, please know I’ll do you the favor of not returning here again, simply because of people (like yourself) with poor attitudes toward human causes. You spend too much time talking to robots. You’ve lost your humanity, if you ever even had the chance to experience what it is like to talk to a human. To the others on the list, I thank you for your help on my question here; I also apologize for cutting things off, but I’d rather stand on the side of human error than someone who thinks like a speed cam. It’s an important point. Don’t lose your soul to a machine. Thank you all anyway. I’d rather figure it out on my own."
    },
    {
        "link": "https://blender.stackexchange.com/questions/68016/modeling-with-python",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]