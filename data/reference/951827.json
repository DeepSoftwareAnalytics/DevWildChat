[
    {
        "link": "https://servicenow.com/community/developer-forum/glide-setvalue-creating-new-record-instead-of-selecting-pre/td-p/2791231",
        "document": "Sure, I can help you with that. The GlideRecord setValue method is used to set a field to a specified value. If you're finding that it's creating a new record instead of selecting pre-existing choices, it's likely that you're using it incorrectly. Here's how you should be using it:\n\n1. First, you need to initialize a GlideRecord object for the table you're working with. For example, if you're working with the 'incident' table, you would do something like this:\n\njavascript\n\nvar gr = new GlideRecord('incident');\n\n\n\n2. Next, you need to use the get method to retrieve the record you want to update. You can do this by passing the sys_id of the record to the get method. For example:\n\njavascript\n\ngr.get('sys_id_of_the_record');\n\n\n\n3. Once you have the record, you can use the setValue method to set the value of a field. For example, to set the 'priority' field to '1', you would do this:\n\njavascript\n\ngr.setValue('priority', '1');\n\n\n\n4. Finally, you need to use the update method to save your changes to the database. Like this:\n\njavascript\n\ngr.update();\n\n\n\nSo, your complete code would look something like this:\n\njavascript\n\nvar gr = new GlideRecord('incident');\n\nif (gr.get('sys_id_of_the_record')) {\n\ngr.setValue('priority', '1');\n\ngr.update();\n\n}\n\nRemember to replace 'sys_id_of_the_record' with the actual sys_id of the record you want to update.\n\nIf you're still having issues, please provide more details about your problem and I'll be happy to help further."
    },
    {
        "link": "https://servicenow.com/community/developer-forum/how-do-i-use-gr-setvalue/m-p/1419333",
        "document": "I would like to add a process to insert a record into the description field of an incident in a script.\n\nI understand that I can write the script using the following, but there are two things I would like you to tell me.\n\n1) gr.setValue(\"A\", \"B\"); ⇐ Please let me know if there is a docs URL that explains this expression. I looked for it, but couldn't find it.\n\n2)I'm not sure what I should put in A and B, so please let me know."
    },
    {
        "link": "https://servicenow.com/community/developer-articles/setvalue-reference-fields-variables-use-the-value-and/ta-p/2310852",
        "document": "One of the most common performance scripting mistakes I see on the ServiceNow Community and in customer Instances: the use of setValue() on reference fields/variables within Client-Side scripting. What mistake do I mean? Only providing a sys_id as a second parameter when using setValue().\n\nLet's explain and what to do about this.\n\nWhen using setValue() on a reference field, be sure to include the reference field displayValue as the third parameter. If you set the value without the displayValue, the ServiceNow instance does a synchronous call to retrieve the display value for the record you specified. This extra round trip to the server can impact performance.\n\nSo you might have set up a nice piece of Client-Side scripting, using getReference with a callback, using GlideAjax with getXML, or even better using GlideAjax with getXMLAnswer. Though if you fail to use the third parameter when using setValue(), your effort to perform an efficient lookup is actually wasted.\n\nIf you have a perfect performing instance, you will hardly notice the difference. You can just see this, happen though not enjoying enough. If you have a so so performing instance, a less internet connection, working on virtualization software, then this can become very painful.\n\nThe correct notation would be:\n\nHere an examples of incorrect applying setValue. Incorrect because it concerns a reference variable to sys_user, where they are only providing a second parameter with the sys_id:\n\nSo what additional synchronous call does the ServiceNow instance perform actually? For example using the Chrome DevTools (F12) in combination with the JavaScript Executor (CTRL+SHIFT+J), you could inspect the Network. Let's take the Incident form as an example, and set the Location reference field with only a second parameter.\n\nNotice two requests have been performed. When having a closer look at the second request: the synchronous call which retrieves the display value.\n\nSo an additional server call is executed, and the additional server call is also executed synchronously! While you might just have tried to setup an efficient Client Side script using callback parameters, etcetera which theoretically is good or - when using GlideAjax with getXMLAnswer - even great. Though missing out on the third parameter… all your efforts to setup an efficient Client Side script just went down the drain! What a waste.\n\n\n\n Providing third parameter, value AND displayValue\n\nLet's execute the same, though now while providing a third parameter. A third parameter which represents the displayValue.\n\nNotice only one request has been performed. The additional synchronous server call mentioned in the previous step did not get executed this time!\n\nA small piece of knowledge, though a valuable one concerning performance. Try it yourself, and try to understand the difference. Again, this is one of the most made mistakes I see on the ServiceNow Community and on customer instances.\n\nJust to mention again, the correct way:\n\nAnd that's it actually. Hope you like it. If any questions or remarks, let me know!"
    },
    {
        "link": "https://servicenow.com/community/developer-forum/glide-setvalue-creating-new-record-instead-of-selecting-pre/m-p/2791231",
        "document": "Sure, I can help you with that. The GlideRecord setValue method is used to set a field to a specified value. If you're finding that it's creating a new record instead of selecting pre-existing choices, it's likely that you're using it incorrectly. Here's how you should be using it:\n\n1. First, you need to initialize a GlideRecord object for the table you're working with. For example, if you're working with the 'incident' table, you would do something like this:\n\njavascript\n\nvar gr = new GlideRecord('incident');\n\n\n\n2. Next, you need to use the get method to retrieve the record you want to update. You can do this by passing the sys_id of the record to the get method. For example:\n\njavascript\n\ngr.get('sys_id_of_the_record');\n\n\n\n3. Once you have the record, you can use the setValue method to set the value of a field. For example, to set the 'priority' field to '1', you would do this:\n\njavascript\n\ngr.setValue('priority', '1');\n\n\n\n4. Finally, you need to use the update method to save your changes to the database. Like this:\n\njavascript\n\ngr.update();\n\n\n\nSo, your complete code would look something like this:\n\njavascript\n\nvar gr = new GlideRecord('incident');\n\nif (gr.get('sys_id_of_the_record')) {\n\ngr.setValue('priority', '1');\n\ngr.update();\n\n}\n\nRemember to replace 'sys_id_of_the_record' with the actual sys_id of the record you want to update.\n\nIf you're still having issues, please provide more details about your problem and I'll be happy to help further."
    },
    {
        "link": "https://servicenow.com/docs/bundle/yokohama-api-reference/page/app-store/dev_portal/API_reference/GlideRecord/concept/c_GlideRecordAPI.html",
        "document": ""
    },
    {
        "link": "https://servicenow.com/community/itam-forum/prevent-duplicate-values-on-a-field-on-insert-and-duplicate/m-p/1340949",
        "document": "I want to prevent duplicate asset tags on assets. I wrote a before insert business rule to check for existing asset tags and compare it with current tag, if both of them matches it will throw a error message. When I use the same code for update, it is not allowing to update any records by throwing error.\n\nHow can we prevent duplicate asset tags on update."
    },
    {
        "link": "https://servicenow.com/community/developer-forum/prevent-creation-of-duplicate-records/m-p/3021292",
        "document": "I have created one business rule to create records on a new table based on insert/update on the existing table. The current issue is duplicate records are being created, everytime an insert or update action performed on the existing table. Only one entry of the records are required on the new table.\n\nI want the validation code on the same business rule which is used to create the new records to prevent creation of duplicate records.\n\nIt is a before type business rule running on insert/update.Below is the business rule:\n\n//Get the comma-separated values from the field \n\n //Split the values into an array \n\n //Iterate over each value \n\n //Create a new record in the x_bnp18_spb_mana_0_pps_user_details table"
    },
    {
        "link": "https://servicenow.com/community/itsm-forum/preventing-duplicate-data-being-created-by-update-or-insert/td-p/772503",
        "document": "What you could do is create a new field called \"Name2\" (u_name2) on the appropriate table(s) and select the Unique check box to enforce uniqueness on that field. Then, create a Business Rule that copies the Name field to the new field and the system will automatically enforce the uniqueness:\n\nRemove the field from the form as you will not need to see or populate it. It does not display the most intuitive message:\n\njava.sql.BatchUpdateException: Duplicate entry 'test' for key 'cmdb_ci_server_U1'\n\nInvalid update\n\n\n\n...but you do not have to do any scripting to look for dups, the database takes care of it for you. And it enforces uniqueness on a class per class basis, well, depending on where you create the field and Business Rule. For instance, adding the field and BR on the Server table enforces uniqueness on it and all it's sub-classes (Windows Server, Linux Server, etc...).\n\n\n\nTake a look at demo007 and try to create 2 servers with the same name."
    },
    {
        "link": "https://servicenow.com/community/developer-forum/stop-duplicate-records-from-being-created/m-p/1842255",
        "document": "Hi everyone, I have a UI action that is on the task table and when clicked creates a record on a user created table (u_m2m_time_card). When a record is created is it bringing over the task number and who created the record. The problem I am having is with duplicate entires. Users can hit this UI action multiple times and a new record will be inserted each time. I want to limit that and only one record with the same task number and same user can be created. The same task number can be there, just as long as there isnt one with the same user ID already there. I am struggling to make that happen. Should I do this in the current UI action code? or should I make a new business rule? Here is the code behind the UI action\n\n\n\n\n\nI tried a couple approaches without any success. Any help? Thanks!"
    },
    {
        "link": "https://servicenow.com/community/developer-forum/prevent-creation-of-duplicate-records/td-p/3021292",
        "document": "I have created one business rule to create records on a new table based on insert/update on the existing table. The current issue is duplicate records are being created, everytime an insert or update action performed on the existing table. Only one entry of the records are required on the new table.\n\nI want the validation code on the same business rule which is used to create the new records to prevent creation of duplicate records.\n\nIt is a before type business rule running on insert/update.Below is the business rule:\n\n//Get the comma-separated values from the field \n\n //Split the values into an array \n\n //Iterate over each value \n\n //Create a new record in the x_bnp18_spb_mana_0_pps_user_details table"
    }
]