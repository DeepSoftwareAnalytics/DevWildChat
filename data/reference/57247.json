[
    {
        "link": "https://stackoverflow.com/questions/23147569/using-qsort-for-character-array-in-c",
        "document": "Use instead of in .\n\nWhen you use , instead of , the address pointed to by is interpreted as an address to an , not a .\n\nYour input has the following characters:\n\nIn hex, those are:\n\nIf you treat the addresses pointed to and as , assuming an takes 4 bytes in your system, can be either\n\ndepending on whether you have big endian system or a little endian system.\n\nYou can similarly compute what would be. As you can see, you are already running into unexpected number comparisons. By the time you start comparing the values that are at other byte locations of your input, you are also using memory that you are not supposed to use, and you are reaching the realms of undefined behavior."
    },
    {
        "link": "https://geeksforgeeks.org/qsort-function-in-c",
        "document": "The qsort() in C is a library function used to sort an array of items in ascending order or descending order. It stands for \"quick sort,\" as it implements the quicksort algorithm for sorting which is one of the fastest and most efficient algorithms to sort the array.\n\nLet's take a look at an example that sorts an array of integers:\n\nThis article covers the syntax, examples, and rules for defining comparator for qsort() function in C:\n• arr : Pointer to the first element of the array.\n• n : Number of elements in the array.\n• None This function does not return any value.\n\nThe most important part of the qsort() is the comparator function. To provide universal compatibility, the comparator should follow these rules:\n• None It should accept two const void *\n• None It should return integer value:\n• Less than zero (<0) : If the first argument should be placed before\n• Zero (0) : If both arguments are equal\n• Greater than zero (>0) : If the first argument should be placed after\n\nThe below program demonstrates how we can sort a given array using qsort() function in C.\n\nCan qsort() handle arrays of different data types?\n\nWhat is the time complexity of qsort()?\n\nWhat happens if the comparator function is not provided?\n\nIs qsort() better than manual sorting?"
    },
    {
        "link": "https://stackoverflow.com/questions/46142794/qsort-in-c-for-an-array-of-char-pointers",
        "document": "I've been trying to write a function to sort an array of char pointers and print them out. Using the qsort function, but for some reason, I can't seem to be able to sort them in the output. The inputs are basically an array of MAC addresses in the format:\n\nI've looked around and tried different functions of for the string compare section and other examples of qsort, but I still can't get it to work. My code is:\n\nThe reason why I'm trying to sort it is so that I can count the number of distinct objects efficiently. But the sorting has to be done again at a later stage anyway, so I'll need to reuse the function. Any help is appreciated!"
    },
    {
        "link": "https://tutorialspoint.com/c_standard_library/c_function_qsort.htm",
        "document": "The C stdlib library qsort() function is a sorting function, which is used to sort an array either in ascending or descending order. It is known as quick sort.\n\nThis function is based on the quick sort algorithm which is one of the fastest and most efficient sorting algorithm.\n\nFollowing is the C library syntax of the qsort() function −\n• None base − It represents pointer to the first element of the array to be sorted.\n• None nitems − It represents number of element in the array.\n• None size − It represents size of each element in the array.\n• None compare − It represent a function pointer to a comparison function that compares two elements.\n\nThis function does not returns any values.\n\nIn this example, we create a basic c program to demonstrate the use of qsort() function.\n\nFollowing is the output −\n\nThe below c program sorts the character of an array. Using the qsort() function.\n\nFollowing is the output −\n\nLet's create another c program to sort the string of an array. Using the qsort() function.\n\nFollowing is the output −"
    },
    {
        "link": "https://linux.die.net/man/3/qsort",
        "document": ""
    },
    {
        "link": "https://programiz.com/c-programming/library-function/string.h/strcmp",
        "document": "Learn to code solving problems and writing code with our hands-on C Programming course.\n\nLearn to code solving problems with our hands-on C Programming course!"
    },
    {
        "link": "https://geeksforgeeks.org/strcmp-in-c",
        "document": "In C, strcmp() is a built-in library function used to compare two strings lexicographically. It takes two strings (array of characters) as arguments, compares these two strings lexicographically, and then returns 0,1, or -1 as the result.\n\nLet’s take a look at an example:\n\nExplanation: In this code, two strings, s1 and s2, are declared with the same value “Geeks“. The strcmp() function compares these two strings and returns 0 since they are identical.\n\nThis article covers the syntax of count() function, its working, and common usage with examples.\n\nThe strcmp() function is defined inside the <string.h> header file as:\n\nThe strcmp() function returns three different values after the comparison of the two strings which are as follows:\n• Zero (0) : It returns zero when all of the characters at given indexes in both strings are the same.\n• Greater than Zero ( > 0 ) : Returns a value greater than zero is returned when the first not-matching character in s1 has a greater ASCII value than the corresponding character in s2.\n• Lesser than Zero ( < 0 ) : Returns a value less than zero is returned when the first not-matching character in s1 has a lesser ASCII value than the corresponding character in s2\n\nC strcmp() function works by comparing the two strings lexicographically. It means that it compares the ASCII value of each character till the non-matching value is found or the NULL character is found. The working of the C strcmp() function can be described as follows:\n\n1. It starts with comparing the ASCII values of the first characters of both strings.\n\n2. If the first characters in both strings are equal, then this function will check the second character, if they are also equal, then it will check the third, and so on till the first unmatched character is found or the NULL character is found.\n\n3. If a NULL character is found, the function returns zero as both strings will be the same.\n• None If the ASCII value of the character of the first string is greater than that of the second string, then the positive difference ( > 0 ) between their ASCII values is returned.\n• None If the ASCII value of the character of the first string is less than that of the second string, then the negative difference ( < 0 ) between their ASCII values is returned.\n\nAll of these three cases are demonstrated in the below examples.\n\nExamples of strcmp() in C\n\nThe below examples demonstrate the behaviour of strcmp() in C programs:\n\nExplanation: In this code, strcmp is used to compare two strings, s1 and s2. Since both strings are identical (“g f g”), strcmp returns 0, indicating the strings are equal. The program then prints “Equal“. If the strings were different, strcmp would return a non-zero value, and the program would print “Unequal“.\n\nExplanation: In this code, strcmp compares the two strings first_str (“zfz”) and second_str (“gfg”). Since ‘z’ has a greater ASCII value than ‘g’, strcmp returns a positive value, indicating the strings are unequal. The program prints “Unequal” because of the lexicographical comparison based on ASCII values.\n\nAs strcmp() compare two strings, it can be used to sort the array of strings in the desired order by using it as a comparator function in qsort().\n\nWhat does the positive return value by the strcmp() function mean?\n\nWhat does the negative return value of the strcmp() function mean?\n\nCan the strcmp() function be used to compare non-string data types in C?"
    },
    {
        "link": "https://freecodecamp.org/news/strcmp-in-c-how-to-compare-strings-in-c",
        "document": "Comparing strings is a common task in most programming languages. In C, you can use the function to handle string comparisons.\n\nIn this article, I will show you practical examples of the function, and offer insights into how it compares strings, what its return values mean, and how to use it effectively.\n\nYou'll also see some best practices to help optimize your code.\n\nWhat are Strings in C?\n\nBefore we discuss the function, it is important to understand the basics of strings in C.\n\nA string is an array of characters terminated by a null character ('\\0').\n\nStrings are usually represented either using character pointers ( ) or character arrays ( ).\n\nWhat is the function of C, and how does it work?\n\nThe function is part of the standard C library ( ). Its primary purpose is to compare the characters of the two strings in sequence until it finds a mismatch or until the end of the strings is reached (that is, the null character '\\0'). In our programming world, we call it lexicographic order-based searching.\n\nThe function prototype for is as follows:\n\nHere's what the parameters above mean:\n• s1 denotes the first string to be compared.\n• s2 denotes the second string to be compared.\n\nis like a game that compares two words. It helps us to identify whether a word comes before or after another word in the dictionary.\n• If the first word (s1) comes before the second word (s2) in the dictionary, gives a negative number.\n• If the first word (s1) comes after the second (s2) word in the dictionary, gives a positive number.\n• If both words are the same, gives the number 0.\n\ncompares the corresponding characters from both strings based on their ASCII values, which are numeric codes that represent each character.\n\nTherefore, if the ASCII value of the first differing character in the first string is less than the ASCII value of the corresponding character in the second string, returns a negative number. This indicates that the first string comes before the second string in the dictionary.\n\nIf the ASCII value of the first differing character in the first string is greater than the ASCII value of the corresponding character in the second string, returns a positive number. This indicates that the first string comes after the second string in the dictionary.\n\nIf the two strings are equal up to the end of the shorter string, returns a negative, zero, or positive value depending on whether the longer string has a character with a smaller, equal, or greater ASCII value than the null character.\n\nActually, the C compiler implements this logic of comparing the ASCII values of characters in two strings and returning the result accordingly.\n\nLet me now explain each of the lines from the code given above.\n\nHere, I have taken two different strings as two different character arrays, as we do not have access to direct strings in the C programming language.\n\nIn the first character string ( ), I have stored the string . In the second character string ( ), I have stored the string . As the function gives a boolean output (true/false, or 0/1), I have taken another int variable named to store the boolean value ( for and for ).\n\nThe function compares the two strings, and finds out that the first string comes before the second string . Therefore, the function returns a negative value indicating that the first string is less than the second string.\n\nBased on the value in , it prints String 1 is less than string 2. .\n\nIf you are confused about \"the string comes before or after another string\" then let me explain to you a bit more.\n\nWhen we say that the first string comes before the second string, we mean that if the two strings were listed in a dictionary or a sorted list of words, the first string would appear before the second string.\n\nIn the case of the program above, the first string is , and the second string is . If we were to look up these two words in a dictionary, we would find that appears before , which means that the first string comes before the second string.\n\nThe function compares the two strings character by character and determines which string comes first in the dictionary based on the ASCII values of the characters.\n\nIn this case, the first character of (which is ) has a lower ASCII value (ASCII value for a = 97) than the first character of (which is and the ASCII value for b = 98), so returns a negative value, indicating that the first string comes before the second string.\n\nI hope this clears up any confusion regarding what the phrase \"one string comes after/before another string\" means.\n\nHere I converted both strings into lowercase. I used a for loop to change all the characters in the string to lowercase using the function . The loops convert both strings to lowercase by iterating over each character of the strings using an index variable , and calling the function on each character to convert it to lowercase.\n\nAfter converting both strings into lowercase, I called the function to check whether both strings are equal or not, like earlier. I stored the output of the function in a new variable named , like earlier.\n\nThe statement checks the value of and prints out the corresponding message depending on whether the strings are equal, or which string is less or greater. Here, the two strings become equal after converting them to lowercase. Thus, the first statement executes and provides the output.\n\nKeep in mind that, after converting both strings to lowercase, the value of is , which is the same as the value of in the ASCII.\n\nTherefore, when the function is called, it returns , which indicates that the strings are equal. This can be useful when we want to compare strings that may differ in case but should be considered equal.\n\nHere are some best practices to follow when using the function:\n• Always include the header when using .\n• To compare case-insensitive strings, use a custom function like or a standard library function like .\n• Be cautious when comparing strings that may contain non-ASCII characters, as uses the difference in ASCII values for comparisons, which might not work as expected for non-ASCII characters. In such cases, consider using a Unicode-aware comparison function or library.\n\nIf you want to learn more about ASCII characters, check out this article.\n\nApart from , there are other string comparison functions available in the C standard library:\n• : Compares up to a specified number of characters of two strings. It is useful when you want to compare only a portion of the strings.\n• : This is quite interesting. Let me explain more about this.\n\nThe function is like a game that helps us compare two words or strings, just like . But is designed to handle strings that contain non-ASCII characters or require language-specific comparisons, such as words from different languages.\n\nuses the rules for comparing words that are specific to the language or region, based on the current locale setting of the computer. In other words, it compares words according to the language-specific collation rules of the locale, which may be different from the standard ASCII ordering used by .\n\nFor example, in the Spanish language, the word \"cañón\" (which means \"canyon\" in English) is sorted after \"casa\" (which means \"house\" in English), because the letter \"ñ\" is considered a separate letter in the Spanish alphabet, and comes after \"n\".\n\nSo, can be useful for comparing words from different languages or regions that have specific collation rules, and we use this function for this kind of specific need.\n\nIn this article, we've explored the function in C, how it compares strings, and its return values. We've also looked at examples and best practices for using effectively.\n\nWith this knowledge, you can easily compare strings in C like a pro. Remember to consider alternative comparison functions like and when working with specific use cases, such as partial or locale-specific string comparisons.\n\nIf this article helps you in any way, then let me know via Twitter or LinkedIn. You can also follow me on GitHub and check my YouTube channel, and my website. You can also buy me a coffee if you want to support me."
    },
    {
        "link": "https://tutorialspoint.com/c_standard_library/c_function_strcmp.htm",
        "document": "The C Library strcmp() function is used to compare two strings. It checks each character in the string one by one until it finds a difference or reaches the end of the one string. Additionally, the strings comparison is based on ASCII values.\n\nFollowing is the syntax of the C library strcmp() function −\n\nThis function accepts the following parameters−\n• None str_1 − This parameter define the first string to be compared.\n• None str_2 − This is the second string to compare with first/previous string.\n\nThis function returns the integer value which is −\n• None Zero, if the string are equal.\n• None Negative, if the first string is less than second string lexicographically.\n• None Positive, if the first string is greater than second string lexicographically.\n\nIn this example, we demonstrate the usage of string characters comparison using strcmp() function.\n\nThe above code produces the following result−\n\nTo check whether the given strings are case-sensitive or not using strcmp() and conditional statement.\n\nOn execution of above code, we get the following result −\n\nBelow the example create the strings of different size and check its comparison using strcmp().\n\nAfter executing the above code, we get the following result−\n\nHere, we use strcmp() to compare the two different string with the help of lexicographical order.\n\nIn this code, str1 (\"text\") comes before str2 (\"Notebook\") lexicographically. The strcmp() function returns a negative value.\n\nThe above code produces the following result −"
    },
    {
        "link": "https://w3schools.com/c/ref_string_strcmp.php",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    }
]