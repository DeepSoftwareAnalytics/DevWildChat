[
    {
        "link": "https://php.net/manual/en/function.posix-geteuid.php",
        "document": "if you for some reason need the euid without depending on php-posix being available, try"
    },
    {
        "link": "http://php.adamharvey.name/manual/ro/function.posix-geteuid.php",
        "document": ""
    },
    {
        "link": "https://onlinephp.io/posix-geteuid/manual",
        "document": "posix_geteuid - Return the effective user ID of the current process\n\nReturn the numeric effective user ID of the current process. See also posix_getpwuid for information on how to convert this into a useable username.\n\nThis function has no parameters.\n\nReturns the user id, as an int"
    },
    {
        "link": "http://php.adamharvey.name/manual/kr/function.posix-geteuid.php",
        "document": ""
    },
    {
        "link": "https://onlinephp.io/posix-geteuid/examples",
        "document": "posix_geteuid - Return the effective user ID of the current process"
    },
    {
        "link": "https://stackoverflow.com/questions/1008436/how-does-one-easily-add-posix-support-to-php-using-yum",
        "document": "I am running CentOS 5.2 and using yum to manage packages. I have had little luck installing php-posix but know with almost 100% certitude that it is a real and available package...somewhere. Has anyone had luck installing it?\n\nFWIW, I am using the following:\n\nUpdate: I've realized that this may be an issue with my host (Slicehost) as I do in fact have cli, posix, and pcntl enabled for my PHP version (5.2.9)"
    },
    {
        "link": "https://stackoverflow.com/questions/2197366/how-to-install-posix-in-php",
        "document": "POSIX does not appear when I run , however, I see it from the on Linux with Plesk 9.\n\nBasically, I can't use functions as described at http://www.php.net/manual/en/ref.posix.php\n\nCould someone show me how to install it? Thank you."
    },
    {
        "link": "https://php.watch/articles/php-8.3-install-upgrade-on-debian-ubuntu",
        "document": "PHP 8.3 is 2023's major new update to PHP. It brings nice new features such as typed class constants, a new set of Exceptions in DateTime extension, a new function, and a handful of new features, changes, and deprecations. As always, PHP 8.3 brings several bug fixes and improvements as well as performance improvements.\n\nThis article explains how to install PHP 8.3 on modern Debian systems and Ubuntu systems. Some of the most popular PECL extensions are also available to install in a similar way, which are listed in the Installing PECL Extensions section.\n\nA similar guide is also available for Installing/Upgrading PHP 8.3 on RHEL/Fedora/CentOS Stream/Alma/Rocky Linux.\n• Detailed PHP 8.3 Installation Steps\n• List and keep note of existing PHP packages\n\nIn the terminal as a sudo-capable user, run the following commands for Debian or Ubuntu. For detailed steps, go to the Detailed Installation/Upgrade guide.\n\nNone of the current Debian and Ubuntu versions include PHP 8.3 in their default software repositories. Prebuilt PHP packages are available from a repository maintained by Ondřej Surý, which this article uses. Packages in this repository follow the same package configuration, package names, and configuration as the PHP packages provided by the OS software repositories.\n\nThis article focuses on Ubuntu 22.04 (Jammy), Ubuntu 20.04 (Focal), Ubuntu 24.04 (Noble), Debian 10 (Buster), Debian 11 (Bullseye), and Debian 12 (Bookworm).\n\n2. List and keep note of existing PHP packages\n\nWhen upgrading an existing PHP version, the following command lists all packages installed with the word in the package name, and saves it to a file as well as printing it in the terminal.\n\nThis will be helpful to install the corresponding PHP 8.3 packages in the next steps.\n\nThis step is not necessary when installing PHP on a new system.\n\nPHP 8.3 is not available to download from any of the current Debian or Ubuntu software repositories. Debian and Ubuntu software repositories maintained by Ondřej Surý contain the main PHP 8.3 packages and several popular PECL packages, and they are kept up to date.\n\nOn Ubuntu, the packages are only built on LTS versions. This step will fail on non-LTS Ubuntu versions such as Ubuntu 22.10.\n\nThe following commands add the repository to the list of software repositories, and runs to fetch list of packages available from the new repository as well as existing repositories.\n\nWith Ondrej's PHP repository added, PHP packages can now be installed with . All PHP 8.3 packages follow pattern. These names match and override the PHP versions provided by the OS's own software repositories.\n• The package is a meta-package that installs several PHP extensions. It is possible to selectively disable individual extensions later. PHP Core extensions such as Date, Phar, JSON, ctype, and random are always included. It is not necessary nor possible to install them as separate packages.\n• Instead of installing , it is also possible to install individual packages. Installing is roughly equivalent to installing all of the extensions as shown below:\n• installs the PHP CLI, and symlinks to . See Running PHP 8.3 Alongside Other Versions for more information.\n• installs PHP's FPM SAPI for web server integration. See Web Server Integration for alternative approaches.\n\nSeveral PECL extensions are also available in the repository to conveniently install them without having to compile them. This includes some of the more popular PECL extensions such as Image Magick, APCu, and Xdebug.\n\nThe following are some of the PECL extensions and their package names to be used with to install.\n\nNote that these PECL extensions are developed by individual developers/teams, and may not be as well tested. It might also take some for these packages to be uploaded, pending compatibility fixes from corresponding extension developments.\n\nThe following runs a simple search on :\n\nThe file created in step #2 should come handy here, to refer to the existing PHP packages.\n\nIn most of the use cases, PHP is integrated with a web server. Integrating with PHP-FPM over Fast CGI protocol is the most common approach, while it is also possible to integrate PHP with other SAPIs.\n\nApache web server When installing package, if Apache web server ( ) is present, there will be a new file that makes it convenient to toggle PHP 8.3 integration:\n\nWhen Apache is configured to run PHP as an Apache module (commonly called as or ), install package instead of :\n\nNginx, Caddy, Litespeed, and other servers over Fast CGI\n\nThe installs PHP-FPM, and registers a service for PHP 8.3 FPM at socket address .\n\nFor web servers that integrate with PHP over Fast CGI, change/configure the UNIX socket path to this UNIX socket address.\n\nFor example, on Nginx, this involves changing the directive:\n\nSee How to use Caddy Server with PHP for a detailed article on using Caddy server with PHP.\n\nAfter installing all the packages, comes the moment of truth to see if the new installation was successful.\n\nRunning in the terminal should show something like this:\n\nThe list of modules can be listed with . This list will include several bundled PHP extensions. See Migrate Configuration on migrating the PHP INI directives and enabled extensions to the new PHP versions.\n\nThis step only applies when updating to PHP 8.3 from an older PHP version\n\nConfiguration files for the new PHP 8.3 installation are at directory. Existing PHP installations should also be in the directory.\n\nDo not copy existing PHP INI files to . Instead, compare two corresponding PHP INI files and update the PHP 8.3 variant only when necessary.\n\nSee What's new and changed in PHP 8.3 to see the deprecated INI directives and the new INI directive added in PHP 8.3.\n\nWhen using PHP-FPM, make sure to replicate the correct number of FPM processes and process models.\n\nand scripts provide continent toggles for PHP modules. For example, the following disables the extension for FPM on PHP 8.3:\n\nThis step only applies when updating to PHP 8.3 from an older PHP version\n\nTo remove old PHP versions, run with the PHP version prefix. For example, the following removes the packages and configuration for PHP 8.2:\n\nIt is possible to install PHP 8.3 alongside other PHP versions. This is in fact what happens when installing PHP 8.3 without removing old PHP packages first.\n\nBy default, all packages install PHP CLI binary at location. What this means for PHP 8.3 installations is that the any application that calls PHP CLI as will use the last-installed PHP-CLI binary (PHP 8.3 in this case). When using multiple PHP versions, make sure to invoke the correct PHP binary by directly calling the executable. PHP 8.3 can be directly invoked as .\n\nThe default name will be symlinked to the latest PHP version by default, but it is possible to change to where the default command links. Use command to change the path to which command should be linked.\n\nThis brings up a prompt to interactively select the alternative PHP binary path that points to.\n\nTo set the path without the interactive prompt:\n• How to compile PHP from source on Debian/Ubuntu - Beginner's guide\n• How to compile PHP from source on Fedora/RHEL/etc\n• How to install or upgrade to PHP 8.3 on Fedora/RHEL/CentOS/etc\n• How to install or upgrade to PHP 8.3 on macOS with Homebrew"
    },
    {
        "link": "https://php.net/manual/en/install.unix.debian.php",
        "document": "Installing from packages on Debian GNU/Linux and related distributions\n\nWhile PHP can be installed from source, it is also available through packages from » Debian GNU/Linux. This is also true for other distributions based on Debian, such as Ubuntu, Kali Linux, and Linux Mint.\n\nWarning Builds from third-parties are considered unofficial and not directly supported by the PHP project. Any bugs encountered should be reported to the provider of those unofficial builds unless they can be reproduced using the builds from » the official download area.\n\nThe packages can be installed using either the apt or aptitude commands. This manual page uses these two commands interchangeably.\n\nFirst, note that other related packages may be desired like to integrate with Apache 2, and for PEAR. Second, before installing a package, it's wise to ensure the package list is up to date. Typically, this is done by running the command apt update. Example #1 Debian Install Example with Apache 2 APT will automatically install the PHP module for Apache 2 and all of its dependencies, and then activate it. Apache should be restarted in order for the changes take place. For example: Example #2 Stopping and starting Apache once PHP is installed\n\nIn the last section, PHP was installed with only core modules. It's very likely that additional modules will be desired, such as MySQL, cURL, GD, etc. These may also be installed via the apt command. The list of packages will include a large number of packages that includes basic PHP components, such as , , and , as well as many PHP extensions. When extensions are installed, additional packages will be automatically installed as necessary to satisfy the dependencies of those packages. APT will automatically add the appropriate lines to the different related files like , , etc. and depending on the extension will add entries similar to . However, restarting the web server (like Apache) is required before these changes take affect."
    },
    {
        "link": "https://reintech.io/blog/beginners-guide-php-posix-library-process-control",
        "document": "In this tutorial, we will be discussing the PHP POSIX library and its usage for process control. The POSIX library provides a set of functions for interacting with the underlying operating system and managing processes. It is especially useful for developers who need to create and manage system processes, signal handling, and other operations related to process control using PHP. This guide is designed to provide an introduction to the PHP POSIX library and help you get started with using it in your projects. So, let's dive right in!\n\nThe PHP POSIX library is a collection of functions that allow you to interact with the underlying operating system, specifically the POSIX-compliant systems like Unix, Linux, and macOS. The library provides a set of functions that enable you to manage processes and various other system resources. Some of the key features of the PHP POSIX library include:\n\nTo use the PHP POSIX library, you will need to have the extension installed and enabled on your system. You can check if the extension is installed using the following command:\n\nIf it's not installed, you can install it using the package manager of your system:\n\nOne of the primary features of the PHP POSIX library is the ability to create and manage processes. The function is used to create a new process, which is a child of the current process:\n\nThe function returns if the fork fails, if it's the child process, and the child process ID if it's the parent process. You can use this to control the flow of execution in your script.\n\nYou can also use the function to send a signal to a specific process. For example, you can send a termination signal to the child process like this:\n\nThe PHP POSIX library allows you to handle signals sent to the process. You can use the function to define a signal handler function that will be called when a specific signal is received:\n\nDon't forget to call regularly to ensure that any pending signals are processed:\n\nThe PHP POSIX library also provides functions to retrieve various system information. For example, you can use the function to get information about the system:\n\nThis will output something like:\n\nYou can also retrieve information about the current process, like the process ID, the parent process ID, and the user ID, using the , , and functions respectively:\n\nIn this tutorial, we discussed the basics of the PHP POSIX library and its usage for process control. This library provides a set of powerful functions for interacting with the underlying operating system, managing processes, handling signals, and more. If you are looking to hire PHP developers who are proficient in using the PHP POSIX library, Reintech is a platform that can connect you with skilled developers to help you with your projects.\n\nNow that you have a basic understanding of the PHP POSIX library, you can start using it in your projects to manage processes and interact with the system at a lower level. Keep exploring the functions provided by the library to unlock the full potential of process control using PHP!"
    }
]