[
    {
        "link": "https://github.com/7nohe/openapi-react-query-codegen",
        "document": "Code generator for creating React Query (also known as TanStack Query) hooks based on your OpenAPI schema."
    },
    {
        "link": "https://swagger.io/docs/open-source-tools/swagger-codegen/codegen-v3/about",
        "document": "This is the Swagger Codegen project, which allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an OpenAPI Description.\n\nüíö If you would like to contribute, please refer to guidelines and a list of open tasks.üíö\n\nüìî For more information, please refer to the Wiki page and FAQ üìî\n\n‚ö†Ô∏è If the OpenAPI Description or Swagger file is obtained from an untrusted source, please make sure you‚Äôve reviewed the artefact before using Swagger Codegen to generate the API client, server stub or documentation as code injection may occur. ‚ö†Ô∏è\n\nBoth 2.X and 3.X version lines of Swagger Codegen are available and are independently maintained.\n‚Ä¢ Versions 2.X ( ) and 3.X ( ) have different group ids.\n‚Ä¢ OpenAPI 3.0.X is supported from the 3.X version only\n\nFor full versioning info, please refer to the versioning documentation.\n\nTo get a complete and/or realtime listing of supported languages/frameworks, you can directly query the online generator API or via a command.\n\nCheck out the OpenAPI Specification for additional information about the OpenAPI project.\n\nThe OpenAPI Specification has undergone 3 revisions since initial creation in 2010. The current stable versions of Swagger Codegen project have the following compatibilities with the OpenAPI Specification:\n\nüíÅ Here‚Äôs also an overview of what‚Äôs coming around the corner:\n\nFor detailed breakdown of all versions, please see the full compatibility listing.\n\nTo get up and running with Swagger Codegen, check out the following guides and instructions:\n\nOnce you‚Äôve your environment setup, you‚Äôre ready to start generating clients and/or servers.\n\nAs a quick example, to generate a PHP client for Swagger Petstore, please run the following:\n\nNote: if you‚Äôre on Windows, replace the last command with:\n\nYou can also download the JAR (latest release) directly from maven.org.\n\nTo get a list of general options available, please run:\n\nTo get a list of PHP specified options (which can be passed to the generator with a config file via the option), please run:\n\nYou can build a client against the swagger sample petstore API as follows:\n\nThis will run the generator with this command:\n\nYou can get the options with the command (below only shows partial results):\n\nYou can then compile and run the client, as well as unit tests against it:\n\nOther languages have petstore samples, too:\n\nIt‚Äôs just as easy! Use the flag to point to either a server or file.\n\nüîß Swagger Codegen comes with a tonne of flexibility to support your code generation preferences. Checkout the generators documentation which takes you through some of the possibilities as well as showcasing how to generate from local files.\n\nYou may not want to generate all models in your project. Likewise you may want just one or two apis to be written, or even ignore certain file formats. If that‚Äôs the case check the selective generation instructions.\n\nThere are different aspects of customizing the code generator beyond just creating or modifying templates. Each language has a supporting configuration file to handle different type mappings, or bring your own models. For more information check out the advanced configuration docs.\n\nYou have options. The easiest is to use our online validator which not only will let you validate your OpenAPI file, but with the debug flag, you can see what‚Äôs wrong with your file. Check out Swagger Validator to validate a petstore example.\n\nIf you want to have validation directly on your own machine, then Spectral is an excellent option.\n\nTo do so, just use the flag when reading a spec file. This creates HTML documentation that is available as a single-page application with AJAX. To view the documentation:\n\nWhich launches a node.js server so the AJAX calls have a place to go.\n\nIt‚Äôs possible to leverage Swagger Codegen directly within your preferred CI/CD workflows to streamline your auto-generation requirements. Check out the workflows integration guide to see information on our Maven, Gradle, and GitHub integration options. üöÄ\n\nIf you don‚Äôt want to run and host your own code generation instance, check our our online generators information.\n\nPlease refer to this page.\n\nPlease disclose any security-related issues or vulnerabilities by emailing security@swagger.io, instead of using the public issue tracker.\n\nüíöüíöüíö We‚Äôd like to give a big shout out to all those who‚Äôve contributed to Swagger Codegen, be that in raising issues, fixing bugs, authoring templates, or crafting useful content for others to benefit from. üíöüíöüíö"
    },
    {
        "link": "https://github.com/Shaddix/react-query-swagger",
        "document": "This projects autogenerates @tanstack/query hooks or strongly-typed axios/fetch clients based on Swagger API definitions.\n‚Ä¢ Support for DateTime and Date (i.e. you get JS objects from HTTP client calls)\n\nSo, given that you have a petstore-like API definition, you could autogenerate a list of react-query hooks, to call GET methods from the API (queries). or POST/PUT/PATCH/DELETE methods (mutations).\n\nYou could also use this library if you want to generate nice tree-shakable HTTP clients for your Swagger API definition (we use NSwag under the hood).\n\nInstall the package into your project using yarn/npm (as a dev-dependency). You'll also need to add @tanstack/query (which you probably already have if you are interested in this library).\n\nThen create/update your autogenerated hooks by calling (adjusting the URL and output path)\n‚Ä¢ react-query v3: please REMOVE a switch from all commands\n‚Ä¢ Solid: COMING SOON. Please +1 in the feature request if you want it to be available.\n\nThis will generate API clients based on Axios. If you prefer , just use it as a template (mind the last parameter)\n\nYou will probably want to add this script to your package.json to call it every time your API changes.\n\nAll parameters are passed to NSwag, you could read about them in NSwag documentation. Personally I tend to use it with few additional parameters, which are combined under :\n\nYou could check a pet-client example, which shows the list of pets. It's a standard react-query setup, to query some pet data you just need to write:\n\nto perform some mutation you could call\n\nYou could pass parameters for each request via the last parameter of . E.g.:\n\nSets the function which returns Axios instance to be used in http request. By default is called for every http request (this method only exists if you generated client using Axios template).\n\nSets the function to return the function to be used in http request. By default is returned, which contains the default function. This method only exists if you used Fetch template.\n\nYou could define additional for each query by calling\n\nIf you use Axios, you could adjust AxiosRequestConfig per endpoint by using\n\nand are also available.\n\nReact-query has an experimental support for persisting and restoring query cache (to preserve the cache between e.g. browser restarts). requires additional configuration to correctly work with hydration (cache restoration) because of:\n‚Ä¢ All internal DTOs are JS classes, which are not recreated by (which is used by persisters by default).\n‚Ä¢ has Date objects in DTOs, which are not restored by as well.\n\nSo to make them work together correctly, you have to provide a special hydration function (which is autogenerated along with API clients) and call :\n\nFor the queryKey parameter should start with 2 same items as the underlying 'normal' query (see details).\n\nInjects option to all queries in children components. Might be useful if e.g. you want to refetch all queries in certain part of your app.\n\nFirst wrap your component in and specify your meta tags (make sure they are constant):\n\nYou could refetch based on meta via the following call:\n\nIn addition to NSwag parameters we have 4 specific parameters:\n\nIt generates instead of Classes, which minimizes the bundle size (since Interfaces are stripped off during bundling).\n\nThis mode is experimental and is being tested at the moment.\n\nThis flag helps in tree-shaking and code-splitting NSwag Clients.\n\nBy default NSwag generates http clients as Classes and puts all Classes in a single file. This prevents treeshaking, so even if you use a single method from class, whole class gets included in your bundle. Also since they are all in a single file, you can't code-split clients into chunks (all Clients will be loaded in a single chunk).\n\nNow it's possible to fix it and generate NSwag Clients as functions (without Classes) splitted per file.\n\nThis comes with drawbacks, since some NSwag flags rely on Classes being used, so these options do not work with flag. So if you use any of these, you won't be able to use the flag:\n‚Ä¢ /baseClass (since there are no classes anymore)\n‚Ä¢ /useGetBaseUrlMethod (since there is no base class)\n‚Ä¢ /useTransformOptionsMethod (since there's no base class to define TransformOptions in), this might be implemented in future\n‚Ä¢ /useTransformResultMethod (since there's no base class to define TransformOptions in), this might be implemented in future\n\nYou could use and / methods to configure the baseUrl and Axios/Fetch instances being used (which you previously configured via class constructors).\n\nUse this flag to disable generating react-query hooks.\n\nYou might want this flag if you want to use /modules, but you are not using react-query and don't need the generated hooks.\n\nThis flag executes few regex replaces over the generated code. This is an easy way to achieve the behavior we want without forking and maintaining NSwag & NJsonSchema templates ourselves.\n\nHere are the regex rules and rationale behind them:\n‚Ä¢ Replace is made because this is what server (at least .NET :)) actually returns (at least by default)\n‚Ä¢ Again, server actually returns , we don't want to change that.\n‚Ä¢ Performs the following change (in method), from: This is to be able to send both and to the server (important for PATCH requests)\n‚Ä¢ Performs the following change (in method), from: This is to be able to send both and to the server (important for PATCH requests)\n\nThis option basically passes the following parameters to NSwag .\n\nHere's a rationale behind each of them:\n‚Ä¢ Otherwise, optional parameters are generated as mandatory. E.g.:\n‚Ä¢ Otherwise, if is , there's no code to convert objects\n‚Ä¢ Otherwise PATCH dtos have all their properties defined as mandatory:\n‚Ä¢ If we use as null value, unnecessary code gets added to and functions:\n‚Ä¢ This gives a typed-possibility to create classes from interfaces (otherwise you have to use method)\n‚Ä¢ We need this to be able to use both and as values in PATCH requests\n\nBy default we generate hooks for GET requests only. Though, sometimes backend uses POST queries to actually get the data (e.g. if request parameters are big and require HTTP BODY to send it). In this case if the name of your POST endpoints start with , you could use parameter, and we will generate hooks for them as well.\n\nAlternatively, you could specify another flag to determine which operations (beside GET) should be treated as GET (and thus have functions generated). Example of the condition: (it is actually used by default). Liquid template syntax is used here.\n\nThere are some of breaking changes introduced in v15, because in v15 queries/mutations for each Controller is extracted into a separate file (and Classes are not used anymore).\n‚Ä¢ Getting/Setting default query properties is now done via functions (not via properties like it was before). So, instead of using property you'd need to use and .\n‚Ä¢ If you used property from the Query class to access POST/PUT methods (e.g. ), you'd be better off using (together with flag), or if you want to continue using Classes instead of Modules.\n‚Ä¢ If your API actions clash with JS reserved keywords your action would have underscore appended to the name (e.g. will be named ). Also in V15 it's possible to alter NSwag Clients to use plain functions instead of Classes. It makes treeshaking work for your Clients, thus significantly reducing the bundle size if you use only a few API methods. Use either flag directly, or which includes it.\n\nUnder the cover it's just a couple of template files for NSwag and a small script to easily use them.\n\nIssues and Pull Requests are welcome.\n\nFor any kind of private consulting or support you could contact Artur Drobinskiy directly via email."
    },
    {
        "link": "https://restack.io/p/open-source-codegen-answer-react-query-openapi",
        "document": ""
    },
    {
        "link": "https://restack.io/p/swagger-codegen-answer-example",
        "document": "Generating clients for your API can significantly enhance the development experience, especially when working with various programming languages. The OpenAPI Generator is a powerful tool that allows you to create client libraries, server stubs, and API documentation from an OpenAPI Specification. This section will delve into the specifics of using OpenAPI Generator to create clients, providing practical examples and insights.\n\nTo begin using OpenAPI Generator, you first need to install it. You can do this via Homebrew on macOS, Docker, or by downloading the JAR file directly. Here‚Äôs how to install it using Homebrew:\n\nAlternatively, if you prefer using Docker, you can run:\n\nOnce you have OpenAPI Generator installed, you can generate a client by running a simple command. For example, to generate a Python client, you would use:\n‚Ä¢ : Indicates the target language for the client (e.g., , , ).\n‚Ä¢ : Defines the output directory where the generated client will be saved.\n\nOpenAPI Generator allows for extensive customization of the generated code. You can use configuration files to modify the output according to your needs. For instance, you can specify package names, library versions, and even include additional dependencies.\n\nHere‚Äôs an example of a configuration file for a Java client:\n\nYou can then pass this configuration file to the generator using the option:\n\nWhile OpenAPI Generator is a popular choice, it‚Äôs worth mentioning Swagger Codegen as an alternative. Swagger Codegen also allows you to generate client libraries from OpenAPI specifications. The command to generate a client using Swagger Codegen is similar:\n\nUsing OpenAPI Generator to create clients can streamline your development process, making it easier to integrate with your API. By following the steps outlined above, you can quickly generate a client tailored to your specific programming language and requirements. For more detailed information, refer to the official documentation at OpenAPI Generator Documentation."
    },
    {
        "link": "https://reddit.com/r/typescript/comments/7npbu0/static_types_from_json_and_other_data_quicktype",
        "document": "Create your account and connect with a world of communities.\n\nBy continuing, you agree to our\n\nand acknowledge that you understand the"
    },
    {
        "link": "https://quicktype.io/typescript",
        "document": "A better way to work with APIs."
    },
    {
        "link": "https://stackoverflow.com/questions/48693335/how-to-generate-basic-typescript-interfaces-from-swagger-schema",
        "document": "Not sure if that's a sane way to do this, it's the first time I'm playing around with Swagger.\n\nI bumped into the following link and pasted the schema from the project I integrate with. From the top 'Generate Client' menu I chose one of the TypeScript presets and it generated a minimal project where I could extract the bits I needed, interface and classes, etc.\n\nI tried running your schema. Here's a small excerpt of the generated code:\n\nMaybe with a bit more tweaking it can make exactly what you're looking for.\n\nFurther reading may be about tools like https://github.com/swagger-api/swagger-codegen but the online web editor is a quick and dirty way to do this."
    },
    {
        "link": "https://github.com/glideapps/quicktype",
        "document": "generates strongly-typed models and serializers from JSON, JSON Schema, TypeScript, and GraphQL queries, making it a breeze to work with JSON type-safely in many programming languages.\n‚Ä¢ Try in your browser.\n‚Ä¢ Read 'A first look at quicktype' for more introduction.\n‚Ä¢ If you have any questions, check out the FAQ first.\n\nMissing your favorite language? Please implement it!\n\nThere are many ways to use . app.quicktype.io is the most powerful and complete UI. The web app also works offline and doesn't send your sample data over the Internet, so paste away!\n\nFor the best CLI, we recommend installing globally via :\n\nThe recommended way to use is to generate a JSON schema from sample data, review and edit the schema, commit the schema to your project repo, then generate code from the schema as part of your build process:\n\nYou can achieve a similar result by writing or generating a TypeScript file, then quicktyping it. TypeScript is a typed superset of JavaScript with simple, succinct syntax for defining types:\n\nYou can use TypeScript just like JSON schema was used in the last example:\n\nYou can use as a JavaScript function within or browsers. First add the package:\n\nIn general, first you create an value with one or more JSON samples, JSON schemas, TypeScript sources, or other supported input types. Then you call , passing that value and any options you want.\n\n// We could add multiple samples for the same desired // type, or many sources for other types. Here we're // just making one type from one piece of sample JSON. : : inputData : // We could add multiple schemas for multiple types, // but here we're just making one type from JSON schema. : : inputData : : :\n\nThe argument to is a complex object with many optional properties. Explore its definition to understand what options are allowed.\n\nis Open Source and we love contributors! In fact, we have a list of issues that are low-priority for us, but for which we'd happily accept contributions. Support for new target languages is also strongly desired. If you'd like to contribute, need help with anything at all, or would just like to talk things over, come join us on Slack.\n\nis implemented in TypeScript and requires and to build and run.\n\nClone this repo and do:\n\nInstall Visual Studio Code, open this workspace, and install the recommended extensions:\n\nWhen working on an output language, you'll want to view generated output as you edit. Use to watch for changes and recompile and rerun for live feedback. For example, if you're developing a new renderer for , you could use the following command to rebuild and reinvoke as you implement your renderer:\n\nThe command in quotes is passed to , so you can render local files, URLs, or add other options."
    },
    {
        "link": "https://github.com/Shaddix/react-query-swagger",
        "document": "This projects autogenerates @tanstack/query hooks or strongly-typed axios/fetch clients based on Swagger API definitions.\n‚Ä¢ Support for DateTime and Date (i.e. you get JS objects from HTTP client calls)\n\nSo, given that you have a petstore-like API definition, you could autogenerate a list of react-query hooks, to call GET methods from the API (queries). or POST/PUT/PATCH/DELETE methods (mutations).\n\nYou could also use this library if you want to generate nice tree-shakable HTTP clients for your Swagger API definition (we use NSwag under the hood).\n\nInstall the package into your project using yarn/npm (as a dev-dependency). You'll also need to add @tanstack/query (which you probably already have if you are interested in this library).\n\nThen create/update your autogenerated hooks by calling (adjusting the URL and output path)\n‚Ä¢ react-query v3: please REMOVE a switch from all commands\n‚Ä¢ Solid: COMING SOON. Please +1 in the feature request if you want it to be available.\n\nThis will generate API clients based on Axios. If you prefer , just use it as a template (mind the last parameter)\n\nYou will probably want to add this script to your package.json to call it every time your API changes.\n\nAll parameters are passed to NSwag, you could read about them in NSwag documentation. Personally I tend to use it with few additional parameters, which are combined under :\n\nYou could check a pet-client example, which shows the list of pets. It's a standard react-query setup, to query some pet data you just need to write:\n\nto perform some mutation you could call\n\nYou could pass parameters for each request via the last parameter of . E.g.:\n\nSets the function which returns Axios instance to be used in http request. By default is called for every http request (this method only exists if you generated client using Axios template).\n\nSets the function to return the function to be used in http request. By default is returned, which contains the default function. This method only exists if you used Fetch template.\n\nYou could define additional for each query by calling\n\nIf you use Axios, you could adjust AxiosRequestConfig per endpoint by using\n\nand are also available.\n\nReact-query has an experimental support for persisting and restoring query cache (to preserve the cache between e.g. browser restarts). requires additional configuration to correctly work with hydration (cache restoration) because of:\n‚Ä¢ All internal DTOs are JS classes, which are not recreated by (which is used by persisters by default).\n‚Ä¢ has Date objects in DTOs, which are not restored by as well.\n\nSo to make them work together correctly, you have to provide a special hydration function (which is autogenerated along with API clients) and call :\n\nFor the queryKey parameter should start with 2 same items as the underlying 'normal' query (see details).\n\nInjects option to all queries in children components. Might be useful if e.g. you want to refetch all queries in certain part of your app.\n\nFirst wrap your component in and specify your meta tags (make sure they are constant):\n\nYou could refetch based on meta via the following call:\n\nIn addition to NSwag parameters we have 4 specific parameters:\n\nIt generates instead of Classes, which minimizes the bundle size (since Interfaces are stripped off during bundling).\n\nThis mode is experimental and is being tested at the moment.\n\nThis flag helps in tree-shaking and code-splitting NSwag Clients.\n\nBy default NSwag generates http clients as Classes and puts all Classes in a single file. This prevents treeshaking, so even if you use a single method from class, whole class gets included in your bundle. Also since they are all in a single file, you can't code-split clients into chunks (all Clients will be loaded in a single chunk).\n\nNow it's possible to fix it and generate NSwag Clients as functions (without Classes) splitted per file.\n\nThis comes with drawbacks, since some NSwag flags rely on Classes being used, so these options do not work with flag. So if you use any of these, you won't be able to use the flag:\n‚Ä¢ /baseClass (since there are no classes anymore)\n‚Ä¢ /useGetBaseUrlMethod (since there is no base class)\n‚Ä¢ /useTransformOptionsMethod (since there's no base class to define TransformOptions in), this might be implemented in future\n‚Ä¢ /useTransformResultMethod (since there's no base class to define TransformOptions in), this might be implemented in future\n\nYou could use and / methods to configure the baseUrl and Axios/Fetch instances being used (which you previously configured via class constructors).\n\nUse this flag to disable generating react-query hooks.\n\nYou might want this flag if you want to use /modules, but you are not using react-query and don't need the generated hooks.\n\nThis flag executes few regex replaces over the generated code. This is an easy way to achieve the behavior we want without forking and maintaining NSwag & NJsonSchema templates ourselves.\n\nHere are the regex rules and rationale behind them:\n‚Ä¢ Replace is made because this is what server (at least .NET :)) actually returns (at least by default)\n‚Ä¢ Again, server actually returns , we don't want to change that.\n‚Ä¢ Performs the following change (in method), from: This is to be able to send both and to the server (important for PATCH requests)\n‚Ä¢ Performs the following change (in method), from: This is to be able to send both and to the server (important for PATCH requests)\n\nThis option basically passes the following parameters to NSwag .\n\nHere's a rationale behind each of them:\n‚Ä¢ Otherwise, optional parameters are generated as mandatory. E.g.:\n‚Ä¢ Otherwise, if is , there's no code to convert objects\n‚Ä¢ Otherwise PATCH dtos have all their properties defined as mandatory:\n‚Ä¢ If we use as null value, unnecessary code gets added to and functions:\n‚Ä¢ This gives a typed-possibility to create classes from interfaces (otherwise you have to use method)\n‚Ä¢ We need this to be able to use both and as values in PATCH requests\n\nBy default we generate hooks for GET requests only. Though, sometimes backend uses POST queries to actually get the data (e.g. if request parameters are big and require HTTP BODY to send it). In this case if the name of your POST endpoints start with , you could use parameter, and we will generate hooks for them as well.\n\nAlternatively, you could specify another flag to determine which operations (beside GET) should be treated as GET (and thus have functions generated). Example of the condition: (it is actually used by default). Liquid template syntax is used here.\n\nThere are some of breaking changes introduced in v15, because in v15 queries/mutations for each Controller is extracted into a separate file (and Classes are not used anymore).\n‚Ä¢ Getting/Setting default query properties is now done via functions (not via properties like it was before). So, instead of using property you'd need to use and .\n‚Ä¢ If you used property from the Query class to access POST/PUT methods (e.g. ), you'd be better off using (together with flag), or if you want to continue using Classes instead of Modules.\n‚Ä¢ If your API actions clash with JS reserved keywords your action would have underscore appended to the name (e.g. will be named ). Also in V15 it's possible to alter NSwag Clients to use plain functions instead of Classes. It makes treeshaking work for your Clients, thus significantly reducing the bundle size if you use only a few API methods. Use either flag directly, or which includes it.\n\nUnder the cover it's just a couple of template files for NSwag and a small script to easily use them.\n\nIssues and Pull Requests are welcome.\n\nFor any kind of private consulting or support you could contact Artur Drobinskiy directly via email."
    },
    {
        "link": "https://github.com/OpenAPITools/openapi-generator",
        "document": "‚≠ê‚≠ê‚≠ê If you would like to contribute, please refer to guidelines and a list of open tasks. ‚≠ê‚≠ê‚≠ê To migrate from Swagger Codegen to OpenAPI Generator, please refer to the migration guide üìî For more information, please refer to the Wiki page and FAQ üìî üìî The eBook A Beginner's Guide to Code Generation for REST APIs is a good starting point for beginners üìî If the OpenAPI spec, templates or any input (e.g. options, environment variables) is obtained from an untrusted source or environment, please make sure you've reviewed these inputs before using OpenAPI Generator to generate the API client, server stub or documentation to avoid potential security issues (e.g. code injection). For security vulnerabilities, please contact team@openapitools.org. Both \"OpenAPI Tools\" (https://OpenAPITools.org - the parent organization of OpenAPI Generator) and \"OpenAPI Generator\" are not affiliated with OpenAPI Initiative (OAI)\n\nIf you find OpenAPI Generator useful for work, please consider asking your company to support this Open Source project by becoming a sponsor. You can also individually sponsor the project by becoming a backer.\n\nThank you to our bronze sponsors!\n\nThank you GoDaddy for sponsoring the domain names, Linode for sponsoring the VPS, Checkly for sponsoring the API monitoring and Gradle for sponsoring Develocity\n\nOpenAPI Generator allows generation of API client libraries (SDK generation), server stubs, documentation and configuration automatically given an OpenAPI Spec (both 2.0 and 3.0 are supported). Currently, the following languages/frameworks are supported:\n\nThe OpenAPI Specification has undergone 3 revisions since initial creation in 2010. The openapi-generator project has the following compatibilities with the OpenAPI Specification:\n\nFor old releases, please refer to the Release page.\n\nFor decommissioned generators/libraries/frameworks, please refer to the \"Decommission\" label in the pull request page.\n\nYou can find our released artifacts on maven central:\n\nSee the different versions of the openapi-generator artifact available on maven central.\n\nSee the different versions of the openapi-generator-cli artifact available on maven central.\n‚Ä¢ See the different versions of the openapi-generator-maven-plugin artifact available on maven central.\n‚Ä¢ See the different versions of the openapi-generator-gradle-plugin artifact available on maven central.\n\nIf you're looking for the latest stable version, you can grab it directly from Maven.org (Java 11 runtime at a minimum):\n\nFor Windows users, you will need to install wget or you can use Invoke-WebRequest in PowerShell (3.0+), e.g.\n\nAfter downloading the JAR, run to show the usage.\n\nFor Mac users, please make sure Java 11 is installed (Tips: run to check the version), and export in order to use the supported Java version:\n\nOne downside to manual jar downloads is that you don't keep up-to-date with the latest released version. We have a Bash launcher script at bin/utils/openapi-generator.cli.sh which resolves this issue.\n\nTo install the launcher script, copy the contents of the script to a location on your path and make the script executable.\n\nAn example of setting this up (NOTE: Always evaluate scripts curled from external systems before executing them).\n\nNow, is \"installed\". On invocation, it will query the GitHub repository for the most recently released version. If this matches the last downloaded jar, it will execute as normal. If a newer version is found, the script will download the latest release and execute it.\n\nIf you need to invoke an older version of the generator, you can define the variable either ad hoc or globally. You can export this variable if you'd like to persist a specific release version.\n\nTo build from source, you need the following installed and available in your\n\nAfter cloning the project, you can build it from source using maven wrapper:\n\nIf you're a nix user, you can enter OpenAPI Generator shell, by typing:\n\nIt will enter a shell with Java 11 installed.\n\nDirenv supports automatically loading of the nix developer shell, so if you're using direnv too, type:\n\nand have and set up with correct versions each time you enter project directory.\n\nThe default build contains minimal static analysis (via CheckStyle). To run your build with PMD and Spotbugs, use the profile:\n\nHere is an example usage to generate a Ruby client:\n\nTo reinstall with the latest master, run\n\nThe OpenAPI Generator image acts as a standalone executable. It can be used as an alternative to installing via homebrew, or for developers who are unable to install Java or upgrade the installed version.\n\nTo generate code with this image, you'll need to mount a local location as a volume.\n\nThe generated code will be located under in the current directory.\n\nThe openapi-generator-online image can act as a self-hosted web application and API for generating code. This container can be incorporated into a CI pipeline, and requires at least two HTTP requests and some docker orchestration to access generated code.\n\nYou can use to do all development. This script maps your local repository to in the docker container. It also maps to the appropriate container location.\n\nBuild artifacts are now accessible in your working directory.\n\nOnce built, will act as an executable for openapi-generator-cli. To generate code, you'll need to output to a directory under (e.g. ). For example:\n\nIf an error like this occurs, just execute the ./mvnw clean install -U command:\n\nRight now: no solution for this one :|\n\nThere is also an NPM package wrapper available for different platforms (e.g. Linux, Mac, Windows). (JVM is still required) Please see the project's README there for more information.\n\nInstall it globally to get the CLI available on the command line:\n\nTo use a specific version of \"openapi-generator-cli\"\n\nOr install it as dev-dependency:\n\nYou can use locally built JARs or versions as well.\n\nYou can also install with jdk4py instead of java binary. (python>=3.10 is required)\n\nTo generate a PHP client for petstore.yaml, please run the following\n\nYou can also download the JAR (latest release) directly from maven.org\n\nTo get a list of general options available, please run\n\nTo get a list of PHP specified options (which can be passed to the generator with a config file via the option), please run\n\nYou can build a client against the Petstore API as follows:\n\nThis script uses the default library, which is . It will run the generator with this command:\n\nwith a number of options. The java options are documented here.\n\nYou can also get the options with the command (below only shows partial results):\n\nYou can then compile and run the client, as well as unit tests against it:\n\nOther generators have samples too.\n\nPlease refer to customization.md on how to customize the output (e.g. package name, version)\n\nPlease refer to integration.md on how to integrate OpenAPI generator with Maven, Gradle, sbt, Bazel, Github and CI/CD.\n\nHere are the public online services:\n\nThe server is sponsored by Linode\n\nPlease refer to online.md on how to run and use the - a web service for .\n\nThe OpenAPI Generator project is intended as a benefit for users of the Open API Specification. The project itself has the License as specified. In addition, please understand the following points:\n‚Ä¢ The templates included with this project are subject to the License.\n‚Ä¢ Generated code is intentionally not subject to the parent project license\n\nWhen code is generated from this project, it shall be considered AS IS and owned by the user of the software. There are no warranties--expressed or implied--for generated code. You can do what you wish with it, and once generated, the code is your responsibility and subject to the licensing terms that you deem appropriate.\n\nHere is a list of community-contributed IDE plug-ins that integrate with OpenAPI Generator:\n\nHere are some companies/projects (alphabetical order) using OpenAPI Generator in production. To add your company/project to the list, please visit README.md and click on the icon to edit the page.\n‚Ä¢ 2018/06/08 - Swagger Codegen is now OpenAPI Generator by JohannesHoppe\n‚Ä¢ 2018/06/21 - Connect your JHipster apps to the world of APIs with OpenAPI and gRPC by Christophe Bornet at JHipster Conf 2018\n‚Ä¢ 2018/06/27 - Lessons Learned from Leading an Open-Source Project Supporting 30+ Programming Languages - William Cheng at LinuxCon + ContainerCon + CloudOpen China 2018\n‚Ä¢ 2018/09/12 - RepreZen and OpenAPI 3.0: Now is the Time by Miles Daffin\n‚Ä¢ 2018/11/18 - Generating PHP library code from OpenAPI by Lorna Jane at LORNAJANE Blog\n‚Ä¢ 2018/11/19 - OpenAPIs are everywhere by Jeremie Bresson (Unblu) at EclipseCon Europe 2018\n‚Ä¢ 2019/01/03 - Calling a Swagger service from Apex using openapi-generator by Mikkel Flindt Heisterberg\n‚Ä¢ 2019/01/20 - Contract-First API Development with OpenAPI Generator and Connexion by Anil Can Aydin\n‚Ä¢ 2019/01/30 - Rapid Application Development With API First Approach Using Open-API Generator by Milan Sonkar\n‚Ä¢ 2019/02/20 - An adventure in OpenAPI V3 code generation by Phil Cluff\n‚Ä¢ 2019/02/26 - Building APIs with OpenAPI: Continued by Ratros Y. in Google Cloud Platform Blog\n‚Ä¢ 2019-03-16 - A Quick introduction to manual OpenAPI V3 by vados at VADOSWARE\n‚Ä¢ 2019-03-25 - Access any REST service with the SAP S/4HANA Cloud SDK by Alexander Duemont\n‚Ä¢ 2019-04-18 - How to use OpenAPI3 for API developer (RubyKaigi 2019) by @ota42y at RubyKaigi 2019\n‚Ä¢ 2019-04-29 - A Beginner's Guide to Code Generation for REST APIs (OpenAPI Generator) by William Cheng\n‚Ä¢ 2019-05-01 - Design and generate a REST API from Swagger / OpenAPI in Java, Python, C# and more by Simply How\n‚Ä¢ 2019-06-24 - Kubernetes Clients and OpenAPI Generator by William Cheng at Kubernetes Contributor Summits Shanghai 2019\n‚Ä¢ 2019-07-19 - Developer Experience (DX) for Open-Source Projects: How to Engage Developers and Build a Growing Developer Community by William Cheng, ‰∏≠ÈáéÊöÅ‰∫∫ at Open Source Summit Japan 2019\n‚Ä¢ 2019-08-14 - Our OpenAPI journey with Standardizing SDKs by Sebastian Burgstaller at Bitmovin\n‚Ä¢ 2019-09-06 - Vert.x and OpenAPI by Stephan H Wissel at wissel.net blog\n‚Ä¢ 2019-09-22 - Redefining SDKs as software diversity kits by Sid Maestre (Xero) at DevRelCon San Francisco 2019\n‚Ä¢ 2019-09-24 - Eine Stunde was mit Api First! by @janweinschenker at Java Forum Nord\n‚Ä¢ 2019-10-10 - Automatic Generation of REST Clients by Thomas Peyrard, Senior Software Engineer at Criteo in Full-Stack Tech Talks (Meetup)\n‚Ä¢ 2019-10-16 - How to ship APIs faster? by Simon Guilliams @ PoniCode\n‚Ä¢ 2019-10-24 - Microprofile OpenAPI - Code First or Design First? by Peter [p…õ É…ô] Steiner at eclipsecon Europe 2019\n‚Ä¢ 2019-11-07 - API First development with OpenAPI - You should you practise it !? by Nick Van Hoof at Devoxx Belgium 2019\n‚Ä¢ 2019-11-08 - JHipster beyond CRUD - API-First for Enterprises by Enrico Costanzi by Enrico Costanzi at JHipster Conf 2019 in Paris\n‚Ä¢ 2019-11-11 - One Spec to Rule them all - OpenAPI in Action by Andreas Litt at code.talks 2019\n‚Ä¢ 2019-11-13 - OpenAPI 3.0 Editor And Generator With A Spring Boot Example at Simply How\n‚Ä¢ 2019-11-20 - Introduction to OpenAPI by Lorna Mitchell at GOTO Copenhagen 2019\n‚Ä¢ 2019-11-20 - How to Generate Angular code from OpenAPI specifications by Anuraj\n‚Ä¢ 2019-11-24 - Accelerate Flutter development with OpenAPI and Dart code generation by Irina Southwell\n‚Ä¢ 2019-11-26 - CordaCon 2019 Highlights: Braid Server and OpenAPI Generator for Corda Client API‚Äôs by Adel Rustum at B9lab\n‚Ä¢ 2019-12-03 - A Road to Less Coding: Auto-Generate APILibrary at Corda Blog\n‚Ä¢ 2019-12-05 - Code generation on the Java VM by Sean Sullivan\n‚Ä¢ 2019-12-23 - Use Ada for Your Web Development by Stephane Carrez\n‚Ä¢ 2019-12-23 - OpenAPI„ÅÆ„Çπ„Ç≠„Éº„Éû„ÇíÂàÜÂâ≤„ÉªÊßãÈÄ†Âåñ„Åó„Å¶„ÅÑ„ÅèÊñπÊ≥ï by Â∞èÈ£ØÂ°öÈÅî‰πü at GiFT, Inc\n‚Ä¢ 2020-01-17 - OpenAPI demo for Pulp 3.0 GA by Pulp at Youtube\n‚Ä¢ 2020-01-19 - Why document a REST API as code? by Rolf Streefkerk at DEV Community\n‚Ä¢ 2020-01-28 - Get Your Serverless Swagger Back with OpenAPI by Matt Tyler\n‚Ä¢ 2020-02-01 - Using OpenAPI to Maximise Your Pulp 3 Experience by Dennis Kliban at FOSDEM\n‚Ä¢ 2020-02-07 - Why you should use OpenAPI for your API design by Nick Van Hoof at API Conference\n‚Ä¢ 2020-02-17 - Rubynetes: using OpenAPI to validate Kubernetes configs by Neil Wilson at Brightbox\n‚Ä¢ 2020-02-20 - Building SDKs for the future by Sid Maestre (Xero)\n‚Ä¢ 2020-02-29 - Providing Support to IoT Devices Deployed in Disconnected Rural Environment (Conference paper) by Sergio Laso, Daniel Flores-Mart√≠n, Juan Luis HerreraCarlos, CanalJuan Manuel, MurilloJavier Berrocal\n‚Ä¢ 2020-03-02 - How To Generate Angular & Spring Code From OpenAPI Specification by Michael Hoffmann\n‚Ä¢ 2020-03-15 - Load Testing Your API with Swagger/OpenAPI and k6\n‚Ä¢ 2020-04-22 - Introduction to OpenAPI Generator by Kristopher Sandoval in Nordic APIs\n‚Ä¢ 2020-04-27 - How we use Open API v3 specification to auto-generate API documentation, code-snippets and clients by Tanel T√§hep√µld\n‚Ä¢ 2020-05-19 - Dead Simple APIs with Open API by Chris Tankersley at Nexmo\n‚Ä¢ 2020-05-28 - Building APIs with Laravel using OpenAPI by Chris Tankersley at Laracon EU\n‚Ä¢ 2020-06-12 - Interoperability by construction: code generation for Arrowhead Clients by Michele Albano, Brian Nielsen at 2020 IEEE Conference on Industrial Cyberphysical Systems (ICPS)\n‚Ä¢ 2020-06-29 - Artifact Abstract: Deployment of APIs on Android Mobile Devices and Microcontrollers by Sergio Laso ; Marino Linaje ; Jose Garcia-Alonso ; Juan M. Murillo ; Javier Berrocal at 2020 IEEE International Conference on Pervasive Computing and Communications (PerCom)\n‚Ä¢ 2020-07-07 - 5 Best API Documentation Tools by Susanna Bouse at DreamFactory Blog\n‚Ä¢ 2020-07-20 - Datadog API client libraries now available for Java and Go by Jordan Obey at Datadog Blog\n‚Ä¢ 2020-07-23 - Generate Client SDK for .NET Core using Open Api by Nuno Reis\n‚Ä¢ 2020-08-03 - Criando Bibliotecas para APIs RESTful com OpenAPI, Swagger Editor e OpenAPI Generator by everis Brasil (an NTT DATA Company)\n‚Ä¢ 2020-08-19 - „Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„Çπ„ÇíÈÄ£Êê∫„Åó„Å¶„Åø„Çà„ÅÜ by Â≤°‰∫ï Ë£ïÁü¢(„Åä„Åã„ÅÑ „ÇÜ„ÅÜ„ÇÑ), Ê≥â Âãù(„ÅÑ„Åö„Åø „Åæ„Åï„Çã) at Think ITÔºà„Ç∑„É≥„ÇØ„Ç§„ÉÉ„ÉàÔºâ\n‚Ä¢ 2020-09-10 - Introduction to OpenAPI with Instana by Cedric Ziel at Instana Blog\n‚Ä¢ 2020-09-24 - How to automate API code generation (OpenAPI/Swagger) and boost productivity - Tutorial with React Native featuring TypeScript by Sanjin Celeski\n‚Ä¢ 2020-10-31 - [B2] OpenAPI SpecificationÏúºÎ°ú ÌÉÄÏûÖ-ÏÑ∏Ïù¥ÌîÑÌïòÍ≤å API Í∞úÎ∞úÌïòÍ∏∞: Ìù¨ÎßùÌé∏ VS Ï†àÎßùÌé∏ by ÏµúÌÉúÍ±¥ at FEConf 2020\n‚Ä¢ 2020-12-04 - Scaling the Test Coverage of OpenAPI Generator for 30+ Programming Languages by William Cheng at Open Source Summit Japan + Automotive Linux Summit 2020 (Slides)\n‚Ä¢ 2021-01-08 - Hello, New API ‚Äì Part 1 by Jeremy Schulman at Major League Baseball\n‚Ä¢ 2021-02-05 - REST-API-Roundtrip with SpringDoc and OpenAPI Generator by Benjamin Klatt at viadee\n‚Ä¢ 2021-02-17 - REST-API-Roundtrip with SpringDoc and OpenAPI Generator by cloud @viadee\n‚Ä¢ 2021-03-28 - Trying out NestJS part 4: Generate Typescript clients from OpenAPI documents by Arnaud Cortisse\n‚Ä¢ 2021-04-22 - Leveraging OpenApi strengths in a Micro-Service environment by Nicolas Jellab at Unibuddy Technology Blog\n‚Ä¢ 2021-04-27 - From zero to publishing PowerShell API clients in PowerShell Gallery within minutes by William Cheng at PowerShell + DevOps Global Summit 2021\n‚Ä¢ 2021-06-22 - Rest API Documentation and Client Generation With OpenAPI by Prasanth Gullapalli\n‚Ä¢ 2021-07-29 - How To Rewrite a Huge Codebase by Curtis Poe\n‚Ä¢ 2021-09-20 - OpenAPI Generator - The Babel Fish of the API World by Cliffano Subagio (Principal Engineer at Shine Solutions) at Apidays LIVE Australia 2021\n‚Ä¢ 2021-10-02 - How to Write Fewer Lines of Code with the OpenAPI Generator by Mikhail Alfa\n‚Ä¢ 2021-10-12 - OpenAPI Generator : 4000 √©toiles sur GitHub et des spaghettis by J√©r√©mie Bresson at Devoxx FR 2021\n‚Ä¢ 2021-10-17 - Generate a TypeScript HTTP Client From An OpenAPI Spec In DotNET 5 by Richard Willis\n‚Ä¢ 2021-12-07 - An Introduction to OpenAPI by Na'aman Hirschfeld\n‚Ä¢ 2022-01-02 - Towards a secure API client generator for IoT devices by Anders Aaen Springborg, Martin Kaldahl Andersen, Kaare Holland Hattel, Michele Albano\n‚Ä¢ 2022-02-02 - Use OpenApi generator to share your models between Flutter and your backend by Guillaume Bernos at Flutter Vikings Conference 2022 (Hybrid)\n‚Ä¢ 2022-05-13 - A Path From an API To Client Libraries by Filip Srnec at Infobip\n‚Ä¢ 2022-06-01 - API First, using OpenAPI and Spring Boot by Micael Estr√°zulas Vianna\n‚Ä¢ 2022-06-10 - Autogenerating Clients with FastAPI and Github Actions by Andrew Israel\n‚Ä¢ 2022-09-03 - OpenAPI Generator For Go Web Development by Kevin Hu\n‚Ä¢ 2022-12-13 - API-First with Spring WebFlux and OpenAPI Generator by Eric Anicet\n‚Ä¢ 2023-01-06 - Major Improvements with Helidon and OpenAPI by Tim Quinn\n‚Ä¢ 2023-02-02 - Replacing Postman with the Jetbrains HTTP Client by julien Lengrand-Lambert\n‚Ä¢ 2023-03-19 - EXOGEM: Extending OpenAPI Generator for Monitoring of RESTful APIs by Daniel Friis Holtebo, Jannik Lucas Sommer, Magnus M√∏lgaard Lund, Alessandro Tibo, Junior Dongo & Michele Albano at \"ICSOC 2022: Service-Oriented Computing ‚Äì ICSOC 2022 Workshops\"\n‚Ä¢ 2023-04-27 - [Create an Angular Client using OpenAPI Specifications](Create an Angular Client using OpenAPI Specifications) by Patric\n‚Ä¢ 2023-06-30 - Generate Client SDKs with OpenApi Generator in Springboot by Vinayak Ramavath\n‚Ä¢ 2024-03-04 - Generating TypeScript Types with OpenAPI for REST API Consumption by PullRequest\n‚Ä¢ 2024-04-04 - Working with OpenAPI using Rust by Joshua Mo\n‚Ä¢ 2024-04-08 - Implement API first strategy with OpenAPI generator plugin by Rui Zhou\n‚Ä¢ 2025-02-09 - Custom validation with OpenApiGenerator and Spring Boot 3 by Jugurtha Aitoufella\n‚Ä¢ 2025-02-20 - Optimizing API Integration in a Large React Application Using OpenAPI Generator by Stefano Marzo\n\nWhat's the design philosophy or principle behind OpenAPI Generator?\n\nWe focus on developer experience. The generators should produce code, config, documentation, and more that are easily understandable and consumable by users. We focused on simple use cases to start with (bottom-up approach). Since then the project and the community have grown a lot: 600k weekly downloads via NPM CLI wrapper, 30M downloads via openapi-generator-cli docker image just to highlight a few. We've gradually supported more features (e.g. oneOf, anyOf introduced in OpenAPI 3.0) in various generators and we will continue this approach to deliver something based on our understanding of user demand and what they want, and continue to add support of new features introduced in OpenAPI specification (such as v3.1 and future versions of the OpenAPI specification).\n\nOpenAPI Generator core team members are contributors who have been making significant contributions (review issues, fix bugs, make enhancements, etc) to the project on a regular basis.\n\nNOTE: Embedded templates are only supported in Mustache format. Support for all other formats is experimental and subject to change at any time.\n\nHere is a list of template creators:\n\nHere are the requirements to become a core team member:\n‚Ä¢ rank within top 50 in https://github.com/openapitools/openapi-generator/graphs/contributors\n‚Ä¢ to contribute, here are some good starting points\n‚Ä¢ regular contributions to the project\n‚Ä¢ for contribution, it can be addressing issues, reviewing PRs submitted by others, submitting PR to fix bugs or make enhancements, etc\n‚Ä¢ must be active in the past 3 months at the time of application\n\nTo join the core team, please reach out to team@openapitools.org for more information.\n\nTo become a Template Creator, simply submit a PR for new API client (e.g. Rust, Elixir) or server stub (e.g. Ruby Grape) generator.\n\nMembers of the OpenAPI Generator technical committee shoulder the following responsibilities:\n‚Ä¢ Provides guidance and direction to other users\n‚Ä¢ Improves the generator by making enhancements, fixing bugs or updating documentations\n‚Ä¢ Sets the technical direction of the generator\n\nWho is eligible? Those who want to join must have at least 3 PRs merged into a generator. (Exceptions can be granted to template creators or contributors who have made a lot of code changes with less than 3 merged PRs)\n\nIf you want to join the committee, please kindly apply by sending an email to team@openapitools.org with your Github ID.\n\nOpenAPI Generator is a fork of Swagger Codegen. In view of the issues with the Swagger Codegen 3.0.0 (beta) release and the disagreement on the project's direction, more than 40 top contributors and template creators of Swagger Codegen decided to fork Swagger Codegen and maintain a community-driven version called \"OpenAPI Generator\". Please refer to the Q&A for more information.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    {
        "link": "https://openapi-ts.dev/openapi-react-query",
        "document": "openapi-react-query is a type-safe tiny wrapper (1 kb) around @tanstack/react-query to work with OpenAPI schema.\n\nIt works by using openapi-fetch and openapi-typescript so you get all the following features:\n‚Ä¢ ‚úÖ No typos in URLs or params.\n‚Ä¢ ‚úÖ All parameters, request bodies, and responses are type-checked and 100% match your schema\n‚Ä¢ ‚úÖ No manual typing of your API\n‚Ä¢ ‚úÖ Also eliminates type overrides that can also hide bugs\n\nInstall this library along with openapi-fetch and openapi-typescript:\n\nNext, generate TypeScript types from your OpenAPI schema using openapi-typescript:\n\nOnce your types has been generated from your schema, you can create a fetch client, a react-query client and start querying your API."
    },
    {
        "link": "https://openapistack.co/docs/examples/tanstack-query",
        "document": "To use in a declarative way in the frontend, we recommend using TanStack Query (previously known as React Query) together with type safe clients created with openapi-stack.\n\nFirst, let's set up our type safe API client:\n\nNow we are ready to use our type safe client with React Query:"
    },
    {
        "link": "https://tanstack.com/query/latest/docs/framework/react/community/community-projects",
        "document": "There are lots of community projects that build on top of React Query and use it to provide additional functionality or enhanced developer experience. Projects are listed in alphabetical order. If you have a project that you would like to add to this list, please open a PR!\n\nPlease note that these projects are entirely community maintained. If you have questions about these projects, please reach out to the project maintainers.\n\nA batch manager that will deduplicate and batch requests for a certain data type made within a window\n\nGenerate SDKs for all your APIs\n\nA tool for generating code based on an OpenAPI schema.\n\nGenerate type-safe API clients and Hooks for TanStack Query directly from OpenAPI Documents. Zero-runtime overhead, Proxy-based design, seamless SSR support, and full TanStack Query functionality.\n\nA 2KB min, typesafe fetch wrapper that uses static TypeScript type inference and no runtime checks.\n\nA library for creating typesafe standardized query keys, useful for cache management in @tanstack/query\n\nüïäÔ∏è A toolkit for ReactQuery that makes ReactQuery hooks reusable and typesafe\n\nEnhances React Query with Suspense support, allowing for simpler and more declarative data fetching\n\nIncrementally adoptable type-safety for your new and existing APIs"
    },
    {
        "link": "https://medium.com/@affanamazonusa/react-query-with-openapi-react-query-codegen-1eb981f0a9ae",
        "document": "In the ever-evolving world of web development, staying ahead of the curve means embracing innovative technologies that streamline your workflow, boost productivity, and enhance the performance of your applications. If you‚Äôre a React enthusiast looking to supercharge your web development journey, you‚Äôre in for a treat!\n\nIn this article, we‚Äôll embark on a thrilling journey where we combine the forces of ReactJS, React Query, Axios, and Codegen to build a robust and efficient React application. These technologies, when harnessed together, provide a potent arsenal for building modern web applications that are both dynamic and highly responsive.\n\nReactJS is the backbone of our frontend, offering a powerful and flexible library for building user interfaces. It‚Äôs the ideal choice for crafting interactive, component-based web applications.\n\nReact Query serves as our data-fetching superhero, simplifying the management of server data by providing a delightful developer experience. With features like caching, background data synchronization, and intelligent query invalidation, it takes the pain out of working with APIs.\n\nAxios will be our trusty sidekick, helping us make HTTP requests with ease. Its simplicity and robustness make it a top choice for handling network requests in our React app.\n\nCodegen, our secret weapon, automates the generation of API client code from our OpenAPI specifications. This ensures that our frontend and backend stay in perfect sync, saving us time and reducing the risk of inconsistencies.\n\nThroughout this article, we‚Äôll explore how these technologies synergize to create a seamless development experience. From generating API clients to building UI components, handling errors, optimizing performance, and beyond, you‚Äôll gain a comprehensive understanding of how to wield this powerful stack effectively.\n\nSo, fasten your seatbelt and get ready to level up your React game as we dive into the exciting world of OpenAPI, React Query, Axios, and Codegen. Your journey to building high-performing, data-driven React apps starts right here!\n\nBefore discovering the power of Codegen and OpenAPI, you found yourself in a common developer dilemma. Your React application required seamless integration with various APIs, each requiring a significant amount of manual labor. This manual API integration entailed:\n‚Ä¢ Hand-Coding API Endpoints: You had to manually define and manage API endpoints, including their paths, methods, query parameters, and request/response schemas. This was not only time-consuming but also prone to human error.\n‚Ä¢ Request Handling: Every API request had to be individually crafted, resulting in repetitive code that was hard to maintain and refactor.\n‚Ä¢ Response Parsing: Parsing and handling API responses consumed a considerable amount of development effort. Ensuring that data was extracted correctly and consistently across your application was a challenge.\n‚Ä¢ Code Maintenance: Over time, as your application evolved and APIs changed, maintaining the API integration code became a burdensome task. Keeping the codebase in sync with API updates was a constant struggle.\n‚Ä¢ Consistency Across the Team: Collaborating with other developers or team members on API integration projects often led to inconsistencies in coding style and approach.\n\nThe Solution: Codegen and OpenAPI to the Rescue\n\nTo address these challenges, you turned to Codegen, a powerful code generation tool that works seamlessly with OpenAPI specifications. Here‚Äôs how it revolutionized your approach to API integration:\n‚Ä¢ Automated Code Generation: Codegen takes your OpenAPI specification as input and automatically generates API client code. This includes all the necessary functions and data structures for making API requests and handling responses.\n‚Ä¢ Elimination of Repetition: With Codegen, you no longer had to manually write repetitive API-related code. Every API endpoint, request, and response was generated consistently, saving you countless hours of coding.\n‚Ä¢ Sync with OpenAPI: Codegen ensures that your API client code stays in perfect sync with your OpenAPI specification. Any changes or updates to the API are automatically reflected in your codebase, reducing the risk of errors due to outdated documentation.\n‚Ä¢ Enhanced Team Collaboration: Codegen promotes consistency across your development team. Everyone can use the same generated code, ensuring a uniform approach to API integration and reducing the chances of coding discrepancies.\n\nBy utilizing Codegen and OpenAPI, you not only reduced the manual workload but also improved the maintainability and reliability of your React application‚Äôs API integration. This innovative solution allowed you to focus on building features and delivering value rather than wrestling with API-related code. In the subsequent sections of this article, we‚Äôll dive deeper into the practical aspects of setting up Codegen, generating API clients, and integrating them into your React app.\n\nhere‚Äôs how you can implement OpenAPI React Query Codegen in your React app:\n\nStep 1: Install the Required Package Before running the command, make sure you have the necessary package installed. You can install it using npm/yarn:"
    }
]