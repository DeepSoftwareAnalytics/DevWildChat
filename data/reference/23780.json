[
    {
        "link": "http://g6-v3-2.antv.vision/en/docs/api/TreeGraph",
        "document": "If you are going to visualize a tree, TreeGraph of G6 is more appropriate than Graph. The main differences between and are data structure and built-in layout algorithms:\n‚Ä¢ Data structure: In G6, the tree data has nested structure. Edges are implicit in it. Each node data has and properties at least:\n‚Ä¢ \n‚Ä¢ Tree layout algorithms do not modify the source data. it generates a new data instead. And the source data will be a property of the new data. This mechanism will reduce the complexity of transformation from nested data to nodes and edges in graph.\n‚Ä¢ The layout will be re-calculated after adding / deleting / expanding / collapsing nodes on the tree.\n\nThere are four layout algorithms for tree in G6: dendrogram, compactBox, mindmap, and indeted.\n\n‚ö†Ô∏èAttention: When , can only be , , and .\n\nDifferent results with different values.\n\nDifferent effects for different values.\n\n‚ö†Ô∏èAttention: , , , and will not change the node size:\n\nü¶ÅIt is the same for indented and mindmap.\n\nDifferent results with different values.\n\nAdd sub tree to the parent node.\n\nIncrementally update the children data of the parent.\n\n‚ö†Ô∏èAttention: When the is null, this operation will update the graph fully.\n\nRemove the subtree started from a child node with the id.\n\nRefresh the layout. Usually, it is called after changing data.\n\nFind data model according to the id.\n‚Ä¢ The type of return value: Object;\n‚Ä¢ The return value is the data model of the found node."
    },
    {
        "link": "https://graphin.antv.vision/en-US/graphin/behaviors/behaviors",
        "document": "The interaction behaviors in Graphin are all composable, such as the built-in , , and components. Because the interactions are all asynchronous, the components implement the atomic operations of addBehaviors and removeBehaviors. The default interaction behavior is available out of the box and can be imported on demand via .\n\nThe Props API of each interactive component is completely consistent with G6's defaultBehaviors . You can view it in the documents of Node Interaction and Canvas Interaction\n\nNot all interactive behaviors need to be manually introduced by the user. Therefore, Graphin has 9 built-in interactive behaviors. We consider these interactive behaviors to be the basic interaction requirements of graph analysis products, so we choose to build them."
    },
    {
        "link": "https://github.com/antvis/G6/blob/v5/CHANGELOG.md",
        "document": "We read every piece of feedback, and take your input very seriously."
    },
    {
        "link": "https://classic.yarnpkg.com/en/package/@antv/g6-core",
        "document": ""
    },
    {
        "link": "https://npmjs.com/package/react-d3-tree",
        "document": "React D3 Tree is a React component that lets you represent hierarchical data (e.g. family trees, org charts, file directories) as an interactive tree graph with minimal setup, by leveraging D3's layout.\n\n// This is a simplified example of an org chart with a depth of 2. // Note how deeper levels are defined recursively via the `children` property. : : : : : : : : : : : : : : : : // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`. : :\n\nFor details on all props accepted by , check out the TreeProps reference docs.\n\nThe only required prop is data, all other props on are optional/pre-defined (see \"Default value\" on each prop definition).\n\nprovides default implementations for 's nodes & links, which are intended to get you up & running with a working tree quickly.\n\nThis section is focused on explaining how to provide data, styles and event handlers for the default implementation.\n\nBy default, expects each node object in to implement the interface:\n\nThe example in the Usage section above is an example of this:\n‚Ä¢ Every node has at least a . This is rendered as the node's primary label.\n‚Ä¢ Some nodes have defined (the node does not). The key-value pairs in are rendered as a list of secondary labels.\n‚Ä¢ Nodes can have further objects nested inside them via the key, creating a hierarchy from which the tree graph can be generated.\n\nprovides the following props to style different types of nodes, all of which use an SVG by default:\n‚Ä¢ - applied to any node with 1+ children.\n‚Ä¢ - applied to any node without children.\n\nTo visually distinguish these three types of nodes from each other by color, we could provide each with their own class:\n\nprovides the property to pass additional classNames to every link to be rendered.\n\nEach link calls with its own and the tree's current . expects to return a string.\n\nsource target // Target node has no children -> this link leads to a leaf node. // Style it as a link connecting two branch nodes by default. // Statically apply same className(s) to all links // Want to apply multiple static classes? `Array.join` is your friend :) // Dynamically determine which `className` to pass based on the link's properties.\n\nexposes the following event handler callbacks by default:\n\nThe prop accepts a custom render function that will be used for every node in the tree.\n\nCases where you may find rendering your own element useful include:\n‚Ä¢ Using a different SVG tag for your nodes (instead of the default ) - Example (codesandbox.io)\n‚Ä¢ Gaining fine-grained control over event handling (e.g. to implement events not covered by the default API) - Example (codesandbox.io)\n‚Ä¢ Building richer & more complex nodes/labels by leveraging the tag to render HTML inside the SVG namespace - Example (codesandbox.io)\n\nBy changing or providing your own , you are able to change how links between nodes of the tree (which are SVG tags under the hood) are drawn.\n\nThe currently available enums are:\n\nIf none of the available path functions suit your needs, you're also able to provide a custom :\n\nTo set up for local development, clone the repo and follow the steps below:\n\nIf you're using for development, open up another terminal window in the directory and call:\n\nA huge thank you to all the contributors, as well as users who have opened issues with thoughtful suggestions and feedback."
    },
    {
        "link": "https://medium.com/@tusharupadhyay691/effective-react-typescript-project-structure-best-practices-for-scalability-and-maintainability-bcbcf0e09bd5",
        "document": "Structuring a React TypeScript project effectively is key to maintaining code quality, scalability, and ease of collaboration. A well-organized project ensures that your codebase remains manageable, even as it grows. Here‚Äôs a guide on how to structure your React TypeScript project with best practices in mind.\n\nStart by setting up your project with the right tools and configurations.\n\nBreak down your UI into reusable, modular components.\n\nEncapsulate reusable logic with custom hooks in the directory.\n\nAbstract API calls into a directory to keep your logic clean and maintainable.\n\nDefine your TypeScript types in the directory to ensure a consistent and scalable codebase.\n\nFor component-specific styles, use CSS Modules to scope your CSS to individual components. For global styles, organize them in a separate directory.\n\nEnsure consistency and quality with TypeScript, ESLint, and Prettier configurations.\n\nBy structuring your React TypeScript project with clear directories for components, hooks, services, types, utilities, and styling, and by following consistent configuration practices, you set the foundation for a scalable, maintainable, and collaborative codebase.\n‚Ä¢ Please consider clapping and following the writer! üëè"
    },
    {
        "link": "https://stackoverflow.com/questions/53338345/how-to-build-a-component-library-using-typescript-ant-design-and-rollup",
        "document": "I'm trying to create an example boilerplate for a library of reusable components in TypeScript, using Ant Design for UI elements and Rollup for bundling.\n\nThe Ant Design documentation although useful, doesn't give specific details for configuring Rollup and I've not had any luck finding an example using the same technology stack.\n\nUsing information from various online sources I've put together an outline boilerplate and published it to the following GitHub repository\n\nHowever, the build output is showing a number of warnings from Rollup relating to rewriting references to 'this'. Can anyone suggest changes to my build config to resolve this issue?"
    },
    {
        "link": "https://medium.com/simform-engineering/building-a-component-library-with-react-typescript-and-storybook-a-comprehensive-guide-ba189accdaf5",
        "document": "A thorough tutorial on creating your own React component libraries and sharing them across projects via GitHub and the npm repository.\n\nReact is one of the most famous libraries for making scalable web applications. The React ecosystem has many component libraries like Ant Design, Material UI, and Chakra UI, which provide reusable UI components.\n\nWith the flexibility of React, you can also build custom component libraries suited to their specific needs. In this article, we‚Äôll learn about how to make your own component library with React, Typescript, and Storybook, along with a few other useful tools.\n\nTo initialize the project with git along with React and Typescript, run the following commands:\n\nHere, we need to move to because it‚Äôs typically used as a peer dependency in library packages. This allows consumers to use one version of React without conflicts. To do this, add the following lines to your and remove React from\n\nPrettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules.\n\nTo install Prettier, run the following command:\n\nCreate at the root of the project and set rules as follows:\n\nTo format the project, add the following script in :\n\nESLint is a static code analysis tool that checks your JavaScript code for common problems, such as syntax errors, formatting issues, code style violations, and potential bugs.\n\nTo install the ESLint with its plugin, run the following command:\n\nNow, create a config file for ESLint named at the root of the project and paste the following configuration:\n\nCreate a file in the root directory and add directories that we don‚Äôt have to include in the repository.\n\nFor linting the project, add the following script in :\n\nVite, a modern front-end tool, has become popular in recent years. While it uses Rollup for production builds, it combines the strengths of both tools to offer a great development experience and efficient production builds.\n\nCreate a file named and paste the following configuration:\n\nTo install Vite with one plugin that generates a declaration file, run the following command:\n\nCreate a file named in the root directory with the following configuration:\n\nAdd this configuration to as it defines the entry points and types definitions with the build script.\n\nHere, and are used to specify the entry points for different module systems in JavaScript.\n‚Ä¢ The field is used to specify the entry point for CommonJS modules. It typically points to a file with the extension or . When a package is required using in Node.js or bundled with tools like Webpack or Vite, the entry point is used.\n‚Ä¢ The field is used to specify the entry point for ES modules. It typically points to a file with the extension or . When a package is imported using in modern JavaScript environments that support ES modules, the entry point is used.\n\nBy specifying both and fields in the package.json, we can provide compatibility for both CommonJS and ES module systems.\n\nInstead of using simple CSS, we are going to use styled components for styling to benefit from features like component-based styling, dynamic styling, and css-in-js.\n\nTo add styled-components, run the following command.\n\nCreate a folder in the root directory and then, create a folder named for our button components. Add and in this folder and paste the following code:\n\nAdd an file to the folder, as this file will allow you to export all the components from the folder.\n\nAdd an file to the folder as it serves as the entry point for your entire library. From here, you can export components along with their types and utilities.\n\nAfter adding a component, run the following command. It generates a ‚Äòdist‚Äô folder.\n\nIn the folder, you will find the output code for your library.\n\nVitest is the unit testing framework built on top of Vite and is an excellent unit test framework with many modern features.\n\nTo install Vitest, run the following command:\n\nNow, add the following script to the file.\n\nAdd the following line at the top of the file:\n\nCreate a file named in the root directory and add the following code to that file:\n\nNow, add the following configuration to file under defineConfig:\n\nCreate directory in the button folder and add a file named to test the button component with the following code:\n\nStorybook is an open-source development environment for designing, testing, and showcasing UI components in isolation.\n\nRun the following command to initialize a new storybook project:\n\nAs we already have Vite, it will be detected as a runner in Storybook, and it will also add the folder along with the required script in the file.\n\nIt will also generate a folder in the folder, but we are going to delete it.\n\nEach component has its own directory, and to that, we will add our stories. To do that, we have to update the field in the file.\n\nCreate three files in the directory:\n\nAdd the following content to :\n\nIn the file, insert the following code:\n\nIn the file, insert the following code:\n\nAfter making these changes, run the following command to start Storybook:\n\nYou should be able to see all the Button UI variations in Storybook.\n\nHusky is primarily designed to enforce pre-commit hooks in your Git repository, ensuring that certain tasks like running tests, formatting code, and linting are performed before any commits are allowed.\n\nTo configure Husky with pre-commit hooks, run the following commands:\n\nNow, inside the folder, create a file named hook and add the following to it:\n\nAdd the following configuration to the file:\n\nNow, when we commit our changes using git commit, Husky will automatically run lint-staged, which, in turn, will run our specified formatting and linting scripts on the staged files.\n\nPublishing the Library on NPM and GitHub Registry\n\nTo your project‚Äôs , add a section to specify the GitHub package registry as the registry. Replace and with your actual GitHub username and repository name. Here's an example:\n\nModifying the permissions for the : Go to the GitHub repository, click on settings, then navigate to . In the section, ensure that both are accepted, then click .\n\nIn your project‚Äôs root directory, create a folder if it doesn't already exist.\n\nInside that folder, create a file named with the following content. here add your in the scope.\n\nHere, is automatically provided by GitHub Actions and is used for authentication when publishing the package.\n\nSo, once you push to the branch, this workflow will run automatically, and the package will be published.\n\nYou can find your library in the section of your GitHub repository.\n\nYou can refer to my repository for assistance if you encounter any errors.\n\nFirst, create an account on npmjs.com. Then, navigate to your profile settings and click on .\n\nNow, click on and select .\n\nNow, provide a name for the token and select the type as , and it will generate the token.\n\nNext, go to your GitHub repository‚Äôs settings, and within the section, navigate to . Click on Provide a name for the secret (this name will be used to access the token in the workflow), and then click .\n\nWe have to add a script to your to specify a command that runs when the package is prepared for publishing.\n\nIn your project‚Äôs root directory, create a folder if it doesn't already exist. Inside that folder, create a file named with the following content.\n\nSo, once you push to the branch, this workflow will run automatically, and the package will be published.\n\nNow, if you check the section of your account, you will find your package.\n\nYou can refer to my repository for assistance if you encounter any errors.\n\nUsing the Library Locally in Another Project for Testing\n\nTo test the library locally, create a directory named and then run the following command to initialize a React app in that directory:\n\nNow, go to the root directory and build your npm package with the following command:\n\nTo ensure you‚Äôre using the same version of React as your example app, run the following command from the root directory:\n\nReturn to your example app‚Äôs directory and link your npm package to the example app using the package name you specified in its . Replace with your package's name.\n\nYou can check whether the package is linked or not using the following command:\n\nNow, import the UI component from the library and test easily locally.\n\nAfter running the command, you can test the locally published package.\n\nUsing the Published Library in Another Project\n\nCreate a directory named and then run the following command to initialize a React app:\n\nTo install a package from the npm registry, you can use the following command:\n\nThis command will install the package named from the npm registry.\n\nTo obtain a personal access token from GitHub for accessing packages from the GitHub Package Registry, follow these steps:\n‚Ä¢ Go to GitHub and sign in to your account.\n‚Ä¢ Click on your profile picture in the top right corner and select .\n‚Ä¢ In the left sidebar, click on .\n‚Ä¢ Next, click on the button.\n‚Ä¢ Provide a name for your token in the field.\n‚Ä¢ Under make sure to select the necessary permissions required for your use case. To access packages from the GitHub Package Registry, you typically need permissions.\n‚Ä¢ After configuring the settings, click the button at the bottom of the page.\n‚Ä¢ GitHub will generate a personal access token for you.\n\nYou can use this personal access token in your npm or yarn configuration when authenticating with the GitHub Package Registry.\n\nTo install a package from the GitHub package registry, create a file in your project and add the below configuration. Here, replace with your GitHub username.\n\nWe shouldn't include the access token directly in this file, as it is tracked by Git. Instead, open a terminal and set an environment variable for your npm token. To do that, run the following command with your actual token:\n\nYou may want to add this export command to your shell profile (e.g., .bashrc, .zshrc) to make it persistent.\n\nWhen you run npm commands, it will automatically substitute with the actual token from the environment variable.\n\nReplace with your GitHub username and with the library name and run it. It will install the package from the registry.\n\nWe are going to use Netlify for the deployment of our Storybook.\n\nFirst, create an account on Netlify with GitHub and select the repository. Now, add the configuration as shown in the image below.\n\nHere, we are running to generate static files for Storybook, which will be placed in the directory.\n\nClick ‚Äòdeploy,‚Äô and Storybook is successfully deployed on Netlify.\n\nThis comprehensive guide covered essential tools and best practices for building a high-quality React component library ‚Äî from project setup and testing to publishing, deployment, and local testing. Following these steps will enable you to create reusable, robust React components suitable for use across projects and teams. Whether building an open-source library or internal UI toolkit, you now have a solid foundation to develop shareable React components.\n\nFeel free to adapt and extend these practices to suit the specific needs of your component library project. Happy coding!"
    },
    {
        "link": "https://reddit.com/r/reactjs/comments/1g8xbmk/best_practices_for_building_a_component_library",
        "document": "Hi everyone, I‚Äôm planning to build a custom component library using React, TypeScript, and TailwindCSS. I‚Äôd appreciate any modern guides or resources on how to structure this type of library efficiently. Additionally, I‚Äôm looking for advice on how to synchronize changes made locally to the component library with multiple Next.js projects without manually copying files each time. What tools or workflows would you recommend for keeping everything in sync? Any pitfalls to avoid? Thanks in advance!"
    },
    {
        "link": "https://stackoverflow.com/questions/59900538/shared-component-library-best-practices",
        "document": "This is an extremely long answer because this question deserves an extremely long and detailed answer as the \"best practice\" way is more complicated than just a few-line response.\n\nI've maintained our in-house libraries for 3.5+ years in that time I've settled on two ways I think libraries should be bundled the trade-offs depend on how big your library is and personally we compile both ways to please both subsets of consumers.\n\nMethod 1: Create an index.ts file with everything you want to be exposed exported and target rollup at this file as its input. Bundle your entire library into a single index.js file and index.css file; With external dependencies inherited from the consumer project to avoid duplication of library code. (gist included at bottom of example config)\n‚Ä¢ Pros: Easy to consume as project consumers can import everything from the root relative library path\n‚Ä¢ Cons: This will never be tree shakable, and before people say to do this with ESM and it will be tree shakeable. NextJS doesn't support ESM at this current stage and neither do a lot of project setups that's why it's still a good idea to compile this build to just CJS. If someone imports 1 of your components they will get all the CSS and all the javascript for all your components.\n\nMethod 2: This is for advanced users: Create a new file for every export and use rollup-plugin-multi-input with the option \"preserveModules: true\" depending on how what CSS system you're using your also need to make sure that your CSS is NOT merged into a single file but that each CSS file requires(\".css\") statement is left inside the output file after rollup and that CSS file exists.\n‚Ä¢ Pros: When users import { Foo } from \"library/dist/foo\" they will only get the code for Foo, and the CSS for Foo, and nothing more.\n‚Ä¢ Cons: This setup involves the consumer having to handle node_modules require(\".css\") statements in their build configuration with NextJS this is done with npm package.\n‚Ä¢ Caveat: We use our own babel plugin you can find it here: https://www.npmjs.com/package/babel-plugin-qubic to allow people to and then with babel transform it to...\n\nWe have multiple rollup configurations where we actually use both methods; so for library consumers who don't care for tree shaking can just do and import the single CSS file, and for library consumers who do care for tree shaking and only using critical CSS they can just turn on our babel plugin.\n\nwhether you are using typescript or not ALWAYS build with Make sure your .babelrc looks like this.\n\nAnd with the babel plugin in rollup looking like this...\n\nAnd your package.json looking ATLEAST like this:\n\nAnd finally your externals in rollup looking ATLEAST like this.\n‚Ä¢ This will bundle your shit to automatically to inherit react/react-dom and your other peer/external dependencies from the consumer project meaning they won't be duplicated in your bundle.\n‚Ä¢ This will bundle to ES5\n‚Ä¢ This will automatically require(\"..\") in all the babel helper functions for objectSpread, classes, etc FROM the consumer project which will wipe another 15-25KB from your bundle size and mean that the helper functions for objectSpread won't be duplicated in your library output + the consuming projects bundled output.\n‚Ä¢ externals will match anything that starts with that peer-dependency suffix i.e babel-helpers will match external for babel-helpers/helpers/object-spread\n\nFinally here is a gist for an example single index.js file output rollup config file. https://gist.github.com/ShanonJackson/deb65ebf5b2094b3eac6141b9c25a0e3 Where the target src/export/index.ts looks like this...\n\nLet me know if you experience any problems with babel, rollup, or have any questions about bundling/libraries."
    }
]