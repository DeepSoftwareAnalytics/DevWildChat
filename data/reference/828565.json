[
    {
        "link": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
        "document": "\n• Returns the length of this string. The length is equal to the number of Unicode code units in the string. the length of the sequence of characters represented by this object.\n• if, and only if, . Returnsif, and only if, is if is , otherwise\n• value at the specified index. An index ranges from to . The first value of the sequence is at index , the next at index , and so on, as for array indexing. Returns thevalue at the specified index. An index ranges fromto. The firstvalue of the sequence is at index, the next at index, and so on, as for array indexing. If the value specified by the index is a surrogate, the surrogate value is returned. - the index of the value. the value at the specified index of this string. The first value is at index . - if the argument is negative or not less than the length of this string.\n• values (Unicode code units) and ranges from to . Returns the character (Unicode code point) at the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value specified at the given index is in the high-surrogate range, the following index is less than the length of this , and the value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the value at the given index is returned. - the index to the values the code point value of the character at the - if the argument is negative or not less than the length of this string.\n• values (Unicode code units) and ranges from to Returns the character (Unicode code point) before the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value at is in the low-surrogate range, is not negative, and the value at is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the value at is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned. - the index following the code point that should be returned the Unicode code point value before the given index. - if the argument is less than 1 or greater than the length of this string.\n• Returns the number of Unicode code points in the specified text range of this . The text range begins at the specified and extends to the at index . Thus the length (in s) of the text range is . Unpaired surrogates within the text range count as one code point each. - the index to the first of the text range. - the index after the last of the text range. the number of Unicode code points in the specified text range - if the is negative, or is larger than the length of this , or is larger than .\n• Returns the index within this that is offset from the given by code points. Unpaired surrogates within the text range given by and count as one code point each. - the index to be offset the index within this - if is negative or larger then the length of this , or if is positive and the substring starting with has fewer than code points, or if is negative and the substring before has fewer than the absolute value of code points.\n• Copies characters from this string into the destination character array. The first character to be copied is at index ; the last character to be copied is at index (thus the total number of characters to be copied is ). The characters are copied into the subarray of starting at index and ending at index: - index of the first character in the string to copy. - index after the last character in the string to copy. - the start offset in the destination array. - If any of the following is true:\n• is greater than the length of this string\n• Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in any way. The first character to be copied is at index ; the last character to be copied is at index . The total number of characters to be copied is . The characters, converted to bytes, are copied into the subarray of starting at index and ending at index: - Index of the first character in the string to copy - Index after the last character in the string to copy - The start offset in the destination array - If any of the following is true:\n• is greater than the length of this String\n• into a sequence of bytes using the named charset, storing the result into a new byte array. Encodes thisinto a sequence of bytes using the named charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the given charset is unspecified. The class should be used when more control over the encoding process is required. - The name of a supported charset - If the named charset is not supported\n• into a sequence of bytes using the given Encodes thisinto a sequence of bytes using the given charset , storing the result into a new byte array. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array. The class should be used when more control over the encoding process is required. - The Charset to be used to encode the\n• into a sequence of bytes using the platform's default charset, storing the result into a new byte array. Encodes thisinto a sequence of bytes using the platform's default charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the default charset is unspecified. The class should be used when more control over the encoding process is required.\n• Compares this string to the specified object. The result is if and only if the argument is not and is a object that represents the same sequence of characters as this object. - The object to compare this against if the given object represents a equivalent to this string, otherwise\n• Compares this string to the specified . The result is if and only if this represents the same sequence of characters as the specified . This method synchronizes on the . - The to compare this against if this represents the same sequence of characters as the specified , otherwise\n• Compares this string to the specified . The result is if and only if this represents the same sequence of char values as the specified sequence. Note that if the is a then the method synchronizes on it. - The sequence to compare this against if this represents the same sequence of char values as the specified sequence, otherwise\n• to another , ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Compares thisto another, ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Two characters and are considered the same ignoring case if at least one of the following is true:\n• The two characters are the same (as compared by the operator)\n• Applying the method to each character produces the same result\n• Applying the method to each character produces the same result - The to compare this against if the argument is not and it represents an equivalent ignoring case; otherwise\n• object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this object lexicographically precedes the argument string. The result is a positive integer if this object lexicographically follows the argument string. The result is zero if the strings are equal; returns exactly when the . Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by thisobject is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if thisobject lexicographically precedes the argument string. The result is a positive integer if thisobject lexicographically follows the argument string. The result is zero if the strings are equal;returnsexactly when the method would return This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let k be the smallest such index; then the string whose character at position k has the smaller value, as determined by using the < operator, lexicographically precedes the other string. In this case, returns the difference of the two character values at position in the two string -- that is, the value: If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, returns the difference of the lengths of the strings -- that is, the value: If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case,returns the difference of the lengths of the strings -- that is, the value: - the to be compared. the value if the argument string is equal to this string; a value less than if this string is lexicographically less than the string argument; and a value greater than if this string is lexicographically greater than the string argument.\n• with normalized versions of the strings where case differences have been eliminated by calling on each character. Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of callingwith normalized versions of the strings where case differences have been eliminated by callingon each character. Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The java.text package provides collators to allow locale-sensitive ordering. - the to be compared. a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this String, ignoring case considerations.\n• Tests if two string regions are equal. A substring of this object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this object to be compared begins at index and has length . The substring of other to be compared begins at index and has length . The result is if and only if at least one of the following is true:\n• is greater than the length of this object.\n• is greater than the length of the other argument.\n• There is some nonnegative integer k less than such that: k k - the starting offset of the subregion in this string. - the starting offset of the subregion in the string argument. - the number of characters to compare. if the specified subregion of this string exactly matches the specified subregion of the string argument; otherwise.\n• Tests if two string regions are equal. A substring of this object is compared to a substring of the argument . The result is if these substrings represent character sequences that are the same, ignoring case if and only if is true. The substring of this object to be compared begins at index and has length . The substring of to be compared begins at index and has length . The result is if and only if at least one of the following is true:\n• is greater than the length of this object.\n• is greater than the length of the other argument.\n• is and there is some nonnegative integer k less than such that:\n• is and there is some nonnegative integer k less than such that: and: - the starting offset of the subregion in this string. - the starting offset of the subregion in the string argument. - the number of characters to compare. if the specified subregion of this string matches the specified subregion of the string argument; otherwise. Whether the matching is exact or case insensitive depends on the argument.\n• Tests if the substring of this string beginning at the specified index starts with the specified prefix. - where to begin looking in this string. if the character sequence represented by the argument is a prefix of the substring of this object starting at index ; otherwise. The result is if is negative or greater than the length of this object; otherwise the result is the same as the result of the expression\n• Tests if this string starts with the specified prefix. if the character sequence represented by the argument is a prefix of the character sequence represented by this string; otherwise. Note also that will be returned if the argument is an empty string or is equal to this object as determined by the method.\n• Tests if this string ends with the specified suffix. if the character sequence represented by the argument is a suffix of the character sequence represented by this object; otherwise. Note that the result will be if the argument is the empty string or is equal to this object as determined by the method.\n• object is computed as using arithmetic, where is the ith character of the string, is the length of the string, and indicates exponentiation. (The hash value of the empty string is zero.) Returns a hash code for this string. The hash code for aobject is computed asusingarithmetic, whereis theth character of the string,is the length of the string, andindicates exponentiation. (The hash value of the empty string is zero.) a hash code value for this object.\n• occurs in the character sequence represented by this object, then the index (in Unicode code units) of the first such occurrence is returned. For values of in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: is true. For other values of , it is the smallest value k such that: is true. In either case, if no such character occurs in this string, then is returned. Returns the index within this string of the first occurrence of the specified character. If a character with valueoccurs in the character sequence represented by thisobject, then the index (in Unicode code units) of the first such occurrence is returned. For values ofin the range from 0 to 0xFFFF (inclusive), this is the smallest valuesuch that:is true. For other values of, it is the smallest valuesuch that:is true. In either case, if no such character occurs in this string, thenis returned. the index of the first occurrence of the character in the character sequence represented by this object, or if the character does not occur.\n• Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index. If a character with value occurs in the character sequence represented by this object at an index no smaller than , then the index of the first such occurrence is returned. For values of in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: is true. For other values of , it is the smallest value k such that: is true. In either case, if no such character occurs in this string at or after position , then is returned. is true. For other values of, it is the smallest valuesuch that:is true. In either case, if no such character occurs in this string at or after position, thenis returned. There is no restriction on the value of . If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: is returned. All indices are specified in values (Unicode code units). - the index to start the search from. the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to , or if the character does not occur.\n• in the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest value k such that: is true. For other values of , it is the largest value k such that: is true. In either case, if no such character occurs in this string, then is returned. The is searched backwards starting at the last character. Returns the index within this string of the last occurrence of the specified character. For values ofin the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest valuesuch that:is true. For other values of, it is the largest valuesuch that:is true. In either case, if no such character occurs in this string, thenis returned. Theis searched backwards starting at the last character. the index of the last occurrence of the character in the character sequence represented by this object, or if the character does not occur.\n• in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value k such that: is true. For other values of , it is the largest value k such that: is true. In either case, if no such character occurs in this string at or before position , then is returned. Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. For values ofin the range from 0 to 0xFFFF (inclusive), the index returned is the largest valuesuch that:is true. For other values of, it is the largest valuesuch that:is true. In either case, if no such character occurs in this string at or before position, thenis returned. All indices are specified in values (Unicode code units). - the index to start the search from. There is no restriction on the value of . If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned. the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to , or if the character does not occur before that point.\n• Returns the index within this string of the first occurrence of the specified substring. The returned index is the smallest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. the index of the first occurrence of the specified substring, or if there is no such occurrence.\n• Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The returned index is the smallest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. - the index from which to start the search. the index of the first occurrence of the specified substring, starting at the specified index, or if there is no such occurrence.\n• . Returns the index within this string of the last occurrence of the specified substring. The last occurrence of the empty string \"\" is considered to occur at the index value The returned index is the largest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. the index of the last occurrence of the specified substring, or if there is no such occurrence.\n• Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index. The returned index is the largest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. - the index to start the search from. the index of the last occurrence of the specified substring, searching backward from the specified index, or if there is no such occurrence.\n• Returns a string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string. - if is negative or larger than the length of this object.\n• and extends to the character at index . Thus the length of the substring is . Returns a string that is a substring of this string. The substring begins at the specifiedand extends to the character at index. Thus the length of the substring is - if the is negative, or is larger than the length of this object, or is larger than .\n• Returns a character sequence that is a subsequence of this sequence. An invocation of this method of the form behaves in exactly the same way as the invocation behaves in exactly the same way as the invocation This method is defined so that the class can implement the interface. - if or is negative, if is greater than , or if is greater than\n• Concatenates the specified string to the end of this string. If the length of the argument string is , then this object is returned. Otherwise, a object is returned that represents a character sequence that is the concatenation of the character sequence represented by this object and the character sequence represented by the argument string. - the that is concatenated to the end of this . a string that represents the concatenation of this object's characters followed by the string argument's characters.\n• in this string with . Returns a string resulting from replacing all occurrences ofin this string with If the character does not occur in the character sequence represented by this object, then a reference to this object is returned. Otherwise, a object is returned that represents a character sequence identical to the character sequence represented by this object, except that every occurrence of is replaced by an occurrence of . \"mesquite in your cellar\".replace('e', 'o') returns \"mosquito in your collar\" \"the war of baronets\".replace('r', 'y') returns \"the way of bayonets\" \"sparring with a purple porpoise\".replace('p', 't') returns \"starring with a turtle tortoise\" \"JonL\".replace('q', 'x') returns \"JonL\" (no change) a string derived from this string by replacing every occurrence of with .\n• Tells whether or not this string matches the given regular expression An invocation of this method of the form str regex yields exactly the same result as the expression - the regular expression to which this string is to be matched if, and only if, this string matches the given regular expression - if the regular expression's syntax is invalid\n• Returns true if and only if this string contains the specified sequence of char values. - the sequence to search for true if this string contains , false otherwise\n• Replaces the first substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str regex repl yields exactly the same result as the expression Note that backslashes ( ) and dollar signs ( ) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see . Use to suppress the special meaning of these characters, if desired. - the regular expression to which this string is to be matched - the string to be substituted for the first match - if the regular expression's syntax is invalid\n• Replaces each substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str regex repl yields exactly the same result as the expression Note that backslashes ( ) and dollar signs ( ) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see . Use to suppress the special meaning of these characters, if desired. - the regular expression to which this string is to be matched - the string to be substituted for each match - if the regular expression's syntax is invalid\n• Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in \"ba\" rather than \"ab\". - The sequence of char values to be replaced\n• Splits this string around matches of the given regular expression The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string. When there is a positive-width match at the beginning of this string then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring. The parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit n is greater than zero then the pattern will be applied at most n - 1 times, the array's length will be no greater than n, and the array's last entry will contain all input beyond the last matched delimiter. If n is non-positive then the pattern will be applied as many times as possible and the array can have any length. If n is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded. The string , for example, yields the following results with these parameters: An invocation of this method of the form str. regex n yields the same result as the expression - the result threshold, as described above the array of strings computed by splitting this string around matches of the given regular expression - if the regular expression's syntax is invalid\n• Splits this string around matches of the given regular expression This method works as if by invoking the two-argument method with the given expression and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. The string , for example, yields the following results with these expressions: the array of strings computed by splitting this string around matches of the given regular expression - if the regular expression's syntax is invalid\n• joined together with a copy of the specified . Note that if an element is null, then is added. Returns a new String composed of copies of thejoined together with a copy of the specifiedNote that if an element is null, thenis added. - the delimiter that separates each element - the elements to join together. a new that is composed of the separated by the - If or is\n• composed of copies of the joined together with a copy of the specified . For example, List<String> strings = new LinkedList<>(); strings.add(\"Java\");strings.add(\"is\"); strings.add(\"cool\"); String message = String.join(\" \", strings); //message returned is: \"Java is cool\" Set<String> strings = new LinkedHashSet<>(); strings.add(\"Java\"); strings.add(\"is\"); strings.add(\"very\"); strings.add(\"cool\"); String message = String.join(\"-\", strings); //message returned is: \"Java-is-very-cool\" Note that if an individual element is , then is added. Returns a newcomposed of copies of thejoined together with a copy of the specifiedNote that if an individual element is, thenis added. - a sequence of characters that is used to separate each of the in the resulting - an that will have its joined together. a new that is composed from the argument - If or is\n• to lower case using the rules of the given . Case mapping is based on the Unicode Standard version specified by the may be a different length than the original . Converts all of the characters in thisto lower case using the rules of the given. Case mapping is based on the Unicode Standard version specified by the class. Since case mappings are not always 1:1 char mappings, the resultingmay be a different length than the original Examples of lowercase mappings are in the following table: - use the case transformation rules for this locale\n• to lower case using the rules of the default locale. This is equivalent to calling . Converts all of the characters in thisto lower case using the rules of the default locale. This is equivalent to calling Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, in a Turkish locale returns , where '\\u0131' is the LATIN SMALL LETTER DOTLESS I character. To obtain correct results for locale insensitive strings, use .\n• to upper case using the rules of the given . Case mapping is based on the Unicode Standard version specified by the may be a different length than the original . Converts all of the characters in thisto upper case using the rules of the given. Case mapping is based on the Unicode Standard version specified by the class. Since case mappings are not always 1:1 char mappings, the resultingmay be a different length than the original Examples of locale-sensitive and 1:M case mappings are in the following table. - use the case transformation rules for this locale\n• to upper case using the rules of the default locale. This method is equivalent to . Converts all of the characters in thisto upper case using the rules of the default locale. This method is equivalent to Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, in a Turkish locale returns , where '\\u0130' is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To obtain correct results for locale insensitive strings, use .\n• Returns a string whose value is this string, with any leading and trailing whitespace removed. If this object represents an empty character sequence, or the first and last characters of character sequence represented by this object both have codes greater than (the space character), then a reference to this object is returned. Otherwise, if there is no character with a code greater than in the string, then a object representing an empty string is returned. Otherwise, let k be the index of the first character in the string whose code is greater than , and let m be the index of the last character in the string whose code is greater than . A object is returned, representing the substring of this string that begins with the character at index k and ends with the character at index m-that is, the result of . This method may be used to trim whitespace (as defined above) from the beginning and end of a string. A string whose value is this string, with any leading and trailing white space removed, or this string if it has no leading or trailing white space.\n• This object (which is already a string!) is itself returned.\n• Converts this string to a new character array. a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string.\n• Returns a formatted string using the specified format string and arguments. The locale always used is the one returned by . - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by . The behaviour on a argument depends on the conversion. - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification.\n• Returns a formatted string using the specified locale, format string, and arguments. - The locale to apply during formatting. If is then no localization is applied. - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by . The behaviour on a argument depends on the conversion. - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification\n• Returns the string representation of the argument. if the argument is , then a string equal to ; otherwise, the value of is returned.\n• Returns the string representation of the array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the returned string. a that contains the characters of the character array.\n• array argument. Returns the string representation of a specific subarray of thearray argument. The argument is the index of the first character of the subarray. The argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string. a that contains the characters of the specified subarray of the character array. - if is negative, or is negative, or is larger than .\n• a that contains the characters of the specified subarray of the character array. - if is negative, or is negative, or is larger than .\n• a that contains the characters of the character array.\n• Returns the string representation of the argument. if the argument is , a string equal to is returned; otherwise, a string equal to is returned.\n• Returns the string representation of the argument. a string of length containing as its single character the argument .\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• A pool of strings, initially empty, is maintained privately by the class . When the intern method is invoked, if the pool already contains a string equal to this object as determined by the method, then the string from the pool is returned. Otherwise, this object is added to the pool and a reference to this object is returned. It follows that for any two strings and , is if and only if is . All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the . a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings."
    },
    {
        "link": "https://docs.oracle.com/javase/8/docs/api?java/lang/String.html",
        "document": "JavaScript is disabled on your browser.\n\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. Link to Non-frame version."
    },
    {
        "link": "https://w3schools.com/java/java_ref_string.asp",
        "document": ""
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/java.lang.string?view=net-android-35.0",
        "document": "The class represents character strings. All string literals in Java programs, such as , are implemented as instances of this class.\n\nStrings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example: <blockquote>\n\nHere are some more examples of how strings can be used: <blockquote>\n\nThe class includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the class.\n\nThe Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. For additional information on string concatenation and conversion, see The Java™ Language Specification.\n\nUnless otherwise noted, passing a argument to a constructor or method in this class will cause a to be thrown.\n\nA represents a string in the UTF-16 format in which <em>supplementary characters</em> are represented by <em>surrogate pairs</em> (see the section Unicode Character Representations in the class for more information). Index values refer to code units, so a supplementary character uses two positions in a .\n\nThe class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., values).\n\nUnless otherwise noted, methods for comparing Strings do not take locale into account. The class provides methods for finer-grain, locale-sensitive String comparison.\n\nPortions of this page are modifications based on work created and shared by the Android Open Source Project and used according to terms described in the Creative Commons 2.5 Attribution License."
    },
    {
        "link": "https://javaalmanac.io/jdk/1.2/api/java/lang/String.html",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/54723382/how-to-code-these-conditional-statements-in-more-elegant-scalable-manner",
        "document": "Your combinations of parameters is nothing more than a binary number (like ) where the indicates a and the a .\n\nSo your version can be easily calculated by using all the combinations of ones and zeroes. Possible combinations with 2 input parameters are:\n• -> first is , second is\n• -> first is , second is\n\nSo with this knowledge I've come up with a quite scalable solution using a \"bit mask\" (nothing more than a number) and \"bit operations\":\n\nThe most interesting line is probably this:\n\nIt does many things at once, I split it up. The part calculates the position of the \"bit\" inside the bit mask from the right ( based, like in arrays).\n\nThe next part: shifts the number the amount of positions to the left. So lets say we have a position of 3, then the result of the operation ( is the third position) would be a binary number of the value .\n\nThe sign is a binary inverse, so all the bits are inverted, all are turned to and all are turned to . With the previous example the inverse of would be .\n\nThe last part: is the same as where is the previously computed value . This is nothing more than a binary AND, so all the same bits which are in and in are kept, where as all others are discarded.\n\nAll in all, does this single line nothing more than remove the \"bit\" at a given position of the if the input parameter is .\n\nIf the version numbers are not sequential from to then a version lookup table, like this one may help you.\n\nThe whole code would need just a single adjustment in the last line:\n\nWhere your array consists of all the versions in order, but reversed. (index of is where both parameters are false)"
    },
    {
        "link": "https://medium.com/@TechiesSpot/loops-and-conditional-statements-in-java-best-practices-and-effective-usage-bb3808a19a7e",
        "document": "Loops and conditional statements are fundamental constructs in Java programming, allowing developers to control the flow of their code and perform repetitive tasks efficiently. In this article, we’ll explore effective uses of loops and conditional statements in Java, provide code examples, discuss their causes and effects, and offer tips on how to handle them perfectly. Additionally, we’ll recommend books for further learning.\n\nLoops and conditional statements are indispensable tools in Java programming. Loops enable the execution of a block of code repeatedly, while conditional statements control the flow of a program based on specified conditions. Effective usage of these constructs is essential for writing clean, efficient, and maintainable code.\n\nThe loop is commonly used when you know the number of iterations in advance. Here's a simple example that prints numbers from 1 to 5:\n\nThe loop continues execution as long as a specified condition is true. This example prints numbers from 1 to 5 using a loop:"
    },
    {
        "link": "https://stackoverflow.com/questions/8897520/conditions-in-loops-best-practices",
        "document": "Is there any reason to use one over the other? Or is it just personal preference? The main language I'm asking this for is Java, but I guess it also applies to most others.\n\nSay I have a loop like this:\n\nTo me, this depends on what's the split between the and the branch relative sizes: if one is massively larger than the other, and the smaller one represents a logically exceptional situation, I put the shorter one into , and add a ; when they are roughly equal, both in size and in the logic flow, I keep them in their own and branches. for (String tok : tokens) { if (isKeyword(tok)) { output.write(tok); continue; } // Do some massive processing of non-keyword tokens here // This block goes on... // and on... // and on... You get the idea } for (String op : operators) { if (isAdditive(op)) { // Do something for additive ops } else { // Do something for non-additive ops } }\n\nAs everyone said, the second form is recommended. Many coding standards recommend you to avoid \"continue\" and \"break\" statements because it adds complexity to your code. Just to give you a reference: JSF++ (Rule 190) and Misra C (Rule 57) say: The continue statement shall not be used. Those are standards for safety-critical applications, but they can be applied to other apps as well. Misra is paid, but JSF++ can be downloaded for free here: It is for C++, but many rules can be applied to other languages. It worths the reading!\n\nIn this particular case, I agree with everyone else that the second is preferable. But there are cases where I'd go for the first. If were really just that one call, and is an edge case, and were actually 20 lines of code instead of just that one call, then I'd prefer using the . In that scenario, I read it as \"first, let's take care of this one edge case quickly. Okay, now let's do the real stuff.\" Of course, one could make the argument for the by rephrasing my interpretation to \"if we're in the edge case do this, else do the real stuff.\" But that means all those 20 lines are now one nesting deeper, and to me it's more readable to take care of the edge cases first, and then focus on the common path.\n\nI actually do believe there is a pertinent reason to prefer the first over the second, although in most cases, the second is definetely more readable. Say for example you have a lot, and I mean a lot of conditions inside your loop, where by having a lot of statements actually affects readability through indentation: for ( int i = 0 ; i < n ; i++ ) { if ( obj[i] ) { doSomething(); if ( someOtherCondition() { //........... if ( /* some levels down */ ) { } //..... } } } I might get arguments like \"You can refactor it\" blah blah, but sometimes, rarely, you simply can't. So you can refactor and make it a lot more readable with: for ( int i = 0 ; i < n ; i++ ) { if ( !obj[i] ) { continue; } doSomething(); if ( !someOtherCondition() { continue; } //........... }\n\nI think it depends more on what you are doing. This is a simple example, but as a rule if there is a condition that I'm \"Extracting\" from other loop logic, I will pull it out as quickly as possible with a continue rather than adding to the complexity of future if statements (your first example IF it is a condition that can be extracted simplifying future logic) For instance: for ( int i = 0 ; i < n ; i++ ) { if( obj[i] != null && obj[i].instanceOf(\"A\")) { doSomething(); } else if(obj[i] != null && obj[i].instanceOf(\"B\"){ doSomethingElse(); } } NOW it's clear that extracting the first condition into could save some confusion as this loop gets enhanced. I use this tactic a lot for testing method parameters and either returning early or throwing an exception. Also (This is totally an aside, not part of the answer at all!), I'd say that if you ever see a \"Truly\" balanced condition you might give a serious thought to your OO design. If doSomething and someOtherCondition were that similar, they should probably be different implementations of a method defined in a base class or interface, leading to this code:"
    },
    {
        "link": "https://blog.jetbrains.com/idea/2024/02/java-best-practices",
        "document": "Good code follows certain rules, and knowing them increases your chances of success. We’d like to share some Java best practices that will help you on your way. We’ll cover the must-know tips and tricks, from broad advice on software development to Java- and project-specific know-how. Let’s get started!\n\nLet’s keep the following general rules about modern coding in mind.\n\nThe primary purpose of code is to be understood and maintained, not to serve as a showcase of technical skills. Clear code leads to software that’s easier to debug, maintain, and extend, benefiting everyone involved in the project. Complexity isn’t a badge of honor – simplicity and readability are.\n\nConsider the following examples.\n\nThis is an unconventional way to swap the values of variables `a` and `b`. Though it’s clever, it can be confusing to understand at first glance.\n\nThis is a more common approach. Even though it requires an additional line of code, its straightforwardness makes it easier to understand for most programmers.\n\nMake sure your methods and classes aren’t too long. While there’s no strict rule regarding the exact number of lines or words for a class, it’s advisable to maintain a focused and cohesive structure. When it comes to methods, it’s generally suggested to aim for around 10 to 20 lines of code per method. If a method gets longer, it might be better to split it into smaller, more manageable parts.\n\nIf you’d like to practice recognizing methods that are too long, here is a great video by technical coach Emily Bache.\n\nIntelliJ IDEA can also help you get rid of long methods and classes by providing various refactoring options. For example, it allows you to extract methods to break up a long method into shorter ones.\n\nNaming is hard, so do it with care\n\nProper names for methods and variables serve as direct, intuitive guides to understanding the purpose and function of your code, which is essential for effective communication. Here is what you need to know about the most crucial naming conventions.\n\nWe advise staying away from single-letter variables, ensuring method names reflect their actions and aligning object and field names with the business domain to enhance clarity and communication. For instance, a method named calculateTotalPrice() instantly conveys its purpose, whereas a vague name like calculate() leaves its functionality ambiguous. Similarly, a variable named customerEmailAddress is clear right away, while an abbreviation like cea could refer to anything, leading to confusion.\n\nAs another example, instead of naming a variable timeout, it’s helpful to specify the unit to which it relates. Use timeoutInMs or timeoutInMilliseconds to avoid confusion about the units.\n\nTesting your code is necessary to ensure your app works as expected and will continue to work as it changes. Tests help spot issues early, making fixes cheaper and easier. They also guide you on how the code should work and minimize the possibility of breaking it when updating it later.\n\nGood test names are important as they show what each test does and what it looks for. For example, a test called AlertWhenEmailIsMissing()checks for alerts when an email is missing, so you don’t need to dig into the details.\n\nYou can read this blog post by Marit van Dijk for more information on tests.\n\nThe following tips and tricks will help you elevate your code by avoiding some common mistakes while writing in Java.\n\nUse switch expressions instead of excessive If statements\n\nUsing switch expressions can make your code more readable and organized by consolidating multiple conditions into a single structure. This approach simplifies the code, making it easier to understand and maintain.\n\nLet’s consider the following example with different types of ice cream and their key ingredients.\n\nIn this example, the code uses a chain of else–if statements to match an ice cream flavor with its key ingredient. As the number of flavors grows, the number of if statements can become unmanageable, making the code harder to read.\n\nIn this alternative example, we achieve the same result using a switch expression instead of multiple if-else conditions. The switch expression is more compact, neater, and more easily understood when comparing a single variable against multiple constant values.\n\nIntelliJ IDEA offers a special inspection that can transform your if statements into switch expressions in a matter of seconds.\n\nYou can find more amazing examples of switch usage in a recent blog post by Java Developer Advocate Mala Gupta.\n\nEmpty catch blocks in Java are catch clauses that don’t have any code inside them to handle exceptions. When an exception is caught by such a block, nothing happens and the program continues as if no error occurred. This can make it difficult to notice and debug issues.\n\nIn this scenario, we catch the exception but do nothing about it.\n\nIntelliJ IDEA highlights such cases with an inspection and offers solutions:\n\nOne way of handling the exception is to log it with the help of e.printStackTrace(), which prints the stack trace to the console, helping us identify and debug potential issues.\n• Logging the exception and rethrowing it\n\nIn an ideal world, the catch block would identify IOException, then print an error message to the console and rethrow the exception to handle it later.\n\nThis way, you get the full picture of what went wrong.\n• Logging the exception and returning an alternate value\n\nAnother way of solving the empty catch block issue is by logging the exception but returning a meaningful value.\n\nWhile arrays in Java are efficient and easy to use, they are also fixed in size and offer limited operations, making them less adaptable for various data manipulations.\n\nCollections in Java provide far more flexibility and utilities, such as ArrayList or HashSet. For example, ArrayList offers dynamic resizing and many utility methods, and is easier to work with, especially with generics. Let’s take a look at this through some code examples:\n\nWe’ve created an array of Strings. Since arrays in Java are fixed size, if we wanted to add an eleventh element, we’d have to create a new array and copy over all of the elements.\n\nAs an alternative to the previous code, we can use a collection class called ArrayList. Collections like ArrayList can grow and shrink at runtime, providing greater flexibility. They also come with powerful methods to manipulate data, such as .add(), .remove(), .contains(), .size(), and more.\n\nImmutable objects are objects whose state cannot be changed after creation. They help to write safer and cleaner code by removing the complexities associated with tracking mutable state changes. This minimizes the risk of bugs and unintended side effects, ensures consistent behavior, and simplifies the process of debugging and maintaining the application. In Java, we achieve immutability using final.\n\nIn this example, we’ll create a Car class and print its brand and model. After that, we’ll change the car’s model and print it again. The console output will show that the state of the Car class has been changed, illustrating mutable behavior.\n\nIn the improved code below, you can see that we’ve done the same, but we can’t change the car model or brand because we don’t have a setter method and the Car class is final. The console output will show that the state of the Car class remains the same, illustrating immutable behavior.\n\nIn Java, it’s usually better to use composition (having a reference or dependency on an object of another class) instead of inheritance (creating a subclass from a superclass). Composition makes the code more flexible and easier to test.\n\nIn our example, GamingComputer inherits from BasicComputer. This can cause problems because if BasicComputer changes, it might break GamingComputer. Also, GamingComputer is locked into being a type of BasicComputer, limiting its flexibility.\n\nIn the second example, the Computer class is composed of Memory and Processor which are separate class instances that act as fields. Each of these classes defines its methods and behaviors independently. This approach is more flexible as you can swap different Memory or Processor types or change their behavior at runtime without changing the Computer class.\n\nFor more examples, take a look at Easy Hacks: How to Create Inheritance in Java.\n\nFunctional interfaces in Java are a type of interface that has just one abstract method. Lambdas provide a sleek, expressive way to implement them without the boilerplate code of anonymous classes.\n\nBelow we’ll use an anonymous inner class to implement the Comparator interface for sorting. This is bulky and may become unreadable with more complex interfaces.\n\nThis code does the same as above, but we are using a lambda function instead of an anonymous class. This makes the code much more compact and intuitive.\n\nUse enhanced for loops or streams\n\nEnhanced for loops (for-each loops) and streams in Java offer more readable and compact ways to iterate over collections or arrays compared to a traditional for loop.\n\nIn this code, we’re using a for loop to go over the list. It requires a counter, handling the element index, and defining the stopping condition – all of which add to the complexity.\n\nThis loop (forEach) eliminates the need for counters and directly gives us each item in the list, simplifying code and reducing the potential for errors. You can apply it with the help of an inspection in IntelliJ IDEA.\n\nThe usage of streams gives us each item, like the enhanced for loop, but also allows us to do complex operations like filtering and mapping.\n\nTry-with-resources statements help you ensure that each resource is closed properly after use. Not closing resources in a try block can cause memory issues and application errors, impacting performance and reliability.\n\nIn the example below, we handle the system resource FileInputStream manually, which may lead to a resource leak and other problems if an exception is thrown while closing.\n\nIn the improved version, declaring FileInputStream inside the try block means Java will automatically close it, regardless of whether we leave the try block normally or with an exception.\n\nDeeply nested code highlights logical issues that can be difficult to notice initially. This often comes from using lots of conditionals, which are the coding essentials, so we can’t just get rid of them. However, we do need to find ways to simplify the code.\n\nYou can see how strange abundant nested conditionals look.\n\nWe’ve used a “guard clauses” technique to eliminate nested conditionals. By quickly exiting the function when certain conditions are met, we preserve the same logic with cleaner-looking code.\n\nWe also have some helpful dos and don’ts for working on projects that contain multiple dependencies.\n\nKeep dependencies up to date\n\nRemember to keep your project’s dependencies updated to enhance security, introduce new features, and fix bugs. Regular updates ensure your project runs smoothly and remains compatible with other tools.\n\nIntelliJ IDEA can help you keep your dependencies up to date. First, install the Package Search plugin from JetBrains Marketplace via Preferences/Settings | Plugins. Then navigate to the Dependencies tool window to see all of the existing dependencies in your project and click the Upgrade link next to them.\n\nRegularly scanning your project for weak spots in dependencies and APIs helps you minimize security risks, stick to predefined rules, and keep things running smoothly. Addressing these vulnerabilities quickly helps protect your project and its users from potential threats.\n\nTo find vulnerable dependencies in IntelliJ IDEA, navigate to Code | Analyze Code and select Show Vulnerable Dependencies. The findings will appear in the Vulnerable Dependencies tab of the Problems tool window.\n\nYou can also right-click a folder or file, like pom.xml or build.gradle, in the Project tool window and choose Analyze Code | Show Vulnerable Dependencies from the context menu.\n\nEven without explicitly checking for vulnerabilities, IntelliJ IDEA will highlight vulnerabilities in pom.xml or build.gradle.\n\nCircular dependencies happen when parts of your project rely on each other in a loop. For example, part A needs something from part B, but part B also needs something from part A. This can make your project messy and hard to work on because it’s tough to figure out where one part starts and another ends. It’s best to avoid these loops to keep things clear and easy to manage.\n\nTo avoid circular dependencies, you can use the Dependency Matrix. It helps you visualize dependencies between components in your projects.\n\nWe hope that our advice simplifies your daily tasks and encourages you to write simple, clear, and professional code, inspiring you to become a more efficient developer.\n\nIntelliJ IDEA will help you find many of the items discussed in this blog post and provide automatic fixes. Give it a try and let us know what you think!"
    },
    {
        "link": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/if.html",
        "document": "The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't take advantage of improvements introduced in later releases and might use technology no longer available. See Dev.java for updated tutorials taking advantage of the latest releases. See Java Language Changes for a summary of updated language features in Java SE 9 and subsequent releases. See JDK Release Notes for information about new features, enhancements, and removed or deprecated options for all JDK releases.\n\nThe statement is the most basic of all the control flow statements. It tells your program to execute a certain section of code only if a particular test evaluates to . For example, the class could allow the brakes to decrease the bicycle's speed only if the bicycle is already in motion. One possible implementation of the method could be as follows:\n\nIf this test evaluates to (meaning that the bicycle is not in motion), control jumps to the end of the statement.\n\nIn addition, the opening and closing braces are optional, provided that the \"then\" clause contains only one statement:\n\nDeciding when to omit the braces is a matter of personal taste. Omitting them can make the code more brittle. If a second statement is later added to the \"then\" clause, a common mistake would be forgetting to add the newly required braces. The compiler cannot catch this sort of error; you'll just get the wrong results.\n\nThe statement provides a secondary path of execution when an \"if\" clause evaluates to . You could use an statement in the method to take some action if the brakes are applied when the bicycle is not in motion. In this case, the action is to simply print an error message stating that the bicycle has already stopped.\n\nThe following program, , assigns a grade based on the value of a test score: an A for a score of 90% or above, a B for a score of 80% or above, and so on.\n\nThe output from the program is:\n\nYou may have noticed that the value of can satisfy more than one expression in the compound statement: and . However, once a condition is satisfied, the appropriate statements are executed and the remaining conditions are not evaluated."
    },
    {
        "link": "https://w3schools.com/java/java_methods_param.asp",
        "document": "Information can be passed to methods as a parameter. Parameters act as variables inside the method.\n\nParameters are specified after the method name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma.\n\nThe following example has a method that takes a called fname as parameter. When the method is called, we pass along a first name, which is used inside the method to print the full name:\n\nWhen a parameter is passed to the method, it is called an argument. So, from the example above: is a parameter, while , and are arguments.\n\nYou can have as many parameters as you like:\n\nNote that when you are working with multiple parameters, the method call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.\n\nIt is common to use statements inside methods:"
    },
    {
        "link": "https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/reflect/Method.html",
        "document": "\n• flag for this reflected object to the indicated boolean value. A value of indicates that the reflected object should suppress checks for Java language access control when it is used. A value of indicates that the reflected object should enforce checks for Java language access control when it is used, with the variation noted in the class description. Set theflag for this reflected object to the indicated boolean value. A value ofindicates that the reflected object should suppress checks for Java language access control when it is used. A value ofindicates that the reflected object should enforce checks for Java language access control when it is used, with the variation noted in the class description. This method may be used by a caller in class to enable access to a of if any of the following hold:\n• and are in the same module.\n• The member is and is in a package that the module containing to at least the module containing .\n• The member is , is in a package that the module containing exports to at least the module containing , and is a subclass of .\n• is in a package that the module containing to at least the module containing . All packages in unnamed and open modules are open to all modules and so this method always succeeds when is in an unnamed or open module. This method cannot be used to enable access to private members, members with default (package) access, protected instance members, or protected constructors when the declaring class is in a different module to the caller and the package containing the declaring class is not open to the caller's module. This method cannot be used to enable write access to a non-modifiable final field. The following fields are non-modifiable:\n• static final fields declared in any class or interface The flag when suppresses Java language access control checks to only enable read access to these non-modifiable final fields. If there is a security manager, its method is first called with a permission. - the new value for the flag - if access cannot be enabled - if the request is denied by the security manager\n• objects that represent the formal parameter types, in declaration order, of the executable represented by this object. An array of length 0 is returned if the underlying executable takes no parameters. Note that the constructors of some inner classes may have an implicitly declared parameter in addition to explicitly declared ones. Also note that as a Returns an array ofobjects that represent the formal parameter types, in declaration order, of the executable represented by this object. An array of length 0 is returned if the underlying executable takes no parameters. Note that the constructors of some inner classes may have an implicitly declared parameter in addition to explicitly declared ones. Also note that as a modeling artifact , the number of returned parameters can differ depending on whether or not generic information is present. If generic information is present, only parameters explicitly present in the source will be returned; if generic information is not present, implicit and synthetic parameters may be returned as well. If a formal parameter type is a parameterized type, the object returned for it must accurately reflect the actual type arguments used in the source code. If a formal parameter type is a type variable or a parameterized type, it is created. Otherwise, it is resolved. an array of s that represent the formal parameter types of the underlying executable, in declaration order - if the generic method signature does not conform to the format specified in - if any of the parameter types of the underlying executable refers to a non-existent type declaration - if any of the underlying executable's parameter types refer to a parameterized type that cannot be instantiated for any reason\n• . The string is formatted as the method access modifiers, if any, followed by the method return type, followed by a space, followed by the class declaring the method, followed by a period, followed by the method name, followed by a parenthesized, comma-separated list of the method's formal parameter types. If the method throws checked exceptions, the parameter list is followed by a space, followed by the word \" \" followed by a comma-separated list of the thrown exception types. For example: Returns a string describing this. The string is formatted as the method access modifiers, if any, followed by the method return type, followed by a space, followed by the class declaring the method, followed by a period, followed by the method name, followed by a parenthesized, comma-separated list of the method's formal parameter types. If the method throws checked exceptions, the parameter list is followed by a space, followed by the word \"\" followed by a comma-separated list of the thrown exception types. For example: The access modifiers are placed in canonical order as specified by \"The Java Language Specification\". This is , or first, and then other modifiers in the following order: , , , , , , .\n• , including type parameters. The string is formatted as the method access modifiers, if any, followed by an angle-bracketed comma-separated list of the method's type parameters, if any, including informative bounds of the type parameters, if any, followed by the method's generic return type, followed by a space, followed by the class declaring the method, followed by a period, followed by the method name, followed by a parenthesized, comma-separated list of the method's generic formal parameter types. If this method was declared to take a variable number of arguments, instead of denoting the last parameter as \" \", it is denoted as \" \". A space is used to separate access modifiers from one another and from the type parameters or return type. If there are no type parameters, the type parameter list is elided; if the type parameter list is present, a space separates the list from the class name. If the method is declared to throw exceptions, the parameter list is followed by a space, followed by the word \" \" followed by a comma-separated list of the generic thrown exception types. Returns a string describing this, including type parameters. The string is formatted as the method access modifiers, if any, followed by an angle-bracketed comma-separated list of the method's type parameters, if any, including informative bounds of the type parameters, if any, followed by the method's generic return type, followed by a space, followed by the class declaring the method, followed by a period, followed by the method name, followed by a parenthesized, comma-separated list of the method's generic formal parameter types. If this method was declared to take a variable number of arguments, instead of denoting the last parameter as \"\", it is denoted as \"\". A space is used to separate access modifiers from one another and from the type parameters or return type. If there are no type parameters, the type parameter list is elided; if the type parameter list is present, a space separates the list from the class name. If the method is declared to throw exceptions, the parameter list is followed by a space, followed by the word \"\" followed by a comma-separated list of the generic thrown exception types. The access modifiers are placed in canonical order as specified by \"The Java Language Specification\". This is , or first, and then other modifiers in the following order: , , , , , , .\n• object, on the specified object with the specified parameters. Individual parameters are automatically unwrapped to match primitive formal parameters, and both primitive and reference parameters are subject to method invocation conversions as necessary. Invokes the underlying method represented by thisobject, on the specified object with the specified parameters. Individual parameters are automatically unwrapped to match primitive formal parameters, and both primitive and reference parameters are subject to method invocation conversions as necessary. If the underlying method is static, then the specified argument is ignored. It may be null. If the number of formal parameters required by the underlying method is 0, the supplied array may be of length 0 or null. If the underlying method is an instance method, it is invoked using dynamic method lookup as documented in The Java Language Specification, section 15.12.4.4; in particular, overriding based on the runtime type of the target object may occur. If the underlying method is static, the class that declared the method is initialized if it has not already been initialized. If the method completes normally, the value it returns is returned to the caller of invoke; if the value has a primitive type, it is first appropriately wrapped in an object. However, if the value has the type of an array of a primitive type, the elements of the array are not wrapped in objects; in other words, an array of primitive type is returned. If the underlying method return type is void, the invocation returns null. - the object the underlying method is invoked from - the arguments used for the method call the result of dispatching the method represented by this object on with parameters - if this object is enforcing Java language access control and the underlying method is inaccessible. - if the method is an instance method and the specified object argument is not an instance of the class or interface declaring the underlying method (or of a subclass or implementor thereof); if the number of actual and formal parameters differ; if an unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a parameter value cannot be converted to the corresponding formal parameter type by a method invocation conversion. - if the underlying method throws an exception. - if the specified object is null and the method is an instance method. - if the initialization provoked by this method fails.\n• s that represent the annotations on the formal parameters, in declaration order, of the represented by this object. Synthetic and mandated parameters (see explanation below), such as the outer \"this\" parameter to an inner class constructor will be represented in the returned array. If the executable has no parameters (meaning no formal, no synthetic, and no mandated parameters), a zero-length array will be returned. If the has one or more parameters, a nested array of length zero is returned for each parameter with no annotations. The annotation objects contained in the returned arrays are serializable. The caller of this method is free to modify the returned arrays; it will have no effect on the arrays returned to other callers. A compiler may add extra parameters that are implicitly declared in source (\"mandated\"), as well as parameters that are neither implicitly nor explicitly declared in source (\"synthetic\") to the parameter list for a method. See Returns an array of arrays ofs that represent the annotations on the formal parameters, in declaration order, of therepresented by this object. Synthetic and mandated parameters (see explanation below), such as the outer \"this\" parameter to an inner class constructor will be represented in the returned array. If the executable has no parameters (meaning no formal, no synthetic, and no mandated parameters), a zero-length array will be returned. If thehas one or more parameters, a nested array of length zero is returned for each parameter with no annotations. The annotation objects contained in the returned arrays are serializable. The caller of this method is free to modify the returned arrays; it will have no effect on the arrays returned to other callers. A compiler may add extra parameters that are implicitly declared in source (\"mandated\"), as well as parameters that are neither implicitly nor explicitly declared in source (\"synthetic\") to the parameter list for a method. See for more information. Note that any annotations returned by this method are declaration annotations. an array of arrays that represent the annotations on the formal and implicit parameters, in declaration order, of the executable represented by this object"
    },
    {
        "link": "https://stackoverflow.com/questions/2432443/best-practice-for-passing-many-arguments-to-method",
        "document": "This is not a good practice , encapsulate params into a map is totally a waste of efficiency. The good thing is , the clean signature , easy to add other params with fewest modification . what's the best practice for this kind of problem ?\n\nOccasionally , we have to write methods that receive many many arguments , for example :\n\nUsing a map with magical String keys is a bad idea. You lose any compile time checking, and it's really unclear what the required parameters are. You'd need to write very complete documentation to make up for it. Will you remember in a few weeks what those Strings are without looking at the code? What if you made a typo? Use the wrong type? You won't find out until you run the code. Instead use a model. Make a class which will be a container for all those parameters. That way you keep the type safety of Java. You can also pass that object around to other methods, put it in collections, etc. Of course if the set of parameters isn't used elsewhere or passed around, a dedicated model may be overkill. There's a balance to be struck, so use common sense.\n\nIt's called \"Introduce Parameter Object\". If you find yourself passing same parameter list on several places, just create a class which holds them all. Even if you don't find yourself passing same parameter list so often, that easy refactoring will still improve your code readability, which is always good. If you look at your code 3 months later, it will be easier to comprehend when you need to fix a bug or add a feature. It's a general philosophy of course, and since you haven't provided any details, I cannot give you more detailed advice either. :-)\n\nFirst, I'd try to refactor the method. If it's using that many parameters it may be too long any way. Breaking it down would both improve the code and potentially reduce the number of parameters to each method. You might also be able to refactor the entire operation to its own class. Second, I'd look for other instances where I'm using the same (or superset) of the same parameter list. If you have multiple instances, then it likely signals that these properties belong together. In that case, create a class to hold the parameters and use it. Lastly, I'd evaluate whether the number of parameters makes it worth creating a map object to improve code readability. I think this is a personal call -- there is pain each way with this solution and where the trade-off point is may differ. For six parameters I probably wouldn't do it. For 10 I probably would (if none of the other methods worked first).\n\nThis is often a problem when constructing objects. In that case use builder object pattern, it works well if you have big list of parameters and not always need all of them. You can also adapt it to method invocation. public class BigObject { // public getters // private setters public static class Buider { private A f1; private B f2; private C f3; private D f4; private E f5; public Buider setField1(A f1) { this.f1 = f1; return this; } public Buider setField2(B f2) { this.f2 = f2; return this; } public Buider setField3(C f3) { this.f3 = f3; return this; } public Buider setField4(D f4) { this.f4 = f4; return this; } public Buider setField5(E f5) { this.f5 = f5; return this; } public BigObject build() { BigObject result = new BigObject(); result.setField1(f1); result.setField2(f2); result.setField3(f3); result.setField4(f4); result.setField5(f5); return result; } } } // Usage: BigObject boo = new BigObject.Builder() .setField1(/* whatever */) .setField2(/* whatever */) .setField3(/* whatever */) .setField4(/* whatever */) .setField5(/* whatever */) .build(); You can also put verification logic into Builder set..() and build() methods.\n\nUsing a Map is a simple way to clean the call signature but then you have another problem. You need to look inside the method's body to see what the method expects in that Map, what are the key names or what types the values have. A cleaner way would be to group all parameters in an object bean but that still does not fix the problem entirely. What you have here is a design issue. With more than 7 parameters to a method you will start to have problems remembering what they represent and what order they have. From here you will get lots of bugs just by calling the method in wrong parameter order. You need a better design of the app not a best practice to send lots of parameters.\n\nI would say stick with the way you did it before. The number of parameters in your example is not a lot, but the alternatives are much more horrible.\n• None Map - There's the efficiency thing that you mentioned, but the bigger problem here are:\n• Callers don't know what to send you without referring to something\n\n else... Do you have javadocs which states exactly what keys and\n\n values are used? If you do (which is great), then having lots of parameters isn't a problem either.\n• It becomes very difficult to accept different argument types. You can either restrict input parameters to a single type, or use Map<String, Object> and cast all the values. Both options are horrible most of the time.\n• None Wrapper objects - this just moves the problem since you need to fill the wrapper object in the first place - instead of directly to your method, it will be to the constructor of the parameter object. To determine whether moving the problem is appropriate or not depends on the reuse of said object. For instance: Would not use it: It would only be used once on the first call, so a lot of additional code to deal with 1 line...? May use it: Here, it can do a bit more. First, it can factor the parameters for 3 method calls. it can also perform 2 other lines in itself... so it becomes a state variable in a sense... { AnObject h = obj.callMyMethod(a, b, c, d, e, f, g); e = h.resultOfSomeTransformation(); SomeObject i = obj2.callAnotherMethod(a, b, c, d, e, f, g); f = i.somethingElse(); FinalResult j = obj3.callAFinalMethod(a, b, c, d, e, f, g, h, i); }\n• Builder pattern - this is an anti-pattern in my view. The most desirable error handling mechanism is to detect earlier, not later; but with the builder pattern, calls with missing (programmer did not think to include it) mandatory parameters are moved from compile time to run time. Of course if the programmer intentionally put null or such in the slot, that'll be runtime, but still catching some errors earlier is a much bigger advantage to catering for programmers who refuse to look at the parameter names of the method they are calling. I find it only appropriate when dealing with large number of optional parameters, and even then, the benefit is marginal at best. I am very much against the builder \"pattern\". The other thing people forget to consider is the role of the IDE in all this. When methods have parameters, IDEs generate most of the code for you, and you have the red lines reminding you what you need to supply/set. When using option 3... you lose this completely. It's now up to the programmer to get it right, and there's no cues during coding and compile time... the programmer must test it to find out. Furthermore, options 2 and 3, if adopted wide spread unnecessarily, have long term negative implications in terms of maintenance due to the large amount of duplicate code it generates. The more code there is, the more there is to maintain, the more time and money is spent to maintain it."
    },
    {
        "link": "https://geeksforgeeks.org/java-method-parameters",
        "document": "Parameters are variables defined in the method declaration after the method name, inside the parentheses. This includes primitive types such as int, float, boolean, etc, and non-primitive or object types such as an array, String, etc. You can pass values(Argument) to the method parameters, at the method call. The method call has the same number of arguments and is in the same order, as the parameters. To know more, refer to the article Difference between Parameters and Arguments.\n\nThe following example has a method example that takes a String as a parameter and returns a String type value.\n\nThe above example static method has only one parameter. You can add many different types of parameters but java gives a limit, the limit says you can add 255 parameters or less. All primitive or non-primitive types take one unit of parameter length, except long and double. long or double takes two units of parameter length. The total length of parameters is calculated by the sum of the total units of all parameters.\n\nThe following example has a static method that takes 255 parameters of type int and we pass 255 arguments in a method. The method returns a String value which tells us, there is no error."
    },
    {
        "link": "https://stackoverflow.com/questions/189787/how-to-format-methods-with-large-parameter-lists",
        "document": "A large set of parameters like this is often (but not always) an indicator that you could be using an object to represent the parameter set. This is especially true if either:\n• None There are several methods with similar large parameter sets, that can be replaced with a single method taking a parameter object.\n\nSo your above code could become (pardon my C++, I'm a Java developer):\n\nThis is the Builder Pattern. The advantage of this pattern is that you can build up a complex set of parameters in pieces, including multiple variations on how the parameters relate to each other, and even overwriting parameters as new information becomes available, before finally calling the method at the end.\n\nAnother potential advantage is that you could add a method that checked their consistence before you go as far as the final object. This is applicable in cases where creating the object involves non-reversible steps, such as writing to a file or database.\n\nNote that, as with all patterns, this doesn't apply in every case and may not apply in yours. If your code is simple enough then this pattern may be over-engineering it. If the code is getting messy, refactoring into this pattern can be a good way to simplify it."
    }
]