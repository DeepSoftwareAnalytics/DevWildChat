[
    {
        "link": "https://support.microsoft.com/en-us/office/automate-tasks-with-the-macro-recorder-974ef220-f716-4e01-b015-3ea70e64937b",
        "document": "When you record a macro, the macro recorder records all the steps in Visual Basic for Applications (VBA) code. These steps can include typing text or numbers, clicking cells or commands on the ribbon or on menus, formatting cells, rows, or columns, or even importing data from an external source, say, Microsoft Access. Visual Basic Application (VBA) is a subset of the powerful Visual Basic programming language, and is included with most Office applications. Although VBA gives you the ability to automate processes within and between Office applications, it is not necessary to know VBA code or computer programming if the Macro Recorder does what you want. It is important to know that you when you record a macro, the Macro Recorder captures almost every move you make. So if you make a mistake in your sequence, for example, clicking a button that you did not intend to click, the Macro Recorder will record it. The resolution is to re-record the entire sequence, or modify the VBA code itself. This is why whenever you record something, it's best to record a process with which you're highly familiar. The more smoothly you record a sequence, the more efficiently the macro will run when you play it back. Macros and VBA tools can be found on the Developer tab, which is hidden by default, so the first step is to enable it. For more information, see Show the Developer tab. There are a few helpful things you should know about macros:\n• When you record a macro for performing a set of tasks in a range in Excel, the macro will only run on the cells within the range. So if you added an extra row to the range, the macro will not run the process on the new row, but only the cells within the range.\n• If you have planned a long process of tasks to record, plan to have smaller relevant macros instead of having one long macro.\n• It is not necessary that only tasks in Excel can be recorded in a macro. Your macro process can extend to other Office applications, and any other applications that support Visual Basic Application (VBA). For example, you can record a macro where you first update a table in Excel and then open Outlook to email the table to an email address.\n• On the Developer tab, in the Code group, click Record Macro.\n• In the Macro name box, enter a name for the macro. Make the name as descriptive as possible so you can quickly find it if you create more than one macro. Note: The first character of the macro name must be a letter. Subsequent characters can be letters, numbers, or underscore characters. Spaces cannot be used in a macro name; an underscore character works well as a word separator. If you use a macro name that is also a cell reference, you may get an error message that the macro name is not valid.\n• To assign a keyboard shortcut to run the macro, in the Shortcut key box, type any letter (both uppercase or lowercase will work) that you want to use. It is best to use Ctrl + Shift (uppercase) key combinations, because the macro shortcut key will override any equivalent default Excel shortcut key while the workbook that contains the macro is open. For instance, if you use Ctrl+Z (Undo), you will lose the ability to Undo in that Excel instance.\n• In the Store macro in list, select where you want to store the macro. In general, you’ll save your macro in the This Workbook location, but if you want a macro to be available whenever you use Excel, select Personal Macro Workbook . When you select Personal Macro Workbook, Excel creates a hidden personal macro workbook (Personal.xlsb) if it does not already exist, and saves the macro in this workbook.\n• In the Description box, optionally type a brief description of what the macro does. Although the description field is optional, it is recommended you enter one. Also, try to enter a meaningful description with any information that may be useful to you or other users who will be running the macro. If you create a lot of macros, the description can help you quickly identify which macro does what, otherwise you might have to guess.\n• Perform the actions that you want to record.\n• On the Developer tab, in the Code group, click Stop Recording . In the Developer tab, click Macros to view macros associated to a workbook. Or press Alt+ F8. This opens the Macro dialog box. Caution: Macros cannot be undone. Before you run a recorded macro for the first time, make sure that you’ve either saved the workbook where you want to run the macro, or better yet work on a copy of the workbook to prevent unwanted changes. If you run a macro and it doesn’t do what you want, you can close the workbook without saving it. Here's further information on working with macros in Excel. Read specific information on available security settings for macros, and their meaning. There are several different ways you can run a macro, such as using a shortcut key, graphic object, Quick Access Toolbar, a button, or even when opening a workbook. You use the Visual Basic Editor to edit the macros attached to a workbook. If a workbook contains a VBA macro that you would like to use elsewhere, you can copy the module that contains that macro to another open workbook by using the Microsoft Visual Basic Editor. Assign a macro to an object, shape or graphic\n• On a worksheet, right-click the object, graphic, shape, or the item to which you want to assign an existing macro, and then click Assign Macro.\n• In the Assign Macro box, click the macro that you want to assign. You can assign a macro to a graphic icon, and add it to Quick Access Toolbar, or the ribbon. You can assign macros to forms and ActiveX controls in a worksheet. Learn how to enable or disable macros in Office files. Find Help on using the Visual Basic Editor Learn how to find help on Visual Basic elements. Working with recorded code in the Visual Basic Editor (VBE) You can work with recorded code in the Visual Basic Editor (VBE) and add your own variables, control structures, and other code that the Macro Recorder cannot record. Since the macro recorder captures almost every step you take while recording, you can also clean up any unnecessary recorded code that serves no purpose in the macro. Reviewing your recorded code is a great way to learn or sharpen your VBA programming skills. For more information on modifying recorded code in an example, see Getting Started with VBA in Excel.\n\nThere are a few helpful things you should know about macros:\n• When you record a macro for performing a set of tasks in a range in Excel, the macro will only run on the cells within the range. So if you added an extra row to the range, the macro will not run the process on the new row, but only the cells within the original range.\n• If you have planned a long process of tasks to record, plan to have smaller relevant macros instead of having one long macro.\n• It is not necessary that only tasks in Excel can be recorded in a macro. Your macro process can extend to other Office applications, and any other applications that support Visual Basic Application (VBA). For example, you can record a macro where you first update a table in Excel and then open Outlook to email the table to an email address. Macros and VBA tools can be found on the Developer tab, which is hidden by default, so the first step is to enable it.\n• In the Customize the Ribbon category, in the Main Tabs list, select the Developer check box, and then click Save.\n• In the Macro name box, enter a name for the macro. Make the name as descriptive as possible, so you can quickly find it if you create more than one macro. Note: The first character of the macro name must be a letter. Subsequent characters can be letters, numbers, or underscore characters. Spaces cannot be used in a macro name; an underscore character works well as a word separator. If you use a macro name that is also a cell reference, you may get an error message that the macro name is not valid.\n• In the Store macro in list, select where you want to store the macro. In general, you’ll save your macro in the This Workbook location, but if you want a macro to be available whenever you use Excel, select Personal Macro Workbook. When you select Personal Macro Workbook, Excel creates a hidden personal macro workbook (PERSONAL.XLSB) if it does not already exist, and saves the macro in this workbook. Workbooks in that folder are opened automatically whenever Excel starts, and any code you have stored in the personal macro workbook will be listed in the Macro dialog, which is explained in the next section.\n• To assign a keyboard shortcut to run the macro, in the Shortcut key box, type any letter (both uppercase or lowercase will work) that you want to use. It is best to use key combinations that don't correspond to existing shortcut keys, as a macro shortcut key will override any equivalent default Excel shortcut key while the workbook that contains the macro is open.\n• In the Description box, optionally type a brief description of what the macro does. Although the description field is optional, it is recommended you enter one. It's helpful to enter a meaningful description with any information that may be useful to you or other users who will be running the macro. If you create a lot of macros, the description can help you quickly identify which macro does what, otherwise you might have to guess.\n• Perform the actions that you want to record. In the Developer tab, click Macros to view macros associated to a workbook. This opens the Macro dialog box. Note: Macros cannot be undone. Before you run a recorded macro for the first time, make sure that you’ve either saved the workbook where you want to run the macro, or better yet work on a copy of the workbook to prevent unwanted changes. If you run a macro and it doesn’t do what you want, you can close the workbook without saving it. Here's further information on working with macros in Excel. Learn to enable or disable macros in Excel for Mac. If a workbook contains a VBA macro that you would like to use elsewhere, you can copy the module that contains that macro to another open workbook by using the Microsoft Visual Basic Editor. Assign a macro to an object, shape or graphic\n• On a worksheet, right-click the object, graphic, shape, or the item to which you want to assign an existing macro, and then click Assign Macro.\n• In the Assign Macro box, click the macro that you want to assign. You can assign a macro to a graphic icon, and add it to Quick Access Toolbar, or the ribbon. You can assign macros to forms and ActiveX controls in a worksheet. On the Developer tab, click Visual Basic, or click the Tools menu > Macro > Visual Basic Editor…. Find Help on using the Visual Basic Editor Learn how to find help on Visual Basic elements."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/introduction-to-macros-a39c2a26-e745-4957-8d06-89e0b435aac3",
        "document": "This article explains what macros are in Access databases and how they can save you time by automating tasks that you perform often. It explores the fundamentals behind creating and using macros and also touches on improvements to macros in Access.\n\nA macro in Access is a tool that allows you to automate tasks and add functionality to your forms, reports, and controls. For example, if you add a command button to a form, you associate the button's OnClick event to a macro, and the macro contains the commands that you want the button to perform each time it is clicked.\n\nIn Access, it is helpful to think of macros as a simplified programming language that you write by building a list of actions to perform. When you build a macro, you select each action from a drop-down list and then fill in the required information for each action. Macros enable you to add functionality to forms, reports, and controls without writing code in a Visual Basic for Applications (VBA) module. Macros provide a subset of the commands that are available in VBA, and most people find it easier to build a macro than to write VBA code.\n\nFor example, suppose that you want to start a report directly from one of your data entry forms. You can add a button to your form and then create a macro that opens the report. The macro can either be a standalone macro (a separate object in the database), which is then bound to the OnClick event of the button, or the macro can be embedded directly into the OnClick event of the button itself. Either way, when you click the button, the macro runs and opens the report. These types of macros are generally referred to as user interface macros.\n\nA data macro allows you to automate tasks and add functionality directly to your tables. Data macros and their actions are attached to specific table events such as when you add a new record to a table.\n\nYou create a macro by using the Macro Builder, an example of which is shown in the following illustration.\n\nTo display the macro builder for user interface macros:\n• On the Create tab, in the Macros & Code group, click Macro.\n\nTo display the macro builder for data macros:\n• Open any table in Datasheet view. On the Table tab in the Before Events and After Events groups, click one of the event commands such as Before Change or After Insert.\n\nTo learn more about the Macro Builder and how to build and test user interface and data macros, see the related articles in the See Also section at the bottom of this article."
    },
    {
        "link": "https://intellezy.com/blog/automating-tasks-with-excel-365-macros",
        "document": ""
    },
    {
        "link": "https://linkedin.com/pulse/automating-tasks-excel-365-macros-intellezy-rzrnc?trk=public_post",
        "document": "One of the most powerful yet often underutilized features is the macro. Macros can automate repetitive tasks, saving time and reducing the potential for errors. This comprehensive guide will walk you through the basics of creating and using macros in Excel 365, helping you or your team leverage its full potential.\n\nGetting Started with Macros in Excel 365\n\nUsing VBA for More Complex Tasks\n\nOptimizing the performance of your macros is crucial, especially when working with large datasets or complex operations. Efficient VBA code ensures that your macros run faster and more reliably, minimizing delays and improving overall productivity. Here are some key tips and techniques to help you write more efficient Excel 365 macros or VBA code.\n\n2. Use Variables to Store Worksheet and Range References\n\n5. Use With Statements for Object References\n\n6. Limit the Use of Loops\n\nBest Practices for Using Macros\n• Keep It Simple: Start with simple tasks and gradually move to more complex automation.\n• Comment Your Code: Add comments to your VBA code to explain its purpose and logic.\n• Test Thoroughly: Test your macros on sample data to ensure they work correctly before using them on critical data.\n• Backup Your Work: Regularly backup your workbooks to avoid data loss due to macro errors.\n• Stay Updated: Keep your Excel and VBA skills up-to-date by exploring new features and learning resources.\n\nMacros in Excel 365 offer a powerful way to automate repetitive tasks, saving time and improving efficiency. By recording macros for simple tasks or writing VBA code for more complex automation, you can significantly enhance your productivity. Remember to follow best practices and consider security implications when working with macros. With practice and exploration, you'll find that macros can transform the way you work with Excel. Happy automating!\n\nAutomating tasks with macros in Excel 365 is a powerful way to save time and boost productivity, but mastering VBA and creating efficient macros can be challenging. Whether you're a beginner looking to learn the basics or an advanced user aiming to refine your skills, Intellezy offers a comprehensive range of training videos to help you excel in Excel."
    },
    {
        "link": "https://computerworld.com/article/1614590/how-to-use-excel-macros-save-time-automate-work.html",
        "document": "If you regularly work with Excel spreadsheets, you probably find yourself repeating the same steps over and over. Wouldn’t it be nice to click a button and have those tasks happen automatically? That’s where Excel macros come in. You can use macros to automate repetitive tasks, which can save you a lot of time and effort. What is an Excel macro? An Excel macro is a recorded sequence of Excel commands and actions that you can play back as many times as you want. Macros can be used to automate just about any sequence of tasks in Excel, from something as simple as entering your company’s name and address into a spreadsheet to something as complex as creating a custom report. If you can do it in Excel, you can probably automate it with a macro.\n\nTo use a macro, you first need to record it. You perform the sequence of steps you want to automate, and Excel tracks them all and saves them in the macro. Once you’ve recorded a macro, you can run it again at any time. You can even assign a keyboard shortcut to a macro, so you can run it with just a few keystrokes. Excel macros are based on Microsoft’s Visual Basic for Applications (VBA) programming language. When you record a macro, Excel translates your actions into VBA code under the hood. So in addition to creating macros by recording them, you can also write them manually in VBA code. In this article, I will focus primarily on creating macros by recording them — the simplest and quickest method. After that, I will discuss how you can edit or write macros from scratch using VBA and provide some resources for self-learning. To help illustrate this process, I will use a small sample data set. Let’s suppose that we are responsible for taking customer names and balances and performing two tasks: first splitting the customer’s name into separate first and last names, and then highlighting everyone who has a balance due that is greater than zero. In this example, we have been given seven customers to work with.\n\nOur starting data set. Note the File menu at the left end of the Excel Ribbon. To create a macro, we’ll use the Developer tab in the Ribbon toolbar at the top of the Excel window. This is not present by default, so we will need to add it. Click on the File tab at the far left of the Ribbon (highlighted in the screenshot above) and then, on the screen that appears, click Options at the bottom of the left column. The Excel Options screen appears. Select Customize Ribbon from the left navigation bar. Then, in the “Customize the Ribbon” area on the right, look in the “Main Tabs” list and check the Developer checkbox. Click OK. Check the Developer checkbox to turn on the Developer tab in the Ribbon.\n\nOnce you have the Developer tab, click on it and you will see options similar to those shown on the screen below. The highlighted commands on the Developer tab help you record and manage macros. To start recording your first macro, click on the Record Macro button, and you will be presented with the options below. First, create a name for your macro, keeping in mind that you can’t use spaces. For readability, you may want to separate words with something like _ or –. Then add a shortcut key or description if you like, but these are not required. To get started, give your macro a name. Once you hit OK, the icon should change to indicate that the macro is recording your actions. It’s important that you only perform the actions that you want the macro to do and nothing else from this point until you click on Stop Recording.\n\nAll cells with a balance of greater than zero are now highlighted in light red. Now that you have completed the tasks sequence, go back to the Developer tab and click Stop Recording. Your first Excel macro is complete. When you’re done recording your macro, hit Stop Recording. If you want to run your macro again, simply click on the Macros button and it will be available for you to run. Or, if you assigned the macro a shortcut, simply press the key combination to run it. Click the Macros button at any time to see the list of macros available for the workbook. Note that you cannot save a spreadsheet with macros as a traditional .xlsx workbook. You must save it as an Excel Macro-Enabled Workbook (.xlsm) to avoid losing your macros.\n\nSave your workbook in .xlsm format to preserve its macros. Once you’ve made that change, any time you want to work with a fresh data set you can simply reopen the workbook and import the data you want to work on by going to the Data tab and selecting Get Data. You will be able to import data from files, databases, and other online services. Save your workbook in .xlsm format to preserve its macros. Be aware that in many cases macros are disabled by default. That’s because, as Microsoft notes, “VBA macros are a common way for malicious actors to gain access to deploy malware and ransomware.” To protect organizations from such threats, Microsoft now blocks macros in files from the internet — and sometimes in those stored on the company’s shared drives. Your organization may have imposed additional restrictions on macros. So whenever you open an Excel workbook with macros in it (including your own), there is a chance that you will see a warning message like the one below. If your workbook is one that you created or from a trusted source, go ahead and enable it. If the macro is from an untrusted source, however, don’t enable it, because it may be malware.\n\nYou will be taken to a pane where you can see the source code for the macro you created. In the screenshot below, the underlined items show actions that we performed, such as changing the names of the headings and selecting rows. You can alter these for different use cases. For example, if the data you work with runs from range A1:A20, you may want to expand the range to include all possible cells. Peeking at the code that underlies a macro. If want to try your hand at writing macros from scratch, there are several resources online for learning to write VBA scripts, including Codewars, Udemy, and Codecademy. Back in Excel, click Developer > Macros > Create. You’ll be taken to a blank pane where you can write VBA code."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/look-up-values-with-vlookup-index-or-match-68297403-7c3c-4150-9e3c-4d348188976b",
        "document": "Tip: Try using the new XLOOKUP and XMATCH functions, improved versions of the functions described in this article. These new functions work in any direction and return exact matches by default, making them easier and more convenient to use than their predecessors. Suppose that you have a list of office location numbers, and you need to know which employees are in each office. The spreadsheet is huge, so you might think it is challenging task. It's actually quite easy to do with a lookup function. The VLOOKUP and HLOOKUP functions, together with INDEX and MATCH,﻿ are some of the most useful functions in Excel. Note: The Lookup Wizard feature is no longer available in Excel. Here's an example of how to use VLOOKUP. In this example, B2 is the first argument—an element of data that the function needs to work. For VLOOKUP, this first argument is the value that you want to find. This argument can be a cell reference, or a fixed value such as \"smith\" or 21,000. The second argument is the range of cells, C2-:E7, in which to search for the value you want to find. The third argument is the column in that range of cells that contains the value that you seek. The fourth argument is optional. Enter either TRUE or FALSE. If you enter TRUE, or leave the argument blank, the function returns an approximate match of the value you specify in the first argument. If you enter FALSE, the function will match the value provide by the first argument. In other words, leaving the fourth argument blank—or entering TRUE—gives you more flexibility. This example shows you how the function works. When you enter a value in cell B2 (the first argument), VLOOKUP searches the cells in the range C2:E7 (2nd argument) and returns the closest approximate match from the third column in the range, column E (3rd argument). The fourth argument is empty, so the function returns an approximate match. If it didn't, you'd have to enter one of the values in columns C or D to get a result at all. When you're comfortable with VLOOKUP, the HLOOKUP function is equally easy to use. You enter the same arguments, but it searches in rows instead of columns.\n\nUsing INDEX and MATCH instead of VLOOKUP There are certain limitations with using VLOOKUP—the VLOOKUP function can only look up a value from left to right. This means that the column containing the value you look up should always be located to the left of the column containing the return value. Now if your spreadsheet isn't built this way, then do not use VLOOKUP. Use the combination of INDEX and MATCH functions instead. This example shows a small list where the value we want to search on, Chicago, isn't in the leftmost column. So, we can't use VLOOKUP. Instead, we'll use the MATCH function to find Chicago in the range B1:B11. It's found in row 4. Then, INDEX uses that value as the lookup argument, and finds the population for Chicago in the 4th column (column D). The formula used is shown in cell A14.\n\nIf you want to experiment with lookup functions before you try them out with your own data, here's some sample data. Copy the following data into a blank spreadsheet. Tip: Before you paste the data into Excel, set the column widths for columns A through C to 250 pixels, and click Wrap Text (Home tab, Alignment group). Using an approximate match, searches for the value 1 in column A, finds the largest value less than or equal to 1 in column A which is 0.946, and then returns the value from column B in the same row. Using an approximate match, searches for the value 1 in column A, finds the largest value less than or equal to 1 in column A, which is 0.946, and then returns the value from column C in the same row. Using an exact match, searches for the value 0.7 in column A. Because there is no exact match in column A, an error is returned. Using an approximate match, searches for the value 0.1 in column A. Because 0.1 is less than the smallest value in column A, an error is returned. Using an approximate match, searches for the value 2 in column A, finds the largest value less than or equal to 2 in column A, which is 1.29, and then returns the value from column B in the same row. Copy all the cells in this table and paste it into cell A1 on a blank worksheet in Excel. Tip: Before you paste the data into Excel, set the column widths for columns A through C to 250 pixels, and click Wrap Text (Home tab, Alignment group). Looks up \"Axles\" in row 1, and returns the value from row 2 that's in the same column (column A). Looks up \"Bearings\" in row 1, and returns the value from row 3 that's in the same column (column B). Looks up \"B\" in row 1, and returns the value from row 3 that's in the same column. Because an exact match for \"B\" is not found, the largest value in row 1 that is less than \"B\" is used: \"Axles,\" in column A. Looks up \"Bolts\" in row 1, and returns the value from row 4 that's in the same column (column C). Looks up the number 3 in the three-row array constant, and returns the value from row 2 in the same (in this case, third) column. There are three rows of values in the array constant, each row separated by a semicolon (;). Because \"c\" is found in row 2 and in the same column as 3, \"c\" is returned. This last example employs the INDEX and MATCH functions together to return the earliest invoice number and its corresponding date for each of five cities. Because the date is returned as a number, we use the TEXT function to format it as a date. The INDEX function actually uses the result of the MATCH function as its argument. The combination of the INDEX and MATCH functions are used twice in each formula – first, to return the invoice number, and then to return the date. Copy all the cells in this table and paste it into cell A1 on a blank worksheet in Excel. Tip: Before you paste the data into Excel, set the column widths for columns A through D to 250 pixels, and click Wrap Text (Home tab, Alignment group)."
    },
    {
        "link": "https://ablebits.com/office-addins-blog/excel-index-match-function-vlookup",
        "document": "This tutorial shows how to use INDEX and MATCH in Excel and how it is better than VLOOKUP.\n\nIn a couple of recent articles, we made a good effort to explain the basics of VLOOKUP function to beginners and provide more complex VLOOKUP formula examples to power users. And now, I will try if not to talk you out of using VLOOKUP, then at least show you an alternative way to do a vertical lookup in Excel.\n\n\"What do I need that for?\" you may wonder. Because VLOOKUP has numerous limitations that can prevent you from getting the desired result in many situations. On the other hand, the INDEX MATCH combination is more flexible and has many awesome features that make it superior to VLOOKUP in many respects.\n\n\n\nSince the aim of this tutorial is to demonstrate an alternative way to do a vlookup in Excel by using a combination of INDEX and MATCH functions, we won't dwell much on their syntax and uses. We will cover only the minimum necessary for understanding the general idea and then take an in-depth look at formula examples that reveal all the advantages of using INDEX MATCH instead of VLOOKUP. The Excel INDEX function returns a value in an array based on the row and column numbers you specify. The syntax of the INDEX function is straightforward: Here is a very simple explanation of each parameter:\n• array - a range of cells that you want to return a value from.\n• row_num - the row number in array from which you want to return a value. If omitted, the column_num is required.\n• column_num - the column number in array from which you want to return a value. If omitted, row_num is required. For more information, please see Excel INDEX function. And here is an example of the INDEX formula in its simplest form: The formula searches in cells A1 through C10 and returns a value of the cell in the 2nd row and the 3rd column, i.e. cell C2. Very easy, right? However, when working with real data you would hardly ever know which row and column you want, that's where the MATCH function comes in handy.\n\n The Excel MATCH function searches for a lookup value in a range of cells and returns the relative position of that value in the range. The syntax of the MATCH function is as follows:\n• lookup_value - the number or text value you are looking for.\n• match_type - specifies whether to return an exact match or the nearest match:\n• 0 - exact match. In the INDEX / MATCH combination, you almost always need an exact match, so you set the third argument of your MATCH function to 0. For example, if the range B1:B3 contains the values \"New-York\", \"Paris\", \"London\", the below formula returns the number 3, because \"London\" is the third entry in the range: For more information, please see Excel MATCH function. At first sight, the usefulness of the MATCH function may seem questionable. Who cares about the position of a value in a range? What we do want to know is the value itself. Let me remind you that the relative position of the lookup value (i.e. row and column numbers) is exactly what you need to supply to the row_num and column_num arguments of the INDEX function. As you remember, Excel INDEX can find the value at the juncture of a given row and column, but it cannot determine which exactly row and column you want.\n\n\n\nHow to use INDEX MATCH function in Excel Now that you know the basics, I believe it has already started making sense how MATCH and INDEX work together. In a nutshell, INDEX finds the lookup value by column and row numbers, and MATCH provides those numbers. That's it! For vertical lookup, you use the MATCH function only to determine the row number and supply the column range directly to INDEX: INDEX(column to return a value from, MATCH(lookup value, column to look up against, 0)) Still having difficulties to figure that out? It might be easier to understand from an example. Suppose you have a list of national capitals and their population:\n\n To find the population of a certain capital, say the capital of Japan, use the following INDEX MATCH formula: Now, let's analyze what each component of this formula actually does:\n• The MATCH function searches for the lookup value \"Japan\" in the range A2:A10, and returns the number 3, because \"Japan\" is third in the lookup array.\n• The row number goes directly to the row_num argument of INDEX instructing it to return a value from that row. So, the above formula turns into a simple INDEX(C2:C,3) that says to search in cells C2 through C10 and pull the value from the 3rd cell in that range, i.e. C4 because we start counting from the second row. Don't want to hardcode the city in the formula? Input it in some cell, say F1, supply the cell reference to MATCH, and you will get a dynamic lookup formula: Important note! The number of rows in the array argument of INDEX should match the number of rows in the lookup_array argument of MATCH, otherwise the formula will produce an incorrect result. Wait, wait… why don't we simply use the following Vlookup formula? What's the point in wasting time trying to figure out the arcane twists of Excel MATCH INDEX? In this case, no point at all :) This simple example is for demonstration purposes only, so that you get a feel of how the INDEX and MATCH functions work together. Other examples that follow below will show you the real power of this combination that easily copes with many complex scenarios when VLOOKUP stumbles.\n• In Excel 365 and Excel 2021, you can use a more modern INDEX XMATCH formula.\n• For Google Sheets, see formula examples with INDEX MATCH in this article.\n\nWhen deciding which function to use for vertical lookups, most Excel gurus agree that INDEX MATCH is far better than VLOOKUP. However, many people still stay with VLOOKUP, firstly, because it's simpler and, secondly, because they do not fully understand all benefits of using the INDEX MATCH formula in Excel. Without such understanding no one is willing to invest their time to learn a more complex syntax. Below, I will point out the key advantages of MATCH INDEX over VLOOKUP, and you decide whether it's a worthy addition to your Excel arsenal. 4 main reasons to use INDEX MATCH instead of VLOOKUP\n• Right to left lookup. As any educated user knows, VLOOKUP cannot look to its left, meaning your lookup value should always reside in the leftmost column of the table. INDEX MATCH can do left lookup with ease! The following example shows it in action: How to Vlookup a value to the left in Excel.\n• Insert or delete columns safely. VLOOKUP formulas get broken or delivers incorrect results when a new column is deleted from or added to a lookup table because VLOOKUP's syntax requires specifying the index number of the column you want to pull the data from. Naturally, when you add or delete columns, the index number changes. With INDEX MATCH, you specify the return column range, not an index number. As the result, you are free to insert and remove as many columns as you want without worrying about updating every associated formula.\n• No limit for a lookup value's size. When using the VLOOKUP function, the total length of your lookup criteria cannot exceed 255 characters, otherwise you will end up having the #VALUE! error. So, if your dataset contains long strings, INDEX MATCH is the only working solution.\n• Higher processing speed. If your tables are relatively small, there will hardly be any significant difference in Excel performance. But if your worksheets contain hundreds or thousands of rows, and consequently hundreds or thousands of formulas, MATCH INDEX will work much faster than VLOOKUP because Excel will have to process only the lookup and return columns rather than the entire table array. VLOOKUP's impact on Excel's performance may be especially noticeable if your workbook contains complex array formulas like VLOOKUP and SUM. The point is that checking each value in the array requires a separate call of the VLOOKUP function. So, the more values your array contains and the more array formulas you have in a workbook, the slower Excel performs. To discover the nuanced differences between INDEX MATCH and XLOOKUP, explore the in-depth analysis in this guide: Excel XLOOKUP vs INDEX MATCH.\n\n\n\nKnowing the reasons to learn the MATCH INDEX function, let's get to the most interesting part and see how you can apply the theoretical knowledge in practice. INDEX MATCH formula to look up from right to left As already mentioned, VLOOKUP cannot look at its left. So, unless your lookup values are is the leftmost column, there's no chance that a Vlookup formula will bring you the result you want. The INDEX MATCH function in Excel is more versatile and does not really care where the lookup and return columns are located. For this example, we will add the Rank column to the left of our sample table and try to figure out how the Russian capital, Moscow, ranks in terms of population. With the lookup value in G1, use the following formula to search in C2:C10 and return a corresponding value from A2:A10: Tip. If you plan to use your INDEX MATCH formula for more than one cell, be sure to lock both ranges with absolute cell references (like $A$2:$A$10 and $C$2:4C$10) so they won't get distorted when copying the formula. INDEX MATCH MATCH to search in rows and columns In the above examples, we used INDEX MATCH as the replacement for classic VLOOKUP to return a value from a predefined one-column range. But what if you need to look up in multiple rows and columns? In other words, what if you want to perform the so-called matrix or two-way lookup? This may sound tricky, but the formula is very similar to the basic Excel INDEX MATCH function, with just one difference. Guess what? Simply, use two MATCH functions – one to get a row number and the other to get a column number. And I congratulate those of you who have guessed right :) INDEX(array, MATCH(vlookup value, column to look up against, 0), MATCH(hlookup value, row to look up against, 0)) And now, please take a look at the below table and let's build an INDEX MATCH MATCH formula to find the population (in millions) in a given country for a given year. With the target country in G1 (vlookup value) and the target year in G2 (hlookup value), the formula takes this shape: Whenever you need to understand a complex Excel formula, break it down into smaller parts and see what each individual function does: – searches through A2:A11 for the value in cell G1 (\"China\") and returns its position, which is 2. – searches through B1:D1 to get the position of the value in cell G2 (\"2015\"), which is 3. The above row and column numbers go to the corresponding arguments of the INDEX function: As the result, you get a value at the intersection of the 2nd row and 3rd column in the range B2:D11, which is the value in cell D3. Easy? Yep!\n\n Excel INDEX MATCH to look up multiple criteria If you had a chance to read our Excel VLOOKUP tutorial, you have probably already tested a formula to Vlookup with multiple criteria. However, a significant limitation of that approach is the necessity to add a helper column. The good news is that Excel's INDEX MATCH function can look up with two or more criteria too, without modifying or restructuring your source data! Note. This is an array formula that must be completed with the Ctrl + Shift + Enter shortcut. In the sample table below, supposing you want to find the amount based on 2 criteria, Customer and Product. Where C2:C10 is the range to return a value from, F1 is criteria1, A2:A10 is the range to compare against criteria1, F2 is criteria 2, and B2:B10 is the range to compare against criteria2. Remember to enter the formula correctly by pressing Ctrl + Shift + Enter, and Excel will automatically enclose it curly brackets as shown in the screenshot:\n\n If you'd rather not use array formulas in your worksheets, add one more INDEX function to the formula and complete it with a usual Enter hit:\n\n The formulas use the same approach as the basic INDEX MATCH function that looks through a single column. To evaluate multiple criteria, you create two or more arrays of TRUE and FALSE values that represent matches and non-matches for each individual criterion, and then multiply the corresponding elements of these arrays. The multiplication operation converts TRUE and FALSE into 1 and 0, respectively, and produces an array where 1's correspond to rows that match all the criteria. The MATCH function with a lookup value of 1 finds the first \"1\" in the array and passes its position to INDEX, which returns a value in this row from the specified column. The non-array formula relies on the ability of the INDEX function to handle arrays natively. The second INDEX is configured with 0 row_num so that it will pass the entire column array to MATCH. That is a high-level explanation of the formula's logic. For full details, please see Excel INDEX MATCH with multiple criteria.\n\n Microsoft Excel has special functions to find a minimum, maximum and average value in a range. But what if you need to get a value from another cell that is associated with those values? In this case, use the MAX, MIN or AVERAGE function together with INDEX MATCH. To find the largest value in column D and return a value from column C in the same row, use this formula: To locate the smallest value in column D and pull an associated value from column C, use this one: To work out the value closest to the average in D2:D10 and get a corresponding value from column C, this is the formula to use: Depending on how your data is organized, supply either 1 or -1 to the third argument (match_type) of the MATCH function:\n• If your lookup column (column D in our case) is sorted ascending, put 1. The formula will calculate the largest value that is less than or equal to the average value.\n• If your lookup column is sorted descending, enter -1. The formula will compute the smallest value that is greater than or equal to the average value.\n• If your lookup array contains a value exactly equal to the average, you can enter 0 for exact match. No sorting is required. In our example, the populations in column D are sorted in descending order, so we use -1 for match type. As the result, we get \"Tokyo\" since its population (13,189,000) is the closest match that is greater than average (12,269,006).\n\n You may be curious to know that VLOOKUP can perform such calculations too, but as an array formula: VLOOKUP with AVERAGE, MAX, MIN.\n\n\n\nAs you have probably noticed, if an INDEX MATCH formula in Excel cannot find a lookup value, it produces an #N/A error. If you wish to replace the standard error notation with something more meaningful, wrap your INDEX MATCH formula in the IFNA function. For example: And now, if someone inputs a lookup table that does not exist in the lookup range, the formula will explicitly inform the user that no match is found:\n\n If you'd like to catch all errors, not only #N/A, use the IFERROR function instead of IFNA: Please keep in mind that in many situations it might be unwise to disguise all errors because they alert you about possible faults in your formula.\n\n\n\nThat's how to use INDEX and MATCH in Excel. I hope our formula examples will prove helpful for you and look forward to seeing you on our blog next week!"
    },
    {
        "link": "https://chandoo.org/wp/vlookup-match-and-offset-explained-in-plain-english-spreadcheats",
        "document": "VLOOKUP may not make you tall, rich and famous, but learning it can certainly give you wings. It makes you to connect two different tabular lists and saves a ton of time. In my opinion understanding VLOOKUP, INDEX and MATCH worksheet formulas can transform you from normal excel user to a data processing beast.\n\nToday, lets understand how to use these formulas better.\n\nWhat is the syntax for Match, Vlookup and INDEX?\n\nHere is the syntax for these three very powerful functions in plain English:\n\nWhat are vlookup () and match () ?\n\nVLOOKUP and MATCH are your way of asking excel to find a needle in haystack. Imagine you have all your customer contact information in one sheet in the range A1:D5000 in the format phone number, name, city and date of birth. Now you need to find out which customer has the phone number “936-174-5910”. How do you do it?\n\nYou guessed it right, you use VLOOKUP and summon excel to do the search and return with customer name.\n\nWhile VLOOKUP is used to fetch value a based on what you are looking for, MATCH is used to fetch the position of the value you are looking for.\n\nSee this illustration to understand :\n\nWhat does VLOOKUP really do?\n\nImagine you have a list of data like this:\n\nNow, how do you answer the question – “How many sales did Jimmy make?“\n\nYes, your guess is right. VLOOKUP is one of the formulas you can use to answer questions like this.\n\nSo, in our case, we need VLOOKUP to search for Jimmy and return the amount of sales he made from column 3.\n\nThe syntax of VLOOKUP is simple:\n\nHere is an example to get you started:\n\nLearn more about VLOOKUP Formula with examples\n\nPlease check out this page for 10+ examples of VLOOKUP and how to use it to solve real world problems.\n\nI have made a small excel file detailing 4 VLOOKUP formula examples. The file also contains some home work so that you can practice this formula.\n\nIf you are using Excel 365, you can use the new & improved XLOOKUP function. It offers a shorter & more versatile syntax for performing lookups.\n\nFor ex: the same lookup as above will be done with XLOOKUP like below:\n\n=XLOOKUP(“Jimmy”, A2:A14, C2:C14) will lookup “Jimmy” in column A and return sales amount from Column C.\n\nClick here to learn more about XLOOKUP.\n\nSo what is INDEX() then?\n\nINDEX function is your way of telling excel to fetch a value from large range of values. Since MATCH() function can tell us where the data is found, you can then use INDEX() function to extract corresponding data from another column. In this case, we can use MATCH() to find out which row has net sales 1,799 and INDEX() to return the name of the person. Like this:\n\nFind the position of 1,799 in sales: =MATCH(1799, $C$2:$C$14, 0)\n\nThe answer will be 8.\n\nTo find the 8th person in names list, we can use INDEX() function like this:\n\nThe answer will be Jagjit.\n\nSo how are INDEX() and MATCH() linked to each other?\n\nSince MATCH returns the position of the item you are looking for in a list, you can then use this position in INDEX to fetch values surrounding the searched value.\n\nSo, we can combine both functions like this:\n\nThis combination is called as INDEX+MATCH formulas.\n\nRemember, both VLOOKUP and MATCH throw a fail error of #N/A if the value you are looking for is not there. If you want to stop seeing the error, use IFERROR function.\n\nJust use them with some dummy data, play around with arguments and see how you can say “oh yeah, I can do that in few minutes” to your boss next time.\n\nPlease watch this quick video tutorial to understand all these concepts and how to write VLOOKUP formulas easily.\n\nWant to Learn More Formulas? Get my VLOOKUP book\n\nIf you want to learn VLOOKUP and other Excel lookup functions, then consider getting my VLOOKUP book.\n• How to use INDEX formula\n• How to use IFERROR to stop errors with VLOOKUP"
    },
    {
        "link": "https://support.microsoft.com/en-us/office/vlookup-function-0bbc8083-26fe-4963-8ab8-93a18ad188a1",
        "document": "Tip: Try using the new XLOOKUP function, an improved version of VLOOKUP that works in any direction and returns exact matches by default, making it easier and more convenient to use than its predecessor. Use VLOOKUP when you need to find things in a table or a range by row. For example, look up a price of an automotive part by the part number, or find an employee name based on their employee ID. In its simplest form, the VLOOKUP function says: =VLOOKUP(What you want to look up, where you want to look for it, the column number in the range containing the value to return, return an Approximate or Exact match – indicated as 1/TRUE, or 0/FALSE).\n• The secret to VLOOKUP is to organize your data so that the value you look up (Fruit) is to the left of the return value (Amount) you want to find.\n• If you're a Microsoft Copilot subscriber Copilot can make it even easier to insert and use VLookup or XLookup functions. See Copilot makes lookups in Excel easy.\n\nUse the VLOOKUP function to look up a value in a table. The value you want to look up. The value you want to look up must be in the first column of the range of cells you specify in the table_array argument. For example, if table-array spans cells B2:D7, then your lookup_value must be in column B. Lookup_value can be a value or a reference to a cell. The range of cells in which the VLOOKUP will search for the lookup_value and the return value. You can use a named range or a table, and you can use names in the argument instead of cell references. The first column in the cell range must contain the lookup_value. The cell range also needs to include the return value you want to find. Learn how to select ranges in a worksheet. The column number (starting with 1 for the left-most column of table_array) that contains the return value. A logical value that specifies whether you want VLOOKUP to find an approximate or an exact match:\n• Approximate match - 1/TRUE assumes the first column in the table is sorted either numerically or alphabetically, and will then search for the closest value. This is the default method if you don't specify one. For example, =VLOOKUP(90,A1:B100,2,TRUE).\n• Exact match - 0/FALSE searches for the exact value in the first column. For example, =VLOOKUP(\"Smith\",A1:B100,2,FALSE).\n\nHow to get started There are four pieces of information that you will need in order to build the VLOOKUP syntax:\n• The value you want to look up, also called the lookup value.\n• The range where the lookup value is located. Remember that the lookup value should always be in the first column in the range for VLOOKUP to work correctly. For example, if your lookup value is in cell C2 then your range should start with C.\n• The column number in the range that contains the return value. For example, if you specify B2:D11 as the range, you should count B as the first column, C as the second, and so on.\n• Optionally, you can specify TRUE if you want an approximate match or FALSE if you want an exact match of the return value. If you don't specify anything, the default value will always be TRUE or approximate match. Now put all of the above together as follows: =VLOOKUP(lookup value, range containing the lookup value, the column number in the range containing the return value, Approximate match (TRUE) or Exact match (FALSE)).\n\nIf range_lookup is TRUE or left out, the first column needs to be sorted alphabetically or numerically. If the first column isn't sorted, the return value might be something you don't expect. Either sort the first column, or use FALSE for an exact match.\n• If range_lookup is TRUE, then if the value in the lookup_value is smaller than the smallest value in the first column of the table_array, you'll get the #N/A error value.\n• If range_lookup is FALSE, the #N/A error value indicates that the exact number isn't found. For more information on resolving #N/A errors in VLOOKUP, see How to correct a #N/A error in the VLOOKUP function. If col_index_num is greater than the number of columns in table-array, you'll get the #REF! error value. For more information on resolving #REF! errors in VLOOKUP, see How to correct a #REF! error. If the table_array is less than 1, you'll get the #VALUE! error value. For more information on resolving #VALUE! errors in VLOOKUP, see How to correct a #VALUE! error in the VLOOKUP function. The #NAME? error value usually means that the formula is missing quotes. To look up a person's name, make sure you use quotes around the name in the formula. For example, enter the name as \"Fontana\" in =VLOOKUP(\"Fontana\",B2:E7,2,FALSE). For more information, see How to correct a #NAME! error. This particular #SPILL! error usually means that your formula is relying on implicit intersection for the lookup value, and using an entire column as a reference. For example, =VLOOKUP(A:A,A:C,2,FALSE). You can resolve the issue by anchoring the lookup reference with the @ operator like this: =VLOOKUP(@A:A,A:C,2,FALSE). Alternatively, you can use the traditional VLOOKUP method and refer to a single cell instead of an entire column: =VLOOKUP(A2,A:C,2,FALSE).\n\nUsing absolute references allows you to fill-down a formula so that it always looks at the same exact lookup range. Learn how to use absolute cell references. When searching number or date values, be sure the data in the first column of table_array isn't stored as text values. Otherwise, VLOOKUP might return an incorrect or unexpected value. Sort the first column of the table_array before using VLOOKUP when range_lookup is TRUE. If range_lookup is FALSE and lookup_value is text, you can use the wildcard characters—the question mark (?) and asterisk (*)—in lookup_value. A question mark matches any single character. An asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) in front of the character. For example, =VLOOKUP(\"Fontan?\",B2:E7,2,FALSE) will search for all instances of Fontana with a last letter that could vary. Make sure your data doesn't contain erroneous characters. When searching text values in the first column, make sure the data in the first column doesn't have leading spaces, trailing spaces, inconsistent use of straight ( ' or \" ) and curly ( ‘ or \") quotation marks, or nonprinting characters. In these cases, VLOOKUP might return an unexpected value. To get accurate results, try using the CLEAN function or the TRIM function to remove trailing spaces after table values in a cell."
    },
    {
        "link": "https://ablebits.com/office-addins-blog/if-vlookup-excel",
        "document": "The tutorial shows how to combine VLOOKUP and IF function together to v-lookup with if condition in Excel. You will also learn how to use IF ISNA VLOOKUP formulas to replace #N/A errors with your own text, zero or blank cell.\n\nWhilst the VLOOKUP and IF functions are useful on their own, together they deliver even more valuable experiences. This tutorial implies that you remember the syntax of the two functions well, otherwise you may want to brush up on your knowledge by following the above links.\n\nVlookup with If statement: return True/False, Yes/No, etc. One of the most common scenarios when you combine If and Vlookup together is to compare the value returned by Vlookup with a sample value and return Yes / No or True / False as the result. In most cases, the following generic formula would work nicely: Translated in plain English, the formula instructs Excel to return True if Vlookup is true (i.e. equal to the specified value). If Vlookup is false (not equal to the specified value), the formula returns False. Below you will a find a few real-life uses of this IF Vlookup formula. Example 1. Look up a specific value Let's say, you have a list of items in column A and quantity in column B. You are creating a dashboard for your users and need a formula that would check the quantity for an item in E1 and inform the user whether the item is in stock or sold out. You pull the quantity with a regular Vlookup with exact match formula like this: Then, write an IF statement that compares Vlookup's result with zero, and returns \"No\" if it is equal to 0, \"Yes\" otherwise: Instead of Yes/No, you can return TRUE/FALSE or In Stock/Sold out or any other two choices. For example: You can also compare the value returned by Vlookup with sample text. In this case, be sure to enclose a text string in quotation marks, like this: Example 2. Compare Vlookup result with another cell Another typical example of Vlookup with If condition in Excel is comparing the Vlookup output with a value in another cell. For example, we can check if it's greater than or equal to a number in cell G2: And here is our If formula with Vlookup in action:\n\n In a similar fashion, you can use any other logical operator together with a cell reference in your Excel If Vlookup formula.\n\n To compare each cell in the target column with another list and return True or Yes if a match is found, False or No otherwise, use this generic IF ISNA VLOOKUP formula: If Vlookup results in the #N/A error, the formula returns \"No\", meaning the lookup value is not found in the lookup list. If the match is found, \"Yes\" is returned. For example: If your business logic requires the opposite results, simply swap \"Yes\" and \"No\" to reverse the formula's logic:\n\nExcel If Vlookup formula to perform different calculations Besides displaying your own text messages, If function with Vlookup can perform different calculations based on the criteria you specify. Taking our example further, let's calculate the commission of a specific seller (F1) depending on their effectiveness: 20% commission for those who made $200 and more, 10% for everyone else. For this, you check if the value returned by Vlookup is greater than or equal to 200, and if it is, multiply it by 20%, otherwise by 10%: Where A2:A10 are seller names and C2:C10 are sales.\n\n \n\n\n\nIf the VLOOKUP function cannot find a specified value, it throws an #N/A error. To catch that error and replace it with your own text, embed a Vlookup formula in the logical test of the IF function, like this: Naturally, you can type any text you like instead of \"Not found\". Supposing, you have a list of seller names in one column and sales amounts in another column. Your task is to pull a number corresponding to the name the user enters in F1. If the name is not found, display a message indicating so. With the names in A2:A10 and amounts C2:C10, the task can be fulfilled with the following If Vlookup formula: If the name is found, a corresponding sales amount is returned:\n\n If the lookup value is not found, the Not found message appears instead of the #N/A error:\n\n The formula's logic is very simple: you use the ISNA function to check Vlookup for #N/A errors. If an error occurs, ISNA returns TRUE, otherwise FALSE. The above values go to the logical test of the IF function, which does one of the following:\n• If the logical test is TRUE (#N/A error), your message is displayed.\n• If the logical test is FALSE (lookup value is found), Vlookup returns a match normally.\n\nWhen working with numerical values, you may want to return a zero when the lookup value is not found. To have it done, use the IF ISNA VLOOKUP formula discussed above with a little modification: instead of a text message, supply 0 in the value_if_true argument of the IF function: In our sample table, the formula would go as follows: In the recent versions of Excel 2016 and 2013, you can use the IFNA Vlookup combination again:\n\nIf with Index Match - left vlookup with If condition Experienced Excel users know that the VLOOKUP function is not the only way to do vertical lookup in Excel. The INDEX MATCH combination can also be used for this purpose and it's even more powerful and versatile. The good news is that Index Match can work together with IF in exactly the same way as Vlookup. For example, you have order numbers in column A and seller names in column B. You are looking for a formula to pull the order number for a specific seller. Vlookup cannot be used in this case because it cannot search from right to left. Index Match will work without a hitch as long as the lookup value is found in the lookup column. If not, a #N/A error will show up. To replace the standard error notation with your own text, nest Index Match inside IF ISNA: In Excel 2016 and 2016, you can use IFNA instead of IF ISNA to make the formula more compact: In a similar manner, you can use Index Match in other If formulas.\n\n\n\nThis is how you use Vlookup and IF statement together in Excel. To have a closer look at the formulas discussed in this tutorial, you are welcome to download our sample workbook below. I thank you for reading and hope to see you on our blog next week!"
    }
]