[
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/1.5/reference/api/pandas.DataFrame.reindex.html",
        "document": "Conform Series/DataFrame to new index with optional filling logic.\n\nPlaces NA/NaN in locations having no value in the previous index. A new object is produced unless the new index is equivalent to the current one and .\n\nNew labels / index to conform to, should be specified using keywords. Preferably an Index object to avoid duplicating data. Method to use for filling holes in reindexed DataFrame. Please note: this is only applicable to DataFrames/Series with a monotonically increasing/decreasing index.\n• None pad / ffill: Propagate last valid observation forward to next valid.\n• None backfill / bfill: Use next valid observation to fill gap. Return a new object, even if the passed indexes are the same. Broadcast across a level, matching Index values on the passed MultiIndex level. Value to use for missing values. Defaults to NaN, but can be any “compatible” value. Maximum number of consecutive elements to forward or backward fill. Maximum distance between original and new labels for inexact matches. The values of the index at the matching locations most satisfy the equation . Tolerance may be a scalar value, which applies the same tolerance to all values, or list-like, which applies variable tolerance per element. List-like includes list, tuple, array, Series, and must be the same size as the index and its dtype must exactly match the index’s type.\n\nWe highly recommend using keyword arguments to clarify your intent.\n\nCreate a new index and reindex the dataframe. By default values in the new index that do not have corresponding records in the dataframe are assigned .\n\nWe can fill in the missing values by passing a value to the keyword . Because the index is not monotonically increasing or decreasing, we cannot use arguments to the keyword to fill the values.\n\nWe can also reindex the columns.\n\nOr we can use “axis-style” keyword arguments\n\nTo further illustrate the filling functionality in , we will create a dataframe with a monotonically increasing index (for example, a sequence of dates).\n\nSuppose we decide to expand the dataframe to cover a wider date range.\n\nThe index entries that did not have a value in the original data frame (for example, ‘2009-12-29’) are by default filled with . If desired, we can fill in the missing values using one of several options.\n\nFor example, to back-propagate the last valid value to fill the values, pass as an argument to the keyword.\n\nPlease note that the value present in the original dataframe (at index value 2010-01-03) will not be filled by any of the value propagation schemes. This is because filling while reindexing does not look at dataframe values, but only compares the original and desired indexes. If you do want to fill in the values present in the original dataframe, use the method.\n\nSee the user guide for more."
    },
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/1.5.0rc0/reference/api/pandas.DataFrame.reindex.html",
        "document": "Conform Series/DataFrame to new index with optional filling logic.\n\nPlaces NA/NaN in locations having no value in the previous index. A new object is produced unless the new index is equivalent to the current one and .\n\nNew labels / index to conform to, should be specified using keywords. Preferably an Index object to avoid duplicating data. Method to use for filling holes in reindexed DataFrame. Please note: this is only applicable to DataFrames/Series with a monotonically increasing/decreasing index.\n• None pad / ffill: Propagate last valid observation forward to next valid.\n• None backfill / bfill: Use next valid observation to fill gap. Return a new object, even if the passed indexes are the same. Broadcast across a level, matching Index values on the passed MultiIndex level. Value to use for missing values. Defaults to NaN, but can be any “compatible” value. Maximum number of consecutive elements to forward or backward fill. Maximum distance between original and new labels for inexact matches. The values of the index at the matching locations most satisfy the equation . Tolerance may be a scalar value, which applies the same tolerance to all values, or list-like, which applies variable tolerance per element. List-like includes list, tuple, array, Series, and must be the same size as the index and its dtype must exactly match the index’s type.\n\nWe highly recommend using keyword arguments to clarify your intent.\n\nCreate a new index and reindex the dataframe. By default values in the new index that do not have corresponding records in the dataframe are assigned .\n\nWe can fill in the missing values by passing a value to the keyword . Because the index is not monotonically increasing or decreasing, we cannot use arguments to the keyword to fill the values.\n\nWe can also reindex the columns.\n\nOr we can use “axis-style” keyword arguments\n\nTo further illustrate the filling functionality in , we will create a dataframe with a monotonically increasing index (for example, a sequence of dates).\n\nSuppose we decide to expand the dataframe to cover a wider date range.\n\nThe index entries that did not have a value in the original data frame (for example, ‘2009-12-29’) are by default filled with . If desired, we can fill in the missing values using one of several options.\n\nFor example, to back-propagate the last valid value to fill the values, pass as an argument to the keyword.\n\nPlease note that the value present in the original dataframe (at index value 2010-01-03) will not be filled by any of the value propagation schemes. This is because filling while reindexing does not look at dataframe values, but only compares the original and desired indexes. If you do want to fill in the values present in the original dataframe, use the method.\n\nSee the user guide for more."
    },
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/1.5/reference/api/pandas.Index.reindex.html",
        "document": "nearest: use the NEAREST index value if no exact match. Tied distances are broken by preferring the larger index value.\n\nMaximum distance between original and new labels for inexact matches. The values of the index at the matching locations must satisfy the equation .\n\nTolerance may be a scalar value, which applies the same tolerance to all values, or list-like, which applies variable tolerance per element. List-like includes list, tuple, array, Series, and must be the same size as the index and its dtype must exactly match the index’s type."
    },
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/1.5/reference/api/pandas.DataFrame.reindex_like.html",
        "document": "Its row and column indices are used to define the new indices of this object.\n\nMethod to use for filling holes in reindexed DataFrame. Please note: this is only applicable to DataFrames/Series with a monotonically increasing/decreasing index.\n\nReturn a new object, even if the passed indexes are the same.\n\nMaximum distance between original and new labels for inexact matches. The values of the index at the matching locations must satisfy the equation .\n\nTolerance may be a scalar value, which applies the same tolerance to all values, or list-like, which applies variable tolerance per element. List-like includes list, tuple, array, Series, and must be the same size as the index and its dtype must exactly match the index’s type."
    },
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/1.5.0rc0/reference/api/pandas.Series.reindex.html",
        "document": "Conform Series to new index with optional filling logic.\n\nPlaces NA/NaN in locations having no value in the previous index. A new object is produced unless the new index is equivalent to the current one and .\n\nNew labels / index to conform to, should be specified using keywords. Preferably an Index object to avoid duplicating data. Method to use for filling holes in reindexed DataFrame. Please note: this is only applicable to DataFrames/Series with a monotonically increasing/decreasing index.\n• None pad / ffill: Propagate last valid observation forward to next valid.\n• None backfill / bfill: Use next valid observation to fill gap. Return a new object, even if the passed indexes are the same. Broadcast across a level, matching Index values on the passed MultiIndex level. Value to use for missing values. Defaults to NaN, but can be any “compatible” value. Maximum number of consecutive elements to forward or backward fill. Maximum distance between original and new labels for inexact matches. The values of the index at the matching locations most satisfy the equation . Tolerance may be a scalar value, which applies the same tolerance to all values, or list-like, which applies variable tolerance per element. List-like includes list, tuple, array, Series, and must be the same size as the index and its dtype must exactly match the index’s type.\n\nWe highly recommend using keyword arguments to clarify your intent.\n\nCreate a new index and reindex the dataframe. By default values in the new index that do not have corresponding records in the dataframe are assigned .\n\nWe can fill in the missing values by passing a value to the keyword . Because the index is not monotonically increasing or decreasing, we cannot use arguments to the keyword to fill the values.\n\nWe can also reindex the columns.\n\nOr we can use “axis-style” keyword arguments\n\nTo further illustrate the filling functionality in , we will create a dataframe with a monotonically increasing index (for example, a sequence of dates).\n\nSuppose we decide to expand the dataframe to cover a wider date range.\n\nThe index entries that did not have a value in the original data frame (for example, ‘2009-12-29’) are by default filled with . If desired, we can fill in the missing values using one of several options.\n\nFor example, to back-propagate the last valid value to fill the values, pass as an argument to the keyword.\n\nPlease note that the value present in the original dataframe (at index value 2010-01-03) will not be filled by any of the value propagation schemes. This is because filling while reindexing does not look at dataframe values, but only compares the original and desired indexes. If you do want to fill in the values present in the original dataframe, use the method.\n\nSee the user guide for more."
    },
    {
        "link": "https://matplotlib.org/stable/users/explain/customizing.html",
        "document": "## NOTE FOR END USERS: DO NOT EDIT THIS FILE! ## This is a sample Matplotlib configuration file - you can find a copy ## of it on your system in site-packages/matplotlib/mpl-data/matplotlibrc ## If you wish to change your default style, copy this file to one of the ## for more details on the paths which are checked for the configuration file. ## Blank lines, or lines starting with a comment symbol, are ignored, as are ## trailing comments. Other lines must have the format: ## Formatting: Use PEP8-like style (as enforced in the rest of the codebase). ## All lines start with an additional '#', so that removing all leading '#'s ## Colors: for the color values below, you can either use ## - a Matplotlib color string, such as r, k, or b ## - an RGB tuple, such as (1.0, 0.5, 0.0) ## The unquoted string ff00ff is also supported for backward ## String values may optionally be enclosed in double quotes, which allows ## using the comment character # in the string. ## This file (and other style files) must be encoded as utf-8. ## Matplotlib configuration are currently divided into following parts: ## The default backend. If you omit this parameter, the first working ## backend from the following list is used: ## You can also deploy your own backend outside of Matplotlib by referring to ## the module name (which must be in the PYTHONPATH) as 'module://my_backend'. ## The port to use for the web server in the WebAgg backend. ## The address on which the WebAgg web server should be reachable ## If webagg.port is unavailable, a number of other random ports will ## be tried until one that is available is found. ## When True, open the web browser to the plot that is shown ## If you are running pyplot inside a GUI and your backend choice ## conflicts, we will automatically try to find a compatible one for ## you if backend_fallback is True ## for more information on line properties. #lines.color: C0 # has no affect on plot(); see axes.prop_cycle #lines.markeredgewidth: 1.0 # the line width around the marker symbol ## The three standard dash patterns. These are scaled by the linewidth. #pcolormesh.snap: True # Whether to snap the mesh to pixel boundaries. This is # provided solely to allow old test images to remain # unchanged. Set to False to obtain the previous behavior. ## Patches are graphical objects that fill 2D space, like polygons or circles. ## for more information on patch properties. #patch.edgecolor: black # By default, Patches and Collections do not draw edges. # This value is only used if facecolor is \"none\" # (an Artist without facecolor and edgecolor would be # invisible) or if patch.force_edgecolor is True. #patch.force_edgecolor: False # By default, Patches and Collections do not draw edges. # Set this to True to draw edges with patch.edgedcolor # This is mainly relevant for styles. ## The font properties used by `text.Text`. ## See https://matplotlib.org/stable/api/font_manager_api.html for more information ## on font properties. The 6 font properties used for font matching are ## given below with their default values. ## The font.family property can take either a single or multiple entries of any ## combination of concrete font names (not supported when rendering text with ## usetex) or the following five generic values: ## Each of these values has a corresponding default list of font names ## (font.serif, etc.); the first available font in the list is used. Note that ## for font.serif, font.sans-serif, and font.monospace, the first element of ## the list (a DejaVu font) will always be used because DejaVu is shipped with ## Matplotlib and is thus guaranteed to be available; the other entries are ## left as examples of other possible values. ## The font.style property has three values: normal (or roman), italic ## or oblique. The oblique style will be used for italic, if it is not ## The font.variant property has two values: normal or small-caps. For ## TrueType fonts, which are scalable fonts, small-caps is equivalent ## to using a font size of 'smaller', or about 83 % of the current font ## bolder, lighter, 100, 200, 300, ..., 900. Normal is the same as ## 400, and bold is 700. bolder and lighter are relative values with ## property is not currently implemented. ## The font.size property is the default font size for text, given in points. ## 10 pt is the standard value. ## special text sizes tick labels, axes, labels, title, etc., see the rc ## settings for axes and ticks. Special text sizes can be defined ## relative to font.size, using the following values: xx-small, x-small, ## The text properties used by `text.Text`. ## for more information on text properties ## FreeType hinting flag (\"foo\" corresponds to FT_LOAD_FOO); may be one of the ## following (Proprietary Matplotlib-specific synonyms are given in parentheses, ## but their use is discouraged): ## - default: Use the font's native hinter if possible, else FreeType's auto-hinter. ## - no_autohint: Use the font's native hinter if possible, else don't hint. #text.hinting_factor: 8 # Specifies the amount of softness for hinting in the # horizontal direction. A value of 1 will hint to full # pixels. A value of 2 will hint to half pixels etc. #text.kerning_factor: 0 # Specifies the scaling factor for kerning values. This # is provided solely to allow old test images to remain # Values other than 0 or 6 have no defined meaning. #text.antialiased: True # If True (default), the text will be antialiased. #text.parse_math: True # Use mathtext if there is an even number of unescaped ## For more information on LaTeX properties, see #text.usetex: False # use latex for all text handling. The following fonts # are supported through the usual rc parameter settings: #text.latex.preamble: # IMPROPER USE OF THIS FEATURE WILL LEAD TO LATEX FAILURES # AND IS THEREFORE UNSUPPORTED. PLEASE DO NOT ASK FOR HELP # IF THIS FEATURE DOES NOT DO WHAT YOU EXPECT IT TO. # text.latex.preamble is a single line of LaTeX code that # will be passed on to the LaTeX system. It may contain # any code that is valid for the LaTeX \"preamble\", i.e. # between the \"\\documentclass\" and \"\\begin{document}\" # Note that it has to be put on a single line, which may # The following packages are always loaded with usetex, # PostScript (PSNFSS) font packages may also be ## The following settings allow you to select the fonts in math mode. ## \"mathtext.fontset: custom\" is defined by the mathtext.bf, .cal, .it, ... ## settings which map a TeX font name to a fontconfig font pattern. (These ## settings are not used for other font sets.) # 'stixsans'] when a symbol cannot be found in one of the # custom math fonts. Select 'None' to not perform fallback # and replace the missing character by a dummy symbol. #mathtext.default: it # The default font to use for math. # Can be any of the LaTeX font names, including # the special name \"regular\" for the same font ## Following are default face and edge colors, default tick sizes, ## default font sizes for tick labels, and so on. See #axes.grid.axis: both # which axis the grid should apply to #axes.titlelocation: center # alignment of the title: {left, right, center} #axes.titlecolor: auto # color of the axes title, auto falls back to #axes.titlepad: 6.0 # pad between axes and title in points #axes.labelsize: medium # font size of the x and y labels #axes.labelweight: normal # weight of the x and y labels # - above patches but below lines ('line') # of the axis range is smaller than the # first or larger than the second # according to the user's locale. # For example, use ',' as a decimal #axes.formatter.use_mathtext: False # When True, use mathtext for scientific # to an offset when the data range is #axes.formatter.offset_threshold: 4 # When useoffset is True, the offset # will be used when it can remove # at least this number of significant #axes.unicode_minus: True # use Unicode for the minus symbol rather than hyphen. See # color cycle for plot lines as list of string color specs: # As opposed to all other parameters in this file, the color # values must be enclosed in quotes for this parameter, # for more details on prop_cycle usage. #axes.autolimit_mode: data # If \"data\", use axes.xmargin and axes.ymargin as is. # If \"round_numbers\", after application of margins, axis # limits are further expanded to the nearest \"round\" number. #axes3d.trackballsize: 0.667 # trackball diameter, in units of the Axes bbox #axes3d.trackballborder: 0.2 # trackball border width, in units of the Axes bbox (only for 'sphere' and 'arcball' style) #xaxis.labellocation: center # alignment of the xaxis label: {left, right, center} ## These control the default format strings used in AutoDateFormatter. ## Any valid format datetime format string can be used (see the python ## `datetime` for details). For example, by using: ## - '%x' will use the locale date representation ## - '%X' will use the locale time representation ## - '%c' will use the full locale datetime representation ## These values map to the scales: ## For auto converter whether to use interval_multiples: #xtick.minor.pad: 3.4 # distance to the minor tick label in points #xtick.labelcolor: inherit # color of the tick labels or inherit from xtick.color #xtick.direction: out # direction: {in, out, inout} #xtick.minor.ndivs: auto # number of minor ticks between the major ticks on x-axis #ytick.right: False # draw ticks on the right side #ytick.labelright: False # draw tick labels on the right side #ytick.minor.pad: 3.4 # distance to the minor tick label in points #ytick.labelcolor: inherit # color of the tick labels or inherit from ytick.color #ytick.direction: out # direction: {in, out, inout} #ytick.minor.ndivs: auto # number of minor ticks between the major ticks on y-axis #legend.frameon: True # if True, draw the legend on a background patch #legend.fancybox: True # if True, use a rounded box for the #legend.numpoints: 1 # the number of marker points in the legend line #legend.markerscale: 1.0 # the relative size of legend markers vs. original #legend.title_fontsize: None # None sets to the same as the default axes. #legend.labelspacing: 0.5 # the vertical space between the legend entries #legend.handlelength: 2.0 # the length of the legend lines #legend.handleheight: 0.7 # the height of the legend handle #legend.handletextpad: 0.8 # the space between the legend line and legend text #legend.borderaxespad: 0.5 # the border between the axes and legend edge #figure.max_open_warning: 20 # The maximum number of figures to open through # If less than one this feature is disabled. #figure.raise_window : True # Raise the GUI window to front when show() is called. ## The figure subplot parameters. All dimensions are a fraction of the figure width and height. #figure.subplot.left: 0.125 # the left side of the subplots of the figure #figure.subplot.right: 0.9 # the right side of the subplots of the figure #figure.subplot.bottom: 0.11 # the bottom of the subplots of the figure #figure.subplot.top: 0.88 # the top of the subplots of the figure #figure.subplot.wspace: 0.2 # the amount of width reserved for space between subplots, # expressed as a fraction of the average axis width #figure.subplot.hspace: 0.2 # the amount of height reserved for space between subplots, # expressed as a fraction of the average axis height # parameters to make the plot fit the figure # elements fit on the figure. (Not ## Padding (in inches) around axes; defaults to 3/72 inches, i.e. 3 points. ## Spacing between subplots, relative to the subplot sizes. Much smaller than for #image.lut: 256 # the size of the colormap lookup table #image.composite_image: True # When True, all the images on a set of axes are #contour.linewidth: None # {float, None} Size of the contour line # widths. If set to None, it falls back to #errorbar.capsize: 0 # length of end cap on error bars in pixels #hist.bins: 10 # The default number of histogram bins or 'auto'. #agg.path.chunksize: 0 # 0 to disable; values in the range # especially if they are very gappy. # It may cause minor artifacts, though. # A value of 20000 is probably a good #path.simplify_threshold: 0.111111111111 # The threshold of similarity below # which vertices will be removed in #path.snap: True # When True, rectilinear axis-aligned paths will be snapped # to the nearest pixel when certain criteria are met. # When False, paths will never be snapped. #path.sketch: None # May be None, or a tuple of the form: # - *scale* is the amplitude of the wiggle # perpendicular to the line (in pixels). # - *length* is the length of the wiggle along the # - *randomness* is the factor by which the length is ## The default savefig parameters can be different from the display parameters ## e.g., you may want a higher resolution, or to make the figure #savefig.pad_inches: 0.1 # padding to be used, when bbox is set to 'tight' #savefig.directory: ~ # default directory in savefig dialog, gets updated after # interactive saves, unless set to the empty string (i.e. # the current directory); use '.' to start at the current #savefig.transparent: False # whether figures are saved with a transparent #savefig.orientation: portrait # orientation of saved figure, for PostScript output only #macosx.window_mode : system # How to open new figures (system, tab, window) # None: Assume fonts are installed on the # machine where the SVG will be viewed. #svg.hashsalt: None # If not None, use this string as hash salt instead of uuid4 #svg.id: None # If not None, use this string as the value for the `id` ## See https://matplotlib.org/stable/tutorials/text/pgf.html for more information. #docstring.hardcopy: False # set this when you want to generate hardcopy docstring ## Event keys to interact with figures/plots via keyboard. ## See https://matplotlib.org/stable/users/explain/interactive.html for more ## details on interactive navigation. Customize these settings according to ## your needs. Leave the field(s) empty if you don't need a key-map. (i.e., #animation.html: none # How to display the animation as HTML in #animation.codec: h264 # Codec to use for writing movie ## Path to ffmpeg binary. Unqualified paths are resolved by subprocess.Popen. ## Path to ImageMagick's convert binary. Unqualified paths are resolved by ## subprocess.Popen, except that on Windows, we look up an install of ## ImageMagick in the registry (as convert is also the name of a system tool). #animation.embed_limit: 20.0 # Limit, in MB, of size of base64 encoded"
    },
    {
        "link": "https://blog.reviewnb.com/tips-and-tricks-for-visualizing-data-with-matplotlib",
        "document": "Matplotlib is a powerful, highly-configurable visualization library. You can use it for quick exploratory plots or sophisticated figures with custom styling and many components. To get a sense of what is possible, check out their example gallery.\n\nUnfortunately, this library’s flexibility and power come at a cost: Matplotlib can be confusing to use.\n\nOne of the most important things to know about using Matplotlib is that there are two distinct interfaces:\n\nThe functional interface is simpler to use but it doesn’t give you as much flexibility. Let’s have a look at some common Matplotlib questions, keeping these two interfaces in mind.\n\nFirst things first: How do I install and update Matplotlib? Matplotlib can be installed with :\n\nIf you already have Matplotlib installed and want to update to a newer version, you can force to update the package using:\n\nThis will upgrade you to the latest available version of Matplotlib. If there is a specific version you know you need, you can install that specific version. For example, if you want to install version :\n\nThen you can import Matplotlib to use in your code. The convention is to import Matplotlib as follows:\n\nOccasionally, you may need to import a different component of the Matplotlib package, but most of the time will be all you need.\n\nWhat is the simplest way to create a Matplotlib plot?\n\nThe simplest way to create a Matplotlib plot is using the functional approach:\n\nHow do I use Matplotlib subplots?\n\nIf you would like to create a figure containing multiple subplots, you can use the function. The function creates two objects: a figure, which acts as the canvas holding all of the plots, and a grid of axes, which you can plot your data onto:\n\nHere we created a figure containing a 2-by-2 grid of axes and plotted a line on just one of the axes. If the figure has more than one plot on it, the axis variable returned by the subplots function is a numpy array with the dimensions of the axes. In the example above, we created a plot on the axis , which is the axis on the first row and second column (using Python’s zero-based indexing).\n\nThis method of creating a Matplotlib figure sets us up to use the object-orientated interface because each axis is an object with a suite of attributes and methods that we can then use to modify it.\n\nHow do I change axis values in Matplotlib?\n\nWe’ve created a plot, now how do we configure our axis values?\n\nIf you are creating a single simple plot, then you can use the approach to adjust labels and limits:\n\nIf you have used the function to create multiple axes, then you can change the axis values using axis object methods:\n\nOur axis object has the associated methods and , which you can use to configure the plot. Axes have many configurable properties, as well as labels and limits. You can find a comprehensive list of configurable properties in the Matplotlib documentation here.\n\nHow do I add a legend in Matplotlib?\n\nThere are two steps needed to add a legend. First, you need to label each of the plot components with the label you want to see in the legend. Second, you need to create the legend.\n\nIn the method, we add the label to the plot and then call the function to create the legend:\n\nThe object-oriented approach is similar, but in this case, the legend is created on the axis object:\n\nHow do I change the color of a bar chart in Matplotlib?\n\nChanging the color of all of the bars in a bar chart is as simple as setting the color parameter:\n\nWe chose a shade of red. The list of Matplotlib-named colors can be found here.\n\nNotice how we used the command to create an axis with a single figure. The single figure returns an axis object directly, not a array grid of axis objects.\n\nRemember we said at the start of this post that Matplotlib was highly configurable, so surely we can do more with color than just changing our plot to a single, solid color? Indeed, we can!\n\nHow about making one of our bars a different color? We can do this by setting the color of each bar explicitly:\n\nHere we supply the bar chart with a list of colors, one for each bar. We set one bar to be green and the rest to a grayscale value of .\n\nAnother option is to use a Matplotlib colormap to create a gradient of color:\n\nHere we created an array of increasingly lighter shades of blue, using the colormap. You can find more information here about what colormaps are available and how to use them.\n\nHow to save my Matplotlib plot to a PNG?\n\nWe can save our plots either using the approach:\n\nOr using the object-oriented approach:\n\nNote that in the object-oriented approach, is a method on the figure object, not the axis object. It is the full canvas that gets saved, not just an individual axis.\n\nHow can I use markers instead of lines in a Matplotlib plot?\n\nThe simplest way to change to markers rather than lines in a Matplotlib plot is to take advantage of the third format argument to the function. This is a shorthand method to set basic marker, line, and color options. For example, we can change lines to markers in our plot:\n\nWe can use the format option to use markers as well as lines ( ), to change the line style (e.g. for dashes) or the marker style (e.g. for squares), or to specify the color (e.g. for magenta):\n\nWe can also explicitly set each option with its own argument:\n\nIf we are using explicit arguments, we can turn off the line and just use markers by setting the line style to the string :\n\nHow can I collaborate on Matplotlib figures?\n\nEngineers and data scientists often use version-control tools like GitHub or Bitbucket to collaborate. Collaboration workflows usually include a code review step in which colleagues review each other’s work and provide feedback. For entirely code-based work, the review tooling provided by version control systems does a great job of enabling these feedback conversations.\n\nBut if your work includes visual elements like Matplotlib plots, the existing version-control tooling is inadequate. GitHub does render figures that are part of Jupyter notebooks, and recently it launched rich diffs for notebooks, which includes figure diffs. But you can’t comment on notebooks, so reviewing visual elements is still awkward.\n\nIf you want to effectively collaborate on Matplotlib figures, the best option is still ReviewNB. With ReviewNB you can comment on Jupyter notebooks inline, allowing you and your colleagues to discuss all your plots in a single view."
    },
    {
        "link": "https://stackoverflow.com/questions/64575600/customizing-a-barplot-in-matplotlib",
        "document": "I want to customize my simple bar plot based on frequency of data. Context as follows:\n\nI have a data set, where x-axis is referred to as and y-axis as and error-bars as . The var_change and var_error are calculated at the bin size of 5- . The code and the plot for these variables is shown below:\n\nI want to independently control both line-width ( in ), and in , as well as of individual bars in the bar plot below based on frequency of the data set. The frequency can be calculated using the code below:\n\nThe final plot should look something like below, but also with change in and based on frequency."
    },
    {
        "link": "https://matplotlib.org/3.5.3/gallery/index.html",
        "document": ""
    },
    {
        "link": "https://analyticsvidhya.com/blog/2021/08/understanding-bar-plots-in-python-beginners-guide-to-data-visualization",
        "document": "How to Create a Bar Plot in Python: A Step-by-Step Guide (Updated 2025)\n\nWe all love exploring data. Data scientists’ major work is to represent data and interpret or extract important information, which is called exploratory data analysis. There are many different representations to show data. One of the important diagrams is a Bar Plot which is widely used in many applications and presentations. This tutorial will teach us to implement and understand a bar plot in Python.Also, We are providing informati regarding bar graph python , how to implementing it and how bar plot in matplotlib is works. So with this tutorial you will clear all your thoughts bar plot in matplotlib or any query regarding python bar chart.\n\nIn this article, you will learn how to create a Python bar plot using Matplotlib. We’ll explore how to generate a bar chart in Python and visualize data effectively. By the end, you’ll be able to plot a bar graph and understand the nuances of bar charts in Python programming.\n• In this tutorial, you will learn about Bar plots, their types, and their uses.\n• You will also learn when to use Barplots and when to use Histograms\n• Lastly, you will learn different methods to create barplots in python.\n\nA bar graph, a graphical representation of data, employs rectangles to emphasize specific categories. The length and height of the bars depict the dataset distribution. One axis represents a category, while the other represents values or counts. Bar plot in Python, commonly used for this purpose, enable visualizing data either vertically or horizontally. The vertical version is often termed a column chart. Organize these bar charts from high to low counts to create Pareto charts, which provide clear insights into the significance of different categories.\n\nDifference Between Barplot vs Histograms: Which Plot to Use?\n\nHistograms, a valuable data representation tool, vividly illustrate continuous data distribution. They serve as graphical depictions of frequency distributions for both continuous and discrete datasets. Through the allocation of data into bins or intervals, histograms provide a natural means to visualize the count of data points within each bin, offering insights into data distribution patterns. Some common applications of histograms include understanding data variability, identifying outliers, and assessing the overall shape of the dataset. Explore histograms and their applications seamlessly by using techniques like creating a bar plot in Python, which enhances the natural representation of data distribution. Some common uses of histograms include:\n• Exploring the distribution of a single variable: A histogram can help you understand the distribution of a single variable, such as height, weight, or income.\n• Comparing two or more groups: By plotting histograms for different groups, you can compare the distributions of two or more variables. This can help you identify differences and similarities between groups.\n• Detecting outliers: Histograms can help you detect outliers or data points significantly different from the rest of the data.\n• Estimating probability density: By normalizing a histogram, you can estimate the probability density function, which describes the probability of observing a data point within a given interval.\n\nA bar plot represents categorical data, dividing it into distinct categories. Each category has a separate bar, with the height indicating the frequency or count of data points in that category.\n\nSo, the choice between a histogram and a bar plot in Python depends on the type of data you are working with. You have continuous data, a histogram is an appropriate choice. If you have categorical data, a bar plot is an appropriate choice. If you have ordinal data that can be ordered, such as star ratings or levels of education, consider using a bar plot.\n\nHere are some common use cases for bar plots:\n• Comparing frequencies or counts: Bar plots can be used to compare the frequency or count of data points in different categories. For example, you could use a bar plot to compare the number of books sold in different genres.\n• Displaying proportions: Bar plots can be used to display proportions, such as the percentage of respondents who selected each option in a survey.\n• Visualizing changes over time: Bar plots can be used to display changes in categorical data over time, such as the number of sales in different months or the number of new customers in different years.\n• Comparing multiple variables: By grouping bar plots, you can compare multiple variables simultaneously. For example, you could compare the number of books sold by different authors and by different genres.\n• Displaying nominal data: Bar plots are a common way to display nominal data, which is data that has no inherent order or structure, such as hair color or preferred drink.\n\nHow to Create a Bar Graph or Bar Plot in Python?\n\nIn python, we use some libraries to create bar plots. They are very useful for data visualizations and interpreting meaningful information from datasets.\n\nHere is a Code you can check here:\n\nHere are some Python libraries we use to create a bar chart.\n\nMatplotlib is a maths library widely used for data exploration and visualization. It is simple and provides us with the API to access functions like the ones used in MATLAB. The Matplotlib bar() function is the easiest way to create a bar chart. We import the library as plt and use:\n\nThe code to create a bar plot in matplotlib:\n\nThe bar width in bar charts can be controlled or specified using the “width” parameter in the bar() function of the Matplotlib library. The “width” parameter determines the width of each bar in the bar chart. For example, to set the bar width to 0.8, you can write the following code:\n\nYou can also use the np.arange() function or the np.linspace() function to create numpy arrays, which can be plotted. You can also use the plt.subplots() function to create multiple plots in the same Python figure.\n\nSeaborn is also a visualization library based on matplotlib and is widely used for presenting data. We can import the library as sns and use the following syntax:\n\nThe code to create a bar chart in seaborn:\n\nPlotly is an amazing visualization library that has the ability to interactive presentations, zoom into locations, and handle various design representations. Use this for readable representations, and hover over the chart to read the represented data. It also serves higher-dimensional data representation and abstracts data science and machine learning visualizations. We use plotly.express as px for importing plotly.\n\nThe following is code to create a bar chart in Plotly:\n\nUnstacked bar plots compare a specific category over time using different samples. You can deduce insights from the patterns observed through this comparison. In the figure below, we can see the players’ ratings over the years in FIFA. We can see that Django and Gafur have increased in ratings over the years. This shows us their progression, so a club can now decide if they want to sign Django or Gafur.\n\nYou can also use the Pandas read_csv() function to import data in a CSV file format into a Pandas dataframe for plotting.\n\nAs the name suggests, stacked bar charts/plots have each plot stacked one over them. As we saw earlier that we used an unstacked bar chart to compare each group; we can use a stacked plot to compare each individual. In pandas, this is easy to implement using the stacked keyword.\n\nNow, let us apply these syntaxes to a dataset and see how we can plot bar charts using different libraries. For this, we will use the Summer Olympics Medal 1976- 2008 dataset and visualize it using bar graphs to generate univariate, bivariate, and multivariate analysis and interpret relevant information from it.\n\nThe Summer Olympics dataset from 1976 to 2008 is available here.\n\nIn exploratory data analysis, Univariate analysis refers to visualizing one variable. In our case, we want to visualize column data using a bar plot.\n\nThe graph shows the top 10 countries that have won Olympic medals. The USA has dominated in olymics over the years.\n\nMedals won by the USA in Summer Olympics:\n\nWe filter the country to the USA and visualize the medals won by the USA alone.\n\nThe bivariate analysis includes two variables or two columns from our dataset.\n\nOver the years there has been an increase in the participation of athletes in the Olympics.\n\nTop 10 athletes with the most awarded medals:\n\nThis plot is also called the horizontal bar chart, and here we can see Micheal has won the most medals in the Olympics. This bar graph has the top 10 athletes.\n\nAquatics has contributed to the most number of medals in the Olympics. One thing to note in this graph is that we have used a rotation of 75 to text.\n\nType of medals won over the years:\n\nThe graph is an unstacked barplot and shows medal grouping over each year.\n\nThe gender bar plot tells us that men have participated more in the Olympics, or we can see men category games have been more in the Olympics.\n\nThe data tells us the ratio of men to women in the Olympics over the years. Here, we can see that more games have started including the women’s category, which is a great sign.\n\nMedals by gender in each discipline:\n\nThis graph shows each gender’s participation in the specific discipline.\n\nThe scatter plot is another type of plot for bivariate data visualization of numerical data where the x-axis and y-axis represent the values of two different data points.\n\nMultivariate analysis is used when we want to compare more than two categories. Usually, a boxplot is a good representation, as shown here.\n\nThis graph shows us that in all three medals, men have been winning moreover women in the Olympics over the year.\n\nUse bar plots to visualize time series data by placing time on the x-axis and values on the y-axis. In this case, each bar represents a single data point, with its height indicating the value and its position along the x-axis showing when you recorded the data point.\n\nTo plot time series data as a bar plot in Python, you can use the bar() function of the Matplotlib library. First, you need to convert the time series data into a suitable format, such as a list or numpy array, that can be passed to the bar() function. Then, you can use the “xticks” parameter in the bar() function to specify the x-axis labels, representing the time values in the time series data. If you want, you can also customize the y-axis using the y-ticks params.\n\nFor example, to plot a time series data with time values in the format “YYYY-MM-DD” and data values as integers, you can write the following Python code:\n\nThe above code will create a bar plot with the time values along the x-axis and the data values along the y-axis. You can customize the appearance of the plot by adjusting various parameters, such as the width of the bars, the color of the bars, and the labels for the x and y axes.\n\nIn this article, we have gone through different implementations of bar plots in Python and understand the different types of plots we use for exploratory data analysis using bar graphs.When creating a bar plot in Python, it is important to choose an appropriate type based on the data’s nature and the information you want to communicate.\n\nHope you like the article! Creating a Python bar plot with Matplotlib allows you to visualize data effectively. Use bar charts to compare values easily. A bar graph in Python is simple to implement and provides clear insights.\n• Bar plots represent data using rectangular bars. The height of each bar indicates the value of a data point, while the width represents the data category.\n• The Matplotlib library in Python widely creates bar plots. Use the bar() function in Matplotlib to create bar plots, which accepts data in the form of lists, NumPy arrays, and pandas DataFrames.\n• There are several types of bar plots, including simple bar plots, grouped bar plots, stacked bar plots, horizontal bar plots, and error bar plots.\n\nElevate your data visualization skills and master data science techniques by enrolling in our Data Science Black Belt program. Gain hands-on experience and personalized mentorship—enroll today to start your journey to becoming a data science expert!"
    }
]