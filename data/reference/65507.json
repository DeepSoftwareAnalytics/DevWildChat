[
    {
        "link": "https://stackoverflow.com/questions/2985772/if-i-wanted-to-make-a-pac-man-game",
        "document": "I am immediately placing this as a community wiki thing. I don't want to ask for help in programming yet or have even a specific question about programming, but rather the process and the resources needed to make such a game.\n\nTo put it simply: My college friend and I decided to give ourselves a really big challenge to further our skills in programming. In six months time we want to show ourselves a Pac-Man game. Pac-Man will be AI-controlled like the Ghosts and whichever Pac-Man lives the longest after a set of tries wins.\n\nThis isn't like anything we've done so far. The goal here, for me, isn't to create a perfect game, but to try and complete it, learn a whole bunch in the process. Even if I don't finish in the time, which is a good possibility, I would want to have at least tried this.\n\nSo my question is this: How should I start preparing myself? I already have started vector math, matrices, all that fun stuff. My desired platform would be DirectX 9.0c; is that advisable? Keep in mind that this is not a preference just for this project, but I wish to have some kind of future in graphics development, so I want to pick a platform that is future-safe.\n\nAs for the game development in general, what should I take into consideration? I have never done a real game before, so any and all advise to development of mid-scale projects( if this would be a mid-scale project ) is greatly appreciated.\n\nMy main concerns are the pit-falls and demotivators.\n\nSorry if the question is so vague. If it doesn't belong here, then I will remove it. Otherwise, any and all advise regarding making larger projects is greatly appreciated."
    },
    {
        "link": "https://egalvingamedev.wordpress.com/2013/12/12/pacman-tutorial-1-creating-pacman",
        "document": "I decided that it was time that I should do some tutorials on how to create a game. The game that I have chosen to do these next couple of tutorials is Pacman. What you will need – Some sort of Third Party API that will allow you to Draw and Update in your game, A simple math library with Matrix 2×2, Matrix 3×3, Vector 2, and Vector 3, and Visual Studios 2010. (Before we start. I am assuming that you know how to create a new project in visual studios). First create an empty project in Visual Studios. Then inside the project delete any folders that you might not need (anything that is not External Dependencies). Then you want to create a file called main.cpp. Right click the project then hover over add then click new item. If you are not already there click on Visual C++ tab in the “Installed Templates” section of the “Add New Item” window. Find and select C++ File (.cpp) in the middle section of the window. At the bottom you will see that there is a section for Name and Location. The Location should already be set for you since you right clicked on the project. As for the name just name it main and click the add button. Inside main you will have three functions. These three functions are Draw, Update, and Main itself. It Main you will need to call/register your update function and your draw function and initialize your game. Now this will all depend on whatever third party system you decide to use. In the update and the draw functions you will need to call game.update and game.draw. Game is a separate class where we will create and use all of our game components which will come later when we actually have something to draw and update. Now that main is out of the way let us go on and create the Pacman class. Right click on the project again this time find and select the “Header File” (.h) option, name it Pacman and click add. The header file should be blank, if it is not then delete everything and lets start from scratch. First in this file, you will want to add your header guards. If you don’t know what header guards are then header guards are basically a preprocessor macro that wont let your .h file be included in multiple times in one file. Header guards should look something like this at the top of your .h file\n\nthen at the very bottom of your file write #endif Now that the header guards are in place you should “#include” files such as your draw, update, and your math library into this file. This will allow you access to all the functions/methods inside these files. Now is the time to create the actual Pacman class. Below all the includes type class Pacman with the opening and closing braces {}. Now in between the braces we are going to create two “fields” one public and one private. For this all you need to do is type public: and private: in between the two braces. Now under public we are going to declare all the functions and even variables that we would want other classes to see. In this section declare and empty Pacman Constructor, void Update, void Draw, void Draw2, and a get position method that will simply return Pacman’s positions. The reason that i have told you to create two draw functions is so we can actually create a simple “eating” Pacman instead of a stand still shape. Now in the private section declare a Vector2 PlayerPos, and then at least ten other Vector2’s for both of the draw functions. That covers the Pacman.h file now lets actually define all these in the Pacman.cpp file. In this file at the top you are going to “#include” your Pacman class. Then start adding the functions/methods to your .cpp file. Lets start with the constructor that should read some thing like – Pacman::Pacman() I call mine player. Now inside the constructor we are going to define all of the private Vector2’s that are in the Pacman class. PlayerPos – Can be wherever you want it to be as long as its not outside the width and height of your window. other vectors – These vectors will be used to draw lines to create our shape in the game so look below to see what i assign those particular vectors. If you don’t like the shape then you can just change it later.\n\nNext we should do the update function. In the update function we are going to give Pacman the ability to move. We will need to take in some input from the keyboard and then change Pacman’s position. The way we do this is as simple as saying if the button has been pressed then PlayerPos = Vector2(getX() +- number, getY() +- number). The +- determines which buttons you are pressing for instance if i was pressing “A” then we need to subtract from the x and not the y. The “number” is how much you want Pacman to move by. It should look something like this.\n\nNow that we have given Pacman the ability to move now lets actually draw what he is and what he will look like. In the first draw function we are going to do several things.\n• Create a Matrix3x3 and call it the translate matrix\n• Create a new Vector and set them equal to each Vector by your translate Matrix\n• Now draw a line between you new vectors two at a time\n\nHere is what it should look like when you are done.\n\nThe Draw2 function should look similar just make sure that you are using your other vectors and not the same or your sprite will not work properly. Next is the Game class that we will use as a buffer between main and all of our components. Create a Game.h with header guards and a write class Game at the top with the braces and even include a public and private section just like in the Pacman class. “#include” the Pacman.h file inside the the Game.h file. Under the public portion of this class we are going to create two floats one called PacmanRate and the other called PacmanInterval. Also include the blank Game constructor , the update function this time taking in float dt which will be our time as the game runs, and the draw function for the game. In the private section we are going to declare Pacman (Pacman gamePacman). The class itself should look something like this.\n\n\n\nNow create the cpp file for Game, include Game.h and lets start to define what is going to be in the function. In the Constructor we are going to define PacmanInterval as 1. Now in the update function say that PacmanRate += dt, and Pacman.update(). Now in the draw we are going to say that if PacmanRate is less than the Interval Draw2, and if PacmanRate is greater than PacmanInterval than call Draw. Nested inside that if statement is another if that says if PacmanRate > PacmanInterval + 1 than PacmanRate = 0. It should look something like this.\n\nOnce that is done make sure that you are calling Game.Update and Game.Draw in main you should be able to see a square pacman change from eating back to a square and you should be able to move him around as well."
    },
    {
        "link": "https://reddit.com/r/learnprogramming/comments/ic9geq/i_learned_c_basics_with_pacman_and_tetris",
        "document": "If this technically counts as not polished enough to be posted here, I understand, because its technically not a tutorial. I just want to post because when I was making them I looked around online and there aren't as many examples as you would think there are. So if this needs to be removed, I know I don't need to give your permission!\n\nI come from background of really crappy scripting languages for games, but I have hundreds and hundreds of hours of experience with them, so I have a good idea on how to use information to represent a game, but I had literally no real programming experience outside of some CSS/HTML in school.. (and tiny bit of Qbasic)So I decided to learn C++ by programming pacman and tetris;\n\nThis was basically an learning exercise in multiple files and scope for me, which I never had to deal with before, I think I even posted in this subreddit a few months ago about header files!\n\nAnyway here are the projects; they are far from perfect but I don't think there are many big bugs.\n\nThere are 2 things of concern though. To get pacman to work, you need to create 2 folders and put the default map files(1.txt, 2.txt) into the(defaultmaps, usermaps, for filenames). I never got around to checking if they exist and recreating if not. Also I probably didn't do enough testing in the level progression in the context of maps not existing and choosing a random default to replace them(Technically the game can have hundreds of levels, if that works like it should, which I think it does, but.. I admit I got burned out and didnt test this late feature enough..)\n\nalso I didn't include the sound files for this, not sure if they need to be commented out in code..\n\nOh and also did I mention pacman has a level editor? I wanted to be the only one on youtube to have that but I never made a video..\n\nForgot to mention, but I used A* instead of traditional ghost AI, although their target squares are the same\n\nThis is basically a clone of tetris with minimal changes. I think wall kicking is the only big feature missing.\n\nNormally when you slam a piece it goes from the top down, but I also decided it would be fun to go from bottom up sometimes, so for traditional slam, use spacebar, to slam through pieces, use left shift. right shift toggles on which projected ghost piece you prefer(top down or bottom up) for aiming your slams\n\nAlso you can hide the already landed pieces for extra difficulty with TAB, not recommended as its hard as hell.\n\nThe only bug I can think of but couldn't reproduce, was occasionally the color of random prefilled squares being black and making them impossible to see. I THINK I fixed it, but not 100% sure I couldn't get it to happen again at least."
    },
    {
        "link": "https://github.com/linhlpv/Pacman_C-_tutor",
        "document": "Engine: Contain all character, map. Control the game loop. In one loop, collect all charactor states and handle these. By these states, drawing all to the screen."
    },
    {
        "link": "https://en.sfml-dev.org/forums/index.php?topic=15692.0",
        "document": "Hello, I'm really new to SFML and I don't know if it's the best idea to start game programming with pacmanThe only thing left is the AI for the ghosts but I don't really know how to realize that... So maybe I start AI programming with tic-tac-toe or so... If somebody of you has an Idea how to realize an AI for Pacman-ghosts (it doesn't care if the behavior of the ghosts (blinky, pinky, inky and clyde) is different), please tell meI'd really appreciate it because if I have that, my first game is (almost) done...I realized that the ghosts and pacman use more than one tile, in my version they only use one tile... Is it even possible to realize an AI for the ghosts that way (maybe somebody of you knows that)?You can compile the code on windows and linux, on mac it isn't testedSorry for my bad english I'm SwissEdit:New Download LinkEdit:I still haven't done an AI, but I have some ideas how to do it. I learned alot about OOP last week and I really begin to understand the whole objectorientation rather than just watching tutorials without all of the technical terms... Books for ever"
    },
    {
        "link": "https://github.com/sabamadadi/Pac-Man",
        "document": "Final Project of Basic Programming Course at Shahid Beheshti University (Winter 2022)\n\nThis is a C++ program that implements Pac-Man game!\n• The load function loads the saved state of the game from the \"Game.txt\" file. It reads the values of n, m, Ip, Jp, Ich, Jch, ghost positions, and the game board from the file and sets them to their respective variables.\n• The dfs function performs a depth-first search on the game board to find all the valid paths that the player can take. It populates the vector path with the indices of the valid paths.\n• The check function checks if the current position of the player is valid or not. It uses the dfs function to find all valid paths that the player can take.\n• The make_map function generates a random map for the game. It randomly places walls on the game board and connects all the cells to create a connected graph. It also sets the player and ghost positions on the game board.\n• The Print function prints the game board on the console. It uses colored ASCII characters to represent different elements on the game board, such as the player, ghosts, walls, and points.\n• The isGhost function checks if the player is colliding with a ghost or not. If the player is colliding with a ghost, it decreases the player's chance by 1 and sets the player position to the starting position. If the player has no remaining chances, it sets the GameOver flag to true.\n• The MoveGhost function moves the ghosts on the game board based on their current direction. It checks if the next cell in the current direction is empty or contains a dot, and then moves the ghost to that cell if it is valid.\n• The MoveGPro function moves the ghosts towards Pac-Man. It first calls the bfs function to find the shortest path from Pac-Man to each ghost, and then sets the direction of each ghost based on the next cell in the shortest path.\n• The MovePacman function moves Pac-Man on the game board based on the current direction. It checks if the next cell in the current direction is empty or contains a dot, and then moves Pac-Man to that cell if it is valid. It also checks if Pac-Man collides with a ghost or if Pac-Man reaches the cherry, and takes appropriate actions.\n• The MoveTime function moves Pac-Man and the ghosts based on the elapsed time since the start of the game. It checks if a certain amount of time has passed since the last move, and then moves Pac-Man and the ghosts accordingly.\n• The Move function moves Pac-Man and the ghosts one step at a time, and then waits for a short period before moving again. This function is used to animate the movement of Pac-Man and the ghosts on the game board."
    },
    {
        "link": "https://github.com/maricard18/pac-man-game",
        "document": "This project is a replica of the classic Pac-Man Game, originally developed in 1980. \n\n It has been implemented in C++ using the raylib graphical library. \n\n\n\nTo play this game you can use the command. \n\n This rule will generate a file, which is the zipped version of the game. \n\n You can launch the executable by running the command \n\n This project currently supports only Mac and Linux platforms.\n\nTo successfully clone this repository, use this command\n\nAll the graphical components in this game were created using functions from the raylib library, no images or textures were utilized. \n\n The CPU movement pattern was implemented using a self-made random algorithm system. \n\n The primary movement is always upwards unless it encounters a dead end. \n\n When passing through an intersection or facing a possible new direction, it has a 60% chance of continuing forward and a 40% chance of turning left or right.\n\nContributions are welcome! Feel free to submit bug reports, feature requests, or pull requests through GitHub."
    },
    {
        "link": "https://github.com/ymercad0/PacMan",
        "document": "Pac-Man game written and coded in C++ using the OpenFrameWorks library. The player controls Pac-Man and must attempt to eat all of the white dots on the screen while dodging the incoming ghosts. The base game has been enhanced with added ghosts and power ups.\n\nAfter downloading and extracting from the releases page, double click on the exectuable to run the program."
    },
    {
        "link": "https://github.com/angelortizv/pacman",
        "document": "In 1980, Namco created a character that was small, round and yellow. It's mouth consisted of a piece cut out of the main circle, like a slice of cake. Pac-Man was born. It was a huge hit in the arcades across the globe, and Pac-Man is still going strong today. With every new generation of game systems, Pac-Man continues to be part of the gaming community.\n\nPrerequisites: You must have Git installed on your console and also QtCreator\n• On GitHub, go to the main page of the repository.\n• Under the name of the repository, click Clone or download.\n• In the Clone with HTTPs section, click to copy the repository cloning URL.\n• Change the current working directory to the location where you want the cloned directory to be made.\n• Type 'git clone', and then paste the URL that you copied in Step 2.\n• Press Enter. Your local clone will be created for pacman.\n• Open QtCreator, select: -> and go to the location where you cloned the project.\n• Click on to open the project.\n\nThis pacman clone can be control using the arrows / / / , also / / / . To put the game in pause you must use the key , likewise use the key to resume the game\n• Secondary Resources: The game font, and sounds were taken from classicgaming.cc\n• Algorithm inside the ghosts: The whole algorithms is referenced from gamasutra.com\n\nThis project is licensed under the GNU General Public License v3.0 - see the LICENSE.md file for details"
    },
    {
        "link": "https://github.com/ebuc99/pacman",
        "document": "This is a clone of the original pacman by Namco, as I remember, that I played for the first time on an Atari 130 XL in the early 90s.\n\nAlso, Paul Neave's pacman clone has inspired me greatly.\n\nOne of the main goals of this implementation is an SDL application with a very low CPU usage.\n\nYou have to compile the Linux version on your own. For this, you'll need\n\n(make sure to take the devel packages) Then, download and extract the zip file or clone the pacman repository. Inside the pacman directory, run\n\nFor more detailed instructions, you may also have a look at the INSTALL file.\n\nAfter a successful installation, you should be able to start the game via command line:\n\nThen, download and extract the zip file or clone the pacman repository. Inside the pacman directory, run\n\nPacman is licensed under the terms of the GNU General Public License version 2 (or any later version)."
    }
]