[
    {
        "link": "https://nngroup.com/articles/footers",
        "document": "Footers can be found at the bottom of almost every web page, and often take many forms, depending on the type of content on a website. Regardless of the form they take, their presence is critical (and highly underrated).\n\nAs UX professionals, we tend to dedicate our time and energy to everything above the fold. That’s because global navigation, search, and high-priority content are positioned above the fold and users tend to spend a disproportionate amount of their time at the top of any given page. Consequently, footers, which appear at the bottom of web pages, get the short end of the UX time and resource budget. However, you should still pay attention to footers because they can greatly enhance a user’s experience.\n\nThe term “footer” comes from the print world, in which the “footer” is a consistent design element that is seen across all pages of a document. However, as we explained 20 years ago, the difference between print design and web design means that design elements like footers change their meaning (in this case by becoming actionable) when they’re ported from print to online.\n\nWebsite footers of the past were either small utility areas with little information or big dumping grounds for miscellaneous links. Visually, they often contained tiny text that was hardly legible. Today, footers have matured and now serve as an important reference point for people as they complete a variety of tasks on websites.\n\nWhile footers get less attention than the top of the page, they still receive a fair amount of use. These are the two most common use cases for footers:\n• Users scan or read the page and either don’t find what they want or need more information. They scroll to the bottom of a page and use the footer as:\n• A second chance to be convinced\n\n For example, maybe a user has decided, after reading all the details, that she doesn’t want to sign up for a bank account, but she was still impressed with the banking institution and wants to become a customer. The footer is a good opportunity to remind or teach potential customers about the company’s other offerings.\n• A last resort for hard-to-find content\n\n Sometimes users turn to the footer for additional options that might not be present in the global navigation. For example, those interested in applying for a job with an ecommerce company — a task that is different from those of the typical ecommerce customer—might look to the footer for relevant information.\n• Users intentionally scroll to the footer to find information they expect to appear there, such as contact information, details about the company, social media posts or links, or even to discover new or related content on the site. Some users even use the footer for navigation: when they have already scrolled to the end of a page, because the footer is in close proximity, they use that instead of scrolling to the top for the global navigation.\n\nIn both of these cases, no matter what content ends up in the footer, that footer should be consistent, predictable, and easily discoverable. Consider these use cases, your website’s goal, and your footer’s goal when determining which type of footer to offer and which content to offer in the footer.\n\nWhile satisfying these user scenarios may not be the absolutely highest-priority goal for a website, designing a good footer is still a worthy endeavor, because footers have a particularly wonderful usability characteristic: they will never get in the way of users who get their needs satisfied higher up on the page. Thus, except for overly bloated footers that could delay page download or rendering, a footer is a cost-free addition to the user experience. It can help, but it can’t hurt.\n\nSite designers choose many different types of content for their footers for various reasons. Footer elements can be combined depending on the business and user goals. Here are some of the most common footer components, examples, and recommended situations in which to use them:\n\nMost sites, at a minimum, tend to include utility navigation in the footer, pointing to:\n• contact information: the company’s address, phone number, and link to live chat\n\nWhile many sites have utility navigation located in the top-most areas of their site, the footer is where users look when they search for these specific items. Users will often go directly to the footer to find contact information or locate ways to get customer support. Whether you have links to these utility items at the top of your page or not, always include them in the footer as well. (A utility area at the top of the page should still be used for tools-like utilities, such as search, login/account information, and language-selection.)\n\nUse for: all sites\n\nLike the physical mat at people’s homes, a doormat navigation is the first thing you see when you arrive and the last thing you see when you leave — that is, it is included both at the top and the bottom of the page. Thus, a footer can include the global navigation. This component is beneficial when the pages are long (as it is the case with many modern mobile designs), since it allows users to quickly move to a different section of the site without scrolling back to reach the main navigation.\n\nUse for: sites with long pages, especially if the global navigation is unavailable while at the bottom of the page\n\nA footer may contain links to secondary tasks of interest to the user. Some examples of secondary tasks include:\n• applying for a job with the company\n• finding documentation or specifications of a product or service\n\nThese secondary tasks are usually not present in the global navigation or utility navigation. This type of footer content is common on sites with multiple user groups with different user journeys.\n\nUse for: helping users find secondary content that might not be directly related to the main purpose of the site\n\nFor example, Dwell Magazine’s website showcases categories outside the magazine topics, including About, Dwell Magazine, Professionals, and Merchants — which might interest its secondary user groups: media and design professionals, merchants, investors, and advertisers (and prospective employees).\n\nA site-map–styled footer component showcases a combination of the global navigation and other important pages not present in the global navigation. Unlike doormat navigation, it exposes lower-level subcategories of the main categories. It is helpful for:\n• exposing underlying topics which are not obvious at the global-navigation level\n\nA site-map footer component does not include the complete site map, unless the site has few pages (about 25 or fewer). Any more than that and the footer risks becoming unwieldy and difficult to use. (Alternatively, you can provide a full-featured site map on a separate page, and link to it in the footer, which is where users expect to find such a link.)\n\nUse for: large sites with multiple levels of information or subdomains\n\nMany of our study participants described being motivated to pick a site based on the awards and testimonials received by that site. Highlighting accolades in the footer can be a good tactic when building authority and credibility. However, showing too many testimonials and awards could also raise a red flag for customers, giving the impression that the company needs to show testimonials because it is not mature or stable. A solution is to add this content to the footer.\n\nRun usability tests and A/B tests with your audience to determine whether this strategy is appropriate for your footer, and what the right number of testimonials is.\n\nUse for: startups or for companies with less brand awareness\n\nSome companies are so massive that they own or preside over dozens of other companies. Some use universal navigation to connect these child companies with the parent one. It can also be helpful to include a list of subsidiaries and brands in the footer to reinforce awareness of other brands or companies that fall under the organization’s portfolio and also help users find their way around.\n\nUse for: large, multinational organizations with many subsidiaries or partnered brands\n\nUsers will often go directly to the footer to find information such as coupons and promotions or to simply staying up to date with the company’s sales and product releases. Thus, the footer can include information that allows customers to stay engaged with the company — social-media links (or at a minimum, links to the company’s social-media accounts) and mailing list signup prompts.\n\nBefore including an embedded social-media feed widget in the footer, consider how often the company posts on each social-media site. A less active social-media account may not warrant an embedded social-media feed, but might still benefit from linking to the social accounts.\n\nUse for: all types of sites if using social-media links; sites with heavy emphasis on visuals or aesthetics (arts, beauty, lifestyle brands, or creative spaces) if using an embedded social-media feed widget\n\nMany ecommerce, entertainment, and other sites which encourage browsing opt for an infinite scroll in order to keep users on the page. Content continually loads so there is no consistent bottom on every page, and thus no footer section. However, the content that would have been in the footer (typically, utility-navigation links) appears as a “mini footer” in the right rail, or within a larger, expanded global navigation.\n\nFor the footer to be helpful it needs to be present on all pages of the site. Some sites try to utilize the same footer for both static-length and dynamic-length pages. However, when users attempt to use these footers on sites with infinite scroll, it often becomes a frustrating game of “whack-a-mole” where users try to click on links as quickly as possible before they vanish again below the fold. Instead, if you plan on using infinite scroll, consider placing a mini footer in the right rail and ensure that it is sticky alongside the main content as the user scrolls.\n\nUse for: pages with infinite scroll\n\nWhile footers traditionally stay consistent across many pages, sometimes it can be helpful to customize the footer based on information that’s presented on the page. Particularly for a site with multiple audiences, a contextual footer can surface content that may not have made it into the global navigation, but might still be critical for some users.\n\nFor example, the Medium.com homepage does not have a footer; the page shows an infinitely scrolling list of articles. (The page has a right-rail mini footer as recommended above.) However, on a specific story’s page, Medium shows a task-based footer that varies depending on whether the viewer is a subscriber or not.\n\nUse for: sites with different user roles (e.g. “content creator” vs “content consumer” or “member” vs. “nonmember”)\n\nFooters have come a long way since the 1990s, but to this day, they are still subject to common design pitfalls:\n• More than two levels of information hierarchy\n\n Especially for large sites, including an entire site map is not an answer to your footer. A footer is a dedicated amount of real estate that should be devoted to only important information that should be discoverable. As my mother once aptly put it, “If everything is important, nothing is important.”\n• SOLUTION: Consider reprioritizing the content and only displaying links to first- and second-level categories in your IA, not the entire site. If a single lower-level page is important enough, surface that specific link in the footer, but you don’t have to show all levels of the information hierarchy to make it discoverable.\n• Unclear link names in the footer (e.g. Company Info or Help versus Contact Us)\n\n The notorious Resources link on many footers is one of the unfortunate vestiges of past footers.\n• SOLUTION: Teams should try to adhere to conventional, clear terms. If the team is unsure which term would be more appropriate, a card sort or usability test can help shed light on terms which may confuse users.\n• Unclear structure or information hierarchy\n\n The footer may sometimes be a “dumping ground” for orphaned links — that is, links which seem to have no relation to the global navigation or to secondary tasks. If the footer has no pattern of organization, users will either do an exhaustive review or spend very little time looking at the footer.\n• SOLUTION: Clearly convey the information hierarchy of the items in the footer by using grouping or other visual-design patterns that indicate visual hierarchy (e.g. bolded high-level page links and normal-weight lower-level page links).\n• Hidden or illegible footers\n\n Sometimes companies opt to use a tiny font size for footer links in order to accommodate all the links or to make the links less distracting. Worse, some sites might use an animation or accordion feature to hide the footer completely for aesthetics purposes. While the footer is not the primary navigation, people still use it and rely upon it, so don’t try to hide it.\n• SOLUTION: Use a legible font size and font color (with decent contrast) and avoid using decorative fonts. Most importantly, do not hide or collapse the footer — people expect it to be there.\n\nA footer is the place users go when users they’re lost. If we want to leave a lasting good impression, it’s critical that we don’t neglect the bottom of the page. After all, even the most mundane, utilitarian sections of an interface can make the biggest impact on a user’s experience."
    },
    {
        "link": "https://blog.pixelfreestudio.com/how-to-design-a-responsive-footer-with-flexbox",
        "document": "In modern web design, a responsive footer is essential for creating a polished and professional website. The footer often serves as a site’s foundation, providing users with essential information and navigation options. Using Flexbox, a CSS layout module, you can create a responsive footer that adjusts seamlessly to different screen sizes and devices. This article will guide you through designing a responsive footer with Flexbox, offering detailed, step-by-step instructions to ensure your footer looks great on any device.\n\nFlexbox, or the Flexible Box Layout, is a CSS layout model designed to help you create complex and flexible layouts with ease. It provides a more efficient way to arrange and align elements within a container, especially when the size of the container is unknown or dynamic.\n\nFlexbox is particularly useful for creating responsive designs because it allows elements to adjust and distribute space within the container dynamically.\n\nBefore diving into the implementation, it’s essential to understand some key concepts of Flexbox. The main components are the container and the items. The container is the parent element that holds the flex items, and the items are the child elements within the container. Key properties include:\n• display: flex; This property is applied to the container to enable Flexbox.\n• flex-direction: Determines the direction of the flex items (row, row-reverse, column, column-reverse).\n• flex-wrap: Controls whether the flex items should wrap or not (nowrap, wrap, wrap-reverse).\n\nUnderstanding these properties is crucial for effectively using Flexbox to design a responsive footer.\n\nLet’s start by setting up the basic HTML structure for our footer. The footer will include several sections, such as contact information, quick links, and social media icons.\n\nNext, let’s add some basic CSS to style the footer and its sections. We’ll use Flexbox to ensure that the footer is responsive.\n\nTo ensure that our footer looks great on all devices, we need to use media queries. Media queries allow us to apply different styles based on the screen size. For example, on smaller screens, we might want the footer sections to stack vertically instead of being displayed in a row.\n\nAdjusting the flex properties of the footer sections can help us control how they resize and rearrange themselves on different screen sizes. The property is shorthand for , , and . By tweaking these values, we can create a responsive layout that adapts to various screen sizes.\n\nTo improve the visual appeal of the footer, we can add background colors and borders to the footer sections. This not only enhances the design but also helps in distinguishing different sections more clearly.\n\nUsing icons and graphics can make the footer more engaging. For instance, we can add icons next to the contact information and links. Font Awesome or similar icon libraries can be used to easily add icons to our design.\n\nFirst, include Font Awesome in your HTML:\n\nNext, update the HTML to include icons:\n\nHover effects can add an interactive element to the footer, making it more user-friendly. For example, we can change the color of the links when hovered over, or add a slight transformation to the social media icons.\n\nUsing semantic HTML elements improves accessibility and SEO. For example, using for navigation links and for contact information makes it easier for screen readers to understand the structure of the page.\n\nEnsure that all interactive elements in the footer are accessible via keyboard. This involves making sure that links and buttons are focusable and that their focus state is clearly visible.\n\nAlternative text (alt text) for images ensures that users with screen readers can understand the content of the images. Make sure all images have descriptive alt text.\n\nContinuous testing is crucial for ensuring that your responsive footer maintains its functionality and appearance across all devices and browsers. Regular testing helps identify issues early, allowing for timely adjustments that prevent small problems from becoming significant setbacks.\n\nFor businesses, this means maintaining a consistent and professional online presence, which is essential for user trust and engagement.\n\nTesting your footer across different browsers ensures that it looks and functions correctly regardless of the user’s choice of browser. Start with the most popular browsers like Chrome, Firefox, Safari, and Edge.\n\nEach browser interprets CSS slightly differently, so thorough cross-browser testing is vital. Utilize tools like BrowserStack or Sauce Labs, which provide access to various browser environments without needing to install multiple browsers on your system.\n\nEnsure that media queries and Flexbox properties behave as expected. Pay attention to how fonts, colors, and other design elements render. Consistent testing across browsers helps maintain a uniform user experience, reinforcing your brand’s professionalism.\n\nWith a significant portion of web traffic coming from mobile devices, ensuring your footer is responsive on smartphones and tablets is paramount.\n\nUse Chrome DevTools or Safari’s Responsive Design Mode to simulate different devices and screen sizes. Test the footer on various devices, from high-end smartphones to older models, to ensure compatibility.\n\nEvaluate the touch-friendliness of interactive elements. Links and buttons should be easily tappable without zooming. Check how the footer adapts when switching between portrait and landscape orientations.\n\nTesting on physical devices, if available, provides the most accurate feedback on usability and performance.\n\nA well-designed footer should not compromise the overall performance of your website. Use tools like Google PageSpeed Insights, GTmetrix, or WebPageTest to analyze the performance impact of your footer. These tools provide insights into load times, render-blocking resources, and other performance metrics.\n\nOptimize images by compressing them and using modern formats like WebP. Minimize CSS and JavaScript files, and leverage browser caching. Ensuring that your footer loads quickly, even on slower networks, enhances the user experience and can positively impact your search engine rankings.\n\nAccessibility should be a priority in your design process. Use tools like WAVE, Axe, or Lighthouse to check for accessibility issues. These tools highlight areas where your design may not meet accessibility standards and provide recommendations for improvements.\n\nManually test the footer using keyboard navigation and screen readers like NVDA or VoiceOver. Ensure that all interactive elements are focusable and that their focus states are clearly visible. Verify that ARIA roles and attributes are correctly implemented, providing additional context to assistive technologies.\n\nUser testing provides valuable insights that automated tools cannot capture. Conduct usability testing sessions where real users interact with your footer. Observe their behavior and gather feedback on their experience.\n\nLook for pain points or areas of confusion, and use this feedback to make necessary adjustments.\n\nConsider implementing a feedback mechanism on your site, allowing users to report issues directly. This real-time feedback can help identify problems that may not have been caught during initial testing phases.\n\nDesign is an iterative process. Regularly revisit your footer design based on feedback and testing results. Small, incremental improvements can lead to significant enhancements in user experience over time.\n\nAdopt a mindset of continuous improvement. Schedule periodic reviews and updates to your footer design to ensure it evolves with changing user needs and technological advancements. Keep an eye on industry trends and emerging best practices to stay ahead of the curve.\n\nA/B testing can be an effective strategy for optimizing your footer design. Create multiple versions of your footer and test them against each other to see which one performs better in terms of user engagement, conversion rates, or other key metrics.\n\nTools like Google Optimize or Optimizely allow you to set up and manage A/B tests with ease. Analyze the results to understand user preferences and make data-driven decisions about your footer design.\n\nThis approach ensures that your footer is not only aesthetically pleasing but also effective in achieving your business goals.\n\nDocument all the changes and improvements made to your footer design. Maintain a changelog that records what was modified, why, and the outcomes of these changes. This documentation serves as a valuable reference for future projects and helps maintain continuity if team members change.\n\nStrategic documentation also aids in troubleshooting. If a new issue arises, you can quickly refer to past changes to identify potential causes. Detailed records of testing processes and results can streamline future testing phases, saving time and resources.\n\nEnsure that your development team is well-versed in best practices for responsive design and Flexbox. Provide training sessions and resources to keep their skills up-to-date. Encourage knowledge sharing within the team to foster a culture of continuous learning and improvement.\n\nCreate internal documentation and guides that outline the testing and refinement processes. This resource can be invaluable for onboarding new team members and ensuring consistency in future projects.\n\nWhile the basic Flexbox properties are sufficient for most layouts, advanced properties can create more complex and refined designs. Properties like , , and provide additional control over how items resize and distribute space.\n\nNesting Flex containers within each other can help create more sophisticated layouts. For instance, you might want a row of items within one of your footer sections to have their own Flexbox settings.\n\nUsing the property, you can align individual flex items differently from others within the same container.\n\nForms are a common feature in footers, allowing users to sign up for newsletters or contact support. Integrating forms with Flexbox ensures they are responsive and well-aligned.\n\nIncluding a map in your footer can help users find your physical location. Services like Google Maps offer embeddable maps that can be integrated using Flexbox.\n\nKeeping your CSS lean and efficient helps improve loading times and performance. Minimize the use of unnecessary styles and avoid redundancy by using classes and inheritance effectively.\n\nLazy loading defers the loading of off-screen images until they are needed, improving initial load times. This technique is particularly useful for social media icons and maps in the footer.\n\nAs new devices with varying screen sizes and resolutions are released, ensure your footer remains responsive. Regularly test your footer on new devices and update your Flexbox layout as needed to maintain compatibility.\n\nStay informed about the latest developments in CSS and Flexbox. New properties and techniques are continually being introduced, which can offer improved functionality and performance. Regularly updating your knowledge and skills ensures that your designs remain modern and effective.\n\nProgressive enhancement ensures that your footer provides a functional and accessible experience across all browsers, even those that do not fully support Flexbox. Use feature detection to apply Flexbox styles only if supported, and provide fallback styles for older browsers.\n\nMaintain thorough documentation of your Flexbox layout and CSS styles. Documenting your code helps team members understand the design choices and makes future updates easier. Include comments in your CSS files and create a separate document outlining the structure and functionality of the footer.\n\nCSS transitions can add smooth animations to your footer, enhancing the user experience. For instance, you can animate hover effects on links and buttons to make the footer more interactive.\n\nKeyframe animations can be used to create more complex animations, such as animating the appearance of the footer when the page loads.\n\nFor more advanced animations, you can use JavaScript libraries such as GSAP (GreenSock Animation Platform). GSAP offers powerful and flexible animation capabilities that can be integrated with your footer design.\n\nSemantic HTML helps search engines understand the structure and content of your page. Using appropriate tags like , , and can improve SEO.\n\nStructured data, such as schema markup, helps search engines understand the content of your footer better, potentially enhancing your site’s visibility in search results.\n\nWhile Flexbox is great for a single-dimensional layout, CSS Grid can handle two-dimensional layouts more effectively. Combining Flexbox and CSS Grid can enhance your footer design.\n\nUsing CSS Grid, you can create more complex layouts, such as having certain sections span multiple columns or rows.\n\nMinimizing your CSS and using preprocessors like Sass or LESS can help streamline your styles and improve loading times.\n\nCSS variables allow you to manage and update styles more efficiently.\n\nARIA (Accessible Rich Internet Applications) roles help improve accessibility for users with disabilities. Use ARIA roles to provide additional context to screen readers.\n\nRegularly test your footer with screen readers to ensure that it is accessible to users with visual impairments. Tools like NVDA, JAWS, and VoiceOver can help you evaluate the accessibility of your design.\n\nDesigning a responsive footer with Flexbox is a powerful way to enhance the usability and aesthetics of your website. By understanding the key concepts of Flexbox, setting up a solid HTML structure, and applying best practices for responsive design, you can create a footer that looks great and functions well on any device. Incorporating additional design elements, ensuring accessibility, and continuously testing and refining your design will ensure that your footer provides a seamless and engaging user experience. By following these steps, you can leverage the flexibility of Flexbox to create a responsive footer that enhances your website’s overall design and functionality.\n• REST vs. GraphQL: Choosing the Right API for Your Project\n• How to Handle Authentication in API Integration\n• Best Practices for Secure API Integration in Web Apps\n• How to Use GraphQL for API Integration: A Beginner’s Guide"
    },
    {
        "link": "https://toptal.com/designers/responsive/responsive-design-best-practices",
        "document": "Responsive websites are websites that adapt to all screen sizes and resolutions, not only on desktop but also on mobile, tablet, and sometimes even TV.\n\nAccording to Statista, mobile traffic was responsible for 52.64% of all global traffic in 2017, meaning that a website not well optimized for mobile devices is losing out on approximately half of its traffic. By the end of 2018, it’s expected that the global traffic share for mobile devices will grow to 79%, which is an exceptional increase.\n\nBusinesses without a mobile website are falling behind at an alarming rate, because 8 in 10 visitors will stop engaging with a website that doesn’t display well on their device. It’s way too easy for users to hit the back button and try a rival business instead, and Google even ranks websites that don’t use mobile responsive design lower in their search.\n\nYou can take Google’s mobile-friendly test here.\n\nDoes any of this mean that mobile is more important than desktop? No. 83% of mobile users say that they should be able to continue the experience on desktop if they wish.\n\nTake a look at this mobile-optimized version of eBay vs. what it would look like if it weren’t mobile-optimized. Would you even consider the non-optimized version?\n\nIn order to design websites that can compete on today’s internet, web designers must be experts at responsive website design (RWD). Where should they start?\n\nMobile-first web design means designing the mobile website first and working up to the desktop version. There are a number of reasons why this approach works well.\n• Mobile websites have more usability concerns (this is mostly due to the lack of screen real estate), so it’s practical and more efficient for the primary focus to be on mobile design.\n• It’s easier to scale up the mobile version than it is to scale down the desktop version (again, because of the lack of space on mobile websites).\n• Mobile-first web design helps to reevaluate what’s visually and functionally necessary.\n\nDesigning a website as a mobile-first responsive site forces designers to ask a number of important questions because there is less screen real estate to work with. Here are the questions that need to be asked:\n• Is this feature/function really necessary?\n• How can we design something minimalist for mobile first that will later scale up well for desktops?\n• Is this visual effect worth the time that it takes to load on mobile?\n• What’s the primary objective, and what visual elements help users achieve it?\n\nWe’ll take a look at some responsive website examples in a moment. For now, let’s talk about which devices, screen sizes, and web browsers are relevant today.\n\nWhat Screen Resolutions Are Relevant for Responsive Web Design?\n\nHere are the most common screen resolutions across mobile, tablet, and desktop users worldwide. As you can see, there is a wide range of resolutions, so neither mobile, tablet nor desktop is dominating the market share right now—what this tells us is that designers should consider all of them when thinking about responsive web design.\n\nJust as with device breakdown, we should segment the data by location to match the user demographics (or anticipated user demographics) of our target audience. It’s also worth catering to resolutions that are gaining popularity, because while some screen sizes are currently not that common, they may be in the future. This will help responsive designers craft futureproof UX that will work even when the market share changes.\n\nFor example, 360x640 resolutions (which correspond mostly with Samsung devices using Android) have risen by 5.43% in the last year. Designers can use valuable insights like these to decide on key responsive breakpoints before starting a website design.\n\nResponsive web design is about offering a seamless experience on any device, and since different web browsers render web pages in different ways, websites must be tested to ensure that they’re compatible with a variety of mobile and desktop web browsers.\n\nEven though making a website scale to the correct responsive breakpoints is primarily the responsibility of a web developer, it’s the web designer that decides exactly how responsive UI elements will adapt to various screen sizes in order to create an optimal user experience.\n\nHere’s a worldwide breakdown of web browser market share for mobile and desktop.\n\nResponsive design isn’t just about “making everything fit”—it’s also about adapting to the capabilities of the device hardware and web browser as well as the device resolution. One example of this could be that, while Google Chrome supports the CSS property (which defines what happens when the user scrolls too hard towards the edge of the viewport), it’s not supported in any other web browser.\n\nAs mentioned earlier, a mobile-first approach to responsive web design will help designers evaluate what’s really necessary in order for the user to achieve their main objective.\n\nAs we build up to the tablet version (and later the desktop version), we can then begin to think about secondary objectives and the microinteractions, user flows, and CTAs (calls to action) that make those user objectives achievable. What’s more important is that we focus on the primary objectives of the user first and eliminate any unnecessary friction that aids neither the primary nor the secondary objectives.\n\nA primary objective could be the purchasing of a product, whereas the secondary objective could be signing up for a newsletter (which could lead to a purchase later).\n\nHere’s a terrific example of eliminating friction: Since mobile user interfaces are typically harder to navigate, it would be best to switch to a one-page checkout for mobile eCommerce stores and only enable multi-step checkout for desktop eCommerce stores.\n\nResponsive design UX is tricky in the sense that users will interact with the desktop website via clicks but the mobile version via taps and swipes. There are physical differences as well. Desktop users typically have their computers on a surface, whereas mobile users hold their devices in their hands. These differences significantly change the way mobile UI designers design tap targets and other important UI elements with which users interact.\n\nLet’s take a look at some examples:\n• People typically expect the main desktop navigation to be at the top; however, on mobile, it should be at the bottom. Thumbs don’t reach the top comfortably.\n• Other interactive elements should also be easy to reach. This means keeping them in the center of the screen because it’s more difficult for thumbs to reach the sides and corners of device screens.\n• So that they can be tapped with ease, important links and CTAs should have a height of at least 44px (smaller tap targets are bad for usability).\n\nMobile hardware (like the device camera, or GPS services) isn’t specifically reserved for native apps, and as mentioned earlier, responsive web design isn’t just about “making everything fit.” It’s also about adapting to the capabilities of the device. In the case of mobile web design, since mobile devices have easy to use cameras, some microinteractions—such as data input—are actually easier on smaller screens as long as websites are taking advantage of the available native hardware.\n\nLet’s take a look at some examples:\n• Credit/top-up card scanning (because forms are often tricky on mobile)\n• Photo-sharing on social media, because the media is already on your device\n• Two-factor authentication (because you’re already on your mobile device)\n• Performing a web search with voice (because hands-free is easier than typing)\n\nNot every user will have their desktop browser maximized. This means that while designers need to consider the responsive breakpoints of the devices that users are using today, they also need to account for what happens in between those breakpoints.\n\nResponsive breakpoints should be used to “reflow” the layout and content to a new device, but to account for all the sizes in between (just in case), layouts need to be otherwise fluid (that is, they naturally adapt/stretch as the browser resizes).\n\nKeep these tips in mind when designing fluid/adaptive layouts:\n• Percentage units will allow elements to be fluid.\n• Setting minimum and maximum widths can enable the “but don’t go smaller/bigger than this” scenario.\n• SVG image formats can be scaled up and down without losing quality, and are resolution-independent (as opposed to JPGs and PNGs, which are not).\n\nWe talked about specific responsive breakpoints earlier, but we also need to consider that those mobile viewports can be displayed in landscape orientation as well. While implementing a fluid layout will technically make the content adaptive, losing a fair chunk of the portrait viewport can be a hindrance to the usability and accessibility.\n\nNavigations are usually safe (sometimes they’re better, actually, since users typically navigate landscape orientation with two thumbs), but scrolling becomes significantly harder, which is less than optimal since the user is required to scroll more on landscape.\n\nDesigners may want to consider designing for landscape breakpoints as well; for instance, tiled elements that stack vertically on mobile could be displayed as a slider with left and right navigation buttons, meaning the user doesn’t have to scroll.\n\nRemember, Typography Can Be Responsive Too\n\nEven though UX designers typically use pixel units to design websites, on the actual web, one point doesn’t necessarily equal a pixel anymore, because different devices have different resolutions. The iPhone X, for example, has 458 PPI (Pixels Per Inch), so where pixel sizes are getting smaller, we’re able to achieve crisper graphics in the same physical space (Apple calls this “Retina” technology, and Android calls it “hDPI”).\n\nThis means that a 16px font size, for instance, would look bigger or smaller on some devices depending on its resolution. Web developers will typically use em units to define font sizes, which are a type of responsive unit where 1em is equal to 1 point.\n\nDesign handoff tools like Zeplin, Sympli, Marvel, and InVision can help designers collaborate with developers on matters that are a joint responsibility. While designers execute the design, and developers execute the code, as a whole the product design workflow is a team effort that requires solid communication.\n\nResponsive web design isn’t just about how it looks but also about how it acts and feels. Adapting websites so that they load faster on the intended device is equally important.\n\nImages and videos are what make up a large chunk of the total download size of a website, but you don’t need to load them all at once. There are two scenarios where the rendering of media can be delayed: Below-the-fold content can be loaded as the user scrolls below the fold, and render-blocking media should be made to download only after the layout and content has downloaded. This practice is called lazy loading, where the loading of heavy, non-important elements is delayed to improve page performance.\n\nSome website elements are not intended for mobile users, or at least aren’t worth the extra cognitive load. We want our mobile websites to be simple, so it makes sense to hide elements in certain scenarios. That being said, we have to make sure that we aren’t wasting browser resources and bandwidth by loading these elements even when they’re hidden; hence, it’s best practice to only include these elements in certain conditions.\n\nOnce again, a developer can achieve this with code; however, designers can improve page performance by communicating the conditions of when and where certain elements should and shouldn’t exist.\n\nAs mentioned earlier, some devices display more pixels per inch, which can result in images becoming blurry if they’re not exported at the correct resolution. Depending on the resolution of the device, some will require images at double (@2x), triple (@3x), and even quadruple (@4x) the size. Web browsers now support the element, which chooses the correct image resolution depending on the device.\n\nDesigners crafting responsive websites can tailor images to the correct device by making sure to export at all the resolutions used on today’s devices (if you’re unsure, ask your developer—communication is key when it comes to responsive web design).\n\nWireframing can help to iron out the creases early in the design process, and this works well when taking a mobile-first approach to responsive web design. Perhaps there’s a responsive breakpoint that needs some extra attention, or maybe there’s a concept that just isn’t effective in terms of mobile responsiveness. It’s better to find the bumps in the road sooner rather than later (i.e., before adding visual aesthetics).\n\nModern design tools like Adobe XD, Marvel, and InVision enable teams to test prototypes on real devices, discuss feedback in context, and generally collaborate as a team until the layout works in all scenarios.\n\nEmploying a lean UX workflow where responsive design is driven by internal testing and feedback will ensure that the user experience works seamlessly across all platforms and screen resolutions before being presented to a real user for the first time."
    },
    {
        "link": "https://stackoverflow.com/questions/17162736/how-to-make-footer-responsive-through-css",
        "document": "I want to make footer responsive through CSS. I've tried it through but it's not working. How can i make it responsive?\n\nHere the link to site:"
    },
    {
        "link": "https://dhiwise.com/post/a-beginners-guide-to-creating-an-effective-html-footer",
        "document": "Majorly busy listening to songs, scrolling Reddit and reading other’s articles. And yeah, also a senior frontend engineer with 4+ years of experience, crafting performant and stunning UI using React, Next.js, JavaScript, TailwindCSS, TypeScript.\n\nCreating an effective HTML footer might not be the first thing that comes to mind when designing a website, but it's a crucial element that can significantly enhance user experience and site navigation.\n\nThis blog will walk you through the essentials of crafting a footer that not only looks good but also serves its purpose efficiently on your web page.\n\nAn HTML footer is a dedicated section at the bottom of a web page or within a section of content that typically contains information like authorship, copyright details, contact information, and links to related documents. It's marked up with the tag in an HTML document, signaling to browsers and developers alike that this content plays a supporting, yet significant, role on the page.\n\nFooters are not just about closing a page gracefully; they're about offering users a roadmap to essential information and other areas of your website. They help organize content, making your website look more professional and easier to navigate. A well-thought-out footer enhances the user experience by providing additional resources and contact information, making your site more user-friendly.\n\nTo get started, you'll need to open your HTML file or create a new one. Here's a simple example of how to implement a footer in your HTML code:\n\nThis code snippet places a basic footer at the bottom of your web page, containing copyright information.\n\nThe footer can house a variety of content, including but not limited to:\n\nRemember, the footer is an integral part of your site's structure, offering a space to provide valuable information to your users.\n\nStyling your footer with CSS can transform it from a simple text block into a visually appealing and functional part of your website. Here's how you can use internal CSS to style your footer:\n\nThis CSS code will give your footer a dark background, center the text, and apply some padding for spacing.\n\nFor larger projects, external CSS is more efficient. You can link a CSS file to your HTML document using the tag in the section. Here's an example of how to style your footer in an external stylesheet:\n\nThen, apply the class to your footer in the HTML file:\n\nAlignment is key to a neat-looking footer. You can use the text-align property to align your footer content to the left, right, or center. For a centered alignment, your CSS would include:\n\nThis will ensure that all content within your footer is neatly centered, making for a cleaner look.\n\nWhen designing your footer, keep these best practices in mind:\n• Keep the design simple and clean.\n• Use a clear and readable font size and family.\n• Ensure the footer is responsive for different devices.\n\nTo make your footer stand out, consider adding a background image or color. This can be done with the background-image or background-color property in your CSS code. For a solid color background:\n\nResponsive design is non-negotiable in today's mobile-first world. Use media queries in your CSS to ensure your footer looks great on all devices. Here's a basic example:\n\nThis media query ensures that the footer content is centered on devices with a width of 600px or less.\n\nIf your footer content isn't aligning as expected, double-check your CSS text-align and margin properties. Adjusting these can often resolve alignment issues, ensuring your footer looks polished across all browsers.\n\nCreating an effective HTML footer is about more than just adding a block of text at the bottom of your web pages. It's an opportunity to enhance user experience, provide valuable information, and improve site navigation.\n\nBy following the guidelines outlined in this guide, you can design a footer that complements your website's design and functionality. Remember, a well-designed footer is a testament to a well-thought-out web page.\n\nShort on time? Speed things up with DhiWise!\n\nTired of manually designing screens, coding on weekends, and technical debt? Let DhiWise handle it for you!\n\nYou can build an e-commerce store, healthcare app, portfolio, blogging website, social media or admin panel right away. Use our library of 40+ pre-built free templates to create your first application using DhiWise."
    },
    {
        "link": "https://css-tricks.com/snippets/css/a-guide-to-flexbox",
        "document": "The (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”). The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow. Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.). Note: Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.\n\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”). If “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout. Items will be laid out following either the (from to ) or the cross axis (from to ).\n• main axis – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the property (see below).\n• main-start | main-end – The flex items are placed within the container starting from main-start and going to main-end.\n• main size – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.\n• cross axis – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.\n• cross-start | cross-end – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.\n• cross size – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.\n\nThis defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children. Note that CSS columns have no effect on a flex container. \n\nThis establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.\n• (default): left to right in ; right to left in\n• : right to left in ; left to right in\n• : same as but top to bottom\n• : same as but bottom to top By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.\n• (default): all flex items will be on one line\n• : flex items will wrap onto multiple lines, from top to bottom.\n• : flex items will wrap onto multiple lines from bottom to top. There are some visual demos of here. This is a shorthand for the and properties, which together define the flex container’s main and cross axes. The default value is . \n\nThis defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.\n• (default): items are packed toward the start of the flex-direction.\n• : items are packed toward the end of the flex-direction.\n• : items are packed toward the start of the direction.\n• : items are packed toward the end of the direction.\n• : items are packed toward left edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are packed toward right edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are centered along the line\n• : items are evenly distributed in the line; first item is on the start line, last item on the end line\n• : items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.\n• : items are distributed so that the spacing between any two items (and the space to the edges) is equal. Note that that browser support for these values is nuanced. For example, never got support from some versions of Edge, and start/end/left/right aren’t in Chrome yet. MDN has detailed charts. The safest values are , , and . There are also two additional keywords you can pair with these values: and . Using ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”). \n\nThis defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the version for the cross-axis (perpendicular to the main-axis).\n• / / : items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the rules or the rules.\n• / / : items are placed at the end of the cross axis. The difference again is subtle and is about respecting rules vs. rules.\n• : items are centered in the cross-axis\n• : items are aligned such as their baselines align The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. \n\nThis aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how aligns individual items within the main-axis. Note: This property only takes effect on multi-line flexible containers, where is set to either or ). A single-line flexible container (i.e. where is set to its default value, ) will not reflect .\n• (default): items are packed in their default position as if no value was set.\n• / : items packed to the start of the container. The (more supported) honors the while honors the direction.\n• / : items packed to the end of the container. The (more support) honors the while end honors the direction.\n• : items evenly distributed; the first line is at the start of the container while the last one is at the end\n• : items evenly distributed with equal space around each line\n• : items are evenly distributed with equal space around them\n• : lines stretch to take up the remaining space The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. The property explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. The behavior could be thought of as a minimum gutter, as if the gutter is bigger somehow (because of something like ) then the gap will only take effect if that space would end up smaller. It is not exclusively for flexbox, works in grid and multi-column layout as well. \n\nBy default, flex items are laid out in the source order. However, the property controls the order in which they appear in the flex container. Items with the same revert to source order. \n\nThis defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. If all items have set to , the remaining space in the container will be distributed equally to all children. If one of the children has a value of , that child would take up twice as much of the space as either one of the others (or it will try, at least). This defines the ability for a flex item to shrink if necessary. This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The keyword means “look at my width or height property” (which was temporarily done by the keyword until deprecated). The keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren , , and do. If set to , the extra space around content isn’t factored in. If set to , the extra space is distributed based on its value. See this graphic. This is the shorthand for and combined. The second and third parameters ( and ) are optional. The default is , but if you set it with a single number value, like , that changes the to 0%, so it’s like setting . It is recommended that you use this shorthand property rather than set the individual properties. The shorthand sets the other values intelligently. \n\nThis allows the default alignment (or the one specified by ) to be overridden for individual flex items. Please see the explanation to understand the available values. Note that , and have no effect on a flex item.\n\nFlexbox requires some vendor prefixing to support the most browsers possible. It doesn’t just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an “old”, “tweener”, and “new” versions. Perhaps the best way to handle this is to write in the new (and final) syntax and run your CSS through Autoprefixer, which handles the fallbacks very well. Alternatively, here’s a Sass to help with some of the prefixing, which also gives you an idea of what kind of things need to be done:\n\nLet’s start with a very very simple example, solving an almost daily problem: perfect centering. It couldn’t be any simpler if you use flexbox. .parent { display: flex; height: 300px; /* Or whatever */ } .child { width: 100px; /* Or whatever */ height: 100px; /* Or whatever */ margin: auto; /* Magic! */ } This relies on the fact a margin set to in a flex container absorb extra space. So setting a margin of will make the item perfectly centered in both axes. Now let’s use some more properties. Consider a list of 6 items, all with fixed dimensions, but can be auto-sized. We want them to be evenly distributed on the horizontal axis so that when we resize the browser, everything scales nicely, and without media queries. .flex-container { /* We first create a flex layout context */ display: flex; /* Then we define the flow direction and if we allow the items to wrap * Remember this is the same as: * flex-direction: row; * flex-wrap: wrap; */ flex-flow: row wrap; /* Then we define how is distributed the remaining space */ justify-content: space-around; } Done. Everything else is just some styling concern. Below is a pen featuring this example. Be sure to go to CodePen and try resizing your windows to see what happens. Let’s try something else. Imagine we have a right-aligned navigation element on the very top of our website, but we want it to be centered on medium-sized screens and single-columned on small devices. Easy enough. /* Large */ .navigation { display: flex; flex-flow: row wrap; /* This aligns items to the end line on main-axis */ justify-content: flex-end; } /* Medium screens */ @media all and (max-width: 800px) { .navigation { /* When on medium sized screens, we center it by evenly distributing empty space around items */ justify-content: space-around; } } /* Small screens */ @media all and (max-width: 500px) { .navigation { /* On small screens, we are no longer using row direction but column */ flex-direction: column; } } Let’s try something even better by playing with flex items flexibility! What about a mobile-first 3-columns layout with full-width header and footer. And independent from source order. .wrapper { display: flex; flex-flow: row wrap; } /* We tell all items to be 100% width, via flex-basis */ .wrapper > * { flex: 1 100%; } /* We rely on source order for mobile-first approach * in this case: * 1. header * 2. article * 3. aside 1 * 4. aside 2 * 5. footer */ /* Medium screens */ @media all and (min-width: 600px) { /* We tell both sidebars to share a row */ .aside { flex: 1 auto; } } /* Large screens */ @media all and (min-width: 800px) { /* We invert order of first sidebar and main * And tell the main element to take twice as much width as the other two sidebars */ .main { flex: 3 0px; } .aside-1 { order: 1; } .main { order: 2; } .aside-2 { order: 3; } .footer { order: 4; } }"
    },
    {
        "link": "https://blog.pixelfreestudio.com/how-to-use-flexbox-for-creating-sticky-headers-and-footers",
        "document": "Sticky headers and footers have become a staple in web design, providing users with constant access to navigation menus, contact information, and other critical links. These elements enhance the user experience by making the website easier to navigate. Flexbox, or the Flexible Box Layout, is a CSS layout model that provides an efficient way to arrange and align items within a container. It is particularly useful for creating sticky headers and footers due to its flexibility and ease of use.\n\nBefore we dive into creating sticky headers and footers, it’s important to understand the basics of Flexbox. Flexbox is designed to distribute space and align items within a container, even when their sizes are unknown or dynamic. This makes it perfect for responsive design.\n\nTo start using Flexbox, you need to define a flex container by setting the property to . This container will then manage its child elements, called flex items.\n\nThe property defines the direction in which the flex items are placed in the flex container. Common values are for horizontal alignment and for vertical alignment. For sticky headers and footers, a column layout is often used.\n\nFlexbox properties like , , and allow you to control how flex items behave within the container. determines how much a flex item will grow relative to the rest of the items in the container.\n\nallows items to shrink if needed, and defines the initial size of a flex item.\n\nA sticky header remains at the top of the page as the user scrolls down. This is particularly useful for keeping navigation menus or branding visible at all times.\n\nStart by creating the basic HTML structure for your page, including a header, main content area, and footer.\n\nNext, apply Flexbox styling to the container and header. Set the container to display flex and the header to have a fixed position at the top.\n\nThe property combined with ensures that the header sticks to the top of the viewport. The property ensures that the header stays above other elements.\n\nEnsure your sticky header is responsive by using media queries to adjust the styling for different screen sizes.\n\nA sticky footer remains at the bottom of the page, ensuring that important links or information are always accessible. Unlike the header, which uses , the footer typically uses Flexbox properties to ensure it stays at the bottom of the viewport.\n\nThe HTML structure for a sticky footer is similar to that of a sticky header. The footer should be a direct child of the flex container.\n\nApply Flexbox styling to ensure the footer stays at the bottom of the page. Use the property to make the main content area expand to fill the available space.\n\nIn this setup, the main content will expand to take up any remaining space, pushing the footer to the bottom of the page.\n\nTo ensure the layout takes up the full height of the viewport, set the container to have a minimum height of 100vh. This ensures that the container always fills the viewport, even if the content is sparse.\n\nOnce you’ve created basic sticky headers and footers, you can enhance them with additional features to improve functionality and user experience. Consider adding animations, dropdown menus, or interactive elements to make your sticky headers and footers more engaging.\n\nAnimations can make your sticky header and footer more visually appealing. Use CSS transitions to add smooth animations when the header or footer appears or disappears.\n\nAdding interactive elements like dropdown menus or search bars can make your sticky header more functional. Ensure that these elements are easily accessible and usable on all devices.\n\nEnsure that all interactive elements are fully responsive. Use media queries to adjust the layout and appearance of these elements on different screen sizes.\n\nTo further enhance your sticky headers and footers, consider implementing advanced Flexbox techniques. These techniques can help you create more complex layouts and ensure that your design is both flexible and accessible.\n\nFlexbox provides a range of alignment properties that can help you fine-tune the positioning of your sticky headers and footers. Use , , and to control the alignment of flex items within their container.\n\nUsing Flexbox for Sticky Elements within the Content\n\nIn addition to sticky headers and footers, you can use Flexbox to create sticky elements within the main content area. For example, you might want to create a sidebar that remains visible as the user scrolls.\n\nFor more complex layouts, you can combine Flexbox with other CSS techniques such as CSS Grid. This combination allows you to create highly flexible and responsive designs.\n\nWhen creating sticky headers and footers, it is crucial to ensure that your design is accessible to all users. Accessibility should be a primary consideration in your design process, ensuring that users with disabilities can navigate and interact with your website effectively.\n\nEnsure that all interactive elements within your sticky headers and footers are accessible via keyboard navigation. Use proper focus styles to indicate which element is currently selected.\n\nUse ARIA (Accessible Rich Internet Applications) roles and attributes to provide additional context for screen readers. This helps users with visual impairments understand the structure and functionality of your page.\n\nEnsure that your sticky headers and footers have sufficient contrast and readability. This is especially important for users with visual impairments. Follow WCAG (Web Content Accessibility Guidelines) to ensure adequate color contrast.\n\nTesting is a critical part of the development process. Regularly test your sticky headers and footers across different devices and browsers to ensure consistent performance and usability.\n\nEnsure that your sticky headers and footers work across all major browsers, including Chrome, Firefox, Safari, and Edge. Use browser developer tools to simulate different devices and screen sizes.\n\nCheck the performance of your sticky headers and footers to ensure they do not negatively impact the overall speed of your website. Optimize your CSS and minimize the use of heavy animations or effects that could slow down your site.\n\nConduct user testing to gather feedback on the usability and accessibility of your sticky headers and footers. This can help you identify any issues that you might have missed and make necessary adjustments.\n\nSeeing how sticky headers and footers are implemented in real-world scenarios can provide valuable insights and inspiration. Let’s look at a few examples of popular websites that effectively use sticky headers and footers.\n\nE-commerce sites often use sticky headers to keep the shopping cart and navigation menu visible at all times. This ensures that users can easily access their cart and navigate to different product categories without scrolling back to the top.\n\nBlogs can benefit from sticky headers to keep the navigation and search bar accessible. A sticky footer can be used to display related posts or a subscription form.\n\nCorporate websites often use sticky headers for navigation and contact information. A sticky footer can include important links, company details, and social media icons.\n\nCommon Pitfalls and How to Avoid Them\n\nCreating sticky headers and footers can sometimes lead to common pitfalls that can affect the functionality and user experience. Here are a few pitfalls to watch out for and how to avoid them.\n\nOne common issue with sticky headers and footers is content overlapping when the user scrolls. This can be avoided by ensuring that your sticky elements have a higher than other content and that you account for their height in your layout.\n\nSticky elements can sometimes cause performance issues, especially on pages with a lot of content. Optimize your CSS and JavaScript to minimize any potential lag. Avoid heavy animations or effects that could slow down the page.\n\nEnsure that your sticky headers and footers are accessible to all users. Test them with screen readers and keyboard navigation to ensure they are usable for people with disabilities.\n\nAs web design evolves, so do the techniques and trends for creating sticky headers and footers. Here are a few trends to watch for in the future.\n\nFuture sticky headers and footers are likely to incorporate more advanced interactivity, such as dynamic menus that adjust based on user behavior or context-aware elements that change based on the page content.\n\nWith advancements in CSS and JavaScript, expect to see more sophisticated animations in sticky headers and footers. These animations will enhance user experience without compromising performance.\n\nAs awareness of accessibility increases, future designs will focus more on ensuring that sticky headers and footers are accessible to all users. This includes better support for assistive technologies and more inclusive design practices.\n\nTo take your sticky headers and footers to the next level, consider adding advanced customization options. This can include dynamic content, theme switching, and user personalization. These features can greatly enhance the user experience and make your site stand out.\n\nDynamic content in sticky headers and footers can provide users with relevant information as they navigate your site. For instance, a sticky header could display the current section or page the user is viewing, while a sticky footer could show real-time data, such as recent updates or social media feeds.\n\nAllowing users to switch themes (e.g., light and dark modes) can make your website more user-friendly and accessible. This can be easily implemented with Flexbox for a smooth and responsive layout.\n\nPersonalizing sticky headers and footers based on user preferences or behaviors can enhance engagement. For example, you can show a personalized greeting in the header or display recently viewed items in the footer.\n\nWhile CSS and Flexbox provide powerful layout capabilities, JavaScript can add interactivity and dynamic functionality to your sticky headers and footers. This combination can create a seamless and engaging user experience.\n\nUse JavaScript to change the appearance or behavior of sticky headers and footers based on scroll position. For instance, you could change the header’s background color as the user scrolls down the page.\n\nJavaScript can help create responsive navigation menus that toggle visibility on smaller screens. This ensures that your sticky header remains functional and accessible on all devices.\n\nPerformance is a crucial aspect of web design, especially when dealing with sticky headers and footers. Poor performance can lead to a sluggish user experience, particularly on mobile devices.\n\nRepaints and reflows can be costly in terms of performance. Minimize these by avoiding unnecessary changes to the DOM and using efficient CSS properties. For example, prefer and over properties that trigger layout changes.\n\nLazy loading ensures that content is only loaded when it is needed, reducing initial load times and improving performance. This can be particularly useful for images and media within sticky headers and footers.\n\nThe property hints to the browser about which properties are likely to change, allowing it to optimize for these changes.\n\nWhen adding interactive elements to your sticky headers and footers, it’s important to consider security to protect against vulnerabilities such as XSS (Cross-Site Scripting).\n\nAlways sanitize user inputs to prevent malicious code from being executed. Use libraries or built-in functions to sanitize inputs in forms or search bars.\n\nEnsure your site uses HTTPS to encrypt data between the user and the server, protecting sensitive information transmitted via sticky headers and footers.\n\nMonitoring how users interact with your sticky headers and footers can provide valuable insights. Use analytics tools to track user behavior and make data-driven improvements.\n\nIntegrate analytics tools like Google Analytics to track clicks, interactions, and user navigation patterns. Set up custom events to measure the effectiveness of sticky elements.\n\nCollect user feedback to understand their experience with your sticky headers and footers. Use surveys, feedback forms, or direct user testing to gather insights.\n\nUsing Flexbox to create sticky headers and footers is a powerful way to enhance the user experience on your website. By understanding the basics of Flexbox, implementing advanced techniques, and ensuring accessibility, you can create effective and user-friendly designs. Remember to test your designs thoroughly and stay updated on the latest trends and best practices in web design. Sticky headers and footers not only improve navigation but also make your website more engaging and accessible to all users.\n• Best Practices for Creating and Using Git Tags\n• How to Use Git for Managing Website Deployments\n• The Role of Version Control in Code Reviews\n• How to Integrate Git with Project Management Tools\n• Best Practices for Using Pull Requests in GitHub"
    },
    {
        "link": "https://stackoverflow.com/questions/23324844/css-flexbox-header-main-footer-layout-main-part-collapsing-in-the-middle",
        "document": "So I want my header to be say .. 15%, my footer 5% and my main part taking the rest of the space in the middle. I can do it with position fixed and all that but I am trying to figure out the flex boxes. So all my attempts don't work. According to this article: Flexbox layout I should have it as simple as this:\n\n... but this just does not work. I tried changing sizes from pixels to percentage - no luck. The middle part just collapses and it does not stretch.\n\nI also tried few other examples within the first page of Google hits. Nothing works.\n\nWhat am I doing wrong. How can I achieve the above with flex boxes?\n\nP.S. Almost forgot. My browser is Chromium 34.0.1847.116 (260972)"
    },
    {
        "link": "https://stackoverflow.com/questions/64437979/creating-a-footer-using-flexbox",
        "document": "A div was added in order to group each list in a different container. Making the s the only flex items.\n\nOn CSS, all you have to do is apply on the footer and . will align the list's containers depending on the attribute (space-between, space-around, center, etc) used, in this case , which will assign an equal space on each side of the flex items. You could also use to separate the container. After having all the content arranged, we only have to remove the padding and default style from the s"
    },
    {
        "link": "https://ishadeed.com/article/website-headers-flexbox",
        "document": "When I first learned the basics of HTML & CSS in 2014, building a website header was one of those scary and difficult tasks for me. Flexbox was still new and we were forced to use old methods like and the clearfix technique. Today, the scene is completely different. Flexbox is widely supported and that opens up a lot of possibilities for us.\n\nSome might argue that it’s easy nowadays to make a website header as we have modern CSS layout techniques. That’s not the case as there are some interesting challenges to tackle. I will try to highlight some of them.\n\nIn this article, I will explain how we can use CSS flexbox to successfully build a website header, and show you some of the important tips and tricks. In the end, there will be a project that was made especially for this article. Keep reading till the end as you’re in for a treat!\n\nThis article assumes that you have basic knowledge in flexbox. If you’re interested, I wrote an introduction article about flexbox on my blog.\n\nFirst, I need to make sure that we both are on the same page. A website header is one of the first things that the user sees when visiting a website. Usually, it contains the logo or website name, with the navigation links. Consider the following figure:\n\nRegardless of the visual design for a header, the key elements are the logo and navigation.\n\nWhen flexbox is applied to the header element, it will make all the child items in the same line. Then, all you need is to apply to distribute the spacing between them.\n\nIt’s easy, right? For such a use-case, yes it is. It can get more complex than that.\n\nThe header above doesn’t have an inner wrapper that contains its logo and navigation elements. This can cause problems on large screens.\n\nNotice how the first header is too wide because it doesn’t have an inner wrapper. While the second one looks much better. For that reason, the HTML needs to be tweaked as below.\n\nAnd the flexbox should be moved to the element.\n\nThis will act as a defensive CSS method. When the screen is small, there is a possibility of horizontal scrolling. See the figure below:\n\nWithout being set, there will be a horizontal scrolling. Make sure to include it!\n\nWhat I like about using flexbox is that it makes it easy to handle multiple variations of a header design. Based on the previous header design, I explored some options for the header element like adding a button, search input, and changing the order of the child items.\n\nLet’s explore how to implement them with flexbox.\n\nI added a button next to the navigation links. How this should be handled? Should we add it inside the navigation as a link? Or it should be separated from the navigation? I would go for this.\n\nIn that case, the spacing can’t be done with . Instead, I will use for navigation. It will push it and the button to the far right.\n\nSeparating the navigation and the track button is useful for mobile, as we will need to keep the button and show a mobile toggle button next to it.\n\nSimilar to the first variation, this one has a search input that is taking the remaining available space. With flexbox, this can be achieved by using the property.\n\nAnd you are done! Now, the search input will fill the available space between the brand and the navigation. However, this has some limitations. On smaller viewports, the header will look like the below.\n\nThe search input width shouldn’t be less than that, as it will be hard to type and see the full text. See the below for some solutions:\n\nI like the second solution better as it doesn’t hide the navigation very early. Generally speaking, I try to avoid hiding an element if it doesn’t affect the layout.\n\nFor this one, the HTML markup is the same, but the visual order of the header items is different. How we can achieve that? You might be thinking that using can solve this, right?\n\nThe solution for this is to give each child item a . This will distribute the available space between them.\n\nSomething weird happened to the button element. It became too big because of . The only way to fix this is by wrapping it into another element.\n\nWith that, we can center both the logo and the button below.\n\nKeep in mind that this approach can easily fail in case more navigation links were added. You need to make sure that the number of navigation links won’t exceed a specific limit. Here is an example with the logo being off the center.\n\nAs you see in the figure above, the logo is not centered. So that’s something to keep in mind to avoid such an unexpected issue.\n\nNow that I explored some different header designs and how to build them, let’s move on to some important concepts that can help us while building a header.\n\nUseful tips for building a header with Flexbox\n\nI like to use in case an element needs to take the full width on mobile, such as important navigation that can’t be hidden.\n\nFrom the mockup above, it might sound straightforward. In reality, it’s not. Usually, a header might have an inner spacing (padding), and when we force an item to take the full width, it won’t happen unless the padding is cleared. However, it’s not practical to remove the padding as it will affect other elements in the design.\n\nHere is a workaround of fixing this:\n• Change its in case it’s needed. Sometimes, there might be other elements and we want to make sure that the navigation is the last one.\n• Add the negative with a value equal to the header padding. This will make the navigation take the full width.\n• Add to the navigation, this will add some breathing space.\n• And finally, I used to center the navigation items (Not important).\n\nAnd here is a visual walkthrough of the process.\n\nWith the flex property being supported in Chrome and Firefox, it’s now easier than ever to add spacing between flex items. Consider the following header:\n\nTo add the highlighted spacing, all you need is adding to the flex parent. Without the , we will need to the spacing in the old way.\n\nBeware that you need to make a fallback when using the property. I wrote a detailed article on that topic.\n\nThat’s all for this article. Let me show you the thing I made!\n\nI got the idea of designing and implementing a blueprint website header components. The reason is that I can pick one and use it for a new project pretty quickly. I made 17 headers so far and aiming for more in the coming weeks. While working on them, I tried to focus on the following:\n• Used Sass so they can be easily edited (Still need to do some refactoring here and there)\n• Accessibility (Please open an issue if you spot something incorrectly)\n\nCheck them out on headers-css.vercel.app or Github.\n\nI’m excited to let you know that I’m writing an ebook about Debugging CSS.\n\nIf you’re interested, head over to debuggingcss.com and subscribe for updates about the book."
    }
]