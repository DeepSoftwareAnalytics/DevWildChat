[
    {
        "link": "https://lucidchart.com/pages/uml-activity-diagram",
        "document": "UML is extremely useful for visualizing and documenting software systems, but the terminology can be somewhat overwhelming for someone unfamiliar with UML. An activity diagram is essentially a flowchart that shows activities performed by a system. If you're new to UML diagramming software, this guide will help you get started.\n\nWhat is an activity diagram? The Unified Modeling Language includes several subsets of diagrams, including structure diagrams, interaction diagrams, and behavior diagrams. Activity diagrams, along with use case and state machine diagrams, are considered behavior diagrams because they describe what must happen in the system being modeled. Stakeholders have many issues to manage, so it's important to communicate with clarity and brevity. Activity diagrams help people on the business and development sides of an organization come together to understand the same process and behavior. You'll use a set of specialized symbols—including those used for starting, ending, merging, or receiving steps in the flow—to make an activity diagram, which we’ll cover in more depth within this activity diagram guide.\n\nBefore you begin making an activity diagram, you should first understand its makeup. Some of the most common components of an activity diagram include:\n• Action: A step in the activity wherein the users or software perform a given task. In Lucidchart, actions are symbolized with round-edged rectangles.\n• Decision node: A conditional branch in the flow that is represented by a diamond. It includes a single input and two or more outputs.\n• Control flows: Another name for the connectors that show the flow between steps in the diagram.\n• Start node: Symbolizes the beginning of the activity. The start node is represented by a black circle.\n• End node: Represents the final step in the activity. The end node is represented by an outlined black circle.\n\nDo you want to create your own UML diagram? Try Lucidchart. It's fast, easy, and totally free. Create a UML Diagram These activity diagram shapes and symbols are some of the most common types you'll find in UML diagrams. Represents the beginning of a process or workflow in an activity diagram. It can be used by itself or with a note symbol that explains the starting point. Indicates the activities that make up a modeled process. These symbols, which include short descriptions within the shape, are the main building blocks of an activity diagram. Shows the directional flow, or control flow, of the activity. An incoming arrow starts a step of an activity; once the step is completed, the flow continues with the outgoing arrow. Combines two concurrent activities and re-introduces them to a flow where only one activity occurs at a time. Represented with a thick vertical or horizontal line. Splits a single activity flow into two concurrent activities. Symbolized with multiple arrowed lines from a join. Represents a decision and always has at least two paths branching out with condition text to allow users to view options. This symbol represents the branching or merging of various flows with the symbol acting as a frame or container. Allows the diagram creators or collaborators to communicate additional messages that don't fit within the diagram itself. Leave notes for added clarity and specification. Indicates that a signal is being sent to a receiving activity. Demonstrates the acceptance of an event. After the event is received, the flow that comes from this action is completed. Represents a transition that invokes the last active state. Allows the creator to model a repetitive sequence within the option loop symbol. Represents the end of a specific process flow. This symbol shouldn’t represent the end of all flows in an activity; in that instance, you would use the end symbol. The flow final symbol should be placed at the end of a process in a single activity flow. Placed next to a decision marker to let you know under what condition an activity flow should split off in that direction. Marks the end state of an activity and represents the completion of all flows of a process.\n\nActivity diagrams map out process flows in a way that's easy to understand. Consider the two examples below when it comes to creating UML activity diagrams. Many of the activities people want to accomplish online—checking email, managing finances, ordering clothes, etc.—require them to log into a website. This activity diagram shows the process of logging into a website, from entering a username and password to successfully logging in to the system. It uses different container shapes for activities, decisions, and notes. Lucidchart is the ideal tool for creating any kind of UML flowchart, whether it’s an activity diagram, a use case diagram, or a component diagram. Lucidchart offers in-editor collaboration tools and instant web publishing so you can demonstrate the functionality of your system to others. Click here to use this template This diagram shows the process of either withdrawing money from or depositing money into a bank account. An advantage of representing the workflow visually in UML is the ability to show withdrawals and deposits on one chart. When you use Lucidchart to build an activity diagram, you can customize your templates with professional-grade typefaces and colors. Never worry about losing your documents with secure, cloud-based storage. Click here to use this template\n\nHow to make an activity diagram In Lucidchart, creating an activity diagram from scratch is surprisingly simple. Follow these steps:\n• Click \"Shapes\" to the left of the editor to open the Shape Library Manager. Check \"UML\" to add all of the UML shape libraries (or just \"UML State/Activity\"), and click \"Save.\"\n• From the shape libraries you just added, drag the symbol you want from the toolbox to the canvas.\n• Then model the process flow by drawing lines between shapes. In Lucidchart, it's easy to resize and style any element. You can even import SVG shapes and Visio files for a custom solution. Dive deeper into this guide on how to draw an activity diagram in UML for additional insight. If you'd like to learn more about UML, check out our tutorial, \"What Is UML.\""
    },
    {
        "link": "https://geeksforgeeks.org/unified-modeling-language-uml-activity-diagrams",
        "document": "Activity diagrams are an essential part of the Unified Modeling Language (UML) that help visualize workflows, processes, or activities within a system. They depict how different actions are connected and how a system moves from one state to another. By offering a clear picture of both simple and complex workflows, activity diagrams make it easier for developers and stakeholders to understand how various elements interact in a system.\n\nWhat is an Activity Diagram?\n\nActivity diagrams show the steps involved in how a system works, helping us understand the flow of control. They display the order in which activities happen and whether they occur one after the other (sequential) or at the same time (concurrent). These diagrams help explain what triggers certain actions or events in a system.\n• None An activity diagram starts from an initial point and ends at a final point, showing different decision paths along the way.\n• None They are often used in business and process modeling to show how a system behaves over time.\n\nWhen to use Activity Diagram?\n\nActivity diagrams are useful in several scenarios, especially when you need to visually represent the flow of processes or behaviors in a system. Here are key situations when you should use an activity diagram:\n• Modeling Workflows or Processes : When you need to map out a business process, workflow, or the steps involved in a use case, activity diagrams help visualize the flow of activities.\n• Concurrent or Parallel Processing : If your system or process involves activities happening simultaneously, an activity diagram can clearly show the parallel flow of tasks.\n• Understanding the Dynamic Behavior : When it’s essential to depict how a system changes over time and moves between different states based on events or conditions, activity diagrams are effective.\n• Clarifying Complex Logic : Use an activity diagram to simplify complex decision-making processes with branching paths and different outcomes.\n• System Design and Analysis : During the design phase of a software system, activity diagrams help developers and stakeholders understand how different parts of the system interact dynamically.\n• Describing Use Cases : They are useful for illustrating the flow of control within a use case, showing how various components of the system interact during its execution.\n\nThe starting state before an activity takes place is depicted using the initial state.\n\nA process can have only one initial state unless we are depicting nested activities. We use a black filled circle to depict the initial state of a system. For objects, this is the state when they are instantiated. The Initial State from the UML Activity Diagram marks the entry point and the initial Activity State.\n\nAn activity represents execution of an action on objects or by objects. We represent an activity using a rectangle with rounded corners. Basically any action or event that takes place is represented using an activity.\n\nAction flows or Control flows are also referred to as paths and edges. They are used to show the transition from one activity state to another activity state.\n\nAn activity state can have multiple incoming and outgoing action flows. We use a line with an arrow head to depict a Control Flow. If there is a constraint to be adhered to while making the transition it is mentioned on the arrow.\n\nWhen we need to make a decision before deciding the flow of control, we use the decision node. The outgoing arrows from the decision node can be labelled with conditions or guard expressions. It always includes two or more output arrows.\n\nA Guard refers to a statement written next to a decision node on an arrow sometimes within square brackets.\n\nThe statement must be true for the control to shift along a particular direction. Guards help us know the constraints and conditions which determine the flow of a process.\n\nFork nodes are used to support concurrent activities. When we use a fork node when both the activities get executed concurrently i.e. no decision is made before splitting the activity into two parts. Both parts need to be executed in case of a fork statement. We use a rounded solid rectangular bar to represent a Fork notation with incoming arrow from the parent activity state and outgoing arrows towards the newly created activities.\n\nJoin nodes are used to support concurrent activities converging into one. For join notations we have two or more incoming edges and one outgoing edge.\n\nScenarios arise when activities which are not being executed concurrently have to be merged. We use the merge notation for such scenarios. We can merge two or more activities into one if the control proceeds onto the next activity irrespective of the path chosen.\n\nWe use Swimlanes for grouping related activities in one column. Swimlanes group related activities into one column or one row. Swimlanes can be vertical and horizontal. Swimlanes are used to add modularity to the activity diagram. It is not mandatory to use swimlanes. They usually give more clarity to the activity diagram. It’s similar to creating a function in a program. It’s not mandatory to do so, but, it is a recommended practice.\n\nWe use a rectangular column to represent a swimlane as shown in the figure above.\n\nThis refers to an event that stops the flow for a time; an hourglass depicts it. We can have a scenario where an event takes some time to completed.\n\nThe state which the system reaches when a particular process or activity ends is known as a Final State or End State. We use a filled circle within a circle notation to represent the final state in a state machine diagram. A system or a process can have multiple final states.\n\nHow to Draw an Activity Diagram in UML?\n\nBelow are the steps of how to draw the Activity Diagram in UML:\n• None This is like setting the starting point and ending point of a journey.\n• None Identify where your process begins (initial state) and where it concludes (final states).\n• None For example, if you are modelling a process for making a cup of tea, the initial state could be “No tea prepared,” and the final state could be “Tea ready.”\n• None Think of the steps or actions required to go from the starting point to the ending point.\n• None These are the activities or tasks that need to be performed.\n• None Continuing with the tea-making , intermediate activities could include “Boil water,” “Pour tea into a cup”.\n• None Consider the conditions or circumstances that might influence the flow of your process.\n• None These are the factors that determine when you move from one activity to another.\n• None Using the tea-making scenario, a condition could be “Water is boiled,” which triggers the transition to the next activity.\n\nStep 4. Draw the Diagram with Appropriate Notations:\n\nNow, represent the identified states, activities, and conditions visually using the appropriate symbols and notations in an activity diagram. This diagram serves as a visual map of your process, showing the flow from one state to another.\n\nHere’s an example of an activity diagram that shows the process of making an online purchase:\n• None Select products and add them to the cart.\n• \n• None If the payment is successful, the order is confirmed, and a receipt is generated.\n• None If the payment fails, the user is prompted to try again.\n\nWhat are the Differences between an Activity diagram and a Flowchart?\n\nAn activity diagram is very similar to a flowchart. So let us understand if activity diagrams or flowcharts are any different.\n\nAn algorithm is like a set of clear instructions to solve a problem, and a flowchart is a picture that shows those instructions.\n• None When we’re writing computer programs, a flowchart helps us map out the steps of the algorithm to solve the problem.\n• None Non programmers use Flow charts to model workflows.\n• None We can call a flowchart a primitive version of an activity diagram.\n• None Business processes where decision making is involved is expressed using a flow chart.\n\nDo we need to use both the diagrams and the textual documentation?\n\nLet’s understand this with the help of an example:\n• None Different individuals have different preferences in which they understand something.\n• None To understand a concept, some people might prefer a written tutorial with images while others would prefer a video lecture.\n• None So we generally use both the diagram and the textual documentation to make our system description as clear as possible.\n\nIn conclusion, Activity Diagrams serve as invaluable tools in system design and analysis, offering a visual representation of dynamic processes within organizations. They are widely utilized to model business processes, illustrate user interactions, and guide software system design. By providing a clear and concise overview of activities, decision points, and interactions, activity diagrams enhance communication among project stakeholders and contribute to effective documentation."
    },
    {
        "link": "https://researchgate.net/figure/UML-Activity-Diagram-Structure-diagram-showing-the-step-by-step-process-computed-by_fig3_328876514",
        "document": ""
    },
    {
        "link": "https://archimetric.com/comprehensive-guide-to-uml-activity-diagrams-with-examples",
        "document": "UML (Unified Modeling Language) Activity Diagrams are essential tools for modeling dynamic behaviors of a system. They visually represent workflows of stepwise activities and actions, making complex processes easier to understand and communicate. This guide will walk you through the fundamentals of UML Activity Diagrams, provide practical examples using PlantUML, and highlight the benefits of learning by examples.\n• Activities: These are the primary components of an Activity Diagram, representing individual steps or operations within a process.\n• Actions: These are atomic activities that cannot be further decomposed.\n• Control Flow: This indicates the sequence of activities, shown using arrows that connect activities to illustrate the order of execution.\n• Initial Node: Marks the starting point of the workflow, represented by a solid circle.\n• Final Node: Marks the ending point of the workflow, represented by a bullseye symbol (a circle within a circle).\n• Decision Node: A point where the flow branches based on a condition, represented by a diamond shape.\n• Merge Node: A point where multiple flows converge back into a single flow, also represented by a diamond shape.\n• Swimlanes: Used to organize activities into groups, typically representing different roles or responsibilities. They are depicted as vertical or horizontal lanes.\n• Practical Understanding: Seeing real-world applications helps in grasping the concepts more effectively.\n• Immediate Application: Examples can be directly applied to similar scenarios, enhancing problem-solving skills.\n• Engagement: Examples make the learning process more engaging and interactive.\n• Contextual Learning: Examples provide context, helping to understand how different concepts fit together in a real-world setting.\n• The process starts with the customer placing an order.\n• The order system receives the order, processes the payment, and confirms the order.\n• The warehouse then packs and ships the order.\n• The customer inserts the card and enters the PIN.\n• The ATM verifies the PIN. If correct, the customer selects the amount and the ATM dispenses the cash. If incorrect, the ATM displays an error.\n• The student searches for a book and requests it.\n• The librarian verifies the availability. If the book is available, the librarian issues the book. If not, the librarian notifies the student.\n• The customer browses products, adds them to the cart, and proceeds to checkout.\n• The payment system processes the payment. If successful, the order is confirmed. If not, the customer is notified of the failure.\n• The warehouse prepares and ships the order.\n• The customer searches for a hotel, selects a room, and makes a booking.\n• The booking system verifies the availability. If the room is available, the booking is confirmed. If not, the customer is notified.\n• Flow of Activities: Follow the arrows to understand the sequence of activities. Each arrow represents the flow of control from one activity to the next.\n• Decision Points: At decision nodes, evaluate the condition to determine which branch to follow. This helps in understanding different scenarios based on conditions.\n• Swimlanes: Identify the roles or responsibilities associated with each swimlane. This helps in understanding who is responsible for each activity.\n• Initial and Final Nodes: The initial node indicates the starting point of the process, while the final node indicates the end point.\n• Concurrency: Look for forks and joins to understand parallel activities. Forks split the flow into concurrent activities, while joins synchronize them back into a single flow.\n\nUML Activity Diagrams are a versatile tool for modeling and understanding complex processes. By using these diagrams, you can easily create and visualize workflows, making it simpler to communicate and analyze processes. Whether you are designing a new system or documenting an existing process, Activity Diagrams provide a clear and structured way to represent dynamic behaviors. Learning by examples enhances your understanding and application of these diagrams, making you more proficient in using them for real-world scenarios.\n• How to Draw an Activity Diagram in UML?\n• How to Draw an Activity Diagram in UML? 5"
    },
    {
        "link": "https://agilemodeling.com/style/activitydiagram.htm",
        "document": ""
    },
    {
        "link": "https://mode.com/blog/python-data-visualization-libraries",
        "document": "This piece has been updated by our Technical Content Writer, Chioma Dunkley.\n\nScroll through the Python Package Index and you'll find libraries for practically every data visualization need—from GazeParser for eye movement research to pastalog for realtime visualizations of neural network training. And while many of these libraries are intensely focused on accomplishing a specific task, some can be used no matter what your field.\n\nThis list is an overview of 12 interdisciplinary Python data visualization libraries, from the well-known to the obscure. Mode Python Notebooks support five libraries on this list - matplotlib, Seaborn, Plotly, pygal, and Folium - and more than 60 others that you can explore on our Notebook support page.\n\nWe hope these lists inspire you, and if you want to add a library that's not listed, use our instructions to install additional libraries or send a note to success [at] modeanalytics [dot com].\n\nmatplotlib is the O.G. of Python data visualization libraries. Despite being over a decade old, it's still the most widely used library for plotting in the Python community. It was designed to closely resemble MATLAB, a proprietary programming language developed in the 1980s.\n\nBecause matplotlib was the first Python data visualization library, many other libraries are built on top of it or designed to work in tandem with it during analysis. Some libraries like pandas and Seaborn are “wrappers” over matplotlib. They allow you to access a number of matplotlib’s methods with less code.\n\nWhile matplotlib is good for getting a sense of the data, it's not very\n\nuseful for creating publication-quality charts quickly and easily. As Chris Moffitt points out in his overview of Python visualization tools, matplotlib “is extremely powerful but with that power comes complexity.”\n\nmatplotlib has long been criticized for its default styles, which have a distinct 1990s feel. Its current release of matplotlib 3.5.3 still reflects this style.\n\nCreated by: John D. Hunter, available in Mode Where to learn more: matplotlib.org\n\nWant to brush up on your Python skills? Check out our tutorial to learn how to analyze and visualize data using Python.\n\nSeaborn harnesses the power of matplotlib to create beautiful charts in a few lines of code. The key difference is Seaborn's default styles and color palettes, which are designed to be more aesthetically pleasing and modern. Since Seaborn is built on top of matplotlib, you'll need to know matplotlib to tweak Seaborn's defaults.\n\nCreated by: Michael Waskom, available in Mode Where to learn more: http://web.stanford.edu/~mwaskom/software/seaborn/index.html\n\nPlotnine is a python implementation of ggplot2, an R plotting system, and concepts from The Grammar of Graphics. It's a powerful visualization package that you layer components to create a complete plot. For instance, you can start with axes, then add points, then a line, a trendline, etc. As a functional port of ggplot2, R programmers familiar with ggplot2 will find Plotnine easy to transition to.\n\nPlotnine is tightly integrated with pandas, so it's best to store your data in a DataFrame when using Plotnine.\n\nCreated by: Hassan Kibirige (Check out his interview with us.) Where to learn more: https://plotnine.readthedocs.io/en/stable/index.html\n\nLike ggplot, Bokeh is based on The Grammar of Graphics, but unlike ggplot, it's native to Python, not ported over from R. Its strength lies in the ability to create interactive, web-ready plots, which can be easily output as JSON objects, HTML documents, or interactive web applications. Bokeh also supports streaming and real-time data.\n\nBokeh provides three interfaces with varying levels of control to accommodate different user types. The highest level is for creating charts quickly. It includes methods for creating common charts such as bar plots, box plots, and histograms. The middle level has the same specificity as matplotlib and allows you to control the basic building blocks of each chart (the dots in a scatter plot, for example). The lowest level is geared toward developers and software engineers. It has no pre-set defaults and requires you to define every element of the chart.\n\nCreated by: Anaconda Where to learn more: http://bokeh.pydata.org/en/latest/\n\nWant to brush up on your Python skills? Check out our tutorial to learn how to analyze and visualize data using Python.\n\nLike Bokeh and Plotly, pygal offers interactive plots that can be embedded in the web browser. Its prime differentiator is the ability to output charts as SVGs. As long as you're working with smaller datasets, SVGs will do you just fine. But if you're making charts with hundreds of thousands of data points, they'll have trouble rendering and become sluggish.\n\nSince each chart type is packaged into a method and the built-in styles are pretty, it's easy to create a nice-looking chart in a few lines of code.\n\nCreated by: Florian Mounier Where to learn more: http://www.pygal.org/en/latest/index.html\n\nYou might know Plotly as one of the best data visualization tools, but did you also know you can access its capabilities from a Python notebook? Like Bokeh, Plotly's forte is making interactive plots, but it offers some charts you won't find in most libraries, like contour plots, dendrograms, and 3D charts.\n\nCreated by: Plotly, available in Mode Where to learn more: https://plot.ly/python/\n\ngeoplotlib is a toolbox for creating maps and plotting geographical data. You can use it to create a variety of map-types, like choropleths, heatmaps, and dot density maps. You must have Pyglet (an object-oriented programming interface) installed to use geoplotlib. Nonetheless, since most Python data visualization libraries don't offer maps, it's nice to have a library dedicated solely to them.\n\nCreated by: Andrea Cuttone Where to learn more: https://github.com/andrea-cuttone/geoplotlib\n\nGleam is inspired by R's Shiny package. It allows you to turn analyses into interactive web apps using only Python scripts, so you don't have to know any other languages like HTML, CSS, or JavaScript. Gleam works with any Python data visualization library. Once you've created a plot, you can build fields on top of it so users can filter and sort data.\n\nCreated by: David Robinson Where to learn more: https://github.com/dgrtwo/gleam\n\nDealing with missing data is a pain. missingno allows you to quickly gauge the completeness of a dataset with a visual summary, instead of trudging through a table. You can filter and sort data based on completion or spot correlations with a heatmap or a dendrogram.\n\nCreated by: Aleksey Bilogur Where to learn more: https://github.com/ResidentMario/missingno\n\nLeather's creator, Christopher Groskopf, puts it best: “Leather is the Python charting library for those who need charts now and don’t care if they’re perfect.” It's designed to work with all data types and produces charts as SVGs, so you can scale them without losing image quality. Since this library is relatively new, some of the documentation is still in progress. The charts you can make are pretty basic—but that's the intention.\n\nCreated by: Christopher Groskopf Where to learn more: https://leather.readthedocs.io/en/latest/index.html\n\nLike Seaborn, Altair is a declarative visualization library that allows you to create aesthetically pleasing graphs & charts; but unlike Seaborn which is based on Matplotlib, Atair is based on Vega and Vega-Lite. It is great for creating interactive visualizations easily and quickly. Its downsides are that it doesn’t look as nice as plotly or bokeh, and some users have mentioned experiencing difficulty when arranging its components.\n\nWhere to learn more: https://altair-viz.github.io/index.html\n\nFolium is an open-source library built on the data power of python and mapping capabilities of leaflet.js (a Javascript library). It allows you to visualize geospatial data. You can build a variety of interactive maps such as choropleth maps, scatter maps, bubble maps, heatmaps, etc. One powerful element of Folium are its various plugins like Markercluser, ScrollZoomToggler, DualMap that let you wrap leaflet maps and extend its functionality.\n\nWhere to learn more: https://github.com/python-visualization/folium\n\nThere are a ton of great evaluations and overviews of Python data visualization libraries out there. Check out some of our favorites:\n\nNo coding experience? No problem. Learn Python using real-world data with our free tutorial."
    },
    {
        "link": "https://knowledgehut.com/blog/business-intelligence-and-visualization/python-data-visualization-libraries",
        "document": "Disclaimer: The content on the website and/or Platform is for informational and educational purposes only. The user of this website and/or Platform (User) should not construe any such information as legal, investment, tax, financial or any other advice. Nothing contained herein constitutes any representation, solicitation, recommendation, promotion or advertisement on behalf of upGrad and / or its Affiliates (including but not limited to its subsidiaries, associates, employees, directors, key managerial personnel, consultants, trainers, advisors).\n\nThe User is solely responsible for evaluating the merits and risks associated with use of the information included as part of the content. The User agrees and covenants not to hold upGrad and its Affiliates responsible for any and all losses or damages arising from such decision made by them basis the information provided in the course and / or available on the website and/or platform. upGrad reserves the right to cancel or reschedule events in case of insufficient registrations, or if presenters cannot attend due to unforeseen circumstances. You are therefore advised to consult a upGrad agent prior to making any travel arrangements for a workshop. For more details, please refer to the \n\n\n\nCSM®, CSPO®, CSD®, CSP®, A-CSPO®, A-CSM® are registered trademarks of Scrum Alliance®. upGrad Education Private Limited is a Registered Education Ally (REA) of Scrum Alliance®. PMP is a registered mark of the Project Management Institute, Inc. CAPM is a registered mark of the Project Management Institute, Inc. PMI-ACP is a registered mark of the Project Management Institute, Inc. PMI-RMP is a registered mark of the Project Management Institute, Inc. PMI-PBA is a registered mark of the Project Management Institute, Inc. PgMP is a registered mark of the Project Management Institute, Inc. PfMP is a registered mark of the Project Management Institute, Inc. upGrad Education Private Limited is a Premier Authorized Training Partner (ATP) of Project Management Institute, Inc. The PMI Premier Authorized Training Partner logo is a registered mark of the Project Management Institute, Inc. PMBOK is a registered mark of the Project Management Institute, Inc. ITIL®, PRINCE2®, PRINCE2 Agile®, AgileSHIFT® are registered trademarks of AXELOS Limited, used under permission of AXELOS Limited. The Swirl logo™ is a trademark of AXELOS Limited, used under the permission of AXELOS Limited. All rights reserved. COBIT® is a registered trademark of the Information Systems Audit and Control Association® (ISACA®). (ISC)2® is a registered trademark of International Information Systems Security Certification Consortium, Inc. CompTIA Authorized Training Partner, CMMI® is registered in the U.S. Patent and Trademark Office by Carnegie Mellon University. FRM®, GARP™, and Global Association of Risk Professionals™, are trademarks owned by the Global Association of Risk Professionals, Inc. Global Association of Risk Professionals, Inc. (GARP™) does not endorse, promote, review, or warrant the accuracy of the products or services offered by upGrad Education Private Limited for FRM® related information, nor does it endorse any pass rates claimed by the provider. Further, GARP is not responsible for any fees or costs paid by the user. IIBA®, the IIBA® logo, BABOK®, and Business Analysis Body of Knowledge® are registered trademarks owned by the International Institute of Business Analysis. upGrad Education Private Limited is an Endorsed Education Provider of IIBA®. Scaled Agile Framework® and SAFe® are registered trademarks of Scaled Agile, Inc.® upGrad Education Private Limited is a Platinum SPCT Partner of Scaled Agile, Inc®. upGrad Education Private Limited is an Authorized Training Partner of CertNexus. upGrad Education Private Limited is a Microsoft Partner. upGrad Education Private Limited is an AWS Training Partner (ATP). upGrad Education Private Limited is an ICAgile Member Training Organization. upGrad Education Private Limited is a Professional Training Network member of scrum.org. upGrad Education Private Limited is an Accredited Examination Centre of IASSC. upGrad Education Private Limited is a Registered Education Partner (REP) of the DevOps Institute (DOI). upGrad Education Private Limited is an ATO of PeopleCert. upGrad Education Private Limited is an Authorized Training Partner (ATP) and Accredited Training Center (ATC) of the EC-Council. upGrad Education Private Limited is a Bronze Licensed Training Organization of Kanban University."
    },
    {
        "link": "https://projectpro.io/article/python-data-visualization-libraries/543",
        "document": "Can you believe that the human brain takes only 13 milliseconds to process an image?\n\nHumans crave stories, and visualizations allow us to create one from data. The majority of data that data scientists and machine learning engineers work with is in a structured or unstructured format that is challenging for humans to analyze and comprehend. Understanding data requires the use of data visualizations, and this is because visuals are processed 60,000 times faster than text inside the human brain.\n\nUsing charts or graphs to visualize vast amounts of complex information is more straightforward than digging spreadsheets or reports. Data visualization is the practice of representing information in a visual context, making it easy to understand real-time trends and business insights present in the data – it lets you depict different scenarios graphically.\n\nWhy Use Python for Data Visualization?\n\nPython is a prevalent general-purpose programming language commonly used for data visualization in the data science community. Here’s why:\n• Matplotlib, seaborn, plotly, bokeh, and many more best graphing packages are available in Python for data visualization. These help in creating interactive and highly customizable plots.\n• Python has a large community and a vast number of in-built modules.\n• Python provides all you need for accurate, appealing, and intelligible graphics when combined with add-ons.\n\nHere’s the most common question- How does Python support data visualization?\n\nTo help you understand this, we'll take a look at some of Python's most impressive visualization libraries. Each of these libraries has its style and is well-suited to a specific type of visualization. So, without much ado, let’s walk you through various Python libraries for data visualization and how you can leverage them for your next data science project.\n\nWith over 461k users on Github, Matplotlib is the most popular and often regarded as the best data visualization library Python used by data scientists for creating advanced data visualizations. It would be your primary data visualization library to master while working on data science with the Python programming language. It also functions well with other popular Python data science libraries like NumPy, sklearn, and pandas. Matplotlib is a Python plotting package that lets you create static, interactive, and dynamic representations. Since matplotlib was the first Python data visualization library, several other libraries have been created or developed on top of it during research.\n\nAs a Python 2-D plotting package, matplotlib is noted for its incredible level of flexibility. One can build interactive 2D graphs using matplotlib, such as line graphs, scatter graphs, bar graphs, etc. Although matplotlib does not include built-in support for 3D graphs, it does include an alternative toolkit – mplot3d – that can be used to create 3D graphs.\n• If you're used to working with MATLAB, Matplotlib's Pyplot interface will feel extremely familiar.\n• There are several rendering backends in this package.\n• Some libraries, such as pandas and Seaborn, minimize the amount of code you have to write, thus making it easier to use multiple matplotlib functions.\n• Because it has been around for almost a decade, it has a large user base.\n• Relatively easy to understand for beginners.\n• People who have used Matlab or other graph plotting packages before will find it a lot easier to use. Because it is built similar to MATLAB, toggling between the two is simple.\n• It offers high-quality photos and plots in multiple formats, including png, pdf, etc.\n• This library controls numerous aspects of an image, including image color, image size, etc.\n• Matplotlib is great for creating graphs and charts. However, it might not be ideal for time series data because it requires importing all helper classes for the year, month, week, and day formatters.\n• It's also inconvenient when dealing with several datasets, but converting a dataset into a long format and plotting it is simple.\n• Another significant downside is that the library is low-level and requires extra code to generate the visualization.\n• It relies significantly on other Python libraries like NumPy.\n\nTry out this exciting telecom churn prediction project to understand how matplotlib helps visualize data. The project uses the matplotlib library to build histograms for various data inputs.\n\nIf you’re willing to try out some example use cases for Matplotlib, here is a list of code snippets with source code to get you started-\n\nSeaborn is another popular Matplotlib-based Python data visualization framework with over 129,000 users on Github. It's a high-level interface for creating aesthetically appealing and valuable statistical visuals, crucial for studying and comprehending data. This Python library is closely linked with NumPy and pandas data structures. Seaborn strives to make visualization a key component of data analysis and exploration, and its dataset-oriented plotting algorithms use data frames comprising entire datasets.\n\nBar charts, pie charts, histograms, and scatterplots are some of the library's graphics. Seaborn also offers many color palette selection tools that might help identify trends in the data. Seaborn conducts the relevant semantic mapping and statistical aggregation internally to produce relevant charts.\n• Seaborn works well with NumPy and Pandas data structures for visualizing univariate and bivariate data, plotting time series data, etc.\n• It has built-in themes for Matplotlib graphical styling.\n• Seaborn takes advantage of matplotlib's power to create stunning charts with just a few lines of code.\n• Its dataset-oriented plotting techniques work with data frames and vectors that contain complete datasets.\n• Seaborn allows a straightforward representation of your data on plots.\n• You can use Seaborn to visualize data without worrying about the internal details.\n• It allows you to simply provide our data set or data into the relplot() function, and it will compute and place the value appropriately.\n• The 'kind' property inside this library enables you to switch to any other data representation format.\n• It generates a dynamic and informative plot to represent your data, making it simple for the user to comprehend and view the information on the app.\n• The seaborn library employs static aggregation for plot generation for data visualization with Python.\n• Since it is not included with Python, you need to install the Seaborn library by executing several scripts before using it.\n• In Seaborn, the customization options are limited.\n• Interactive visualizations are rare in this library.\n• Sometimes, users will need to use matplotlib simultaneously along with seaborn.\n\nYou can check out this unique loan eligibility prediction project using Seaborn for data visualization. In this project, the Seaborn library is used to build a bar plot showing No. of occurrences vs. Loan Status.\n\nTo gain a better understanding of how seaborn can be used for data visualization in Python, you can practice these code recipes-\n\nGgplot is one of the best data visualization packages in python with a 3k+ stars rating on Github, based on the ggplot2 implementation for the R programming language. Using a high-level API, Ggplot can build data visualizations like bar charts, pie charts, histograms, scatterplots, error charts, and so on. It also lets you combine many types of data visualization components or layers into a single visualization. After mentioning which variables to map to specific aesthetics in the plot, ggplot takes care of the rest, allowing the user to analyze the visualizations rather than design them. However, this also means that ggplot does not let you create highly customized visualizations.\n\nggplot differs from Matplotlib as it allows users to stack components to build a complete plot. You can start with axes and then add points, a line, a trend line, and so on. For heavily customized graphics, ggplot isn't precisely the best choice.\n• ggplot is yet another declarative-style library closely integrated with Pandas. This means you can create visualizations directly from your Pandas dataframe.\n• ggplot isn't designed for highly customized visualizations. It avoids complexities and instead prefers a more straightforward plotting technique.\n• Using the pip install command in the Python environment lets you install ggplot because it is an open-source module.\n• Because ggplot and pandas are closely linked, keeping your data in a DataFrame is essential when using ggplot.\n• If you are moving from R to Python, you'll find that using ggplot is much easier to use than carrying out the same task using a different Python package.\n• For beginners working with ggplot for the first time, the ggplot documentation is simple and easy to follow.\n• ggplot has a save method if you need to exhibit your plots or discuss your insights with other collaborators.\n• Some features, such as creating maps with theme_map, are not available in ggplot.\n• You might have to spend more time going through the ggplot documentation if you're looking for a standard functionality that doesn't always convert easily from R to Python.\n\nSometimes, using ggplot for advanced data visualization in Python might not be easy if you haven’t worked with ‘ggplot2’ in R. So, you should first practice some basic examples using ggplot in R-\n\nPlotly is an open-source 3D data visualization Python library with over 50 million users worldwide. It is a web-based data visualization tool built on top of the Plotly JavaScript library (plotly.js). Scatter plots, histograms, line charts, bar charts, box plots, multiple axes, sparklines, dendrograms, 3-D charts, and other chart kinds are available in Plotly. Contour plots are also available in Plotly, making it slightly different from other data visualization frameworks.\n\nYou can use Plotly to generate web-based advanced data visualisation Python presented in Jupyter notebooks or web apps using Dash or saved as standalone HTML files.\n• Plotly allows you to share plots with the public without revealing your code.\n• The syntax is simple, as all graphs use the same parameters.\n• Using Plotly does not require any technical skills; you may generate visualizations using the GUI.\n• 3D plots with a variety of interactive tools are available in Plotly.\n• Hover tool capabilities in Plotly allow us to spot outliers or anomalies in massive numbers of sample points.\n• It has an aesthetically pleasing design that appeals to a broad spectrum of individuals.\n• It allows you to personalize your graphs in an infinite number of ways, making your plots more exciting and understandable to all others.\n• It's challenging to keep up with many Plotly tools (Chart Studio, Express, etc.) and out-of-date documentation.\n• Plotly's initial setup is a bit confusing without an online account, and there's a lot of code to write.\n• Although Plotly can accept dictionaries, lists, and DataFrames, there are no easy steps to link graphs to the same source dataset.\n\nYou can try your hands on this interesting collaborative filtering recommender system project that shows how Plotly can be used to generate a bar graph (In this case, the graph represents ‘Number of users and products w.r.t total size of data’).\n\nTo get a better picture of how data visualization works with Plotly, practice these easy-to-understand examples-\n\nGeoplotlib is one of the best data visualization libraries python for plotting geographic data and creating maps. It allows the development of geographical maps in particular, with various map formats such as dot-density maps, choropleths, and symbol maps available. It's a straightforward but effective API for visualizing OpenStreetMap tiles. The NumPy and SciPy libraries for numerical computations and the Pyglet module for graphical rendering are required to perform data visualizations with Geoplotlib. Matplotlib for colormaps and pyshp for reading.shp files are optional prerequisites.\n• Geoplotlib allows you to zoom in and out of the map, allowing them to see more details.\n• This library handles the complete dataset importing, the map projection, and the map tile transfers seamlessly.\n• Interactivity and basic animations are provided via map tiles.\n\nBokeh is another example of the best data visualization tools python with over 15K stars on Github. It generates detailed images with a high level of interaction for various datasets, big and small. It allows for creating adaptable graphics beautifully and simply with high-performance interactivity across big or streaming datasets. Experts in data visualization may employ bokeh to generate interactive plots for modern web browsers that one can use in interactive online applications, HTML pages, or JSON objects.\n\nThere are three layers in Bokeh for creating data visualizations. The first level focuses solely on swiftly constructing data plots, and the second level controls the plot's essential building components. The third level gives users complete flexibility over chart creation with no pre-set settings.\n• Bokeh supports active plot interaction such as zooming, panning, selecting, etc.\n• It provides a low-level interface with additional flexibility to customize charts.\n• Bokeh can also convert Matplotlib, ggplot.py, and seaborn charts and plots.\n• It helps to create interactive plots that can be saved in both PNG and SVG formats.\n• Bokeh generates output in various forms, including HTML, notebook, etc.\n• Linking plots is easier with the help of Bokeh. A change made in one plot will be replicated in a plot with a corresponding variable.\n• Bokeh can be used as a high-level or low-level interface, allowing it to produce many of the same graphs as Matplotlib but with fewer lines of code and higher resolution.\n• Because Bokeh is a middle-level package, it often takes less code than Matplotlib but more code to produce the same plot as Seaborn, Altair, or Plotly.\n• It does not yet have a strong support group and is still in the early stages of development.\n• It doesn’t support 3D graphic functions and has limited interactivity options to work with.\n• Before you construct any plot, you must first define the output mode, including notebook, server, and web browser modes.\n\nFolium is a geospatial data visualization library written in Python. It's an easy-to-use library with a lot of capability. It combines the power of Leaflet.js with the ease of Python to create a fantastic map plotting tool. Folium was created with a focus on simplicity, performance, and usefulness. It performs well, can be expanded with various plugins, and has a user-friendly API.\n\nFolium makes it easier for developers to bypass the time-consuming creation of Google Maps, placing markers, and displaying directions. You can simply load a few libraries, design a map, and concentrate on inputting and analyzing the data in Folium.\n• Folium makes use of an open street map to provide you with a Google Map-like experience with less code.\n• Folium makes it simple to add prospective locations of other users by allowing users to add markers.\n• You can employ a range of Folium plugins with your map, including an Altair plugin.\n• Basemap has the problem of requiring you to get and handle shapefiles, and the result is static images (like the plots in matplotlib).\n• In an interactive setting, this library is simple to work with, but it makes it difficult to simply hand over the results of your labor to someone else.\n\nAltair is a Python-based statistical data visualization package. It is based on Vega and Vega-Lite, declarative languages for generating, preserving, and sharing interactive data visualization designs. Altair can generate attractive data visualizations of plots with little scripting, including bar charts, pie charts, histograms, scatterplots, error charts, stemplots, and more.\n\nAltair features dependencies such as python 3.6, NumPy, Pandas, all installed automatically by the Altair installation procedures. You can use Jupyter Notebook or JupyterLab to get the data visualizations in Altair.\n• While creating visualization with Altair, you can aggregate data, and it eliminates various procedures that would normally be performed with a data analysis and manipulation package like Pandas.\n• Because Altair creates plots in a declarative form, it's simple and easy to move through visualizations and experiments quickly when using this package.\n• Filtering data is another great feature available in Altair, allowing you to generate more focused or customized visualisations.\n• You can also use Altair to provide dynamic filtering, and it allows you to use a shared filter to connect many plots.\n• It's easy to use and results in more attractive and compelling visualizations.\n• Although the coding structure remains the same, multiple plots can be produced simply by altering the mark attribute.\n• Altair helps you to better understand your data by supporting data transformations, such as using the count, min, and max aggregator functions.\n• Altair is not the correct visualization library for you if you need to create 3D visualizations.\n• Altair lacks some of the major plots, such as boxplots.\n\nIt's one of the most popular Python packages for creating interactive plots that you can embed in a web browser. It's an excellent library for working with smaller datasets, and it generates SVG files, which differentiates it from the others on the list. Though it creates commendable results with small data sets, creating charts with hundreds of thousands of data points may be challenging, and it may be difficult to deliver results in such instances.\n\nOne can use pip to install the Pygal library. Pygal makes plotting simple, and it supports a variety of chart kinds, including line, bar, histogram, radar, box, treemap, etc.\n• This module may be used to build dynamic and interactive graphs on a web page using typical Python web interfaces like flask and Django.\n• It can make SVG presentations easier to work with interactive files.\n• Pygal is an excellent choice for small web apps that require quick and efficient graphs.\n• Pygal can create a wide range of graphs, such as line, bar, histogram, XY, pie, radar, box, Dot, and so on.\n• With minimal coding, you can create distinctive and visually stunning graphs.\n• One can export the charts and graphs in various formats, including SVG, PNG, Etree, and others.\n• SVGs will suffice as long as you're working with smaller datasets. However, working with massive datasets containing thousands of data points makes visualization challenging and inefficient.\n\nGleam is a Python library that allows you to create interactive online visualizations of data without needing to know HTML or JS. Gleam combines everything into a web interface that allows anyone to interact with your data in real-time. It makes it easier for you to explain and interpret your data to others. The Shiny package in R was the inspiration behind the development of the Gleam library.\n\nGleam is used for making interactive visualizations that include pages, panels, and buttons. These interactive web visualizations are also completely web-integrated, meaning they can be embedded in anything from a website to an endpoint.\n• It allows you to turn analysis into interactive web apps using only python scripts, minimizing the need to know other languages such as HTML, CSS, or javascript.\n• It works with nearly all other Python data visualization libraries.\n• You can add fields to a plot after it's been created so that users can filter and sort data.\n\nWith so many possibilities for visualizing data in Python, it's essential to figure out which approach is ideal for you- from basic plotting to elaborate and complicated statistical charts, and so on. This blog looked at some of the topmost Python packages for data visualization. These Python Data Visualization Libraries are excellent choices for creating visually appealing and insightful data representations. Each of these libraries has its own set of advantages, allowing you to choose the best option for your data visualization project. Explore ProjectPro’s unique beginner-friendly Data Visualization projects to gain hands-on experience and enhance your skills further in this area.\n\nFAQs on Best Data Visualization Packages in Python"
    },
    {
        "link": "https://geeksforgeeks.org/data-visualization-with-python",
        "document": "In today’s world, a lot of data is being generated on a daily basis. And sometimes to analyze this data for certain trends, patterns may become difficult if the data is in its raw format. To overcome this data visualization comes into play. Data visualization provides a good, organized pictorial representation of the data which makes it easier to understand, observe, analyze. In this tutorial, we will discuss how to visualize data using Python.\n\nPython provides various libraries that come with different features for visualizing data. All these libraries come with different features and can support various types of graphs. In this tutorial, we will be discussing four such libraries.\n\nWe will discuss these libraries one by one and will plot some most commonly used graphs.\n\nNote: If you want to learn in-depth information about these libraries you can follow their complete tutorial.\n\nBefore diving into these libraries, at first, we will need a database to plot the data. We will be using the tips database for this complete tutorial. Let’s discuss see a brief about this database.\n\nTips database is the record of the tip given by the customers in a restaurant for two and a half months in the early 1990s. It contains 6 columns such as total_bill, tip, sex, smoker, day, time, size.\n\nYou can download the tips database from here.\n\nMatplotlib is an easy-to-use, low-level data visualization library that is built on NumPy arrays. It consists of various plots like scatter plot, line plot, histogram, etc. Matplotlib provides a lot of flexibility.\n\nTo install this type the below command in the terminal.\n\nAfter installing Matplotlib, let’s see the most commonly used plots using this library.\n\nScatter plots are used to observe relationships between variables and uses dots to represent the relationship between them. The scatter() method in the matplotlib library is used to draw a scatter plot.\n\nThis graph can be more meaningful if we can add colors and also change the size of the points. We can do this by using the c and s parameter respectively of the scatter function. We can also show the color bar using the colorbar() method.\n\nLine Chart is used to represent a relationship between two data X and Y on a different axis. It is plotted using the plot() function. Let’s see the below example.\n\nA bar plot or bar chart is a graph that represents the category of data with rectangular bars with lengths and heights that is proportional to the values which they represent. It can be created using the bar() method.\n\nA histogram is basically used to represent data in the form of some groups. It is a type of bar plot where the X-axis represents the bin ranges while the Y-axis gives information about frequency. The hist() function is used to compute and create a histogram. In histogram, if we pass categorical data then it will automatically compute the frequency of that data i.e. how often each value occurred.\n\nSeaborn is a high-level interface built on top of the Matplotlib. It provides beautiful design styles and color palettes to make more attractive graphs.\n\nTo install seaborn type the below command in the terminal.\n\nSeaborn is built on the top of Matplotlib, therefore it can be used with the Matplotlib as well. Using both Matplotlib and Seaborn together is a very simple process. We just have to invoke the Seaborn Plotting function as normal, and then we can use Matplotlib’s customization function.\n\nNote: Seaborn comes loaded with dataset such as tips, iris, etc. but for the sake of this tutorial we will use Pandas for loading these datasets.\n\nScatter plot is plotted using the scatterplot() method. This is similar to Matplotlib, but additional argument data is required.\n\nYou will find that while using Matplotlib it will a lot difficult if you want to color each point of this plot according to the sex. But in scatter plot it can be done with the help of hue argument.\n\nLine Plot in Seaborn plotted using the lineplot() method. In this, we can pass only the data argument also.\n\nBar Plot in Seaborn can be created using the barplot() method.\n\nThe histogram in Seaborn can be plotted using the histplot() function.\n\nAfter going through all these plots you must have noticed that customizing plots using Seaborn is a lot more easier than using Matplotlib. And it is also built over matplotlib then we can also use matplotlib functions while using Seaborn.\n\nLet’s move on to the third library of our list. Bokeh is mainly famous for its interactive charts visualization. Bokeh renders its plots using HTML and JavaScript that uses modern web browsers for presenting elegant, concise construction of novel graphics with high-level interactivity.\n\nTo install this type the below command in the terminal.\n\nScatter Plot in Bokeh can be plotted using the scatter() method of the plotting module. Here pass the x and y coordinates respectively.\n\nA line plot can be created using the line() method of the plotting module.\n\nBar Chart can be of two types horizontal bars and vertical bars. Each can be created using the hbar() and vbar() functions of the plotting interface respectively.\n\nOne of the key features of Bokeh is to add interaction to the plots. Let’s see various interactions that can be added.\n\nclick_policy property makes the legend interactive. There are two types of interactivity –\n• Muting: Hiding the glyph makes it vanish completely, on the other hand, muting the glyph just de-emphasizes the glyph based on the parameters.\n\nBokeh provides GUI features similar to HTML forms like buttons, sliders, checkboxes, etc. These provide an interactive interface to the plot that allows changing the parameters of the plot, modifying plot data, etc. Let’s see how to use and add some commonly used widgets.\n• Buttons: This widget adds a simple button widget to the plot. We have to pass a custom JavaScript function to the CustomJS() method of the models class.\n• CheckboxGroup: Adds a standard check box to the plot. Similarly to buttons we have to pass the custom JavaScript function to the CustomJS() method of the models class.\n\nNote: All these buttons will be opened on a new tab.\n• Sliders: Adds a slider to the plot. It also needs a custom JavaScript function.\n\nSimilarly, much more widgets are available like a dropdown menu or tabs widgets can be added.\n\nThis is the last library of our list and you might be wondering why plotly. Here’s why –\n• Plotly has hover tool capabilities that allow us to detect any outliers or anomalies in numerous data points.\n• It allows more customization.\n• It makes the graph visually more attractive.\n\nTo install it type the below command in the terminal.\n\nScatter plot in Plotly can be created using the scatter() method of plotly.express. Like Seaborn, an extra data argument is also required here.\n\nLine plot in Plotly is much accessible and illustrious annexation to plotly which manage a variety of types of data and assemble easy-to-style statistic. With px.line each data position is represented as a vertex\n\nBar Chart in Plotly can be created using the bar() method of plotly.express class.\n\nIn plotly, histograms can be created using the histogram() function of the plotly.express class.\n\nJust like Bokeh, plotly also provides various interactions. Let’s discuss a few of them.\n\nCreating Dropdown Menu: A drop-down menu is a part of the menu-button which is displayed on a screen all the time. Every menu button is associated with a Menu widget that can display the choices for that menu button when clicked on it. In plotly, there are 4 possible methods to modify the charts by using updatemenu method.\n\nAdding Buttons: In plotly, actions custom Buttons are used to quickly make actions directly from a record. Custom Buttons can be added to page layouts in CRM, Marketing, and Custom Apps. There are also 4 possible methods that can be applied in custom buttons:\n\nIn plotly, the range slider is a custom range-type input control. It allows selecting a value or a range of values between a specified minimum and maximum range. And the range selector is a tool for selecting ranges to display within the chart. It provides buttons to select pre-configured ranges in the chart. It also provides input boxes where the minimum and maximum dates can be manually input\n\nIn this tutorial, we have plotted the tips dataset with the help of the four different plotting modules of Python namely Matplotlib, Seaborn, Bokeh, and Plotly. Each module showed the plot in its own unique way and each one has its own set of features like Matplotlib provides more flexibility but at the cost of writing more code whereas Seaborn being a high-level language provides allows one to achieve the same goal with a small amount of code. Each module can be used depending on the task we want to do."
    },
    {
        "link": "https://harshaash.com/Python/Visualization%20for%20predictive%20analytics",
        "document": "Author: Achyuthuni Sri Harsha \n\n Data visualisation can be performed in many ways. There are infinite ways to visualise the data, and what works is dependent on the patterns in the data. In this post, we are trying to categorise the visualisation of data for regression and classification problems.\n\n Every regression, classification and clustering problem has some or all of the following assumptions: \n\n 1. Change in independent variables changes the dependent variable. In other words, there is a relationship between the dependent variable and the independent variables. Before building a model, it is advised to visualise this relationship.\n\n 2. Assumptions on the distribution of the dependent or independent variable. For example, for Naive Bayes classifier, the independent variables should follow a normal distribution.\n\n 3. Assumptions of relationships between independent variables. For example, for linear regression, the independent variables should not be correlated.\n\n 4. Unbalanced dataset. The frequency of the smaller class should be significant when compared to the frequency of the larger class.\n\n 5. The time series of data/features are stationary.\n\nApart from validating the assumptions and identifying trends in the data, data visualisation can also be used for gathering insights and feature engineering.\n\n The below example is from the marketing department of a consulting firm. The problem is to identify the projects that they can win.\n\nThe univariate analysis deals with EDA on one variable alone. In describing or characterising the observations of an individual variable, three basic properties are of interest:\n\n 1. The location of observations and how large or small the values of the individual observations are\n\n 2. The dispersion (sometimes called scale or spread) of the observations\n\n 3. The distribution of the observations\n\nUni-variate plots provide one way to find out about those properties. There are two basic kinds of univariate plots:\n\n 1. Enumeration plots, or plots that show every observation\n\n 2. Summary plots that generalise the data into a simplified representation\n\n 3. Enumerative plots\n\nThe most common enumerative plot is the index plot. It displays the values of a single variable for each observation using symbols plotted relative to the observation number.\n\nFrom the above plot, we can infer that there are around 3000 observations for sales, and they are captured randomly along the data.\n\nDisplays the values of a single variable as symbols plotted along a line. This is a basic plot where we can see the spread of the data.\n\nThe dot plot displays the values plotted along a line. It is generally constructed after sorting the rows. This can help us in determining the distribution of the data. It can also help us identify the continuity of the data.\n\nFrom looking at the plot, most of the data lies within 6-12 while the frequency of the data decreases as we go away from the mean. The graph is also symmetric. This indicates the distribution could be Normal distribution.\n\nSummary plots display an object or a graph that gives a more concise expression of the location, dispersion, and distribution of a variable than an enumerative plot, but this comes at the expense of some loss of information: In a summary plot, it is no longer possible to retrieve the individual data value, but the gain usually matches this loss in understanding that results from the efficient representation of the data. Summary plots generally prove to be much better than enumerative plots in revealing the distribution of the data.\n\nA simple way of representing statistical data on a plot in which a rectangle is drawn to represent the second and third quartiles, usually with a vertical line inside to indicate the median value. The lower and upper quartiles are shown as horizontal lines on either side of the rectangle.\n\nThe other summary plots are of various types:\n\nHistograms: Histograms are a type of bar chart that displays the counts or relative frequencies of values falling in different class intervals or ranges.\n\n Density Plots: A density plot is a plot of the local relative frequency or density of points along the number line or x-axis of a plot. Where points occur more frequently, this sum, and consequently the local density, will be greater.\n\nIn statistics, a Q-Q (quantile-quantile) plot is a probability plot, which is a graphical method for comparing two probability distributions by plotting their quantiles against each other.\n\nIf the two distributions being compared are similar, the points in the Q-Q plot will approximately lie on the line y = x. If the distributions are linearly related, the points in the Q-Q plot will approximately lie on a line, but not necessarily on the line y = x. Q-Q plots can also be used as a graphical means of estimating parameters in a location-scale family of distributions.\n\nA Q-Q plot is used to compare the shapes of distributions, providing a graphical view of how properties such as location, scale, and skewness are similar or different in the two distributions.\n\nBelow is a Q-Q plot of the sales data with a normal distribution\n\nFrom the above plot, it is clear that the distribution is normal.\n\nWhereas the above plots are applicable for continuous data, a simple bar chart can help us with categorical data.\n\nThe bivariate analysis deals with visualisations between two variables. The bi-variate analysis is used to identify the relationship between the dependent and independent variables. The dependent and independent variables can be of the following types:\n\nFor all four types, we want to identify the relation between the dependent variable and the independent variable.\n\nFirst, let us consider the classification problem. Let's say we have to predict the reporting status of the bid. We have three categorical independent variables and five continuous independent variables.\n\nThe five continuous variables are: \n\n 1. Strength in the segment\n\n 2. Profit for customer\n\n 3. Sales Value\n\n 4. Profit percentage\n\n 5. joint bid portion\n\nFor these variables, we can look at joint histograms. What we are trying to see is the overlap between the distributions for the two different classes. If the overlap between the two variables is small, then that variable can be a good predictor and vice versa.\n\nFrom the above graphs, we can see that profit for the customer can explain the status of the bid when compared to the strength in the segment. We can also see the mean, variance and distributions of the independent variables between the classes.\n\nIn a decision tree, the tree will split with profit_for_customer>1 as 'Lost' class and profit_for_customer<1 as 'Won'. In logistic regression, the pseudo \\(R^2\\) will be greater for profit_for_customer than for strength_in_segment. Similar thinking can be applied to SVM, Naive-Bates classifiers etc.\n\nFor these variables, a mosaic plot will be useful. In the mosaic plot, the area of the rectangles is proportional to the frequency of the class. On the x-axis, we have the dependent variable, and on the y-axis, we have the independent variables. Using this, we can see the relative frequencies of the 'Won' and 'Lost' in each of the dependent variable classes.\n\nFor example, the ratio of Lost to won cases is the same in products 'G', 'Li' and 'P'. Product 'F' has more wins than normal, while product 'L' has more losses than normal. The products 'C' and 'Lo' are too small to be statistically significant.\n\nIntuitively, in logistic regression, the products 'G', 'Li' and 'P' can be considered as base classes with 'F' having a positive slope value and 'L' having a negative slope value. In decision trees, the products 'G', 'Li' and 'P' will be part of one branch while products 'L' and 'F' will be part of different branches. Similar thinking can be applied to SVM, Naive-Bates classifiers etc.\n\nLet us consider the regression problem. Let's say we have to predict sales_value of the successful bids. We have three categorical independent variables and four continuous independent variables.\n\nThere are four continuous variables:\n\n 1. Strength in the segment\n\n 2. Profit for customer\n\n 3. Profit percentage\n\n 4. Joint bid portion\n\nScatter plots show how much and how one variable is affected by another. We can use them to identify how changing the independent variable changes the dependent variable. Using this, we can identify if we have to do any transformations to the variables.\n\nIn the above plot, there seems to be no relation between joint_bid_portion and sales_value. We can also observe how the joint bid portion behaves after 80.\n\nThe three categorical variables are\n\n 1. Product\n\n 2. Industry\n\n 3. Region\n\n For these variables, a box plot will be useful. While showing the relative means among the classes, we can also visualise the variations and distributions in the data.\n\nFrom the above plot, the mean of sales for 'Sec', 'Air, 'Ban', 'Cap', 'Con', 'Oth', 'Def', and 'Agr' are similar with similar distributions. The mean of 'Ins', 'OG', 'Gov', 'Hea', and 'Whi' classes seems to be higher and the mean of 'Mob', 'Fin', and 'Tel' is lower. In linear regression, the following industries would be considered as base classes: 'Sec', 'Air, 'Ban', 'Cap', 'Con', 'Oth', 'Def', 'Agr' while 'Ins', 'OG', 'Gov', 'Hea', 'Whi' will have positive slope (\\(/beta\\)) value and 'Mob', 'Fin', 'Tel' will have a negative slope.\n\nFor any dataset, we can do the following basic univariate and bivariate analysis in one go.\n\nThe below function will do the following for all the columns in the dataset:\n\n 1. For continuous data, it will plot the scatter plot, box plot, histogram and q-q plot with normal distribution\n\n 2. For categorical data, it will plot the bar chart and pie chart\n\nThe below code will do the following for all the columns in the dataset:\n\n 1. For continuous data, it will plot the joint histograms \n\n 2. For categorical data, it will plot the mosaic plot\n\nThe below code will do the following for all the columns in the dataset:\n\n 1. For continuous data, it will plot the scatter plots \n\n 2. For categorical data, it will plot the bar charts"
    }
]