[
    {
        "link": "https://api.jquery.com/val",
        "document": "Description: Set the value of each element in the set of matched elements.\n\nA function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.\n\nA string of text, a number, or an array of strings corresponding to the value of each matched element to set as selected/checked.\n\nThis method is typically used to set the values of form fields.\n\nallows you to pass an array of element values. This is useful when working on a jQuery object containing elements like , , and s inside of a . In this case, the s and the s having a that matches one of the elements of the array will be checked or selected while those having a that doesn't match one of the elements of the array will be unchecked or unselected, depending on the type. In the case of s that are part of a radio group and s, any previously selected element will be deselected.\n\nSetting values using this method (or using the native property) does not cause the dispatch of the event. For this reason, the relevant event handlers will not be executed. If you want to execute them, you should call after setting the value.\n\nThe method allows setting the value by passing in a function. As of jQuery 1.4, the function is passed two arguments, the current element's index and its current value:\n\nThis example removes leading and trailing whitespace from the values of text inputs with a \"tags\" class."
    },
    {
        "link": "https://w3schools.com/jquery/html_val.asp",
        "document": "The val() method returns or sets the value attribute of the selected elements.\n\nWhen used to return value: \n\nThis method returns the value of the value attribute of the FIRST matched element.\n\nWhen used to set value: \n\nThis method sets the value of the value attribute for ALL matched elements.\n\nNote: The val() method is mostly used with HTML form elements.\n\nSet the value attribute using a function:\n\nTry it Yourself - Examples\n\nReturn the value attribute\n\n How to return the value of the value attribute of the FIRST matched element.\n\nSet the value attribute using a function\n\n Using a function to set the value of the value attribute."
    },
    {
        "link": "https://api.jquery.com",
        "document": "Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first."
    },
    {
        "link": "https://api.jquery.com/category/manipulation",
        "document": "Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element."
    },
    {
        "link": "https://jqueryvalidation.org/documentation",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/10434599/get-the-data-received-in-a-flask-request",
        "document": "The answer to this question led me to ask Get raw POST body in Python Flask regardless of Content-Type header next, which is about getting the raw data rather than the parsed data.\n\nI want to be able to get the data sent to my Flask app. I've tried accessing request.data but it is an empty string. How do you access request data?\n\nThe docs describe the attributes available on the object ( ) during a request. In most common cases will be empty because it's used as a fallback: Contains the incoming request data as string in case it came with a mimetype Flask does not handle.\n• : the key/value pairs in the URL query string\n• : the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded\n• : the files in the body, which Flask keeps separate from . HTML forms must use or files will not be uploaded.\n• : parsed JSON data. The request must have the content type, or use to ignore the content type. All of these are instances (except for ). You can access values using:\n• : use indexing if you know the key exists\n• : use if the key might not exist\n• : use if the key is sent multiple times and you want a list of values. only returns the first value.\n\nUse to get posted JSON data. Use to get data when submitting a form with the POST method. Use to get data passed in the query string of the URL, like when submitting a form with the GET method. etc. are dict-like, use the method to get a value with a default if it wasn't passed.\n\nIf the body is recognized as form data, it will be in . If it's JSON, it will be in . Otherwise the raw data will be in . If you're not sure how data will be submitted, you can use an chain to get the first one with data. def get_request_data(): return ( request.args or request.form or request.get_json(force=True, silent=True) or request.data ) contains args parsed from the query string, regardless of what was in the body, so you would remove that from if both it and a body should data at the same time.\n\nTo get form data, try this, The request object allows us to get access to the data that come from a request. it can also help us access other information about a request. Hope that helps. :) from flask import Flask, request app = Flask(__name__) @app.get('/') def index(): json_data = request.get_json() #this will get the json data and return a dictionary containing the data sent form_data = request.form #this will get the form data return a dictionary of the data submitted in a form #such can be accessed in the following way username = json_data.get('username') email = form_data.get('email') # this will be value from the email input ....\n\nI went through all the answers above, however, I noticed no one really talked about when you receive data from Client-side (when your client side is of different origin e.g. react app) to Server-side then you also need to handle pre-flight request in Flask to allow Cross-Origin access otherwise CORS error is thrown. After you handle that, then usual process is to use method on object. Following is the code that works for me: @app.route(\"/read_row_to_customer_sheet\", methods=[\"POST\", \"OPTIONS\"]) def read_row_to_customer_sheet(): if request.method == \"OPTIONS\": response = make_response() response.headers.add(\"Access-Control-Allow-Origin\", \"*\") response.headers.add('Access-Control-Allow-Headers', \"*\") response.headers.add(\"Content-Type\", \"application/json\") return response elif request.method == 'POST': form = request.get_json() print(form) # your custom logic goes here response = make_response() response.headers.add(\"Access-Control-Allow-Origin\", \"*\") return response Also make sure you put in elif block not at the beginning of function. Otherwise you will encounter the CORS error at client-side and possibly 415 error at server side because when you receive the pre-flight OPTIONS request the function will try to decode it as json because you placed the at the beginning, therefore, following control-flow is wrong: ### WRONG Route Function @app.route(\"/read_row_to_customer_sheet\", methods=[\"POST\", \"OPTIONS\"]) def read_row_to_customer_sheet(): form = request.get_json() if request.method == \"OPTIONS\": response = make_response() response.headers.add(\"Access-Control-Allow-Origin\", \"*\") response.headers.add('Access-Control-Allow-Headers', \"*\") response.headers.add(\"Content-Type\", \"application/json\") return response elif request.method == 'POST': print(form) # your custom logic goes here response = make_response() response.headers.add(\"Access-Control-Allow-Origin\", \"*\") return response"
    },
    {
        "link": "https://geeksforgeeks.org/retrieving-html-from-data-using-flask",
        "document": "Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around Werkzeug and Jinja and has become one of the most popular Python web application frameworks.\n\nRead this article to know more about Flask Create form as HTML\n\nWe will create a simple HTML Form, very simple Login form\n\nIts an simple HTML form using the post method the only thing is unique is action URL. URL_for is an Flask way of creating dynamic URLs where the first arguments refers to the function of that specific route in flask. In our form it will create a Dynamic route which has gfg function in the flask app\n\nNow we will create the flask backend which will get user input from HTML form\n\nAlmost everything is simple, We have created a simple Flask app, if we look into code\n• importing flask and creating a home route which has both get and post methods\n• if requesting method is post, which is the method we specified in the form we get the input data from HTML form\n• you can get HTML input from Form using name attribute and request.form.get() function by passing the name of that input as argument\n• request.form.get(“fname”) will get input from Input value which has name attribute as fname and stores in first_name variable\n• request.form.get(“lname”) will get input from Input value which has name attribute as lname and stores in last_name variable\n• The return value of POST method is by replacing the variables with their valuesYour name is “+first_name+last_name\n• the default return value for the function gfg id returning home.html template\n• you can review what-does-the-if-__name__-__main__-dofrom the article"
    },
    {
        "link": "https://stackoverflow.com/questions/35995817/handling-form-data-with-flask-request",
        "document": "I am using as an api server and am constructing the first method. Using request imported from flask, I am able to access data without issue with the following cURL command:\n\nMy method logs out both the username and email without issue:\n\nI have an app using the axios project to make api calls. When axios attempts to form data, no longer works. Here is the call axios is making converted to cURL command from Chrome Dev Console:\n\nWith the same method above and are empty. however has the form data in it, and also will output the form data in JSON format.\n\nMy question is what should I be using in this case to retrieve the form data? The first curl command is clean with having the data I need, but is empty. The second cURL command leaves broken but does populate . Is there a best practice on how I should retrieve form data in both cURL cases?"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/processing-incoming-request-data-in-flask",
        "document": "Web applications frequently require processing incoming request data from users. This payload can be in the shape of query strings, form data, and JSON objects. Flask, like any other web framework, allows you to access the request data.\n\nIn this tutorial, you will build a Flask application with three routes that accept either query strings, form data, or JSON objects.\n\nTo complete this tutorial, you will need:\n• This project will require Python installed in a local environment.\n• This project will use Pipenv, a production-ready tool that aims to bring the best of all packaging worlds to the Python world. It harnesses Pipfile, pip, and virtualenv into one single command.\n• Downloading and installing a tool like Postman will be required for testing API endpoints.\n\nThis tutorial was verified with Pipenv v2020.11.15, Python v3.9.0, and Flask v1.1.2.\n\nTo demonstrate the different ways of using requests, you will need to create a Flask app. Even though the example app uses a simplified structure for the view functions and routes, what you learn in this tutorial can be applied to any method of organizing your views like class-based views, blueprints, or an extension like Flask-Via.\n\nFirst, you will need to create a project directory. Open your terminal and run the following command:\n\nThen, navigate to the new directory:\n\nNext, install Flask. Open your terminal and run the following command:\n\nThe command will create a virtualenv for this project, a Pipfile, install , and a Pipfile.lock.\n\nTo activate the project’s virtualenv, run the following command:\n\nTo access the incoming data in Flask, you have to use the object. The object holds all incoming data from the request, which includes the mimetype, referrer, IP address, raw data, HTTP method, and headers, among other things.\n\nAlthough all the information the object holds can be useful, for the purposes of this article, you will focus on the data that is normally directly supplied by the caller of the endpoint.\n\nTo gain access to the request object in Flask, you will need to import it from the Flask library:\n\nYou then have the ability to use it in any of your view functions.\n\nUse your code editor to create an file. Import and the object. And also establish routes for , , and :\n\nNext, open your terminal and start the app with the following command:\n\nThe app will start on port 5000, so you can view each route in your browser with the following links:\n\nThe code establishes three routes and visiting each route will display the messages of , , and respectively.\n\nURL arguments that you add to a query string are a common way to pass data to a web app. While browsing the web, you will have likely encountered a query string before.\n\nThe query string begins after the question mark ( ) character:\n\nAnd has key-value pairs separated by an ampersand ( ) character:\n\nFor each pair, the key is followed by an equals sign ( ) character and then the value.\n\nQuery strings are useful for passing data that does not require the user to take action. You could generate a query string somewhere in your app and append it to a URL so when a user makes a request, the data is automatically passed for them. A query string can also be generated by forms that have GET as the method.\n\nLet’s add a query string to the route. In this hypothetical example, you will provide the name of a programming language that will be displayed on the screen. Create a key of and a value of :\n\nIf you run the app and navigate to that URL, you will see that it still displays a message of .\n\nYou will need to program the part that handles the query arguments. This code will read in the key by using either or .\n\nBy calling , the application will continue to run if the key doesn’t exist in the URL. In that case, the result of the method will be .\n\nBy calling , the app will return a 400 error if the key doesn’t exist in the URL.\n\nWhen dealing with query strings, it is recommended to use to prevent the app from failing.\n\nLet’s read the key and display it as output.\n\nModify the route in with the following code:\n\nThen, run the app and navigate to the URL:\n\nThe browser should display the following message:\n\nThe argument from the URL gets assigned to the variable and then gets returned to the browser.\n\nTo add more query string parameters, you can append ampersands and the new key-value pairs to the end of the URL. Create a key of and a value of :\n\nAnd if you want more, continue adding ampersands and key-value pairs. Create a key of and a value of :\n\nTo gain access to those values, you will still use either or . Let’s use both to demonstrate what happens when there is a missing key. Modify the route to assign the value of the results to variables and then display them:\n\nThen, run the app and navigate to the URL:\n\nThe browser should display the following message:\n\nRemove the key from the URL:\n\nThe browser should display the following message with when a value is not provided for :\n\nRemove the key from the URL:\n\nThe browser should encounter an error because it is expecting a value for :\n\nNow you understand handling query strings. Let’s continue to the next type of incoming data.\n\nForm data comes from a form that has been sent as a POST request to a route. So instead of seeing the data in the URL (except for cases when the form is submitted with a GET request), the form data will be passed to the app behind the scenes. Even though you cannot easily see the form data that gets passed, your app can still read it.\n\nTo demonstrate this, modify the route in to accept both GET and POST requests and returns a form:\n\nThen, run the app and navigate to the URL:\n\nThe browser should display a form with two input fields - one for and one for - and a submit button.\n\nThe most important thing to know about this form is that it performs a POST request to the same route that generated the form. The keys that will be read in the app all come from the attributes on our form inputs. In this case, and are the names of the inputs, so you will have access to those in the app.\n\nInside the view function, you will need to check if the request method is GET or POST. If it is a GET request, you can display the form. Otherwise, if it is a POST request, then you will want to process the incoming data.\n\nModify the route in with the following code:\n\nThen, run the app and navigate to the URL:\n\nFill out the field with value of and the field with the value of . Then, press Submit.\n\nThe browser should display the following message:\n\nNow you understand handling form data. Let’s continue to the next type of incoming data.\n\nJSON data is normally constructed by a process that calls the route.\n\nAn example JSON object looks like this:\n\nThis structure can allow for much more complicated data to be passed as opposed to query strings and form data. In the example, you see nested JSON objects and an array of items. Flask can handle this format of data.\n\nModify the route in to accept POST requests and ignore other requests like GET:\n\nUnlike the web browser used for query strings and form data, for the purposes of this article, to send a JSON object, you will use Postman to send custom requests to URLs.\n\nIn Postman, add the URL and change the type to POST. On the body tab, change to raw and select JSON from the drop-down.\n\nThese settings are required so Postman can send JSON data properly, and so your Flask app will understand that it is receiving JSON:\n\nNext, copy the earlier JSON example into the text input.\n\nSend the request, and you should get as the response. That is fairly anti-climatic but is to be expected because the code for handling the JSON data response has yet to be written.\n\nTo read the data, you must understand how Flask translates JSON data into Python data structures:\n• Anything that is an object gets converted to a Python dict. in JSON corresponds to , which returns a value in Python.\n• An array in JSON gets converted to a list in Python. Since the syntax is the same, here’s an example list:\n• The values inside of quotes in the JSON object become strings in Python.\n• Boolean and become and in Python.\n• Finally, numbers without quotes around them become numbers in Python.\n\nNow let’s work on the code to read the incoming JSON data.\n\nFirst, let’s assign everything from the JSON object into a variable using .\n\nconverts the JSON object into Python data. Let’s assign the incoming request data to variables and return them by making the following changes to the route:\n\nNote how you access elements that aren’t at the top level. is used because you are entering a nested object. And is used to access the 0th index in the examples array.\n\nIf the JSON object sent with the request doesn’t have a key that is accessed in your view function, then the request will fail. If you don’t want it to fail when a key doesn’t exist, you’ll have to check if the key exists before trying to access it.\n\nRun the app and submit the example JSON request using Postman. In the response, you will get the following output:\n\nIn this article, you built a Flask application with three routes that accept either query strings, form data, or JSON objects.\n\nAlso, recall that all approaches had to address the recurring consideration for gracefully failing when a key is missing.\n\nIf you’d like to learn more about Flask, check out our Flask topic page for exercises and programming projects."
    },
    {
        "link": "https://nobledesktop.com/learn/ai/how-to-handle-form-data-in-flask-a-practical-approach",
        "document": "How to Use Copilot Mobile Apps\n\nThinking about using Microsoft's CoPilot app for business? Think again—learn why the Microsoft 365 app is the right choice and how to avoid confusion."
    },
    {
        "link": "https://jeasyui.com/documentation/combotree.php",
        "document": "Extend from $.fn.combo.defaults and $.fn.tree.defaults. Override defaults with $.fn.combotree.defaults.\n\nThe combotree combines the selection control with drop-down tree. It is similar to combobox but replace the list with tree component. The combotree supports a tree with tree-state checkboxes for convenient multiple selection.\n\nThe properties extend from combo and tree, below is the overridden properties for combotree.\n\nThe events extend from combo and tree.\n\nThe methods extend from combo, below is the added and overridden methods for combotree."
    },
    {
        "link": "https://stackoverflow.com/questions/12597837/how-to-use-events-and-event-handlers-inside-a-jquery-plugin",
        "document": "I'm triyng to build a simple animation jQuery-plugin. The main idea is to take an element and manipulate it in some way repeatedly in a fixed intervall which would be the fps of the animation.\n\nI wanted to accomplish this through events. Instead of using loops like for() or while() I want to repeat certain actions through triggering events. The idea behind this: I eventualy want to be able to call multiple actions on certain events, like starting a second animation when the first is done, or even starting it when one animation-sequence is on a certain frame.\n\nNow I tried the following (very simplified version of the plugin):\n\nThen i call the animation like this:\n\nAnd then – nothing happens. No events get fired. My question: why? Is it not possible to use events like this inside of a jQuery plugin? Do I have to trigger them 'manualy' in $(document).ready() (what I would not prefer, because it would be a completely different thing – controling the animation from outside the plugin. Instead I would like to use the events inside the plugin to have a certain level of 'self-control' inside the plugin). I feel like I'm missing some fundamental thing about custom events (note: I'm still quite new to this) and how to use them...\n\nThx for any help.\n\nThe event handling and triggering actually works, I just had to call the checkProgress function first:\n\nI had to do this:\n\nSo the event listening function has to be called before any event gets triggered, what of course makes perfect sense..."
    },
    {
        "link": "https://jqueryscript.net/form/Drop-Down-Combo-Tree.html",
        "document": "Combo Tree is a jQuery plugin to render a single or multi-select dropdown list from JSON data that enables the user to select one or multiple options from a hierarchical, collapsible tree view with checkboxes.\n\nHow to use it:\n\n2. Insert the script if you want to enable the autocomplete/filter functionality on the dropdown tree.\n\n3. Define your own hierarchical data as these:\n\n4. Attach the dropdown tree to a regular input field and done.\n\n5. Enable the multi-select functionality on the dropdown tree.\n\n7. Determine whether the parent selection should cascade to children in multiple selection. Default: false.\n\n9. Select the last node and skip its parent on click. Default: false.\n\n11. Determine whether to set parent's class according to parent's attribute.\n• Many bugs resolved on both UI and Functionality sides.\n• Update the classname of the arrow down icon\n• Setting type attribute on button element prevents submission when this input is used within a form.\n• Fixed showing a blank input when using the default selected\n\nThis awesome jQuery plugin is developed by erhanfirat. For more Advanced Usages, please check the demo page or visit the official website."
    },
    {
        "link": "https://stackoverflow.com/questions/6234657/jquery-plugin-combobox-event-onchange",
        "document": "I have a problem with this plugin http://jquery.sanchezsalvador.com/jquery/page/jquerycombobox.aspx On my page there are a few select boxes, which transformed by jquery.combobox. As far as it's transformed, it has different html like this\n\nI read documentation about events in this plugin. I wanna listen to onChange event and do something, but it doesn't work.\n\nWhat is wrong here?"
    },
    {
        "link": "https://github.com/erhanfirat/combo-tree",
        "document": "\n• Many bugs resolved on both UI and Functionality sides.\n\nComboTree is a jQuery Plugin which is a combobox item within tree structured data list and multiple/single selection options and more. It has been developed to manage large amount of choices in a combobox and multi selection feature.\n• Key controls are available for both selection and filter inputs.\n• isMultiple: {true/false} | default: false | decide if it is multiple selection behaviour or single\n• cascadeSelect: {true/false} | default: false | decide if parent selection should cascade to children in multiple selection\n• selected: {JSON Data Array} | takes the list of ID's that corespond from the source.\n• selectAll: {true/false} | default: false | decide if use 'select all' feature.\n• getSelectedNames(): Returns selected item(s) name list as array or null. (i.e. [\"Piegon\", \"Cat\", \"Horse\"], [\"Lion\"], null)\n• setSource(): You can initialize ComboTree then set source after your JSON data is retrieved.\n• setSelection(selectionIdList): Set selected values of combotree by id array or single id parameter. If you want to clear previous selections please use clearSelection() before setSelection(). (i.e. ct1.setSelection([12, 5, 7]) | ct1.setSelection(5)\n\nThere should be an input element to apply and a JSON Data source.\n\nThree parameter are needed: id, title and subs (array).\n\nCan contain the following options:\n• isSelectable: {true/false} | default: true | allows or disallows item to be selected"
    }
]