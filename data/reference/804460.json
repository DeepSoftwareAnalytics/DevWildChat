[
    {
        "link": "https://w3schools.com/html/html5_semantic_elements.asp",
        "document": "A semantic element clearly describes its meaning to both the browser and the developer.\n\nExamples of non-semantic elements: and - Tells nothing about its content.\n\nExamples of semantic elements: , , and - Clearly defines its content.\n\nMany web sites contain HTML code like: <div id=\"nav\"> <div class=\"header\"> <div id=\"footer\"> to indicate navigation, header, and footer.\n\nIn HTML there are several semantic elements that can be used to define different parts of a web page:\n\nAccording to W3C's HTML documentation: \"A section is a thematic grouping of content, typically with a heading.\"\n\nExamples of where a element can be used:\n\nA web page could normally be split into sections for introduction, content, and contact information.\n\nAn article should make sense on its own, and it should be possible to distribute it independently from the rest of the web site.\n\nExamples of where the element can be used:\n\nCan we use the definitions to decide how to nest those elements? No, we cannot!\n\nSo, you will find HTML pages with elements containing elements, and elements containing elements.\n\nThe element represents a container for introductory content or a set of navigational links.\n• one or more heading elements (<h1> - <h6>)\n\nNote: You can have several elements in one HTML document. However, cannot be placed within a , or another element.\n\nThe element defines a footer for a document or section.\n\nYou can have several elements in one document.\n\nThe element defines some content aside from the content it is placed in (like a sidebar).\n\nThe content should be indirectly related to the surrounding content.\n\nThe tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.\n\nThe tag defines a caption for a element. The element can be placed as the first or as the last child of a element.\n\nAccording to the W3C: \"A semantic Web allows data to be shared and reused across applications, enterprises, and communities.\"\n\nBelow is a list of some of the semantic elements in HTML."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/Structuring_documents",
        "document": "In addition to defining individual parts of your page (such as \"a paragraph\" or \"an image\"), HTML also boasts a number of block level elements used to define areas of your website (such as \"the header\", \"the navigation menu\", \"the main content column\"). This article looks into how to plan a basic website structure, and write the HTML to represent this structure. Basic HTML familiarity, as covered in Basic HTML Syntax. Text-level semantics such as headings and paragraphs and lists.\n• The common HTML semantic structural elements, for example , , , , , and , and how to use them correctly.\n• The need to use semantic elements in appropriate places, rather than just using elements wherever a block-level container is required, and the benefits of this (such as improved accessibility).\n\nWebpages can and will look pretty different from one another, but they all tend to share similar standard components, unless the page is displaying a fullscreen video or game, is part of some kind of art project, or is just badly structured: Usually a big strip across the top with a big heading, logo, and perhaps a tagline. This usually stays the same from one page of a website to another. Links to the site's main sections; usually represented by menu buttons, links, or tabs. Like the header, this content usually remains consistent from one webpage to another — having inconsistent navigation on your website will just lead to confused, frustrated users. Many web designers consider the navigation bar to be part of the header rather than an individual component, but that's not a requirement; in fact, some also argue that having the two separate is better for accessibility, as screen readers can read the two features better if they are separate. A big area in the center that contains most of the unique content of a given webpage, for example, the video you want to watch, or the main story you're reading, or the map you want to view, or the news headlines, etc. This is the one part of the website that definitely will vary from page to page! Some peripheral info, links, quotes, ads, etc. Usually, this is contextual to what is contained in the main content (for example on a news article page, the sidebar might contain the author's bio, or links to related articles) but there are also cases where you'll find some recurring elements like a secondary navigation system. A strip across the bottom of the page that generally contains fine print, copyright notices, or contact info. It's a place to put common information (like the header) but usually, that information is not critical or secondary to the website itself. The footer is also sometimes used for SEO purposes, by providing links for quick access to popular content. A \"typical website\" could be structured something like this: Note: The image above illustrates the main sections of a document, which you can define with HTML. However, the appearance of the page shown here — including the layout, colors, and fonts — is achieved by applying CSS to the HTML.\n\nActive learning: exploring the code for our example Our example seen above is represented by the following code (you can also find the example in our GitHub repository). We'd like you to look at the example above, and then look over the listing below to see what parts make up what section of the visual. <!doctype html> <html lang=\"en-US\"> <head> <meta charset=\"utf-8\" /> <meta name=\"viewport\" content=\"width=device-width\" /> <title>My page title</title> <link href=\"https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One\" rel=\"stylesheet\" /> <link rel=\"stylesheet\" href=\"style.css\" /> </head> <body> <!-- The main header used across all the pages of our website --> <header> <h1>Header</h1> </header> <nav> <ul> <li><a href=\"#\">Home</a></li> <li><a href=\"#\">Our team</a></li> <li><a href=\"#\">Projects</a></li> <li><a href=\"#\">Contact</a></li> </ul> <!-- A Search form: another common non-linear way to navigate through a site. --> <form> <input type=\"search\" name=\"q\" placeholder=\"Search query\" /> <input type=\"submit\" value=\"Go!\" /> </form> </nav> <!-- Our page's main content --> <main> <!-- An article --> <article> <h2>Article heading</h2> <p> Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. </p> <section> <h3>Subsection</h3> <p> Donec ut librero sed accu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aenean ut gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. </p> <p> Pelientesque auctor nisi id magna consequat sagittis. Curabitur dapibus, enim sit amet elit pharetra tincidunt feugiat nist imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. </p> </section> <section> <h3>Another subsection</h3> <p> Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum soclis natoque penatibus et manis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est. </p> <p> Vivamus fermentum semper porta. Nunc diam velit, adipscing ut tristique vitae sagittis vel odio. Maecenas convallis ullamcorper ultricied. Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, is fringille sem nunc vet mi. </p> </section> </article> <!-- the aside content can also be nested within the main content --> <aside> <h2>Related</h2> <ul> <li><a href=\"#\">Oh I do like to be beside the seaside</a></li> <li><a href=\"#\">Oh I do like to be beside the sea</a></li> <li><a href=\"#\">Although in the North of England</a></li> <li><a href=\"#\">It never stops raining</a></li> <li><a href=\"#\">Oh well…</a></li> </ul> </aside> </main> <!-- The footer that is used across all the pages of our website --> <footer> <p>©Copyright 2050 by nobody. All rights reversed.</p> </footer> </body> </html> Take some time to look over the code and understand it — the comments inside the code should also help you to understand it. We aren't asking you to do much else in this article, because the key to understanding document layout is writing a sound HTML structure, and then laying it out with CSS. We'll wait for this until you start to study CSS layout as part of the CSS topic.\n\nSometimes you'll come across a situation where you can't find an ideal semantic element to group some items together or wrap some content. Sometimes you might want to just group a set of elements together to affect them all as a single entity with some CSS or JavaScript. For cases like these, HTML provides the and elements. You should use these preferably with a suitable attribute, to provide some kind of label for them so they can be easily targeted. is an inline non-semantic element, which you should only use if you can't think of a better semantic text element to wrap your content, or don't want to add any specific meaning. For example: <p> The King walked drunkenly back to his room at 01:00, the beer doing nothing to aid him as he staggered through the door. <span class=\"editor-note\"> [Editor's note: At this point in the play, the lights should be down low]. </span> </p> In this case, the editor's note is supposed to merely provide extra direction for the director of the play; it is not supposed to have extra semantic meaning. For sighted users, CSS would perhaps be used to distance the note slightly from the main text. is a block level non-semantic element, which you should only use if you can't think of a better semantic block element to use, or don't want to add any specific meaning. For example, imagine a shopping cart widget that you could choose to pull up at any point during your time on an e-commerce site: This isn't really an , as it doesn't necessarily relate to the main content of the page (you want it viewable from anywhere). It doesn't even particularly warrant using a , as it isn't part of the main content of the page. So a is fine in this case. We've included a heading as a signpost to aid screen reader users in finding it. Warning: Divs are so convenient to use that it's easy to use them too much. As they carry no semantic value, they just clutter your HTML code. Take care to use them only when there is no better semantic solution and try to reduce their usage to the minimum otherwise you'll have a hard time updating and maintaining your documents.\n\nTwo elements that you'll use occasionally and will want to know about are and . creates a line break in a paragraph; it is the only way to force a rigid structure in a situation where you want a series of fixed short lines, such as in a postal address or a poem. For example: <p> There once was a man named O'Dell<br /> Who loved to write HTML<br /> But his structure was bad, his semantics were sad<br /> and his markup didn't read very well. </p> Without the elements, the paragraph would just be rendered in one long line (as we said earlier in the course, HTML ignores most whitespace); with elements in the code, the markup renders like this: elements create a horizontal rule in the document that denotes a thematic change in the text (such as a change in topic or scene). Visually it just looks like a horizontal line. As an example: <p> Ron was backed into a corner by the marauding netherbeasts. Scared, but determined to protect his friends, he raised his wand and prepared to do battle, hoping that his distress call had made it through. </p> <hr /> <p> Meanwhile, Harry was sitting at home, staring at his royalty statement and pondering when the next spin off series would come out, when an enchanted distress letter flew through his window and landed in his lap. He read it hazily and sighed; \"better get back to work then\", he mused. </p>"
    },
    {
        "link": "https://geeksforgeeks.org/html5-semantics",
        "document": "HTML5 introduced a range of semantic elements that clearly describe their purpose in human and machine-readable language. Unlike non-semantic elements, which provide no information about their content, semantic elements clearly define their content.\n\nFor instance, <form>, <table>, and <article> tags clearly define the content and purpose, to the browser.\n• Accessibility: Semantic elements make web pages more accessible. Screen readers and other assistive technologies can interpret the structure and navigate the content more efficiently.\n• SEO: Better structured data leads to better SEO. Search engines prioritize well-structured content that uses semantic elements correctly, as it’s easier to index.\n• Maintainability: Semantic HTML helps create a logically structured document, which is easier to read and maintain.\n\nHere are some of the fundamental HTML5 semantic elements that you should use to structure your web content:\n\nThe <article> tag is used for content that stands alone and can be independently distributed or reused, such as a blog post or news article.\n\nIt is used to place content in a sidebar i.e. aside from the existing content. It is related to surrounding content.\n\nThe “details” defines additional details that the user can hide or view. “summary” defines a visible heading for a “details” element.\n\nThese are used to add an image to a web page with a small description.\n\nAs the name suggests, it is for the header of a section introductory of a page. There can be multiple headers on a page.\n\nFooter located at the bottom of any article or document, they can contain contact details, copyright information etc. There can be multiple footers on a page.\n\nExample: The below example shows the implementation of the Footer.\n\nIt defines the main content of the document. The content inside the main tag should be unique.\n\nA page can be split into sections like Introduction, Contact Information, Details, etc and each of these sections can be in a different section tag.\n\nIt is used to define a set of navigation links in the form of a navigation bar or nav menu.\n\nExample: The below example shows the implementation of the nav tag.\n\nIt is used to highlight the text.\n\nBest Practices for Using HTML5 Semantic Elements\n• Do not overuse <div>: Use semantic elements where appropriate instead of non-semantic <div> elements to provide more specific information about the content.\n• Structure content logically: Organize the content within semantic elements to reflect the meaning and importance of the information.\n• Validate your HTML: Use tools like the W3C HTML Validator to ensure that your use of semantic elements adheres to HTML5 standards.\n\nWhat is the use of the <header> element?\n\nWhat does the <footer> element represent?\n\nHow is the <article> element used?\n\nWhat is the role of the <section> element?\n\nWhen should I use the <aside> element?"
    },
    {
        "link": "https://freecodecamp.org/news/semantic-html5-elements",
        "document": "Semantic HTML elements are those that clearly describe their meaning in a human- and machine-readable way.\n\nElements such as , and are all considered semantic because they accurately describe the purpose of the element and the type of content that is inside them.\n\nHTML was originally created as a markup language to describe documents on the early internet. As the internet grew and was adopted by more people, its needs changed.\n\nWhere the internet was originally intended for sharing scientific documents, now people wanted to share other things as well. Very quickly, people started wanting to make the web look nicer.\n\nBecause the web was not initially built to be designed, programmers used different hacks to get things laid out in different ways. Rather than using the to describe information using a table, programmers would use them to position other elements on a page.\n\nAs the use of visually designed layouts progressed, programmers started to use a generic “non-semantic” tag like . They would often give these elements a or attribute to describe their purpose. For example, instead of this was often written as .\n\nAs HTML5 is still relatively new, this use of non-semantic elements is still very common on websites today.\n\nThe semantic elements added in HTML5 are:\n\nElements such as , , , , , and act more or less like elements. They group other elements together into page sections. However where a tag could contain any type of information, it is easy to identify what sort of information would go in a semantic region.\n\nAn example of semantic element layout by w3schools\n\nTo look at the benefits of semantic elements, here are two pieces of HTML code. This first block of code uses semantic elements:\n\nWhilst this second block of code uses non-semantic elements:\n\nFirst, it is much easier to read. This is probably the first thing you will notice when looking at the first block of code using semantic elements. This is a small example, but as a programmer you can be reading through hundreds or thousands of lines of code. The easier it is to read and understand that code, the easier it makes your job.\n\nIt has greater accessibility. You are not the only one that finds semantic elements easier to understand. Search engines and assistive technologies (like screen readers for users with a sight impairment) are also able to better understand the context and content of your website, meaning a better experience for your users.\n\nOverall, semantic elements also lead to more consistent code. When creating a header using non-semantic elements, different programmers might write this as , , , or simply . There are so many ways that you can create a header element, and they all depend on the personal preference of the programmer. By creating a standard semantic element, it makes it easier for everyone.\n\nSince October 2014, HTML4 got upgraded to HTML5, along with some new “semantic” elements. To this day, some of us might still be confused as to why so many different elements that doesn’t seem to show any major changes.\n\n“What’s the difference?”, you may ask. Both these elements are used for sectioning a content, and yes, they can definitely be used interchangeably. It’s a matter of in which situation. HTML4 offered only one type of container element, which is . While this is still used in HTML5, HTML5 provided us with and in a way to replace .\n\nThe and elements are conceptually similar and interchangeable. To decide which of these you should choose, take note of the following:\n• An article is intended to be independently distributable or reusable.\n\nThe element is generally found at the top of a document, a section, or an article and usually contains the main heading and some navigation and search tools.\n\nThe element should be used where you want a main heading with one or more subheadings.\n\nREMEMBER, that the element can contain any content, but the element can only contain other headers, that is to and including .\n\nThe element is intended for content that is not part of the flow of the text in which it appears, however still related in some way. This of as a sidebar to your main content.\n\nBefore HTML5, our menus were created with ’s and ’s. Now, together with these, we can separate our menu items with a , for navigation between your pages. You can have any number of elements on a page, for example, its common to have global navigation across the top (in the ) and local navigation in a sidebar (in an element).\n\nIf there is a there must be a . A is generally found at the bottom of a document, a section, or an article. Just like the the content is generally metainformation, such as author details, legal information, and/or links to related information. It is also valid to include elements within a footer.\n\nThe element often appears within a or element which would usually contain copyright information or legal disclaimers, and other such fine print. However, this is not intended to make the text smaller. It is just describing its content, not prescribing presentation.\n\nThe element allows an unambiguous ISO 8601 date to be attached to a human-readable version of that date.\n\nWhy bother with ? While humans can read time that can disambiguate through context in the normal way, the computers can read the ISO 8601 date and see the date, time, and the time zone.\n\nis for wrapping your image content around it, and is to caption your image.\n\nLearn more about the new HTML5 elements:\n• w3schools provides simple and clear descriptions of many of the news elements and how/where they should be used.\n• MDN also provides a great reference for all HTML elements and goes deeper into each."
    },
    {
        "link": "https://web.dev/learn/html/semantic-html",
        "document": "With over 100 HTML elements, and the ability to create custom elements, there are infinite ways to mark up your content; but some ways—notably semantically—are better than others.\n\nSemantic means \"relating to meaning\". Writing semantic HTML means using HTML elements to structure your content based on each element's meaning, not its appearance.\n\nThis series hasn't covered many HTML elements yet, but even without knowing HTML, the following two code snippets show how semantic markup can give content context. Both use a word count instead of ipsum lorem to save some scrolling—use your imagination to expand \"thirty words\" into 30 words:\n\nThe first code snippet uses and , two elements with no semantic value.\n\nDo you get a sense of what those words expand to? Not really.\n\nWhich code block conveyed meaning? Using only the non-semantic elements of and , you really can't tell what the content in the first code block represents. The second code example, with semantic elements, provides enough context for a non-coder to decipher the purpose and meaning without having ever encountered an HTML tag. It definitely provides enough context for the developer to understand the outline of the page, even if they don't understand the content, such as content in a foreign language.\n\nIn the second code block, we can understand the architecture even without understanding the content because semantic elements provide meaning and structure. You can tell that the first header is the site's banner, with the likely to be the site name. The footer is the site footer: the five words may be a copyright statement or business address.\n\nSemantic markup isn't just for making markup easier for developers to read; it's mostly important in helping automated tools decipher markup. Developer tools demonstrate how semantic elements provide machine-readable structure as well.\n\nAs the browser parses the content received, it builds the document object model (DOM) and the CSS object model (CSSOM). It then also builds an accessibility tree. Assistive devices, such as screen readers, use the AOM to parse and interpret content. The DOM is a tree of all the nodes in the document. The AOM is like a semantic version of the DOM.\n\nLet's compare how both of these document structures are rendered in the Firefox accessibility panel:\n\nIn figure 2, there are four landmark roles in the second code block. It uses semantic landmarks conveniently named , , , and for \"navigation.\" Landmarks provide structure to web content and ensure important sections of content are keyboard-navigable for screen reader users.\n\nNote that and are landmarks, with the roles of and respectively, when they are not nested in other landmarks. Chrome's AOM shows this as follows:\n\nLooking at Chrome developer tools, you'll note a significant difference between the accessibility object model when using semantic elements versus when you don't.\n\nIt's pretty clear that semantic element usage helps accessibility, and using non-semantic elements reduces accessibility. HTML is generally, by default, accessible. Our job as developers is to both protect the default accessible nature of HTML and ensure that we maximize accessibility for our users. You can inspect the AOM in developer tools.\n\nThe attribute describes the role an element has in the context of the document. The attribute is a global attribute—meaning it is valid on all elements—defined by the ARIA specification rather than the WHATWG HTML specification, where almost everything else in this series is defined.\n\nSemantic elements each have an implicit role, some depending on the context. As we saw in the Firefox accessibility dev tools screenshot, the top level , , , and were all landmarks, while the nested in was a section. The Chrome screenshot lists these elements' ARIA roles: is , is , and , as it was the footer of the document, is . When is the header for the document, the default role is , which defines the section as the global site header. When a or is nested within a sectioning element, it is not a landmark role. Both dev tools' screenshots show this.\n\nElement role names are important in building the AOM. The semantics of an element, or 'role', are important to assistive technologies and, in some cases, search engines. Assistive technology users rely on semantics to navigate through and understand the meaning of content. The element's role enables a user to access the content they seek quickly and, possibly, more importantly, the role informs the screen reader user how to interact with an interactive element once it has focus.\n\nInteractive elements, such as buttons, links, ranges, and checkboxes, all have implicit roles, all are automatically added to the keyboard tab sequence, and all have default expected user action support. The implicit role, or explicit value, informs the user to expect element-specific default user interactions.\n\nUsing the attribute, you can give any element a role, including a different role than the tag implies. For example, has the implicit role of . With , you can turn any element semantically into a button: .\n\nWhile adding to an element will inform screen readers that the element is a button, it doesn't change the appearance or functionality of the element. The element provides so many features without you doing any work. The element is automatically added to the document's tab ordering sequence, meaning it is by default keyboard focusable. The Enter and Space keys both activate the button. Buttons also have all the methods and properties provided to them by the HTMLButtonElement interface. If you don't use the semantic button for your button, you have to program all those features back in. It's so much easier to just go with .\n\nGo back to the screenshot of the AOM for the non-semantic code block. You'll note that non-semantic elements don't have implicit roles. We can make the non-semantic version semantic by assigning each element a role:\n\nWhile the attribute can be used to add semantics to any element, you should instead use elements with the implicit role you need.\n\nAsking yourself, \"Which element best represents the function of this section of markup?\" will generally result in you picking the best element for the job. The element you choose, and therefore the tags you use, should be appropriate for the content you are displaying, as tags have semantic meaning.\n\nHTML should be used to structure content, not to define content's appearance. The appearance is the realm of CSS. While some elements are defined to appear a certain way, don't use an element based on how the user agent style sheet makes that element appear by default. Rather, select each element based on the element's semantic meaning and functionality. Coding HTML in a logical, semantic, and meaningful way helps to ensure CSS is applied as intended.\n\nChoosing the right elements for the job as you code means you won't have to refactor or comment your HTML. If you think about using the right element for the job, you'll most often pick the right element for the job. If you don't, you probably won't. When you understand the semantics of each element and are aware of why choosing the right element is important, you will generally be able to make the right choice without much additional effort.\n\nNext, you'll use semantic elements to build your document structure."
    },
    {
        "link": "https://css-tricks.com/snippets/css/a-guide-to-flexbox",
        "document": "The (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”). The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow. Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.). Note: Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.\n\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”). If “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout. Items will be laid out following either the (from to ) or the cross axis (from to ).\n• main axis – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the property (see below).\n• main-start | main-end – The flex items are placed within the container starting from main-start and going to main-end.\n• main size – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.\n• cross axis – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.\n• cross-start | cross-end – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.\n• cross size – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.\n\nThis defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children. Note that CSS columns have no effect on a flex container. \n\nThis establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.\n• (default): left to right in ; right to left in\n• : right to left in ; left to right in\n• : same as but top to bottom\n• : same as but bottom to top By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.\n• (default): all flex items will be on one line\n• : flex items will wrap onto multiple lines, from top to bottom.\n• : flex items will wrap onto multiple lines from bottom to top. There are some visual demos of here. This is a shorthand for the and properties, which together define the flex container’s main and cross axes. The default value is . \n\nThis defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.\n• (default): items are packed toward the start of the flex-direction.\n• : items are packed toward the end of the flex-direction.\n• : items are packed toward the start of the direction.\n• : items are packed toward the end of the direction.\n• : items are packed toward left edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are packed toward right edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are centered along the line\n• : items are evenly distributed in the line; first item is on the start line, last item on the end line\n• : items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.\n• : items are distributed so that the spacing between any two items (and the space to the edges) is equal. Note that that browser support for these values is nuanced. For example, never got support from some versions of Edge, and start/end/left/right aren’t in Chrome yet. MDN has detailed charts. The safest values are , , and . There are also two additional keywords you can pair with these values: and . Using ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”). \n\nThis defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the version for the cross-axis (perpendicular to the main-axis).\n• / / : items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the rules or the rules.\n• / / : items are placed at the end of the cross axis. The difference again is subtle and is about respecting rules vs. rules.\n• : items are centered in the cross-axis\n• : items are aligned such as their baselines align The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. \n\nThis aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how aligns individual items within the main-axis. Note: This property only takes effect on multi-line flexible containers, where is set to either or ). A single-line flexible container (i.e. where is set to its default value, ) will not reflect .\n• (default): items are packed in their default position as if no value was set.\n• / : items packed to the start of the container. The (more supported) honors the while honors the direction.\n• / : items packed to the end of the container. The (more support) honors the while end honors the direction.\n• : items evenly distributed; the first line is at the start of the container while the last one is at the end\n• : items evenly distributed with equal space around each line\n• : items are evenly distributed with equal space around them\n• : lines stretch to take up the remaining space The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. The property explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. The behavior could be thought of as a minimum gutter, as if the gutter is bigger somehow (because of something like ) then the gap will only take effect if that space would end up smaller. It is not exclusively for flexbox, works in grid and multi-column layout as well. \n\nBy default, flex items are laid out in the source order. However, the property controls the order in which they appear in the flex container. Items with the same revert to source order. \n\nThis defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. If all items have set to , the remaining space in the container will be distributed equally to all children. If one of the children has a value of , that child would take up twice as much of the space as either one of the others (or it will try, at least). This defines the ability for a flex item to shrink if necessary. This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The keyword means “look at my width or height property” (which was temporarily done by the keyword until deprecated). The keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren , , and do. If set to , the extra space around content isn’t factored in. If set to , the extra space is distributed based on its value. See this graphic. This is the shorthand for and combined. The second and third parameters ( and ) are optional. The default is , but if you set it with a single number value, like , that changes the to 0%, so it’s like setting . It is recommended that you use this shorthand property rather than set the individual properties. The shorthand sets the other values intelligently. \n\nThis allows the default alignment (or the one specified by ) to be overridden for individual flex items. Please see the explanation to understand the available values. Note that , and have no effect on a flex item.\n\nFlexbox requires some vendor prefixing to support the most browsers possible. It doesn’t just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an “old”, “tweener”, and “new” versions. Perhaps the best way to handle this is to write in the new (and final) syntax and run your CSS through Autoprefixer, which handles the fallbacks very well. Alternatively, here’s a Sass to help with some of the prefixing, which also gives you an idea of what kind of things need to be done:\n\nLet’s start with a very very simple example, solving an almost daily problem: perfect centering. It couldn’t be any simpler if you use flexbox. .parent { display: flex; height: 300px; /* Or whatever */ } .child { width: 100px; /* Or whatever */ height: 100px; /* Or whatever */ margin: auto; /* Magic! */ } This relies on the fact a margin set to in a flex container absorb extra space. So setting a margin of will make the item perfectly centered in both axes. Now let’s use some more properties. Consider a list of 6 items, all with fixed dimensions, but can be auto-sized. We want them to be evenly distributed on the horizontal axis so that when we resize the browser, everything scales nicely, and without media queries. .flex-container { /* We first create a flex layout context */ display: flex; /* Then we define the flow direction and if we allow the items to wrap * Remember this is the same as: * flex-direction: row; * flex-wrap: wrap; */ flex-flow: row wrap; /* Then we define how is distributed the remaining space */ justify-content: space-around; } Done. Everything else is just some styling concern. Below is a pen featuring this example. Be sure to go to CodePen and try resizing your windows to see what happens. Let’s try something else. Imagine we have a right-aligned navigation element on the very top of our website, but we want it to be centered on medium-sized screens and single-columned on small devices. Easy enough. /* Large */ .navigation { display: flex; flex-flow: row wrap; /* This aligns items to the end line on main-axis */ justify-content: flex-end; } /* Medium screens */ @media all and (max-width: 800px) { .navigation { /* When on medium sized screens, we center it by evenly distributing empty space around items */ justify-content: space-around; } } /* Small screens */ @media all and (max-width: 500px) { .navigation { /* On small screens, we are no longer using row direction but column */ flex-direction: column; } } Let’s try something even better by playing with flex items flexibility! What about a mobile-first 3-columns layout with full-width header and footer. And independent from source order. .wrapper { display: flex; flex-flow: row wrap; } /* We tell all items to be 100% width, via flex-basis */ .wrapper > * { flex: 1 100%; } /* We rely on source order for mobile-first approach * in this case: * 1. header * 2. article * 3. aside 1 * 4. aside 2 * 5. footer */ /* Medium screens */ @media all and (min-width: 600px) { /* We tell both sidebars to share a row */ .aside { flex: 1 auto; } } /* Large screens */ @media all and (min-width: 800px) { /* We invert order of first sidebar and main * And tell the main element to take twice as much width as the other two sidebars */ .main { flex: 3 0px; } .aside-1 { order: 1; } .main { order: 2; } .aside-2 { order: 3; } .footer { order: 4; } }"
    },
    {
        "link": "https://w3schools.com/css/css3_flexbox_responsive.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://freecodecamp.org/news/learn-flexbox-build-5-layouts",
        "document": "Here's a practical guide to help you learn CSS Flexbox in 2021 by building 5 responsive layouts. Let's dive right in.🥇\n\nYou can check out the Figma design here\n\nYou can also watch this tutorial on my YouTube channel here:\n\nWe need a blueprint when constructing a house. In the same way, we need a blueprint to layout our content across our browser. At the same time, we need to make responsive layouts for various screen sizes.\n\nThis is what Flexbox helps us do – create responsive layouts.\n\nSo how does Flexbox architecture work? The flex-items [Contents] are distributed along the Main Axis and Cross Axis. And, depending on the flex-direction property, the layout position changes between rows and columns.\n\nThis chart contains every possible property and value you can use when using flexbox. You can reference it while doing the project and experimenting with different values.\n\nBefore We Get Started...\n\nYou need to know a little bit of HTML and CSS. Throughout this tutorial, you'll learn how Flexbox works, how its various properties and values work, and how media queries work (which help us make responsive websites).\n\nBefore coding, we need to save some values in variables and clear the default browser styles. Along with that, we will define some media query mixins to save time and avoid code repetition.\n\nSCSS is a preprocessor of CSS which gives us much more functionality than regular CSS.\n\nFor example, we can nest child classes inside their parent class, store values in variables, and much more. It really helps us save time.\n\nLet's start playing around with SCSS. Open CodePen or any code editor and go through this with me, these step by step.👇\n\nHow to Enable SCSS in Codepen 👇\n\nFirst, define the border color, gap, and padding values in your variables.\n\nNext, define various screen breakpoints in the SCSS map. Remember, on our SCSS map, [mobile, tablet, and desktop] are keys and the pixels are values.\n\nTo save time and code, when defining media queries we'll use mixins and loop the breakpoints we defined above. 👆\n\nNow we have to change the default styles of our browser. We remove the margin and padding and set the box-sizing to border-box.\n\nLet's talk about the relationship between the HTML classes we're going to use. Always remember that Flexbox works on child classes.\n\nFor example, Flexbox properties defined on the Container class work on Block, and properties defined on the Block class work on the Box class. Here's an illustrated explanation of what I mean: 👇\n\nNow let's create these layouts. We'll start with an easier difficulty level and move to more advanced layouts.\n\nThe container class will hold 3 children -> block-1, block-2, and block-3.\n\nThe block-1 class will carry 3 boxes -> box-1, box-2, and box-3.\n\nThe same rules apply for the block-2 and block-3 classes, but the values will be changed.\n\nNow, we're going to style our container class. Remember, to trigger Flexbox and access all its powers, you need to write like this:\n\nSelect all the classes and style them together. At the same time, at the bottom, we will define our media query using the mixin we created during the setup phase.\n\nAlright then, next select all the classes and style them together like this:\n\nRemove the HTML code of level-1 and write this code instead. Basically it's 1 parent class with 4 child classes.\n\nHere are the style rules for the container class for level-2. At the bottom, we will set up a media query using the mixin.\n\nNow, we'll work with this code block:\n\nThe Style rules of the container class with the media query mixin are included at the bottom for level-3:\n\nHere, we select and style all classes along with the media query for mobile display:\n\nNow we individually target the block-1 and block-2 classes. We also change the flex-grow value in order to distribute screen space.\n\nThe HTML rules here are similar to level-1 with a few changes:\n\nStyle the container class like this:\n\nNext, select and style all the classes together along with the media query mixin at the bottom for mobile devices:\n\nNow select and style all the classes together:\n\nNow, we'll individually target the boxes and use flex-basis to distribute screen space.\n\nFinally, we will include the media query mixin for the mobile version.\n\nAre you winning yet? Let's turn up the heat. 🥵\n\nThe HTML rules here are similar to level-1 and level-4 with a few changes:\n\nFirst, change the container class styles like this:\n\nThen, target and style all classes together.\n\nNext, target and style all classes together.\n\nThen individually target the boxes and use flex-basis to distribute screen space.\n\nLastly, include the media query mixin for the mobile version. Notice that we are hiding box-2 for the mobile version.\n\nThanks for following along! Hopefully now you understand the basics of Flexbox. Here's your medal for reading till the end. ❤️\n\nSuggestions and criticisms are highly appreciated ❤️ Do get in touch with me via the social media links below if you have any questions."
    },
    {
        "link": "https://dev.to/joanayebola/css-flexbox-the-ultimate-guide-to-creating-responsive-web-layouts-m4e",
        "document": "In Web Development, it has become vital to create responsive layouts that adapt to various screen sizes and devices. To achieve responsive design, CSS Flexbox is an amazing and invaluable resource.\n\nCSS Flexbox (also known as Flexbox Layout) provides a flexible way to distribute and align elements within a container. Flexbox Layout simplifies the process of building complex layouts and achieving responsive designs.\n\nIn this article, I will provide a comprehensive overview of CSS Flexbox, offer in-depth exploration of CSS Flexbox core principles and demonstrate how it can be utilized to achieve flexible and responsive web layouts.\n\nCONCEPT OF CSS FLEXBOX\n\n The introduction of CSS Flexbox has revolutionized the way web layouts are designed and developed. It has simplified the process of creating adaptive and responsive designs, cutting off the need for complex adjustments and calculations. It provides a way to arrange elements on a web page, so they can change their size and position to fit different sizes.\n\n It is essential to grasp the concepts of the Flex Container and Flex Items, which are the key components in utilizing CSS Flexbox effectively.\n\nFLEX CONTAINER\n\n The Flex container (also known as Flexbox container) is like a box that holds other elements. It allows flexible arrangement and alignment of elements within a container. To make a flex container, you can add this line of code to the container element:\n\n\n\nWhen you apply display: flex to an element, the element becomes a flex container. This means that the container element becomes a parent to the child elements which are referred to as flex items, enabling them to participate in the flex layout.\n\n You might have figured it out now, The Flex Item is void without the Flex Container. A simpler way to look at it, the child cannot exist without the Parent, hence the Flex Item cannot exist without the Flex Container.\n\nFLEX ITEM\n\n As earlier mentioned, the Flex Item is the child to the parent element Flex Container. By default, they are aligned horizontally in a row but can be modified to be vertically aligned.\n\n To understand Flex Item better, let’s take a look at this example:\n\n\n\nIn the code above, we have a div element with the class name “container.” This element acts as the Flex Container, it contains the Flex Items which are represented by the div elements inside it. Each of the div elements have the class name “item”\n\nESSENTIAL CONCEPTS AND PROPERTIES\n\n CSS Flexbox has a wide range of user-friendly concepts and properties to mold the layout and appearance of Flex Containers and Flex items. Here are some of the friendly properties offered by CSS Flexbox along with corresponding code snippets to demonstrate their usage:\n• Flex Direction: Flex-direction determines the alignment and direction of Flex Items. It controls whether the Flex Items are arranged horizontally in a row or vertically in a column. Values can be ‘row’, ‘row-reverse’, ‘column’, or ‘column-reverse’\n\nBy setting ‘flex-direction’ to ‘row’, the flex items will be positioned side by side horizontally, forming a row-like layout. This is the default value for ‘flex-direction’, so if no other value is set, the flex item will be laid out in a row.\n\nSetting the value of the ‘flex-direction’ property to “column” enables the creation of vertical layouts, where Flex items are arranged in a column-like manner. This is especially valuable when designing layouts like vertical navigation menus or stacked content sections.\n\n\n\nBy modifying the ‘flex-direction’ property and setting it to ‘row-reverse’, you can create horizontal layouts where flex items flow in a reversed order. This can be useful when you want to present content or elements in right-to-left orientation, such as for language that are read from right to left.\n\n\n\nBy modifying the ‘flex-direction’ property and setting it to ‘column-reverse’, you can create vertical layouts where flex items flow in a reversed order. This can be useful when you want to present content or elements in bottom-to-top orientation, for example, in scenarios where the most recent or important items are placed at the top.\n• Justify-Content: The ‘justify-content’ property in CSS Flexbox allows you to control how Flex Items are positioned and aligned along the horizontal axis within a Flex Container. It determines how the space is distributed among the Flex Items, influencing their arrangement and spacing within the container. By adjusting this property, you can control how flex items are visually positioned, whether they are aligned to the start, end, center of the container or distributed with space between or around them. Values include ‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’ and more.\n\nBy setting the ‘justify-content’ property to “flex-start”, the Flex Items will be aligned to the start of the container along the main axis. This means that the item s will be positioned at the beginning of the container, with any remaining space appearing at the end of the container.\n\nIn simpler terms, the ‘justify-content: flex-start;’ declaration ensures that the Flex Items are pushed to the left side of the container if the main axis is horizontal (row direction) or to the top of the container if the main axis is vertical (column direction).\n\nThis is the default value for ‘justify-content’, meaning if no other value is set, the flex items will naturally align to the start of the container.\n\nBy setting it to ‘flex-end’, the Flex Items will be aligned to the end of the container along the main axis. This means that the items will be positioned at the right side of the container if the main axis is horizontal (row direction) or at the bottom of the container if the main axis is vertical (column direction)\n\nIn simpler terms, the ‘justify-content: flex-end;’ declaration ensures that the flex items are pushed to the right side of the container if the main axis is horizontal or to the bottom of the container if the main axis is vertical.\n\nWhen the ‘justify-content’ property is set to “center”, it will horizontally center the Flex Items within the container. This means, that the items will be evenly distributed with equal space on both sides, pushing them towards the center of the container.\n\nWhen ‘justify-content’ is set to “space-between”, it means that the content within the container will be distributed evenly along the horizontal axis, with equal spaces placed between each item. The first item will be align to the start of the container, the last item will align to the end of the container and any remaining items will be spaced out equally between them.\n\nWhen ‘justify-content’ is set to “space-around”, it distributes the Flex Items with equal space around them along the main axis. This means that the available space between the Flex Items is divided equally and placed both before the first item and after the last item. The space is also evenly distributed between each pair of adjacent items.\n• Align Items The ‘align-items’ property allows you to control how flex items are aligned vertically within their container. By default, flex items are aligned to the start of the container. However, using the ‘align-items’ property, you can modify the layout to achieve the desired alignment. Let's explore the various values that the property can take:\n\nflex-start aligns the flex items to the start of the container, stacking them from the top.\n\nwith flex-end, flex items are aligned to the end of the container, stacking them from the bottom.\n\nThe center property centers the flex items vertically within the container.\n\n\n\nThe value aligns the flex items such that their baselines are aligned. This is particularly useful when dealing with text elements of different sizes.\n\n\n\nWhen using the value, the flex items will stretch vertically to fill the container's height. This is the default behavior.\n\nConclusion\n\n In conclusion, CSS Flexbox is an essential tool for creating responsive web layouts and adapting them to various screen sizes and devices. By understanding the core concepts of Flex Containers and Flex Items, web designers and developers can harness the power of Flexbox to simplify the process of building complex layouts.\n\nThank you for reading. Connect with me on twitter"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/CSS_layout/Flexbox",
        "document": "In this article, you'll work through a series of exercises to help you understand how flexbox works. To get started, you should make a local copy of the HTML and CSS. Load it in a modern browser (like Firefox or Chrome) and have a look at the code in your code editor. Alternatively open the example in open the playground. body { font-family: sans-serif; margin: 0; } header { background: purple; height: 100px; } h1 { text-align: center; color: white; line-height: 100px; margin: 0; } section { zoom: 0.8; } article { padding: 10px; margin: 10px; background: aqua; } /* Add your flexbox CSS below here */ You'll see that we have a element with a top level heading inside it and a element containing three s. We're going to use these to create a fairly standard three column layout.\n\nSpecifying what elements to lay out as flexible boxes To start with, we need to select which elements are to be laid out as flexible boxes. To do this, we set a special value of on the parent element of the elements you want to affect. In this case we want to lay out the elements, so we set this on the : body { font-family: sans-serif; margin: 0; } header { background: purple; height: 100px; } h1 { text-align: center; color: white; line-height: 100px; margin: 0; } section { zoom: 0.8; } article { padding: 10px; margin: 10px; background: aqua; } /* Add your flexbox CSS below here */ This causes the element to become a flex container and its children become flex items. This is what it looks like: This single declaration gives us everything we need. Incredible, right? We have a multiple column layout with equal-sized columns, and the columns are all the same height. This is because the default values given to flex items (the children of the flex container) are set up to solve common problems such as this. Let's recap what's happening here. Adding a value of to an element makes it a flex container. The container is displayed as Block-level content in terms of how it interacts with the rest of the page. When the element is converted to a flex container, its children are converted to (and laid out as) flex items. You can make the container inline using an outside value (e.g., ), which affects how the container itself is laid out in the page. The legacy display value displays the container as inline as well. We'll focus on how the contents of the container behave in this tutorial, but if you want to see the effect of inline versus block layout, you can have a look at the value comparison on the property page. The next sections explain in more detail what flex items are and what happens inside an element when you make it a flex container.\n\nOne issue that arises when you have a fixed width or height in your layout is that eventually your flexbox children will overflow their container, breaking the layout. In the following example we have 5 s, which don't fit, because they have a of , so there is a horizontal scroll. Here we see that the children are indeed breaking out of their container. By default, the browser tries to place all the flex items in a single row if the is set to or a single column if the is set to . One way in which you can fix this is to add the following declaration to your rule: You'll see that the layout looks much better with this included: We now have multiple rows. Each row has as many flexbox children fitted into it as is sensible. Any overflow is moved down to the next line. The declaration set on the articles means that each will be at least wide. We'll discuss this property in more detail later on. You might also notice that the last few children on the last row are each made wider so that the entire row is still filled. But there's more we can do here. First of all, try changing your property value to . Now you'll see that you still have your multiple row layout, but it starts from the opposite corner of the browser window and flows in reverse.\n\nLet's now return to our first example and look at how we can control what proportion of space flex items take up compared to the other flex items. In your local copy, add the following rule to the bottom of your CSS: This is a unitless proportion value that dictates how much available space along the main axis each flex item will take up compared to other flex items. In this case, we're giving each element the same value (a value of ), which means they'll all take up an equal amount of the spare space left after properties like padding and margin have been set. This value is proportionally shared among the flex items: giving each flex item a value of would have exactly the same effect. Now add the following rule below the previous one: Now when you refresh, you'll see that the third takes up twice as much of the available width as the other two. There are now four proportion units available in total (since 1 + 1 + 2 = 4). The first two flex items have one unit each, so they each take 1/4 of the available space. The third one has two units, so it takes up 2/4 of the available space (or one-half). You can also specify a minimum size value within the flex value. Try updating your existing article rules like so: This basically states, \"Each flex item will first be given of the available space. After that, the rest of the available space will be shared according to the proportion units.\" You'll see a difference in how the space is shared. All the flex items have a minimum width of 100 pixels—set using 'flex'. The value of flex for first two flex items is 1 and for the third item is 2. This splits the remaining space in the flex container into 4 proportion units. One unit is assigned to each of the first two flex items and 2 units are assigned to the third flex item, making the third flex item wider than the other two, which are of the same width. The real value of flexbox can be seen in its flexibility/responsiveness. If you resize the browser window or add another element, the layout continues to work just fine.\n\nYou can also use flexbox features to align flex items along the main or cross axis. Let's explore this by looking at a new example: body { font-family: sans-serif; width: 90%; max-width: 960px; margin: 10px auto; } div { height: 100px; border: 1px solid black; } button { font-size: 18px; line-height: 1.5; width: 15%; } /* Add your flexbox CSS below here */ We're going to turn this into a neat, flexible button/toolbar. At the moment you'll see a horizontal menu bar with some buttons jammed into the top left-hand corner. First, take a local copy of this example. Now, add the following to the bottom of the example's CSS: body { font-family: sans-serif; width: 90%; max-width: 960px; margin: 10px auto; } div { height: 100px; border: 1px solid black; } button { font-size: 18px; line-height: 1.5; width: 15%; } /* Add your flexbox CSS below here */ Refresh the page and you'll see that the buttons are now nicely centered horizontally and vertically. We've done this via two new properties. The flex items are positioned at the center of the cross-axis by setting the property to . The flex items are spaced evenly along the main-axis by setting the property to . The property controls where the flex items sit on the cross axis.\n• By default, the value which behaves as in flexbox. This stretches all flex items to fill the parent in the direction of the cross axis. If the parent doesn't have a fixed size in the cross axis direction, then all flex items will become as tall (or wide) as the tallest (or widest) flex item. This is how our first example had columns of equal height by default.\n• The value that we used in our above code causes the items to maintain their intrinsic dimensions, but be centered along the cross axis. This is why our current example's buttons are centered vertically.\n• You can also have values like , or and , or , which will align all items at the start and end of the cross axis respectively. The values will line up the flex items by their baseline; basically the bottom of each flex items first line of text will be lined up with the bottom of the first line of the element with the greatest distance between the cross start and that baseline. See for the full details. You can override the behavior for individual flex items by applying the property to them. For example, try adding the following to your CSS: body { font-family: sans-serif; width: 90%; max-width: 960px; margin: 10px auto; } div { height: 100px; border: 1px solid black; } button { font-size: 18px; line-height: 1.5; width: 15%; } div { display: flex; align-items: center; justify-content: space-around; } /* Add your flexbox CSS below here */ Have a look at what effect this has and remove it again when you've finished. controls where the flex items sit on the main axis.\n• The default value is , which behaves as , which makes all the items sit at the start of the main axis.\n• You can use or to make them sit at the end.\n• The and values behave as or depending on the writing mode direction.\n• is also a value for . It'll make the flex items sit in the center of the main axis.\n• The value we've used above, , is useful — it distributes all the items evenly along the main axis with a bit of space left at either end.\n• There is another value, , which is very similar to except that it doesn't leave any space at either end. The property is ignored in flexbox layouts. We'd like to encourage you to play with these values to see how they work before you continue.\n\nFlexbox also has a feature for changing the layout order of flex items without affecting the source order. This is another thing that is impossible to do with traditional layout methods. Try adding the following CSS to your button bar example code: Refresh and you'll see that the \"Smile\" button has moved to the end of the main axis. Let's talk about how this works in a bit more detail:\n• By default, all flex items have an value of .\n• Flex items with higher specified order values will appear later in the display order than items with lower order values.\n• Flex items with the same order value will appear in their source order. So if you have four items whose order values have been set as , , , and respectively, their display order would be 4th, 2nd, 3rd, then 1st.\n• The 3rd item appears after the 2nd because it has the same order value and is after it in the source order. You can set negative order values to make items appear earlier than items whose value is . For example, you could make the \"Blush\" button appear at the start of the main axis using the following rule: While you can change the order using , the tabbing order remains the same as the code order. Changing the order of focusable elements can negatively impact usability for your keyboard users!"
    },
    {
        "link": "https://medium.com/@umarkhalid107/handling-dynamic-websites-with-javascript-content-and-adding-dynamic-behavior-to-html-pages-2a9fad155611",
        "document": "In the realm of web development, creating dynamic websites with JavaScript content and augmenting HTML pages with dynamic behavior has become a fundamental skill. This article by Scraping Solution aims to comprehensively cover the concepts, techniques, challenges, and best practices associated with handling dynamic content using JavaScript while infusing HTML pages with interactive features.\n\nDynamic web content involves altering the webpage’s content or behavior post-loading, typically facilitated by JavaScript. It enables real-time updates, enhanced user interaction, and a more engaging user experience.\n\nAJAX (Asynchronous JavaScript and XML): AJAX allows seamless asynchronous data exchange between the browser and server. It empowers developers to update content without necessitating a full page refresh, powering features like live updates and interactive content.\n\nDOM Manipulation: JavaScript enables manipulation of the Document Object Model (DOM), empowering developers to dynamically add, remove, or modify HTML elements and content. This forms the basis of modern web interactivity.\n\nEnriching HTML pages with dynamic behavior involves implementing JavaScript functionalities that respond to user interactions, thus triggering changes in the displayed content or behavior.\n\nJavaScript allows developers to attach event listeners to HTML elements, responding to user actions like clicks, mouse movements, or keystrokes.\n\nFrameworks such as React, Vue.js, or Angular offer data-binding capabilities. This allows seamless synchronization between the user interface and underlying data, enabling automatic updates when the data changes.\n\nFetching and displaying content dynamically is achievable through JavaScript, allowing websites to update content from servers without reloading the entire page.\n\n// Example of dynamic content loading using Fetch API\n\nDynamically generated content might pose challenges for search engine crawlers. Mitigate this by employing server-side rendering or pre-rendering techniques to provide pre-generated HTML content.\n\nEfficiently managing resources and employing techniques like lazy loading, caching, and code splitting is crucial for optimal website performance.\n\nEnsuring accessibility standards and compatibility across devices and browsers is essential for a broader user reach.\n\n● Progressive Enhancement: Develop websites that function without JavaScript and progressively enhance the user experience for JavaScript-enabled browsers.\n\n● Error Handling and Graceful Degradation: Implement robust error handling to manage failures gracefully, providing users with meaningful feedback in case of errors.\n\nHandling dynamic websites with JavaScript content and adding dynamic behavior to HTML pages requires a deep understanding of JavaScript, DOM manipulation, and modern web development practices. By implementing best practices, optimizing performance, ensuring accessibility, and prioritizing security, developers can craft engaging, interactive, and user-friendly web experiences. Continuous learning and adaptation to evolving technologies remain imperative in mastering the art of dynamic web development."
    },
    {
        "link": "https://gpttutorpro.com/integrating-javascript-with-html-and-css-for-dynamic-websites",
        "document": "\n• Using semantic tags improves the site’s accessibility, making it easier for screen readers and other assistive technologies to navigate the content.\n\nWell-structured HTML is crucial for SEO. Search engines favor websites that have clear, logical structures and use semantic HTML because it’s easier to index and rank such sites.\n\nBy integrating these HTML practices, developers can create more robust and accessible dynamic websites, ensuring a solid foundation for adding CSS styles and JavaScript functionality. This integration not only enhances the user experience but also aligns with modern web design standards.\n\nThis example demonstrates how using semantic elements can clearly define the parts of a web page, which is essential for both users and search engines.\n\nAdvancing beyond basic CSS styling opens up a world of design possibilities for dynamic websites. This section explores advanced CSS techniques that enhance the visual appeal and functionality of web pages, crucial for effective JavaScript HTML CSS integration.\n• **Selectors like `:nth-child`, `:hover`, and `:focus` allow for more dynamic, responsive designs that react to user interactions.\n• Flexbox and Grid provide powerful layout options that adapt to different screen sizes, essential for responsive web design.\n• CSS animations and transitions can enhance user experience by adding smooth visual feedback on interactions.\n\nThese advanced CSS features enable developers to create more engaging and interactive user interfaces. By leveraging these capabilities, websites can offer a richer, more engaging user experience that keeps visitors coming back.\n\nExample of Advanced CSS for Responsive Design\n\nThis CSS code snippet demonstrates using Grid for responsive layouts and a hover effect to scale items, showcasing how advanced CSS can significantly improve the interactivity and responsiveness of dynamic websites. By mastering these advanced techniques, developers can ensure their sites not only look good but also work well across all devices, aligning with the latest trends in web design.\n\nJavaScript is the dynamic core of web development, enabling interactive and lively user experiences. This section highlights how JavaScript, when integrated with HTML and CSS, transforms static pages into vibrant, interactive web applications.\n• JavaScript responds to user actions like clicks, hovers, and key presses, making web pages reactive.\n• It can modify HTML content and CSS styles on the fly, allowing for real-time page updates without reloading.\n\nBy manipulating the DOM (Document Object Model), JavaScript can create, remove, and change HTML elements, enhancing the user’s interaction with the page. This capability is crucial for features like form validation, dynamic content loading, and animations.\n\nThis JavaScript function demonstrates basic interactivity by toggling the visibility of an element. Such simple yet powerful functionalities are what make JavaScript HTML CSS integration indispensable for dynamic websites and modern web design.\n\nMastering JavaScript not only enhances the functionality of websites but also significantly improves the overall user experience, making sites more engaging and accessible. As developers continue to push the boundaries of what’s possible on the web, JavaScript remains at the heart of innovation.\n\n3. Practical Examples of JavaScript with HTML and CSS\n\nIntegrating JavaScript with HTML and CSS not only enhances functionality but also elevates the user experience through interactive and dynamic elements. This section provides practical examples to illustrate how these technologies work together effectively.\n• CSS styles the slider with transitions and visibility.\n• HTML defines the structure of the menu.\n• CSS provides the styling, ensuring it is responsive across devices.\n• JavaScript adds functionality, like toggling the menu on small screens.\n\nThese examples show how JavaScript, HTML, and CSS complement each other, creating seamless interactions on dynamic websites.\n\nThis JavaScript snippet, combined with HTML and CSS, automates the image transitions, showcasing the practical application of JavaScript HTML CSS integration in web design. By understanding these examples, developers can create more engaging and interactive websites that keep users interested and engaged.\n\nOptimizing the performance of dynamic websites is crucial for enhancing user experience and improving search engine rankings. This section covers key strategies to ensure your website runs smoothly and efficiently.\n• Reduce the number of elements on your page to decrease the load time.\n\nEfficient Use of JavaScript, HTML, and CSS\n• Minify and combine files to reduce the size and number of requests.\n• Use asynchronous loading for JavaScript to prevent blocking of page rendering.\n• Set up caching rules to help store some information locally in the user’s browser.\n• Compress images and use modern formats like WebP for better compression and quality.\n\nThese techniques are essential for maintaining fast load times and providing a seamless user experience on dynamic websites. By implementing these strategies, developers can significantly improve the performance of websites that heavily rely on JavaScript HTML CSS integration and sophisticated web design.\n\nExample of Optimization in Code\n\nThis JavaScript function demonstrates how to load scripts asynchronously, which is a practical application of optimization techniques in web design. By understanding and applying these methods, developers can enhance both the speed and responsiveness of their dynamic websites.\n\nIntegrating JavaScript, HTML, and CSS can present several challenges, especially for new developers. This section outlines common issues and provides practical solutions to ensure smooth integration and functionality.\n• Solution: Use feature detection libraries like Modernizr and write clean, standards-compliant code.\n• Issue: Heavy scripts and styles can slow down website performance.\n• Solution: Minify JavaScript and CSS files, and use asynchronous loading to improve load times.\n• Issue: Websites must function well on devices of all sizes, which can be challenging with complex layouts.\n• Issue: Finding and fixing bugs in an integrated environment can be complex.\n• Solution: Use developer tools available in browsers like Chrome DevTools for effective debugging and testing.\n\nThese solutions help address the challenges faced during the JavaScript HTML CSS integration process, ensuring that dynamic websites are not only functional but also robust and user-friendly. By applying these strategies, developers can overcome common obstacles and enhance their web design practices.\n\nThis CSS media query ensures that the website layout adjusts according to the screen size, demonstrating a practical solution to achieve responsive design in web design. Understanding and implementing these solutions can significantly improve the integration process and the overall quality of dynamic websites."
    },
    {
        "link": "https://daily.dev/blog/html-and-javascript-integration-basics",
        "document": "Integrating HTML and JavaScript transforms static web pages into interactive experiences. This guide simplifies the process, covering the essentials on how to make your web pages come alive with JavaScript. Here's what you'll learn:\n• Understanding the Tag: Learn to include JavaScript in your HTML using the tag either by embedding code directly or linking to an external file.\n• Implementing JavaScript Functions: Discover how to create and invoke functions to perform tasks like displaying the current time or validating email input.\n• Including JavaScript Libraries: Enhance your pages by incorporating libraries such as jQuery for additional functionality.\n• JavaScript and Accessibility: Ensure your website is accessible to all users by following best practices for navigation, text alternatives, and more.\n\nBy the end of this guide, you'll have a solid foundation for making your web pages interactive using HTML and JavaScript, while also ensuring they are accessible to a broad audience.\n\nThe tag is a way to include JavaScript code on a webpage. This lets the browser run JavaScript code, which can make web pages interactive and dynamic.\n\nYou can use the tag in two main ways:\n• Directly write JavaScript code between the opening and closing tags. Like this:\n• Link to an external JavaScript file with the attribute. Like this:\n\nIt's a good idea to put tags in the or at the beginning of the to help your page load and run smoothly.\n\nHere's how you can write JavaScript right inside tags to show the current time:\n\nAnd here's how you link to an external file:\n\nIn the file, you would have:\n\nThis approach keeps your JavaScript separate from the HTML, making things neater and easier to manage.\n\nJavaScript functions are like handy toolboxes that let you group together pieces of code to do a specific job. Think of them as mini-programs that you can run over and over again.\n\nTo make a function in JavaScript, you do this:\n\nAnd when you want to use your function, you just call it like this:\n\nFunctions are great for making web pages interactive. For instance, if you want something to happen when a user clicks a button, you can use a function like this:\n\nLet's see a real-life example - checking if an email address looks right when someone fills out a form:\n\nThis code looks at the email when the form is submitted. If it doesn't have an '@' or a '.', it tells the user the email isn't right and stops the form from sending.\n\nJavaScript libraries like jQuery give you extra tools to use in your code. To add one from a CDN (a place on the internet where you can get code):\n• Put a tag with the CDN link in your HTML:\n• Now you can use jQuery in your code:\n\nLibraries like jQuery have lots of ready-to-use functions that can make coding easier and faster.\n\nWhen you're mixing JavaScript with your website, it's really important to make sure everyone can use it easily. Here's how to keep your site friendly for all users:\n\nMake sure everyone can navigate\n\nSome people can't use a mouse, so your site should work well with just a keyboard. Here's what you can do:\n• Use to help with moving around the page with the tab key\n• Make your own controls easy to use without a mouse\n• Check that forms and buttons work with the and keys\n\nPeople who use screen readers need text to understand what's on your site:\n• Use for parts of your site that are complicated\n\nFor those who need to see things up close, make sure your site doesn't break when they zoom in. Stay away from fixed sizes that could mess up the layout.\n\nChecking your site can help you find and fix problems. Some tools that can help are:\n• aXe - spots things that might cause trouble\n• NVDA - a screen reader that lets you experience your site as someone with visual impairments might\n\nUsing the right HTML elements and ARIA roles helps screen readers understand and talk about your content the right way.\n\nMaking your JavaScript work for everyone is about paying attention and testing. If you do it right, you'll make a site that's great for all users.\n\nMixing JavaScript with HTML is key to making websites that do cool stuff. Here's a simple way to put them together:\n• Use the tag to either write JavaScript right on your page or to link to a JavaScript file.\n• Make functions in JavaScript to do things like reacting when someone clicks a button.\n• You can also use tools like jQuery to make your job easier when changing stuff on your page.\n• And don't forget, it's super important to make sure your website is easy for everyone to use.\n\nWith these basics, you're ready to start making your web pages way more interesting with JavaScript. You can add things like moving pictures, checking forms to make sure they're filled out right, and lots more.\n\nAs you keep learning, focus on simple but important ideas like:\n• The Document Object Model (DOM) API, which lets you change page elements\n• Listening for things like mouse clicks to run your code\n• Using data attributes and storage to keep information\n• Learning about promises and how to make your page work smoothly without waiting around\n\nAnd remember, looking up how to do stuff online and practicing is a great way to get better. With some time and effort, you'll be able to make websites that are not only fun but also really useful.\n\nHTML and JavaScript working together is what makes today's web so cool. Getting good at using both will let you turn your creative ideas into reality, one step at a time.\n\nHow do you integrate JavaScript with HTML?\n\nTo mix JavaScript with HTML, you can use the tag. Place it in either the head or body part of your HTML document. Here's how it looks:\n\nOr, you can link to a JavaScript file from your HTML using the attribute like this:\n\nThis method keeps your JavaScript code separate from your HTML, making your code cleaner.\n\nHow is HTML and JavaScript connected?\n\nHTML and JavaScript are linked through something called DOM (Document Object Model) manipulation. HTML sets up the page's structure and content. JavaScript can change the DOM to update the page content without needing to reload it.\n\nFor instance, if you press a button, it might activate a JavaScript function that hides a part of the page. This is how HTML content and JavaScript actions are connected.\n\nCan HTML and JavaScript be used together?\n\nAbsolutely, HTML and JavaScript are often used together. HTML lays out the page, while JavaScript makes it interactive. Modern websites use both to:\n• Create apps that run in your browser\n• Connect to services over the internet\n\nBasically, for anything on a website that moves or changes, HTML and JavaScript are working together.\n\nHow to interact JavaScript with HTML?\n\nJavaScript interacts with HTML in several key ways:\n• It uses the DOM API to get, update, and play with HTML elements\n• It can handle events, like clicks, directly in the HTML with things like\n• It selects elements using or\n• It can change HTML content with\n\nHere are some simple examples:\n\nWith JavaScript, you can make your website do a lot of cool things by manipulating the HTML."
    },
    {
        "link": "https://quora.com/How-can-HTML-be-used-in-combination-with-JavaScript-to-create-dynamic-and-interactive-web-content",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting",
        "document": "Welcome to the MDN beginner's JavaScript course! In this first article we will look at JavaScript from a high level, answering questions such as \"what is it?\", and \"what is it doing?\", and making sure you are comfortable with JavaScript's purpose.\n\nWhen you built up the \"Guess the number\" game in the previous article, you may have found that it didn't work. Never fear — this article aims to save you from tearing your hair out over such problems by providing you with some simple tips on how to find and fix errors in JavaScript programs.\n\nAfter reading the last couple of articles you should now know what JavaScript is, what it can do for you, how you use it alongside other web technologies, and what its main features look like from a high level. In this article, we will get down to the real basics, looking at how to work with the most basic building blocks of JavaScript — Variables.\n\nNext, we'll turn our attention to strings — this is what pieces of text are called in programming. In this article, we'll look at all the common things that you really ought to know about strings when learning JavaScript, such as creating strings, escaping quotes in strings, and joining them together.\n\nIn this lesson we'll look at arrays — a neat way of storing a list of data items under a single variable name. Here we look at why this is useful, then explore how to create an array, retrieve, add, and remove items stored in an array, and more besides.\n\nIn any programming language, the code needs to make decisions and carry out actions accordingly depending on different inputs. For example, in a game, if the player's number of lives is 0, then it's game over. In a weather app, if it is being looked at in the morning, show a sunrise graphic; show stars and a moon if it is nighttime. In this article, we'll explore how so-called conditional statements work in JavaScript.\n\nAnother essential concept in coding is functions, which allow you to store a piece of code that does a single task inside a defined block, and then call that code whenever you need it using a single short command — rather than having to type out the same code multiple times. In this article we'll explore fundamental concepts behind functions such as basic syntax, how to invoke and define them, scope, and parameters.\n\nThere's one last essential concept about functions for us to discuss — return values. Some functions don't return a significant value, but others do. It's important to understand what their values are, how to use them in your code, and how to make functions return useful values. We'll cover all of these below.\n\nWhen writing web pages and apps, one of the most common things you'll want to do is change the document structure in some way. This is usually done by manipulating the Document Object Model (DOM) via a set of built-in browser APIs for controlling HTML and styling information. In this article we'll introduce you to DOM scripting.\n\nAnother very common task in modern websites and applications is making network requests to retrieve individual data items from the server to update sections of a webpage without having to load an entire new page. This seemingly small detail has had a huge impact on the performance and behavior of sites, so in this article, we'll explain the concept and look at technologies that make it possible.\n\nJavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa). You'll come across it quite often, so in this article, we give you all you need to work with JSON using JavaScript, including parsing JSON so you can access data within it, and creating JSON."
    }
]