[
    {
        "link": "https://php.net/manual/en/language.types.array.php",
        "document": "An array in PHP is actually an ordered map. A map is a type that associates values to keys. This type is optimized for several different uses; it can be treated as an array, list (vector), hash table (an implementation of a map), dictionary, collection, stack, queue, and probably more. As array values can be other arrays, trees and multidimensional arrays are also possible.\n\nExplanation of those data structures is beyond the scope of this manual, but at least one example is provided for each of them. For more information, look towards the considerable literature that exists about this broad topic.\n\nAn array can be created using the array() language construct. It takes any number of comma-separated pairs as arguments. The comma after the last array element is optional and can be omitted. This is usually done for single-line arrays, i.e. is preferred over . For multi-line arrays on the other hand the trailing comma is commonly used, as it allows easier addition of new elements at the end. The key can either be an int or a string. The value can be of any type. Additionally the following key casts will occur:\n• s containing valid decimal s, unless the number is preceded by a sign, will be cast to the type. E.g. the key will actually be stored under . On the other hand will not be cast, as it isn't a valid decimal integer. s containing valid decimals, unless the number is preceded by asign, will be cast to thetype. E.g. the keywill actually be stored under. On the other handwill not be cast, as it isn't a valid decimal integer.\n• s are also cast to s, which means that the fractional part will be truncated. E.g. the key will actually be stored under . s are also cast tos, which means that the fractional part will be truncated. E.g. the keywill actually be stored under\n• s are cast to s, too, i.e. the key will actually be stored under and the key under . s are cast tos, too, i.e. the keywill actually be stored underand the keyunder\n• will be cast to the empty string, i.e. the key will actually be stored under . will be cast to the empty string, i.e. the keywill actually be stored under\n• s and s can not be used as keys. Doing so will result in a warning: . s ands can not be used as keys. Doing so will result in a warning: If multiple elements in the array declaration use the same key, only the last one will be used as all others are overwritten. Example #2 Type Casting and Overwriting example The above example will output: As all the keys in the above example are cast to , the value will be overwritten on every new element and the last assigned value is the only one left over. PHP arrays can contain int and string keys at the same time as PHP does not distinguish between indexed and associative arrays. The above example will output: The key is optional. If it is not specified, PHP will use the increment of the largest previously used int key. The above example will output: It is possible to specify the key only for some elements and leave it out for others: Example #5 Keys not on all elements The above example will output: As you can see the last value was assigned the key . This is because the largest integer key before that was . Example #6 Complex Type Casting and Overwriting example This example includes all variations of type casting of keys and overwriting of elements. // the value \"a\" will be overwritten by \"b\"\n\n // the value \"b\" will be overwritten by \"c\"\n\n // as this is not an integer string it will NOT override the key for 1\n\n // as this is not an integer string it will NOT override the key for 1\n\n // the value \"c\" will be overwritten by \"g\"\n\n // the value \"i\" will be overwritten by \"j\"\n\n // value \"k\" is assigned the key 2. This is because the largest integer key before that was 1\n\n // the value \"k\" will be overwritten by \"l\"\n\n The above example will output: When assigning a negative integer key , PHP will take care to assign the next key to . The above example will output: Warning Prior to PHP 8.3.0, assigning a negative integer key would assign the next key to , the previous example would therefore output: Array elements can be accessed using the syntax. The above example will output: Prior to PHP 8.0.0, square brackets and curly braces could be used interchangeably for accessing array elements (e.g. and would both do the same thing in the example above). The curly brace syntax was deprecated as of PHP 7.4.0 and no longer supported as of PHP 8.0.0. Attempting to access an array key which has not been defined is the same as accessing any other undefined variable: an -level error message ( -level prior to PHP 8.0.0) will be issued, and the result will be . Array dereferencing a scalar value which is not a string yields . Prior to PHP 7.4.0, that did not issue an error message. As of PHP 7.4.0, this issues ; as of PHP 8.0.0, this issues . An existing array can be modified by explicitly setting values in it. This is done by assigning values to the array, specifying the key in brackets. The key can also be omitted, resulting in an empty pair of brackets ( ). $arr[ ] = ; $arr[] = ; // may be an or // may be any value of any type If doesn't exist yet or is set to or , it will be created, so this is also an alternative way to create an array. This practice is however discouraged because if already contains some value (e.g. string from request variable) then this value will stay in the place and may actually stand for string access operator. It is always better to initialize a variable by a direct assignment. Note: As of PHP 7.1.0, applying the empty index operator on a string throws a fatal error. Formerly, the string was silently converted to an array. Note: As of PHP 8.1.0, creating a new array from value is deprecated. Creating a new array from and undefined values is still allowed. To change a certain value, assign a new value to that element using its key. To remove a key/value pair, call the unset() function on it. // This is the same as $arr[13] = 56;\n\n // at this point of the script\n\n\n\n // This adds a new element to\n\n // the array with key \"x\"\n\n\n\n // This removes the element from the array\n\n\n\n // This deletes the whole array\n\n As mentioned above, if no key is specified, the maximum of the existing int indices is taken, and the new key will be that maximum value plus 1 (but at least 0). If no int indices exist yet, the key will be (zero). Note that the maximum integer key used for this need not currently exist in the array. It need only have existed in the array at some time since the last time the array was re-indexed. The following example illustrates: // Now delete every item, but leave the array itself intact:\n\n // Append an item (note that the new key is 5, instead of 0).\n\n The above example will output: Arrays can be destructured using the (as of PHP 7.1.0) or list() language constructs. These constructs can be used to destructure an array into distinct variables. Array destructuring can be used in to destructure a multi-dimensional array while iterating over it. // logic here with $id and $name\n\n Array elements will be ignored if the variable is not provided. Array destructuring always starts at index . // Assign the element at index 2 to the variable $baz\n\n As of PHP 7.1.0, associative arrays can be destructured too. This also allows for easier selection of the right element in numerically indexed arrays as the index can be explicitly specified. // Assign the element at index 'baz' to the variable $three\n\n // Assign the element at index 2 to the variable $baz\n\n Array destructuring can be used for easy swapping of two variables. The spread operator ( ) is not supported in assignments. Attempting to access an array key which has not been defined is the same as accessing any other undefined variable: an -level error message ( -level prior to PHP 8.0.0) will be issued, and the result will be .\n\nAlways use quotes around a string literal array index. For example, is correct, while is not. But why? It is common to encounter this kind of syntax in old scripts: This is wrong, but it works. The reason is that this code has an undefined constant ( ) rather than a string ( - notice the quotes). It works because PHP automatically converts a bare string (an unquoted string which does not correspond to any known symbol) into a string which contains the bare string. For instance, if there is no defined constant named , then PHP will substitute in the string and use that. Warning The fallback to treat an undefined constant as bare string issues an error of level . This has been deprecated as of PHP 7.2.0, and issues an error of level . As of PHP 8.0.0, it has been removed and throws an Error exception. Note: This does not mean to always quote the key. Do not quote keys which are constants or variables, as this will prevent PHP from interpreting them. The above example will output: Checking 0: Notice: Undefined index: $i in /path/to/script.html on line 9 Bad: Good: 1 Notice: Undefined index: $i in /path/to/script.html on line 11 Bad: Good: 1 Checking 1: Notice: Undefined index: $i in /path/to/script.html on line 9 Bad: Good: 2 Notice: Undefined index: $i in /path/to/script.html on line 11 Bad: Good: 2 More examples to demonstrate this behaviour: // carrot\n\n\n\n// Incorrect. This works but also throws a PHP error of level E_NOTICE because\n\n// of an undefined constant named fruit\n\n//\n\n// Notice: Use of undefined constant fruit - assumed 'fruit' in...\n\n // apple\n\n\n\n// This defines a constant to demonstrate what's going on. The value 'veggie'\n\n// is assigned to a constant named fruit.\n\n // carrot\n\n\n\n// The following is okay, as it's inside a string. Constants are not looked for\n\n// within strings, so no E_NOTICE occurs here\n\n // Hello apple\n\n\n\n// With one exception: braces surrounding arrays within strings allows constants\n\n// to be interpreted\n\n // Hello apple\n\n\n\n// Concatenation is another option\n\n // This will not work, and will result in a parse error, such as:\n\n// Parse error: parse error, expecting T_STRING' or T_VARIABLE' or T_NUM_STRING'\n\n// This of course applies to using superglobals in strings as well\n\nprint \"Hello $arr['fruit']\";\n\nprint \"Hello $_GET['foo']\"; When error_reporting is set to show level errors (by setting it to , for example), such uses will become immediately visible. By default, error_reporting is set not to show notices. As stated in the syntax section, what's inside the square brackets (' ' and ' ') must be an expression. This means that code like this works: This is an example of using a function return value as the array index. PHP also knows about constants: \"This is just an informal notice\" Note that is also a valid identifier, just like in the first example. But the last example is in fact the same as writing: \"This is just an informal notice\" So why is it bad then? At some point in the future, the PHP team might want to add another constant or keyword, or a constant in other code may interfere. For example, it is already wrong to use the words and this way, since they are reserved keywords. Note: To reiterate, inside a double-quoted string, it's valid to not surround array indexes with quotes so is valid. See the above examples for details on why as well as the section on variable parsing in strings.\n\nFor any of the types int, float, string, bool and resource, converting a value to an array results in an array with a single element with index zero and the value of the scalar which was converted. In other words, is exactly the same as . If an object is converted to an array, the result is an array whose elements are the object's properties. The keys are the member variable names, with a few notable exceptions: integer properties are unaccessible; private variables have the class name prepended to the variable name; protected variables have a '*' prepended to the variable name. These prepended values have bytes on either side. Uninitialized typed properties are silently discarded. The above example will output: These can result in some unexpected behaviour: // This will become '\\0A\\0A'\n\n // This will become '\\0B\\0A'\n\n The above example will output: The above will appear to have two keys named 'AA', although one of them is actually named '\\0A\\0A'. Converting to an array results in an empty array.\n\nThe array type in PHP is very versatile. Here are some examples: // After the above code is executed, $a will be the array\n\n// array('color' => 'red', 'taste' => 'sweet', 'shape' => 'round',\n\n// 'name' => 'apple', 0 => 4), and $b will be the array\n\n// array(0 => 'a', 1 => 'b', 2 => 'c'), or simply array('a', 'b', 'c').\n\n // this is the same as array(0 => 7, 1 => 8, ...)\n\n\n\n // the value 10 will be overwritten by 12\n\n The above example will output: Do you like red? Do you like blue? Do you like green? Do you like yellow? Changing the values of the array directly is possible by passing them by reference. Example #14 Changing element in the loop /* ensure that following writes to\n\n$color will not modify the last array element */\n\n\n\n The above example will output: The above example will output: // fill an array with all items from a directory\n\n Arrays are ordered. The order can be changed using various sorting functions. See the array functions section for more information. The count() function can be used to count the number of items in an array. Because the value of an array can be anything, it can also be another array. This enables the creation of recursive and multi-dimensional arrays. // Some examples to address values in the array above\n\n Array assignment always involves value copying. Use the reference operator to copy an array by reference. // $arr2 is changed,\n\n // $arr1 is still array(2, 3)\n\n\n\n // now $arr1 and $arr3 are the same"
    },
    {
        "link": "https://php.net/manual/en/function.array-keys.php",
        "document": "pat dot leblanc at gmail dot com ¶ It's worth noting that if you have keys that are long integer, such as '329462291595', they will be considered as such on a 64bits system, but will be of type string on a 32 bits system.\n\n\n\nfor example:\n\n\n\nwill return on a 64 bits system:\n\n\n\nbut on a 32 bits system:\n\n\n\nI hope it will save someone the huge headache I had :)\n\nIan (maxianos at hotmail dot com) ¶ There's a lot of multidimensional array_keys function out there, but each of them only merges all the keys in one flat array.\n\n\n\nHere's a way to find all the keys from a multidimensional array while keeping the array structure. An optional MAXIMUM DEPTH parameter can be set for testing purpose in case of very large arrays.\n\n\n\nNOTE: If the sub element isn't an array, it will be ignore.\n\n\n\n\n\nEXAMPLE:\n\ninput:\n\narray(\n\n 'Player' => array(\n\n 'id' => '4',\n\n 'state' => 'active',\n\n ),\n\n 'LevelSimulation' => array(\n\n 'id' => '1',\n\n 'simulation_id' => '1',\n\n 'level_id' => '1',\n\n 'Level' => array(\n\n 'id' => '1',\n\n 'city_id' => '8',\n\n 'City' => array(\n\n 'id' => '8',\n\n 'class' => 'home',\n\n )\n\n )\n\n ),\n\n 'User' => array(\n\n 'id' => '48',\n\n 'gender' => 'M',\n\n 'group' => 'user',\n\n 'username' => 'Hello'\n\n )\n\n)\n\n\n\noutput:\n\narray(\n\n 'Player' => array(),\n\n 'LevelSimulation' => array(\n\n 'Level' => array(\n\n 'City' => array()\n\n )\n\n ),\n\n 'User' => array()\n\n)\n\nPaul Hirsch ¶ It is worth noting that array_keys does not maintain the data-type of the keys when mapping them to a new array. This created an issue with in_array and doing a lookup on characters from a string. NOTE: my lookup $array has a full map of numbers and characters - upper and lower - to do an simple faux encryption with.\n\n\n\n\n\nOutputs:\n\narray (size=4)\n\n 'e' => string 'ieio' (length=4)\n\n 1 => string 'one' (length=3)\n\n 2 => string 'two' (length=3)\n\n 0 => string 'zero' (length=4)\n\n\n\narray (size=4)\n\n 0 => string 'e' (length=1)\n\n 1 => int 1\n\n 2 => int 2\n\n 3 => int 0\n\n\n\nsweet dude sweet \n\n\n\n---- \n\nexpected to see:\n\ndude dude dude\n\nru dot dy at gmx dot net ¶ I was looking for a function that simply unset a variable amout of values from a one-dimensional array by key. I ended up with this (returns the array itself if no further parameter than the array is given, false with no params - does not change the source array) \n\n\n\nusage: array_remove(array $input [, mixed key ...])\n\n\n\n\n\nTest:\n\n\n\n\n\nOutput: \n\n\n\nArray\n\n(\n\n [a] => fun\n\n [b] => 3.14\n\n [sub] => Array\n\n (\n\n [0] => 1\n\n [1] => 2\n\n [2] => 3\n\n )\n\n\n\n [d] => what\n\n [e] => xample\n\n [5] => x\n\n)\n\nArray\n\n(\n\n [a] => fun\n\n [e] => xample\n\n)\n\n\n\nHope this helps someone.\n\nvesely at tana dot it ¶ The position of an element.\n\n\n\nOne can apply array_keys twice to get the position of an element from its key. (This is the reverse of the function by cristianDOTzuddas.) E.g., the following may output \"yes, we have bananas at position 0\".\n\n\n\n\n\nNot amazingly efficient, but I see no better alternative.\n\ntheking2 at king dot ma ¶ PHP arrays are weird. So the result of\n\n\n\n is a surprising though correct\n\nArray\n\n(\n\n [0] => 0\n\n [1] => element1\n\n [2] => element2\n\n [3] => element3\n\n)\n\n\n\nArrays in php are really ordered key value pairs where if a value is missing it will become a value with a number as key. To get the intuitive first dimension of an array use a map with function to determine if a key is in fact an index.\n\nThis\n\n\n\n\n\nwill show\n\n\n\nArray\n\n(\n\n [0] => element0\n\n [1] => element1\n\n [2] => element2\n\n [3] => element3\n\n)\n\n\n\nHowever in a niche case \n\n this won't work of course and output\n\nArray\n\n(\n\n [0] => element0\n\n [1] => element1\n\n [2] => element2\n\n [3] => element3\n\n [4] => I'm a field, not a key\n\n)\n\nglennh at webadept dot net ¶ All the cool notes are gone from the site. \n\n \n\nHere's an example of how to get all the variables passed to your program using the method on this page. This prints them out so you can see what you are doing."
    },
    {
        "link": "https://php.net/manual/en/function.array-values.php",
        "document": "biziclop at vipmail dot hu ¶ Remember, array_values() will ignore your beautiful numeric indexes, it will renumber them according tho the 'foreach' ordering:\n\n\n\n\n\nnopy at users dot sourceforge dot net ¶ Just a warning that re-indexing an array by array_values() may cause you to reach the memory limit unexpectly. \n\n \n\nFor example, if your PHP momory_limits is 8MB, \n\n and says there's a BIG array $bigArray which allocate 5MB of memory. \n\n \n\nDoing this will cause PHP exceeds the momory limits: \n\n \n\n \n\nIt's because array_values() does not re-index $bigArray directly, \n\nit just re-index it into another array, and assign to itself later.\n\nabimaelrc ¶ This is another way to get value from a multidimensional array, but for versions of php >= 5.3.x\n\n\n\nbluej100 at gmail dot com ¶ Most of the array_flatten functions don't allow preservation of keys. Mine allows preserve, don't preserve, and preserve only strings (default).\n\n\n\n<?\n\n// recursively reduces deep arrays to single-dimensional arrays\n\n// $preserve_keys: (0=>never, 1=>strings, 2=>always)\n\nfunction array_flatten($array, $preserve_keys = 1, &$newArray = Array()) {\n\n foreach ($array as $key => $child) {\n\n if (is_array($child)) {\n\n $newArray =& array_flatten($child, $preserve_keys, $newArray);\n\n } elseif ($preserve_keys + is_string($key) > 1) {\n\n $newArray[$key] = $child;\n\n } else {\n\n $newArray[] = $child;\n\n }\n\n }\n\n return $newArray;\n\n}\n\n\n\n// Tests\n\n\n\n$array = Array(\n\n 'A' => Array(\n\n 1 => 'foo',\n\n 2 => Array(\n\n 'a' => 'bar'\n\n )\n\n ),\n\n 'B' => 'baz'\n\n);\n\n\n\necho 'var_dump($array);'.\"\n\n\";\n\nvar_dump($array);\n\necho 'var_dump(array_flatten($array, 0));'.\"\n\n\";\n\nvar_dump(array_flatten($array, 0));\n\necho 'var_dump(array_flatten($array, 1));'.\"\n\n\";\n\nvar_dump(array_flatten($array, 1));\n\necho 'var_dump(array_flatten($array, 2));'.\"\n\n\";\n\nvar_dump(array_flatten($array, 2));\n\n?>\n\nchrysb at gmail dot com ¶ If you are looking for a way to count the total number of times a specific value appears in array, use this function: \n\n \n\n \n\nThis should really be a native function of PHP."
    },
    {
        "link": "https://stackoverflow.com/questions/4240129/get-array-values-by-keys",
        "document": "I am searching for a built in php function that takes array of keys as input and returns me corresponding values.\n\nfor e.g. I have a following array\n\nand I need values for the keys key2 and key4 so I have another I need a function that takes this array and first array as inputs and provide me values in response. So response will be"
    },
    {
        "link": "https://stackoverflow.com/questions/50406100/how-to-get-array-value-by-key",
        "document": "I am having an strange issue while transversing array, created by html input. Here is my html:\n\nif I submit form then I get array like this:\n\nif I am trying the array with key then I am getting nothing or empty."
    },
    {
        "link": "https://linkedin.com/advice/1/what-best-practices-php-data-visualization-skills-web-development-7a86c",
        "document": ""
    },
    {
        "link": "https://orientsoftware.com/blog/php-charts",
        "document": "HP charts are an effective way to display statistics on PHP applications, as they are more visually engaging (and easier to understand) than plain text. Also, since web users often have short attention spans, PHP charts enable web users to comprehend data – quickly – at a glance. According to W3Techs, a website that covers the usage of types of technologies on the web, PHP is used by 76.4% of all websites (whose server-side programming language is publicly known). For this reason, there are many PHP charts and graph libraries out there, which simplify the process of incorporating them into PHP applications. In this article, we discuss what PHP charts are and the different ways that you can integrate them into your PHP web applications.\n\nPHP charts are pre-written snippets of code that, when imported into a PHP project, visually represent data in a chart. PHP charts typically function as libraries, where PHP developers can choose from a variety of chart styles. This way, PHP developers can visually represent data in a way that makes the most sense to the readers. Many PHP charts also have interactive features, such as the ability to craft custom animations and click events. Click events occur when a user clicks or taps on an interactive element within a PHP chart.\n\nBelow are the most common types of PHP charts that PHP developers can integrate into their PHP applications: Pie and funnel charts visually represent data in the form of a full circle, a doughnut (same as the circle, but with a hole in the middle), a cascading funnel (that gets narrower from top to bottom), and a pyramid. Column and bar charts visually represent data in the form of horizontal or vertical rectangles placed next to each other. PHP developers can also create stacked variations of column and bar charts, where each block contains more than one type of data. Line charts visually represent data by connecting a series of data points together to create a line. The line featured in a line chart can connect to each data point in a straight line, in a curved line, or in a step line. Area charts, combining the appearance of line and bar charts, visually represent how numeral values change over a second variable, typically a time period. The result is a chart that resembles the appearance of a mountain. Also called candlestick charts, financial charts visually represent the potential price movement of a particular item, usually currency or stock. They represent the high, low, opening, and closing price of an item during a specific time period. Scatter and bubble charts visually represent data as a series of blocks of circles on a horizontal plane.\n\nWhy Are PHP Charts Important in PHP Development? PHP charts are easy to use and customizable and help speed up the development process. They also convey complex information in an easy-to-understand way, making it easier for readers to identify trends and patterns. Without having to write manual code from scratch, PHP developers can create data-rich, visually striking, and interactive PHP charts quickly. This helps speed up the PHP development process, resulting in a faster turnaround for clients – without compromising on quality, either. Additionally, PHP charts can be duplicated and reused elsewhere, thus reducing time spent on unnecessary manual labor. Almost every aspect of a PHP chart can be customized. PHP developers can choose from a variety of chart and graph styles, colors, layouts, interactive elements, and even animation sequences. With this level of flexibility, PHP developers have the freedom to represent their data in a unique, compelling way. As a result, web users are more likely to have a stronger impression of a PHP application than if the data was represented as plain text – especially if the data itself is revelatory for the target audience. PHP charts make it easy for readers to not only comprehend complex data but also gain deeper insight from said data. Trends and patterns that may have gone unnoticed as plain text are clear as day when displayed as a visual diagram, emphasizing the deeper meaning (and the context) behind the raw data. By turning raw data into actionable insights, readers – internal and external stakeholders – don’t just understand the data. They know what to do with that data to generate results. When you create interactive charts with animations, this can help draw attention to trends and patterns.\n\nPHP charts include a wide variety of features to improve their functionality and accessibility. While the type of features available depends on the PHP chart provider, the most common ones are: Support for Various Types of Charts Most PHP charts have the ability to present data in a variety of styles and formats. These include column and bar charts, line and area charts, pie and funnel charts, scatter and bubble charts, and financial charts. Some PHP charts support combination charts, where data is visually represented in more than one chart style but within the same chart. More advanced PHP charts can display 3D charts; however, these charts are more complex to integrate and more resource-intensive on a user’s device. Many PHP charts can be customized to suit your unique requirements. These include your choice of:\n• Shadows: Creates the illusion of depth, making a data point appear further away from the background than it really is. Since PHP charts are compatible with PHP code, they will function with whatever web browsers the PHP project is being developed for. This level of compatibility should extend to most modern web browsers (e.g., Chrome, Firefox, Edge, and more), mobile platforms (e.g., iOS and Android), and operating systems (e.g., Windows, MacOSX, and Linux). Most PHP charts can connect seamlessly to multiple data points. This means they can visualize data from a wide range of sources, including: Do you plan on hiring PHP programmers in the near future? Will your PHP application need to display visual charts? If so, then ensure that your team chooses the right PHP chart, one that can collect data from various data sources. They should also be familiar with the advantages and disadvantages of PHP and how to overcome common PHP development challenges. PHP charts often include free documentation for PHP developers to read. This documentation typically features introductions, how-to guides, answers to frequently asked questions, and troubleshooting solutions. Some PHP chart developers also have community forums where PHP developers can ask for help and share useful hints and tips. PHP chart developers may also use the community forums to announce updates and provide expert support.\n\nAt Orient Software, our outsourced PHP developers have over 19 years of experience building PHP web applications. We have provided custom web application development services for over 100 global clients. One of our most important PHP projects was for Hello Health Group, a Vietnam-based provider of health and wellness platforms and services. When Hello Health Group approached us, their goal was to expand their business to multiple Asian markets, Indonesia being their first target market. To help Hello Health become established in Indonesia, Orient Software assembled a team of expert ReactJS and PHP developers. Working together with Hello Health Group’s backend developers, we are able to optimize the existing UI/UX design and develop new features for their new minimum viable product (MVP) system. As a result of this collaborative effort, Hello Health Group was able to launch the MVP version of their health and information service platform successfully. Whether your PHP development service needs are big or small, Orient Software can help. Contact us today and find out how we can transform your web application idea into a reality."
    },
    {
        "link": "https://linkedin.com/advice/3/how-can-you-make-php-data-visualizations-compatible-9dhoe",
        "document": ""
    },
    {
        "link": "https://fusioncharts.com/blog/supercharge-your-php-apps-with-visually-stunning-interactive-charts",
        "document": "Why Use FusionCharts for Your PHP Apps?\n\nHow to Create Charts for PHP Apps Using Database?\n\nHow to Set Data Source Using URL to Create Charts for PHP Apps?\n\nHow to Load Data Using JSON as URL?\n• Include the width and height of the chart in the form of pixels.\n• Choose the dataFormat as JSON and embed the JSON data as the value to dataSource.\n• Set the dataFormat value to jsonurl\n\nHow to Load Data Using XML as URL?\n\nEven though there are many server-side languages, PHP is still the most commonly used. That means there is a pretty good chance that at some point when you’re working on a PHP app, you will need a chart to display your data in a way your end-user can easily understand, analyze and use to make informed decisions. Whether you are building dashboards or reports, charts are a great way to present visual data effectively. Ready to get started adding visually stunning charts in your PHP apps? FusionCharts provides a simple and easy way to add powerful interactive data charts using our PHP SDK.FusionCharts offers a number of useful features that allow you to quickly and easily add beautiful charts to your PHP apps.Many PHP charting solutions out there only produce image-based charts/static images of charts, which means you cannot interact with them. FusionCharts, on the other hand, offers several interactive options for creating stunning and easy to visualize charts. For example, you can show and hide data series in column charts, see more data points with scroll charts, create drag-able charts, and much more.FusionCharts offers multiple ways to add charts to your PHP apps. You can insert charts by using the JSON or XML URL. You can also add charts by fetching data from a database.FusionCharts makes things super easy for PHP developers because it allows you to execute your projects without the need to write separate JavaScript code.With the PHP Module for FusionCharts, you can choose from more than 150 charts for your web applications, be it a line, pie, doughnut, Gantt, Pareto, bar, column, or any other chart of your choice. In addition, you can make your reports more insightful using by choosing from over 2000 maps.You can configure your charts the way you want with FusionCharts. It provides complete control over chart configurations by giving you full access to FusionCharts objects.One of the best things about FusionCharts is that it doesn’t involve any learning curve. With its extensive and easy-to-understand documentation, you can literally create your first chart in no more than 15 minutes. This is a huge benefit as you don’t have to spend time learning the software.To make things easy and quick, FusionCharts lets you connect your chart directly to any database of your choice, be it SQL or NoSQL.You can create any chart with FusionCharts using millions of data points, and you won’t face any performance issues.You can fetch data for your charts from a database and create any chart for your PHP apps using the FusionCharts PHP wrapper. Let’s say you have a dataset of countries with the most oil reserves in a database , and you want to create a 2D chart from this data. You can use the steps below to create a 2D chart or any chart of your choice using a database.Start by including thefile/ PHP wrapper. This is the file that contains the functions to embed the chart.Next, add the database connection information by using the following codeNow, establish a connection to the database using the code belowAt this point, it’s best to add code lines for rendering error messages in case the database connection parameters are incorrect. This will help prevent abrupt failure.Now, include the necessary JS files to create the chartCreate the SQL query which will return the countries with the most oil reserves and execute it or return the error message.If a valid response is returned by the query, prepare the JSON string.Then push the data into the array and if you want to use JSON data, create a variable that holds all the JSON data for your chart.Next, use the FusionCharts PHP class constructor to create an object for the column chart.Then render the chart.Finally, close the database connection.This is how your final chart will look:FusionCharts also lets you insert charts for a JSON and XML URL by allowing you to save the data in a .xml or .json file and pass the URL of the file as value to the dataSource attribute. We’ll be creating the same 2D chart of countries with the most oil reserves that we built above using a database. This time, however, we’ll use JSON and XML URL. We’ll be using the following dataset:First, represent the above dataset in JSON as followsThen copy this into a file, name it and save it with .json extension. We’ve named our file oilReserves.json. Remember to store the file in the same folder as your HTML page.Now, we’ll write the code. To do so, start with including thefile/ PHP wrapper, which contains the functions to embed the chart.Next, include the required libraries and components, such as fusioncharts.js, fusioncharts.theme.fusion.js.Now, store the configuration of the chart in a JSON object, set the data source using a URL, and create a chart container as follows:First, represent the dataset in XML as follows:Then copy this into a file named oilReserves.xml and store it in the same folder as your HTML page. All the other steps are the same as “loading data using JSON as URL,” except we have to embed XML data as the value of data source and set the data format to xmlurl instead of jsonurl.Now that you know how to create any chart of your choice by fetching data from a datasource or using JSON/XML URL, you can use FusionCharts to create stunning charts for your PHP apps and take your data visualization to the next level. Download FusionCharts Suite XT for PHP and start building interactive charts today!"
    },
    {
        "link": "https://stackoverflow.com/questions/723791/what-are-best-practices-for-self-updating-phpmysql-applications",
        "document": "It is pretty standard practice now for desktop applications to be self-updating. On the Mac, every non-Apple program that uses Sparkle in my book is an instant win. For Windows developers, this has already been discussed at length. I have not yet found information on self-updating web applications, and I hope you can help.\n\nI am building a web application that is meant to be installed like Wordpress or Drupal - unzip it in a directory, hit some install page, and it's ready to go. In order to have broad server compatibility, I've been asked to use PHP and MySQL -- is that **MP? In any event, it has to be broadly cross-platform. For context, this is basically a unified web messaging application for small businesses. It's not another CMS platform, think webmail.\n\nI want to know about self-updating web applications. First of all, (1) is this a bad idea? As of Wordpress 2.7 the automatic update is a single button, which seems easy, and yet I can imagine so many ways this could go terribly, terribly wrong. Also, isn't the idea that the web files are writable by the web process a security hole?\n\n(2) Is it worth the development time? There are probably millions of WP installs in the world, so it's probably worth the time it took the WP team to make it easy, saving millions of man hours worldwide. I can only imagine a few thousand installs of my software -- is building self-upgrade worth the time investment, or can I assume that users sophisticated enough to download and install web software in the first place could go through an upgrade checklist?\n\nIf it's not a security disaster or waste of time, then (3) I'm looking for suggestions from anyone who has done it before. Do you keep a version table in your database? How do you manage DB upgrades? What method do you use for rolling back a partial upgrade in the context of a self-updating web application? Did using an ORM layer make it easier or harder? Do you keep a delta of version changes or do you just blow out the whole thing every time?\n\nI appreciate your thoughts on this."
    }
]