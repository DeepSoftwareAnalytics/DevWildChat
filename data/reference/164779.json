[
    {
        "link": "https://openclassrooms.com/en/courses/5625816-create-modern-css-animations/6031986-create-more-complex-animations-using-css-%40keyframes",
        "document": ""
    },
    {
        "link": "https://css-tricks.com/snippets/css/keyframe-animation-syntax",
        "document": "You can use any number of “stops” in the animation, and it’s one of the main strengths of keyframe animations. While CSS is only from one state to another, a keyframe animation can interpolate between many different states during its timeline.\n\nIf an animation has the same starting and ending properties, one way to do that is to comma-separate the 0% and 100% values:\n\nOr, you could always tell the animation to run twice (or any even number of times) and tell the direction to .\n\nJust space-separate all the individual values. The order doesn’t matter except when using both duration and delay, they need to be in that order. In the example below 1s = duration, 2s = delay, 3 = iterations.\n\nYou can comma-separate the values to declare multiple animations on a selector.\n\nThe function controls exactly how many keyframes will render in the animation timeframe. Let’s say you declare:\n\nIf you use steps(10) in your animation, it will make sure only 10 keyframes happen in the allotted time.\n\nThe math works out nicely there. Every one second, the element will move 10px to the left and 10px down, until the end of the animation, and then again in reverse forever.\n\nThis can be great for spritesheet animation like this demo by samurai."
    },
    {
        "link": "https://joshwcomeau.com/animation/keyframe-animations",
        "document": "CSS keyframe animations are awesome. They're one of the most powerful, versatile tools in CSS, and we can use them for all sorts of nifty things.\n\nBut they're also often misunderstood. They're a bit quirky, and if you don't understand those quirks, using them can be quite frustrating.\n\nIn this tutorial, we're diving deep into CSS keyframes. We'll figure out how they work, and see how to build some pretty swanky animations with them. ✨\n\nThe main idea with a CSS keyframe animation is that it'll interpolate between different chunks of CSS.\n\nFor example, here we define a keyframe animation that will smoothly ramp an element's horizontal position from to :\n\nEach statement needs a name! In this case, we've chosen to name it . You can think of this like a global variable. If you're using vanilla CSS, you'll need to take care that you don't reuse the same name! Thankfully, modern tooling can auto-generate unique names for us to solve this problem.\n\nKeyframe animations are meant to be general and reusable. We can apply them to specific selectors with the property:\n\nAs with the property, requires a duration. Here we've said that the animation should last 1 second (1000ms).\n\nThe browser will interpolate the declarations within our and blocks, over the duration specified. This happens immediately, as soon as the property is set.\n\nWe can animate multiple properties in the same animation declaration. Here's a fancier example that changes multiple properties:\n\nIn “An Interactive Guide to CSS Transitions”, we learned all about the different timing functions built into CSS.\n\nWe have access to the same library of timing functions for our keyframe animations. And, like with , the default value is .\n\nWe can override it with the property:\n\nBy default, keyframe animations will only run once, but we can control this with the property:\n\nIt's somewhat rare to specify an integer like this, but there is one special value that comes in handy: .\n\nFor example, we can use it to create a loading spinner:\n\nNote that for spinners, we generally want to use a timing function so that the motion is constant (though this is somewhat subjective—try changing it and see what you think!).\n\nIn addition to the and keywords, we can also use percentages. This allows us to add more than 2 steps:\n\nThe percentages refer to the progress through the animation. is really just “Syntactic sugar” describes alternative syntax that makes the language easier to read/write (“sweeter”). Typically, it's an abstraction that hides a less-tasty, more-complex underlying mechanism. for . And is sugar for .\n\nImportantly, the timing function applies to each step. We don't get a single ease for the entire animation.\n\nIn this playground, both spinners complete 1 full rotation in 2 seconds. But breaks it into 4 distinct steps, and each step has the timing function applied:\n\nUnfortunately, we can't control this behaviour using CSS keyframe animations, though it is configurable using the Web Animations API. If you find yourself in a situation where the step-by-step easing is problematic, I'd suggest checking it out (opens in new tab)!\n\nLet's suppose that we want an element to \"breathe\", inflating and deflating.\n\nWe could set it up as a 3-step animation:\n\nIt spends the first half of the duration growing to be 1.5x its default size. Once it reaches that peak, it spends the second half shrinking back down to 1x.\n\nThis works, but there's a more-elegant way to accomplish the same effect. We can use the property:\n\ncontrols the order of the sequence. The default value is , going from 0% to 100% over the course of the specified duration.\n\nWe can also set it to . This will play the animation backwards, going from 100% to 0%.\n\nThe interesting part, though, is that we can set it to , which ping-pongs between and on subsequent iterations.\n\nInstead of having 1 big animation that grows and shrinks, we set our animation to grow, and then reverse it on the next iteration, causing it to shrink.\n\nWe've picked up a lot of animation properties in this lesson, and it's been a lot of typing!\n\nFortunately, as with , we can use the shorthand to combine all of these properties.\n\nThe above animation can be rewritten:\n\nHere's a piece of good news, as well: the order doesn't matter. For the most part, you can toss these properties in any order you want. You don't need to memorize a specific sequence.\n\nThere is an exception: , a property we'll talk more about shortly, needs to come after the duration, since both properties take the same value type (milliseconds/seconds).\n\nFor this reason, I prefer to exclude delay from the shorthand:\n\nProbably the most confusing aspect of keyframe animations is fill modes. They're the biggest obstacle on our path towards keyframe confidence.\n\nWe want our element to fade out. The animation itself works fine, but when it's over, the element pops back into existence:\n\nIf we were to graph the element's opacity over time, it would look something like this:\n\nWhy does the element jump back to full visibility? Well, the declarations in the and blocks only apply while the animation is running.\n\nAfter 1000ms has elapsed, the animation packs itself up and hits the road. The declarations in the block dissipate, leaving our element with whatever CSS declarations have been defined elsewhere. Since we haven't set for this element anywhere else, it snaps back to its default value ( ).\n\nOne way to solve this is to add an declaration to the selector:\n\nWhile the animation is running, the declarations in the statement overrule the opacity declaration in the selector. Once the animation wraps up, though, that declaration kicks in and keeps the box hidden.\n\nSo, we can update our CSS so that the element's properties match the block, but is that really the best way?\n\nInstead of relying on fallback declarations, let's consider another approach, using :\n\nlets us persist the final value from the animation, forwards in time.\n\n\"forwards\" is a very confusing name, but hopefully seeing it on this graph makes it a bit clearer!\n\nWhen the animation ends, will copy/paste the declarations in the final block, persisting them forwards in time.\n\nWe don't always want our animations to start immediately! As with , we can specify a delay, with the property.\n\nUnfortunately, we run into a similar issue:\n\nFor that first half-second, the element is fully visible!\n\nThe CSS in the and blocks is only applied while the animation is running. Frustratingly, the period doesn't count. So for that first half-second, it's as if the CSS in the block doesn't exist.\n\nhas another value that can help us here: . This will apply the CSS from the first block backwards in time.\n\n“Forwards” and “backwards” are confusing values, but here's an analogy that might help: imagine if we had recorded the user's session from the moment the page loaded. We could scrub forwards and backwards in the video. We can scrub backwards, before the animation has started, or forwards, after the animation has ended.\n\nWhat if we want to persist the animation forwards and backwards? We can use a third value, , which persists in both directions:\n\nPersonally, I wish that was the default value. It's so much more intuitive! Though it can make it a bit harder to understand where a particular CSS value has been set.\n\nLike all of the animation properties we're discussing, it can be tossed into the shorthand salad:\n\nKeyframe animations are cool enough on their own, but when we mix them with CSS variables (AKA CSS custom properties), things get ⚡️ next-level ⚡️.\n\nLet's suppose that we want to create a bouncing-ball animation, using everything we've learned in this lesson:\n\nCSS animations are meant to be generic and reusable, but this animation will always cause an element to bounce by 20px. Wouldn't it be neat if different elements could supply different \"bounce heights\"?\n\nWith CSS variables, we can do exactly that:\n\nOur animation has been updated so that instead of bouncing to , it accesses the value of the property. And since that property has a different value in each box, they each bounce to different amounts.\n\nThis strategy allows us to create reusable, customizable keyframe animations. Think of it like props to a React component!\n\nAs I was building the last couple demos, I realized just how much CSS has evolved in the past few years!\n\nIt's become an incredible language, expressive and flexible and powerful. I love writing CSS.\n\nAnd yet, so many front-end developers have a very different relationship with the language. I've spoken to hundreds of JavaScript developers who find CSS frustrating and confusing. Sometimes, the exact same CSS will behave totally differently! It feels so inconsistent.\n\nI have a theory about this: unlike with JS, so much of CSS is implicit and behind-the-scenes. It's not enough to know the properties; you need to know the principles driving them.\n\nI've spent the last year working full-time on a course that will help teach CSS at a deeper, more fundamental level. If you found this blog post helpful, you'll love the course.\n\nIt's called CSS for JavaScript Developers (opens in new tab), and it's just been released to the public. You can learn more at css-for-js.dev (opens in new tab)."
    },
    {
        "link": "https://gcdi.commons.gc.cuny.edu/2022/05/13/introduction-to-css-keyframes-animations",
        "document": "If, like me, you once enjoyed playing around with the defunct Adobe Flash software, or if you have any general graphic design, animation, or video editing experience, you might be familiar with the idea of keyframes. Today they are used even in web development to create a variety of interesting effects for web pages. In this post I’d like to discuss the basics of using keyframes in Cascading Style Sheets (CSS), which is the language used to style HTML. (For a general introduction to CSS, see here). We’ll create a basic HTML page and style it using CSS keyframes to create some basic animations.\n\nIn modern media production, keyframes are markers (specific locations) on an animation timeline. If we consider that all animations have a start and end point, and that a particular object will transform or move throughout the duration of an animation, keyframes are what mark the significant moments of this transition, and from which we can determine all other intermediate transitions. In the screenshot of the old Flash software above, for example, keyframes are represented by the dots, rectangles, and diamonds throughout the timeline, indicating where changes (starts, ends, new objects, etc.) are happening.\n\nIt’s worth pointing out that before digital editing, each “keyframe,” and all intermediate frames, had to be drawn by hand. Now, animation programs will automatically fill in the transition between two or more keyframe points based on the parameters you have set: this is a process called tweening, named after the “inbetweeners” traditional animation companies would hire to draw intermediate frames of animations.\n\nCSS allows you to create some very cool animations on a webpage with its own built-in animation tools. You can add all sorts of nifty animation effects to a given element on a page using keyframes. You can move an element, scale it, transform it, change its opacity, add stylistic effects, and much, much more.\n\nFirst, let’s create a basic HTML page that we can style with CSS. For convenience, I have provided the basic structure for a page below. Simply open your favorite text editor (such as VSCode) and create a new .html file with the following:\n\nAs you can see in the tag, we are adding an external CSS stylesheet named “keyframes.css” to our page. While you can use both internal and inline CSS styling, it is usually best practice to create a separate (external) file that contains your CSS code, so that’s what we’ll do next. To learn more about internal, inline, and external CSS styling, you can follow this link.\n\nIn the same folder as your HTML file, create a new .css file named . Let’s create a basic animation loop using keyframes that will repeatedly fade in and out our “Here is some text” message:\n\nKeyframes are created in CSS using the “at-rule” (@) with the identifier. You also need to declare the name of the animation—we have done so here by calling it , describing in bare terms what sort of animation we are creating.\n\nTo control the “timeline” of animations, the CSS keyframes rule uses percentages, with 0% indicating the start of the animation, and 100% signaling the end. Because we want our text to fade in and out (changing its opacity), we will set the beginning and the end of the animation to 0 opacity, meaning the text will be completely transparent. At 50%, or halfway through the animation timeline, we’ll set the opacity to 1, so our text will be fully displayed at that point. Note that you can control the timeline of an animation by using any percentage between 0% and 100%, and to create a smoother fade effect we would probably want to specify more transitions along the timeline.\n\nTo use our keyframe animation, we need to declare it as a style. This will allow us to apply it to an element in our HTML code. We do so by creating a new style. We indicate we are using an animation with the animation property, followed by a colon, along with the name of our animation. It is important to keep in mind that keyframe animations are meant to be general and reusable: you can easily apply them to specific selectors with the animation property and the associated name.\n\nThere are a few things we need to include next. First, we declare which animation this element will utilize ( ). Next, we need to indicate the duration of the animation, which we’ll set here to 2 seconds. Lastly, we need to specify how many times the animation will loop. We set it to infinite here because we want the loop to repeatedly run.\n\nNow that we have our animation set up, let’s apply it to our text in the HTML doc:\n\nTo make the text a bit larger, we set it to an header tag. To apply our style on the element, we then set the class to our animation.\n\nIf you save your files and open the HTML file in a browser, you should now see the text “Here is some text” fading in and out on the page:\n\nCongratulations! You have just created your first keyframe animation.\n\nLet’s go ahead and create another simple example. We’ll create a box object containing some text that will “slide in” across the screen onto our page.\n\nTo begin, add the following code to your CSS file:\n\nFirst, we create a new keyframe animation called slide-in. Next, we specify the points of transition in our animation using percentages, again with 0% as the start and 100% as the end.\n\nTo move the position of our box across the screen, we use the function. The translate function repositions an element horizontally (on the x-axis) on the screen, and takes a length value that determines how much a given element will move. We first set the position to a value of negative 100%, so our box will start in a position offset of our screen. At the end of our animation, we move the box to a position just inside the bounds of our screen (on the left-hand side).\n\nNext, we define our element. Like before, we first need to specify our animation property, this time using our newly created effect. We then define some general parameters for our box, giving it a width, a height, a color fill, padding, and some positioning of the text inside of the box so it appears centered.\n\nNext, in the HTML , let’s add our box:\n\nIf you save and refresh your page, you should now see something like the following:\n\nCongratulations! You have now created another simple animation.\n\nAs you can see, keyframes allow us to very quickly and easily spice up our webpages. While the effects we have created here are very simple, with a bit of work keyframes can allow us to create some very complex and interesting animations that can help set your webpage apart. They are a very versatile tool to add to your CSS skillset and can also just be a lot of fun to play around with!\n\nTo further explore and understand using keyframes in CSS, I’d recommend the following guides and resources:\n\nThis nifty in-browser app that let’s you quickly visualize your CSS code\n\nThis introduction to keyframes by Smashing Magazine"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations/Using_CSS_animations",
        "document": "CSS animations make it possible to animate transitions from one CSS style configuration to another. Animations consist of two components: a style describing the CSS animation and a set of keyframes that indicate the start and end states of the animation's style, as well as possible intermediate waypoints. There are three key advantages to CSS animations over traditional script-driven animation techniques:\n• They're easy to use for basic animations; you can create them without even having to know JavaScript.\n• The animations run well, even under moderate system load. Simple animations can often perform poorly in JavaScript. The rendering engine can use frame-skipping and other techniques to keep the performance as smooth as possible.\n• Letting the browser control the animation sequence lets the browser optimize performance and efficiency by, for example, reducing the update frequency of animations running in tabs that aren't currently visible.\n\nTo create a CSS animation sequence, you style the element you want to animate with the property or its sub-properties. This lets you configure the timing, duration, and other details of how the animation sequence should progress. This does not configure the actual appearance of the animation, which is done using the at-rule as described in the Defining animation sequence using keyframes section below. The sub-properties of the property are: Specifies the composite operation to use when multiple animations affect the same property simultaneously. This property is not part of the shorthand property. Specifies the delay between an element loading and the start of an animation sequence and whether the animation should start immediately from its beginning or partway through the animation. Specifies whether an animation's first iteration should be forward or backward and whether subsequent iterations should alternate direction on each run through the sequence or reset to the start point and repeat. Specifies the length of time in which an animation completes one cycle. Specifies how an animation applies styles to its target before and after it runs. Note: In the case of animation forwards fill mode, animated properties behave as if included in a set property value. If a new stacking context was created during the animation, the target element retains the stacking context after the animation has finished. Specifies the number of times an animation should repeat. Specifies the name of the at-rule describing an animation's keyframes. Specifies whether to pause or play an animation sequence. Specifies the timeline that is used to control the progress of a CSS animation. Specifies how an animation transitions through keyframes by establishing acceleration curves.\n\nAfter you've configured the animation's timing, you need to define the appearance of the animation. This is done by establishing one or more keyframes using the at-rule. Each keyframe describes how the animated element should render at a given time during the animation sequence. Since the timing of the animation is defined in the CSS style that configures the animation, keyframes use a to indicate the time during the animation sequence at which they take place. 0% indicates the first moment of the animation sequence, while 100% indicates the final state of the animation. Because these two times are so important, they have special aliases: and . Both are optional. If / or / is not specified, the browser starts or finishes the animation using the computed values of all attributes. You can optionally include additional keyframes that describe intermediate steps between the start and end of the animation.\n\nThe CSS animation longhand properties can accept multiple values, separated by commas. This feature can be used when you want to apply multiple animations in a single rule and set different durations, iteration counts, etc., for each of the animations. Let's look at some quick examples to explain the different permutations. In this first example, there are three duration and three iteration count values. So each animation is assigned a value of duration and iteration count with the same position as the animation name. The animation is assigned a duration of and an iteration count of , and the animation is assigned a duration of and an iteration count of . In this second example, three animation names are set, but there's only one duration and iteration count. In this case, all three animations are given the same duration and iteration count. In this third example, three animations are specified, but only two durations and iteration counts. In such cases where there are not enough values in the list to assign a separate one to each animation, the value assignment cycles from the first to the last item in the available list and then cycles back to the first item. So, gets a duration of , and gets a duration of , which is the last value in the list of duration values. The duration value assignment now resets to the first value; , therefore, gets a duration of . The iteration count values (and any other property values you specify) will be assigned in the same way. If the mismatch in the number of animations and animation property values is inverted, say there are five values for three values, then the extra or unused animation property values, in this case, two values, don't apply to any animation and are ignored.\n\nThis basic example styles a element using the and transition properties so that the text slides in from off the right edge of the browser window. In this example, the style for the element specifies that the animation should take 3 seconds to execute from start to finish, using the property and that the name of the at-rule defining the keyframes for the animation sequence is . In this case, we have just two keyframes. The first occurs at (using the alias ). Here, we configure the property of the element to be at (that is, beyond the far right edge of the containing element), and the of the element to be 200% (or two times its default inline size), causing the paragraph to be twice as wide as its containing block. This causes the first frame of the animation to have the header drawn off the right edge of the browser window. The second keyframe occurs at (using the alias ). The property is set to and the of the element is set to , which is . This causes the header to finish its animation in its default state, flush against the left edge of the content area. <p> The Caterpillar and Alice looked at each other for some time in silence: at last the Caterpillar took the hookah out of its mouth, and addressed her in a languid, sleepy voice. </p> Note: Reload page to see the animation.\n\nLet's add another keyframe to the previous example's animation. Let's say we want Alice's name to turn pink and grow and then shrink back to its original size and color as it moves from right to left. While we could change the , changing any properties that impact the box model negatively impacts performance. Instead, we wrap her name in a and then scale and assign a color to that separately. That requires adding a second animation impacting only the : The full code now looks like this: <p> The Caterpillar and <span>Alice</span> looked at each other for some time in silence: at last the Caterpillar took the hookah out of its mouth, and addressed her in a languid, sleepy voice. </p> This tells the browser the name should be normal for the first and last 25% of the animation, but turn pink while being scaled up and back again in the middle. We set the spans's property to as the properties do not affect non-replaced inline-level content. Note: Reload page to see the animation.\n\nYou can get additional control over animations — as well as useful information about them — by making use of animation events. These events, represented by the object, can be used to detect when animations start, finish, and begin a new iteration. Each event includes the time at which it occurred as well as the name of the animation that triggered the event. We'll modify the sliding text example to output some information about each animation event when it occurs, so we can get a look at how they work. We've included the same keyframe animation as the previous example. This animation will last 3 seconds, be called \"slide-in\", repeat 3 times, and travel in an alternate direction each time. In the , the scale and translation are manipulated along the x-axis to make the element slide across the screen. We'll use JavaScript code to listen for all three possible animation events. This code configures our event listeners; we call it when the document is first loaded in order to set things up. This is pretty standard code; you can get details on how it works in the documentation for . The last thing this code does is set the on the element we'll be animating to \"slide-in\"; we do this to start the animation. Why? Because the event fires as soon as the animation starts, and in our case, that happens before our code runs. So we'll start the animation ourselves by setting the class of the element to the style that gets animated after the fact. The events get delivered to the function, which is shown below. function listener(event) { const l = document.createElement(\"li\"); switch (event.type) { case \"animationstart\": l.textContent = `Started: elapsed time is ${event.elapsedTime}`; break; case \"animationend\": l.textContent = `Ended: elapsed time is ${event.elapsedTime}`; break; case \"animationiteration\": l.textContent = `New loop started at time ${event.elapsedTime}`; break; } document.getElementById(\"output\").appendChild(l); } This code, too, is very simple. It looks at the to determine which kind of animation event occurred, then adds an appropriate note to the (unordered list) we're using to log these events. The output, when all is said and done, looks something like this: Note that the times are very close to, but not exactly, those expected given the timing established when the animation was configured. Note also that after the final iteration of the animation, the event isn't sent; instead, the event is sent. Just for the sake of completeness, here's the HTML that displays the page content, including the list into which the script inserts information about the received events: <h1 id=\"watch-me\">Watch me move</h1> <p> This example shows how to use CSS animations to make <code>H1</code> elements move across the page. </p> <p> In addition, we output some text each time an animation event fires, so you can see them in action. </p> <ul id=\"output\"></ul> Note: Reload page to see the animation."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/transform",
        "document": "The CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n\nIf the property has a value different from , a stacking context will be created. In that case, the element will act as a containing block for any or elements that it contains. Warning: Only transformable elements can be ed. That is, all elements whose layout is governed by the CSS box model except for: non-replaced inline boxes, table-column boxes, and table-column-group boxes.\n\nThe property may be specified as either the keyword value or as one or more values.\n\nScaling/zooming animations are problematic for accessibility, as they are a common trigger for certain types of migraine. If you need to include such animations on your website, you should provide a control to allow users to turn off animations, preferably site-wide. Also, consider making use of the media feature — use it to write a media query that will turn off animations if the user has reduced animation specified in their system preferences.\n\nThe order of transform functions matters. In this example, two boxes are rotated and translated by the same values; only the transform function order is different. When an element is rotated before being translated, the translate direction is on the rotated axis. The axis as indicated with the dotted lines."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since September 2015 .\n\nThe CSS function defines a transformation that rotates an element around a fixed point on the 2D plane, without deforming it. Its result is a data type.\n\nThe fixed point that the element rotates around — mentioned above — is also known as the transform origin. This defaults to the center of the element, but you can set your own custom transform origin using the property.\n\nThe amount of rotation created by is specified by an . If positive, the movement will be clockwise; if negative, it will be counter-clockwise. A rotation by 180° is called point reflection.\n\nIs an representing the angle of the rotation. The direction of rotation depends on the writing direction. In a left-to-right context, a positive angle denotes a clockwise rotation, a negative angle a counter-clockwise one. In a right-to-left context, a positive angle denotes a counter-clockwise rotation, a negative angle a clockwise one.\n\nIf you want to apply multiple transformations to an element, be careful about the order in which you specify your transformations. For example, if you rotate before translating, the translation will be along the new axis of rotation!"
    },
    {
        "link": "https://w3schools.com/cssref/css3_pr_transform.php",
        "document": "The property applies a 2D or 3D transformation to an element. This property allows you to rotate, scale, move, skew, etc., elements.\n\nThe numbers in the table specify the first browser version that fully supports the property.\n\nImages thrown on the table\n\n This example demonstrates how to create \"polaroid\" pictures and rotate the pictures."
    },
    {
        "link": "https://thoughtbot.com/blog/transitions-and-transforms",
        "document": "This post will introduce you to CSS transitions and CSS transforms: the CSS power couple. When used together, these properties allow you to create simple animations and add valuable interaction and visual feedback for your users.\n\nJust remember when adding any kind of movement to your project to keep it simple, subtle, and consistent. The movement you create should convey meaning, always enhancing, not distracting from the interaction for your users.\n\nSo what are transforms and transitions? At their most basic level, transforms move or change the appearance of an element, while transitions make the element smoothly and gradually change from one state to another.\n\nLet’s start with CSS transitions. Transitions are the grease in the wheel of CSS transforms. Without a transition, an element being transformed would change abruptly from one state to another. By applying a transition you can control the change, making it smooth and gradual.\n\nIn this post I’ll be using transitions in conjunction with transforms. However, transitions can also be used elsewhere where elements change from one style to another (e.g., when a button changes color on hover).\n\nThere are two properties that are required in order for the transition to take effect:\n\nEach transition property can be defined individually, but for cleaner and faster code, it’s recommended that you use the transition shorthand.\n\nHere’s the full shorthand sequence. Again, the first two properties are required.\n\nThe specifies the CSS property where the transition will be applied. You may apply a transition to an individual property (e.g., or ) or to all properties in the rule-set (i.e., ).\n\nThe property specifies the time span of the transition. You can specify in seconds or milliseconds.\n\nThe property allows you to define the speed of the transition over the duration. The default timing is , which starts out slow, quickly speeds up, and then slows down at the end. The other timing options are: , , , , and .\n\nHere’s an example of the different timing options (used with the property):\n\nFor more advanced timing options, you can define a custom timing function with a cubic-bezier.\n\nThe property allows you to specify when the transform will start. By default, the transition starts as soon as it is triggered (e.g., on mouse hover). However, if you want to transition to start after it is triggered you can use the transition delay property.\n\nA negative value will start the transition immediately, but part way through the transition process.\n\nYou can also leverage to stagger animations on elements.\n\nNow that we reviewed how to make smooth and gradual transitions, let’s look at CSS transforms - how to make an element change from one state to another. With the CSS transform property you can rotate, move, skew, and scale elements. (This post will only cover 2D transforms, but stay tuned for future blog posts on 3D transforms.)\n\nTransforms are triggered when an element changes states, such as on mouse-hover or mouse-click. The examples in this post will demonstrate transforms on mouse-hover.\n\nThe value allows you to increase or decrease the size of an element.\n\nFor example, the value would transform the size to be 2 times its original size. The value would transform the size to be half its original size.\n\nYou can scale an element by setting parameters for the width (X-axis) or height (Y-axis). For example, .\n\nOr, use the shorthand to scale both axes at the same time: . Or define them independently of each other:\n\nDon’t forget to add a transition! Without applying transition, the element would abruptly change sizes. Add the transition to the parent selector (not the hover selector). To make the transition smooth on both hover-over/hover-off.\n\nScale can be handy for hover states on an image that is also a link to indicate user interactivity. In this case we can use this alongside to scale it within a container and create a zoom effect on hover.\n\nWith the value, the element rotates clockwise or counterclockwise by a specified number of degrees. A positive value, such as , rotates the element clockwise, while a negative value, such as , rotates it counterclockwise.\n\nYou can rotate more than a full rotation with numbers over than 360, such as , for three full rotations.\n\nThe value moves an element left/right and up/down. The movement is based on the parameters given for the X (horizontal) Y (vertical) axes.\n\nA positive X value moves the element to the right, while a negative X moves the element to the left. A positive Y value moves the element downwards and a negative Y value, upwards.\n\nIn this example, the element will move 20 pixels to the right and 20 pixels down.\n\nWith the value, the element skews (or tilts) one direction or the other based on the values given for the X and Y axes.\n\nA positive X value tilts the element left, while a negative X value tilts it right. A positive Y value tilts the element down, and a negative Y value tilts is up. Or use a shorthand to include both X and Y properties:\n\nNote: Skewing an element will also skew all of the children inside of the element as well (which may make text content unreadable). If you need to maintain the original angle of a child element, you can use the opposite value of skew to bring it back.\n\nThe property is separate from the transform property but works in tandem with it. It allows you to specify the location origin of the transform. By default, the origin is in the center of the element.\n\nFor example, if you are using the property but want it to rotate not from the center, but from the top left corner, you’d use the value or . For the bottom right corner, you would use or , etc.\n\nMake sure to add the transform-origin property to the parent element, not with the transform property in the hover selector.\n\nYou can combine multiple transforms by using the transform shorthand or the matrix method.\n\nThe transform shorthand allows you to string the various transform methods into one property.\n\nThe matrix method allows you to combine the scale, skew, and translate properties into one using a coordinate system. This can be very useful for manipulating transforms with a javascript library but is very difficult to do by hand. You can read more about the matrix method and coordinates.\n\nThe property informs the browser to optimize rendering of property changes that may occur in a transition. Some transform changes necessitate the browser to repaint, which can cause slower performance on your page. By using , you can prevent that repaint as the browser now knows to plan for those changes ahead of time. Do note, however, that this property should be used sparingly; overuse by telling the browser about all the potential property changes can cause its own performance issues.\n\nWhile introducing motion in this manner can support a user experience and help direct actions and understanding, it can sometimes become a harmful interaction, especially to those with vestibular disorders. In these cases, we can respect user settings by applying the media query. Much like light/dark mode, this query takes a user preference setting on their device into account and applies styles that match those queries.\n\nIn the above example, we still scale the button on hover, but the easing of it is turned off if a user has reduced motion preferences.\n\nAnother way of respecting a user preference is to not scale the button on hover (if it’s not needed to convey meaning).\n\nAll of the transforms discuss elements in a two-dimensional space. However, all of these properties have companion functions for operating within a third dimension. While browser screens still operate in a 2D space (we’re not looking to make you wear 3D glasses here), there are still some interactions that can benefit from tweaking and tweening that third plane (wrap-around carousels, card flips, etc). Frankly, 3D transforms can be its own separate tutorial, but to get the foundations you can familiarize yourself with these properties and functions:\n• : denotes whether or not children of an element are within a 3D space. This must be used along with the property.\n• Use for children that are on the same plane as the parent.\n• Use for children that are in a 3D space.\n• : sets the distance between the Z-plane and the user for all child elements.\n• would appear further away from you than\n• : sets the position at which the viewer is looking. Essentially this is creating a “vanishing point” fo ryour element.\n• It takes x, y, and specific position values like : , , .\n• : show or hide the back face of a element.\n• hides the back face and will render it invisible in a 2D space, or just not shown in a 3D space as other planes will be hiding it.\n• : Just like but with a 3rd plane, defining a transform on a 4x4 matrix (with 16 values).\n• : Just like but with a 3rd plane, allowing you to reposition along the X, Y, and Z axis.\n• : Like and , this function takes a single value and defines the position along the Z-axis.\n• : Just like but with a 3rd plane, resizing an element along the X, Y, and Z axis.\n• : Like and , this function takes a single value and defines the size along the Z-axis.\n• : Rotates an element in a 3D space. This departs from a bit since we’re defining all the plane coordinates on a fixed axis. The function takes 4 values: an x coordinate, a y coordinate, a z coordinate, and an angle of rotation.\n• : Rotates an element on the Z-axis.\n• : This function sets the distance between the Z-axis and the user. Unlike its property counterpart, this function relies on being directly applied to an element within a transform instead of its parent. Like any value of , we can chain this to other transformations:\n\nNext, take what you’ve learned here and combine CSS transforms with CSS animations to create more complex animations and interactions - Beginner’s Guide to CSS Animations.\n\nThe fastest way to learn is alongside a seasoned expert. thoughtbot designers can help with your CSS project and level up your skills in the process. Let’s chat about your project."
    },
    {
        "link": "https://freecodecamp.org/news/complete-guide-to-css-transform-functions-and-properties",
        "document": "CSS transform allows you to translate, rotate, skew, scale, or add perspective effects to HTML elements.\n\nThis tutorial discusses everything you need to know to transform HTML elements like a pro.\n• None What is the CSS Property?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None What is the CSS Function?\n• None Why Does the CSS Transform Functions' Order Matter?\n• None Important Stuff to Know about Transforming Elements in CSS\n\nSo, without further ado, let's discuss the CSS property.\n\nWhat Is the CSS Property?\n\nThe CSS property specifies the transformational effect you wish to apply to an HTML element.\n\nThe CSS property accepts the following values:\n• None : Transforms the element with its parent element's value.\n• None : Transforms the HTML element with its default value.\n• None : Transforms the element two-dimensionally with a matrix of six values.\n• None : Transforms the HTML element three-dimensionally with a 4x4 matrix of sixteen values.\n• None : Applies no transformation to the HTML element.\n• None : Transforms the element by rotating it two-dimensionally.\n• None : Transforms the element by rotating it three-dimensionally.\n• None : Transforms the element by rotating it three-dimensionally along the X-axis.\n• None : Transforms the element by rotating it three-dimensionally along the Y-axis.\n• None : Transforms the HTML element by rotating it three-dimensionally along the Z-axis.\n• None : Transforms the element by scaling it two-dimensionally.\n• None : Transforms the element by scaling it three-dimensionally.\n• None : Transforms the element by scaling it along the X-axis.\n• None : Transforms the element by scaling it along the Y-axis.\n• None : Transforms the HTML element by scaling it three-dimensionally along the Z-axis.\n• None : Transforms the element by skewing it two-dimensionally along the X- and Y-axis.\n• None : Transforms the element by skewing it two-dimensionally along the X-axis.\n• None : Transforms the element by skewing it two-dimensionally along the Y-axis.\n• None : Transforms the HTML element by translating (moving) it two-dimensionally.\n• None : Transforms the element by translating it three-dimensionally.\n• None : Transforms the element by translating it along the X-axis.\n• None : Transforms the element by translating it along the Y-axis.\n• None : Transforms the element by translating it three-dimensionally along the Z-axis.\n\nNote: The property accepts one or more CSS transform functions. For instance, here's a valid declaration:\n\nIn the snippet above, we assigned three transform functions to the property. Let's talk more about some of 's values.\n\nWhat is the CSS Function?\n\ntransforms an element by rotating it two-dimensionally around a fixed point.\n• None \"Transform origin\" is the fixed point around which an element rotates.\n• None You can define your element's fixed point using the CSS property. But the default is .\n\naccepts a single argument. Here is the syntax:\n• None The function is equivalent to or .\n• None The argument specifies the element's angle of rotation.\n• None can be in degrees, gradians, radians, or turns.\n• None An argument consists of a number followed by the unit you wish to use—for instance, .\n• None Your browser's writing direction determines the element's direction of rotation.\n• None A positive angle will rotate the element clockwise in a left-to-right writing direction. But a negative angle will do a counterclockwise rotation.\n• None A positive angle will rotate the element counterclockwise in a right-to-left writing context. But a negative angle will do a clockwise rotation.\n\nBelow are some examples of how the CSS function works.\n\nHow to do a zero-degree rotation in CSS:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a zero-degree (0⁰) rotation for the image element.\n\nHow to do a 45-degree rotation in CSS:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a forty-five-degree (45⁰) rotation for the image element.\n\nHow to do a negative seventy-degree rotation in CSS:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a negative seventy-degree (70⁰) rotation for the image element.\n\nWhat is the CSS Function?\n\ntransforms an element by rotating it three-dimensionally around the X-axis.\n\naccepts a single argument. Here is the syntax:\n• None The function is equivalent to .\n• None The argument specifies the element's angle of rotation.\n• None can be in degree, gradian, radian, or turn.\n• None An argument consists of a number followed by the unit you wish to use—for instance, .\n\nBelow are some examples of how the CSS function works.\n\nHow to do a zero-degree rotation around the X-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a zero-degree (0⁰) rotation for the image around the X-axis.\n\nHow to do a 70-degree rotation around the X-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a seventy-degree (70⁰) rotation for the image around the X-axis.\n\nWhat is the CSS Function?\n\ntransforms an element by rotating it three-dimensionally around the Y-axis.\n\naccepts a single argument. Here is the syntax:\n• None The function is equivalent to .\n• None The argument specifies the element's angle of rotation.\n• None can be in degrees, gradians, radians, or turns.\n• None An argument consists of a number followed by the unit you wish to use—for instance, .\n\nBelow are some examples of how the CSS function works.\n\nHow to do a zero-degree rotation around the Y-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a zero-degree (0⁰) rotation for the image around the Y-axis.\n\nHow to do a 70-degree rotation around the Y-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a seventy-degree (70⁰) rotation for the image around the Y-axis.\n\nWhat is the CSS Function?\n\ntransforms an element by rotating it three-dimensionally around the Z-axis.\n\naccepts a single argument. Here is the syntax:\n• None The function is equivalent to or .\n• None The argument specifies the element's angle of rotation.\n• None can be in degrees, gradians, radians, or turns.\n• None An argument consists of a number followed by the unit you wish to use—for instance, .\n\nBelow are some examples of how the CSS function works.\n\nHow to do a zero-degree rotation around the Z-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a zero-degree (0⁰) rotation for the image around the Z-axis.\n\nHow to do a 70-degree rotation around the Z-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a seventy-degree (70⁰) rotation for the image around the Z-axis.\n\nWhat is the CSS Function?\n\ntransforms an element by rotating it three-dimensionally around the x-, y-, and z-axis.\n\naccepts four arguments. Here is the syntax:\n• None The , , and arguments are numbers specifying the x-, y-, and z-coordinates.\n• None The coordinates are the axis around which the element will rotate.\n• None The argument specifies the element's angle of rotation.\n• None can be in degrees, gradians, radians, or turns.\n• None An argument consists of a number followed by the unit you wish to use—for instance, .\n\nBelow are some examples of how the CSS function works.\n\nHow to do a 70-degree rotation around the Z-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a seventy-degree (70⁰) rotation for the image around the Z-axis.\n\nHow to do a 70-degree rotation around the X-, Y-, and Z-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a seventy-degree (70⁰) rotation for the image around the x-, y-, and z-axis.\n\nCSS rotate functions and CSS property provides two similar ways to specify rotation transformations.\n\nThe main differences between the two rotation techniques are as follows:\n• None The CSS property allows rotating an element without using the CSS property.\n• None The CSS property's syntax is shorter than its function alternative.\n• None The CSS property saves you from remembering the specific order to position the transform functions.\n• None Browsers calculate the transform functions' matrix in the order you assigned them to the CSS property—from left to right.\n• None Browsers calculate the transform properties' matrix in the following transformation matrix order:\n\nBelow are some examples.\n\nHow to use CSS property vs. function to do a 45-degree rotation\n\nTry it on StackBlitz\n\nThe snippet above used the property to specify a forty-five-degree (45⁰) rotation for the image element.\n\nHow to use CSS property vs. function to do a 70-degree rotation around the X-axis\n\nTry it on StackBlitz\n\nThe snippet above used the property to specify a seventy-degree (70⁰) rotation for the image around the X-axis.\n\nHow to use CSS property vs. function to do a 70-degree rotation around the Y-axis\n\nTry it on StackBlitz\n\nThe snippet above used the property to specify a seventy-degree (70⁰) rotation for the image around the Y-axis.\n\nHow to use CSS property vs. function to do a 70-degree rotation around the Z-axis\n\nTry it on StackBlitz\n\nThe snippet above used the property to specify a seventy-degree (70⁰) rotation for the image around the Z-axis.\n\nHow to use CSS property vs. function to do a 70-degree rotation around the X-, Y-, and Z-axis\n\nTry it on StackBlitz\n\nThe snippet above used the property to specify a seventy-degree (70⁰) rotation for the image around the x-, y-, and z-axis.\n\nNote: A value tells browsers not to rotate the selected element.\n\nWhat is the CSS Function?\n\ntransforms an element by resizing (scaling) it two-dimensionally from a fixed point.\n• None \"Transform origin\" is the fixed point from which the computer scales an element.\n• None You can define your element's fixed point using the CSS property. But the default is .\n\naccepts two arguments. Here is the syntax:\n• None The argument can be a number or percentage. It specifies the element's scaling factor along the x-axis.\n• None The argument can also be a number or percentage. It defines the element's scaling factor along the y-axis.\n• None Y-axis' default value is . Therefore, if you do not provide a argument, the browser automatically uses 's value.\n• None Suppose and are equal. In that case, browsers will scale your element uniformly and preserve its aspect ratio.\n\nBelow are some examples of how the CSS function works.\n\nHow to scale an element uniformly along the X- and Y-axis in CSS:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a scaling factor for the image element along the X- and Y-axis.\n• None The percentage equivalence of is .\n\nHow to scale an element non-uniformly along the X- and Y-axis in CSS:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a scaling factor for the image along the X-axis and along the Y-axis.\n\nHow to scale an element along only the X-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a scaling factor for the image along only the X-axis.\n• None A scale factor of or tells browsers not to apply any scaling effect on the selected element.\n\nHow to scale an element along only the Y-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to specify a scaling factor for the image along only the Y-axis.\n• None A or scale factor tells browsers not to apply any scaling effect on the selected element.\n\nThe CSS function and the CSS property provide two similar ways to specify a scale transformation.\n\nThe main differences between the two scaling techniques are as follows:\n• None The CSS property allows scaling an element without using the CSS property.\n• None The CSS property's syntax is shorter than its function alternative.\n• None The CSS property saves you from remembering the specific order to position the transform functions.\n• None Browsers calculate the transform functions' matrix in the order you assigned them to the CSS property—from left to right.\n• None Browsers calculate the transform properties' matrix in the following order:\n\nUse the CSS property to scale an element nonuniformly along the X- and Y-axis.\n\nTry it on StackBlitz\n\nThe snippet above used the property to specify a scaling factor for the image along the X-axis and along the Y-axis.\n\nNote: A value tells browsers not to scale the selected element.\n\nWhat is the CSS Function?\n\ntransforms an element by resizing (scaling) it three-dimensionally from a fixed point along the z-axis.\n• None \"Transform origin\" is the fixed point from which the computer scales an element.\n• None You can define your element's fixed point using the CSS property. But the default is .\n\naccepts a single argument. Here is the syntax:\n• None The function is equivalent to .\n• None The argument specifies the element's scaling factor along the z-axis.\n\nWe often use with other CSS functions such as , , and . Below are some examples.\n\nHow to use with CSS and functions:\n\nTry it on StackBlitz\n\nHere's what we did in the snippet above:\n• None We used the function to define a distance between the user and the z=0 plane.\n• None The function specifies a scale factor of for the image along the z-axis.\n• None We used the function to rotate the image seventeen-degree (17⁰) around the x-axis.\n• None List first whenever you chain it with other CSS transform functions. Otherwise, browsers might transform the selected element incorrectly.\n• None List the function before . Otherwise, the browser will not scale the element.\n\nHow to use with CSS and functions:\n\nTry it on StackBlitz\n\nHere's what we did in the snippet above:\n• None We used the function to define a distance between the user and the z=0 plane.\n• None The function specifies a scale factor of for the image along the z-axis.\n• None We used the function to reposition the thirty pixels ( ) away from its original position along the z-axis.\n\nWhat is the CSS Function?\n\ntransforms an element by resizing (scaling) it three-dimensionally from a fixed point along the x-, y-, and z-axis.\n• None \"Transform origin\" is the fixed point from which the computer scales an element.\n• None You can define your element's fixed point using the CSS property. But the default is .\n\naccepts three arguments. Here is the syntax:\n\nThe , , and arguments are numbers specifying the x-, y-, and z-coordinates. The coordinates are the axis along which browsers will scale the element.\n\nBelow are some examples of how the CSS function works.\n\nHow to use with CSS and functions:\n\nTry it on StackBlitz\n\nHere's what we did in the snippet above:\n• None We used the function to define a distance between the user and the z=0 plane.\n• None The function specifies a scale factor of , , and for the image along the x-, y-, and z-axis.\n• None We used the function to rotate the image seventeen-degrees (17⁰) around the x-axis.\n• None A scale factor of will apply no scaling effect on the element.\n• None List first whenever you chain it with other CSS transform functions. Otherwise, browsers might transform the selected element incorrectly.\n• None List the function before . Otherwise, the browser will not scale the element.\n\nTry it on StackBlitz\n\nWe used the function to specify a scale factor of , , and for the image along the x-, y-, and z-axis.\n\nWhat is the CSS Function?\n\ntransforms an element by slanting (skewing) it two-dimensionally around a fixed point.\n• None \"Transform origin\" is the fixed point from which the computer skews an element.\n• None You can define your element's fixed point using the CSS property. But the default is .\n\naccepts two arguments. Here is the syntax:\n• None The argument specifies the element's skewing angle along the x-axis.\n• None The argument specifies the element's skewing angle along the y-axis.\n• None and can be in degrees, gradians, radians, or turns.\n• None An argument consists of a number followed by the unit you wish to use—for instance, .\n\nBelow are some examples of how the CSS function works.\n\nHow to skew an element along only the X-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to apply a thirty-degree (30⁰) slant on the image along only the x-axis.\n\nHow to skew an element along only the Y-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to apply a forty-degree (40⁰) slant on the image along only the y-axis.\n• None A zero ( ) skew degree tells browsers not to apply any skewing effect on the selected element.\n\nHow to skew an element along the X- and Y-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to apply a thirty-degree (30⁰) slant on the image along the x-axis. And forty-degree (40⁰) along the y-axis.\n\nWhat is the CSS Function?\n\ntransforms an element by repositioning (translating) it two-dimensionally.\n\naccepts two arguments. Here is the syntax:\n• None The argument can be a length or percentage value. It specifies the distance you wish to move the element from its original x-axis position.\n• None The argument can be a length or percentage value. It defines the distance you wish to move the element from its original y-axis position.\n\nBelow are some examples of how the CSS function works.\n\nHow to translate an element along only the X-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to reposition the image away from its original position along the x-axis.\n\nYou can also write it like this, specifying the :\n\nHow to translate an element along only the Y-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to reposition the image away from its original position along the y-axis.\n• None A zero ( ) translate distance tells browsers not to apply any translating effect on the selected element.\n\nHow to translate an element along the X- and Y-axis:\n\nTry it on StackBlitz\n\nThe snippet above used the function to reposition the image away from its original position along the x-axis and from its y-axis.\n\nWhat is the CSS Function?\n\ntransforms an element by repositioning (translating) it three-dimensionally along the z-axis.\n\naccepts a single argument. Here is the syntax:\n\nThe argument specifies the distance you wish to move the element from its original z-axis position.\n\nWe often use with the function. Below are some examples.\n\nHow to use with the CSS function:\n\nTry it on StackBlitz\n\nHere's what we did in the snippet above:\n• None We used the function to define a distance between the user and the z=0 plane.\n• None We used the function to reposition the ten pixels ( ) away from its original position along the z-axis.\n• None Suppose the 's z-axis position is larger than or equal to the function's argument. In that case, the image will disappear as though it is behind the user. In other words, the selected item disappears when the user is in the same position as the element (or when the element is behind the user).\n• None The larger the user's distance to the element's z-axis position, the less intensive the perspective effect will be, and vice-versa.\n\nHow to use with a perspective:\n\nTry it on StackBlitz\n\nHere's what we did in the snippet above:\n• None We used the function to define a distance between the user and the z=0 plane.\n• None We used the function to reposition the ten pixels ( ) away from its original position along the z-axis.\n\nWhat is the CSS Function?\n\ntransforms an element by repositioning (translating) it three-dimensionally along the x-, y-, and z-axis.\n\naccepts three arguments. Here is the syntax:\n• None The argument can be a length or percentage value. It specifies the distance you wish to move the element from its original x-axis position.\n• None The argument can be a length or percentage value. It defines the distance you wish to move the element from its original y-axis position.\n• None can only be a length—not a percentage. It defines the distance you wish to move the element from its original z-axis position.\n\nBelow are some examples of how the CSS function works.\n\nHow to translate an element along only the X-axis\n\nTry it on StackBlitz\n\nThe snippet above used the function to reposition the image away from its original position along the x-axis.\n\nTry it on StackBlitz\n\nThe snippet above used the function to reposition the image away from its original position along the x-axis, from its y-axis, and from its z-axis.\n\nThe CSS translate functions and the CSS property provide two similar ways to specify a translation transformation.\n\nThe main differences between the two translation techniques are as follows:\n• None The CSS property allows translating an element without using the CSS property.\n• None The CSS property's syntax is shorter than its function alternative.\n• None The CSS property saves you from remembering the specific order to position the transform functions.\n• None Browsers calculate the transform functions' matrix in the order you assigned them to the CSS property—from left to right.\n• None Browsers calculate the transform properties' matrix in the following order:\n\nBelow are some examples.\n\nHow to use CSS property vs. function to translate an element along the X- and Y-axis\n\nTry it on StackBlitz\n\nThe snippet above used the property to reposition the image away from its original position along the x-axis. And from its y-axis.\n\nNote: Suppose you wish to translate an element along the z-axis. In that case, set a property on the \"parent element\" of the element you want to translate. Otherwise, the element will not move along its z-axis.\n\nHow to use CSS property vs. function to translate an element along the Z-axis\n\nTry it on StackBlitz\n\nHere's what we did in the snippet above:\n• None We used the property to define a distance between the user and the z=0 plane.\n• None We used the property to reposition the seventeen pixels ( ) away from its original position along the z-axis.\n\nHow to use CSS property vs. function to translate an element three-dimensionally\n\nTry it on StackBlitz\n\nThe snippet above used the property to reposition the image away from its original position along the x-axis, from its y-axis, and from its z-axis.\n\nNote: A value tells browsers not to translate the selected element.\n\nWhat is the CSS Function?\n\ntransforms an element by adding some perspective effects to it.\n\naccepts only one argument. Here is the syntax:\n\nThe argument specifies the user's distance to the z=0 plane.\n\nA three dimensional Cartesian coordinate system with a red arrow defining the distance between the user and the z=0 plane\n\nWe often use with other CSS functions such as , , and . Below are some examples.\n\nHow to use with the CSS function:\n\nTry it on StackBlitz\n\nHere's what we did in the snippet above:\n• None We used the function to define a distance between the user and the z=0 plane.\n• None We used the function to reposition the ten pixels ( ) away from its original position along the z-axis.\n• None Suppose the 's z-axis position is larger than or equal to the function's argument. In that case, the image will disappear as though it is behind the user. In other words, the selected item disappears when the user is in the same position as the element (or when the element is behind the user).\n• None The larger the user's distance to the element's z-axis position, the less intensive the perspective effect will be, and vice-versa.\n\nHow to use with the CSS function:\n\nTry it on StackBlitz\n\nHere's what we did in the snippet above:\n• None We used the function to define a distance between the user and the z=0 plane.\n• None We used the function to rotate the negative ten-degree (-10⁰) around the y-axis.\n\nHow to use with the CSS function:\n\nTry it on StackBlitz\n\nHere's what we did in the snippet above:\n• None We used the function to define a distance between the user and the z=0 plane.\n• None We used the function to rotate the seventeen-degree (17⁰) around the x-axis.\n\nThe CSS function and the property provide two similar ways to add perspective effects to HTML elements.\n\nThe main differences between the two perspective techniques are as follows:\n• None We apply the function \"directly on the element\" we want to add some perspective effects to.\n• None We apply the property \"on the parent element\" of the element we want to add some perspective effects to.\n• None The function works as a property's value.\n• None The CSS property allows you to create perspective effects without using the CSS property.\n\nUse CSS property to add perspective effect to a child element:\n\nTry it on StackBlitz\n\nHere's what we did in the snippet above:\n• None We used the property to define a distance between the user and the z=0 plane.\n• None We used the property to rotate the seventeen-degree (17⁰) around the x-axis.\n• None The CSS property saves you from remembering the specific order to position the transform functions.\n• None A value tells browsers not to add any perspective effect to the selected element's children.\n\nWhat is the CSS Function?\n\nThe CSS function is a shorthand for the following 2D transform functions:\n\nIn other words, instead of writing:\n\nTry it on StackBlitz\n\nYou can alternatively use the function to shorten your code like so:\n\nTry it on StackBlitz\n\nThe function accepts six values. Here's the syntax:\n\nYou can represent the CSS matrix's values as homogeneous coordinates on ℝℙ2 like so:\n• None and are numbers describing an element's scale and skew linear transformation on the x-axis.\n• None is a number representing an element's translation on the x-axis.\n• None and are numbers describing an element's skew and scale linear transformation on the y-axis.\n• None is a number representing an element's translation on the y-axis.\n• None We do not pass the constants as arguments to the function because the computer implies them automatically.\n\nBelow are some examples of the CSS function.\n\nHow to convert to function:\n\nConsider the following property:\n\nTry it on StackBlitz\n\nHere is the equivalent of the above function:\n\nTry it on StackBlitz\n\nLet's also represent the matrix's values as homogeneous coordinates on ℝℙ2:\n\nBelow is another example.\n\nHow to convert to function:\n\nTry it on StackBlitz\n\nHere is the equivalent of the above function:\n\nTry it on StackBlitz\n\nLet's also represent the matrix's values as homogeneous coordinates on ℝℙ2:\n\nBelow is a third example.\n\nHow to convert and to function:\n\nTry it on StackBlitz\n\nHere is the syntax for converting the above property's value to :\n\nIt's now time to multiply the two homogeneous coordinates by using the following syntax:\n\nLet's implement the above syntax like so:\n\nThe next step is to resolve the addition. So, let's do that now.\n\nThe addition's result above gives us the homogeneous coordinates of the property.\n\nIn other words, the product of and equal:\n\nTherefore, the matrix equivalence of is .\n\nTry it on StackBlitz\n\nPlease note that and return different matrixes. Let's see an example of the second arrangement below.\n\nHow to convert and to function:\n\nConsider the following property:\n\nTry it on StackBlitz\n\nHere is the syntax for converting the above property's value to :\n\nIt's now time to multiply the two homogeneous coordinates by using the following syntax:\n\nLet's implement the above syntax like so:\n\nThe next step is to resolve the addition. So, let's do that now.\n\nThe addition's result above gives us the homogeneous coordinates of the property.\n\nIn other words, the product of and equal:\n\nTherefore, the matrix equivalence of is .\n\nTry it on StackBlitz\n\nNotice that equals . And is equivalent to .\n\nIn other words, the order in which you write the transform functions matters. Let's discuss more on this below.\n\nWhy Does the CSS Transform Functions' Order Matter?\n\nThe order in which you write CSS transform functions matters because of the way browsers calculate the matrix's values.\n\nFor instance, consider the following snippet:\n\nTry it on StackBlitz\n\nThe only difference between the green and the blue s is the order in which we wrote their transform functions.\n\nHowever, the computer translated the two containers using different values ( for the green and for the blue one).\n\nSo, why did the transform functions' order affect the s' translation values? Here's the reason:\n• Browsers multiply each transform function's homogeneous coordinates in order—from left to right.\n\nIn other words, the computer used the following syntax to compute the green 's matrix:\n\nAnd it used the following syntax to calculate the blue 's matrix:\n\nTherefore, the position of the transform functions determined the matrix's arguments because browsers began the calculation in order from the leftmost function to the right.\n\nKnowing how to convert transform functions to is beneficial. And having some conversion tools can come in handy. So, let's discuss some helpful tools you can use.\n\nThe two tools you can use to do a quick conversion of transform functions to are:\n\nHow to use to convert transform functions to\n\nSuppose you want to convert the following transform functions to matrix:\n\nYou will add an attribute to the image element:\n\nThen, in JavaScript, you will:\n• None Use the attribute to get the image element.\n• None Use the method to get the image's property's value.\n\nTry it on StackBlitz\n\nBrowsers, by default, convert a CSS property's value to its matrix equivalent. So, the snippet above returned the image's computed value.\n\nLet's now discuss the second conversion tool.\n\nHow to use the matrix resolutions tool to convert transform functions to\n\nSuppose you want to convert the following transform functions to a :\n\nYou will do the following:\n• None Go to The Matrix Resolutions website: https://meyerweb.com/eric/tools/matrix/.\n• None Paste your transform functions ( ) into the first text field.\n• None Click \"The Red Pill\" button to generate the transform functions' matrix equivalence.\n\nClick the red pill button to convert CSS transform functions to a matrix() function\n\nImportant Stuff to Know about Transforming Elements in CSS\n\nHere are three essential facts to remember when you transform elements in CSS.\n\nSuppose you set the property to any value other than . In that case, the browser will create a stacking context. And the transformed element will serve as a containing block to any absolute or fixed positioned elements it contains.\n\nWhenever you include scaling or zooming animations in your app, provide users an option to turn off animations. This option is necessary because scaling and zooming animations cause accessibility issues.\n\n3. Not all elements are transformable\n\nYou cannot transform the following box models:\n\nIn this article, we discussed all the CSS transform tools you need to translate, rotate, skew, scale, or add perspective effects to HTML elements.\n\nIf you like this tutorial, you will enjoy my CSS Flexbox book. It is a handy quick reference guide that uses images and live examples to explain Flexbox."
    }
]