[
    {
        "link": "https://create.roblox.com/docs/reference/engine/classes/UserInputService",
        "document": "This property describes whether the user's device has an accelerometer An accelerometer is a component found in most mobile devices that measures acceleration (change in speed). For example, the following code snippet demonstrates how to check if the user's device has an accelerometer. If the device has an enabled accelerometer, you can get its current acceleration by using the UserInputService:GetDeviceAcceleration() function or track when the device's acceleration changes by using the UserInputService.DeviceAccelerationChanged event. As UserInputService is client-side only, this property can only be used in a LocalScript. This property describes whether the device being used by a user has an available gamepad. If gamepads are available, you can use UserInputService:GetConnectedGamepads() to retrieve a list of connected gamepads. As UserInputService is client-side only, this property can only be used in a LocalScript. How to Set the Active Gamepad for Input -- Nothing is connected; set up for \"Gamepad1\" This property describes whether the user's device has a gyroscope. A gyroscope is a component found in most mobile devices that detects orientation and rotational speed. If a user's device has a gyroscope, you can use incorporate it into your game using the UserInputService:GetDeviceRotation() function and UserInputService.DeviceRotationChanged event. As UserInputService is client-side only, this property can only be used in a LocalScript. This property describes whether the user's device has a keyboard available. This property is true when the user's device has an available keyboard, and false when it does not. It can be used to determine whether the user has an available keyboard - which can be important if you want to check if you can use UserInputService:IsKeyDown() or UserInputService:GetKeysPressed() to check for keyboard input. As UserInputService is client-side only, this property can only be used in a LocalScript. \"The user's device has an available keyboard!\" \"The user's device does not have an available keyboard!\" This property sets how the user's mouse behaves based on the Enum.MouseBehavior enum. It can be set to three values:\n• None — The mouse moves freely around the user's screen. — The mouse moves freely around the user's screen.\n• None — The mouse is locked and cannot move from the center of the user's screen. — The mouse is locked and cannot move from the center of the user's screen.\n• None — The mouse is locked and cannot move from its current position on the user's screen at the time of locking. — The mouse is locked and cannot move from its current position on the user's screen at the time of locking. The value of this property does not affect the sensitivity of events tracking mouse movement. For example, GetMouseDelta returns the same Vector2 screen position in pixels regardless of whether the mouse is locked or able to move freely around the user's screen. As a result, default scripts like those controlling the camera are not impacted by this property. This property is overridden if a GuiButton with Modal enabled is GuiButton.Visible unless the player's right mouse button is down. Note that, if the mouse is locked, UserInputService.InputChanged will still fire when the player moves the mouse and will pass in the Delta that the mouse attempted to move by. Additionally, if the player is kicked from the game, the mouse will be forcefully unlocked. As UserInputService is client-side only, this property can only be used in a LocalScript. -- Reset camera back to CFrame and FieldOfView before zoom -- Allow camera to be changed by script -- anything higher would make looking up and down harder; recommend anything between 0~1 -- Determine whether the user is on a mobile device -- The user is on a mobile device, use Touch events -- The user is not on a mobile device use Input events This property determines the sensitivity of the user's Mouse. The sensitivity determines the extent to which a movement of the physical mouse translates to a movement of the mouse in-game. This can be used to adjusted how sensitive events tracking mouse movement, like GetMouseDelta, are to mouse movement. This property does not affect the movement of the mouse icon. Nor does it affect the Camera Sensitivity setting found in the Settings tab of the client's Settings menu, which also adjusts the sensitivity of events tracking mouse movement. This property has a maximum value of 10 and a minimum value of 0. A lower value corresponds to lower sensitivity, and a higher value to higher sensitivity. When sensitivity is 0, events that track the mouse's movement will still fire but all parameters and properties indicating the change in mouse position will return Vector2.new(), or Vector3.new() in the case of InputObject.Delta. For example, GetMouseDelta will always return (0, 0). -- Reset camera back to CFrame and FieldOfView before zoom -- Allow camera to be changed by script -- anything higher would make looking up and down harder; recommend anything between 0~1 This property describes whether the user's device has a mouse available. This property is true when the user's device has an available mouse, and false when it does not. \"The user's device has an available mouse!\" \"The user's device does not have an available mouse!\" It is important to check this before using UserInputService mouse functions such as UserInputService:GetMouseLocation(). As UserInputService is client-side only, this property can only be used in a LocalScript. -- Reset camera back to CFrame and FieldOfView before zoom -- Allow camera to be changed by script -- anything higher would make looking up and down harder; recommend anything between 0~1 The MouseIcon property determines the image used as the pointer. If blank, a default arrow is used. While the cursor hovers over certain UI objects such as an ImageButton, TextButton, TextBox, or ProximityPrompt, this image will be overridden and temporarily ignored. To hide the cursor entirely, do not use a transparent image. Instead, set UserInputService.MouseIconEnabled to false. -- In order to restore the cursor to what it was set to previously, it will need to be saved to a variable -- Only update the saved cursor if it's not currently saved -- Only restore the mouse cursor if there's a saved cursor to restore -- Don't restore the same cursor twice (might overwrite another script) This property determines whether the Mouse icon is visible When true the mouse's icon is visible, when false it is not. For example, the code snippet below hides the mouse's icon. As UserInputService is client-side only, this property can only be used in a LocalScript. This property describes the position of the on-screen keyboard in pixels. The keyboard's position is Vector2.new(0, 0) when it is not visible. As UserInputService is client-side only, this property can only be used in a LocalScript, or a Script with RunContext set to Enum.RunContext.Client. See also OnScreenKeyboardVisible and OnScreenKeyboardSize. This property describes the size of the on-screen keyboard in pixels. The keyboard's size is Vector2.new(0, 0) when it is not visible. As UserInputService is client-side only, this property can only be used in a LocalScript, or a Script with RunContext set to Enum.RunContext.Client. See also OnScreenKeyboardVisible and OnScreenKeyboardPosition. This property describes whether an on-screen keyboard is currently visible on the user's screen. As UserInputService is client-side only, this property can only be used in a LocalScript, or a Script with RunContext set to Enum.RunContext.Client. See also OnScreenKeyboardSize and OnScreenKeyboardPosition. This property describes whether the user's current device has a touch screen available. The property is used to determine if the user's device has a touch screen, and therefore if touch events will fire. If TouchEnabled is true, you can use UserInputService events such as UserInputService.TouchStarted and UserInputService.TouchEnded to track when a user starts and stops touching the screen of their device. The code snippet below prints whether the user's device has a touch screen. \"The user's device does not have a touchscreen!\" -- Determine whether the user is on a mobile device -- The user is on a mobile device, use Touch events -- The user is not on a mobile device use Input events This property describes whether the user is using a virtual reality (VR) device. If a VR device is enabled, you can interact with its location and movement through functions such as UserInputService:GetUserCFrame(). You can also react to VR device movement using the UserInputService.UserCFrameChanged event. \"User is not using a VR headset!\" As UserInputService is client-side only, this property can only be used in a LocalScript.\n\nThis function returns whether the given Enum.UserInputType gamepad supports a button corresponding with the given Enum.KeyCode. This function is used to determine valid gamepad inputs. To determine which Enum.UserInputType gamepads are connected, use UserInputService:GetConnectedGamepads(). As UserInputService is client-side only, this function can only be used in a LocalScript. The Enum.UserInputType of the gamepad. The Enum.KeyCode of the button in question. \n\n Whether the given gamepad supports a button corresponding with the given Enum.KeyCode. This function returns an array of Enum.UserInputType gamepads currently connected. If no gamepads are connected, this array will be empty. Additionally, it only returns UserInputType objects that are gamepads. For instance, this event will return a connected Gamepad1 object but not a Keyboard object. For example, the following code snippet retrieves the connected gamepads and stores them in a variable named connectedGamepads. To check if a specific gamepad is connected, use UserInputService:GetGamepadConnected(). As UserInputService is client-side only, this function can only be used in a LocalScript. \n\n An array of UserInputTypes corresponding with the gamepads connected to the user's device. How to Set the Active Gamepad for Input -- Nothing is connected; set up for \"Gamepad1\" The GetDeviceAcceleration function determines the current acceleration of the user's device. It returns an InputObject that describes the device's current acceleration. In order for this to work, the user's device must have an enabled accelerometer. To check if a user's device has an enabled accelerometer, you can check the UserInputService.AccelerometerEnabled property. If you want to track when the user's device's acceleration changes instead, you can use the UserInputService.DeviceAccelerationChanged event. Since it only fires locally, it can only be used in a LocalScript. \n\n \"Cannot get device acceleration because device does not have an enabled accelerometer!\" This function returns an InputObject describing the device's current gravity vector. The gravity vector is determined by the device's orientation relative to the real-world force of gravity. For instance, if a device is perfectly upright (portrait), the gravity vector is Vector3.new(0, 0, -9.18). If the left side of the device is pointing down, the vector is Vector3.new(9.81, 0, 0). Finally, if the back of the device is pointing down, the vector is Vector3.new(0, -9.81, 0). This function might be used to enable the user's device to impact or control gravity within the game or move in-game objects such as a ball. Gravity is only tracked for players using a device with an enabled gyroscope - such as a mobile device. To check if a user's device has an enabled gyroscope, check the value of UserInputService.GyroscopeEnabled. If the device has an enabled gyroscope, you can also use the UserInputService.DeviceGravityChanged event to track when force of gravity on the user's device changes. As UserInputService is client-side only, this function can only be used in a LocalScript. \n\n -- Move the bubble in the world based on the gyroscope data This function returns an InputObject and a CFrame describing the device's current rotation vector. This is fired with an InputObject. The Position property of the input object is a Enum.InputType.Gyroscope that tracks the total rotation in each local device axis. Device rotation can only be tracked on devices with a gyroscope. As this function fires locally, it can only be used in a LocalScript.\n• None The delta property describes the amount of rotation that last happened\n• None The CFrame is the device's current rotation relative to its default reference frame. \"Cannot get device rotation because device does not have an enabled gyroscope!\" This function returns the TextBox the client is currently focused on. A TextBox can be manually selected by the user, or selection can be forced using the TextBox:CaptureFocus() function. If no TextBox is selected, this function will return nil. As UserInputService is client-side only, this function can only be used in a LocalScript. \n\n This function returns whether a gamepad with the given Enum.UserInputType is connected to the client. This can be used to check if a specific gamepad, such as 'Gamepad1' is connected to the client's device. To retrieve a list of all connected gamepads, use UserInputService:GetConnectedGamepads(). As UserInputService is client-side only, this function can only be used in a LocalScript. The Enum.UserInputType of the gamepad in question. \n\n Whether a gamepad associated with Enum.UserInputType is connected. \"Gamepad1 is connected to the client\" \"Gamepad1 is not connected to the client\" This function returns an array of InputObjects for all available inputs on the given Enum.UserInputType gamepad, representing each input's last input state. To find the UserInputTypes of connected gamepads, use UserInputService:GetConnectedGamepads(). As this function only fires locally, it can only be used in a LocalScript. The Enum.UserInputType corresponding with the gamepad in question. \n\n An array of InputObjects representing the current state of all available inputs for the given gamepad. This method takes the requested Enum.KeyCode and returns the associated image for the currently connected gamepad device (limited to Xbox, PlayStation and Windows). This means that if the connected controller is an Xbox One controller, the user sees Xbox assets. Similarly, if the connected device is a PlayStation controller, the user sees PlayStation assets. If you want to use custom assets, see GetStringForKeyCode(). The Enum.KeyCode for which to fetch the associated image. \n\n This function returns an array of InputObjects associated with the keys currently being pressed down. This array can be iterated through to determine which keys are currently being pressed, using the InputObject.KeyCode values. To check if a specific key is being pressed, use UserInputService:IsKeyDown(). As UserInputService is client-side only, this function can only be used in a LocalScript. \n\n An array of InputObjects associated with the keys currently being pressed. -- Double jump during freefall if able to -- Allow player to jump again after they land This function returns 'Enum.UserInputType` associated with the user's most recent input. For example, if the user's previous input had been pressing the spacebar, the Enum.UserInputType returned would be 'Keyboard'. The UserInputService.LastInputTypeChanged event can be used to track when the last Enum.UserInputType used by the user changes. As UserInputService is client-side only, this function can only be used in a LocalScript. \n\n The Enum.UserInputType associated with the user's most recent input. \"Most recent input was via keyboard\" This function returns an array of InputObjects corresponding to the mouse buttons currently being pressed down. Mouse buttons that are tracked by this function include: If the user is not pressing any mouse button down when the function is called, it will return an empty array. As UserInputService is client-side only, this function can only be used in a LocalScript. \n\n An array of InputObjects corresponding to the mouse buttons currently being currently held down. -- InputBegan is a UserInputService event that fires when the player -- Returns an array of the pressed MouseButtons This function returns the change, in pixels, of the position of the player's Mouse in the last rendered frame as a Vector2. This function only works if the mouse has been locked using the UserInputService.MouseBehavior property. If the mouse has not been locked, the returned Vector2 values will be zero. The sensitivity of the mouse, determined in the client's settings and UserInputService.MouseDeltaSensitivity, will influence the result. As UserInputService is client-side only, this function can only be used in a LocalScript. \n\n Change in movement of the mouse. -- Determine whether the user is on a mobile device -- The user is on a mobile device, use Touch events -- The user is not on a mobile device use Input events This function returns a Vector2 representing the current screen location of the player's Mouse in pixels relative to the top‑left corner. This does not account for the Enum.ScreenInsets; to get the top‑left and bottom‑right insets, call GuiService:GetGuiInset(). If the location of the mouse pointer is offscreen or the player's device does not have a mouse, the returned value will be undetermined. As UserInputService is client-side only, this function can only be used in a LocalScript. \n\n A Vector2 representing the current screen location of the mouse, in pixels. This function returns an array of gamepad UserInputTypes that are connected and enabled for GUI navigation. This list is in descending order of priority, meaning it can be iterated over to determine which gamepad should have navigation control. Whether a connected gamepad is a navigation gamepad only determines which gamepad(s) control the navigation GUIs. This does not influence navigation controls. Since UserInputService is client-side only, this function can only be used in a LocalScript.\n• None , to enable or disable a gamepad for GUI navigation , to enable or disable a gamepad for GUI navigation\n• None , to verify if a gamepad is enabled for GUI navigation , to verify if a gamepad is enabled for GUI navigation\n• None , to return all gamepads connected regardless of GUI navigational control , to return all gamepads connected regardless of GUI navigational control \n\n An array of UserInputTypes that can be used for GUI navigation, in descending order of priority. GetStringForKeyCode returns a string representing a key the user should press in order to input a given Enum.KeyCode, keeping in mind their keyboard layout. For key codes that require some modifier to be held, this function returns the key to be pressed in addition to the modifier. See the examples below for further explanation. When using Roblox with a non‑QWERTY keyboard layout, key codes are mapped to equivalent QWERTY positions. For example, pressing A on an AZERTY keyboard results in Enum.KeyCode.Q. This mapping can lead to mismatched information on experience UI elements. For example, \"Press M to open the map\" is inaccurate on an AZERTY keyboard; it would need to be \"Press ? to open the map\" which is in the same position as M on QWERTY. This function solves this issue by providing the actual key to be pressed while using non‑QWERTY keyboard layouts. because is typed with GetStringForKeyCode() returns the string mapping for the Enum.KeyCode for the most recently connected gamepad. If the connected controller is not supported, the function returns the default string conversion for the requested key code. The following example shows how you can map custom assets for ButtonA: The directional pad key codes do not have any differences based on device. Enum.KeyCode.ButtonSelect has slightly different behavior in some cases. Use both PlayStation mappings to ensure users see the correct buttons. When using a Enum.KeyCode that may be better represented as an image, such as for an ImageLabel in a user interface, you can use the following legacy icons. However, it's recommended that you use GetImageForKeyCode() as a more modern, cross‑platform method to retrieve Xbox and PlayStation controller icons. \n\n This function returns an array of KeyCodes that the gamepad associated with the given Enum.UserInputType supports. This function can be used to determine which KeyCodes are supported and not supported by a connected gamepad. To determine if a specific KeyCode is supported, use UserInputService:GamepadSupports(). If called on a non existent, or non connected, gamepad, this function will return an empty array. As UserInputService is client-side only, this function can only be used in a LocalScript. The Enum.UserInputType of the gamepad. \n\n An array of KeyCodes supported by the given gamepad. -- Since this function does not return anything, this handler will -- \"sink\" the input and no other action handlers will be called after This function checks if a particular button is pressed on a particular gamepad. It returns true if the gamepad has the specified button pressed down, otherwise it returns false. The specified gamepad should be one of the following UserInputType enum values: The specified button should be one of the following KeyCodes enum values: This can be used to check whether a specific button, such as A, is being held down. For example: Since UserInputService is client-side only, this function can only be used in a LocalScript.\n• None - A similar method with a different use: To check if a given on a is pressed. - A similar method with a different use: To check if a givenon ais pressed. The Enum.UserInputType of the given gamepad. The Enum.KeyCode of the specified button. \n\n Whether the specified gamepad button on the given gamepad is pressed is pressed. -- nothing is connected, at least set up for gamepad1 This function returns whether the user is holding down the key associated with the given Enum.KeyCode. It returns true if the specified key is pressed or false if it is not pressed. This can be used to check if a specific key, such as the space bar, is being pressed. For example: To retrieve a list of all keys pressed by the user, use the UserInputService:GetKeysPressed() function. Since UserInputService is client-side only, this function can only be used in a LocalScript.\n• None - A similar event with a different use: To check if a given on a is pressed. - A similar event with a different use: To check if a givenon ais pressed. The Enum.KeyCode of the key. \n\n Whether the specified key is being held down. -- Return whether left or right shift keys are down -- Handle user input began differently depending on whether a shift key is pressed This function takes a mouse button Enum.UserInputType and returns a bool that indicates whether it is currently pressed. The mouse button checked depends on the Enum.UserInputType value passed to the function as an argument. For example: Since UserInputService is client-side only, this function can only be used in a LocalScript.\" The Enum.UserInputType of the mouse button. \n\n Whether the given mouse button is currently held down. -- Determine whether the user is on a mobile device -- The user is on a mobile device, use Touch events -- The user is not on a mobile device use Input events This function returns true if the specified Enum.UserInputType gamepad is allowed to control Navigation and Selection GuiObjects. If you want to set a navigation gamepad, you can use UserInputService:SetNavigationGamepad(). You can also use UserInputService:GetNavigationGamepads() to get a list of all navigation gamepads. For example, the code below checks if the gamepad1 is as a navigation gamepad: A list of all connected gamepads, regardless of navigation can be retrieved using`UserInput/GetConnectedGamepads. Since UserInputService is client-side only, this function can only be used in a LocalScript. The Enum.UserInputType of the specified gamepad. \n\n Whether the specified gamepad is a navigation gamepad. This function recenters the CFrame of the VR headset to the current orientation of the headset worn by the user. This means that the headset's current orientation is set to CFrame.new(). Use this function to move the headset CFrame to the center of the play area if it seems to be at a weird offset. This behaves identically to the VRService function, VRService:RecenterUserHeadCFrame(). Since UserInputService is client-side only, this function can only be used in a LocalScript. \n\n The SetNavigationGamepad function sets whether the specified Enum.UserInputType gamepad can move the GUI navigator. A gamepad that is allowed to move the GUI navigator is considered a navigation gamepad. If the enabled argument is passed as true, the Gamepad can move the GUI navigator. If the argument is false, the Gamepad can not move the GUI navigator. If you want to check if a specified Gamepad is a set to be a navigation gamepad, you can use the UserInputService:IsNavigationGamepad() function. You can also use the UserInputService:GetNavigationGamepads() to retrieve a list of all navigation gamepads. Since UserInputService is client-side only, this function can only be used in a LocalScript. The Enum.UserInputType of the specified gamepad. Whether the specified gamepad can move the GUI navigator. \n\n\n\nThe DeviceAccelerationChanged event fires when a user moves a device that has an accelerometer. An accelerometer is a component found in most mobile devices that measures acceleration (change in speed). To determine whether a user's device has an accelerometer enabled, seeUserInputService.AccelerometerEnabled. This event can be used to track the movement of a device that has an accelerometer. A sample usage includes moving the player character when a mobile device accelerates. Additionally, this event can be used along with UserInputService:GetDeviceAcceleration() to determine the current movement of a user's device if the device has an accelerometer. This event only fires locally - which means that only the player whose device moves can use the event and it will only work in a LocalScript. An InputObject, with a UserInputType of 'Accelerometer', and Position that shows the force of gravity on each local device axis. \n\n The UserInputService.DeviceGravityChanged event fires when the device's gravity Vector3 changes on a device that has an accelerometer. A device's gravity vector represent the force of gravity on each of the device's X, Y, and Z axes. While gravity never changes, the force it exerts on each axis changes when the device rotates and changes orientation. The force value exerted on each axis is a unit vector ranging from -1 to 1. An accelerometer is a component found in most mobile devices that measures acceleration (change in speed). This event can be used to determine the real-world direction of the force of gravity on a user's device. This even can then be used to simulate the force of gravity on a user's device within the game, such as on in-game objects (see example below). To check if a user's device has an enabled accelerometer, see UserInputService.AccelerometerEnabled. If the device has an enabled accelerometer, you can use the UserInputService:GetDeviceGravity() function to get the current force of gravity on the user's device. An InputObject, with a InputObject.Position property that shows the force of gravity on each local device axis. This position can be used as a direction to determine the direction of gravity relative to the device. \n\n The DeviceRotationChanged event fires when a user rotates a device that has a gyroscope. A gyroscope is a component found in most mobile devices that detects orientation and rotational speed. The event is useful when tracking the orientation of the device and how changes as the user rotates their device. To determine the current device rotation, you can use the UserInputService:GetDeviceRotation() function. To check if a user's device has an enabled gyroscope, and that this event will fire, see UserInputService.GyroscopeEnabled. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. An InputObject providing info about the device's rotation. InputObject.Position represents the new rotation a Vector3 positional value and InputObject.Delta represents the change in rotation in a Vector3 positional value. \n\n The GamepadConnected event fires when a gamepad is connected to the client. Since a Roblox game supports multiple controllers, this event is useful when paired with the UserInputService.GamepadDisconnected event to track which controllers/gamepads are active. You can also use UserInputService:GetConnectedGamepads() to find the correct gamepad to use. The following example demonstrates a usage example of a tracking when a gamepad is connected to the client. If you want to see which devices are connected, you can use the UserInputService:GetConnectedGamepads() function. As this event fires locally, it can only be used in a LocalScript. The Enum.UserInputType of the connected gamepad. \n\n The GamepadDisconnected event fires when a gamepad is disconnected. Since a Roblox game supports multiple controllers, this event is useful when paired with the UserInputService.GamepadConnected event to track which controllers/gamepads are active. You can also use UserInputService:GetConnectedGamepads() to find the correct gamepad to use. The following example demonstrates a usage example of a tracking when a gamepad is disconnected from the client. As this event fires locally, it can only be used in a LocalScript. \n\n The InputBegan event fires when a user begins interacting via a Human-Computer Interface device (mouse button down, touch begin, keyboard button down, etc.). It can be used to track the beginning of user interaction, such as when a user first interacts with a GUI element, a gamepad, etc. It does not capture mouse wheel movements. This event can be used along with UserInputService.InputChanged and UserInputService.InputEnded to track when user input begins, changes, and ends. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An InputObject instance, which contains information about the user's input. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n -- In order to use the InputBegan event, the UserInputService service must be used -- A sample function providing multiple usage cases for various types of user input \"A key is being pushed down! Key:\" \"The left mouse button has been pressed down at\" \"The right mouse button has been pressed down at\" \"A button is being pressed on a gamepad! Button:\" \"The game engine did not internally observe this input!\" The InputChanged event fires when a user changes how they're interacting via a Human-Computer Interface device (mouse button down, touch begin, keyboard button down, etc). To ignore events that are automatically handled by Roblox, like scrolling in a ScrollingFrame, check the gameProcessedEvent argument is false. This event can be used along with UserInputService.InputBegan and UserInputService.InputEnded to track when user input begins, changes, and ends. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An InputObject instance, which contains information about the user's input. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n -- In order to use the InputChanged event, the UserInputService service must be used -- Prints the current input position and the change (delta) in position -- A sample function providing multiple usage cases for various types of user input \"The mouse has been moved!\" \"The mouse wheel has been scrolled!\" \"The left thumbstick has been moved!\" \"The right thumbstick has been moved!\" \"The pressure being applied to the left trigger has changed!\" \"The pressure being applied to the right trigger has changed!\" \"The user's finger is moving on the screen!\" \"The rotation of the user's mobile device has been changed!\" \"The acceleration of the user's mobile device has been changed!\" The InputEnded event fires when a user stops interacting via a Human-Computer Interface device (mouse button down, touch begin, keyboard button down, etc). This is useful when tracking when a user releases a keyboard key, mouse button, touchscreen input, etc. This event can be used along with UserInputService.InputBegan and UserInputService.InputChanged to track when user input begins, changes, and ends. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An InputObject instance, which contains information about the user input. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n -- In order to use the InputChanged event, the UserInputService service must be used -- A sample function providing multiple usage cases for various types of user input \"The left mouse button has been released at\" \"The right mouse button has been released at\" \"A touchscreen input has been released at\" \"A button has been released on a gamepad! Button:\" \"The game engine did not internally observe this input!\" The UserInputService JumpRequest event fires when there is a jump request from the client, for example when the client presses the spacebar or jump button on mobile. This event fires whenever the user tries to make their Player.Character jump. Default behavior responds to a jump request by setting the player's Humanoid.Jump property to true, which makes the player's character jump. The event can be used to track every time a player wants to jump. Instead of using it to make a player jump, this should be used to change default jump behavior - such as disabling jumping. For example, the code below prints \"Jump\" every time the player sends a jump request. Since this event fires multiple times for a single jump request, using a debounce is suggested. If you would like to connect keys or buttons to other actions, consider using events such as UserInputService:GetKeysPressed() and UserInputService.InputBegan or the ContextActionService. As this event only fires locally, it can only be used in a LocalScript. \n\n -- Fires when the user tries to jump The UserInputService.LastInputTypeChanged event fires whenever the client changes how they are interacting via a Human-Computer Interface device. (i.e. from MouseMovement to MouseWheel or from Thumbstick1 to Thumbstick2). To get the value of the last input type, regardless of whether it has changed, you can use the UserInputService:GetLastInputType() function. As this event only fires locally, it can only be used in a LocalScript. \n\n PointerAction fires when the user performs a specific pointer action. In particular, scrolling the mouse wheel. \n\n The TextBoxFocusReleased event fires when a client loses focus on a TextBox, typically when a client stops text entry by pressing return or clicking/touching elsewhere on the screen. For example, the code below prints the name of the TextBox losing focus when the event fires. It can be used alongside UserInputService.TextBoxFocused to track when a TextBox gains and loses focus. As this event only fires locally, it can only be used in a LocalScript. \n\n This event fires when a gains focus on a TextBox, typically when a client clicks/taps on a text box to begin inputting text. This also fires if a text box focus is focused using TextBox:CaptureFocus(). For example, the code below prints the name of the TextBox focused when the event fires. It can be used alongside UserInputService.FocusReleased to track when a text box gains and loses focus. As this event only fires locally, it can only be used in a LocalScript. \n\n The TouchEnded event fires when a user released their finger from the screen of a TouchEnabled device, ending touch input with the device. This event can be used to determine when a user stops touching the screen of their device. It can be paired with UserInputService.TouchStarted to determine when a user starts and stops touching the screen. For example, the code below prints the screen position where the user stops touching the screen. The touch input object is the same input object throughout the lifetime of the touch. So comparing InputObjects when they are touch objects is valid to determine if it is the same finger. To check if a user's device is TouchEnabled, and that touch events will fire, see UserInputService.TouchEnabled. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An InputObject instance, which contains information about the user's input. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n The Difference Between TouchTap and TouchLongPress -- The parent of this script (a ScreenGui) -- Create the GUI frame that the user interacts with through Touch -- Fires when the touches their device's screen -- Fires when a user starts touching their device's screen and does not -- move their finger for a short period of time -- Fires when the user moves their finger while touching their device's -- Fires when the user stops touching their device's screen -- Only use the Touch events if the user is on a mobile device Fired when a user holds at least one finger for a short amount of time on the same screen position of a TouchEnabled device. This event can be used to determine when a user holds their finger down on an in-game GuiObject or element. The example below prints the state of the long press when the user holds at least one finger for a short amount of time on the same screen position. Possible states include: Begin, Change, End, Cancel, and None. To check if a user's device is TouchEnabled, and that touch events will fire, seeUserInputService.TouchEnabled. It can be paired with UserInputService.TouchStarted and UserInputService.TouchEnded to determine when a user starts and stops touching the screen. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An array of Vector2 objects, indicating the position of the fingers involved in the gesture. The Enum.UserInputState of the gesture. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n The Difference Between TouchTap and TouchLongPress -- The parent of this script (a ScreenGui) -- Create the GUI frame that the user interacts with through Touch -- Fires when the touches their device's screen -- Fires when a user starts touching their device's screen and does not -- move their finger for a short period of time -- Fires when the user moves their finger while touching their device's -- Fires when the user stops touching their device's screen -- Only use the Touch events if the user is on a mobile device The TouchMoved event fires when a user moves their finger on a TouchEnabled device. This event can be used to determine when a user moves their finger while touching the screen of a TouchEnabled device. It can be useful to track whether a user is moving their finger on the screen, as well as where the user is moving their finger. The code below prints \"Touch moved from\" the previous Vector2 position \"to \" the new Vector2 position of the user's touch on a TouchEnabled device. It can be paired with UserInputService.TouchStarted and UserInputService.TouchEnded to determine when a user starts touching the screen, how their finger moves while touching it, and when the they stop touching the screen. To check if a user's device is TouchEnabled, and that touch events will fire, see UserInputService.TouchEnabled. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An InputObject instance, which contains information about the user's input. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n The Difference Between TouchTap and TouchLongPress -- The parent of this script (a ScreenGui) -- Create the GUI frame that the user interacts with through Touch -- Fires when the touches their device's screen -- Fires when a user starts touching their device's screen and does not -- move their finger for a short period of time -- Fires when the user moves their finger while touching their device's -- Fires when the user stops touching their device's screen -- Only use the Touch events if the user is on a mobile device The TouchPan event fires when a user drags at least one finger on a TouchEnabled device. This event can be used to determine when a user pans their finger along screen of a TouchEnabled device - such as to rotate the Camera in a custom camera script. The snippet below prints \"Speed of touch drag\" followed by the velocity of the user's touch when the user drags their finger on the screen. Take a look at another useful UserInputService function here UserInputService.TouchRotate. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An array of Vector2 objects, indicating the positions of the touches (e.g. fingers) involved in the gesture. The size of the pan gesture from start to end (in pixels). The speed of the pan gesture (in pixels) per second. The Enum.UserInputState of the gesture. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n -- Determine whether the user is on a mobile device -- The user is on a mobile device, use Touch events -- The user is not on a mobile device use Input events Fired when a user places and moves two fingers on the screen of a TouchEnabled device. For instance, the snippet below prints how much the camera zoom scale has changed since the beginning of the touch pinch. To check if a user's device is TouchEnabled, and that touch events will fire, see UserInputService.TouchEnabled. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An array of Vector2s, indicating the screen position, in pixels, of the fingers involved in the pinch gesture. The magnitude of the pinch from start to finish (in pixels) divided by the starting pinch positions. The speed of the pinch gesture (in pixels) per second. The Enum.UserInputState of the gesture. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n -- Determine whether the user is on a mobile device -- The user is on a mobile device, use Touch events -- The user is not on a mobile device use Input events The TouchRotate event fires when a user rotates two fingers on a TouchEnabled device. For example, the following code prints how much the camera has rotated since the beginning of the touch rotation. To check if a user's device is TouchEnabled, and that touch events will fire, see UserInputService.TouchEnabled. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. The core scripts that control the user's camera on a mobile device use code that functions similarly to this event. Best practice for this event is to use it when creating a mobile camera system to override the default core scripts. An array of Vector2s, indicating the positions of the fingers involved in the gesture. The number of degree the gesture has rotated since the start of the gesture. The change in rotation (in degrees) divided by the duration of the change (in seconds). The Enum.UserInputState of the gesture. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n -- Determine whether the user is on a mobile device -- The user is on a mobile device, use Touch events -- The user is not on a mobile device use Input events The TouchStarted event fires when a user places their finger on a TouchEnabled device, beginning touch input with the device. This event can be used to determine when a user starts touching the screen of their device. It can be paired with UserInputService.TouchEnded to determine when a user starts and stops touching the screen. The touch input object is the same input object throughout the lifetime of the touch. So comparing InputObjects when they are touch objects is valid to determine if it is the same finger. To check if a user's device is TouchEnabled, and that touch events will fire, see UserInputService.TouchEnabled. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An InputObject instance, which contains information about the user's input. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n The TouchSwipe event fires when a user swipes their fingers on a TouchEnabled device. This event can be used to determine when a user swipes their fingers on the screen of their device and the direction that the user swiped. For more precise tracking of touch input movement, use using UserInputService.TouchMoved To check if a user's device is TouchEnabled, and that touch events will fire, see UserInputService.TouchEnabled. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An Enum.SwipeDirection, indicating the direction the user swiped. Number of touches (e.g. fingers) involved in the gesture. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n The TouchTap event fires when the user touches/taps their finger on the screen on a TouchEnabled device. This event will fire regardless of whether the user touches/taps the game world or a GuiObject element. If you are looking for an event that only fires when the user touches/taps the game world, use UserInputService.TouchTapInWorld. To check if a user's device is TouchEnabled, and that touch events will fire, see UserInputService.TouchEnabled. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As this event only fires locally, it can only be used in a LocalScript. An array of Vector2 objects, indicating the position of the fingers involved in the tap gesture. Indicates whether the game engine internally observed this input and acted on it. Generally this refers to UI processing, so if a button was touched or clicked from this input, gameProcessedEvent would be true. This is also true for input events connected via ContextActionService. \n\n The Difference Between TouchTap and TouchLongPress -- The parent of this script (a ScreenGui) -- Create the GUI frame that the user interacts with through Touch -- Fires when the touches their device's screen -- Fires when a user starts touching their device's screen and does not -- move their finger for a short period of time -- Fires when the user moves their finger while touching their device's -- Fires when the user stops touching their device's screen -- Only use the Touch events if the user is on a mobile device The TouchTapInWorld event fires when the user touches/taps their finger on the screen on a TouchEnabled device. It is fired when the user taps in the game world. This event can be used to determine when a user taps the screen and does not tap a GuiObject element. If the user taps a GUI element, UserInputService.TouchTap will fire instead of TouchTapInWorld. To check if a user's device is TouchEnabled, and that touch events will fire, see UserInputService.TouchEnabled. This event only fires when the Roblox client window is in focus. For example, inputs will not be captured when the window is minimized. As it only fires locally, it can only be used in a LocalScript. A Vector2 indicating the position of the touch. \n\n -- Do not create a part if the player clicked on a GUI/UI element -- Get Vector3 world position from the Vector2 viewport position -- Create a new part at the world position if the player clicked on a part -- Do not create a new part if player clicks on empty skybox The UserInputService WindowFocusReleased event fires when the window of the Roblox client loses focus - typically when the Roblox client is minimized by the user. For example, the code below prints \"Window focus released\" whenever the Roblox client loses focus. This event can be used alongside UserInputService.WindowFocused to track whether the Roblox client is actively focused on a user's screen. Since it only fires locally, it can only be used in a LocalScript. \n\n The UserInputService WindowFocused event fires when the window of the Roblox client gains focus - typically when the Roblox client is maximized/actively open on the user's screen. For example, the code below prints \"Window focused\" whenever the Roblox client gains focus. This event can be used alongside UserInputService.WindowFocusReleased to track whether the Roblox client is actively focused on a user's screen. As this event only fires locally, it can only be used in a LocalScript."
    },
    {
        "link": "https://devforum.roblox.com/t/how-do-i-know-the-mouses-target-using-userinputservice/578828",
        "document": "It is still necessary to use Mouse for a number of things. There is a reason Mouse is not deprecated. Not because old stuff uses it (see when they forced FilteringEnabled on old games), but because it has numerous things that no other service, or instance can provide. That being:\n\nMouse.Target\n\n Mouse.Hit\n\n Mouse.Position (I think there’s two properties for this, I forget.)\n\nSo, no, there still is no other way to get the mouse’s target. My apologies."
    },
    {
        "link": "https://devforum.roblox.com/t/i-need-help-with-making-interactions-occupied-by-player-who-is-doing-it/3002403",
        "document": "In short terms - im making a game which has an interaction system.\n\n The problem is when i tried making an additional check if it’s occupied the script is working by a single scenario - Getting me an empty value in ‘Occypiedby’ attribute.\n\n Can you guys help me?\n\n Any help is appreciated\n\nFollowing examples of code are getting me error\n\n2nd piece of code which is on server side"
    },
    {
        "link": "https://devforum.roblox.com/t/how-do-you-use-userinputservice/828909",
        "document": "So I was practicing a little bit of scripting in studio, whilst watching Peaspod’s Advanced Tutorial on key pressing events. I scrolled through the comments a little and people have said that the KeyDown and KeyUp function is outdated and that I should be using the UserInputService event instead. So I did a little bit of research on the UserInputService | Documentation - Roblox Creator Hub and I also tried various ways in my script (It was written just to mess around with events and stuff from the object browser), however I still can’t get this to work and I still don’t know how to do this.\n\nHere is my code. It is giving me an error: [15:51:05.223 - GetService is not a valid member of Player “Players.HexTheSpy”. Hopefully You guys can help me.\n\n Thank you very much!!!"
    },
    {
        "link": "https://devforum.roblox.com/t/help-with-player-interaction-script/1969406",
        "document": "I am trying to get a suspect closest to an officer, (player closest to player on team) so I can enable that player’s gui closest to the officer so the local player can see it, basically like in meepcity if you want to pick up a baby you walk up to them and press E\n\nThe issue is I am making sure it is the issue because when I print it it shows up as the officer trying to get the suspect closest to them ex: im a player and i come near another player and press E, the script thinks its me im pressing E on not the player im closest to\n\nI’ve tried a lot of solutions like switching the players, this haven’t worked, please help me"
    },
    {
        "link": "https://create.roblox.com/docs/luau",
        "document": "Luau is the scripting language creators use in Roblox Studio. It is a fast, small, safe, gradually typed embeddable scripting language derived from Lua 5.1.\n\nThe Script Editor in Studio supports Luau with autocompletion, syntax highlighting, static linting, type checking, and script analysis. It also shows documentation and function signatures for members of the Roblox Engine API.\n• None represents non-existence or nothingness. It's different from any other value or data type. represents non-existence or nothingness. It's different from any other value or data type. represents non-existence or nothingness. It's different from any other value or data type.\n• None , or , have a value of either or . , or, have a value of eitheror , or, have a value of eitheror\n• None are sequences of characters, such as letters, numbers, and symbols. are sequences of characters, such as letters, numbers, and symbols. are sequences of characters, such as letters, numbers, and symbols.\n• None are . are are or of any value except\n\nLuau is dynamically typed by default. Variables, function parameters, and return values can be any data type. This helps you write code faster because you don't need to provide types for each piece of data. You can still declare explicit types for variables in Luau and enable strict type checking to make type issues obvious and easy to locate.\n\nYou can also implement the following data structures using primitive data types:\n• None are Last-In-First-Out collections of items that you can implement using tables. are Last-In-First-Out collections of items that you can implement using tables. are Last-In-First-Out collections of items that you can implement using tables.\n• None are First-In-First-Out collections of items that you can implement using tables. are First-In-First-Out collections of items that you can implement using tables. are First-In-First-Out collections of items that you can implement using tables.\n• None are tables with advanced configurations that can achieve functionalities such as storing pairs of keys and values and calculating arithmetic operations. are tables with advanced configurations that can achieve functionalities such as storing pairs of keys and values and calculating arithmetic operations. are tables with advanced configurations that can achieve functionalities such as storing pairs of keys and values and calculating arithmetic operations.\n\nIn Luau, variables and functions can have global and local scope within a script. Luau has logical, relational, and compound assignment operators. You can use control structures and functions to control when Luau executes code. Many operators and variable assignments perform type coercion to change values to the types that Luau expects."
    },
    {
        "link": "https://create.roblox.com/docs/ui",
        "document": "You can quickly create high-quality graphical user interfaces with minimal scripting requirements using built-in UI objects. Depending on where you create it, UI renders either on-screen or within an experience's 3D world.\n\nOn-screen containers hold UI objects that you want to display on a user's screen. All on-screen UI objects and code are stored and changed on the client.\n\nIn-experience containers such as SurfaceGuis and BillboardGuis hold UI objects that you want to display within your experience's 3D world.\n\nMost UI elements are GuiObjects, 2D graphical user interface objects that you can parent to containers. The four most common are frames, labels, buttons, and text input objects.\n\nUsing the Position, Size, AnchorPoint, and ZIndex properties, you have complete control on how to position, size, and layer GuiObjects. You can also use tweening to transition a GuiObject smoothly from one state to another and provide dynamic visual feedback.\n\nBeyond basic properties for adjusting position and size, Roblox also provides layout structures like list/flex and grid, as well as size modifiers and appearance modifiers.\n\nIn addition to the core user interface objects, the following frameworks provide built‑in and customizable interactivity for your experiences.\n\nProximity prompts are unique built-in UI objects which prompt user interaction to trigger an action when they approach in-experience objects such as doors, light switches, and buttons.\n\nUI drag detectors facilitate and encourage interaction with 2D user interface elements such as sliders, spinners, and more.\n\n3D drag detectors encourage physical interaction with 3D objects in an experience, such as opening doors and drawers, sliding a part around, grabbing and tossing a bowling ball, pulling back and firing a slingshot, and much more."
    },
    {
        "link": "https://create.roblox.com/docs/resources/scripting-libraries",
        "document": "Scripting libraries give quick access to useful utilities and tools.\n\nA collection of methods for working with immutable data in a functional way for Roblox Lua.\n\nA collection of core utilities expanding the capabilities of Lua in Roblox.\n\nA set of utilities to mimic common JS polyfills needed for translating projects from JS to Lua/Luau\n\nUtility functions to query Instances from tags attached with CollectionService\n\nA re-implementation of picomatch, a blazing fast and accurate glob matcher, in Luau.\n\nA re-implementation of ZenObservable, an observable library, in Luau.\n\nA declarative navigation system for App UI, built on top of Roact."
    },
    {
        "link": "https://devforum.roblox.com/t/lua-scripting-starter-guide/394618",
        "document": "Picking up programming and learning it for the first time works just like any other hobby–art, music, sports, photography, etc.–although, it may be difficult to know where to start as a beginner, especially if you’ve never had experience with it up until now. When I was younger, it was very difficult for me to get into programming as tutorials for a younger, completely unexperienced audience was rare. Although there was plenty of content available, I still had a hard time understanding the material or just got lost in the sea of information that was given to me. There are still plenty of places on either Youtube or other parts of the internet where beginners can learn, but I’ve specifically compiled this list so that you have a neat, simple page you can refer to if you feel lost, or don’t know where to go after searching for tutorials. Becoming an experienced programmer from scratch will not be easy, it will take a lot of effort and more importantly time to become an expert. I say this because many developers I’ve personally known, whether rookies or professionals, tend to bail halfway through their project or goal. Do not lose hope when things don’t come as quickly as you expected, patience is crucial. What sets poor and excellent students isn’t necessarily intelligence, but their willingness to put in work and always seeking new ways to become better at what they do. Think of this article as a legend for Lua, similar to the page in a large book that highlight specific terms or character in the book that the reader might not recognize. When you finish this guide, your ability to code things will be limited, but you should have a much easier time understanding tutorials on more advanced topics. Ultimately, I hope this article can help you get started, or at least guide you through your journey through programming.\n\nP.S. I’ve tried to make this tutorial as kid-friendly as possible, if it is still difficult to read or understand, please DM me on any platform and I’ll try my best fix it. Specific examples are appreciated.\n\nChances are, if you’ve ever played a game, you’ve wondered how it was made. How does a sword go from unequipped to swinging in just a matter of seconds? Why? How is this app able to stream the movies I select? How is the website we’re currently on even able to operate?\n\nComputer programming is an essential part of modern life, as it determines and allows for many technologies we use on a daily basis to operate. However, all code is not written in the same way, rather, there are distinct languages, or ways of writing code. In fact, you might already be familiar with the names of various programming languages, including but not limited to JavaScript or Python.\n\nIn this tutorial, we’ll be covering Lua, the official language of Roblox which can be used to create a variety of different games for users to play.\n\nIn this tutorial, we’ll be using a specific format to write, input, and receive the result of our script. To use a format identical to mine, click on View in the upper left side of your screen, then make sure you have selected and have the following settings:\n\nYour screen should look something similar to this\n\nScripts can be inserted almost everywhere, for the sake of keeping this tutorial short, head over to Model on the top panel and browse to the far left and click on Script, which will generate a script that we can use for our tutorial.\n\nPrint is a built-in function which prints out whatever statement you decide to give it. This can be either number or strings, which we’ll cover in this section. You’ll notice that once you launch a script, there is already a print function automatically typed out for you. This code always comes with your scripts, so we’ll erase it to continue with the next step.\n\nType out print in all lowercase letters. If print is typed incorrectly or typed with any capitals, the program will not recognize the command and will not run it. Add a pair of parenthesis after, studio should automatically add the second one. Make sure there is no space in between print and the parenthesis otherwise Lua will not be able to read it.\n\nNext, we need to add a string in-between the parenthesis so that we don’t just print empty space. A string is any character or words inside of a pair of quotes, such as “Hello World!” For our tutorial, we’ll be adding the string “YellowNoobs!” for the program to print.\n\nYou may replace \"YellowNoobs\" with any other text you wish as long as it is in-between the parenthesis (\"\"), the end result should look something like this,\n\nIf you want to include quotation marks in your quote, you can also use a pair of single quotes (’’) and put the double parenthesis, or vice-versa for single quotes to be printed.\n\nPrint also works for numbers and equations, which it’ll automatically simplify in the output. But before we write out our problem, we need to find the symbols needed to get the right answer.\n\nArithmetic operators are basically all the tools we use in programming to indicate a relationship between numbers. This sounds complicated, but it’s just what we call the symbols we use to add, subtract, multiply, and divide numbers.\n\nHere are the Arithmetic Operators used in Lua:\n\nNow, we’ll write our equation in-between the parenthesis, and paste it into the command bar once we’re ready to get the output. Feel free to mess around with the operators to get the hang of it.\n\nIf we put our code into the command bar we’ll get 81 instead. This is the answer to the equation, and Lua does this because it’s a simplified version, or answer to the problem we originally printed. An important thing to keep in mind is that Lua completes the math using the Order of Operations, meaning it starts with exponents, then division and multiplication, and finally addition and subtraction.\n\nTake this piece of code for example,\n\nWhile you may be tempted to say the answer is 12, since you add 1 + 5, getting 6 and multiplying it by 2, this is wrong. Instead, you multiply 5 and 2 first, then add 1, getting 11. This is a rule of both math and programming, so practice the concept until you can avoid printing the wrong number.\n\nIn order to combine two or more separate values together, you can use concatenation in the print function. We’ll still use the same format, but will add two periods or dots after each string. Do not place this inside of the string, otherwise Lua will interpret it as part of the string and produce an error.\n\nIf we paste this into the command bar, the output will show us a full statement as if it was a single string, meaning the concatenation was successful.\n\nNow that you’ve learned how to make a script, you’ll learn what variables are and how to make your own. Variables are considered vital because they save a lot of time and save you time and make your scripts simpler to review. They can be booleans, numbers, strings, or practically anything you want to assign a name to.\n\nIf you’re struggling to understand the concept of a variable, you can compare it to a nickname you might give someone who’s name may be too tedious to pronounce. Although it is not their birthname, calling them by their nickname will still get their attention as they’ve been given and called by it before.\n\nBelow, I’ve given an example of a variable. The term “variable” will be used interchangeably with the string “YellowNoobs!” whenever we use it in the script. If we put the variable inside of the print command, it will print the text assigned to it. Since the variable is identical to the string we assigned it, we do not need any quotes around the variable name. If you put quotes around a variable name, Lua will interpret it as a string, and print the actual name rather than the value.\n\nIf we copy and paste the code into the input, the output will print our statement.\n\nIt is necessary that you define your variables before using them in your code. Since Lua reads code from top to bottom, it will not know what the variable stands for when it executes the print function. If we paste the code into our command bar, we’ll get the output nil, which means nothing or no data.\n\nWhenever we define the variable, its scope covers all of the code below in the script. Variable scope is just another word for when the variable can be accessed in your script.\n\nThere are two types of variables which you’ll hear about, local and global. The variables we’ve made in this tutorial so far have been global variables, which means they can be accessed in all code below inside the script. Local variables will be covered later in this tutorial, but in simplest terms, they have a much more limited scope.\n\nVariables do not only have to be named “variable” when assigned to a given piece of code. In fact, your variables have to be different names in order for the program to recognize which variable you want it to use in the script.\n\nWhile you can almost freely name your variables, there are a few restrictions that exist inside Lua.\n\nYou can use:\n\nYou can not use:\n• Capital letters as the first letter of the variable (Not required, but common practice)\n• Numbers as the first letter of the variable\n\nComments are a simple green text that organize and give context to your lines of code, which can be a useful tool for yourself or others if you plan on sharing it.\n\nCreating comments is extremely easy, add - - and then your text after you are finished. It should appear something like this.\n\nIf you want your comment to cover more than one line, insert brackets, with your text inside.\n\nAny text attached to the comment will not be executed by the program, and will only be seen by the reader. This green text is helpful in case you want to find a specific piece of code in your script. Comments are also crucial if you plan on sharing your scripts and want the reader to understand what certain commands do. Besides context, you can use comments to credit yourself for your script, or write out directions that the user who uses your script might want to see.\n\nIf you want to change the settings (such as the transparency, or invisibility) of an object in the workspace, you have to write down the specifics before Lua knows what you want it to do.\n\nSo, if we want to change the transparency of the baseplate, we first need to define that the baseplate is inside game.Workspace, with game being the game we’re working on and workspace being the place where baseplate and the rest of our parts are stored. Then, we write the object we’ll be changing (baseplate) and the setting that we want to change (its transparency), and then assign a value to it. If we want it to be fully invisible, we’ll set the value to one, lowering this amount will make it so that it’s semi-transparent.\n\nIn the end, this should make the baseplate completely invisible if we run the code or play the game. Keep in mind that we can change the properties of object in Studio as long as you define it correctly in the code.\n\nWhen you’re writing a sequence of code that needs to be repeated, it may be a little tedious and also messy to write it out several times. Functions are a tool in Lua that we can use to put lines of different code in, which can be repeated and manipulated a lot easier by us. The functions in this segment are not to be confused with the built-in functions of Lua, such as print.\n\nTo define a function, we need to write function and then assign it a name. Then, add a pair of parenthesis after your function name without any spacing in-between, and press enter. I’ll be naming my function printStuff, but you can name yours differently.\n\nNow, we need to write our code for our function to actually execute it. You’ll notice that when you press enter after writing your function, you’ll automatically get end. This statement is here so that you can end, or close off your function, otherwise Lua would get an error.\n\nI want to print several strings, so I’ll insert the several sequences of code inside my function.\n\nWe now have our function, however, nothing will be happen since we haven’t written the command to execute it. We need to type the function name on the next line, and Lua will print our strings.\n\nNow, Lua will execute our code. If we paste all of the content into the command bar, we’ll see that our function is successful. It’s important to note that just like variables, functions need to defined before we actually execute them in our code, otherwise we’ll just get nil.\n\nWhen we covered local variables previously in our tutorial, I mentioned that the scope of it was much more limited. Whereas global variables can be accessed anywhere in our script after being defined, local variables are limited to a block.\n\nSo what is a code block? An example is basically the indented sequence of code that we see in our function. I’ll attach comments to the parts that are a part of the block of code for a visual demonstration.\n\nYou can also tell if something is a block by the small arrow that appears to the left. If you look closely, the arrow facing down next to function is indicating that the block is being shown, and when it is facing up, it means it is closed.\n\nIf we try to print the local variable outside the block, we’ll get nil since the variable can’t be accessed.\n\nA handy feature of functions is the ability to manipulate the variables with ease. You might’ve already noticed the pair of parenthesis when we define the function, and the two other parenthesis when we execute it. These are the spaces where we put our arguments and parameters.\n\nEvery time we execute a function, we might want to change certain parts of the code each time. Parameters are used to tell Lua which variables (and thus any information) inside the function you want to change. They are established when we first define our function, and are placed in-between the first pair of parenthesis on the same line. Make sure to not define the variable you’ll be changing inside of your function, otherwise the parameter will not work.\n\nNow that we’ve defined the parameter, we need to write an argument for the function to be properly executed. An argument is the value we assign the code when executing it. It comes inside our next pair of parenthesis, and can be changed every time we execute the function separately. We’ll print a string and a number, and the program should treat the argument as the variable in the function.\n\nNow if we put it in the output, the two values should be successfully printed.\n\nArguments and parameters aren’t just limited to a single pair, in fact there can be as many as you want. In order to add another pair, separate each parameter and argument by a comma with the next one you want in your function.\n\nNow if we paste it into our command bar, the output should print both statements in the order we gave them. It is important that you put the arguments and parameters in the same order or you will assign the wrong value to the variable. Also, you always have to define your parameters when you execute your function, otherwise Lua will not know what to assign to the variables.\n\nYou might’ve already noticed that below the option to create a script, there is something called a local script. This tutorial won’t go too in-depth about them, but offer a broad summary about its purpose.\n\nLocal scripts are scripts that only affect the user’s client rather than the server. A user’s client is basically what they see, rather than the whole server. So whereas you might be seeing something, your friend playing the same game as you might see something completely different. In comparison, scripts that affect the server are seen by everyone, and not just the individual’s client.\n\nThe concept is a bit difficult to describe by text, and I still can’t do it justice by talking about it in depth, so I urge you to look at this video by TheDevKing to get a better idea of what local scripts are capable of.\n\nYou might’ve heard this word in math class and it is related. Booleans in scripting are the conditions true or false.\n\nWhen comparing values you’ll get a Boolean as well, although you can simply write true or false too.\n\nRelational operators are the operators used to compare values with one another.\n• Equal to, not to be confused with equal which simply assigns something rather than comparing two values: ==\n• Not equal to, which is true if the values are not equal: ~=\n• Greater than or equal to: >=\n• Less than or equal to: <=\n\nNow, let’s take a look at some numbers and see if they represent a true or false boolean\n\nThe first one is false, since the value can only be greater than, and not equal to the other. The next one is true as the values are equal to one another. The last is clearly false, since 8 is not less than the number 2.\n\nIf statements make it so that specific commands only happen if the condition is met, it will execute the code.\n\nFor example, if 5 > 1 the Output will print “Congratulations” since 5 > 1 is true. If the script said 5 < 1 then the script will not print “Congratulations” in Output.\n\nThis is equivalent to saying true instead and will still print our string.\n\nSometimes, our code needs to be repeated in order to produce an outcome we’re looking for. Loops are statements that allow us to repeat code multiple times. They come in several different forms, which we’ll cover in this section of the tutorial.\n\nWhile loops repeat sequences of code while the statement is true. However, when the condition is false, it will not execute the code block. For example, while a variable is less than a certain value, it will continue to print out a string we decide to give it. This is just one of countless things you can do with a while loop, so feel free to get creative if you’re feeling ambitious.\n\nFor our while loop, we’ll assign a number to our variable, x. Afterwards, we go on the next line and write while. This helps Lua understand that it is a while loop, so that when the condition is true, it’ll execute the code block. The do you see after our boolean is simply telling Lua to execute the block of code that is part of the loop when the condition is true.\n\nIn this code, I defined my variable as 10 and made it so that the while loop would continue to run until it was no longer less than a 100. Each time it runs the code, I made it so that it would add 10 to the variable, meaning that once it ran several times, it would no longer execute the code since the condition is false.\n\nNotice the string being printed after the loop. This is not executed until the loop is finished, so not attaching it to the loop can be used to tell us when the loop is finished.\n\nFor loops are able to loop as many times as the user wants. First, we define a variable for the loop, and assign it to a starting and ending value. The loop will continue to repeat until the starting value reaches the end value. While the amount the starting value increases is by 1, you can change it by adding a comma after the end value. Below, is an example of a for loop.\n\nOur loop will now print 1, 6, 11, 16 all the way until 21 where it will stop since it can not go past 25.\n\nHere is the format for the for loop.\n\nA repeat loop repeats the statements assigned to it until a following condition is true.\n\nUnlike a while loop, it runs the statements first before checking if the condition is true.\n\nWriting break at the end of a loop will end the loop if a condition is true. In the example below, break is used to break out of an infinite loop that otherwise keeps running because it is always true.\n\nThis could also work if instead of true we wrote while x < 200 do. The result would be that the loop would end early, ending when x reaches 100 rather than 200.\n\nYou may also hear the term nested loop, which is used to describe a loop with another loop inside of it.\n\nTables are used for storing large sets of data that you might use while creating your script. With tables, you can access and manipulate the data easy, which can come in handy later on. In this section, you’ll be learning about just a single type of tables, arrays.\n\nArrays are simply a list of values compiled in a table. This can include strings, numbers, booleans, functions–pretty much anything that can be used outside the script. To make an array, start by assigning a name of your own to the table.\n\nAfter this first step, you need to assign the data to the table. Assign the table to the data by adding an “=” in between, and write a pair of curly brackets (the second bracket will be automatically typed for you).\n\nNext, you can place all of your values inside of the array. For this tutorial, we’ll place a few strings and numbers together, but you can add more variety to your table if you’re following along. Make sure to separate each value by adding commas in-between them.\n\nIf we want to print specific parts of our array, we can use the index to get what we want. Each value in our array has an index, or number assigned to it. The first value is 1, second value is 2, third value is 3, etc. To print a specific part of our array, we put our table name in the print function, then follow it up with the index of the value, in-between brackets ([]).\n\nIn the end, this should print out our first string, “Hello World” in the output.\n\nWhere Else Can I Learn About Scripting?\n\nThere are many other places to learn, but the sources listed above have helped me with learning or adapting to Lua.\n\nWhat is the Difference Between Input and Output?\n\nInput is the code given to the engine, while output is the received/finished command. For example, print(“YellowNoobs!”) is a input while YellowNoobs is the output.\n\nStopping exploiters isn’t a beginner issue, it is a little more advanced than what we’ve discussed so far. Throughout your scripting career, you’ll realize that the main reason for exploits is due to poor and weak scripts that hackers are able to bypass.\n\nOne feature that Roblox automatically now applies to all games is FilteringEnabled, which prevents hackers from messing with the server itself. To learn more about how it works, you can watch the following video by AlvinBlox,\n\nWhy does Studio Automatically Indent for me?\n\nTechnically, indenting is not necessary, but it is extremely helpful and keeps your code organized. For example, through indents, you can see where your code blocks are. Not only that, but it looks much cleaner. Writing without proper indentation would give both you and the programmers reviewing your code a headache to read.\n\nHow do I become better?\n\nPractice, practice makes perfect, no exceptions. Learning to program unique things by yourself is always something you should strive to achieve as a developer.\n\nThat’s it, the basic tutorial is now finally finished! Hopefully, now you’ll have a far easier time being able to understand new concepts and can use this as a reference whenever you feel stuck.\n\nIf you have any other questions or feedback, please reply in the comments below, good luck!"
    },
    {
        "link": "https://codewizardshq.com/roblox-coding",
        "document": "Roblox is a family-friendly online gaming platform that has over 40 million different games and 70 million players.\n\nIt’s a favorite among kids and what makes Roblox unique is that it’s a user-created game platform. The games are made by developers and creators and, surprisingly, many of them are kids and teens.\n\nAnyone can build a game with Roblox’s free development application, Roblox Studio. It is also an excellent resource and tool for kids interested in learning coding and game development. Besides coding fundamentals, building their own game in Roblox encourages your child’s creativity and entrepreneurship.\n\nThis article guides you through what you need to know about Roblox coding and how your child can get started.\n\nKids can also learn how to build their own Roblox game with a live instructor in our top-rated 1-week Roblox camps.\n\nRoblox is a gaming platform that hosts millions of immersive experiences created by its community of users. It was created by co-founders David Baszucki and Erik Cassel in 2004 and officially launched on September 1, 2006.\n\nRoblox builds the tools and platform that empower people to create their own experiences. Roblox itself is not a game and the company does not produce games. However, they create the tools and technology for others to do so.\n\nIn Roblox, players can explore immersive experiences from gaming to social hangouts, concerts, sports, fashion shows, education, and entertainment. It also has a virtual economy where players trade, earn, and spend virtual currency and resources.\n\nRoblox is especially popular among kids with over 60% of users being under the age of 16. Kids can play, create, and learn in a safe environment within Roblox.\n\nHow Is Code Used in Roblox?\n\nCode is used extensively in the Roblox platform to create games and experiences. Developers and creators write code and scripts in Roblox Studio.\n\nThe code is what shapes the gameplay experience in Roblox and allows developers to create immersive and engaging experiences for players to enjoy.\n\nWhether it’s designing complex game mechanics, creating dynamic environments, or implementing social features, code is the backbone of the Roblox platform and its diverse range of games.\n• Game Logic: Code is used to define the rules and mechanics of the game. This includes controlling player movement, managing game states (such as starting, pausing, or ending the game), implementing scoring systems, and handling interactions between game objects.\n• User Interface: Code is employed to create user interfaces within games, such as menus, buttons, and HUDs (heads-up displays). This allows players to navigate the game, customize settings, and access various features.\n• Scripted Events: Code is used to trigger events based on specific conditions or player actions. For example, when a player walks into a certain area, interacts with an object, or performs a particular action, code can be used to execute corresponding events, such as playing a sound, spawning enemies, or activating a scripted sequence.\n• Character Behavior: Code is used to control the behavior of characters and NPCs (non-player characters) within the game. This includes defining movement patterns, implementing AI (artificial intelligence) for enemies or allies, and creating realistic interactions between characters and the environment.\n• Physics and Animations: Code is used to simulate physics and animate objects within the game world. This allows for realistic movement and interactions, such as simulating gravity, collisions, and object animations.\n• Customization and Personalization: Code is used to enable customization and personalization features within games. This includes allowing players to customize their avatars, vehicles, or in-game assets using code-driven systems.\n• Multiplayer Networking: Code is used to implement multiplayer networking features, enabling players to interact with each other in real time within the game world. This includes synchronizing game state across multiple clients, managing player connections, and facilitating communication between players.\n\nMost of the coding done in Roblox happens in Roblox Studio.\n\nRoblox Studio is the official development tool provided by Roblox Corporation for creating games and experiences within the Roblox platform.\n\nIt provides a user-friendly interface for designing 3D environments, scripting game logic, and publishing your creations to the Roblox platform. It’s so easy that kids can create a simple Roblox obby in just 15 min.\n• Games – create a wide range of games like obstacle courses, simulators, RPGs, shooters, and more.\n• 3D Worlds – create immersive 3D environments and virtual worlds ranging from simple landscapes and architectural designs to elaborate fantasy realms and futuristic cities\n• Custom Characters – customize your character’s appearance, clothing, accessories, and animations to make them unique with a combination of pre-made assets and custom designs.\n• Interactive Objects and Environments – code objects and environments within your Roblox game to be interactive and responsive to player actions.\n• Multiplayer Experiences – create collaborative or competitive experiences where players can interact with each other in real-time through player-to-player communication, team-based gameplay, and leaderboards.\n• Custom Game Mechanics – implement custom game mechanics like scripting player movement, implementing game rules, managing game state, and creating special abilities or power-ups.\n• 3D World Building: Roblox Studio allows users to create 3D environments using a variety of tools and assets. Users can build terrain, place objects and structures, and customize the look and feel of their worlds.\n• Asset Library: Roblox Studio provides access to a vast library of pre-made assets, including models, textures, animations, and sounds, which users can use to populate their worlds and enhance their creations.\n• Scripting: Roblox Studio uses Lua scripting language to enable users to add interactivity and functionality to their games. Users can write scripts to control gameplay mechanics, create custom user interfaces, handle player input, and more.\n• Testing and Debugging: Roblox Studio includes tools for testing and debugging games directly within the editor. Users can simulate gameplay, troubleshoot issues, and iterate on their designs to create polished experiences.\n• Collaboration and Publishing: Roblox Studio supports collaboration between multiple developers, allowing them to work together on the same project simultaneously. Once a game is complete, users can publish it to the Roblox platform for other players to enjoy.\n• Community Resources: Roblox Studio is supported by a vibrant community of developers who share tutorials, scripts, and other resources to help users learn and improve their skills. Users can also participate in forums, events, and workshops to connect with other developers and get feedback on their creations.\n\nRoblox Studio empowers kids of all skill levels to unleash their creativity and bring their ideas to life in Roblox, whether they’re aspiring game developers, artists, or designers. It serves as the primary platform for users to create and share their own interactive experiences.\n\nTo build more advanced games, it will require some level of coding in Roblox Lua.\n\nWhat coding language is Roblox written in?\n\nThe Roblox platform itself is written in C++ and other languages, but the most important language for anyone interested in Roblox coding is Lua.\n\nThe Roblox Studio program is written in C++ along with other languages. Roblox games and experiences are primarily written in Lua, a lightweight and versatile scripting language.\n\nLua is widely used in game development due to its simplicity, flexibility, and ease of integration with various game engines and platforms.\n\nRoblox has adapted the Lua programming language to their platform and games are made with a derivative of the language Lua named Luau.\n\nThe main difference between Lua and Luau is that Luau has optimizations that make it faster and more efficient. This results in better performance for games and other experiences developed on the Roblox platform. Luau also includes some new features and functionality that are not available in regular Lua. If you know how to code in Lua, learning Luau is relatively easy.\n\nIn Roblox Studio, Lua is used to script game logic, control gameplay mechanics, and add interactivity to objects and characters within the game world. Developers write Lua scripts to define how game elements behave, respond to player input, and interact with each other.\n\nWhile Lua is the primary language used for scripting in Roblox, developers may also utilize other programming languages for backend systems, server-side logic, or external integrations.\n\nHowever, Lua remains the dominant language for creating and scripting games within the Roblox platform.\n\nDoes Roblox use C++?\n\nRoblox primarily uses Lua for scripting within its games and experiences. So, if you want to develop games, learning Lua is the best option.\n\nHowever, the underlying engine and infrastructure of Roblox, which includes the Roblox client and server software, are built using a combination of programming languages, including C++.\n\nC++ is a widely used programming language in game development due to its performance, flexibility, and low-level capabilities. It is often used to develop game engines, core systems, and performance-critical components.\n\nIn the case of Roblox, C++ is likely used for various aspects of the platform, including:\n• Engine Development: The core engine that powers Roblox games, including rendering, physics, networking, and audio systems, is written in C++.\n• Platform Infrastructure: C++ may be used for developing and optimizing various platform components, such as the Roblox client application, server software, and backend systems.\n• Performance Critical Components: C++ is often used for implementing performance-critical components that require low-level optimization, such as graphics rendering, physics simulation, and networking protocols.\n\nWhile Lua is the primary language used for scripting gameplay logic within Roblox games, C++ plays a crucial role in powering the underlying technology and infrastructure that supports the Roblox platform as a whole.\n\nNo, Roblox itself is not primarily coded in Python. Roblox games and the Roblox platform itself are primarily built and scripted using Lua and C++.\n\nPython is a popular programming language known for its simplicity and readability. It’s the language kids start with in our middle and high school coding programs because it’s in demand and easy to learn.\n\nWhile Python is widely used in various fields, including web development, data science, and automation, it is not commonly used for game development within the Roblox ecosystem.\n\nEverything About Programming in Lua\n\nLua is a lightweight, high-level, and versatile scripting language commonly used in game development, embedded systems, and other applications where simplicity and flexibility are desired.\n\nA version of Lua, Luau, is the primary scripting language used within the Roblox platform to build games.\n\nFor kids, Lua has a straightforward syntax and minimalistic design that make it easier to grasp fundamental programming concepts without overwhelming complexity.\n\nLearning Lua enables kids to customize and create their own games within Roblox, providing a hands-on and practical application for their programming skills.\n\nCan you guess what that script does? It changes the color of a part when a player touches it.\n\nHere are some key features and aspects of Lua programming:\n• Simplicity: Lua has a clean and simple syntax that makes it easy to learn and use. Its syntax is inspired by other programming languages like C and Pascal.\n• Embeddable: Lua is designed to be embedded into other applications as a scripting language. It’s often used as a scripting engine for game engines, applications, and software frameworks.\n• Dynamic Typing: Lua is dynamically typed, meaning variables do not have a fixed type and can hold values of any type. This makes Lua flexible and suitable for rapid development.\n• Table-based Data Structure: Lua uses tables as its primary data structure, which are associative arrays that can store key-value pairs. Tables are extremely versatile and can be used to represent arrays, dictionaries, objects, and other data structures.\n• First-Class Functions: Functions in Lua are first-class citizens, meaning they can be assigned to variables, passed as arguments to other functions, and returned from functions. This makes Lua suitable for functional programming paradigms.\n• Coroutine Support: Lua includes built-in support for coroutines, which are lightweight cooperative multitasking units. Coroutines allow developers to write asynchronous and event-driven code in a synchronous style.\n• Garbage Collection: Lua features automatic memory management through garbage collection. It automatically deallocates memory when objects are no longer in use, helping developers avoid memory leaks and manual memory management.\n• Extensibility: Lua is highly extensible and customizable. It allows developers to define custom data types, operators, and syntax extensions through metaprogramming techniques.\n• Portability: Lua is designed to be highly portable and platform-independent. It can be compiled and run on various operating systems and hardware architectures with minimal changes.\n\nLua’s versatility and ease of integration make it a popular choice for game development, scripting engines, and various other applications.\n\nKids should start with an introduction to scripting in Lua if they want to code Roblox games.\n\nLua scripting in Roblox is the process of writing code in the Lua programming language to create interactive experiences, gameplay mechanics, and dynamic content within Roblox games.\n\nWhether you’re a kid or a beginner, Lua scripting in Roblox offers a fun and rewarding way to bring your ideas to life and create your own games.\n\nTo start scripting in Roblox, you’ll need to download and install Roblox Studio, the official development tool for creating Roblox games.\n\nTo install Roblox Studio on your Windows or Mac computer:\n• In the pop-up dialog, click the Download Studio button.\n• Find the Studio installer in your browser’s download history and double-click the file.\n• On Windows, the file is RobloxStudio.exe.\n• On Mac, the file is RobloxStudio.dmg.\n• Sign in to Studio with your Roblox account to get started.\n• After you log in, click on the New button in the left-hand toolbar. You can then select a template from the available options, such as Baseplate.\n\nAfter that, you can write your first script.\n\nIn Roblox Studio, you can insert a new Lua script into your game by:\n\nIf you don’t have the explorer panel, you can go to the View tab and click Explorer to display it.\n\n2. Right-clicking on the desired object (such as a part or a model)\n\nRoblox has a simple tutorial to help kids get started. It will teach you how to make a platform disappear.\n\nThe final script looks like this:\n\nWhile you don’t need to be an expert programmer to get started, having a basic understanding of Lua syntax and concepts will help you grasp scripting in Roblox more effectively.\n\nLua scripts in Roblox often revolve around handling events. Events are actions that occur within the game, such as player input, object collisions, or time-based triggers. You can write code to respond to these events and execute specific actions accordingly.\n\nLua supports various data types, including numbers, strings, booleans, tables, and functions. You can use variables to store and manipulate data within your scripts.\n\nFunctions are blocks of reusable code that perform specific tasks. You can define your own functions in Lua scripts to encapsulate functionality and improve code organization.\n\nTo further your understanding of Lua scripting in Roblox, consider exploring the following resources:\n• Roblox Developer Hub: The official Roblox Developer Hub offers tutorials, documentation, and learning resources to help you get started with Lua scripting in Roblox.\n• Community Forums: The Roblox developer community is active and supportive. Participate in forums, join groups, and engage with other developers to learn from their experiences and get help with scripting questions.\n• YouTube Tutorials: There are many video tutorials on YouTube that cover Lua scripting in Roblox. Search for tutorials tailored to beginners and follow along to learn new concepts and techniques.\n• Practice and Experimentation: The best way to learn Lua scripting in Roblox is through practice and experimentation. Start small, experiment with different code snippets, and gradually build up your skills as you become more comfortable with scripting.\n\nWith dedication, practice, and a willingness to learn, anyone can become proficient in Lua scripting and bring their imagination to life within the Roblox platform.\n\nHow Long Does It Take to Learn Roblox Scripting?\n\nThe time it takes to learn Roblox scripting varies depending on several factors, including your prior programming experience, the complexity of the projects you want to create, the amount of time you dedicate to learning, and your ability to grasp new concepts.\n\nHere are some general considerations:\n• Prior Experience: If you have previous experience with programming languages like Lua, Python, or JavaScript, you may find it easier to pick up Roblox scripting. Familiarity with programming concepts such as variables, loops, conditionals, and functions can significantly reduce the learning curve.\n• Learning Resources: The availability and quality of learning resources can impact how quickly you learn Roblox scripting. Utilizing tutorials, documentation, online courses, and community forums can help you acquire knowledge more efficiently.\n• Practice and Application: Like any skill, learning Roblox scripting requires practice and hands-on experience. The more time you spend experimenting with code, building projects, and troubleshooting errors, the faster you’ll become proficient.\n• Project Complexity: Starting with simple projects and gradually increasing the complexity of your creations can help you progress more smoothly. Beginning with basic scripts to control simple game mechanics and then advancing to more complex systems as you gain confidence can be an effective learning approach.\n• Consistency: Consistent practice and learning are key to mastering Roblox scripting. Setting aside dedicated time each day or week to study, practice, and work on projects can accelerate your progress.\n• Support and Feedback: Engaging with the Roblox developer community, seeking help from experienced developers, and receiving feedback on your projects can provide valuable insights and guidance that can speed up your learning process.\n\nRoblox Scripting in Lua allows you to start by creating very small, simple scripts and slowly build up to more complex ones over time. This, accompanied by the massive online community of Roblox developers, provides almost endless resources and allows for a quick learning curve for most children. Depending on the complexity of the script, it can take anywhere from a few days to a few months to become nearly proficient in Roblox scripting.\n\nIt’s essential to focus on your own learning journey, set realistic goals, and celebrate your progress along the way.\n\nThere are a lot of ways to learn about Lua and coding in Roblox depending on your learning style. Try different mediums to find the one that works best for you.\n\nYou can learn Lua through online tutorials, classes, books, games, and more.\n• Online Tutorials and Courses: There are numerous online tutorials and courses specifically designed to teach Lua programming. Websites like Codecademy, Khan Academy, and Udemy offer beginner-friendly Lua courses that cover fundamental concepts and provide hands-on practice. CodeWizardsHQ offers a 1-week online Roblox camp with live instructors to answer questions and provide guidance.\n• Roblox Developer Hub: The Roblox Developer Hub provides a wealth of resources, tutorials, and documentation tailored to aspiring Roblox developers. Kids can explore beginner tutorials on Lua scripting within Roblox Studio, which include step-by-step instructions and interactive examples.\n• YouTube Videos: YouTube is a treasure trove of Lua scripting tutorials, especially for Roblox game development. Kids can find video tutorials covering various aspects of Lua scripting, ranging from basic syntax to advanced game mechanics.\n• Books and eBooks: There are several books and eBooks available that teach Lua programming in a kid-friendly manner. Books like “Lua Game Development Cookbook” by Mario Kaack and “Lua Programming Gems” by L. H. de Figueiredo, W. Celes, and R. Ierusalimschy offer comprehensive coverage of Lua programming concepts with practical examples.\n• Code.org: Code.org offers interactive coding tutorials and activities for kids of all ages. While it doesn’t specifically focus on Lua, it provides a solid foundation in programming concepts that can be applied to learning Lua later on.\n• Roblox Studio Challenges: Kids can participate in Roblox Studio challenges and competitions where they’re tasked with creating games or experiences using Lua scripting. These challenges provide motivation and a real-world context for learning Lua.\n• Game Modding: Encourage kids to explore Lua scripting by modding existing Roblox games or creating their own modifications. Modding allows them to experiment with Lua code in a familiar gaming environment and see immediate results.\n• Community Forums and Groups: Kids can join Roblox developer forums, Discord servers, and online communities where they can connect with other young developers, ask questions, share ideas, and collaborate on projects.\n• Educational Games: There are educational games and apps specifically designed to teach programming concepts, including Lua. These games often gamify learning, making it fun and engaging for kids to learn Lua while playing. There is even a Roblox game that teaches Lua.\n\nBy exploring these resources and engaging in hands-on practice, kids can learn Lua programming in a fun and interactive way. This lays the foundation for future exploration and creativity in game development and beyond.\n\nUse these official Roblox and Lua resources to learn more about coding in Roblox.\n\nLive, instructor-led classes are a great option for kids who want to build Roblox games. Kids don’t have to do it alone, they can get the guidance and confidence they need to code their own games.\n\nAt CodeWizardsHQ, our Roblox camps merge structured learning with sheer fun, enabling students to channel their creativity into their own games using the programming skills they’ve acquired in our courses. The camp is uniquely designed so that all participants share the same server, fostering collaboration as they play and refine their games together.\n\nEach student crafts their own obstacle course, or ‘Obby,’ which they link to a central VIP area, promoting interaction and shared experiences. We incorporate storytelling to enrich the learning process, allowing students to imagine they are developing games or professional apps for a fictional company. This immersive approach not only captivates their imagination but also deepens their understanding of critical game development concepts such as 3D vectors, script writing, user-defined functions, and loops.\n\nMoreover, upon completing the camp, students can download the map they collaboratively worked on, providing them with the opportunity to continue enhancing their projects. Equipped with these comprehensive tools and experiences, they are fully prepared to develop their own basic Roblox games, taking their first steps towards becoming young game developers."
    }
]