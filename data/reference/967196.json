[
    {
        "link": "https://stackoverflow.com/questions/26836488/how-to-sort-a-vector-in-rust",
        "document": "To sort a vector , in most cases will be what you need.\n\nIf you want to apply a custom ordering rule, you can do that via . That includes cases where you want to sort values that:\n• don't implement (such as , most structs, etc);\n• do implement , but you want to apply a specific non-standard ordering rule.\n\nAlso note that and use a stable sorting algorithm (i.e., equal elements are not reordered). If you don't need a stable sort, you can use / , as those are generally a bit faster and use less memory."
    },
    {
        "link": "https://stackoverflow.com/questions/72540172/how-can-i-filter-a-vector-on-an-index-in-rust",
        "document": "Thanks for the comments, patching everything together into a more complete answer for the community. Let's say this is the Vec: let x: Vec<f64> = (1..10).map(|x| (x as f64)/(10 as f64)).collect();\n\nTo filter the vector based on index, first we create an iterator with into_iter, then enumerate it to get index, then apply the filter, and then a map to remove the index, finally collecting it to f64 vector.\n\nIf the scope of is shorter than that of , and if you had large values in (say string), it might be preferable to make a vector of references rather than values.\n\nThe key difference here is using instead of . This page in rust book explains it:\n\nThe iter method produces an iterator over immutable references. If we want to create an iterator that takes ownership of v1 and returns owned values, we can call instead of . Similarly, if we want to iterate over mutable references, we can call instead of .\n\nNow, for this specific question, applying a filter to the index is probably not needed. A simpler way, as noted by Chayim below is"
    },
    {
        "link": "https://users.rust-lang.org/t/sorting-vector-of-vectors-of-f64/16264",
        "document": "Hi. I'm trying to write the code for the fractional knapsack algorithm and I need some help figuring out how to sort this vector I created (if it is possible at all). Perhaps my implementation is not the most efficient one, but first let me explain the reasoning behind it.\n\n I'm doing this as a part of a Coursera course. The inputs for the assignment come as stdin from the user. So the first line of input tells the number of N items that you can choose from and the total capacity of your bag.\n\n The next N lines will have the value and the weight of each item.\n\n Here is what I've done so far.\n\n use std::io;\n\n use std::str::FromStr;\n\nAs you can see, I haven't finished the algorithm yet because I still haven't figured out what the next move should be. I'm thinking that the next step is to check if the weight of the item exceeds the capacity and add just the fraction that will fit. Then, I would jump to the second most benefiting item and repeat the process.\n\n Ok, but that is not the main problem here.\n\n As a result of my implementation, the items vector is a Vec<Vec>. And it would make it easier to choose which item to add in the bag if I could sort these vectors based on the third element. The third element is the value/weight ratio.\n\n This would give a Vec<Vec> sorted by the third element of each internal vector.\n\n I tried items.sort_by(|a, b| &a[2].partial_cmp(&b[2])); but rust returns\n\n ^^^^^^^^^^^^^^^^^^^^^^expected enum , found reference\n\nI didn't really understand the error message, but I'm guessing this is not the way to do this. I mean, this is not the way to sort the vector in the first place. The problem is I don't know what the right way of doing would be."
    },
    {
        "link": "https://reddit.com/r/rust/comments/ahsfju/is_high_performance_sorting_possible_in_rust",
        "document": "Say sort 1000 lists of ints or doubles in a low \"ms\" time.\n\nHaskell and most/standard C++ implementations are quite bad at this job. R and especially Julia seem -- if my benchmarks are correct -- significantly faster (e.g, 2x - 3x faster).\n\nHow is Rust doing in this regard? (if unknown, what is your guesstimate for the best Rust libraries for the job.)"
    },
    {
        "link": "https://github.com/liborty/indxvec",
        "document": "The following will import everything:\n\nis lightweight and has no dependencies. The methods of all traits can be functionally chained to achieve numerous manipulations of , s, and their indices, in compact form.\n• many useful operations on generic vectors and their indices\n• serialising generic slices and slices of vectors to Strings:\n• printing and writing generic slices and slices of vectors: ,\n\nIt is highly recommended to read and run to learn from examples of usage therein. Use a single thread to run them to keep the output in the right order. It is necessary to run the timing benchmark on its own for meaningful results.\n\nOr just clicking the above badge leads to the logs of the automated test run.\n• Sort Index - is a vec of subscripts to the data, such that the first subscript identifies the smallest item in the data, and so on (in ascending order). The data is unchanged. Suitable for bulky data that are not easily moved. It answers the question: 'what data item occupies a given sort position?'.\n• Subspace Index - lists the subscripts (dimensions) to be retained when projecting to a subspace.\n• Reversing an index - sort index can be reversed by generic reversal operation , or . This has the effect of changing between ascending/descending sort orders without re-sorting or even reversing the (possibly bulky) actual data.\n• Rank Index - corresponds to the given data order, listing the sort positions (ranks) for the data items, e.g.the third entry in the rank index gives the rank of the third data item. Some statistical measures require ranks of data. It answers the question: 'what are the sort positions of the data items?'.\n• Inverting an index - sort index and rank index are mutually inverse. Thus they can be easily switched by . This is usually the easiest way to obtain rank index. They will both be equal to for data that is already in ascending order.\n• Complement of an index - beware that the standard reversal will not convert directly between ascending and descending ranks. This purpose is served by . Alternatively, descending ranks can be reconstructed by applying to a descending sort index.\n• Selecting - given a subspace index and some data vector, collects components of that vector corresponding to the dimensions present in the index and ignores the rest (i.e. it projects the data to the subspace defined by the index).\n• Unindexing - given an explicit sort index and some data, will pick the data in the new order defined by the sort index. It can be used to efficiently transform lots of data vectors into the same (fixed) order. For example: Suppose we have vectors: and , not explicitly joined together in some common data structure. The sort index obtained by e.g.: can then be efficiently applied to sort the data vectors individually: (false to obtain a descending order at no extra cost).\n\nIs implemented for , specifying the range of search. Its binary search methods are not restricted to explicit data of any particular type. Probing of data is done by the comparator closure , which captures some data item from somewhere and a target and defines their comparison. Data subscripts are not limited to . The comparator specified in the call can be easily logically reversed, e.g. . These methods will then work on data in implicit descending order.\n\nBinary search within an inclusive range. When the target is missing, its insert position is returned as .\n\n Same as but is more general.\n\nfinds and returns the first hit and its last enclosing range. The returned range is used by to constrain its search for all matches. Also, can be used on its own when any matching item will do. For example, to iteratively solve non-linear equations, using range values of type (see ).\n\nBinary search that finds all the matches. This implementation is uniquely general. It is also very fast, especially over long ranges.\n\nSearches within the given (self). It can be used in functionally chained 'builder style APIs', that select the subrange closer bracketing the target.\n\nThe range values can be of any generic type T (satisfying the listed bounds), e.g. usize for indexing in-memory, u128 for searching whole disks or internet, f64 for solving equations...\n\nComparator closure is comparing data against a target captured from its environment. Using closures enables custom comparisons of user's own data types. Also, this code is agnostic about the type of the target (and of the data)!\n\nWhen the target is in order before self.start, empty range is returned.\n\n When the target is in order after self.end, is returned.\n\n When the target is not found, then is returned, where is its insert position.\n\nOtherwise the range of all consecutive values to the target is returned.\n\nThe first hit encountered will be anywhere within some unknown number of matching items. The algorithm then conducts two more binary searches in both directions away from the first hit. These secondary searches are applied only within the last (narrowest) range found during the main search. First non-matching items in both directions are found, giving the full enclosed matching range.\n\nThe methods of this trait are implemented for slices of subscripts, i.e. they take the type as input (self) and produce new index , new data vector or , or other results, as appropriate. Please see the Glossary for descriptions of the indices and the operations on them.\n\nThe methods of this trait are applicable to all generic slices (the data). Thus they will work on all Rust primitive numeric end types, such as f64. They can also work on slices holding any arbitrarily complex end type , as long as the often required traits, and/or , are implemented for . The methods are too numerous to list here, please see their declarations in and their source in .\n\nThis trait contains mutable reverse and mutable sort methods. They all overwrite with their outputs. When we do not need to preserve the original order, this is often the most efficient way to sort. Non-destructive versions are implemented in trait .\n\nIt is often useful to avoid trait constrains on the end-type being sorted, such as or . Such constraints are 'sticky' and have to be then applied everywhere. Our new (insert log sort) sidesteps these problems by taking a custom closure comparator. Its complexity is the best achievable for comparator sorts. It is almost as fast as the std provided sort, which eventually beats it only because it can take advantage of unstable Rust mem moves. Tested on floats, is actually faster up to the data length of about 4500. Additionally, allows sorting just within a specified range (sub-slice).\n\nThe comparator closure argument can be easily reversed to carry out descending sort.\n\nIts non destructive versions are , which returns an explicit sort index and which returns references in the sort order and is a bit faster. Neither of these two copies the potentially bulky end-types (the data items).\n\n/// Associated method `part` partitions `s: &mut [&T]` within range `rng`, using comparator `c`. /// Suitable pivot should be selected and placed in `s[rng.start]`. /// Returns the boundaries of the rearranged partitions, (eqstart,gtstart), where /// `rng.start..eqstart` (may be empty) contains references to items lesser than the pivot, /// `gtstart-eqstart` is the number (>= 1) of items equal to the pivot (contains undefined references) /// `gtstart..rng.end` (may be empty) contains references to items greater than the pivot. -> -> // get pivot from the first location pivot = s rng eqstart = rng gtstart = eqstart + t rng + ..rng s t pivot => s eqstart = s t eqstart += s t = s gtstart gtstart += => s t = s gtstart gtstart += => eqstart gtstart -> -> /// Possibly the fastest sort for long lists. Wrapper for `muthashsortslice`. + -> + /// Sorts n items from i in self. Used by muthashsort. + -> + /// Mutable insert logsort. Pass in reversed comparator `c` for descending sort ->\n\nSee for examples of usage.\n\nSuitable for printing or writing to files up to 4-tuples of differing type items, all kinds of Vecs and slices and irregularly shaped 2D matrices.\n\nAdditionally, writes contents of self as plain space separated values ( ) to File, possibly raising io::Error(s):\n\nAll above listed types are converted to Strings and optionally decorated and coloured. Included are methods and constants to render the resulting String in six primary bold ANSI terminal colours.\n\nNote that all these types are unprintable in standard Rust (they do not have implemented). Which is a big stumbling block for beginners. The methods of this trait convert all these types to printable (writeable) strings.\n\nThe colouring methods add the relevant colouring to the string output. This makes testing output much prettier and avoids reliance on Debug mode in production code. For finer control of the colouring, import the colour constants from and use them in formatting strings manually. For example, switching colours:\n\nNote that all of these colouring interpolations set their own new colour regardless of the previous settings. Interpolating resets the terminal to its default foreground rendering. is automatically appended at the end of strings produced by the colouring methods . Be careful to always close with one of these, or explicit . Otherwise all the following output will continue with the last selected colour foreground rendering!\n\nreturns , when is not found in . Here, will be printed in red, while any found item will be printed in green. Since x has been converted to by , both closures return the same types, as required by .\n• holds minimum and maximum values of a and their indices.\n• is a macro giving the filename, line number and function name of the place from where it was invoked. It can be interpolated into any error/tracing messages and reports.\n• applies to a mutable slice of f64s safely, using .\n\nVersion 1.9.5 Added and to , to construct a . Added to Indices to apply to a data vector, projecting it efficiently to that subspace.\n\nVersion 1.9.1 Stopped Trait Printing consuming single items by implementing it for rather than .\n\nVersion 1.9.0 Fn closure argument in trait Search changed to FnMut on user request. Added method to trait Mutops\n\nVersion 1.8.9 Added associated function to trait (call it as: ).\n\n Added method and associated function to trait .\n\nVersion 1.8.6 Added suitable for bulky end-types. Added , possibly the fastest way to extract and sort k greatest or smallest items (by custom comparator).\n\nVersion 1.8.5 Added new algorithm 'insert log sort': and to and traits respectively. Also to .\n\nVersion 1.8.4 Added to trait . It behaves like but is more general, not expecting explicit data of any particular type. Nor is the indexing limited to .\n\nVersion 1.8.3 Added argument to macro to incorporate payload error messages. Changed to . It now returns (Err variant), that can be more conveniently processed upstream with just the operator. It is not really used in the code yet, so this improvement should be backwards compatible. Example: will do all the necessary IdxError reporting for the variant, plus output the custom message with file, line location and method name.\n\nVersion 1.8.2 Some minor tidying up and additions to tests. Upped dependencies.\n\nVersion 1.8.0 Changed trait of closure arguments from to , which is adequate and simpler."
    },
    {
        "link": "https://users.rust-lang.org/t/what-is-the-best-way-to-collect-a-tuple-into-a-tuple-of-vectors/105173",
        "document": "I have code that returns an iterator of and I would like to collect that into a . What would be the best way to get that?\n\nMy current code is the following:\n\nBut this doesn't work, since that conversion seems to be unimplemeneted: \"a value of type cannot be built from an iterator over elements of type \"\n\nDoes anyone have any suggestions? I know there are better ways to solve this, I'm mostly soving it this way to learn to use iterators better."
    },
    {
        "link": "https://stackoverflow.com/questions/58685861/can-i-filter-out-specific-a-number-from-a-u32-and-convert-it-to-a-vecu32",
        "document": "Given a I want to filter out the number . This could be any number or any other rule or condition.\n\nHere are a few versions that work, but I feel like this could be done simpler:\n\nI was expecting something simpler like this (which doesn't work):\n\nThings that would be helpful are:\n• Is it possible to clone or convert a to ?\n• Is there a way to clone a to ?"
    },
    {
        "link": "https://users.rust-lang.org/t/iterating-over-vector-of-results-of-tuples-idiomatic-way/73156",
        "document": "Hi, I am new to Rust and as I have a Python background, Rust gives me hard time often. I desperately looking for help with iterating over a vector of results as I cannot wrap my head around it. I read the Rust Book, googled the problem, searched on forum and youtube, but still cannot find the answer. I spent three evenings on the problem, came up with working solutions, but they do not look idiomatic/good-practice (I have no Rust experience) and I cannot find a good example of solving my problem. Moreover, I found the solution more as a trial-error way, thus, I do not really understand why these solution works and not the other I tried. Problem statement:\n\n I am learning by doing a project and I am using an external function that returns I want to iterate over it and filter based on the second value of each tuple. Example 1\n\n Here is a simpler toy example without tuples.\n• Is using in closure a good practice? Can I filter the vector elements based on their inner value (inside ) in a simpler and more elegant way?\n\n I tried different approaches, but most of the time the compiler complains that the should be of type not . I would like to avoid using any or other unsafe methods. Example 2\n\n Here same example but now the elements are tuples as in my project problem. let vec = vec![Ok((0,1)), Ok((1,2)), Err((2,3))]; let res: Vec<_> = vec.into_iter().filter(|t| { let x = t.map(|(x1,x2)| x2); match x { Ok(val) => val >= 1, Err(_) => false } }).collect(); println!(\"{:?}\", res); // Returns: [Ok((0,1)), Ok((1,2))] // Corect\n• If the contains a tuple, how to 'deconstruct' in Example 2 in idiomatic way, so that I can use the tuple inner elements for filtering? I don't like the part I came up with and the as it seems too complicated and 'spaghetti code' like. TLDR\n\n What I want to achieve?\n• Iterate over a vector where each element is of type .\n• Filter the vector based on the second element of each tuple (see Example 2)\n• I am not interested in Errors, just omit them in the final collected results.\n• can be of type or for now I do not care (or should I?).\n• If each element of a vector is a how to filter them based on the inner values? What is the more idiomatic (good-practice) way of doing so, but without using some unsafe methods such as etc?\n• What is the best practice to get to the inner values of tuples wrapped in and then filter based on some element of each tuple? (Example 2) I appreciate any help, idiomatic/good-practice solutions or some resource where I can learn more (but I tried the Rust book already and Rust by Example )\n\nIs using in closure a good practice? Can I filter the vector elements based on their inner value (inside ) in a simpler and more elegant way? It's fine with you need it. Sometimes there are more concise ways such as the macro. So here's an alternative to your first example: But instead ... , you can use : If each element of a vector is a how to filter them based on the inner values? What is the more idiomatic (good-practice) way of doing so, but without using some unsafe methods such as etc? Do you need to retain the s inside the ? If not, you can filter them out in an iterator chain: let res: Vec<_> = vec .into_iter() // `Err(_)` will be filtered out and `Ok(i)` becomes `i` .filter_map(|t| t.ok()) .filter(|i| i >= &1) .collect(); This is one of the approaches on the page @scottmcm linked.\n\nI spent three evenings on the problem, came up with working solutions, but they do not look idiomatic/good-practice (I have no Rust experience) and I cannot find a good example of solving my problem. I see nothing wrong with your code tbh. Maybe the introduction of the variable in the second snippet is somewhat superfluous, but otherwise the code is perfectly fine. I doubt that you will ever be able to find an exactly matching solution to a problem that is so specific and so low-level (i.e., it purely concerns what syntax to use in the context of results of tuples). You should read other experienced programmers' code a lot, and then based on that, formulate your own style that is not in contradiction with that of the rest of the ecosystem. That is probably the best way. And don't worry too much about what's \"best\" way while you are learning. If there is something grossly wrong with your code that you post here, people will notice and they will tell you.\n\nThank you for your detailed response with some sample solutions and explanations.\n\n You helped me a lot. I started to understand what is going on and what I should be paying attention to in this case.\n\n macro seems super useful in my case, also I finally understood after your example. But I have the last question about . I wanted to filter on the second element of a tuple and return only this second element. What I understood from the docs expects to be returned, but in my example below, the seems to return and not . // // Filter on and keep second element let vec = vec![Ok((0,1)), Ok((1,2)), Err((2,3))]; let res: Vec<i32> = vec .into_iter() .filter_map(|t| t.ok().map(|(_,j)| j)) // t.ok is an Option, but j not, why compalier does not complain? .filter(|j| j >= &1) .collect(); println!(\"{:?}\", res); // Returns [1,2] // Correct\n\nThe various iterators and error/none handling methods are definitely very tricky - particularly as there are lot of combinations, some of which are obscured by being specific trait implementations, and can generally be very hard things to search for. I found this article really helpful for covering the various ways to handle \"multiple results\" Based on one of the examples from that article, I think you want to use combined with , because\n• turns to and to\n• removes and keep the from Thus you end up with just your \"successful tuples\", and the errors get quietly dropped. fn main() { let vec = vec![Ok((0,1)), Ok((1,2)), Err((2,3))]; // Collect successful results, throwing any errors away let results: Vec<(i64, i64)> = vec.into_iter().filter_map(Result::ok).collect(); dbg!(&results); // Do some filtering with second element of tuple for (x, y) in results { if y > 1 { println!(\"Simple, as no results to worry about!\"); } } } The partition trick mentioned in the article would also be useful if you want to keep the tuples for other purposes. Not quite what you describe, but much more often I want to bail out on the first error, for which the collect to trick is really useful, fn main() { // Same as before (just with explicit types to simplify the hints for `collect` below) let vec: Vec<Result<(i64, i64), (i64, i64)>> = vec![Ok((0,1)), Ok((1,2))]; // Collect results, bailing out if there is any errors let results: Result<Vec<_>, _> = vec.into_iter().collect(); let results = results.unwrap(); // Crude error handling // Same as before for (x, y) in results { if y > 1 { println!(\"Simple, as no results to worry about!\"); } } } Probably worth mentioning also that although there is all the fancy iterator methods, a dumb old loop is often a perfectly valid and idiomatic approach. For example, fn main() { let vec = vec![Ok((0,1)), Ok((1,2)), Err((2,3))]; for item in vec { if let Ok((x, y)) = item { if y > 1 { println!(\"Found a result with second tuple value over 1!\"); } } } } It might end up longer, but idiomatic Rust code doesn't mean \"short\"\n\nBut I have the last question about . I wanted to filter on the second element of a tuple and return only this second element. [...] Ah just saw this while writing above. I think as soon as you start doing anything \"non trivial\" things with the iterated values, a simple for loop often becomes the neatest way. By that I mean, I think this is the most concice way you can write it with iterators: ..whereas writing it with a for loop and a let binding works out to be, arguably, shorter, and I'd also argue easier to understand (e.g it makes it clear the Err variants are silently dropped because there's no arm on the if let Ok(...) ) let vec = vec![Ok((0,1)), Ok((1,2)), Err((2,3))]; let mut good_values = vec![]; for item in vec { if let Ok(x) = item { if x.1 > 1 { good_values.push(x.1); } } } dbg!(&good_values);"
    },
    {
        "link": "https://dev.to/mbayoun95/the-ultimate-guide-to-tuples-in-rust-from-basics-to-mastery-41ho",
        "document": "Welcome to the ultimate guide on tuples in Rust! Whether you're a beginner or an advanced Rust developer, this guide will take you on a journey through the world of tuples, exploring their definitions, concepts, advantages, use cases, and real-world applications. By the end of this guide, you'll have a deep understanding of tuples and how to use them effectively in your Rust projects.\n• \n• When to Use Tuples vs Structs\n• Common Pitfalls and How to Avoid Them\n\nA tuple is a collection of values of different types. Tuples are fixed in size, meaning that once they are created, their length cannot change. They are a convenient way to group together a few related values without having to define a custom struct.\n\nIn Rust, tuples are defined using parentheses and commas to separate the elements. The types of the elements are inferred by the compiler, but you can also explicitly specify them.\n• Simplicity: Tuples are simple to create and use, especially for small, ad-hoc groupings of data.\n• Heterogeneity: Tuples can hold values of different types, making them versatile for various use cases.\n• Pattern Matching: Tuples work seamlessly with Rust's pattern matching capabilities, allowing for elegant and readable code.\n• Returning Multiple Values: Tuples are often used to return multiple values from a function.\n\nCreating a tuple is straightforward. You simply enclose the values in parentheses and separate them with commas.\n\n\n\nYou can access individual elements of a tuple using dot notation followed by the index of the element.\n\n\n\nDestructuring allows you to unpack a tuple into individual variables. This is particularly useful when you want to work with the elements separately.\n\n\n\nTuples can be used in pattern matching, which is a powerful feature in Rust for handling different cases in a clean and readable way.\n\n\n\nTuple structs are a hybrid between tuples and structs. They have a name and a fixed set of fields, but the fields are not named.\n\n\n\nTuples can be used in function signatures to accept multiple arguments or return multiple values.\n\n\n\nTuples are commonly used to return multiple values from a function.\n\n\n\nTuples follow Rust's ownership rules. If a tuple contains owned values, moving the tuple will move those values.\n\n\n\nTuples are ideal for grouping together a few related values of different types, such as a person's name and age or a 2D point's coordinates.\n\n\n\nTuples are often used to return multiple values from a function, such as the quotient and remainder of a division operation.\n\n\n\nTuples can be used in pattern matching to handle different cases in a clean and readable way.\n\n\n\nTuples can be used in collections like vectors or hash maps to store grouped data.\n\n\n\nWhen to Use Tuples vs Structs\n• Tuples: Use tuples for small, ad-hoc groupings of data where the meaning of the fields is clear from the context.\n• Structs: Use structs when the data has a clear and meaningful structure, and when you want to name the fields for clarity.\n\nTuples are generally lightweight and have minimal overhead. However, if you find yourself frequently accessing elements by index, consider using a struct for better readability and maintainability.\n\nCommon Pitfalls and How to Avoid Them\n• Mixing Up Indices: Be careful when accessing tuple elements by index, as mixing up indices can lead to bugs.\n• Ownership Issues: Remember that tuples follow Rust's ownership rules. If a tuple contains owned values, moving the tuple will move those values.\n\nLet's build a practical example where we parse a CSV file and store the data as tuples. We'll then perform some operations on the data.\n• Read the CSV File: Use the crate to read the CSV file.\n• Parse the Data: Parse each row into a tuple.\n• Store the Data: Store the parsed data in a vector.\n• Perform Operations: Perform some operations on the data, such as filtering or sorting.\n• Testing: Write unit tests to ensure that the CSV parsing and filtering logic works correctly.\n• Debugging: Use Rust's powerful debugging tools, such as and , to debug any issues.\n• Tuple Manipulation: Write a function that takes a tuple of two integers and returns a new tuple with the values swapped.\n• Pattern Matching: Write a function that takes a tuple of three elements and uses pattern matching to return the sum of the first two elements if the third element is .\n• Tuple Structs: Create a tuple struct that represents a color and implement a method to convert it to grayscale.\n• They are simple to create and use, making them ideal for small, ad-hoc groupings of data.\n• They are commonly used to return multiple values from functions and represent heterogeneous data.\n\nCongratulations! You've now mastered tuples in Rust. Whether you're working on small projects or large-scale applications, tuples will be a valuable tool in your Rust toolkit. Share your experience with Rust's tuple data structure in the comments! 😊"
    },
    {
        "link": "https://stackoverflow.com/questions/54329194/rust-type-definition-of-vector-of-tuples",
        "document": "I am following the excism rust track, and I've hit a problem (I'm very, very new to rust)\n\nThis is a function to calculate the pythagorean triples of an integer:\n\nOr rather, it would be if it worked...\n\nThe current issue is in the line:\n\nIt says that it expected one of a number of symbols when parsing the type for , but found . From everything that I've seen (not much), this is the correct way to define a vector of tuples, each of which has two elements of type .\n\nAs I said, this is a learning exercise for me, so if anybody could help me out, I would be grateful for verbose and detailed answers :)\n\nFor what it's worth, as it might help you to comment on my code, this is the maths:\n\nIt should then spit them all out into a HashSet of arrays of"
    }
]