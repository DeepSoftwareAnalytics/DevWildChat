[
    {
        "link": "https://ubuntu.com/server/docs/installation",
        "document": "You should have been redirected."
    },
    {
        "link": "https://ubuntu.com/tutorials/install-ubuntu-server",
        "document": "Ubuntu Server is a variant of the standard Ubuntu you already know, tailored for networks and services. It’s just as capable of running a simple file server as it is operating within a 50,000 node cloud.\n\nUnlike the installation of Ubuntu Desktop, Ubuntu Server does not include a graphical installation program. Instead, it uses a text menu-based process. If you’d rather install the desktop version, take a look at our Install Ubuntu desktop tutorial.\n\nThis guide will provide an overview of the installation from either a DVD or a USB flash drive.\n\nFor a more detailed guide on Ubuntu Server’s capabilities and its configuration, take a look at our the Community Ubuntu Server documentation."
    },
    {
        "link": "https://documentation.ubuntu.com/server/tutorial/basic-installation",
        "document": "This chapter provides an overview of how to install Ubuntu Server Edition. You can also refer to this guide on how to operate the installer for more information on using the installer, and to this screen-by-screen reference guide for more information about each of the installer screens.\n\nUbuntu Server Edition provides a common, minimalist base for a variety of server applications, such as file/print services, web hosting, email hosting, etc. This version supports four 64-bit architectures: The recommended minimal system requirements for this tutorial are: If you are looking for more general system requirements, refer to this page.\n\nBefore installing Ubuntu Server Edition you should make sure all data on the system is backed up. If this is not the first time an operating system has been installed on your computer, it is likely you will need to re-partition your disk to make room for Ubuntu. Any time you partition your disk, you should be prepared to lose everything on the disk should you make a mistake or something goes wrong during partitioning. The programs used in installation are quite reliable, most have seen years of use, but they also perform destructive actions.\n\nYou can obtain the amd64 server download from https://releases.ubuntu.com/. Select the version you wish to install and select the “server install image” download. Note that the server download includes the installer. There are platform specific how-to guides for installations on:\n\nThere are many ways to boot the installer but the simplest and most common way is to create a bootable USB stick to boot from (tutorials for other operating systems are also available).\n\nPlug the USB stick into the system to be installed and start it. Most computers will automatically boot from USB or DVD, though in some cases this is disabled to improve boot times. If you don’t see the boot message and the “Welcome” screen which should appear after it, you will need to set your computer to boot from the install media. There should be an on-screen message when the computer starts telling you what key to press for settings or a boot menu. Depending on the manufacturer, this could be , , or . Simply restart your computer and hold down this key until the boot menu appears, then select the drive with the Ubuntu install media. If you are still having problems, check out the Ubuntu Community documentation on booting from CD/DVD. After a few moments, the installer will start in its language selection screen."
    },
    {
        "link": "https://ubuntu.com/tutorials/install-ubuntu-desktop",
        "document": "This screen allows you to configure your installation. If you would like Ubuntu to be the only operating system on your hard drive, select Erase disk and install Ubuntu.\n\nIf your device currently has another operating system installed, you will receive additional options to install Ubuntu alongside that OS rather than replacing it.\n\nLet’s take a moment to review all of the above options in detail.\n\nIf you select this option you will be given a simple interface that allows you to select the drive you want to install Ubuntu on and a slider to determine the amount of disk space you would like Ubuntu to use. The available space is limited by the existing contents of the disk and is designed to avoid overwriting existing files.\n\nThis view automatically selects the largest partition on the drive. For more fine-grained control you can switch to the Manual partitioning option that is detailed further down.\n\nIf you select this option Ubuntu will take up the entire disk space on the selected drive.\n\nIf your PC has multiple hard drives then this option allows you to install Ubuntu alongside an existing OS as long as they each have their own drive. Take care to ensure that you are selecting the right drive in this instance!\n\nThis option also allows you to encrypt your entire drive using LVM, ZFS or using the Trusted Platform Module on the device. To do this open the Advanced features option before proceeding to the above screen and select ‘Encrypt the new Ubuntu installation for security’\n\nIf you select either LVM or ZFS based encryption you will be prompted to create a Security key that you will need to enter on boot before logging in with your user credentials.\n\nIf you are using TPM-based Full Disc Encryption you will be prompted to run the command after installing to generate a recovery key.\n\nManual partitioning is designed for advanced users who want to create specific configurations for their use-cases. As such we assume that these users will be comfortable with this interface and will not go into detail during this tutorial on specific setups.\n\nHere users can see all existing drives and partitions and create and manage new partition tables and configurations.\n\nIf your device has Windows BitLocker Drive Encryption enabled then Ubuntu will not be able to gather the drive information it needs to install Ubuntu safely alongside Windows.\n\nIf this is the case you will get a prompt to disable BitLocker in Windows before restarting the Ubuntu installer.\n\nDisabling Windows BitLocker is not required when fully erasing Windows or when there is a separate, unencrypted drive available for Ubuntu. For more information see the final section at the end of this tutorial."
    },
    {
        "link": "https://ubuntu.com/server/docs",
        "document": "Ubuntu Server is a version of the Ubuntu operating system designed and engineered as a backbone for the internet.\n\nUbuntu Server brings economic and technical scalability to your datacenter, public or private. Whether you want to deploy an OpenStack cloud, a Kubernetes cluster or a 50,000-node render farm, Ubuntu Server delivers the best value scale-out performance available.\n\nUbuntu Server is a member of the Ubuntu family. It’s an open source project that welcomes community projects, contributions, suggestions, fixes and constructive feedback.\n\nIf you find any errors or have suggestions for improvements, please use the “Give feedback” button at the top of every page. This will take you to GitHub where you can share your comments or let us know about bugs with any page.\n• None Get in touch via the IRC channel on Libera\n• None Find out how to contribute to the Server Guide\n\nThinking about using Ubuntu Server for your next project? Get in touch!"
    },
    {
        "link": "https://reddit.com/r/linux/comments/2wqrwo/linux_server_would_a_gui_hurt",
        "document": "Hey guys I'm a little experienced with linux I run a command line version on a small older computer I have that has\n\nThe reason I run command line is because I didn't want to sacrifice any preformance to the gui because I run a small 5 to 6 person server for minecraft or starbound.\n\nSo now that I have more power would I notice any difference if I got a gui to help me with file transfer amd adding mods to the server. On the older computer starbound lagged alot because there were 5 of us and it ran like slow mo."
    },
    {
        "link": "https://community.spiceworks.com/t/centos-linux-with-kde-gui-guide-for-newbies/353259",
        "document": "Access Red Hat’s knowledge, guidance, and support through your subscription."
    },
    {
        "link": "https://stackoverflow.com/questions/4833768/which-gui-frameworks-are-best-for-a-multi-threaded-python-program",
        "document": "Ohh, I definitely recommend PyQt4. At first, I didn't get all this and nonsense, but now that I've made a program with it, the module is amazingly useful.\n\nAs for stability, I have never had a crash, ever. Even while I was debugging half-functional code, QT didn't have any problems. It just threw an error to the console window whenever I clicked a button with an invalid signal slot.\n\nGTK, on the other hand, just 'sploded once in a while with no errors whatsoever. Just your extremely descriptive and friendly . That was one of the reasons I find PyQt a joy to work with. When you get an error, you actually know what's wrong.\n\nI'm pretty sure it's personal preference after that, but one more plus is native-looking GUIs on Mac, Linux, and Windows. GTK+ on Windows (don't get me wrong. I use Ubuntu) just has this X-org feel to it, which disturbs me.\n\nJust to make PyQt a bit more attractive, here's an excerpt from my book binding application (it's a bit messy):"
    },
    {
        "link": "https://vps-mart.com/blog/linux-desktop-environments",
        "document": "A Linux desktop environment is a graphical user interface (GUI) that provides a cohesive and user-friendly environment for users to interact with their Linux operating system. It consists of a collection of software components, including a window manager, desktop shell, panels, applets, file managers, and other tools that work together to create the desktop experience. A desktop environment is not a strict requirement for using a Linux operating system. However, a desktop environment can provide several benefits for Linux users: User-Friendly Interface: A desktop environment offers a graphical user interface that makes it easier for users to interact with the operating system. It provides a visual representation of system resources, applications, and files, making it more intuitive for users who are accustomed to graphical interfaces. Productivity and Efficiency: Desktop environments often include tools and features that enhance productivity. They provide easy access to applications, files, and system settings, allowing users to work efficiently. Features like multitasking, window management, and shortcuts can help users organize and navigate through their tasks more effectively. Application Ecosystem: Desktop environments provide a framework for running and managing applications. They often include application launchers, file managers, and software centers that make it convenient to install, update, and manage software. Desktop environments also ensure compatibility and integration between different applications, creating a cohesive user experience. Personalization: Linux desktop environments offer a high degree of customization. Users can change themes, icons, wallpapers, and customize the behavior and appearance of various desktop components. This allows users to tailor their desktop environment to their own preferences and create a personalized computing experience. Accessibility Features: Many desktop environments include accessibility features that make it easier for users with disabilities to interact with the system. These features can include screen readers, high-contrast themes, keyboard shortcuts, and magnification tools, among others. Familiarity and Interoperability: Desktop environments offer a consistent interface across different Linux distributions. This means that users can switch between distributions without having to learn a new interface. Additionally, desktop environments often provide interoperability with other platforms, allowing users to interact seamlessly with files, applications, and services from different operating systems. While a desktop environment adds overhead in terms of system resources, it provides a user-friendly and familiar interface that can greatly enhance the user experience for Linux users. However, users who prefer minimalism, efficiency, or specific use cases may choose to run Linux without a desktop environment and opt for a lightweight window manager or a command-line interface. In this blog, we will look at 9 best Linux desktop environments to use on your Linux operating systems.\n\nXFCE is a lightweight desktop environment for Linux and Unix-like operating systems. It aims to provide a fast and efficient user experience while using fewer system resources compared to other desktop environments. XFCE is known for its simplicity, stability, and ease of customization. Xfce can be installed on several UNIX platforms. It is known to compile on Linux, NetBSD, FreeBSD, OpenBSD, Solaris, Cygwin and MacOS X, on x86, PPC, Sparc, Alpha... Lightweight: XFCE is designed to be lightweight and has minimal system requirements, making it suitable for older hardware or systems with limited resources. It prioritizes efficient resource usage without sacrificing functionality. Traditional Layout: XFCE offers a classic and familiar desktop layout with a panel at the top or bottom of the screen, an application menu, and a taskbar. This layout is reminiscent of older versions of Windows or other traditional desktop environments. Customization: XFCE provides a high level of customization. Users can modify the appearance of the desktop by choosing different themes, icons, and window decorations. The desktop layout can also be adjusted to suit individual preferences. Plugin System: XFCE features a modular plugin system that allows users to add additional functionality to the desktop. There are various plugins available, such as a terminal emulator, text editor, sound mixer, application finder, image viewer, iCal based calendar and a CD and DVD burning application. Users can customize their desktop by adding or removing these plugins as needed. XFCE is a popular choice for users who prioritize speed, efficiency, and a traditional desktop experience. It is often favored by those seeking a lightweight desktop environment that conserves system resources while still offering customization options and a familiar interface. You can refer to our guide on how to install Xfce desktop environment and XRDP service on your remote Ubuntu server.\n\nGNOME is a popular desktop environment for Linux and Unix-like operating systems. It is known for its modern and user-friendly design, providing a visually appealing interface and a range of features. GNOME aims to create a seamless and intuitive user experience while promoting productivity and ease of use. Many major Linux distributions, including Debian, Fedora Linux, Ubuntu, Red Hat Enterprise Linux, and SUSE Linux Enterprise distribute GNOME as their default desktop environment; it is also the default in Oracle Solaris, a Unix operating system. On September 20, 2023, GNOME released GNOME 45, “Rīga.” Shell Interface: GNOME introduces a shell interface that serves as the primary interaction point for users. The shell provides a clean and clutter-free desktop environment with a top bar that displays system information, notifications, and app indicators. It also includes an overview mode that allows users to quickly switch between applications and workspaces. Personalizable: GNOME provides various customization options to tailor the desktop environment to individual preferences. Users can customize the appearance of GNOME by selecting different themes, icons, and shell extensions. Additionally, GNOME supports keyboard shortcuts and gestures for efficient navigation and task management. Extensions: GNOME allows users to extend and customize their desktop environment using extensions. Extensions are add-ons that provide additional functionality or modify the behavior of the desktop. Users can install extensions to add features like weather information, system monitors, dock panels, and more. Integration with Online Accounts: GNOME integrates with online accounts, allowing users to access and manage their online services and data directly from the desktop environment. It supports various online accounts, including Google, Microsoft, Nextcloud, and more. GNOME provides a modern and polished desktop environment that appeals to users seeking a visually appealing interface, productivity tools, and a focus on usability. It continues to evolve through community-driven development and serves as the default desktop environment for several Linux distributions, including Ubuntu.\n\nKDE Plasma is a popular desktop environment for Linux and Unix-like operating systems. It offers a modern and visually appealing interface along with a wide range of features and customization options. KDE Plasma aims to provide a flexible and powerful desktop environment that caters to the needs of different users. Flexibility: KDE Plasma offers extensive customization options, allowing users to personalize their desktop experience. Users can choose from various themes, icons, and widgets to adjust the appearance of their desktop. The flexibility of KDE Plasma enables users to create a desktop environment that suits their preferences and workflow. KRunner: KRunner is a powerful and versatile tool in KDE Plasma that allows users to quickly launch applications, open files, perform calculations, and execute system commands. It provides a convenient way to access and search for various resources on the system. KDE Applications: KDE Plasma integrates seamlessly with a wide range of KDE applications. These applications, developed by the KDE community, cover various categories such as office productivity, multimedia, graphics, development, and more. KDE applications are designed to have a consistent look and feel, offering a cohesive user experience. Integration and Compatibility: KDE Plasma aims to ensure compatibility and interoperability with different technologies and standards. It supports various file formats, protocols, and frameworks, allowing seamless integration with other software and services. KDE Plasma is known for its rich feature set, flexibility, and visual appeal. It is suitable for users who value customization options, productivity tools, and a modern desktop experience. KDE Plasma is the default desktop environment for the KDE community's flagship distribution, KDE neon, and is also available as an option on many other Linux distributions. You can refer to our guide on how to install KDE Plasma desktop environment and XRDP service on your remote Ubuntu server.\n\nMATE is a desktop environment composed of free and open-source software that runs on Linux, BSD, and illumos operating systems. It is a continuation of the GNOME 2 desktop environment, aiming to provide a traditional and familiar user interface. MATE focuses on simplicity, stability, and ease of use, making it suitable for users who prefer a classic desktop experience. Traditional Desktop Layout: MATE offers a traditional desktop layout with a panel at the top or bottom of the screen, an application menu, a taskbar, and desktop icons. This layout is reminiscent of older versions of GNOME and provides a familiar interface for users transitioning from GNOME 2. Customizable: MATE provides customization options to personalize the desktop environment. Users can choose different themes, icons, and window decorations to customize the appearance of their desktop. MATE also supports different panel layouts and configurations, allowing users to adjust the desktop to their preferences. Accessibility MATE includes accessibility features to make the desktop environment usable for individuals with disabilities. It supports features like high contrast themes, keyboard shortcuts, screen readers, and magnification tools to enhance accessibility and usability for all users. Application Compatibility: MATE is compatible with a wide range of Linux applications and software. It can run applications from various desktop environments, allowing users to choose their preferred applications while benefiting from the MATE desktop environment. MATE is a popular choice for users who prefer a traditional desktop experience similar to GNOME 2. It offers stability, customization options, and compatibility with a wide range of Linux applications. MATE is the default desktop environment for several Linux distributions, including Ubuntu MATE and Linux Mint MATE edition.\n\nLXDE (Lightweight X11 Desktop Environment) is a lightweight desktop environment designed to be fast, energy-efficient, and use minimal system resources. It is primarily focused on providing a simple and lightweight user interface while maintaining usability and functionality. Tailorable: While LXDE aims to be lightweight, it still offers a degree of customization. Users can customize the desktop appearance by choosing different themes, icons, and wallpapers. LXDE also allows users to configure keyboard shortcuts and personalize the panel layout and applets. Modularity: LXDE follows a modular design approach, where individual components can be used independently or combined to create a complete desktop environment. This modular structure allows users to choose and configure only the components they need, reducing unnecessary resource consumption. Compatible with Apps: LXDE is compatible with a wide range of applications and supports multiple file formats and protocols commonly used in Linux and Unix-like systems. Users can run applications from various desktop environments within LXDE, providing flexibility and choice in software selection. Internationalization: LXDE supports various languages and provides tools for internationalization and localization. It offers multilingual support, allowing users to use the desktop environment in their preferred language. LXDE is often chosen by users who prioritize a lightweight and efficient desktop environment, especially for older hardware or systems with limited resources. It is commonly used in lightweight Linux distributions, such as Lubuntu, which aims to provide a fast and energy-efficient operating system.\n\nEnlightenment is a Window Manager, Compositor and Minimal Desktop for Linux (the primary platform), BSD and any other compatible UNIX system. It aims to provide a visually appealing and feature-rich user interface while maintaining efficiency and low resource usage. Efficiency and Performance: Enlightenment is designed to be efficient and lightweight, making it suitable for systems with limited resources. It employs techniques like smart memory management and optimized rendering, resulting in a responsive and fast user experience. EFL (Enlightenment Foundation Libraries): Enlightenment is built on the Enlightenment Foundation Libraries, a set of libraries developed alongside the desktop environment. These libraries provide the core functionality for Enlightenment and offer developers the ability to create applications that integrate seamlessly with the desktop environment. Modules and Gadgets: Enlightenment features a modular design that allows users to add or remove functionality through modules and gadgets. Modules are small applications that provide additional features, such as system monitors, calendar, weather information, and more. Gadgets are small interactive elements that can be placed on the desktop or panels. App Compatibility: Enlightenment is compatible with a wide range of applications and supports various file formats and protocols commonly used in Linux systems. It integrates well with different software and technologies, allowing users to run their preferred applications within the Enlightenment desktop environment. Enlightenment offers a unique and visually appealing desktop environment that combines efficiency, customization options, and advanced visual effects. While it may not be as widely used as some other desktop environments, it has a dedicated user base and is particularly favored by users who value aesthetics and enjoy fine-tuning their desktop experience.\n\nDeepin is the default desktop environment for the Deepin Linux distribution. It is designed to provide a modern, intuitive, and visually appealing user interface. Deepin is known for its elegant design, smooth animations, and user-friendly features. Dock and Launcher: Deepin features a dock at the bottom of the screen that provides quick access to frequently used applications. It also includes a launcher that allows users to search for applications, files, and settings. Deepin Store: Deepin includes its own software center called Deepin Store. It allows users to browse and install a wide range of applications, including both native Deepin applications and popular third-party software. Multitasking and Workspaces: Deepin supports multitasking with a task switcher that displays thumbnails of open windows. It also allows users to create and switch between multiple workspaces, providing a convenient way to organize and switch between different sets of applications and tasks. Deepin Control Center: Deepin Control Center is a centralized settings panel that allows users to customize various aspects of the desktop environment. It provides an intuitive and user-friendly interface for managing system settings, appearance, network configurations, power management, and more. Deepin Desktop Environment is known for its sleek and visually appealing design, as well as its focus on user experience and ease of use. It integrates well with the Deepin ecosystem of applications and provides a cohesive and polished desktop experience. While originally designed for the Deepin Linux distribution, the Deepin Desktop Environment can also be installed and used on other Linux distributions.\n\nBudgie is a desktop environment designed primarily for the Solus operating system but can also be installed and used on other Linux distributions. Its design emphasizes simplicity, minimalism, and elegance, while providing the means to extend or customize the desktop in various ways. It aims to provide a clean, modern, and user-friendly desktop experience. Simplicity and Minimalism: Budgie follows a minimalist design approach, offering a simple and uncluttered user interface. It focuses on providing essential features while avoiding unnecessary complexity, resulting in a streamlined and intuitive desktop experience. Budgie Menu: Budgie features a straightforward and user-friendly menu that provides access to applications, system settings, and search functionality. The menu supports categorization and search, allowing users to quickly find and launch applications. Budgie Applets: Budgie supports the use of applets, which are small widgets that can be added to the panel for additional functionality. Users can choose from a selection of applets or create their own to enhance their desktop experience. Desktop Effects and Window Management: Budgie offers various desktop effects, such as window animations and transitions, to enhance the visual experience. It also provides intuitive window management features, including window snapping and tiling options. Budgie is favored by users who prefer a clean and straightforward desktop environment. It combines simplicity with modern features, offering a user-friendly interface with customization options. While it is developed primarily for Solus, it can be installed and used on other Linux distributions as well."
    },
    {
        "link": "https://stackoverflow.com/questions/455084/what-kinds-of-applications-need-to-be-multi-threaded",
        "document": "Answers would be best if in the form of one application per post that way the most applicable will float to the top.\n\nWhat are some concrete examples of applications that need to be multi-threaded, or don't need to be, but are much better that way?\n\nThere is no hard and fast answer, but most of the time you will not see any advantage for systems where the workflow/calculation is sequential. If however the problem can be broken down into tasks that can be run in parallel (or the problem itself is massively parallel [as some mathematics or analytical problems are]), you can see large improvements. If your target hardware is single processor/core, you're unlikely to see any improvement with multi-threaded solutions (as there is only one thread at a time run anyway!) Writing multi-threaded code is often harder as you may have to invest time in creating thread management logic.\n• Image processing can often be done in parallel (e.g. split the image into 4 and do the work in 1/4 of the time) but it depends upon the algorithm being run to see if that makes sense.\n• Rendering of animation (from 3DMax,etc.) is massively parallel as each frame can be rendered independently to others -- meaning that 10's or 100's of computers can be chained together to help out.\n• GUI programming often helps to have at least two threads when doing something slow, e.g. processing large number of files - this allows the interface to remain responsive whilst the worker does the hard work (in C# the BackgroundWorker is an example of this) GUI's are an interesting area as the \"responsiveness\" of the interface can be maintained without multi-threading if the worker algorithm keeps the main GUI \"alive\" by giving it time, in Windows API terms (before .NET, etc) this could be achieved by a primitive loop and no need for threading: MSG msg; while(GetMessage(&msg, hwnd, 0, 0)) { TranslateMessage(&msg); DispatchMessage(&msg); // do some stuff here and then release, the loop will come back // almost immediately (unless the user has quit) }\n\nServers are typically multi-threaded (web servers, radius servers, email servers, any server): you usually want to be able to handle multiple requests simultaneously. If you do not want to wait for a request to end before you start to handle a new request, then you mainly have two options: Launching a process is usually more resource-intensive than lauching a thread (or picking one in a thread-pool), so servers are usually multi-threaded. Moreover, threads can communicate directly since they share the same memory space. The problem with multiple threads is that they are usually harder to code right than multiple processes.\n\nBasically there are two reasons to multi-thread:\n• None To be able to do processing tasks in parallel. This only applies if you have multiple cores/processors, otherwise on a single core/processor computer you will slow the task down compared to the version without threads.\n• None I/O whether that be networked I/O or file I/O. Normally if you call a blocking I/O call, the process has to wait for the call to complete. Since the processor/memory are several orders of magnitude quicker than a disk drive (and a network is even slower) it means the processor will be waiting a long time. The computer will be working on other things but your application will not be making any progress. However if you have multiple threads, the computer will schedule your application and the other threads can execute. One common use is a GUI application. Then while the application is doing I/O the GUI thread can keep refreshing the screen without looking like the app is frozen or not responding. Even on a single processor putting I/O in a different thread will tend to speed up the application. The single threaded alternative to 2 is to use asynchronous calls where they return immediately and you keep controlling your program. Then you have to see when the I/O completes and manage using it. It is often simpler just to use a thread to do the I/O using the synchronous calls as they tend to be easier. The reason to use threads instead of separate processes is because threads should be able to share data easier than multiple processes. And sometimes switching between threads is less expensive than switching between processes. As another note, for #1 Python threads won't work because in Python only one python instruction can be executed at a time (known as the GIL or Global Interpreter Lock). I use that as an example but you need to check around your language. In python if you want to do parallel calculations, you need to do separate processes.\n\nAll the answers so far are focusing on the fact that multi-threading or multi-processing are necessary to make the best use of modern hardware. There is however also the fact that multithreading can make life much easier for the programmer. At work I program software to control manufacturing and testing equipment, where a single machine often consists of several positions that work in parallel. Using multiple threads for that kind of software is a natural fit, as the parallel threads model the physical reality quite well. The threads do mostly not need to exchange any data, so the need to synchronize threads is rare, and many of the reasons for multithreading being difficult do therefore not apply. This is not really about a performance improvement, as the (maybe 5, maybe 10) threads are all mostly sleeping. It is however a huge improvement for the program structure when the various parallel processes can be coded as sequences of actions that do not know of each other. I have very bad memories from the times of 16 bit Windows, when I would create a state machine for each machine position, make sure that nothing would take longer than a few milliseconds, and constantly pass the control to the next state machine. When there were hardware events that needed to be serviced on time, and also computations that took a while (like FFT), then things would get ugly real fast.\n\nNot directly answering your question, I believe in the very near future, almost every application will need to be multithreaded. The CPU performance is not growing that fast these days, which is compensated for by the increasing number of cores. Thus, if we will want our applications to stay on the top performance-wise, we'll need to find ways to utilize all your computer's CPUs and keep them busy, which is quite a hard job. This can be done via telling your programs what to do instead of telling them exactly how. Now, this is a topic I personally find very interesting recently. Some functional languages, like F#, are able to parallelize many tasks quite easily. Well, not THAT easily, but still without the necessary infrastructure needed in more procedural-style environments. Please take this as additional information to think about, not an attempt to answer your question."
    },
    {
        "link": "https://en.opensuse.org/SDB:Live_USB_stick",
        "document": "You could, if needed, make a backup image of the stick prior to using it for installation, and then recover it after the installation. Where is the device corresponding to your USB stick:\n\nThe above example compresses the image. To simply create a direct copy of the disk:\n\nThese are general instructions to write an ISO to a USB device.\n\nImpression is only available in the Tumbleweed repository. For Leap install the package Imagewriter.\n\nUse this command to install Impression on Tumbleweed.\n\nThese instructions are for Impression. The process for Imagewriter will be similar.\n\nUsing live-fat-stick, live-grub-stick, live-usb-gui (Command line or GUI way)\n\nIf you'd rather not reformat the USB device and keep the ability of putting files on it and accessible by other operating systems, you have the option of using the or scripts from command line or point and click graphical interface. You can put ISO on a vfat partitioned USB stick or hard disk.\n\nOn openSUSE you can install the packages simply via YaST. If you are running any other distribution, get the scripts from github and make it executable (as root, with ) after copying it to , make sure you have and installed before running it.\n\nRun the following as root (with , not using ) in terminal to get the USB device path:\n\nRun the following to make USB stick with vfat(fat32) partition bootable with iso copied on it:\n\nTo make USB device bootable with EFI(Secure boot capabilities) wiping all data from it, run:\n\nFor more help, run:\n\nUse command in place of live-fat-stick as shown in above examples if you wish to create bootable usb sticks formatted in any file systems supported by grub2, for example you can use ext3/ntfs formatted stick to create bootable USB from standard openSUSE installation iso, this allows the use of remaining space for putting other iso images or data.\n\nMultiple iso images from multiple distributions can be added to the USB device with vfat partition when not using \"isohybrid\" option, boot menu will offer a choice of distribution to boot from. Scripts does not format or remove data from the device.\n\nThe following steps use CLI tools. The example uses prompts: the is the user prompt and means the root prompt.\n\nDownload the installation image of your choice from get.opensuse.org.\n\nVerify the integrity of the downloaded image\n\nAfter the download has completed, verify the correct download with the commands:\n\nTo find the block device of your USB stick, make sure you have NOT plugged the stick to your computer.\n\n2. Plug in your USB stick to your computer.\n\nThe output can vary depending on the content of the stick. In this case, your disk is so you need to use the device .\n\nFinally, once you've found your block device, write the image to it. Point 'dd' to the full path such as '/home/user/Downloads/openSUSE-*.iso'.\n\nReplace with your block device of your USB stick from the previous step:\n\nIf you get the message\n\nyour dd version does not support the status=progress option and therefore you have to remove it (and you will miss the writing progress indicator).\n\nHow to Recover the USB Stick for \"Normal\" Use Again\n\nAfter installing a system, you may want to reuse the USB stick as a regular storage device. To do this, you will need to reformat it. Often, users report that Windows fails to do this correctly.\n\nYou can repartition the USB stick using `fdisk`. Follow these steps:\n\nWhere `/dev/sdX` is your USB device.\n\n4. Write the changes to disk and exit by typing:\n\nAfter partitioning, format the USB stick with the following command:\n\nReplace `SOME_NAME` with your preferred label for the USB stick. This step is crucial because without the `-n SOME_NAME` option, the USB stick might mount with the ISO name.\n\nAlternatively, you can use GParted for partitioning and formatting if you prefer a graphical interface.\n\nIf you encounter issues, such as the USB stick being recognized as a CD or not being writable, follow these steps with caution:\n\nIf you inspect the USB stick with `fdisk` after writing an ISO, you might see something like this (note the GPT warning):\n\nStep 3: Zero Out the USB Stick (If Needed)\n\nBefore reformatting, you may need to repartition the USB stick again. If it fails, use this extra step because some software might recognize the stick as a CD, making it non-writable:\n\nNotice: These instructions assume the USB stick device is `/dev/sdX`. You must identify your device correctly (refer to the \"Find Block Device\" section). Mistakes can destroy other disks in your system.\n\nThis process will make the USB stick ready for reformatting by any operating system.\n\nThis situation would happen very rarely, but in the event that your computer doesn't boot from the LiveUSB/DVD from the steps above, you might try the following procedure.\n\nOpen a console and do the following as root:"
    },
    {
        "link": "https://forums.opensuse.org/t/liveusb-with-persistence/142931",
        "document": "Hi, opensusers. I’m new in this subjects and I 'd want to try Tumbleweed for the first time. I’ve tried Ventoy (is an open source tool to create bootable USB drive) to prove Tumbleweed with persistence. It’s create an .dat file. But, in a new session the changes are not saved. Is it possible to create a liveusb of Tumbleweed with persistence?\n\n Many distros (like Ubuntu/MX/LinuxMint …) provide feature for persistence and Tmbleweed is not in the tested list, but i’ve tried.\n\n I know that they are others tools like Rufus, Etcher, mkusb, but I think that Ventoy can work better.\n\n My pendrive is Data Traveller 128 G and i’ve followed all the instructions with Ventoy https://www.ventoy.net/en/plugin_persistence.html\n\n Thanks for your attention, saludos a todos, Adiós!\n\nHi, opensusers. I’m new in this subjects and I 'd want to try Tumbleweed for the first time. I’ve tried Ventoy (is an open source tool to create bootable USB drive) to prove Tumbleweed with persistence. It’s create an .dat file. But, in a new session the changes are not saved. Is it possible to create a liveusb of Tumbleweed with persistence?\n\n Many distros (like Ubuntu/MX/LinuxMint …) provide feature for persistence and Tmbleweed is not in the tested list, but i’ve tried.\n\n I know that they are others tools like Rufus, Etcher, mkusb, but I think that Ventoy can work better.\n\n My pendrive is Data Traveller 128 G and i’ve followed all the instructions with Ventoy https://www.ventoy.net/en/plugin_persistence.html\n\n Thanks for your attention, saludos a todos, Adiós! I’m guessing that’s a limitation of the ISO file you likely used for your image running in Ventoy.\n\n First, I’d recommend you verify what options you have by talking to the Ventoy developers (ie submit an issue at the Ventoy github project) but I notice that Ventoy supports a number of formats… If for instance you download the Tumbleweed on VMware Appliance image and run it in ventoy, I’d guess that you’ll have a writable “live” instance.\n\nI’m guessing that’s a limitation of the ISO file you likely used for your image running in Ventoy.\n\n First, I’d recommend you verify what options you have by talking to the Ventoy developers (ie submit an issue at the Ventoy github project) but I notice that Ventoy supports a number of formats… If for instance you download the Tumbleweed on VMware Appliance image and run it in ventoy, I’d guess that you’ll have a writable “live” instance. Please stop posting this kind of nonsense. Or ask around before you post. @OP: When you use Etcher or plain linux dd to write the image to raw USB device ( NOT A PARTITION !!! ), it is persistent, i.e. expands the overlay filesystem to the size of the USB device. But … due to how these images are build you’re stuck on the kernel that comes with the live image. Of course there are ways to manually adapt your /boot partition and GRUB, but one should know what they’re doing.\n\nPlease stop posting this kind of nonsense. Or ask around before you post. @OP: When you use Etcher or plain linux dd to write the image to raw USB device ( NOT A PARTITION !!! ), it is persistent, i.e. expands the overlay filesystem to the size of the USB device. But … due to how these images are build you’re stuck on the kernel that comes with the live image. Of course there are ways to manually adapt your /boot partition and GRUB, but one should know what they’re doing. So is. I have verified that it is persistent. In other distros, the partition was limited to 3.6 Gigs, on the other hand with Leap 15.2 3 partitions are created: one for the ISO, another for the MBR and the third occupies the remaining space on the pendrive. I have changed small settings such as the language, the keyboard, I have saved a small text file or passwords in web pages and when starting a new session, the configuration is saved. I have not tried with updates, but I guess as well.\n\nWhen you first create the iso (assuming you follow the recommended method), only two partitions are created – the iso itself and a small EFI partition for UEFI booting. The third partition (hybrid partition) is created on first use of that USB – first successful boot. And yes, updating mostly works. But updating kernel or bootloader won’t work because those are used in the early stages of booting before the hybrid partition setup is configured for use.\n\nPlease stop posting this kind of nonsense. Or ask around before you post. @OP: When you use Etcher or plain linux dd to write the image to raw USB device ( NOT A PARTITION !!! ), it is persistent, i.e. expands the overlay filesystem to the size of the USB device. But … due to how these images are build you’re stuck on the kernel that comes with the live image. Of course there are ways to manually adapt your /boot partition and GRUB, but one should know what they’re doing. Hey, what I posted is entirely based on what is expected. Have you ever mounted an ISO and then tried to write to it?\n\n Ordinarily it’s mounted an an unwritable ISO-9660…\n\n And it’s the easiest supposition for a utility like ventoy which does not copy the ISO to dis, just mounts the ISO and runs it “as-is.” And, that is why I recommended deploying an appliance image which is not an ISO, it would be mounted differently and likely read/write. So, criticism accepted where warranted but not here…\n\nHey, what I posted is entirely based on what is expected. Have you ever mounted an ISO and then tried to write to it?\n\n Ordinarily it’s mounted an an unwritable ISO-9660…\n\n And it’s the easiest supposition for a utility like ventoy which does not copy the ISO to dis, just mounts the ISO and runs it “as-is.” And, that is why I recommended deploying an appliance image which is not an ISO, it would be mounted differently and likely read/write. So, criticism accepted where warranted but not here… Write a Live image to USB with Etcher or dd and check for yourself:\n• After boot the overlay fs will expand in the space left on the device\n• FWIW I use this on a 32GB external SSD, which has some basic stuff in my homedir, and allows me to sync some things from my Nextcloud. This works fine, apart from updating the kernel."
    },
    {
        "link": "https://doc.opensuse.org/documentation/leap/archive/15.4/autoyast/html/book-autoyast/cha-configuration-installation-options.html",
        "document": "This chapter introduces important parts of a control file for standard purposes. To learn about other available options, use the configuration management system.\n\nNote that for some configuration options to work, additional packages need to be installed, depending on the software selection you have configured. If you choose to install a minimal system then some packages might be missing and need to be added to the individual package selection.\n\nYaST will install packages required in the second phase of the installation and before the post-installation phase of AutoYaST has started. However, if necessary YaST modules are not available in the system, important configuration steps will be skipped. For example, no security settings will be configured if is not installed.\n\nPatterns or packages are configured like this: Package selection in the control file with patterns and packages sections # The values are real package or pattern names. If the package name has been changed because of an upgrade, you will need to adapt these settings too. It is possible to specify package and pattern names using regular expressions. In that case, AutoYaST will select all packages or patterns that match the expression. Beware that such expressions must be enclosed within slashes. In Example 4.29, “Packages selection using a regular expression”, all packages whose name starts with will be selected (e.g., and ). You can use images during installation to speed up the installation. <!-- note! this is not in the software section! --> <deploy_image> <image_installation config:type=\"boolean\">false</image_installation> </deploy_image> In addition to the packages available for installation on the DVD-ROMs, you can add external packages including customized kernels. Customized kernel packages must be compatible with the SUSE packages and must install the kernel files to the same locations. Unlike in earlier versions, you do not need a special resource in the control file to install custom and external packages. Instead you need to re-create the package database and update it with any new packages or new package versions in the source repository. A script is provided for this task which will query packages available in the repository and create the package database. Use the command . It can be found in the package in the openSUSE Build Service. When creating the database, all languages will be reset to English. The unpacked DVD is located in . In the above example, the directory contains the architecture-dependent (for example ) and architecture-independent packages ( ). This might look different on other architectures. The advantage of this method is that you can keep an up-to-date repository with a fixed and updated package. Additionally, this method makes the creation of custom CD-ROMs easier. To add your own module such as the SDK (SUSE Software Development Kit), add a file to the installation source in the root directory. The following example shows how the SDK module can be added to the base product repository. The complete SDK repository will be stored in the directory . This file describes an SDK module included in the base product. <?xml version=\"1.0\"?> <add_on_products xmlns=\"http://www.suse.com/1.0/yast2ns\" xmlns:config=\"http://www.suse.com/1.0/configns\"> <product_items config:type=\"list\"> <product_item> <name>SUSE Linux Enterprise Software Development Kit</name> <url>relurl:////sdk?alias=SLE_SDK</url> <path>/</path> <-- Users are asked whether to add such a product --> <ask_user config:type=\"boolean\">false</ask_user> <-- Defines the default state of pre-selected state in case of ask_user used. --> <selected config:type=\"boolean\">true</selected> </product_item> </product_items> </add_on_products> Besides this special case, all other modules, extensions and add-on products can be added from almost every other location during an AutoYaST installation. Even repositories that do not have any product or module information can be added during the installation. These are called . The and sections support the same values: Product URL. Can have the prefix , , , etc. This entry is mandatory. If you use a multi-product medium such as the SUSE Linux Enterprise Packages DVD, then the URL path should point to the root directory of the multi-product medium. The specific product directory is selected using the value (see below). Internal product name if the add-on is a product. The command shows the names of installed products. Repository alias name. Defined by the user. Optional subpath. This should only be used for multi-product media such as the SUSE Linux Enterprise Packages DVD. Sets the repository libzypp priority. Priority of 1 is the highest. The higher the number, the lower the priority. Default is 99. AutoYaST can ask the user to make add-on products, modules or extensions available instead of reporting a time-out error when no repository can be found at the given location. Set to (the default is ). The user needs to confirm the license. Default is . Repository name. The command shows the names of added repositories. To use unsigned installation sources with AutoYaST, turn off the checks with the following configuration in your AutoYaST control file. You can only disable signature checking during the first stage of the auto-installation process. In stage two, the installed system's configuration takes precedence over AutoYaST configuration. The elements listed below must be placed within the following XML structure: Default values for all options are . If an option is set to and a package or repository fails the respective test, it is silently ignored and will not be installed. Note that setting any of these options to is a potential security risk. Never do it when using packages or repositories from third-party sources. If set to , AutoYaST will accept unsigned files such as the content file. If set to , AutoYaST will accept files without a checksum in the content file. If set to , AutoYaST will accept signed files even when the verification of the signature failed. If set to , AutoYaST will accept new GPG keys of the installation sources, for example the key used to sign the content file. Set this option to to accept known keys you have not yet trusted. If set to , AutoYaST will accept and import new GPG keys on the installation source in its database. It is possible to configure the signature handling for each add-on product, module, or extension individually. The following elements must be between the section of the individual add-on product, module, or extension. All settings are optional. If not configured, the global signature-handling from the section is used. If set to , AutoYaST will accept unsigned files such as the content file for this add-on product. If set to , AutoYaST will accept files without a checksum in the content file for this add-on. If set to , AutoYaST will accept signed files even when the verification of the signature fails. If is set to , AutoYaST will accept new GPG keys on the installation source. This means that the key is known, but it is not trusted by you. You can trust all keys by adding: If is set to , AutoYaST will accept and import all new GPG keys on the installation source into its database. This can be done for specific keys only: Kernel packages are not part of any selection. The required kernel is determined during installation. If the kernel package is added to any selection or to the individual package selection, installation will mostly fail because of conflicts. To force the installation of a specific kernel, use the property. The following is an example of forcing the installation of the default kernel. This kernel will be installed even if an SMP or other kernel is required. Some packages are selected automatically either because of a dependency or because it is available in a selection. Removing these packages might break the system consistency, and it is not recommended to remove basic packages unless a replacement which provides the same services is provided. The best example for this case are mail transfer agent (MTA) packages. By default, will be selected and installed. To use another MTA like , then postfix can be removed from the list of selected package using a list in the software resource. However, note that sendmail is not shipped with openSUSE Leap. The following example shows how this can be done: Note that it is not possible to remove a package that is part of a pattern (see Section 4.8.1, “Package selection with patterns and packages sections”). When specifying such a package for removal, the installation will fail with the following error message: The package resolver run failed. Check your software section in the AutoYaST profile. AutoYaST enables you to control which recommended packages and patterns are installed. There are three options: Set the flag to in the configuration file to install all recommended packages and patterns. If you want a minimal installation, and to install only required packages and patterns, set the flag to . Omit the flag from the configuration file to install only recommended packages, and ignore all recommended patterns. Note that this flag only affects a fresh installation and will be ignored during an upgrade. To install packages after the reboot during stage two, you can use the element for that: You can also install patterns in stage 2. Use the element for that:\n\nBy adding scripts to the auto-installation process you can customize the installation according to your needs and take control in different stages of the installation. In the auto-installation process, five types of scripts can be executed at different points in time during the installation: All scripts need to be in the <scripts> section. Executed before YaST does any real change to the system (before partitioning and package installation but after the hardware detection). You can use a pre-script to modify your control file and let AutoYaST reread it. Find your control file in . Adjust the file and store the modified version in . AutoYaST will read the modified file after the pre-script finishes. It is also possible to modify the storage devices in your pre-scripts. For example, you can create new partitions or change the configuration of certain technologies like multipath. AutoYaST always inspects the storage devices again after executing all the pre-scripts. Pre-scripts are executed at an early stage of the installation. This means if you have requested to confirm the installation, these scripts will be executed before the confirmation screen shows up ( ). To call Zypper in the pre-script you will need to set the environment variable ZYPP_LOCKFILE_ROOT=\"/var/run/autoyast\" to prevent conflicts with the running YaST process. The elements must be placed as follows: Executed after YaST has done the partitioning and written . The empty system is already mounted to . The elements must be placed as follows: Chroot scripts are executed before the machine reboots for the first time. You can execute chroot scripts before the installation chroots into the installed system and configures the boot loader, or you can execute a script after the chroot into the installed system has happened (look at the parameter for that). The elements must be placed as follows: These scripts are executed after AutoYaST has completed the system configuration and after it has booted the system for the first time. The elements must be placed as follows: These scripts are executed when YaST has finished, during the initial boot process after the network has been initialized. These final scripts are executed using and are executed only once. Init scripts are configured using the tag init-scripts. The elements must be placed as follows: Init scripts are different from the other script types because they are not executed by YaST, but after YaST has finished. For this reason, their XML representation is different from other script types. Define a location from where the script gets fetched. Locations can be the same as for the profile (HTTP, FTP, NFS, etc.). Either <location> or <source> must be defined. The script itself (source code), encapsulated in a CDATA tag. If you do not want to put the whole shell script into the XML profile, use the location parameter. Either <location> or <source> must be defined. The file name of the script. It will be stored in a temporary directory under Optional in case you only have a single init script. The default name ( ) is used in this case. If having specified more than one init script, you must set a unique name for each script. Normally, a script is only run once, even if you use to run an XML file multiple times. Change this default behavior by setting this boolean to . Optional. Default is (scripts only run once). When added to the control file manually, scripts need to be included in a CDATA element to avoid confusion with the file syntax and other tags defined in the control file. Most of the XML elements described below can be used for all the script types described above, except for init scripts, whose definitions can contain only a subset of these elements. See Section 4.30.5, “Init scripts” for further information about them. is a deprecated element and can be removed in future releases. To adapt, use an interpreter-specific debugging parameter in . For example, instead of <interpreter>shell</interpreter> use <interpreter>/bin/sh -x</interpreter> for the same result as having enabled the flag. Define a location from where the script gets fetched. Locations can be the same as for the control file (HTTP, FTP, NFS, etc.). Additionally a relative URL can be used that defines a path relative to the directory with the control file, using the syntax . Either or must be defined. The script itself (source code), encapsulated in a CDATA tag. If you do not want to put the whole shell script into the XML control file, refer to the location parameter. Either or must be defined. Specify the interpreter that must be used for the script. Any interpreter available in the given environment can be specified. It is possible to provide a full path to the interpreter, including parameters. There are also deprecated keywords interpreter \"shell\", \"perl\" and \"python\" that are supported by the flag. The file name of the script. It will be stored in a temporary directory under . Optional; default is the type of the script (pre-scripts in this case). If you have more than one script, you should define different names for each script. If is not defined and is defined, the file name from the location path will be used. If this boolean is , output and error messages of the script (STDOUT and STDERR) will be shown in a pop-up. The user needs to confirm them via the OK button. This can be , or . Set the timeout for these pop-ups in the <report> section. Optional; if missing, an always-blocking pop-up is used. If this is , every single line of a shell script is logged. Perl scripts are run with warnings turned on. This only works for the deprecated keyword . For other languages, give the path to the interpreter as a parameter in the value, for example \"<interpreter>ruby -w</interpreter>\". This text will be shown in a pop-up for the time the script is running in the background. Optional; if not configured, no notification pop-up will be shown. It is possible to specify parameters given to the script being called. You may have more than one entry. They are concatenated by a single space character on the script command line. If any shell quoting should be necessary (for example to protect embedded spaces) you need to include this. Optional; if not configured, no parameters get passed to script. A script is only run once. Even if you use _setup to run an XML file multiple times, the script is only run once. Change this default behavior by setting this boolean to . Optional; default is , meaning that scripts only run once. During installation, the new system is mounted at . If this parameter is set to , AutoYaST does not run and does not install the boot loader at this stage. If the parameter is set to , AutoYaST performs a into and installs the boot loader. The result is that to change anything in the newly-installed system, you no longer need to use the prefix. Optional; default is . This option is only available for chroot environment scripts. After installation is finished, the scripts and the output logs can be found in the directory . The scripts are located in the subdirectory and the output logs in the directory. The log consists of the output produced when executing the scripts, containing a combination of both the standard output and the standard error output. If the script ends with a non-zero exit code, then a warning will be shown with the content of the logs, unless the option was provided.\n\nAsk the user for values during installation # You have the option to let the user decide the values of specific parts of the control file during the installation. If you use this feature, a pop-up will ask the user to enter a specific part of the control file during installation. If you want a full auto installation, but the user should set the password of the local account, you can do this via the directive in the control file. The elements listed below must be placed within the following XML structure: Ask the user for values: XML representation # The question you want to ask the user. The default value is the path to the element (the path often looks strange, so we recommend entering a question). Set a preselection for the user. A text entry will be filled out with this value. A check box will be true or false and a selection will have the given value preselected. An optional help text that is shown on the left side of the question. An optional title that is shown above the questions. The type of the element you want to change. Possible values are , , and . The file system in the partition section is a symbol, while the element in the user configuration is a boolean. You can see the type of that element if you look in your control file at the attribute. You can also use as type. A is a text that does not require any user input and can show information not included in the help text. Optional. The default is . If type is , you must provide the selection element too (see below). If this boolean is set to , a password dialog pops up instead of a simple text entry. Setting this to only makes sense if is string. A list of elements. A path is a comma separated list of elements that describes the path to the element you want to change. For example, the LDAP server element can be found in the control file in the section. So to change that value, you need to set the path to . To change the password of the first user in the control file, you need to set the path to . The indicates the first user in the <users config:type=\"list\"> list of users in the control file. would be the second one, and so on. This information is optional, but you should at least provide or . You can store the answer to a question in a file, to use it in one of your scripts later. If you ask during and you want to use the answer in stage 2, then you need to copy the answer-file in a chroot script that is running as . Use the command: . The reason is that in stage 1 is in the RAM disk and will be lost after the reboot, but the installed system is already mounted at . This information is optional, but you should at least provide or . Stage configures the installation stage in which the question pops up. You can set this value to or . means the pop-up comes up very early in the installation, shortly after the pre-script has run. means, that the dialog with the question comes after the first reboot when the system boots for the very first time. Questions you answer during the stage will write their answer into the control file on the hard disk. You should know that if you enter clear text passwords during . Of course it does not make sense to ask for the file system to use during the phase. The hard disk is already partitioned at that stage and the question will have no effect. The selection element contains a list of elements. Each entry represents a possible option for the user to choose. The user cannot enter a value in a text box, but they can choose from a list of values. <selection config:type=\"list\"> <entry> <value> btrfs </value> <label> Btrfs File System </label> </entry> <entry> <value> ext3 </value> <label> Extended3 File System </label> </entry> </selection> Optional for , not possible for and mandatory for . You can ask more than one question per dialog. To do so, specify the dialog-id with an integer. All questions with the same dialog-id belong to the same dialog. The dialogs are sorted by the id too. You can have more than one question per dialog. To make that possible you need to specify the with an integer. The questions in a dialog are sorted by ID. You can increase the default width of the dialog. If there are multiple width specifications per dialog, the largest one is used. The number is roughly equivalent to the number of characters. You can increase the default height of the dialog. If there are multiple height specifications per dialog, the largest one is used. The number is roughly equivalent to the number of lines. You can have more than one question per dialog. Each question on a dialog has a frame that can have a frame title, a small caption for each question. You can put multiple elements into one frame. They need to have the same frame title. You can run scripts after a question has been answered. (See Section 4.33.1, “Default value scripts” for detailed instructions about scripts.) You can change the label on the Ok button. The last element that specifies the label for a dialog wins. You can change the label on the Back button. The last element that specifies the label for a dialog wins. You can specify an integer here that is used as timeout in seconds. If the user does not answer the question before the timeout, the default value is taken as answer. When the user touches or changes any widget in the dialog, the timeout is turned off and the dialog needs to be confirmed via Ok. Optional; a missing value is interpreted as , which means that there is no timeout. You can run scripts to set the default value for a question (see Section 4.33.1, “Default value scripts” for detailed instructions about default value scripts). This feature is useful if you can a default value, especially in combination with the option. You can run scripts to set the default value for a question. This feature is useful if you can a default value, especially in combination with the option. The scripts are defined by placing the elements described in Section 4.30.6, “Script XML representation” within the following XML structure: Whatever you to STDOUT will be used as default value for the ask-dialog. If your script has an exit code other than 0, the normal element is used. Take care you use to suppress the and that you echo reasonable values and not “okay” for a boolean (use “true” instead). You can run scripts after a question has been answered. The elements listed below must be placed within the following XML structure: In addition to the elements listed in Section 4.30.6, “Script XML representation”, scripts in elements support these options: The file name of the script. A boolean that passes the value of the answer to the question as an environment variable to the script. The variable is named . A boolean that turns on feedback for the script execution. STDOUT will be displayed in a pop-up window that must be confirmed after the script execution. Keep the dialog open until the script has an exit code of 0 (zero). You can use this feature to validate the user's input. The script should print a meaningful error message and return a code different from zero. Bear in mind that you should also set the option to so the user can read the error message from the script. Optional, default is . Your script can create a file containing the ID of the following dialog to display. A value of -1 terminates the sequence. Below you can see an example of the usage of the feature. <general> <ask-list config:type=\"list\"> <ask> <pathlist config:type=\"list\"> <path>ldap,ldap_server</path> </pathlist> <stage>cont</stage> <help>Choose your server depending on your department</help> <selection config:type=\"list\"> <entry> <value>ldap1.mydom.de</value> <label>LDAP for development</label> </entry> <entry> <value>ldap2.mydom.de</value> <label>LDAP for sales</label> </entry> </selection> <default>ldap2.mydom.de</default> <default_value_script> <source> <![CDATA[ echo -n \"ldap1.mydom.de\" ]]> </source> </default_value_script> </ask> <ask> <pathlist config:type=\"list\"> <path>networking,dns,hostname</path> </pathlist> <question>Enter Hostname</question> <stage>initial</stage> <default>enter your hostname here</default> </ask> <ask> <pathlist config:type=\"list\"> <path>partitioning,0,partitions,0,filesystem</path> </pathlist> <question>File System</question> <type>symbol</type> <selection config:type=\"list\"> <entry> <value config:type=\"symbol\">ext4</value> <label>default File System (recommended)</label> </entry> <entry> <value config:type=\"symbol\">ext3</value> <label>Fallback File System</label> </entry> </selection> </ask> </ask-list> </general> The following example shows a to choose between AutoYaST control files. AutoYaST will read the file again after the ask-dialogs are done. This way you can fetch a complete new control file. You can verify the answer of a question with a script like this: <general> <ask-list config:type=\"list\"> <ask> <script> <filename>my.sh</filename> <rerun_on_error config:type=\"boolean\">true</rerun_on_error> <environment config:type=\"boolean\">true</environment> <source><![CDATA[ if [ \"$VAL\" = \"myhost\" ]; then echo \"Illegal Hostname!\"; exit 1; fi exit 0 ]]> </source> <debug config:type=\"boolean\">false</debug> <feedback config:type=\"boolean\">true</feedback> </script> <dialog config:type=\"integer\">0</dialog> <element config:type=\"integer\">0</element> <pathlist config:type=\"list\"> <path>networking,dns,hostname</path> </pathlist> <question>Enter Hostname</question> <default>enter your hostname here</default> </ask> </ask-list> </general>\n\nThis feature is available only on the S/390 architecture. With Kdump the system can create crash dump files if the whole kernel crashes. Crash dump files contain the memory contents while the system crashed. Such core files can be analyzed later by support or a (kernel) developer to find the reason for the system crash. Kdump is mostly useful for servers where you cannot easily reproduce such crashes but it is important to get the problem fixed. There is a downside to this. Enabling Kdump requires between 64 MB and 128 MB of additional system RAM reserved for Kdump in case the system crashes and the dump needs to be generated. This section only describes how to set up Kdump with AutoYaST. It does not describe how Kdump works. For details, refer to the kdump(7) manual page. The following example shows a general Kdump configuration. Kdump is enabled by default. The following configuration shows how to disable it. The first step is to reserve memory for Kdump at boot-up. Because the memory must be reserved very early during the boot process, the configuration is done via a kernel command line parameter called . The reserved memory will be used to load a second kernel which will be executed without rebooting if the first kernel crashes. This second kernel has a special initrd, which contains all programs necessary to save the dump over the network or to disk, send a notification e-mail, and finally reboot. To reserve memory for Kdump, specify the (such as to reserve 64 MB of memory from the RAM) and the . The syntax is . The kernel can auto-detect the right offset (except for the Xen hypervisor, where you need to specify as offset). The amount of memory that needs to be reserved depends on architecture and main memory. You can also use the extended command line syntax to specify the amount of reserved memory depending on the System RAM. That is useful if you share one AutoYaST control file for multiple installations or if you often remove or install memory on one machine. The syntax is: is the start of the first memory range (for example: ) and is the end of the first memory range (can be empty in case should be assumed) and so on. For example, reserves 64 MB of crashkernel memory if the system has between 256 MB and 2 GB RAM, and reserves 128 MB of crashkernel memory if the system has more than 2 GB RAM. On the other hand, it is possible to specify multiple values for the parameter. For example, when you need to reserve different segments of low and high memory, use values like and : The following list shows the settings necessary to reserve memory: Set to if memory should be reserved and Kdump enabled. Use the syntax of the crashkernel command line as discussed above. A list of values is also supported. This section describes where and how crash dumps will be stored. The element specifies the URL to where the dump is saved. The following methods are possible:\n• None to save to the local disk,\n• None to save to an FTP server (without encryption),\n• None to save to an SSH2 SFTP server,\n• None to save to an NFS location and\n• None to save the dump to a CIFS/SMP export from Samba or Microsoft Windows. For details see the kdump(5) manual page. Two examples are: (which is the default location according to FHS) and . A subdirectory, with the time stamp contained in the name, will be created and the dumps saved there. When the dump is saved to the local disk, can be used to delete old dumps automatically. Set it to the number of old dumps that should be kept. If the target partition would end up with less free disk space than specified in , the dump is not saved. To save the whole kernel and the debug information (if installed) to the same directory, set to . You will have everything you need to analyze the dump in one directory (except kernel modules and their debugging information). The kernel dump is uncompressed and unfiltered. It can get as large as your system RAM. To get smaller files, compress the dump file afterward. The dump needs to be decompressed before opening. To use page compression, which compresses every page and allows dynamic decompression with the crash(8) debugging tool, set to (default). You may not want to save all memory pages, for example those filled with zeroes. To filter the dump, set the . 0 produces a full dump and 31 is the smallest dump. The manual pages kdump(5) and makedumpfile(8) list for each value which pages will be saved. A URL that specifies the target to which the dump and related files will be saved. Set to , if not only the dump should be saved to but also the kernel and its debugging information (if installed). Disk space in megabytes that must remain free after saving the dump. If not enough space is available, the dump will not be saved. The number of dumps that are kept (not deleted) if points to a local directory. Specify 0 if you do not want any dumps to be automatically deleted, specify -1 if all dumps except the current one should be deleted. Configure e-mail notification to be informed when a machine crashes and a dump is saved. Because Kdump runs in the initrd, a local mail server cannot send the notification e-mail. An SMTP server needs to be specified (see below). You need to provide exactly one address in . More addresses can be specified in . Only use e-mail addresses in both cases, not a real name. Specify and (if the server needs authentication) and . Support for TLS/SSL is not available but may be added in the future. Exactly one e-mail address to which the e-mail should be sent. Additional recipients can be specified in . Zero, one or more recipients that are in the cc line of the notification e-mail. Host name of the SMTP server used for mail delivery. SMTP authentication is supported (see and ) but TLS/SSL are not. User name used together with for SMTP authentication. Password used together with for SMTP authentication. As already mentioned, a special kernel is booted to save the dump. If you do not want to use the auto-detection mechanism to find out which kernel is used (see the kdump(5) manual page that describes the algorithm which is used to find the kernel), you can specify the version of a custom kernel in . If you set it to , then the kernel located in or (in that order on platforms that have a file) will be used. You can specify the command line used to boot the Kdump kernel. Normally the boot command line is used, minus settings that are not relevant for Kdump (like the parameter) plus some settings needed by Kdump (see the manual page kdump(5)). To specify additional parameters, use . If you know what you are doing and you want to specify the entire command line, set . Version string for the kernel used for Kdump. Leave it empty to use the auto-detection mechanism (strongly recommended). Overwrite the automatically generated Kdump command line. Use with care. Usually, should suffice. if the system should be rebooted automatically after the dump has been saved, otherwise. The default is to reboot the system automatically. Bitmask that specifies how verbose the Kdump process should be. Read kdump(5) for details. Additional options that are passed to kexec when loading the Kdump kernel. Normally empty."
    },
    {
        "link": "https://reddit.com/r/openSUSE/comments/hd2x6s/how_to_run_opensuse_live_from_a_usb",
        "document": "I know this sounds like a ridiculously simple question but it really has me stumped. I’ve created and run a number of distros on a live usb (install as bootable ISO, choose the correct drive when booting, and it starts up). I’ve done this with MX Linux, Manjaro, PCLOS, Solus, and more without any difficulty (at least not in running the live USB).\n\nHowever, when I’ve tried this with OpenSUSE, I don’t get any obvious choices for booting into the live environment. I’ve tried the Leap, Tumbleweed, and the Live option (though this concerns be a bit as it’s a small file, relatively speaking and it clearly says in the download area that it doesn’t have all the drivers/programs of the larger ISOs).\n\nIs it just not possible to run OpenSUSE this way? I’ve also tried installing in on VirtualBox on my Linux Mint install (for which I’m looking for a permanent replacement, hence these trials). But this hasn’t worked well either. Only about one in every 8-10 tries will it actually boot into the OS, the other times it will only give the grub options (which I choose to run the OS) the I see Tumbleweed & logo come up then I get an empty black screen where it should be the OS. I don’t know why sometimes it does work. On those attempts, nothing is done differently. Any info would be brilliant. I’m really wanting to try it before committing. :)\n\nThanks so much in advance!"
    },
    {
        "link": "https://documentation.suse.com/sles/12-SP5/html/SLES-all/cha-inst.html",
        "document": "To get technical support and product updates, you need to register and activate your product with the SUSE Customer Center. Registering SUSE Linux Enterprise Server now grants you immediate access to the update repository. This enables you to install the system with the latest updates and patches available. If you are offline or want to skip this step, select Skip Registration. You can register your system at any time later from the installed system. After booting into the installation, the installation routine is set up. During this setup, an attempt to configure all network interfaces with DHCP is made. If DHCP is not available or you want to modify the network configuration, click Network Configuration in the upper right corner of the SUSE Customer Center Registration screen. The YaST module Network Settings opens. See Section 17.4, “Configuring a Network Connection with YaST” for details. To register your system, provide the E-mail address associated with the SUSE account you or your organization uses to manage subscriptions. In case you do not have a SUSE account yet, go to the SUSE Customer Center home page (https://scc.suse.com/) to create one. Enter the Registration Code you received with your copy of SUSE Linux Enterprise Server. YaST can also read registration codes from a USB storage device such as a flash disk. For details, see Section 6.8.1, “Loading Registration Codes from USB Storage”. Proceed with Next to start the registration process. If one or more local registration servers are available on your network, you can choose one of them from a list. By default, SUSE Linux Enterprise Server is registered at the SUSE Customer Center. If your local registration server was not discovered automatically, choose Cancel, select Register System via local SMT Server and enter the URL of the server. Restart the registration by choosing Next again. During the registration, the online update repositories will be added to your installation setup. When finished, you can choose whether to install the latest available package versions from the update repositories. This ensures that SUSE Linux Enterprise Server is installed with the latest security updates available. If you choose No, all packages will be installed from the installation media. Proceed with Next. If the system was successfully registered during installation, YaST will disable repositories from local installation media such as CD/DVD or flash disks when the installation has been completed. This prevents problems if the installation source is no longer available and ensures that you always get the latest updates from the online repositories. From this point on, the Release Notes can be viewed from any screen during the installation process by selecting Release Notes. To make the registration more convenient, you can also store your registration codes on a USB storage device such as a flash disk. YaST will automatically pre-fill the corresponding text box. This is particularly useful when testing the installation or if you need to register many systems or extensions. Currently flash disks are only scanned during installation or upgrade, but not when registering a running system. Create a file named or on the USB disk. If both are present, the XML takes precedence. In that file, identify the product with the name returned by and assign it a registration code as follows: Note that and are not extensions, but listing them as add-ons allows for combining several base product registration codes in a single file. See Section 4.3.1, “Extensions” for details.\n\nIf you have successfully registered your system in the previous step, a list of available modules and extensions based on SUSE Linux Enterprise Server is shown. Otherwise this configuration step is skipped. It is also possible to add modules and extensions from the installed system, see Chapter 15, Installing Modules, Extensions, and Third Party Add-On Products for details. The list contains free modules for SUSE Linux Enterprise Server, such as the SUSE Linux Enterprise SDK and extensions requiring a registration key that is liable for costs. Click an entry to see its description. Select a module or extension for installation by activating its check mark. This will add its repository from the SUSE Customer Center server to your installation—no additional installation sources are required. Furthermore the installation pattern for the module or extension is added to the default installation to ensure it gets installed automatically. The amount of available extensions and modules depends on the registration server. A local registration server may only offer update repositories and no additional extensions. Modules are fully supported parts of SUSE Linux Enterprise Server with a different life cycle. They have a clearly defined scope and are delivered via online channel only. Registering at the SUSE Customer Center is a prerequisite for being able to subscribe to these channels. As of SUSE Linux Enterprise 12, SUSE Linux Enterprise Desktop is not only available as a separate product, but also as a workstation extension for SUSE Linux Enterprise Server. If you register at the SUSE Customer Center, the can be selected for installation. Note that installing it requires a valid registration key. Proceed with Next to the Add-on Product dialog, where you can specify sources for additional add-on products not available on the registration server. If you do not want to install add-ons, proceed with Next. Otherwise activate I would like to install an additional Add-on Product. Specify the Media Type by choosing from CD, DVD, Hard Disk, USB Mass Storage, a Local Directory or a Local ISO Image. If network access has been configured you can choose from additional remote sources such as HTTP, SLP, FTP, etc. Alternatively you may directly specify a URL. Check Download Repository Description Files to download the files describing the repository now. If deactivated, they will be downloaded after the installation starts. Proceed with Next and insert a CD or DVD if required. Depending on the add-on's content, it may be necessary to accept additional license agreements. If you have chosen an add-on product requiring a registration key, you will be asked to enter it at the Extension and Module Registration Codes page. Proceed with Next. If you have chosen a product in the Extension Selection dialog for which you do not have a valid registration key, choose Back until you see the Extension Selection dialog. Deselect the module or extension and proceed with Next. Modules or extensions can also be installed at any time later from the running system as described in Chapter 15, Installing Modules, Extensions, and Third Party Add-On Products.\n\nDefine a partition setup for SUSE Linux Enterprise Server in this step. Depending on the system role, the installer creates a proposal for one of the disks available. All proposals contain a root partition formatted with Btrfs (with snapshots enabled) and a swap partition. If you have chosen the system role Default System in the previous step, a home partition formatted with XFS will be created, too. On hard disks smaller than 20 GB the proposal does not include a separate home partition. If one or more swap partitions have been detected on the available hard disks, these existing ones will be used (rather than proposing a new swap partition). You have several options to proceed: To accept the proposal without any changes, click Next to proceed with the installation workflow. To adjust the proposal choose Edit Proposal Settings. The pop-up dialog lets you switch to an LVM-based Proposal or an Encrypted LVM-based Proposal. You may also adjust file systems for the proposed partitions, create a separate home partition, and enlarge the swap partition (to enable suspend to disk, for example). If the root file system format is Btrfs, you can also disable Btrfs snapshots here. Use this option to move the proposal described above to a different disk. Select a specific disk from the list. If the chosen hard disk does not contain any partitions yet, the whole hard disk will be used for the proposal. Otherwise, you can choose which existing partition(s) to use. Edit Proposal Settings lets you fine-tune the proposal. To create a custom partition setup choose Expert Partitioner. The Expert Partitioner opens, displaying the current partition setup for all hard disks, including the proposal suggested by the installer. You can Add, Edit, Resize, or Delete partitions. You can also set up Logical Volumes (LVM), configure software RAID and device mapping (DM), encrypt Partitions, mount NFS shares and manage tmpfs volumes with the Expert Partitioner. To fine-tune settings such as the subvolume and snapshot handling for each Btrfs partition, choose Btrfs. For more information about custom partitioning and configuring advanced features, refer to Section 13.1, “Using the YaST Partitioner”. Note that for partitioning purposes, disk space is measured in binary units, rather than in decimal units. For example, if you enter sizes of , or , they all signify 1 GiB (Gibibyte), as opposed to 1 GB (Gigabyte). A UEFI machine requires an EFI system partition that must be mounted to . This partition must be formatted with the file system. If an EFI system partition is already present on your system (for example from a previous Windows installation) use it by mounting it to without formatting it. By default, SUSE Linux Enterprise Server is set up to support snapshots which provide the ability to do rollbacks of system changes. SUSE Linux Enterprise Server uses Snapper with Btrfs for this feature. Refer to Chapter 7, System Recovery and Snapshot Management with Snapper for details. Being able to create system snapshots that enable rollbacks requires most of the system directories to be mounted on a single partition. Refer to Section 7.1, “Default Setup” for more information. This also includes and . Only directories that are excluded from snapshots (see Section 7.1.2, “Directories That Are Excluded from Snapshots” for a list) may reside on separate partitions. Among others, this list includes , , and . If you do not plan to use Snapper for system rollbacks, the partitioning restrictions mentioned above do not apply. The default partitioning setup suggests the root partition as Btrfs with being a directory. To encrypt the root partition, make sure to use the GPT partition table type instead of the default MSDOS type. Otherwise the GRUB2 boot loader may not have enough space for the second stage loader. If SUSE Linux Enterprise Server is installed on minidisks in z/VM, which reside on the same physical disk, the access path of the minidisks (/dev/disk/by-id/) is not unique, because it represents the ID of the physical disk. So if two or more minidisks are on the same physical disk, they all have the same ID. To avoid problems when mounting minidisks, always mount them either by path or by UUID. If you configure the system with a root file system on LVM or a software RAID array, you must place on a separate, non-LVM or non-RAID partition, otherwise the system will fail to boot. The recommended size for such a partition is 500 MB and the recommended file system is Ext4. Installing to and booting from existing software RAID volumes is supported for Disk Data Format (DDF) volumes and Intel Matrix Storage Manager (IMSM) volumes. IMSM is also known by the following names: FCoE and iSCSI devices will appear asynchronously during the boot process. While the initrd guarantees that those devices are set up correctly for the root file system, there are no such guarantees for any other file systems or mount points like . Hence any system mount points like or are not supported. To use those devices, ensure correct synchronization of the respective services and devices. In case the disk selected for the suggested partitioning proposal contains a large Windows FAT or NTFS partition, it will automatically be resized to make room for the SUSE Linux Enterprise Server installation. To avoid data loss it is strongly recommended to\n• None make sure the partition is not fragmented (run a defragmentation program from Windows prior to the SUSE Linux Enterprise Server installation)\n• None double-check the suggested size for the Windows partition is big enough\n• None back up your data prior to the SUSE Linux Enterprise Server installation To adjust the proposed size of the Windows partition, use the Expert Partitioner. The default partitioning setup on IBM POWER suggests to create a special PReP partition (type 41). When the system boots, the firmware looks for a PReP partition in order to load the OS bootloader. Some IBM POWER machines may have booting trouble if the PReP partition is not the first partition on the disk (e.g., /dev/sda1) and if the partition is not placed at the beginning of the disk. An already existing PReP partition is re-used by YaST when making the partitioning proposal. If a PReP partition does no exist yet, then YaST will propose to create a new one as the first partition on the disk. In case the PReP partition reused for the suggested partitioning is not the first partition placed at beginning of the disk, the partitioning setup will require to be manually adapted. Follow these steps in order to ensure the PReP partition is correctly created:\n• None Delete all partitions from the disk you want to use for the installation.\n• None Add a new partition to the disk. When entering the partition size, make sure the Start Cylinder field is prefilled with a . That indicates the partition is going to be created at the beginning of the disk. In Custom Size enter . It will complain because the partition is too small, but simply accept the minimum size it proposes. Note that the partition will be automatically resized later. In the next dialog, select PReP in the partition type selector.\n• None Add other partitions (e.g., for root and swap), and proceed with the installation.\n\nCreate a local user in this step. After entering the first name and last name, either accept the proposal or specify a new User name that will be used to log in. Only use lowercase letters (a-z), digits (0-9) and the characters (dot), (hyphen) and (underscore). Special characters, umlauts and accented characters are not allowed. Finally, enter a password for the user. Re-enter it for confirmation (to ensure that you did not type something else by mistake). To provide effective security, a password should be at least six characters long and consist of uppercase and lowercase letters, number and special characters (7-bit ASCII). Umlauts or accented characters are not allowed. Passwords you enter are checked for weakness. When entering a password that is easy to guess (such as a dictionary word or a name) you will see a warning. It is a good security practice to use strong passwords. Remember both your user name and the password because they are needed each time you log in to the system. If you install SUSE Linux Enterprise Server on a machine with one or more existing Linux installations, YaST allows you to import user data such as user names and passwords. Select Import User Data from a Previous Installation and then Choose Users for import. If you do not want to configure any local users (for example when setting up a client on a network with centralized user authentication), skip this step by choosing Next and confirming the warning. Network user authentication can be configured at any time later in the installed system; refer to Chapter 17, Managing Users with YaST for instructions. Two additional options are available: Use this Password for System Administrator If checked, the same password you have entered for the user will be used for the system administrator . This option is suitable for stand-alone workstations or machines in a home network that are administrated by a single user. When not checked, you are prompted for a system administrator password in the next step of the installation workflow (see Section 6.14, “Password for the System Administrator ”). This option automatically logs the current user in to the system when it starts. This is mainly useful if the computer is operated by only one user. For automatic login to work, the option must be explicitly enabled. Click Change in the Create User dialog to import users from a previous installation (if present). Also change the password encryption type in this dialog. The default authentication method is Local (/etc/passwd). If a former version of SUSE Linux Enterprise Server or another system using is detected, you may import local users. To do so, check Read User Data from a Previous Installation and click Choose. In the next dialog, select the users to import and finish with OK. By default the passwords are encrypted with the SHA-512 hash function. Changing this method is not recommended unless needed for compatibility reasons.\n\nAfter configuring all installation settings, click Install in the Installation Settings window to start the installation. Some software may require a license confirmation. If your software selection includes such software, license confirmation dialogs are displayed. Click Accept to install the software package. When not agreeing to the license, click I Disagree and the software package will not be installed. In the dialog that follows, confirm with Install again. The installation usually takes between 15 and 30 minutes, depending on the system performance and the selected software scope. After having prepared the hard disk and having saved and restored the user settings, the software installation starts. During this procedure a slide show introduces the features of SUSE Linux Enterprise Server. Choose Details to switch to the installation log or Release Notes to read important up-to-date information that was not available when the manuals were printed. After the software installation has completed, the system reboots into the new installation where you can log in. To customize the system configuration or to install additional software packages, start YaST. Starting with SUSE Linux Enterprise Server 12 the system installation and basic configuration including the network setup is done in a single stage. After having rebooted into the installed system, you can log in and start using the system. To fine-tune the setup, to configure services or to install additional software, start YaST. YaST usually reboots into the installed system on the IBM IBM Z platform. Exceptions are installations where the boot loader resides on an FCP device in environments with LPAR on a machine older than z196 or with z/VM older than release 5.4. The boot loader gets written to a separate partition mounted as . In cases where an automatic reboot is not possible, YaST will show a dialog containing information about from which device to do an IPL. Accept the shutdown option and perform an IPL after the shutdown. The procedure varies according to the type of installation: In the IBM IBM Z HMC, select Load, select Clear, then enter the loading address (the address of the device containing the directory with the boot loader). If using a zFCP disk as the boot device, choose Load from SCSI and specify the load address of your FCP adapter plus WWPN and LUN of the boot device. Now start the loading process. Log in to the VM guest (see Example 4.1, “Configuration of a z/VM Directory” for the configuration) as and proceed to IPL the installed system: is an example address of the DASD boot device, replace this value with the correct address. If using a zFCP disk as the boot device, specify both the zFCP WWPN and LUN of the boot device before initiating the IPL. The parameter length is limited to eight characters. Longer numbers must be separated by spaces: is an example address of the zFCP adapter, replace this value with the correct address. After the installation has finished, the virtual machine is shut down. At this point, log in to the KVM host, edit the virtual machine's description file and restart it to IPL into the installed system:\n• None and remove the following lines:\n• None Restart the VM Guest to IPL into the installed system: The kernel parameter prevents the kernel from looking at all the available hardware devices. However, for KVM guests, the hypervisor already takes care to only provide access to the correct devices. Therefore is disabled by default when installing a KVM guest (for z/VM and LPAR installations it is activated by default). After IPLing the system, establish a connection via VNC, SSH, or X to log in to the installed system. Using either VNC or SSH is recommended. To customize the system configuration or to install additional software packages, start YaST. A message in the 3270 terminal asks you to connect to the Linux system using a VNC client. However, this message is easily missed, because it is mixed with kernel messages and the terminal process might quit before you notice the message. If nothing happens for five minutes, try to initiate a connection to the Linux system using a VNC viewer. A message in the 3270 terminal asks you to connect to the Linux system with an SSH client. This message is easily missed, however, because it is mixed with kernel messages and the terminal process might quit before you become aware of the message. When the message appears, use SSH to log in to the Linux system as . If the connection is denied or times out, wait for the login timeout to expire, then try again (this time depends on server settings). When IPLing the installed system, make sure that the X server used for the first phase of the installation is up and still available before booting from the DASD. YaST opens on this X server to finish the installation. Complications may arise if the system is booted up but unable to connect to the X server in a timely fashion."
    }
]