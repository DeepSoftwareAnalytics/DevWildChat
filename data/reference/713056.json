[
    {
        "link": "https://learn.microsoft.com/en-us/sql/connect/python/pyodbc/step-3-proof-of-concept-connecting-to-sql-using-pyodbc?view=sql-server-ver16",
        "document": "Step 3: Proof of concept connecting to SQL using pyodbc\n\nThis sample proof of concept uses to connect to a SQL database. This sample assumes that you're using the AdventureWorksLT sample database.\n\nThis example should be considered a proof of concept only. The sample code is simplified for clarity, and does not necessarily represent best practices recommended by Microsoft.\n• Python 3\n• If you don't already have Python, install the Python runtime and Python Package Index (PyPI) package manager from python.org.\n• Prefer to not use your own environment? Open as a devcontainer using GitHub Codespaces.\n\nConnect to a database using your credentials.\n• None Use the function to connect to a SQL database.\n\nUse a SQL query string to execute a query and parse the results.\n• SQL_QUERY = \"\"\" SELECT TOP 5 c.CustomerID, c.CompanyName, COUNT(soh.SalesOrderID) AS OrderCount FROM SalesLT.Customer AS c LEFT OUTER JOIN SalesLT.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID GROUP BY c.CustomerID, c.CompanyName ORDER BY OrderCount DESC; \"\"\"\n• None Use to retrieve a result set from a query against the database. This function essentially accepts any query and returns a result set, which can be iterated over with the use of cursor.fetchone().\n• None Use with a loop to get all the records from the database. Then print the records.\n\nIn this example, you execute an statement safely and pass parameters. Passing parameters as values protects your application from SQL injection attacks.\n• Generating a random product number here ensures that you can run this sample multiple times.\n• None Fetch the first column of the single result using , print the result's unique identifier, and then commit the operation as a transaction using . Optionally, you can use to rollback the transaction.\n• None Close the cursor and connection using and .\n• None Save the app.py file and test the application again"
    },
    {
        "link": "https://learn.microsoft.com/en-us/sql/connect/python/pyodbc/python-sql-driver-pyodbc?view=sql-server-ver16",
        "document": "Use the driver to connect to a SQL database from Python code. This series of articles provides step-by-step guidance for installing and using this Python SQL driver.\n• Step 3: Proof of concept connecting to SQL using pyodbc\n\nPyODBC is community-supported software. Microsoft contributes to the pyODBC open-source community and is an active participant in the repository at https://github.com/mkleehammer/pyodbc/. However, this software doesn't come with Microsoft support.\n\nTo get help, file an issue in the pyODBC GitHub repository or visit other Python community resources."
    },
    {
        "link": "https://docs.devart.com/odbc/sqlserver/python.htm",
        "document": "One of the most convenient methods to connect to an external database or access cloud data from Python is via ODBC. Devart has developed a range of ODBC Drivers for Python to work with databases and cloud services.\n\nIf you don't have Python installed on your machine, go to the Python official website, download the appropriate installer and run it. You will also need to install the pyodbc module — the easiest way to do that is by using the pip install pyodbc command in the Python interactive mode. Next, you need to download the ODBC Driver for SQL Server. To use the ODBC driver as a translation layer between the application and the database, you need to configure it by following the installation instructions.\n\nConnecting to SQL Server from Python using ODBC Driver for SQL Server\n\nHere’s an example to show you how to connect to SQL Server via Devart ODBC Driver in Python. First we import the pyodbc module, then create a connection to the database, insert a new row and read the contents of the EMP table while printing each row to the Python interactive console. To execute the script, you can type the code directly in the interactive console or add the code to a file with the .py extension and run the file from the command prompt.\n\nHere's a simple example of how to execute an insert statement to test the connection to the database. The script inserts a new record to the EMP table.\n\nThe cursor.execute() function retrieves rows from the select query on a dataset. The cursor.fetchone() function iterates over the result set returned by cursor.execute() while the print() function prints out all records from the table to the console."
    },
    {
        "link": "https://stackoverflow.com/questions/15750711/connecting-to-sql-server-2012-using-sqlalchemy-and-pyodbc",
        "document": "I'm trying to connect to a SQL Server 2012 database using SQLAlchemy (with pyodbc) on Python 3.3 (Windows 7-64-bit). I am able to connect using straight pyodbc but have been unsuccessful at connecting using SQLAlchemy. I have dsn file setup for the database access.\n\nI successfully connect using straight pyodbc like this:\n\nFor sqlalchemy I have tried:\n\nThe method doesn't actually set up the connection and succeeds, but iIf I try something that causes sqlalchemy to actually setup the connection (like ), it takes a while but then returns this error:\n\nDBAPIError: (Error) ('08001', '[08001] [Microsoft][ODBC SQL Server Driver][DBNETLIB]SQL Server does not exist or access denied. (17) (SQLDriverConnect)') None None\n\nI'm not sure where thing are going wrong are how to see what connection string is actually being passed to pyodbc by sqlalchemy. I have successfully using the same sqlalchemy classes with SQLite and MySQL."
    },
    {
        "link": "https://stackoverflow.com/questions/16515420/connecting-to-ms-sql-server-with-windows-authentication-using-python",
        "document": "How do I connect MS SQL Server using Windows Authentication, with the pyodbc library?\n\nI can connect via MS Access and SQL Server Management Studio, but cannot get a working connection ODBC string for Python.\n\nHere's what I've tried (also without ):"
    },
    {
        "link": "https://stackoverflow.com/questions/20199569/pyodbc-insert-into-sql",
        "document": "I use a MS SQL express db. I can connect and fetch data. But inserting data does not work:\n\nI get no error but nothing is inserted into the table. Directly after I fetch the data the inserted row is fetched. But nothing is saved.\n\nIn MS SQL Server Management Studio the insertion does work."
    },
    {
        "link": "https://learn.microsoft.com/en-us/sql/connect/python/pyodbc/step-3-proof-of-concept-connecting-to-sql-using-pyodbc?view=sql-server-ver16",
        "document": "Step 3: Proof of concept connecting to SQL using pyodbc\n\nThis sample proof of concept uses to connect to a SQL database. This sample assumes that you're using the AdventureWorksLT sample database.\n\nThis example should be considered a proof of concept only. The sample code is simplified for clarity, and does not necessarily represent best practices recommended by Microsoft.\n• Python 3\n• If you don't already have Python, install the Python runtime and Python Package Index (PyPI) package manager from python.org.\n• Prefer to not use your own environment? Open as a devcontainer using GitHub Codespaces.\n\nConnect to a database using your credentials.\n• None Use the function to connect to a SQL database.\n\nUse a SQL query string to execute a query and parse the results.\n• SQL_QUERY = \"\"\" SELECT TOP 5 c.CustomerID, c.CompanyName, COUNT(soh.SalesOrderID) AS OrderCount FROM SalesLT.Customer AS c LEFT OUTER JOIN SalesLT.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID GROUP BY c.CustomerID, c.CompanyName ORDER BY OrderCount DESC; \"\"\"\n• None Use to retrieve a result set from a query against the database. This function essentially accepts any query and returns a result set, which can be iterated over with the use of cursor.fetchone().\n• None Use with a loop to get all the records from the database. Then print the records.\n\nIn this example, you execute an statement safely and pass parameters. Passing parameters as values protects your application from SQL injection attacks.\n• Generating a random product number here ensures that you can run this sample multiple times.\n• None Fetch the first column of the single result using , print the result's unique identifier, and then commit the operation as a transaction using . Optionally, you can use to rollback the transaction.\n• None Close the cursor and connection using and .\n• None Save the app.py file and test the application again"
    },
    {
        "link": "https://stackoverflow.com/questions/49727383/how-to-insert-variable-into-database-with-pyodbc",
        "document": "You want to bind the parameter using the placeholder:\n\nIf you wanted to insert multiple values, here's a longer form:\n\nYour order of was out of place as well. Good luck!"
    },
    {
        "link": "https://learn.microsoft.com/en-us/sql/machine-learning/data-exploration/python-dataframe-sql-server?view=sql-server-ver16",
        "document": "This article describes how to insert a pandas dataframe into a SQL database using the pyodbc package in Python.\n• None Azure Data Studio. To install, see Download and install Azure Data Studio.\n• None Follow the steps in AdventureWorks sample databases to restore the OLTP version of the AdventureWorks sample database for your version of SQL Server. You can verify that the database was restored correctly by querying the HumanResources.Department table:\n• None In Azure Data Studio, open a new notebook and connect to the Python 3 kernel.\n• None In the Manage Packages pane, select the Add new tab.\n• None For each of the following packages, enter the package name, click Search, then click Install.\n\nCopy the following text and save it to a file named .\n• None Follow the steps in Connect to a SQL Server to connect to the AdventureWorks database.\n• None Create a table named HumanResources.DepartmentTest. The SQL table will be used for the dataframe insertion. CREATE TABLE [HumanResources].[DepartmentTest]( [DepartmentID] [smallint] NOT NULL, [Name] [dbo].[Name] NOT NULL, [GroupName] [dbo].[Name] NOT NULL ) GO\n\nUse the Python package to create a dataframe, load the CSV file, and then load the dataframe into the new SQL table, HumanResources.DepartmentTest.\n• None Paste the following code into a code cell, updating the code with the correct values for , , , , and the location of the CSV file. import pyodbc import pandas as pd # insert data from csv file into dataframe. # working directory for csv file: type \"pwd\" in Azure Data Studio or Linux # working directory in Windows c:\\users\\username df = pd.read_csv(\"c:\\\\user\\\\username\\department.csv\") # Some other example server values are # server = 'localhost\\sqlexpress' # for a named instance # server = 'myserver,port' # to specify an alternate port server = 'yourservername' database = 'AdventureWorks' username = 'username' password = 'yourpassword' cnxn = pyodbc.connect('DRIVER={SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password) cursor = cnxn.cursor() # Insert Dataframe into SQL Server: for index, row in df.iterrows(): cursor.execute(\"INSERT INTO HumanResources.DepartmentTest (DepartmentID,Name,GroupName) values(?,?,?)\", row.DepartmentID, row.Name, row.GroupName) cnxn.commit() cursor.close()\n\nConnect to the SQL kernel and AdventureWorks database and run the following SQL statement to confirm the table was successfully loaded with data from the dataframe."
    },
    {
        "link": "https://github.com/mkleehammer/pyodbc/issues/812",
        "document": "I have been trying to insert data from a dataframe in Python to a table already created in SQL Server. The data frame has 90K rows and wanted the best possible way to quickly insert data in the table. I only have read,write and delete permissions for the server and I cannot create any table on the server.\n\nBelow is the code which is inserting the data but it is very slow. Please advise.\n\n###Code Used as Below\n\n import pandas as pd\n\n import xlsxwriter\n\n import pyodbc\n\ndf = pd.read_excel(r\"Url path\\abc.xlsx\")\n\n conn = pyodbc.connect('Driver={ODBC Driver 11 for SQL Server};'\n\n 'SERVER=Server Name;'\n\n 'Database=Database Name;'\n\n 'UID=User ID;'\n\n 'PWD=Password;'\n\n 'Trusted_Connection=no;')\n\n cursor= conn.cursor()\n\n #Deleting existing data in SQL Table:-\n\n cursor.execute(\"DELETE FROM datbase.schema.TableName\")\n\n conn.commit()\n\n #Inserting data in SQL Table:-\n\n for index,row in df.iterrows():\n\n cursor.execute(\"INSERT INTO Table Name([A],[B],[C],) values (?,?,?)\", row['A'],row['B'],row['C'])\n\n conn.commit()\n\n cursor.close()\n\n conn.close()"
    }
]