[
    {
        "link": "https://api.jqueryui.com/1.12/autocomplete",
        "document": "Description: Autocomplete enables users to quickly find and select from a pre-populated list of values as they type, leveraging searching and filtering.\n\nAny field that can receive input can be converted into an Autocomplete, namely, elements, elements, and elements with the attribute. When typing in the autocomplete field, the plugin starts searching for entries that match and displays a list of values to choose from. By entering more characters, the user can filter down the list to better matches. This can be used to choose previously selected values, such as entering tags for articles or entering email addresses from an address book. Autocomplete can also be used to populate associated information, such as entering a city name and getting the zip code. You can pull data in from a local or remote source: Local is good for small data sets, e.g., an address book with 50 entries; remote is necessary for big data sets, such as a database with hundreds or millions of entries to select from. To find out more about customizing the data source, see the documentation for the option. When the menu is open, the following key commands are available:\n• : Move focus to the previous item. If on first item, move focus to the input. If on the input, move focus to last item.\n• : Move focus to the next item. If on last item, move focus to the input. If on the input, move focus to the first item.\n• : Select the currently focused item and close the menu.\n• : Select the currently focused item, close the menu, and move focus to the next focusable element.\n• / : Scroll through a page of items (based on height of menu). It's generally a bad idea to display so many items that users need to page. When the menu is closed, the following key commands are available:\n• / : Open the menu, if the has been met. The autocomplete widget uses the jQuery UI CSS framework to style its look and feel. If autocomplete specific styling is needed, the following CSS class names can be used for overrides or as keys for the option:\n• : The menu used to display matches to the user.\n• : The input element that the autocomplete widget was instantiated with. While requesting data to display to the user, the class is also added to this element.\n\nWhich element the menu should be appended to. When the value is , the parents of the input field will be checked for a class of . If an element with the class is found, the menu will be appended to that element. Regardless of the value, if no element is found, the menu will be appended to the body. Note: The option should not be changed while the suggestions menu is open. Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: If set to the first item will automatically be focused when the menu is shown. Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: Specify additional classes to add to the widget's elements. Any of classes specified in the Theming section can be used as keys to override their value. To learn more about this option, check out the learn article about the option. Code examples: Initialize the autocomplete with the option specified, changing the theming for the class: Get or set a property of the option, after initialization, here reading and changing the theming for the class: The delay in milliseconds between when a keystroke occurs and when a search is performed. A zero-delay makes sense for local data (more responsive), but can produce a lot of load for remote data, while being less responsive. Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: Disables the autocomplete if set to . Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: The minimum number of characters a user must type before a search is performed. Zero is useful for local data with just a few items, but a higher value should be used when a single character search could match a few thousand items. Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: Default: { my: \"left top\", at: \"left bottom\", collision: \"none\" } option defaults to the input element, but you can specify another element to position against. You can refer to the Identifies the position of the suggestions menu in relation to the associated input element. Theoption defaults to the input element, but you can specify another element to position against. You can refer to the jQuery UI Position utility for more details about the various options. Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: Default: none; must be specified Defines the data to use, must be specified. Independent of the variant you use, the label is always treated as text. If you want the label to be treated as html you can use Scott González' html extension. The demos all focus on different variations of the option - look for one that matches your use case, and check out the code. Multiple types supported:\n• Array: An array can be used for local data. There are two supported formats:\n• An array of objects with and properties: The label property is displayed in the suggestion menu. The value will be inserted into the input element when a user selects an item. If just one property is specified, it will be used for both, e.g., if you provide only properties, the value will also be used as the label.\n• String: When a string is used, the Autocomplete plugin expects that string to point to a URL resource that will return JSON data. It can be on the same host or on a different one (must support CORS). The Autocomplete plugin does not filter the results, instead a query string is added with a field, which the server-side script should use for filtering the results. For example, if the option is set to and the user types , a GET request would be made to . The data itself can be in the same format as the local data described above.\n• Function: The third variation, a callback, provides the most flexibility and can be used to connect any data source to Autocomplete, including JSONP. The callback gets two arguments:\n• A object, with a single property, which refers to the value currently in the text input. For example, if the user enters in a city field, the Autocomplete term will equal .\n• A callback, which expects a single argument: the data to suggest to the user. This data should be filtered based on the provided term, and can be in any of the formats described above for simple local data. It's important when providing a custom source callback to handle errors during the request. You must always call the callback even if you encounter an error. This ensures that the widget always has the correct state. When filtering data locally, you can make use of the built-in function. It'll take a single string argument and escape all regex characters, making the result safe to pass to . Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization:\n\nCloses the Autocomplete menu. Useful in combination with the method, to close the open menu.\n• None This method does not accept any arguments. Removes the autocomplete functionality completely. This will return the element back to its pre-init state.\n• None This method does not accept any arguments.\n• None This method does not accept any arguments.\n• None This method does not accept any arguments. Retrieves the autocomplete's instance object. If the element does not have an associated instance, is returned. Unlike other widget methods, is safe to call on any element after the autocomplete plugin has loaded.\n• None This method does not accept any arguments. Gets the value currently associated with the specified . Note: For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, would get the value of the property on the option.\n• The name of the option to get. Gets an object containing key/value pairs representing the current autocomplete options hash.\n• None This signature does not accept any arguments. Sets the value of the autocomplete option associated with the specified . Note: For options that have objects as their value, you can set the value of just one property by using dot notation for . For example, would update only the property of the option.\n• The name of the option to set.\n• A value to set for the option. Sets one or more options for the autocomplete. to display all items. Triggers a event and invokes the data source if the event is not canceled. Can be used by a selectbox-like button to open the suggestions when clicked. When invoked with no parameters, the current input's value is used. Can be called with an empty string andto display all items. Returns a object containing the menu element. Although the menu items are constantly created and destroyed, the menu element itself is created during initialization and is constantly reused.\n• None This method does not accept any arguments.\n\nThe autocomplete widget is built with the widget factory and can be extended. When extending widgets, you have the ability to override or add to the behavior of existing methods. The following methods are provided as extension points with the same API stability as the plugin methods listed above. For more information on widget extensions, see Extending Widgets with the Widget Factory. Method that controls the creation of each option in the widget's menu. The method must create a new element, append it to the menu, and return it. See the Menu documentation for more details about the markup.\n• The element that the newly created element must be appended to.\n• \n• The string to display for the item.\n• The value to insert into the input when the item is selected. Code examples: Add the item's value as a data attribute on the . and an array of items that match the user typed term. Creation of the individual elements should be delegated to , which in turn delegates to the Method that controls building the widget's menu. The method is passed an emptyand an array of items that match the user typed term. Creation of the individualelements should be delegated to, which in turn delegates to the extension point.\n• An empty element to use as the widget's menu.\n• An Array of items that match the user typed term. Each item is an Object with and properties. Code examples: Add a CSS class name to the odd menu items. Method responsible for sizing the menu before it is displayed. The menu element is available at .\n• None This method does not accept any arguments. Code examples: Always display the menu as 500 pixels wide.\n\nTriggered when the field is blurred, if the value has changed.\n• \n• The item selected from the menu, if any. Otherwise the property is . Code examples: Initialize the autocomplete with the change callback specified: Bind an event listener to the autocompletechange event: Triggered when the menu is hidden. Not every event will be accompanied by a event. Note: The object is empty but included for consistency with other events. Code examples: Initialize the autocomplete with the close callback specified: Bind an event listener to the autocompleteclose event: Triggered when the autocomplete is created. Note: The object is empty but included for consistency with other events. Code examples: Initialize the autocomplete with the create callback specified: Bind an event listener to the autocompletecreate event: Triggered when focus is moved to an item (not selecting). The default action is to replace the text field's value with the value of the focused item, though only if the event was triggered by a keyboard interaction. Canceling this event prevents the value from being updated, but does not prevent the menu item from being focused. Code examples: Initialize the autocomplete with the focus callback specified: Bind an event listener to the autocompletefocus event: Triggered when the suggestion menu is opened or updated. Note: The object is empty but included for consistency with other events. Code examples: Initialize the autocomplete with the open callback specified: Bind an event listener to the autocompleteopen event: Triggered after a search completes, before the menu is shown. Useful for local manipulation of suggestion data, where a custom option callback is not required. This event is always triggered when a search completes, even if the menu will not be shown because there are no results or the Autocomplete is disabled.\n• \n• Contains the response data and can be modified to change the results that will be shown. This data is already normalized, so if you modify the data, make sure to include both and properties for each item. Code examples: Initialize the autocomplete with the response callback specified: Bind an event listener to the autocompleteresponse event: Triggered before a search is performed, after and are met. If canceled, then no request will be started and no items suggested. Note: The object is empty but included for consistency with other events. Code examples: Initialize the autocomplete with the search callback specified: Bind an event listener to the autocompletesearch event: Triggered when an item is selected from the menu. The default action is to replace the text field's value with the value of the selected item. Canceling this event prevents the value from being updated, but does not prevent the menu from closing.\n• \n• An Object with and properties for the selected option. Code examples: Initialize the autocomplete with the select callback specified: Bind an event listener to the autocompleteselect event:"
    },
    {
        "link": "https://api.jqueryui.com/autocomplete",
        "document": "Description: Autocomplete enables users to quickly find and select from a pre-populated list of values as they type, leveraging searching and filtering.\n\nAny field that can receive input can be converted into an Autocomplete, namely, elements, elements, and elements with the attribute. When typing in the autocomplete field, the plugin starts searching for entries that match and displays a list of values to choose from. By entering more characters, the user can filter down the list to better matches. This can be used to choose previously selected values, such as entering tags for articles or entering email addresses from an address book. Autocomplete can also be used to populate associated information, such as entering a city name and getting the zip code. You can pull data in from a local or remote source: Local is good for small data sets, e.g., an address book with 50 entries; remote is necessary for big data sets, such as a database with hundreds or millions of entries to select from. To find out more about customizing the data source, see the documentation for the option. When the menu is open, the following key commands are available:\n• : Move focus to the previous item. If on first item, move focus to the input. If on the input, move focus to last item.\n• : Move focus to the next item. If on last item, move focus to the input. If on the input, move focus to the first item.\n• : Select the currently focused item and close the menu.\n• : Select the currently focused item, close the menu, and move focus to the next focusable element.\n• / : Scroll through a page of items (based on height of menu). It's generally a bad idea to display so many items that users need to page. When the menu is closed, the following key commands are available:\n• / : Open the menu, if the has been met. The autocomplete widget uses the jQuery UI CSS framework to style its look and feel. If autocomplete specific styling is needed, the following CSS class names can be used for overrides or as keys for the option:\n• : The menu used to display matches to the user.\n• : The input element that the autocomplete widget was instantiated with. While requesting data to display to the user, the class is also added to this element.\n\nWhich element the menu should be appended to. When the value is , the parents of the input field will be checked for a class of . If an element with the class is found, the menu will be appended to that element. Regardless of the value, if no element is found, the menu will be appended to the body. Note: The option should not be changed while the suggestions menu is open. Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: If set to the first item will automatically be focused when the menu is shown. Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: Specify additional classes to add to the widget's elements. Any of classes specified in the Theming section can be used as keys to override their value. To learn more about this option, check out the learn article about the option. Code examples: Initialize the autocomplete with the option specified, changing the theming for the class: Get or set a property of the option, after initialization, here reading and changing the theming for the class: The delay in milliseconds between when a keystroke occurs and when a search is performed. A zero-delay makes sense for local data (more responsive), but can produce a lot of load for remote data, while being less responsive. Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: Disables the autocomplete if set to . Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: The minimum number of characters a user must type before a search is performed. Zero is useful for local data with just a few items, but a higher value should be used when a single character search could match a few thousand items. Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: Default: { my: \"left top\", at: \"left bottom\", collision: \"none\" } option defaults to the input element, but you can specify another element to position against. You can refer to the Identifies the position of the suggestions menu in relation to the associated input element. Theoption defaults to the input element, but you can specify another element to position against. You can refer to the jQuery UI Position utility for more details about the various options. Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization: Default: none; must be specified Defines the data to use, must be specified. Independent of the variant you use, the label is always treated as text. If you want the label to be treated as html you can use Scott González' html extension. The demos all focus on different variations of the option - look for one that matches your use case, and check out the code. Multiple types supported:\n• Array: An array can be used for local data. There are two supported formats:\n• An array of objects with and properties: The label property is displayed in the suggestion menu. The value will be inserted into the input element when a user selects an item. If just one property is specified, it will be used for both, e.g., if you provide only properties, the value will also be used as the label.\n• String: When a string is used, the Autocomplete plugin expects that string to point to a URL resource that will return JSON data. It can be on the same host or on a different one (must support CORS). The Autocomplete plugin does not filter the results, instead a query string is added with a field, which the server-side script should use for filtering the results. For example, if the option is set to and the user types , a GET request would be made to . The data itself can be in the same format as the local data described above.\n• Function: The third variation, a callback, provides the most flexibility and can be used to connect any data source to Autocomplete, including JSONP. The callback gets two arguments:\n• A object, with a single property, which refers to the value currently in the text input. For example, if the user enters in a city field, the Autocomplete term will equal .\n• A callback, which expects a single argument: the data to suggest to the user. This data should be filtered based on the provided term, and can be in any of the formats described above for simple local data. It's important when providing a custom source callback to handle errors during the request. You must always call the callback even if you encounter an error. This ensures that the widget always has the correct state. When filtering data locally, you can make use of the built-in function. It'll take a single string argument and escape all regex characters, making the result safe to pass to . Code examples: Initialize the autocomplete with the option specified: Get or set the option, after initialization:\n\nCloses the Autocomplete menu. Useful in combination with the method, to close the open menu.\n• None This method does not accept any arguments. Removes the autocomplete functionality completely. This will return the element back to its pre-init state.\n• None This method does not accept any arguments.\n• None This method does not accept any arguments.\n• None This method does not accept any arguments. Retrieves the autocomplete's instance object. If the element does not have an associated instance, is returned. Unlike other widget methods, is safe to call on any element after the autocomplete plugin has loaded.\n• None This method does not accept any arguments. Gets the value currently associated with the specified . Note: For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, would get the value of the property on the option.\n• The name of the option to get. Gets an object containing key/value pairs representing the current autocomplete options hash.\n• None This signature does not accept any arguments. Sets the value of the autocomplete option associated with the specified . Note: For options that have objects as their value, you can set the value of just one property by using dot notation for . For example, would update only the property of the option.\n• The name of the option to set.\n• A value to set for the option. Sets one or more options for the autocomplete. to display all items. Triggers a event and invokes the data source if the event is not canceled. Can be used by a selectbox-like button to open the suggestions when clicked. When invoked with no parameters, the current input's value is used. Can be called with an empty string andto display all items. Returns a object containing the menu element. Although the menu items are constantly created and destroyed, the menu element itself is created during initialization and is constantly reused.\n• None This method does not accept any arguments.\n\nThe autocomplete widget is built with the widget factory and can be extended. When extending widgets, you have the ability to override or add to the behavior of existing methods. The following methods are provided as extension points with the same API stability as the plugin methods listed above. For more information on widget extensions, see Extending Widgets with the Widget Factory. Method that controls the creation of each option in the widget's menu. The method must create a new element, append it to the menu, and return it. See the Menu documentation for more details about the markup.\n• The element that the newly created element must be appended to.\n• \n• The string to display for the item.\n• The value to insert into the input when the item is selected. Code examples: Add the item's value as a data attribute on the . and an array of items that match the user typed term. Creation of the individual elements should be delegated to , which in turn delegates to the Method that controls building the widget's menu. The method is passed an emptyand an array of items that match the user typed term. Creation of the individualelements should be delegated to, which in turn delegates to the extension point.\n• An empty element to use as the widget's menu.\n• An Array of items that match the user typed term. Each item is an Object with and properties. Code examples: Add a CSS class name to the odd menu items. Method responsible for sizing the menu before it is displayed. The menu element is available at .\n• None This method does not accept any arguments. Code examples: Always display the menu as 500 pixels wide.\n\nTriggered when the field is blurred, if the value has changed.\n• \n• The item selected from the menu, if any. Otherwise the property is . Code examples: Initialize the autocomplete with the change callback specified: Bind an event listener to the autocompletechange event: Triggered when the menu is hidden. Not every event will be accompanied by a event. Note: The object is empty but included for consistency with other events. Code examples: Initialize the autocomplete with the close callback specified: Bind an event listener to the autocompleteclose event: Triggered when the autocomplete is created. Note: The object is empty but included for consistency with other events. Code examples: Initialize the autocomplete with the create callback specified: Bind an event listener to the autocompletecreate event: Triggered when focus is moved to an item (not selecting). The default action is to replace the text field's value with the value of the focused item, though only if the event was triggered by a keyboard interaction. Canceling this event prevents the value from being updated, but does not prevent the menu item from being focused. Code examples: Initialize the autocomplete with the focus callback specified: Bind an event listener to the autocompletefocus event: Triggered when the suggestion menu is opened or updated. Note: The object is empty but included for consistency with other events. Code examples: Initialize the autocomplete with the open callback specified: Bind an event listener to the autocompleteopen event: Triggered after a search completes, before the menu is shown. Useful for local manipulation of suggestion data, where a custom option callback is not required. This event is always triggered when a search completes, even if the menu will not be shown because there are no results or the Autocomplete is disabled.\n• \n• Contains the response data and can be modified to change the results that will be shown. This data is already normalized, so if you modify the data, make sure to include both and properties for each item. Code examples: Initialize the autocomplete with the response callback specified: Bind an event listener to the autocompleteresponse event: Triggered before a search is performed, after and are met. If canceled, then no request will be started and no items suggested. Note: The object is empty but included for consistency with other events. Code examples: Initialize the autocomplete with the search callback specified: Bind an event listener to the autocompletesearch event: Triggered when an item is selected from the menu. The default action is to replace the text field's value with the value of the selected item. Canceling this event prevents the value from being updated, but does not prevent the menu from closing.\n• \n• An Object with and properties for the selected option. Code examples: Initialize the autocomplete with the select callback specified: Bind an event listener to the autocompleteselect event:"
    },
    {
        "link": "https://jqueryui.com/autocomplete",
        "document": "Enables users to quickly find and select from a pre-populated list of values as they type, leveraging searching and filtering.\n\nThe Autocomplete widgets provides suggestions while you type into the field. Here the suggestions are tags for programming languages, give \"ja\" (for Java or JavaScript) a try. The datasource is a simple JavaScript array, provided to the widget using the source-option.\n\nWant to learn more about the autocomplete widget? Check out the API documentation."
    },
    {
        "link": "https://stackoverflow.com/questions/39667036/is-jquery-1-12-3-contain-jquery-ui-for-autocomplete",
        "document": "I install jquery 1.12.3 and add it to my project ... I want to use autocomplete on textarea with jquery UI for example :\n\n... so my question is : Does jquery 1.12.3 contain jquery UI for autocomplete or must I download another version of jquery UI to use autocomplete on textarea? if I must to download another jquery UI How to do it ?"
    },
    {
        "link": "https://jqueryui.com/upgrade-guide/1.12",
        "document": "\n• Button\n• Deprecated icons options in favor of icon and iconPosition\n• Deprecated support for checkbox and radio types, in favor of checkboxradio widget\n• Menu\n• Use consistent styling for focused and active items\n• Tooltip\n• Allow DOM elements and jQuery objects as content\n\nThis guide will assist in upgrading from jQuery UI 1.11.x to jQuery UI 1.12.x. All changes are listed below, organized by plugin, along with how to upgrade your code to work with jQuery UI 1.12.\n\njQuery UI 1.12 introduces API redesigns for Button, Buttonset, Dialog, Draggable, Droppable, Menu, Mouse, Resizable, Selectable, Sortable, Tabs, Tooltip, and Effects. You can read about the API redesign process on the jQuery UI Blog. Although the redesigns introduce breaking changes, 1.12 maintains a lot of compatibility with the 1.11 API by default. This is accomplished by rebuilding the 1.11 API on top of the 1.12 API. The default behavior for all 1.12 releases will be to simultaneously use the 1.11 and 1.12 APIs where possible. If you would like to load just the 1.12 API without the 1.11 API, you can set the flag to .\n\nThe API redesigns deprecate some functionality, which will be removed in the future. You don't have to wait in order to find out if your code will work when the 1.11 APIs are removed. You can use the flag to test this with any 1.12 release.\n\nIf you find a regression from the 1.11 API, please report it in the bug tracker. Even though the 1.11 API is deprecated, it's important for 1.12 releases not to regress so that users are encouraged to upgrade even if they're not ready to use the new APIs. Note that most 1.10 APIs which were deprecated in 1.11 were removed in 1.12 and will not exist, regardless of the flag.\n\nIndependent of changes to specific components, this release removes support for IE7, modernizes the theming, including the default font-size, and improves support for AMD. The minimal jQuery version supported is now 1.7.0.\n\n(#9838) All IE7 workarounds have been removed from the source code. If you need continued IE7 support you can continue to use jQuery UI 1.11.x.\n\nAs of this release we are no longer accepting bug reports for IE8, IE9, or IE10 issues. We have also removed these browsers from our testing infrastructure. The workarounds for these browsers are still present in the code, but we will remove them for jQuery UI 1.14.\n\n(#10131) jQuery UI themes used to be built around a font-size of 62.5%, while widgets compensated for that with font-size of 1.1em. This rather small font-size default is now gone, assuming instead the default font-size of browsers.\n\n(#10617) jQuery UI used to ship with a default theme called Smoothness. This theme is still available through ThemeRoller, but has been replaced by a new default theme called Base. This new theme has been modernized to get rid of background gradients, reduce rounded corners and use some colors outside of the greyscale range. In other words, it looks much better.\n\n(#10723) jQuery UI no longer supports jQuery 1.6. The minimal supported version is now 1.7.0.\n\n(#9647) The \"core\" module that used to bundle various utilities is deprecated. Other source files no longer depend on , which is now just a single call that specifies all the modules it previously bundled as dependencies.\n\n(#13885) All widgets, including (but excluding ) were moved to a subfolder, so for example, the source for the autocomplete widget is now . Similarly, all effects (except ) were moved to an subfolder.\n\nIn jQuery UI 1.11 we added support for AMD dependency management, but this applied only for JS files. CSS files still had to be managed manually (though download builder helps). In 1.12 all JS components now explicitly list their direct CSS dependencies, through structured source comments. For example, has these comments:\n\nDownload builder parses these to resolve each JS component's CSS dependencies. Other build tools like requirejs or webpack could also parse these (and make it reusable through plugins).\n\nWe hope to move to a format that resembles more of a standard eventually.\n\njQuery UI 1.12 is the first release officially published to npm as . The previous source repository only covered up to jQuery UI 1.10.5, but never had any of the 1.11 releases. Since the unofficial releases where heavily transformed and fundamentally incompatible with our source files and existing release process, we decided to publish 1.12 under the same name, with different folders and files. Accordingly, the npm releases of 1.12+ are not backwards compatible with the 1.10.x releases.\n\nIf you've used jQuery UI 1.10 via npm, make sure you don't use minor version ranges in your . Before:\n\nWhen you're ready to upgrade, you need to update your import paths.\n\nIf you've used , then you need to replace that with individual imports.\n\nIf you're using browserify: The UMD headers we have aren't supported by browserify natively, and the deamdify plugin has a blocking bug. If you depend on that combination, please help fix that bug!\n\nIf you're using webpack or are considering it: You're good to go! It works, as shown in this demo.\n\n(#9649) The deprecated method override has been removed. jQuery UI was using this only in our dialog widget, where we've replaced the delayed focus call with a timeout.\n\n(#9156) The deprecated method has been removed, in favor of the new / stacking elements logic used by all widgets that display an element on top of the page, like dialog and autocomplete.\n\nThis method was used by dialog, but because the dialog now has an option, this plugin method is no longer necessary. If you are using , or building a widget that must stack, check out our guide to create stacking elements with a class name and option.\n\n(#12475) This release introduces a new jQuery plugin method. finds all label elements associated with the first selected element.\n\n(#10615) Interactions should be instantaneous. These settings are typically used to prevent accidental drags, but a proper fix for that is to improve the user experience, e.g., using handles to avoid accidental drags.\n\nUnlike most deprecated APIs which only remain for one version before being removed, the `distance` and `delay` options for each interaction won't be removed until the respective rewrites are included in a new version. As such, the `$.uiBackCompat` flag won't remove the options from the API.\n\nSee the changes in the menu widget.\n\nThe button widget underwent a rewrite in this release. Most notably, support for inputs of type checkbox and radio has been extracted into a standalone checkboxradio widget, and support for groups of buttons has been extracted into a more generic controlgroup widget. The remaining button widget also underwent some changes, simplifiying markup and options.\n\nDeprecated options in favor of and\n\n(#14744) The button widget used to have an option that supported and properties, allowing up to two icons at once. This has been replaced by the option, which only allows a single icon, and the option, which controls the placement of that one icon.\n\nThe equivalent of the old icons property is , while the equivalent of the old icons property is . The new button also supports \"top\" and \"bottom\" for , allowing the icon to be displayed above or below the button text.\n\nReplacing a button with two icons can be accomplished by putting one icon in the markup:\n\n(#8203) This option was renamed for clarity, otherwise it hasn't changed.\n\nDeprecated support for and types, in favor of checkboxradio widget\n\n(#14746) With the introduction of the new checkboxradio widget, the button widget is no longer intended to be used as a toggle button. However, with back-compat enabled, the button widget will automatically detect if you're trying to create a button from a checkbox or radio button and call on those elements for you.\n\nIf you're using the button widget with one of these input types, replace it with the new checkboxradio widget:\n\nBoth old and new and new support the option, so you can keep using it without any changes. Checkboxradio doesn't have an equivalent of the (old) or (new) option, it will always show the label. It also doesn't have an equivalent of the (Object, old) or (String, new) option, you can only turn the checkbox/radio icon on or off using the (Boolean) option. To replace a toggle button with a custom icon (no checkmark), turn off the icon and add a custom icon to the markup.\n\n(#14747) The buttonset widget, bundled with the button widget, is now deprecated, in favor of the new controlgroup widget. If you were using buttonset without any options, migrating to controlgroup only requires a search-and-replace:\n\nControlgroup also has an option, but the signature is different. Instead of listing only the selectors to match button widgets, all supported widgets now have a key in the option, with the selectors as the value:\n\n(#12161) The option is now deprecated. Use the new option with the property instead.\n\nSee the notes for the mouse widget.\n\n(#12162) The option is now deprecated. Use the new option with the property instead.\n\n(#12162) The option is now deprecated. Use the new option with the property instead.\n\n(#10162) To resolve several styling issues, the menu widget now requires each menu item to be wrapped with a DOM element. The example below uses elements for wrappers, but you can use any block-level element.\n\nThe autocomplete and selectmenu widgets, which both use menu internally, were both updated to include wrappers.\n\nThis is a breaking change. If you use menu directly in your project, you need to update its markup to include the wrappers. Otherwise you'll end up with a menu that looks wrong and can't be interacted with.\n\nUse consistent styling for focused and active items\n\n(#10692) We used to style active parent menu items with , while everything else got (or , which we style the same as focus). When a menu item in a submenu has focus, the parent menu item gets , which is inconsistent and confusing. We've now switched to using only the class.\n\nSee the notes for the mouse widget.\n\nSee the notes for the mouse widget.\n\nSee the changes in the menu widget.\n\n(#10142) The new extension method makes customizations of how the selected item is rendered a lot easier.\n\n(#11198) still matches the width of the original element. prevents an inline style from being set for the width. This makes it easy to set the width via a stylesheet and allows the use of any unit for setting the width, such as the new default of 14em, which is set through the stylesheet.\n\nInstead of duplicating CSS, the selectmenu widget now reuses classes defined in . If you're building jQuery UI manually, you need to include as a dependency for selectmenu.\n\n(#7630) Sliders now provide the index of the handle that's being moved inside the , , , and events. The index is provided in the property of the parameter.\n\nSee the notes for the mouse widget.\n\n(#11097) The and methods which were used to customize the markup generated for the spinner have been considerably simplified over time. At this point, the markup used is so minimal that we no longer feel it's necessary to include these extension points. As a result, these have been deprecated. Custom styling can still be accomplished via the option.\n\n(#12061) The tabs widget now adds the class instead of the inconsistently named to each tab element.\n\n(#12167) The option is now deprecated. Use the new option with the property instead.\n\nAllow DOM elements and jQuery objects as content\n\n(#9278) Tooltip now accepts HTMLElement and jQuery objects for the option.\n\n(#7053) jQuery UI used to hardcode classes like in widgets. We removed the hardcoding and added the ability to customize the style-related classes based on the functional classes. For the dialog, droppable and tooltip widgets, we replaced options that were doing just that.\n\nHere's an example using dialog:\n\nThis will add the and classes to the element which has the class, while also removing the default class from the element which has the class.\n\n(#12601) The widget factory now supports mixins so that you can have common behaviors shared across many widgets in scenarios where inheritance doesn't make sense. Until now, this required manually extending the widget prototype with the mixins. Under the hood, this is all that's happening, but there's now dedicated syntax to make calls to the widget factory a little cleaner.\n\n(#12638) A form reset mixin has been added to simplify the logic of refreshing form elements when their associated form is reset. For full details see the form reset mixin documentation.\n\n(#14749) The transfer effect was available through the extended , and methods, which was a side-effect of exposing it as an effect, but made no semantic sense. The effect is now available exclusively through the method.\n\nThe new method is a convenience method for getting and setting the CSS property as an object. The object contains , , , and properties. For example, if you want to clip off 10 pixels from the right side of an element:\n\nA number of new low-level effects APIs have been created to aid in the development of custom effects.\n• : Scales the dimensions of an element.\n• : Stores a copy of all inline styles applied to an element.\n• : Restores all inline styles for an element.\n• : Creates a placeholder to support animations without disrupting the layout.\n\n(#15022) The caret icons all had a typo in their names, which has now been fixed."
    },
    {
        "link": "https://expressjs.com/en/advanced/best-practice-security.html",
        "document": "The term “production” refers to the stage in the software lifecycle when an application or API is generally available to its end-users or consumers. In contrast, in the “development” stage, you’re still actively writing and testing code, and the application is not open to external access. The corresponding system environments are known as production and development environments, respectively.\n\nDevelopment and production environments are usually set up differently and have vastly different requirements. What’s fine in development may not be acceptable in production. For example, in a development environment you may want verbose logging of errors for debugging, while the same behavior can become a security concern in a production environment. And in development, you don’t need to worry about scalability, reliability, and performance, while those concerns become critical in production.\n\nSecurity best practices for Express applications in production include:\n• Production Best Practices: Security\n• Don’t use deprecated or vulnerable versions of Express\n• Use cookies securely\n• Don’t use the default session cookie name\n\nDon’t use deprecated or vulnerable versions of Express\n\nExpress 2.x and 3.x are no longer maintained. Security and performance issues in these versions won’t be fixed. Do not use them! If you haven’t moved to version 4, follow the migration guide or consider Commercial Support Options.\n\nAlso ensure you are not using any of the vulnerable Express versions listed on the Security updates page. If you are, update to one of the stable releases, preferably the latest.\n\nIf your app deals with or transmits sensitive data, use Transport Layer Security (TLS) to secure the connection and the data. This technology encrypts data before it is sent from the client to the server, thus preventing some common (and easy) hacks. Although Ajax and POST requests might not be visibly obvious and seem “hidden” in browsers, their network traffic is vulnerable to packet sniffing and man-in-the-middle attacks.\n\nYou may be familiar with Secure Socket Layer (SSL) encryption. TLS is simply the next progression of SSL. In other words, if you were using SSL before, consider upgrading to TLS. In general, we recommend Nginx to handle TLS. For a good reference to configure TLS on Nginx (and other servers), see Recommended Server Configurations (Mozilla Wiki).\n\nAlso, a handy tool to get a free TLS certificate is Let’s Encrypt, a free, automated, and open certificate authority (CA) provided by the Internet Security Research Group (ISRG).\n\nFor web applications, one of the most critical security requirements is proper user input validation and handling. This comes in many forms and we will not cover all of them here. Ultimately, the responsibility for validating and correctly handling the types of user input your application accepts is yours.\n\nAn example of potentially dangerous user input is an open redirect, where an application accepts a URL as user input (often in the URL query, for example ) and uses to set the header and return a 3xx status.\n\nAn application must validate that it supports redirecting to the incoming URL to avoid sending users to malicious links such as phishing websites, among other risks.\n\nHere is an example of checking URLs before using or :\n\nHelmet can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately.\n\nHelmet is a middleware function that sets security-related HTTP response headers. Helmet sets the following headers by default:\n• : A powerful allow-list of what can happen on your page which mitigates many attacks\n• : Blocks others from loading your resources cross-origin\n• : Changes process isolation to be origin-based\n• : Forces downloads to be saved (Internet Explorer only)\n• : Info about the web server. Removed because it could be used in simple attacks\n• : Legacy header that tries to mitigate XSS attacks, but makes things worse, so Helmet disables it\n\nEach header can be configured or disabled. To read more about it please go to its documentation website.\n\nInstall Helmet like any other module:\n\nThen to use it in your code:\n\nIt can help to provide an extra layer of security to reduce the ability of attackers to determine the software that a server uses, known as “fingerprinting.” Though not a security issue itself, reducing the ability to fingerprint an application improves its overall security posture. Server software can be fingerprinted by quirks in how it responds to specific requests, for example in the HTTP response headers.\n\nBy default, Express sends the response header that you can disable using the method:\n\nExpress also sends its own formatted “404 Not Found” messages and formatter error response messages. These can be changed by adding your own not found handler and writing your own error handler:\n\nTo ensure cookies don’t open your app to exploits, don’t use the default session cookie name and set cookie security options appropriately.\n\nThere are two main middleware cookie session modules:\n\nThe main difference between these two modules is how they save cookie session data. The express-session middleware stores session data on the server; it only saves the session ID in the cookie itself, not session data. By default, it uses in-memory storage and is not designed for a production environment. In production, you’ll need to set up a scalable session-store; see the list of compatible session stores.\n\nIn contrast, cookie-session middleware implements cookie-backed storage: it serializes the entire session to the cookie, rather than just a session key. Only use it when session data is relatively small and easily encoded as primitive values (rather than objects). Although browsers are supposed to support at least 4096 bytes per cookie, to ensure you don’t exceed the limit, don’t exceed a size of 4093 bytes per domain. Also, be aware that the cookie data will be visible to the client, so if there is any reason to keep it secure or obscure, then may be a better choice.\n\nDon’t use the default session cookie name\n\nUsing the default session cookie name can open your app to attacks. The security issue posed is similar to : a potential attacker can use it to fingerprint the server and target attacks accordingly.\n\nTo avoid this problem, use generic cookie names; for example using express-session middleware:\n\nSet the following cookie options to enhance security:\n• - Ensures the browser only sends the cookie over HTTPS.\n• - Ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.\n• - indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.\n• - indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.\n• - use to set expiration date for persistent cookies.\n\nHere is an example using cookie-session middleware:\n\nMake sure login endpoints are protected to make private data more secure.\n\nA simple and powerful technique is to block authorization attempts using two metrics:\n• The number of consecutive failed attempts by the same user name and IP address.\n• The number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.\n\nrate-limiter-flexible package provides tools to make this technique easy and fast. You can find an example of brute-force protection in the documentation\n\nUsing npm to manage your application’s dependencies is powerful and convenient. But the packages that you use may contain critical security vulnerabilities that could also affect your application. The security of your app is only as strong as the “weakest link” in your dependencies.\n\nSince npm@6, npm automatically reviews every install request. Also, you can use to analyze your dependency tree.\n\nIf you want to stay more secure, consider Snyk.\n\nSnyk offers both a command-line tool and a Github integration that checks your application against Snyk’s open source vulnerability database for any known vulnerabilities in your dependencies. Install the CLI as follows:\n\nUse this command to test your application for vulnerabilities:\n\nKeep an eye out for Node Security Project or Snyk advisories that may affect Express or other modules that your app uses. In general, these databases are excellent resources for knowledge and tools about Node security.\n\nFinally, Express apps—like any other web apps—can be vulnerable to a variety of web-based attacks. Familiarize yourself with known web vulnerabilities and take precautions to avoid them.\n\nHere are some further recommendations from the excellent Node.js Security Checklist. Refer to that blog post for all the details on these recommendations:\n• Always filter and sanitize user input to protect against cross-site scripting (XSS) and command injection attacks.\n• Defend against SQL injection attacks by using parameterized queries or prepared statements.\n• Use the open-source sqlmap tool to detect SQL injection vulnerabilities in your app.\n• Use the nmap and sslyze tools to test the configuration of your SSL ciphers, keys, and renegotiation as well as the validity of your certificate.\n• Use safe-regex to ensure your regular expressions are not susceptible to regular expression denial of service attacks."
    },
    {
        "link": "https://expressjs.com/en/resources/middleware/session.html",
        "document": "This is a Node.js module available through the npm registry. Installation is done using the command:\n\nCreate a session middleware with the given .\n\nNote Session data is not saved in the cookie itself, just the session ID. Session data is stored server-side.\n\nNote Since version 1.5.0, the middleware no longer needs to be used for this module to work. This module now directly reads and writes cookies on / . Using may result in issues if the is not the same between this module and .\n\nWarning The default server-side session storage, , is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing.\n\nFor a list of stores, see compatible session stores.\n\naccepts these properties in the options object.\n\nSettings object for the session ID cookie. The default value is .\n\nThe following are options that can be set in this object.\n\nSpecifies the value for the attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain.\n\nSpecifies the object to be the value for the attribute. By default, no expiration is set, and most clients will consider this a “non-persistent cookie” and will delete it on a condition like exiting a web browser application.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nNote The option should not be set directly; instead only use the option.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is set.\n\nNote be careful when setting this to , as compliant clients will not allow client-side JavaScript to see the cookie in .\n\nSpecifies the (in milliseconds) to use when calculating the attribute. This is done by taking the current server time and adding milliseconds to the value to calculate an datetime. By default, no maximum age is set.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nMore information about can be found in the proposal.\n\nSpecifies the value for the . By default, this is set to , which is the root path of the domain.\n\nSpecifies the to be the value for the attribute.\n• will set the attribute to .\n• will set the attribute to , the default priority when not set.\n• will set the attribute to .\n\nMore information about the different priority levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nSpecifies the or to be the value for the attribute. By default, this is .\n• will set the attribute to for strict same site enforcement.\n• will not set the attribute.\n• will set the attribute to for lax same site enforcement.\n• will set the attribute to for an explicit cross-site cookie.\n• will set the attribute to for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nNote There is a draft spec that requires that the attribute be set to when the attribute has been set to . Some web browsers or other clients may be adopting this specification.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote be careful when setting this to , as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection.\n\nPlease note that is a recommended option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies. If is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using , you need to set “trust proxy” in express:\n\nFor using secure cookies in production, but allowing for testing in development, the following is an example of enabling this setup based on in express:\n\nThe option can also be set to the special value to have this setting automatically match the determined security of the connection. Be careful when using this setting if the site is available both as HTTP and HTTPS, as once the cookie is set on HTTPS, it will no longer be visible over HTTP. This is useful when the Express setting is properly setup to simplify development vs production configuration.\n\nFunction to call to generate a new session ID. Provide a function that returns a string that will be used as a session ID. The function is given as the first argument if you want to use some value attached to when generating the ID.\n\nThe default value is a function which uses the library to generate IDs.\n\nNOTE be careful to generate unique IDs so your sessions do not conflict.\n\nThe name of the session ID cookie to set in the response (and read from in the request).\n\nThe default value is .\n\nNote if you have multiple apps running on the same hostname (this is just the name, i.e. or ; different schemes and ports do not name a different hostname), then you need to separate the session cookies from each other. The simplest method is to simply set different s per app.\n\nTrust the reverse proxy when setting secure cookies (via the “X-Forwarded-Proto” header).\n\nThe default value is .\n• The “X-Forwarded-Proto” header will be used.\n• All headers are ignored and the connection is considered secure only if there is a direct TLS/SSL connection.\n• Uses the “trust proxy” setting from express\n\nForces the session to be saved back to the session store, even if the session was never modified during the request. Depending on your store this may be necessary, but it can also create race conditions where a client makes two parallel requests to your server and changes made to the session in one request may get overwritten when the other request ends, even if it made no changes (this behavior also depends on what store you’re using).\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case. Typically, you’ll want .\n\nHow do I know if this is necessary for my store? The best way to know is to check with your store if it implements the method. If it does, then you can safely set . If it does not implement the method and your store sets an expiration date on stored sessions, then you likely need .\n\nForce the session identifier cookie to be set on every response. The expiration is reset to the original , resetting the expiration countdown.\n\nThe default value is .\n\nWith this enabled, the session identifier cookie will expire in since the last response was sent instead of in since the session was last modified by the server.\n\nThis is typically used in conjuction with short, non-session-length values to provide a quick timeout of the session data with reduced potential of it occurring during on going server interactions.\n\nNote When this option is set to but the option is set to , the cookie will not be set on a response with an uninitialized session. This option only modifies the behavior when an existing session was loaded for the request.\n\nForces a session that is “uninitialized” to be saved to the store. A session is uninitialized when it is new but not modified. Choosing is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing will also help with race conditions where a client makes multiple parallel requests without a session.\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case.\n\nNote if you are using Session in conjunction with PassportJS, Passport will add an empty Passport object to the session for use after a user is authenticated, which will be treated as a modification to the session, causing it to be saved. This has been fixed in PassportJS 0.3.0\n\nThis is the secret used to sign the session ID cookie. The secret can be any type of value that is supported by Node.js (like a string or a ). This can be either a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters. A best practice may include:\n• The use of environment variables to store the secret, ensuring the secret itself does not exist in your repository.\n• Periodic updates of the secret, while ensuring the previous secret is in the array.\n\nUsing a secret that cannot be guessed will reduce the ability to hijack a session to only guessing the session ID (as determined by the option).\n\nChanging the secret value will invalidate all existing sessions. In order to rotate the secret without invalidating sessions, provide an array of secrets, with the new secret as first element of the array, and including previous secrets as the later elements.\n\nNote HMAC-256 is used to sign the session ID. For this reason, the secret should contain at least 32 bytes of entropy.\n\nThe session store instance, defaults to a new instance.\n\nControl the result of unsetting (through , setting to , etc.).\n\nThe default value is .\n• The session will be destroyed (deleted) when the response ends.\n• The session in the store will be kept, but modifications made during the request are ignored and not saved.\n\nTo store or access session data, simply use the request property , which is (generally) serialized as JSON by the store, so nested objects are typically fine. For example below is a user-specific view counter:\n\nTo regenerate the session simply invoke the method. Once complete, a new SID and instance will be initialized at and the will be invoked.\n\nDestroys the session and will unset the property. Once complete, the will be invoked.\n\nReloads the session data from the store and re-populates the object. Once complete, the will be invoked.\n\nSave the session back to the store, replacing the contents on the store with the contents in memory (though a store may do something else–consult the store’s documentation for exact behavior).\n\nThis method is automatically called at the end of the HTTP response if the session data has been altered (though this behavior can be altered with various options in the middleware constructor). Because of this, typically this method does not need to be called.\n\nThere are some cases where it is useful to call this method, for example, redirects, long-lived requests or in WebSockets.\n\nUpdates the property. Typically this is not necessary to call, as the session middleware does this for you.\n\nEach session has a unique ID associated with it. This property is an alias of and cannot be modified. It has been added to make the session ID accessible from the object.\n\nEach session has a unique cookie object accompany it. This allows you to alter the session cookie per visitor. For example we can set to to enable the cookie to remain for only the duration of the user-agent.\n\nAlternatively will return the time remaining in milliseconds, which we may also re-assign a new value to adjust the property appropriately. The following are essentially equivalent\n\nFor example when is set to (one minute), and 30 seconds has elapsed it will return until the current request has completed, at which time is called to reset to its original value.\n\nThe property returns the original (time-to-live), in milliseconds, of the session cookie.\n\nTo get the ID of the loaded session, access the request property . This is simply a read-only value set when a session is loaded/created.\n\nEvery session store must be an and implement specific methods. The following methods are the list of required, recommended, and optional.\n• Required methods are ones that this module will always call on the store.\n• Recommended methods are ones that this module will call on the store if available.\n• Optional methods are ones this module does not call at all, but helps present uniform stores to users.\n\nFor an example implementation view the connect-redis repo.\n\nThis optional method is used to get all sessions in the store as an array. The should be called as .\n\nThis required method is used to destroy/delete a session from the store given a session ID ( ). The should be called as once the session is destroyed.\n\nThis optional method is used to delete all sessions from the store. The should be called as once the store is cleared.\n\nThis optional method is used to get the count of all sessions in the store. The should be called as .\n\nThis required method is used to get a session from the store given a session ID ( ). The should be called as .\n\nThe argument should be a session if found, otherwise or if the session was not found (and there was no error). A special case is made when to act like .\n\nThis required method is used to upsert a session into the store given a session ID ( ) and session ( ) object. The callback should be called as once the session has been set in the store.\n\nThis recommended method is used to “touch” a given session given a session ID ( ) and session ( ) object. The should be called as once the session has been touched.\n\nThis is primarily used when the store will automatically delete idle sessions and this method is used to signal to the store the given session is active, potentially resetting the idle timer.\n\nThe following modules implement a session store that is compatible with this module. Please make a PR to add additional modules :)\n\ncluster-store A wrapper for using in-process / embedded stores - such as SQLite (via knex), leveldb, files, or memory - with node cluster (desirable for Raspberry Pi 2 and other multi-core embedded devices).\n\nconnect-memjs A memcached-based session store using memjs as the memcached client.\n\nconnect-session-knex A session store using Knex.js, which is a SQL query builder for PostgreSQL, MySQL, MariaDB, SQLite3, and Oracle.\n\nconnect-session-sequelize A session store using Sequelize.js, which is a Node.js / io.js ORM for PostgreSQL, MySQL, SQLite and MSSQL.\n\ndynamodb-store-v3 Implementation of a session store using DynamoDB backed by the AWS SDK for JavaScript v3.\n\nexpress-mysql-session A session store using native MySQL via the node-mysql module.\n\nexpress-oracle-session A session store using native oracle via the node-oracledb module.\n\nexpress-session-cache-manager A store that implements cache-manager, which supports a variety of storage types.\n\nexpress-session-rsdb Session store based on Rocket-Store: A very simple, super fast and yet powerfull, flat file database.\n\nnedb-session-store An alternate NeDB-based (either in-memory or file-persisted) session store.\n\nsession-pouchdb-store Session store for PouchDB / CouchDB. Accepts embedded, custom, or remote PouchDB instance and realtime synchronization.\n\nsessionstore A session store that works with various databases.\n\nA simple example using to store page views for a user.\n\nA simple example using to keep a user log in session.\n\nThis module uses the debug module internally to log information about session operations.\n\nTo see all the internal logs, set the environment variable to when launching your app ( , in this example):\n\nOn Windows, use the corresponding command;"
    },
    {
        "link": "https://dev.to/tristankalos/expressjs-security-best-practices-1ja0",
        "document": "Express.js is a fast, unopinionated, minimalist web framework for Node.js. It's widely used to build web applications, and as such, ensuring that applications built with Express.js are secure is paramount. Here, we’ll walk through ten best practices to help you strengthen the security of your Express.js applications.\n\nHelmet helps secure your Express apps by setting various HTTP headers. It's not a silver bullet, but it can help protect against some well-known web vulnerabilities by setting headers like , , and others.\n\n\n\nVulnerabilities in software are discovered regularly. Using outdated packages can leave you susceptible to these issues. Use tools like or to identify and update vulnerable dependencies.\n\n\n\nRate limiting helps to prevent brute-force attacks by limiting the number of requests users can make within a certain timeframe. For Express.js, you can use the middleware.\n\n\n\nInput sanitization helps prevent injection attacks. It's important to never trust user input and always to sanitize and validate it before processing.\n\n\n\nHTTP traffic is unencrypted, making it susceptible to interception and alteration. Use HTTPS to encrypt data in transit. With Express.js, you can use Node's module in conjunction with fs to read SSL/TLS certificates.\n\n\n\nExpress.js has default error handling, but it's recommended to implement a custom error handling middleware to catch and properly manage errors.\n\n\n\nIf you’re using cookies for session management, use secure + httpOnly flags to prevent client-side scripts from accessing the cookie.\n\n\n\nExpress.js, by default, will expose a stack trace to the client on an error. Turn off stack traces in production to avoid revealing too much.\n\n\n\nIf your application deals with file uploads, ensure you check the file type, limit the size, and scan for malware.\n\n\n\nAlways implement strong authentication and authorization checks. Tools like Passport.js can help you manage these securely.\n\n\n\nWhen you follow these best practices, you're not only protecting your application but also safeguarding users' data and trust in your application. Remember, security is an ongoing effort and requires regular code reviews, monitoring, and updates to stay ahead of potential threats 😉"
    },
    {
        "link": "https://github.com/expressjs/session",
        "document": "This is a Node.js module available through the npm registry. Installation is done using the command:\n\nCreate a session middleware with the given .\n\nNote Session data is not saved in the cookie itself, just the session ID. Session data is stored server-side.\n\nNote Since version 1.5.0, the middleware no longer needs to be used for this module to work. This module now directly reads and writes cookies on / . Using may result in issues if the is not the same between this module and .\n\nWarning The default server-side session storage, , is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing.\n\nFor a list of stores, see compatible session stores.\n\naccepts these properties in the options object.\n\nSettings object for the session ID cookie. The default value is .\n\nThe following are options that can be set in this object.\n\nSpecifies the value for the attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain.\n\nSpecifies the object to be the value for the attribute. By default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting a web browser application.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nNote The option should not be set directly; instead only use the option.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is set.\n\nNote be careful when setting this to , as compliant clients will not allow client-side JavaScript to see the cookie in .\n\nSpecifies the (in milliseconds) to use when calculating the attribute. This is done by taking the current server time and adding milliseconds to the value to calculate an datetime. By default, no maximum age is set.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nMore information about can be found in the proposal.\n\nSpecifies the value for the . By default, this is set to , which is the root path of the domain.\n\nSpecifies the to be the value for the attribute.\n• will set the attribute to .\n• will set the attribute to , the default priority when not set.\n• will set the attribute to .\n\nMore information about the different priority levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nSpecifies the or to be the value for the attribute. By default, this is .\n• will set the attribute to for strict same site enforcement.\n• will not set the attribute.\n• will set the attribute to for lax same site enforcement.\n• will set the attribute to for an explicit cross-site cookie.\n• will set the attribute to for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nNote There is a draft spec that requires that the attribute be set to when the attribute has been set to . Some web browsers or other clients may be adopting this specification.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote be careful when setting this to , as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection.\n\nPlease note that is a recommended option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies. If is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using , you need to set \"trust proxy\" in express:\n\nFor using secure cookies in production, but allowing for testing in development, the following is an example of enabling this setup based on in express:\n\nThe option can also be set to the special value to have this setting automatically match the determined security of the connection. Be careful when using this setting if the site is available both as HTTP and HTTPS, as once the cookie is set on HTTPS, it will no longer be visible over HTTP. This is useful when the Express setting is properly setup to simplify development vs production configuration.\n\nFunction to call to generate a new session ID. Provide a function that returns a string that will be used as a session ID. The function is given as the first argument if you want to use some value attached to when generating the ID.\n\nThe default value is a function which uses the library to generate IDs.\n\nNOTE be careful to generate unique IDs so your sessions do not conflict.\n\nThe name of the session ID cookie to set in the response (and read from in the request).\n\nThe default value is .\n\nNote if you have multiple apps running on the same hostname (this is just the name, i.e. or ; different schemes and ports do not name a different hostname), then you need to separate the session cookies from each other. The simplest method is to simply set different s per app.\n\nTrust the reverse proxy when setting secure cookies (via the \"X-Forwarded-Proto\" header).\n\nThe default value is .\n• The \"X-Forwarded-Proto\" header will be used.\n• All headers are ignored and the connection is considered secure only if there is a direct TLS/SSL connection.\n• Uses the \"trust proxy\" setting from express\n\nForces the session to be saved back to the session store, even if the session was never modified during the request. Depending on your store this may be necessary, but it can also create race conditions where a client makes two parallel requests to your server and changes made to the session in one request may get overwritten when the other request ends, even if it made no changes (this behavior also depends on what store you're using).\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case. Typically, you'll want .\n\nHow do I know if this is necessary for my store? The best way to know is to check with your store if it implements the method. If it does, then you can safely set . If it does not implement the method and your store sets an expiration date on stored sessions, then you likely need .\n\nForce the session identifier cookie to be set on every response. The expiration is reset to the original , resetting the expiration countdown.\n\nThe default value is .\n\nWith this enabled, the session identifier cookie will expire in since the last response was sent instead of in since the session was last modified by the server.\n\nThis is typically used in conjuction with short, non-session-length values to provide a quick timeout of the session data with reduced potential of it occurring during on going server interactions.\n\nNote When this option is set to but the option is set to , the cookie will not be set on a response with an uninitialized session. This option only modifies the behavior when an existing session was loaded for the request.\n\nForces a session that is \"uninitialized\" to be saved to the store. A session is uninitialized when it is new but not modified. Choosing is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing will also help with race conditions where a client makes multiple parallel requests without a session.\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case.\n\nNote if you are using Session in conjunction with PassportJS, Passport will add an empty Passport object to the session for use after a user is authenticated, which will be treated as a modification to the session, causing it to be saved. This has been fixed in PassportJS 0.3.0\n\nThis is the secret used to sign the session ID cookie. The secret can be any type of value that is supported by Node.js (like a string or a ). This can be either a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters. A best practice may include:\n• The use of environment variables to store the secret, ensuring the secret itself does not exist in your repository.\n• Periodic updates of the secret, while ensuring the previous secret is in the array.\n\nUsing a secret that cannot be guessed will reduce the ability to hijack a session to only guessing the session ID (as determined by the option).\n\nChanging the secret value will invalidate all existing sessions. In order to rotate the secret without invalidating sessions, provide an array of secrets, with the new secret as first element of the array, and including previous secrets as the later elements.\n\nNote HMAC-256 is used to sign the session ID. For this reason, the secret should contain at least 32 bytes of entropy.\n\nThe session store instance, defaults to a new instance.\n\nControl the result of unsetting (through , setting to , etc.).\n\nThe default value is .\n• The session will be destroyed (deleted) when the response ends.\n• The session in the store will be kept, but modifications made during the request are ignored and not saved.\n\nTo store or access session data, simply use the request property , which is (generally) serialized as JSON by the store, so nested objects are typically fine. For example below is a user-specific view counter:\n\nTo regenerate the session simply invoke the method. Once complete, a new SID and instance will be initialized at and the will be invoked.\n\nDestroys the session and will unset the property. Once complete, the will be invoked.\n\nReloads the session data from the store and re-populates the object. Once complete, the will be invoked.\n\nSave the session back to the store, replacing the contents on the store with the contents in memory (though a store may do something else--consult the store's documentation for exact behavior).\n\nThis method is automatically called at the end of the HTTP response if the session data has been altered (though this behavior can be altered with various options in the middleware constructor). Because of this, typically this method does not need to be called.\n\nThere are some cases where it is useful to call this method, for example, redirects, long-lived requests or in WebSockets.\n\nUpdates the property. Typically this is not necessary to call, as the session middleware does this for you.\n\nEach session has a unique ID associated with it. This property is an alias of and cannot be modified. It has been added to make the session ID accessible from the object.\n\nEach session has a unique cookie object accompany it. This allows you to alter the session cookie per visitor. For example we can set to to enable the cookie to remain for only the duration of the user-agent.\n\nAlternatively will return the time remaining in milliseconds, which we may also re-assign a new value to adjust the property appropriately. The following are essentially equivalent\n\nFor example when is set to (one minute), and 30 seconds has elapsed it will return until the current request has completed, at which time is called to reset to its original value.\n\nThe property returns the original (time-to-live), in milliseconds, of the session cookie.\n\nTo get the ID of the loaded session, access the request property . This is simply a read-only value set when a session is loaded/created.\n\nEvery session store must be an and implement specific methods. The following methods are the list of required, recommended, and optional.\n• Required methods are ones that this module will always call on the store.\n• Recommended methods are ones that this module will call on the store if available.\n• Optional methods are ones this module does not call at all, but helps present uniform stores to users.\n\nFor an example implementation view the connect-redis repo.\n\nThis optional method is used to get all sessions in the store as an array. The should be called as .\n\nThis required method is used to destroy/delete a session from the store given a session ID ( ). The should be called as once the session is destroyed.\n\nThis optional method is used to delete all sessions from the store. The should be called as once the store is cleared.\n\nThis optional method is used to get the count of all sessions in the store. The should be called as .\n\nThis required method is used to get a session from the store given a session ID ( ). The should be called as .\n\nThe argument should be a session if found, otherwise or if the session was not found (and there was no error). A special case is made when to act like .\n\nThis required method is used to upsert a session into the store given a session ID ( ) and session ( ) object. The callback should be called as once the session has been set in the store.\n\nThis recommended method is used to \"touch\" a given session given a session ID ( ) and session ( ) object. The should be called as once the session has been touched.\n\nThis is primarily used when the store will automatically delete idle sessions and this method is used to signal to the store the given session is active, potentially resetting the idle timer.\n\nThe following modules implement a session store that is compatible with this module. Please make a PR to add additional modules :)\n\ncluster-store A wrapper for using in-process / embedded stores - such as SQLite (via knex), leveldb, files, or memory - with node cluster (desirable for Raspberry Pi 2 and other multi-core embedded devices).\n\nconnect-memjs A memcached-based session store using memjs as the memcached client.\n\nconnect-session-knex A session store using Knex.js, which is a SQL query builder for PostgreSQL, MySQL, MariaDB, SQLite3, and Oracle.\n\nconnect-session-sequelize A session store using Sequelize.js, which is a Node.js / io.js ORM for PostgreSQL, MySQL, SQLite and MSSQL.\n\ndynamodb-store-v3 Implementation of a session store using DynamoDB backed by the AWS SDK for JavaScript v3.\n\nexpress-mysql-session A session store using native MySQL via the node-mysql module.\n\nexpress-oracle-session A session store using native oracle via the node-oracledb module.\n\nexpress-session-cache-manager A store that implements cache-manager, which supports a variety of storage types.\n\nexpress-session-rsdb Session store based on Rocket-Store: A very simple, super fast and yet powerfull, flat file database.\n\nnedb-session-store An alternate NeDB-based (either in-memory or file-persisted) session store.\n\nsession-pouchdb-store Session store for PouchDB / CouchDB. Accepts embedded, custom, or remote PouchDB instance and realtime synchronization.\n\nsessionstore A session store that works with various databases.\n\nA simple example using to store page views for a user.\n\nA simple example using to keep a user log in session.\n\nThis module uses the debug module internally to log information about session operations.\n\nTo see all the internal logs, set the environment variable to when launching your app ( , in this example):\n\nOn Windows, use the corresponding command;"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-handle-sessions-in-express",
        "document": "How to handle sessions in Express ?\n\n﻿ExpressJS is a small framework that works on top of Node web server functionality to simplify its APIs and add helpful new features. It makes it easier to organize your application’s functionality with middleware and routing. It adds helpful utilities to Node HTTP objects and facilitates the rendering of dynamic HTTP objects.\n• Use Session Middleware : Start by installing and configuring a session middleware for ExpressJS, such as\n• Require the Middleware : In your ExpressJS application, require the session middleware and initialize it by passing a configuration object.\n• Session Configuration : Set up the session configuration, including options like secret key, session expiration, and cookie settings.\n• Middleware Integration : Add the session middleware to your method. This ensures that session functionality is available throughout your application.\n• Session Data Access : Access session data within your routes and middleware using the object. You can store and retrieve user-specific data in the session object, such as user authentication status or preferences.\n• Session Management : Implement logic to manage session data, such as creating a session upon user login, updating session data during user interactions, and destroying the session upon user logout or inactivity.\n• Security Considerations : Ensure that session-related data, such as session IDs and sensitive user information, are handled securely to prevent and other security vulnerabilities. Use secure , HTTPS, and other best practices to protect session data.\n• Testing : Test your session handling functionality thoroughly to ensure it works as expected. Use tools like or browser testing to simulate user interactions and verify session behavior.\n• None middleware in your ExpressJS application. This middleware creates a session object on the request ) object, which you can use to store session data:\n• None Once the session middleware is set up, you can access and modify session data in your route handlers:\n• None By default, sessions are stored in memory, which is not suitable for production use. You can use session stores like\n• None uses cookies to store session IDs. Ensure that your application properly handles session cookies and sets appropriate security options, such as , to prevent common security vulnerabilities like session hijacking and\n\nBy following these steps, you can effectively handle sessions in your ExpressJS application, allowing you to maintain user state and provide personalized experiences for your users.\n\nExample: Below is the example to handle session in ExpressJS.\n\n// used to sign the session ID cookie // do not save the session if it's not modified // do not save new sessions that have not been modified"
    }
]