[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",
        "document": "The keys and the values stored with are always in the UTF-16 string format, which uses two bytes per character. As with objects, integer keys are automatically converted to strings.\n\ndata is specific to the protocol of the document. In particular, for a site loaded over HTTP (e.g., ), returns a different object than for the corresponding site loaded over HTTPS (e.g., ).\n\nFor documents loaded from URLs (that is, files opened in the browser directly from the user's local filesystem, rather than being served from a web server) the requirements for behavior are undefined and may vary among different browsers.\n\nIn all current browsers, seems to return a different object for each URL. In other words, each URL seems to have its own unique local-storage area. But there are no guarantees about that behavior, so you shouldn't rely on it because, as mentioned above, the requirements for URLs remain undefined. So it's possible that browsers may change their URL handling for at any time. In fact some browsers have changed their handling for it over time."
    },
    {
        "link": "https://stackoverflow.com/questions/48627611/save-set-preference-into-localstorage",
        "document": "You are doing it all wrong what you should be doing is\n\n1) Bind the click event to the link and then the state of the panel rather than trying to remove the anchor and add another with the onclick attribute, and when you the panel save the state of the panel in a variable say and you will utilize a pseudo selector .\n\n2) On every page load, you should check if there is any variable defined in with the name if there is then you should check what state is saved and show or hide the div on the basis of the saved value.\n\nto get a variable use\n\nto remove the variable use\n\nBelow is the basic code for you, that performs what you want you can modify it according to your needs, it will not run in the SO snippet so I added a for you to see it working, try to hide the panel by clicking the link and then refresh the page you will see that after refresh it will still keep the panel hidden and if you again toggle the panel by clicking the link and again refresh the page it will keep the panel visible.\n\nChange you javascript to the following\n\nChange your to the following"
    },
    {
        "link": "https://staticmania.com/blog/how-to-use-local-storage-in-javascript",
        "document": "How to Boost User Preferences with Local Storage in JavaScript\n\nLocal Storage is a powerful feature in JavaScript. It allows developers to store key-value pairs in a user's browser permanently. Unlike session storage, which clears data when the session ends, local storage data is kept even after the browser is closed. This blog will explore using local storage effectively, its advantages, limitations, and some best practices.\n\nLocal Storage is a feature of the Web Storage API that allows websites to store data in a browser persistently. Unlike cookies, which are sent with every HTTP request, Local Storage data remains on the client side and is not transmitted to the server. This makes it a more efficient way to store non-sensitive data to improve the user experience.\n\nHow to Use Local Storage To store data, use the setItem method: This method stores a key-value pair, where \"username\" is the key and \"JohnDoe\" is the value. The data will persist in the browser until explicitly removed. To retrieve stored data, use the getItem method: Local Storage only supports strings, so objects need to be converted using JSON.stringify(). To retrieve and parse the stored object: Using JSON.stringify() and JSON.parse() ensures that complex data types like objects and arrays are handled properly.\n\nLocal Storage is a useful feature for storing non-sensitive data persistently in web applications. While it's easy to use, developers must be aware of its limitations and security risks. By following best practices, you can effectively utilize local storage to enhance the user experience. Have you used Local Storage in your projects? Share your thoughts in the comments below! 🚀 Need help with Javascript problems in your project? Get in Touch With Us Today!"
    },
    {
        "link": "https://blog.logrocket.com/localstorage-javascript-complete-guide",
        "document": "Editor’s note: This post was updated by Muhmmed Ali on 28 February 2024 to include advanced data management techniques in . Check out our guide to storing and retrieving JavaScript objects in for more information.\n\nIt can be infuriating to accidentally close a webpage while filling out a form. You lose all the data already filled and have to start over. In this article, you’ll learn how to use in JavaScript to save your data beyond a single browsing session. We’ll show you how to use this mechanism and the property, and review the basics of web storage in JavaScript.\n\nWhat is in JavaScript?\n\nis a property that allows JavaScript sites and apps to save key-value pairs in a web browser with no expiration date. This means the data stored persists even after the user closes the browser or restarts the computer.\n\nis a object property, which makes it a global object that can interact with and manipulate the browser window. It can also be used in combination with other properties and methods.\n\nThe mechanism is available via the property. is part of the interface in JavaScript, which represents a window containing a DOM document.\n\nThe interface features a wide range of functions, constructors, objects, and namespaces. is a read-only property that returns a reference to the local storage object used to store data that is only accessible to the origin that created it.\n\nWhen to use\n\nPut simply, is used for storing and retrieving data. While you can store small amounts of data with , it’s not suitable for large datasets. is accessible to anyone who uses the device, so you shouldn’t use it to store sensitive information. You can use it to store user preferences, like language or theme. You can also use it to cache data if you use it frequently. can store form data that won’t be lost if the user closes the browser.\n\nIf you have an application that requires you to log in, can be used to keep your session data. You can remain logged in even after closing and reopening the browser. We’ll demonstrate this later in this tutorial using a simple to-do app.\n\nIn the meantime, for a refresher on how to use in JavaScript, check out the video tutorial below:\n\nIn Google Chrome, web storage data is saved in an SQLite file in a subfolder in the user’s profile. The subfolder is located at on Windows machines and on macOS. Firefox saves storage objects in an SQLite file called , which is also located in the user’s profile folder.\n\nis one of two mechanisms for the Web Storage API, the other being . The Web Storage API is a set of mechanisms that enables browsers to store key-value pairs. It is designed to be much more intuitive than using cookies.\n\nThe key-value pairs represent storage objects, which are similar to objects, except they remain intact during page loads and are always strings. You can access these values like an object or using the method (more on that later).\n\nBoth and maintain a separate storage area for each available origin for the duration of the page session. The main difference between them is that only maintains a storage area. At the same time, the browser is open (including when the page reloads or restores) while continues to store data after the browser is closed.\n\nstores data that won’t expire, while only stores data for a single session. It’s important to note that data loaded in an incognito browsing session will be cleared once the last private tab is closed. ‘s method is useful when temporary data storage is required, and it should be used in situations where data persistence beyond the current session is not required.\n\nTypically, has a smaller storage limit compared to , often limited to a few megabytes per origin. This makes it suitable for storing temporary data during a user’s session without consuming excessive browser resources.\n\n, on the other hand, provides a larger storage capacity, often ranging from 5-10 MB per origin. It is suited for storing larger amounts of data that need to persist across multiple sessions.\n\nin JavaScript is an important tool for storing client-side data. However, it has several advantages and disadvantages you should consider.\n\nThe first advantage of is one we’ve mentioned a few times already, and it is that stored data doesn’t expire. You can still access the data offline, and caches data that can be used without an internet connection.\n\nStoring data with is more secure than storing with cookies, and you have more control of your data. Lastly, has a larger storage capacity compared to cookies. While cookies can only store four kilobytes of data, can store up to five megabytes of data.\n\nis synchronous, meaning each operation only executes one after the other. This poses minimal issues for smaller datasets but as your data grows, this can become a larger issue.\n\nAlthough is more secure than cookies, you still shouldn’t use it to store sensitive data. Anyone with access to the user’s device can access the data stored with . Additionally, can only store strings, so if you want to store other data types, you’ll have to convert them to strings. And finally, storing too much data with can slow down your application.\n\nYou’ve heard it repeatedly by now — stores data. And, if you’re storing data, it means you may need to retrieve it later. In this section, we’ll explore exactly how works. Here’s a rundown of how it works:\n• : Adds key and value to\n• : Passes a number to retrieve the key of a\n\nThe method allows you to store values in . It takes two parameters: a key and a value. The key can be referenced later to fetch the value attached to it. Here’s how it should look:\n\nIn the code above, you can see that is the key and is the value. As we’ve already noted, can only store strings. To store arrays or objects in , you would have to convert them to strings.\n\nTo do this, we use the method before passing to , like so:\n\nallows you to access the data stored in the browser’s object. This method accepts only one parameter, the , and returns the as a string:\n\nThis returns a string with a value of . If the specified key doesn’t exist in , it’ll return . In the case of the array, we make use of the method, which converts a JSON string into a JavaScript object:\n\nUsing the array we created above, here’s how to retrieve it from :\n\nThis method will return the array . You can inspect the webpage, and find it in the console, like this:\n\nThis image is from Firefox, so it’ll look a little different on other browsers. Let’s compare it with another array that’s not stored with :\n\nNow, we have two arrays on the console, as shown below:\n\nNormally, if you comment them out in your code editor, they should disappear from the console. But anything stored with will remain. Here’s an example:\n\nTo delete an item from , you’ll use the method. When passing a key , the method removes the existing key from the storage. If no item is associated with the given key, this method will do nothing. Here’s the code:\n\nHow to delete all items in :\n\nTo delete all items in , you will use the method. This method, when invoked, clears the entire storage of all records for that domain. It does not receive any parameters. Use the following code:\n\nHow to get the name of a key:\n\nThe method comes in handy when you need to loop through keys but still be able to pass a number or index to to retrieve the name of the . Here’s what that looks like:\n\nThe parameter represents the zero-based index of the you want to retrieve the name for.\n\nStoring data in the browser with\n\nWe’ve reviewed all the methods; now we’ll look at them more practically. Here’s a to-do app built with :\n\nSee the Pen \n\n To-do App by Oscar-Jite (@oscar-jite)\n\n on CodePen.\n\nThe app has a very simple HTML markup:\n\nIn the code above, we’ve added two functions, and , that we’ll use later in the JavaScript. The CSS is also simple; you can style it however you like. The important part is the JavaScript. You’ll start by selecting the list where the tasks will be added and the field, as shown below:\n\nNext, you load any pre-existing items in . If there aren’t any, you create an empty , as shown below:\n\nNow, we’ll create a function that adds a task, which would be a , into the empty :\n\nNow, we add functionality to the buttons. The button stores the items in , and the button deletes every item. Here’s the code:\n\nThe function gets the items from the field, . It then adds them to the and saves them to while simultaneously adding them to the list. The function clears all items from , removes them from the list, and resets the .\n\nBoth and cookies are used to store client-side data. As we mentioned before, cookies can only store a maximum of four kilobytes of data, which is significantly less than ‘s five megabytes of storage capacity.\n\nCookies are automatically sent to the server with every HTTP request, but stays local within the user’s device. This can improve web performance and doesn’t increase network traffic because it doesn’t share data with the server.\n\nAs we’ve seen, the data you store with doesn’t expire; it stays indefinitely until you delete it manually. On the other hand, cookies can be set to expire after some time or as soon as you close the browser. Cookies usually store data like user preferences and login/authentication information. This data is accessible across all tabs and windows of the browser. However, only stores data that is accessible within a specific protocol or domain.\n\n, as a type of web storage, is an HTML5 specification. It is supported by major browsers, including Internet Explorer v8. You can use the following snippet to check if the browser supports :\n\nNow, we’ll explore some advanced techniques for managing data in . We will work on how to efficiently remove keys, employ best practices for storing and setting objects, and use JSON parsing and stringification for complex data.\n\nEfficiently removing keys from objects stored in is necessary to optimize storage space, especially if you are building an application where data is frequently updated or deleted. Deleting unnecessary keys helps prevent from becoming clustered with useless data.\n\nTo effectively remove a key from an object in , you can retrieve the object using the key, remove the desired property, and then set the updated object back into . This minimizes unnecessary data manipulation and storage overhead:\n\nJSON parsing and stringification are powerful techniques for handling complex data structures when storing and retrieving data in . They allow for easy conversion between JavaScript objects and JSON strings, enabling efficient data management and manipulation.\n\nWhen storing complex data structures like objects or arrays in , it’s essential to stringify them using before setting them into . This converts the JavaScript object into a JSON string, which can then be stored as a key-value pair:\n\nWhen dealing with nested objects or arrays, ensure that all nested objects are also stringified and parsed to maintain the integrity of the data structure:\n\nIn this article, we explored the capabilities of in JavaScript as a simple and efficient way to store and retrieve data without relying on cookies. We covered how and when to use , as well as how to save, retrieve, and delete items in . Through the example of a to-do app, we demonstrated in action, comparing it to cookies.\n\nIn this post, you learned how and when to use . We covered how to save, retrieve, and delete items in . We also created a to-do app to see how works in a practical scenario. Finally, we compared it to cookies.\n\nSo, you’ve learned about a great tool that’s easy to use with broad browser support. How will you implement in your next project? Happy coding!"
    },
    {
        "link": "https://rxdb.info/articles/localstorage.html",
        "document": "When it comes to client-side storage in web applications, the localStorage API stands out as a simple and widely supported solution. It allows developers to store key-value pairs directly in a user's browser. In this article, we will explore the various aspects of the localStorage API, its advantages, limitations, and alternative storage options available for modern applications.\n\nThe localStorage API is a built-in feature of web browsers that enables web developers to store small amounts of data persistently on a user's device. It operates on a simple key-value basis, allowing developers to save strings, numbers, and other simple data types. This data remains available even after the user closes the browser or navigates away from the page. The API provides a convenient way to maintain state and store user preferences without relying on server-side storage.\n\nLet's dive into some hands-on code examples to better understand how to leverage the power of localStorage. The API offers several methods for interaction, including setItem, getItem, removeItem, and clear. Consider the following code snippet:\n\nWhile js localStorage excels at handling simple key-value pairs, it also supports more intricate data storage through JSON serialization. By utilizing JSON.stringify and JSON.parse, you can store and retrieve structured data like objects and arrays. Here's an example of storing a document:\n\nDespite its convenience, localStorage does come with a set of limitations that developers should be aware of:\n• Non-Async Blocking API: One significant drawback is that js localStorage operates as a non-async blocking API. This means that any operations performed on localStorage can potentially block the main thread, leading to slower application performance and a less responsive user experience.\n• Limited Data Structure: Unlike more advanced databases, localStorage is limited to a simple key-value store. This restriction makes it unsuitable for storing complex data structures or managing relationships between data elements.\n• Stringification Overhead: Storing JSON data in localStorage requires stringifying the data before storage and parsing it when retrieved. This process introduces performance overhead, potentially slowing down operations by up to 10 times.\n• Lack of Indexing: localStorage lacks indexing capabilities, making it challenging to perform efficient searches or iterate over data based on specific criteria. This limitation can hinder applications that rely on complex data retrieval.\n• Tab Blocking: In a multi-tab environment, one tab's localStorage operations can impact the performance of other tabs by monopolizing CPU resources. You can reproduce this behavior by opening this test file in two browser windows and trigger localstorage inserts in one of them. You will observe that the indication spinner will stuck in both windows.\n• Storage Limit: Browsers typically impose a storage limit of around 5 MiB for each origin's localStorage.\n\nContrary to concerns about performance, the localStorage API in JavaScript is surprisingly fast when compared to alternative storage solutions like IndexedDB or OPFS. It excels in handling small key-value assignments efficiently. Due to its simplicity and direct integration with browsers, accessing and modifying localStorage data incur minimal overhead. For scenarios where quick and straightforward data storage is required, localStorage remains a viable option. For example RxDB uses localStorage in the localStorage meta optimizer to manage simple key values pairs while storing the \"normal\" documents inside of another storage like IndexedDB.\n\nWhile localStorage offers convenience, it may not be suitable for every use case. Consider the following situations where alternatives might be more appropriate:\n• Data Must Be Queryable: If your application relies heavily on querying data based on specific criteria, localStorage might not provide the necessary querying capabilities. Complex data retrieval might lead to inefficient code and slow performance.\n• Big JSON Documents: Storing large JSON documents in localStorage can consume a significant amount of memory and degrade performance. It's essential to assess the size of the data you intend to store and consider more robust solutions for handling substantial datasets.\n• Many Read/Write Operations: Excessive read and write operations on localStorage can lead to performance bottlenecks. Other storage solutions might offer better performance and scalability for applications that require frequent data manipulation.\n• Lack of Persistence: If your application can function without persistent data across sessions, consider using in-memory data structures like or . These options offer speed and efficiency for transient data.\n\nWhile localStorage serves as a reliable storage solution for simpler data needs, it's essential to explore alternatives like IndexedDB when dealing with more complex requirements. IndexedDB is designed to store not only key-value pairs but also JSON documents. Unlike localStorage, which usually has a storage limit of around 5-10MB per domain, IndexedDB can handle significantly larger datasets. IndexDB with its support for indexing facilitates efficient querying, making range queries possible. However, it's worth noting that IndexedDB lacks observability, which is a feature unique to localStorage through the event. Also, complex queries can pose a challenge with IndexedDB, and while its performance is acceptable, IndexedDB can be too slow for some use cases.\n\nFor those looking to harness the full power of IndexedDB with added capabilities, using wrapper libraries like RxDB is recommended. These libraries augment IndexedDB with features such as complex queries and observability, enhancing its usability for modern applications by providing a real database instead of only a key-value store.\n\nIn summary when you compare IndexedDB vs localStorage, IndexedDB will win at any case where much data is handled while localStorage has better performance on small key-value datasets.\n\nAnother intriguing option is the OPFS (File System API). This API provides direct access to an origin-based, sandboxed filesystem which is highly optimized for performance and offers in-place write access to its content. OPFS offers impressive performance benefits. However, working with the OPFS API can be complex, and it's only accessible within a WebWorker. To simplify its usage and extend its capabilities, consider using a wrapper library like RxDB's OPFS RxStorage, which builds a comprehensive database on top of the OPFS API. This abstraction allows you to harness the power of the OPFS API without the intricacies of direct usage.\n\nCookies, once a primary method of client-side data storage, have fallen out of favor in modern web development due to their limitations. While they can store data, they are about 100 times slower when compared to the localStorage API. Additionally, cookies are included in the HTTP header, which can impact network performance. As a result, cookies are not recommended for data storage purposes in contemporary web applications.\n\nWebSQL, despite offering a SQL-based interface for client-side data storage, is a deprecated technology and should be avoided. Its API has been phased out of modern browsers, and it lacks the robustness of alternatives like IndexedDB. Moreover, WebSQL tends to be around 10 times slower than IndexedDB, making it a suboptimal choice for applications that demand efficient data manipulation and retrieval.\n\nIn scenarios where data persistence beyond a session is unnecessary, developers often turn to sessionStorage. This storage mechanism retains data only for the duration of a tab or browser session. It survives page reloads and restores, providing a handy solution for temporary data needs. However, it's important to note that sessionStorage is limited in scope and may not suit all use cases.\n\nFor React Native developers, the AsyncStorage API is the go-to solution, mirroring the behavior of localStorage but with asynchronous support. Since not all JavaScript runtimes support localStorage, AsyncStorage offers a seamless alternative for data persistence in React Native applications.\n\nBecause native localStorage is absent in the Node.js JavaScript runtime, you will get the error in Node.js or node based runtimes like Next.js. The node-localstorage npm package bridges the gap. This package replicates the browser's localStorage API within the Node.js environment, ensuring consistent and compatible data storage capabilities.\n\nWhile browser extensions for chrome and firefox support the localStorage API, it is not recommended to use it in that context to store extension-related data. The browser will clear the data in many scenarios like when the users clear their browsing history.\n\nInstead the Extension Storage API should be used for browser extensions. In contrast to localStorage, the storage API works and all operations return a Promise. Also it provides automatic sync to replicate data between all instances of that browser that the user is logged into. The storage API is even able to storage JSON-ifiable objects instead of plain strings.\n\nThe Deno JavaScript runtime has a working localStorage API so running and the other methods, will just work and the locally stored data is persisted across multiple runs.\n\nBun does not support the localStorage JavaScript API. Trying to use will error with . To store data locally in Bun, you could use the module instead or directly use a in-JavaScript database with Bun support like RxDB.\n\nIn the world of modern web development, localStorage serves as a valuable tool for lightweight data storage. Its simplicity and speed make it an excellent choice for small key-value assignments. However, as application complexity grows, developers must assess their storage needs carefully. For scenarios that demand advanced querying, complex data structures, or high-volume operations, alternatives like IndexedDB, wrapper libraries with additional features like RxDB, or platform-specific APIs offer more robust solutions. By understanding the strengths and limitations of various storage options, developers can make informed decisions that pave the way for efficient and scalable applications.\n• Learn how to store and query data with RxDB in the RxDB Quickstart\n• Why IndexedDB is slow and how to fix it"
    },
    {
        "link": "https://stackoverflow.com/questions/35630641/apply-css-dynamically-with-javascript",
        "document": "What is a good way to apply styling dynamically (i.e. the value of styles are created at runtime) to HTML elements with JavaScript?\n\nI'm looking for a way to package a JavaScript widget (JS, CSS and markup) in a single component (basically, an object). The idea would be for the component to encapsulate styling (so users have a nice API to modify it instead of a more tightly coupled approach of modifying the CSS directly and having changes applied indirectly). The problem is that a single API call might imply changes to several styling elements.\n\nThe way I would do it is to construct the CSS and set the atrribute to the proper elements (most likely using the ID to avoid applying changes to other areas of the markup). Is this a good solution? Is there a better way to do it?"
    },
    {
        "link": "https://w3.org/wiki/Dynamic_style_-_manipulating_CSS_with_JavaScript",
        "document": "At this point in the JavaScript section of the Web Standards Curriculum, you’ve already covered the real basics of JavaScript usage, looked at how to target elements using the DOM, and seen how to manipulate them once you’ve successfully targeted them.\n\nIn this article we will look at how to dynamically update the styling applied to your elements by manipulating your CSS at runtime using JavaScript. It uses the same kind of technique that we’ve already seen, but there are a few special considerations to keep in mind when working with the CSS DOM.\n\nThe browser provides an interface to interact with style sheets — in your JavaScript code you can access a list of your style sheets by using . will return a list of all of the style sheets applied to a page, including external style sheets referenced with a element and internal style sheets residing inside elements. If your elements have attributes, you can reference them quickly with .\n\nYou can also add new style sheets to the page — you can use the function to create a new element. This is useful when you want to give site visitors the option of changing your site styles dynamically, using some button controls perhaps. Here is a quick example of how you could create a new style sheet:\n\nRemoving a style sheet is also very simple. First you must obtain the style sheet you wish to remove. You can do this by using , as shown in the small example below. To remove a style sheet you can use the DOM function , where is the style sheet object you wish to remove and is the parent node of our style sheet. As shown in the example below, to remove the style sheet ( ) you first get the style sheet's parent — — then you call with an argument of -\n\nThe accessing style sheets example demonstrates both accessing all styles sheets and adding and removing a new style sheet to the page.\n\nThe object is available through JavaScript, and allows you to access information about a style sheet referenced from the current web page, such as if it is disabled, its location, and the list of CSS rules it contains. For a full list of the properties of the object (and many things besides), check out the W3C Document Object Model Style Sheets documentation.\n\nLet’s consider a (currently) theoretical example — say we have a website where we show a series of technical articles. We want to spotlight some of these articles in a nice animated carousel, but what about users that don’t have JavaScript enabled for whatever reason? Thinking back to our unobtrusive JavaScript knowledge, we want the website functionality to still work for these users, but we might want to style the site differently for those users so that their user experience is still pleasant, even without the carousel.\n\nWhat you want is a style sheet that gets enabled only if JavaScript is enabled. You are in luck — the DOM style sheet interface gives us access to the attribute, which allows us to turn style sheets on or off.\n\nMost of the properties of the object are read only, but some, such as , aren’t.\n\nYou can also use the style sheet properties to help differentiate between multiple style sheets on the page. The property can help you identify external style sheets, but it won’t help you to reference internal style elements. A better way, which allows you to reference both internal and external style sheets individually, is to use the property. If you iterate through you can differentiate between the different style sheets you have included on the page. The following example shows how you can accomplish this iteration:\n\nFor each object retrieved from the array you can access its property to check if it has the title our code is looking for. You can see a functional example of this in the adding and removing rules example, which I will discuss in the next section.\n\nSwitching between different style sheets based on user preference is a fairly common web site feature — using what we have discussed so far, you can set up multiple style sheets and enable only the ones that the current site visitor would want to view. Let’s look at a real example — initially the text is styled, but when we set the attribute to , our defined CSS gets disabled. You can easily turn the CSS back on by setting to . Check out my style sheet properties example for a practical look at how to use this.\n\nRemember the theoretical showcase site we discussed above? Let’s say this site has a list of articles; some are about CSS, some are about HTML, and some are about JavaScript. On our webpage we show all the articles at once, but our user only wants to see the CSS articles. How might we do this? Because all the articles are already being shown, we don’t want to do another round trip to the server to get to a page containing just the CSS articles — that is a waste of time.\n\nTo solve this issue, we can use JavaScript to either iterate through all the articles and only make the CSS articles visible (I’ll discuss how to do this later), or add a rule to one of our style sheets that will make only the CSS articles visible. Using CSS will actually be faster than traversing over all the elements.\n\nOur object has two functions to help us with this problem. First is the function, which looks like this:\n\nis a string containing the rule we would like to add to the style sheet. specifies where within the style sheet’s rule list the rule should be placed. Here is how it might look.\n\nI’ve created an example to demonstrate how the function is used. In this example is a list of all the rules in a style sheet. When the button is pressed it adds a rule with an index of 2 to make the text red by adding the property to the rule. Take a look at the adding and removing rules example.\n\nIf you want to delete this rule, you can call the function , where is the index of the rule you want to be removed.\n\nIn our article showcase example, we can create a rule that turns the display to for all the HTML and JavaScript articles — check out the carousel example to see this in action.\n\nNote: IE does not implement rules according to the standard. Instead of the attribute it uses . IE also uses instead of and instead of .\n\nAt this point you should understand how to edit style sheets connected to the page and create and modify the CSS rules within them. What if you want to change a specific element inside the DOM? Using the DOM API you can access the specific elements of your page. Looking back at our carousel example, functionality is defined so that when you click on an article, that article becomes highlighted while the main article text gets displayed below.\n\nThrough the DOM, you have access to a object that describes the style of an element. This object is defined as a CSSStyleDeclaration; you can see a detailed explanation of this at the W3C documentation of the CSSStyleDeclaration interface. The object doesn’t quite work the same as some of the other properties defined in your HTML element. Unlike or , which return strings, returns an object. This means you cannot set the style by assigning a string to .\n\nThe object has attributes that correspond to the different CSS properties we set. For example, returns the colour that element has set on it. By calling you can apply the style change dynamically. Below is a function that turns an element’s colour to red when you pass it the element’s .\n\nYou could also use to set a style on an element. For example, you could set the colour of an element to red by calling on the element, but be wary as this will erase any changes you have made to the object.\n\nWhen you set the style of an element in this manner it is the same as if you were assigning it as a declaration in a attribute of the element. The style will only be applied if the importance and specificity of the rule is greater than the other rules applied to the element (specificity is explained in the article about the inheritance and cascade of CSS.\n\nSome of you may be wondering what happens when the CSS property being set has a hyphen. The syntax has to be different here, because for example if you write , JavaScript will try to subtract from the notation, which is not what you want to happen. To stop this problem from occurring, all the CSS properties are written out in CamelCase. As shown below, you should write to access the element’s font size. For example:\n\nRemember those stylesheet objects? Well, will return a list of objects representing all the CSS rules contained in the style sheet. You can use these objects just like the objects for the other elements. In this case, rather than changing one specific element on our page, changes here will change all elements that the CSS rules apply to.\n\nIn the example below, the function to make the text bigger uses the object and the function to make it smaller uses . If you set the text to red and then call with the smaller text button, you will notice that our change gets overwritten. Check out the changing element styles example live.\n\nAnother way to alter the style of an element is by changing its attribute. is a reserved word in JavaScript, so in order to access the element’s class, you use . You can append strings to if you want to add a class to an element, or you could just overwrite and assign it a whole new class. Check out the element class names example.\n\nKnowing how to dynamically change the styles applied to your page is extremely useful for building modern, rich interactive web pages — the knowledge presented in this article forms the basis of more advanced techniques such as JavaScript animations. You just need to take care to use your style modifications responsibly, and not use them excessively. As we also discussed above, style modifications can also improve the efficiency of web experiences — showing and hiding content can help to avoid needless trips to the server in certain circumstances.\n• What is the difference between and setting the style through the CSSStyleDeclaration object?\n• List two ways that you could cause all images to have a green border when a user clicks a button.\n• Will changing the CSSStyleDeclaration object of an element always change the element’s style? Why?\n\nNote: This material was originally published as part of the Opera Web Standards Curriculum, available as 48: Dynamic style - manipulating CSS with JavaScript, written by Greg Schechter. Like the original, it is published under the Creative Commons Attribution, Non Commercial - Share Alike 2.5 license."
    },
    {
        "link": "https://stackoverflow.com/questions/11990089/dynamically-change-css-rules-in-javascript-or-jquery",
        "document": "I'm looking for a way to change the CSS rules of my stylesheet imported in the document. So I have an external stylesheet and some and attributes inside. I want to change one of the rules with JavaScript or jQuery.\n\nHere is an example :\n\nSo the idea is to do something in JavaScript and the HTML knows that now the is another color like this:\n\nBut I want to have this rule for every element that I add in the future by the way of append. So if I add a with the CSS class , the text has to be purple and not red."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information",
        "document": "The CSS Object Model (CSSOM), part of the DOM, exposes specific interfaces allowing manipulation of a wide amount of information regarding CSS. Initially defined in the DOM Level 2 Style recommendation, these interfaces forms now a specification, CSS Object Model (CSSOM) which aims at superseding it. In many cases, and where possible, it is best practice to dynamically manipulate classes via the property since the ultimate appearance of all of the styling hooks can be controlled in a single stylesheet. One's JavaScript code also becomes cleaner since instead of being dedicated to styling details, it can focus on the overall semantics of each section it is creating or manipulating, leaving the precise style details to the stylesheet. However, there are cases where actually obtaining or manipulating the rules can be useful (whether for whole stylesheets or individual elements), and that is described in further detail below. Note also that, as with individual element's DOM styles, when speaking of manipulating the stylesheets, this is not actually manipulating the physical document(s), but merely the internal representation of the document. The basic object exposes the and the interfaces. Those interfaces contain members like , , and for accessing and manipulating the individual style rules that make up a CSS stylesheet. To get to the objects from the , you can use the property and access the individual objects by index (e.g., is the first stylesheet defined for the document, etc.).\n\nIn this example the background of the page is set to using CSS. The JavaScript then accesses the property using the CSSOM and changes the background to . <p>The stylesheet declaration for the body is modified via JavaScript.</p> The list of properties available in the DOM from the property is given on the DOM CSS Properties List page. To modify styles to a document using CSS syntax, one can insert rules or insert tags whose property is set to the desired CSS.\n\nThe element property (see also the section \"DOM Style Object\" below) can also be used to get and set the styles on an element. However, this property only returns style attributes that have been set in-line (e.g., accessing on an element defined as returns the string , even though the element may have a declared via a stylesheet). Also, when you set this property on an element, you override any styles that have been set elsewhere for that element's particular property you are setting. Setting the property, for example, will override settings made elsewhere for that element's property in the head section, or external style sheets. However, this will not affect any other property declarations for that element's styles, such as padding or margin or font, for example. To change a particular element's style, you can adapt the following example for the element(s) you want to style. <!doctype html> <html lang=\"en-US\"> <head> <meta charset=\"utf-8\" /> <meta name=\"viewport\" content=\"width=device-width\" /> <title>simple style example</title> <script> function alterStyle(elem) { elem.style.background = \"green\"; } function resetStyle(elemId) { const elem = document.getElementById(elemId); elem.style.background = \"white\"; } </script> <style> #p1 { border: solid blue 2px; } </style> </head> <body> <!-- passes a reference to the element's object as parameter 'this'. --> <p id=\"p1\" onclick=\"alterStyle(this);\"> Click here to change background color. </p> <!-- passes the 'p1' id of another element's style to modify. --> <button onclick=\"resetStyle('p1');\">Reset background color</button> </body> </html> The method on the object returns all styles that have actually been computed for an element.\n\nNote that you can also change style of an element by getting a reference to it and then use its method to specify the CSS property and its value. Be aware, however, that removes all other properties that may already have been defined in the element's object. If the element above had an in–line attribute of say , that value would be removed by the use of ."
    },
    {
        "link": "https://tiny.cloud/blog/change-css-dynamically",
        "document": "Static websites are fine, but when site design changes are needed, and a disagreeable component won’t allow dynamic CSS change, it’s frustrating. It’s also disappointing for your customers and users, who expect parts of the app appearance to dynamically change when they’re interacting with it.\n\nIn these situations, it’s generally best to look into an alternative component – one that responds to events, and can change its appearance. If your application needs a reliable rich text editor that can change CSS dynamically, one of your first (and often best) options is TinyMCE. It’s a widely trusted editing component that can change CSS and design properties using JavaScript.\n\nDynamic CSS change is useful for a variety of solutions. And TinyMCE has the ability to flexibly integrate into projects such as:\n• Content Management Systems that need to change design based on different audiences.\n• Document Management Systems which have different security roles, and need a different design for each role\n• Learning Management Systems, where there are clearly defined student created or instructor and educator created content, which need their own designs\n\nThis post is a guide on how to change CSS dynamically with TinyMCE – producing a design that responds to events and easily shifts appearance.\n\nHow to change CSS with JavaScript dynamically\n\nYou can manipulate your application’s CSS at runtime using JavaScript, by getting the stylesheets of the application using the document.styleSheets method, and then parsing the list of CSS style rules returned. You can then insert a new CSS rule into the stylesheet. For example, you might have the following CSS stylesheet linked in your application:\n\nTo change it dynamically with JavaScript, you could run the following code to retrieve the stylesheet, and then add a transition to the HTML element:\n\nThe element will now transition from one color to another on hover. Check on the complete list of style options you can configure to see the scope of the dynamic CSS changes you can make.\n\nThe following demo sets up TinyMCE with a stylesheet in an HTML page so that you can try out dynamic CSS changes within the rich text editor.\n\nFirst, you need an API key. This key gives you free access to TinyMCE Premium plugins for 14 days. Navigate to the Get-tiny sign up page to get your FREE rich text editor API key.\n• Create an index.html file, and add the following HTML:\n• With your file open, in the head section, add script tags, and reference TinyMCE Cloud through a CDN link within the script tags. This is what the link looks like:\n• Add another pair of script tags, add the following JavaScript. It’s the tinymce.init method, and it’s how you control TinyMCE:\n• Add initial HTML content, and the CSS selector class to some textarea tags. The selector is set as an id with the value “editor”. This links to the selector option in the TinyMCE init script.\n\n\n\nThis content also includes an id and a class that’ll link to a stylesheet created in the next steps:\n• Create a stylesheet, and place it inside the head section of the demo HTML:\n• In the TinyMCE init script, add the content_style option:\n• Add the following CSS to the content_style option. Content in the editor will essentially be invisible with the opacity value set to 0:\n• Save the changes, and then test run the index.html file by opening it in your browser, or use a local server command with Python or with the PHP command.\n\nThis example has the opacity set above 0 to 0.5 for demonstration purposes:\n\nTinyMCE is designed for ease of implementation, and customization. This means there’s a wide array of solutions where TinyMCE could dynamically change CSS.\n\nHowever this demo is restricted to a limited scope, and the following procedure shows how TinyMCE can dynamically change CSS when the focus and blur events happen. This could fit into a variety of situations where the editor needs to remain less noticeable in the user interface, until it is needed.\n• Add the setup option along with a function to the TinyMCE init script:\n• Inside the new braces, set a function activated by the focus event:\n• Add the following API call, which makes use of the addClass TinyMCE DOM utility command. They’re methods designed for interacting with the TinyMCE DOM, and making changes, which includes dynamically changing CSS.\n\nThe JavaScript also contains a console message that prints to the developer tools console to confirm that the script is working:\n• The previous step introduced a class, following the syntax of the addClass() API method. Setup this class in the TinyMCE content_style option by adding the following CSS:\n• Save the changes, and then test out the dynamic CSS change. When TinyMCE is in focus, the body tags receive the online class, and change their appearance:\n\nThe CSS and design changes dynamically when the focus event happens, but what about changing the editor back when focus changes? To do this, add to the demo’s setup option with a event handler that responds to the blur event”\n• Add a second event handler function for the blur event:\n• Include the API method for removing a class. This is important because without a method to remove the online class created in the previous section, the result will be a body element with multiple, conflicting classes added on. This means the style won’t change.\n• Include the API method to introduce a low opacity design choice with the offline class:\n• Confirm the script is running with a console message:\n• Modify the content_style content to include an offline class with the low opacity and design choice:\n• Save the changes, and then give the dynamic CSS change a try. You should see the following:\n\nThe JavaScript is dynamically changing the CSS in response to the focus and blur events, but something is wrong. The opacity design choice for the blur event is persisting despite the editor having focus.\n\nTo fix this, make use of the TinyMCE DOM utility API methods already used earlier in the demo.\n• Modify the focus event handler to remove the offline class from the body element:\n• Save the change, and run the demo again. This time, the dynamic CSS change works:\n\nMake use of TinyMCE’s APIs for dynamic CSS change because the alternative is writing more JavaScript, and making sense of more information from the application to get the dynamic CSS change working.\n\nIn the demo, the TinyMCE addClass and the removeClass methods save effort and time in delving through the HTML DOM and parsing document objects to style different sections. It demonstrates how TinyMCE provides full features out-of-the-box like the API utility that makes integration easier.\n\nFor example, to access the TinyMCE DOM without the support of the utility APIs, you might need something like the following:\n\nUsing the classList property, you could check whether the offline class appears in the body element, or not. The advantage of TinyMCE’s APIs here is that instead of checking for the class and removing it, the API essentially checks and removes in one step. There is no need to think about variables and if else statements.\n\nHow to change CSS dynamically in React\n\nThe same methods used in the preceding sections (for changing CSS dynamically with JavaScript) also work within frameworks. TinyMCE integrates into all the main, popular frameworks available for development. As an example, here is how to change CSS dynamically when TinyMCE integrates into the React framework:\n• Create a new React project in your development environment:\n• In the new React project, install the TinyMCE React integration through npm or yarn, depending on your package manager:\n• Open the App.js file, and include the following content, which is adapted from the demo in the previous sections:\n• Save the changes, and then start the React demo:\n\nAccessibility is a major area where this ability could become useful. In this case, you could change TinyMCE to a high contrast mode, or a mode with alternative colors – both of which are helpful to viewers living with colorblindness.\n\nFor instance, you could create a new class in the TinyMCE content_style option that loads high contrasting design content:\n\nYou could even create a new stylesheet for the editor, and introduce it with the loadCSS() API method. TinyMCE’s effortless customization options unlock a diverse range of design options for your dynamic application.\n\nIf you have any questions or thoughts on DOM utility options within TinyMCE, check on the blog article that introduces the DOM utility API methods, or contact us for more information."
    }
]