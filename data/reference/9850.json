[
    {
        "link": "https://fivemx.com/tutorials/lua-scripting/introduction-lua-scripting",
        "document": "This guide aims to introduce readers to LUA scripting within the context of FiveM, a popular modification framework for GTA V. We will cover the essentials of LUA, how it integrates with FiveM, and the steps required to set up a development environment using Visual Studio Code (VSCode). By the end of this post, readers will have a working development environment and a basic understanding of LUA scripting for FiveM.\n\nIs LUA hard to learn? Well, every beginning is difficult – but LUA is a very easy coding language.\n\nLUA is a lightweight, high-level programming language designed for embedded use in applications. It is known for its simplicity, ease of integration, and fast execution. Originally developed in 1993, LUA has been widely adopted in various domains, particularly in game development, due to its flexibility and minimalistic syntax.\n• Lightweight: The entire LUA interpreter is small, making it ideal for embedding in other programs.\n• Easy to Learn: LUA’s syntax is straightforward and easy to grasp, which makes it a great choice for beginners.\n• Flexible and Dynamic: LUA supports dynamic typing and flexible object-oriented programming, which allows for rapid prototyping and modifications.\n• Extensible: LUA can easily be extended with custom libraries and functionalities, making it highly adaptable to different needs.\n\nWhy Use LUA in FiveM?\n\nIn the context of FiveM, LUA is the primary scripting language used to interact with the game engine. It allows developers to write scripts that can:\n• Interface with external data sources and APIs. (even ChatGPT)\n\nThe FiveM code provides a rich set of native functions and event handlers that can be accessed via LUA scripts, making it possible to extend and customize almost every aspect of the game.\n\nIntroduction to FiveM and its LUA Scripting Capabilities\n\nFiveM is a multiplayer modification framework for GTA V, enabling players to connect to dedicated servers with customized game modes and content. Unlike the standard multiplayer mode of GTA V, FiveM allows server owners to use mods, scripts, and custom assets to create unique experiences for players.\n• Server-Side Scripting: Scripts that run on the server, handling tasks such as player authentication, data storage, and world events. -> server.lua\n• Client-Side Scripting: Scripts that run on individual player clients, allowing for custom UI elements, client-side event handling, and interaction with server-side scripts. -> client.lua\n• Shared Scripting: Scripts that can be executed on both the client and server, enabling synchronized actions and shared functionalities. -> shared.lua\n\nWith FiveM, developers can create custom game modes such as roleplay servers, racing competitions, and mini-games. LUA serves as the backbone for these scripts, providing the logic and control needed to interact with the game world and players.\n\nTo start scripting with LUA in FiveM, you need to set up a suitable development environment. This section will guide you through the process of installing Visual Studio Code, configuring it for LUA development, and setting up a basic FiveM server environment to test your scripts.\n\nVisual Studio Code is a free, open-source code editor developed by Microsoft. It’s lightweight, feature-rich, and supports various programming languages, including LUA.\n• Download VSCode:\n• Download the installer for your operating system (Windows, macOS, Linux).\n• Run the installer and follow the installation instructions.\n• Install LUA Extensions:\n• Open VSCode.Click on the Extensions icon on the left sidebar or press .Search for “Lua” and install an extension such as “Lua Language Server” or “Lua Plus.” These extensions provide syntax highlighting, code completion, and other useful features.\n\nTo write and test LUA scripts, you need a local FiveM server setup. Follow these steps to create your development environment:\n• Extract and Configure the Server:\n• Create a new folder on your computer (e.g., ).\n• Extract the FiveM server files into this directory.\n• Inside the server folder, create a new subfolder named . This is where your custom scripts and resources will reside.\n• Create a Basic Server Configuration:\n• In the root of your FiveM server folder, you will find a server.cfg\n• This file is the configuration file for most settings:\n• Create a Script Directory:\n• Inside the folder, create a new directory for your script, e.g., .\n• Create the Script Files:\n• The file is a metadata file that tells FiveM about the resources in this directory. Add the following lines to :\n\nIn , write a simple LUA script that outputs a message to the server console:\n• Save the files and restart your FiveM server.\n• Check the server console for the message “Hello, FiveM! This is my first LUA script.” This confirms that your script is loaded and running successfully.\n\nLUA’s syntax is designed to be simple and clean. Understanding the basics is essential for effective scripting in FiveM.\n• Variables do not need to be declared with a type. LUA automatically assigns types based on the value.\n• Nil: Represents the absence of a value.\n\nExample of Variable Declaration and Data Types in LUA:\n\nPrint Function: The function outputs messages to the console. It’s useful for debugging and displaying information.\n\nServer Event Handlers: FiveM uses event-driven programming. You can define functions that run in response to specific events, such as a player joining the server.\n\n3. Setting Up LUA Coding Standards and Best Practices\n• Use Meaningful Variable Names:\n• Instead of naming a variable , use or . This improves readability and maintainability:\n• Consistent Indentation:\n• Proper indentation improves code readability. It’s a good practice to use 4 spaces or a tab for each level of indentation\n• Comment Your Code:\n• Use comments to explain complex logic or important sections of code\n• stands for “protected call.” It executes a function in protected mode and catches any errors.\n• Use statements to check the values of variables at different stages.\n• Keep an eye on the server console for error messages and warnings.\n• Break down complex functions into smaller parts to isolate and test specific functionality.\n\nLet’s create a simple chat command that players can use to greet each other. This example will illustrate how to handle player input and respond with a custom message.\n• Modifying the Script to Add a Chat Command:\n• Edit the file to include the following code:\n• This script registers a new command . When a player types this command in the chat, the server responds with a greeting message.\n• Testing the Chat Command:\n• Connect to the server using the FiveM client.\n• You should see a message like “Hello [Your Name], welcome to the server!” displayed in the chat.\n\nAs your scripts become more complex, organizing your project files becomes critical. Here are some tips for managing your FiveM LUA scripts effectively:\n\nDirectory Structure: Keep related scripts in separate folders within the directory. For example, create separate folders for player-related scripts, vehicle scripts, and UI scripts:\n\nModular Scripting: Break your scripts into smaller modules that handle specific tasks. This makes it easier to maintain and update individual components without affecting the entire script.\n\nUse a Version Control System: Consider using Git to track changes to your scripts. This allows you to roll back to previous versions if something breaks and collaborate with other developers more effectively.\n\nDocumentation: Document your code thoroughly. Create a README file in each project directory explaining what each script does, how to use it, and any dependencies it may have.\n\nNow that you have set up a basic development environment and written your first LUA script, you can explore more advanced topics in subsequent blog posts. These will include:\n• Basic LUA Syntax and Commands: Learn the essential syntax, data types, and commands in LUA.\n• Creating and Using Functions: Understand how to define and use functions in LUA to modularize and reuse code.\n• Conditional Statements and Looping Structures: Learn how to use if-else statements and loops to control the flow of your scripts.\n• Working with Tables: Discover how to use tables to manage complex data structures.\n• Error Handling and Debugging: Explore advanced techniques for catching and handling errors.\n• Using External Libraries and Modules: Learn how to integrate external libraries into your LUA scripts.\n• File I/O Operations: Understand how to read from and write to files.\n• Creating User Interfaces with NUI: Learn to create interactive UI elements using NUI (Native User Interface).\n\nSetting up a development environment for FiveM LUA scripting using VSCode is the first step towards creating rich, customized gameplay experiences. With this foundational setup, you can begin writing scripts to enhance your FiveM server. The example scripts and exercises provided here are just the beginning. As you gain more experience with LUA and FiveM, you’ll be able to create more complex and engaging scripts, pushing the boundaries of what’s possible in GTA V.\n• Modify the Greeting Command: Update the command to accept an additional parameter. If a name is provided, greet that name; otherwise, greet the player who used the command.\n• Create a New Command: Write a new command that broadcasts a message to all players on the server.\n• Error Handling Practice: Introduce error handling to check if a command is used without the required parameters and provide feedback to the player."
    },
    {
        "link": "https://forum.cfx.re/t/howto-fivem-lua-scripting-complete-not-yet-guide/1467797",
        "document": "\n• Give some guidelines for the ones who are just starting to code;\n• Provide help for those who are already experienced;\n• Help the ones who are struggling with some of fx framework functionality;\n• Spread my own knowledge and explore what I did not know yet.\n\nWill make YouTube videos for all lessons and upload them to the\n• We will go through basics of FiveM scripts and their structure;\n• You will create a basic resource and script that prints Hello world! to client’s console. For the lesson you will need:\n• A server on which you would have a full access to files and an ability to control resources (start, stop them);\n• Basic knowledge and skills in work with text editing software;\n• Any text editing application of your choice used for programming codes. FiveM servers are programmed using multiple different resources (scripts). It makes it simple to write, understand, share, import and manage. Most of the resources work independently, but they can use functions from other resources or tell them to do specific actions.\n\n Resources can have server, client or both scripts. The difference between these 2 is that client scripts run on client machine and does not interrupt server (if it is not instructed to do so). While server scripts run on the server and complete tasks there unless a task on any of the client’s machine is triggered. Picture below represents that all client scripts run separately on each client machine and server scripts are running only on server.\n\n \n\n A thing to note is that client can not trigger tasks on other client’s machine directly. It has to go through server. For example if client A wants to send a message to a client B it must be triggered through server task as obviously none of the clients have a direct connection to each other, they are all connected through server. Starting from very basics. In this lesson you will learn how to create a basic client sided script that prints to clients console and chat.\n• In your server directory locate a folder. Create a new folder called (it is important that this folder name would not have any spaces)\n• Open the folder you just created and create two new text files and . Your folder should look like this.\n• Open file that you just created using any text editor of your choice (I recommend Notepad++ or Virtual Studio Code)\n• This file is used to provide specific information about the resource like scripts that it will be using, version, game, dependencies, it can also have version or description.\n• What you should type in for now is game, , and script used in resource. Enter the fx_version:\n• Specify the game that you will be using the resource for it can either be (Grand Theft Auto V) or (Red Dead Redemption 3).\n• Specify script(s) that you will use for the resource\n• Now when the manifest is created and script used is specified you can start creating the script itself. Open the file that you have created before.\n• Simply write a line that will print a string to client’s console\n• Connect to your server if you haven’t yet. Press and type refresh. This will refresh the list of your resources. A message with new resource should appear.\n• In the console type in start hello_world. This will start the resource you have just created and start the actions you have given to it, which in this case is print Hello World! If you want the resource to be started every time the server launches type in the same in file`.\n\nYou will get most value out of this course if you will follow lessons it in sequence.\n• You will be introduced to variables and functions;\n• We will talk about what is the difference between events and functions;\n• You will create a script resource that uses variables and functions;\n• You will create an event and learn how to use them; For this lesson you will need:\n• A knowledge of how to create resources; Variables are holders of a specific data and can be used anywhere in it’s scope. Most of the times in FiveM scripts you will use local variable scope as global variables are only registered in scope of the same resource and the same machine. That means that variables registered on server sided script can not be directly accessed inside of client sided script.\n\n Lua language does not require to specify a type of variable. The type is being assigned automatically, so often it is recommended to assign an empty or default value to the variables that are being registered. local c = 5 -- creates variable c is holding an integer value of 5. local d = 10.3 -- creates variable d is holding a floating point value of 10.3. local s = '' -- creates variable s is holding an empty string type variable. local t = {1, 2, 2, 5} -- creates a table called t. Knowledge of functions, variables and their usage is inevitable skill that must be equired by everyone who wants to create any complex scripts, make them more clean, easier to read and edit. Any repetetive code can usually be replaced with functions and/or variables using use that is a good programming practice. 2.1 Creating and using simple functions and variables Lets modify the resource created last time and register a command that uses variables and functions.\n• Open client.lua file from resource that you have created on your last lesson.\n• Now the function is empty and would not do anything if it was called. Let’s move the line that prints to this function, so it prints the line whenever the function is called.\n• Let’s add a variable that holds a number and call it . And print it together with function printHello() local age = 5 -- Prints Hello World! My age is 5 print('Hello World! My age is ' .. age) end As you can see the variable age was used in the line that would be printed and the value that it has assigned would appear on screen. But! it is not being called and to call it we will use a command.\n\n You can use double dots to connect strings or other variables to a single string.\n• Register a command using native function. You need to pass three arguments to this function: , , .\n\n defines what user has to enter in order to trigger the code inside function and tells if the command is restricted to any permission level. More about this native you can find here RegisterCommand - FiveM Natives @ Cfx.re Docs.\n• Now let’s call the function that we have recently created. To call a function you just need to enter it’s name and closed parentheses.\n• Restart or start your resource in server and try using command . The line prints to the client’s console.\n• Command function handler is holding two variables: and .\n\n variable holds player’s that enters the command server id.\n\n is holding an holds a table of words (not strings, you will see that later) that were enterd after command. Each word would be a seperate element of the table. That means that if player types in to the chat '/printhello my name is Mike ’ the args table would look like this:\n\n args = {'my', 'name', 'is', 'Mike'}\n• Let’s modify our function and give it some parameters. You can enter any parameters names inside parentheses of function to be used locally in the function. Let’s add a parameter and call it name. This will hold a name that the client can enter.\n• Change the function for it to use the name variable. Let’s add it to the string that gets printed. print('Hello, my name is ' .. name .. ' I am ' .. age) Now you can use the function to print a name that client enters together with command. To implement this you need to pass the parameters over to the function when calling it. That you can do by entering them inside the parentheses on function call.\n\n If your function accepts more than one parameter they have to be passed in the same order as they are registered.\n• Create new variable, inside command handler, called and assign an argument that client enters together with the command. As data of words does not have any data type assigned to it you need to use function that converts data to string type. As the is a table of data you need to specify which of table’s element you want to use.\n\n In this case if player would enter John Johnson only John would be assigned to variable. Task\n\n Modify the function and add a new parameter called . Create new variable called inside handler, assign second argument to it ( ) and pass it as a parameter to function.\n\n Hints:\n\n *Multiple function parameters have to be seperated using comma ( );\n\n *You can use function if you want to convert the argument to . 2.2 Creating, using events and what is their difference between functions Events are using functions as handlers, but events make it slightly more flexible, they can be triggered between different resources. Events registered in server script can be triggered from client and visa versa. They are used as main link between client and server scripts as they can be used to pass any data both ways server to client or client to server. Basically it can be used as a way to tell another machine to do specific tasks.\n\n About other characteristics of events you will learn later.\n\n Let’s create a small server sided script with an event that prints a line to all clients who are in server.\n• Inside your hello_world resource folder create new file called . This file will be used to write code that will be executed in server side.\n• Open file that is inside your resource folder. Add the following code to specify that the file you just created will be used in server side.\n• Open server.lua file and register new event called . It is recommended to write resource name in front of event name in order to avoid redundant names as events in other resources can be called the same.\n• Once event is registered you can add event handlers. Same as command - event has a which contains code of the event. You can add event handlers anywhere, even in other resources and once the event gets triggered code in all of the handlers will be executed.\n• Open your client.lua file, create new command called and trigger server event using function.\n• In order to add message to player’s chat you need to trigger an event called which is registered in native chat resource and it can can accept 3 parameters , , . can be any variable and is printed in front of . This time we just gonna use author parameter and pass text that we want to print to it.\n\n When client event is triggered in server side code second parameter passed after event name must be player server ID, this time if we want to send it to all clients just use -1 which will trigger the event of all clients.\n• Run the resource, try using command and all players will get the message to their chat. Task\n\n You are able to add multiple event handlers, even in other resources (only thing to keep in mind is that they have to be on the same side – server events on server side and client on client). Your task is to create a new resource called and add new event handler of event you created.\n\n Hints:\n• Add another handler for – event that you created today;\n• Write code that prints Player used command in server console.\n\n 2.3 Understanding how events are triggered and executed You will get most value out of this course if you will follow lessons it in sequence.\n• You will see how events are being executed;\n• You will see how server sided scripts can be used to send data between clients;\n• You will see how functions are being differently executed from events;\n• You will create a resource that can be used by client to send message to another client. As mentioned before events can be used to send certain data between server as well as clients. This time you will create a resource that can be used to send a message from one player to another.\n\n In this case some of code is not necessary for functionality, but this lesson is just for you to understand events more in depth. 1.Create new resource called and add file together with file.\n• In file create new event called . Add parameters and to it. These will hold client’s who receives message id and text of message. Make it trigger server event called and pass the same parameters. We will create this event later.\n• Create another event called . Make it accept parameter and print it in chat. This will be used to display message for client that receives it.\n• Now create a command that will be used to send the message. Message should have a receiver id and text as arguments. Create new variable that will hold the id of client who receives message.\n• As mentioned before is holding each word separate as a table. For that we need to use method to connect the table elements to a single string. You need to pass name of table to it, followed by a string that will separate elements and id of element on which you will start connecting them. Since we using first element as player id, we skip it and start from second one. RegisterCommand('dm', function(source, args) local clientId = tonumber(args[1]) local message = table.concat(args, ' ', 2) end, false) >Command example - /dm 15 Hello, how are you? >In this case player with id 15 will get message `Hello, how are you?` 6, Now you can trigger event you created before and pass the variables as parameters. After the initialization of message and clientId trigger the event.\n• Open the file in this resource and create new event. And add the 2 parameters to it: , .\n• Trigger the client event that displays message and pass to it as a parameter.\n• The problem in this case would be that server would not know who is the receiver and for which client it should trigger the event. As mentioned before before you can add another argument between event name and it’s parameters which will be taken as id of client for which the event will be triggered. Last time we used which was triggering the event for all clients online. This time we have that holds the id of client we need. Let’s add it.\n\n TriggerClientEvent(‘messages:showReceivedMessage’, target, message)\n• Now you can join server, start the resource and try sending message to another player or yourself if you are alone using id. Summary\n\n In the diagram below you can see how this resource will work. After command is typed in a server event is triggered with and parameters. When server event is triggered it looks for id of client which is equal to and triggers it’s with as a parameter.\n\n\n\n3.0 Creating actions that are concitantly happening. Introduction to threads You will get most value out of this course if you will follow lessons it in sequence.\n• You will be introduced to threads and their capabilities;\n• You will create a script that runs a thread. For this lesson you will need:\n• A knowledge of how to create resources;\n• A knowledge of how to use functions; Threads is one more useful tool that is used in lots of scipts and is simple to implement using Citizen framework. It gives you an ability to do pretty much any tasks continuously or repeatedly while it does not interrupt any other actions and not being interrupted itself.\n\n Thread is also an essential tool used for many FiveM and GTA V mechanics. For example in order to draw a marker or text a function has to be called every frame it has to be show. So if you would like to show a marker you would have to put in a thread and while loop. Let’s try that.\n• Create new resource called , create file inside your newly created resource folder, create file and add it to fxmanifest.\n• To create thread you can use the following code:\n• In order to create constantly shown marker you need to a while loop.\n• While loops are loops that repeat code that’s inside it while condition is true. In this case we hardcoded it to true, so we will have the actions repeating for as long as player is in server. You also need to add otherwise game will crash once loop starts.\n\n while loops are usually used when times of repeats is not known in advance.\n• We will create script that constantly prints player character’s coordinates on his console. All player controllable characters as well as non player characters (NPS’s) in GTA V are described as peds (pedestrians). In order to get any player’s coordinates we need to get the ped which is player controllable entity. Add the following line above your while loop.\n• No when we have the player character id, we can use it to get it’s coordinates. Use native function and insert ped as an argument. Assign it to new variable in your while loop block after function. We are initializing ped variable outside of while loop because it is static – player ped id does not change during time. And as you can see we are initializing variable inside while loop as it might change and should be constantly refreshed. Not putting ped initialization inside while loop allows as to save some performance.\n• Now that we have player coordinates constantly initializing we are ready to print them. Use print and add as an argument.\n• The only problem now is that it will be printed every frame. To avoid that put a higher wait value. Lets set it to 5000 which is in milliseconds, so that would translate to 5 seconds.\n• You can now start or restart the resource and open console using . You will see player coordinates printed every 5 seconds in .\n\n is a data type that stores 3 float numbers. That’s what function returns. To get the numbers separately you could use , , . Task\n\n Now when you know how to get player character’s position try drawing two markers using native function. One of them should be drawing a marker on some random place in map an another one directly on player.\n• Remember that you will need to call the function every frame so set parameter to 0.\n• You can find what parameters you need as well as a code example the link (you should only focus on marker’s coordinates for now.) DrawMarker - FiveM Natives @ Cfx.re Docs\n• For static marker create new vector3 variable and set coordinates of your choice to use as a parameter for function. You will get most value out of this course if you will follow lessons it in sequence.\n• You will write an algorithm that is quite popular for actions that markers trigger;\n• Send chat message to player when he steps on marker. For this lesson you will need:\n• A knowledge of how to create resources; Usually markers are meant to have some functionality – when player steps inside them something happens. Markers do not do that by them selves, a separate code should be added that checks if players is in the same position as the marker and only then trigger the tasks.\n\n There is a variety of algorithms and logic that can be used with markers. Today you will be shown one of the most popular and most effective ones. This one works pretty well and easy to write when there are more than one markers to be drawn by the same resource.\n• Create new resource called and add client.lua file to it.\n• Add a vector3 that will be used for marker position. And set any coordinates of your choice\n• Inside of your file create a new thread with while loop inside that will be used for all marker logic. Also register and initialize variable which will be used to calculate distance between marker and player character.\n• Now let’s draw the marker using the coordinates. First of all let’s get player character coordinates and check how far the player is from the position of marker. We can use lua’s native functionality which gives us an ability to get distance between two coordinates written in vectors. Use .\n• Now let’s check how far the player is from the position of marker and only display it if player is close enough (not more than 100 meters away). Also if player is further away than 100 meters there is no need to keep checking if he gets closer every frame, so we can add else block that will wait for 2 seconds. That means that if player is further away than 100 meters the distance will be checked every 2 seconds, otherwise every frame. That will let us to save some performance leaks. if distance < 100.0 then DrawMarker(1, pedCoords.x, pedCoords.y, pedCoords.z - 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 255, 128, 0, 50, false, true, 2, nil, nil, false) else Citizen.Wait(2000) end\n• Connect to server, start the resource and you will be able to see the marker in coordinates you assigned for it unless you get further away than 100 meters.\n• Right above if statement add new variable called and assign false to it.\n• But it still does not have any functionality and nothing happens if you step inside it. That we will implement now. Inside if block add another if statement that will check if player is closer than 2 meters away from marker which would be inside the marker. If so assign true to isInMarker variable and false otherwise. if distance < 100.0 then DrawMarker(1, pedCoords.x, pedCoords.y, pedCoords.z - 1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 255, 128, 0, 50, false, true, 2, nil, nil, false) if distance < 2.0 then isInMarker = true end else Citizen.Wait(2000) end\n• Now at the very bottom of thread function we can implement any functionality for the marker. Let’s just print some message to player’s chat. Add the following at the bottom of thread function. if isInMarker then TriggerEvent('chatMessage', 'You are inside the marker') end\n• If you would join the server, start the resource you would see that you keep getting the message constantly, that happens because the chat message is triggered every frame, together with function\n• To avoid it we need to check if client has already got the message. At the top of you file initialize new variable called and assign to it.\n• Then add an else block to statement which checks if players is less than 2 meters away. That will reset to , so after player moves away from marker and then steps back in he will get message again. if distance < 2.0 then isInMarker = true else HasAlreadyGotMessage = false end\n• And change if block which sends the message. This will check if player has already got the message and set to , because the message will not be sent if isInMarker and not HasAlreadyGotMessage then TriggerEvent('chatMessage', 'You are inside the marker') HasAlreadyGotMessage = true end\n\nYou will get most value out of this course if you will follow lessons it in sequence.\n• You will learn how to manipulate data in arrays, tables;\n• You will learn how to use different string functions to change string variables. You must be familiar with different data types if you want to be able to tidely work with more complicated resources. You need to know how to use arrays - manipulate their data, change it, how to access it.\n• You will learn how to write and access data from simple arrays.\n• Create a new resource called my_array, create and files and add the file to manifest. Initiation of Array and table is exactly the same in lua language, but if you assign a key name for value it will become a table.\n• Then put in some values into the array dividing them by a comma(,).\n• If you want to print out the array and see it’s values you could use : json is a format that can store different parameters or data in a string. Useful to transfer data or store it in database.\n• If you would like to access a single element from this array you could use at the end of array. In some programming languages keys for array values are assigned from 0 upwards in lua it is from 1 upwards.\n• If you would like to access each value seperately an efficient way to use it would be with loop. Using it we could calculate sum of all elements. If you want to get size of an array or table you can use in front of it. We used it in this for loop so we go through each of the elements until the last one.\n• Another way to write the for loop is by using or . That would let us get a and of an array. for key, value in ipairs(NumberArray) do print(key, value) end You will see key and value of each element printed to your console. Key is a id or place of element in the array and value will be what it holds.\n• Now let’s create a table and assign names to array elements.\n• You could use e.g. to access each element seperately, or for with .\n\n for key, value in pairs(MyTable) do\n\n print(key, value)\n\n end We couldn’t use to access elements that have a key (name) assigned to them, instead we use .\n• If you would like to assign new values for each element in the array using for loop use the following: for key, value in pairs(MyArray) MyArray[key] = 5 end Each array element will now have a value of\n\nWork still in progress. Will be adding more lessons and covering more of FiveM scripting fun."
    },
    {
        "link": "https://fivem.net/server-hosting",
        "document": "We 💝 developers who contribute to the Cfx.re platform.\n\nCfx.re believes in the power of communities. As a source-available platform, we greatly appreciate everyone who contributes to the project. And for that reason, we love giving back to the community. We give out Element Club Platinum access to help out those who contribute.\n\nWe value all types of contributions. Whether you work on source code, fix bugs, write documentation, or do game research, we are here to help you. If you're an active contributor, apply to our contributor program to get free access to the Element Club Platinum perks!"
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/working-with-events/listening-for-events",
        "document": ""
    },
    {
        "link": "https://forum.cfx.re/t/project-serpent-server-platform-for-entity-management/4767922",
        "document": "With OneSync getting more and more features this might actually be planned at some point, still I’d like to hear your opinions and ask for help developing this idea.\n\n There have been quite a few experiments over the last years on the behavior of NPCs with no players nearby. Not much progress has been made, most likely due to the fact that the GTA V-natives are not written with long-range actions in mind. This post and Serpent itself present an idea that WILL work (as I’ve already proven with a few videos which are linked below). The idea is easiest described like this:\n\n I want an NPC be able to drive around Paleto Bay and act normally even if every player on a server is inside Los Santos. I am posting this as several posts due to the length of each.\n\n Dear mods, I hope this is ok as this thread will desperately need some structure… The first post outlines the general idea of the project. The pictures and code in there might be a little outdated.\n\n The second post outlines what already has been created, what is in a working state and what isn’t.\n\n This will also contain the link to the github-repo with the currently existing code.\n\n The third post describes what needs to be done, what I can offer and what you could do to help this project be realized. Why would you want this?\n\n You might be familiar with FivePD, the multiplayer police mod released over a year ago. It has gained a lot of traction and is imo a fantastic mod. The callouts however have been quite limited in possibilities the last time I checked the mod. FivePD uses (or atleast - used) a system similar to LSPDFR in that you can accept missions and they are only spawned afterwards which presents a problem regarding the timing of missions.\n\n In single player you don’t need to rely on mission timing (simply hardcode the timing in a proper way). In a multiplayer environment you absolutely need consistent time and space. It would be pretty strange, if a mission in a police mod called out and one officer would be like , only to be murdered by five NPCs that spawned as soon as the mission got accepted.\n\n In order to get around that I want to give the NPCs their own agency. I want to make sure that the NPCs can move on their own and do their own decision-making independent of players or even players being near the place (have an attack on Paleto Bay PD triggered while everyone is on Route 69?).\n\n Now you could work around this problem by checking if a player currently is inside Paleto Bay PD and suppress the mission that would result in spawning NPCs running rampage. However imagine this mission: You could hardcode the vehicle to appear at a specific point when police gets near (this is how every police-mod would do it). But that defeats a in my opinion very important part of police work: Search for the criminal. Without properly simulating the car driving down Great Ocean Highway this will always feel bullshit to an extent ( I was at the entrance to Paleto Bay and drove down Great Ocean Highway when the mission triggered. I never saw a dark grey Oracle speeding towards me... ). Simulating NPC movement over the map will actually make this mission playable in the way it is supposed to work. This would be a huge factor for immersion and a fun yet challenging gameplay. This isn’t possible client side, since the LongRange functions don’t work properly and most of the time the entities simply get deleted upon creation. Trying to force the issue will render non-moving NPCs that do not react to any movement command. This gets exponentially worse with multiple players on the server. While one player on the server will have the ped working sometimes, with multiple players it’s essentially never working. The main idea for a solution\n\n My suggestion for Serpent should simulate the NPC-movement completely serverside. Relying only on self-created data it wouldn’t need problem-riddled Natives. Instead the server creates and controls these entities. While no player is near the entity is never spawned and exists purely as a bunch of variables. Only when a player gets near the server issues a SpawnCommand to the player in question. It remains in control of the entity in the sense that it sends every action the entity should make to the client that spawned the entity (e.g. move here, attack this, …). Now am I completely insane? Well, yes, probably. But the system still can work. A possible design would look like this: first off initialize the main lists that will carry the data for every single object to be simulated.\n\n Now data for any ped could look like this: local ExamplePed = { PedIID = 1, -- Mod-Internal ID: This is the main ID of any entity used in this system. It is persistent and will be used to identify the ped, issue tasks, change its data etc etc x = x, -- current position: x coord y = y, -- current position: y coord z = z, -- current position: z coord IsSpawnedBool = false, -- checks if the ped currently is available client side OwnerClientNetID = 0, -- NetID of the client that spawned the ped PedNetID = 0, -- NetID of the Ped when spawned PedModel = \"a_f_m_beach_01\", -- Ped Model PedVisualData = {}, -- Components and Props of that model CurrObjective = \"DriveToCoord\", -- the currently issued task ObjectiveData = { -- the data of said task tarx = 2000.0, tary = 2000.0, tarz = 2000.0, }, PathfindingData = {}, -- if the task is a moving-task you'll need pathfinding data. If you need to store this data this is the place IsInVeh = false, -- bool if the ped currently is in a vehicle VehIID = 0, -- Mod-Internal ID of the vehicle . -- possibly a shitload of other variables that need to be saved . . } Yes, I’m insane, you probably got that by now. Yes, this would be a full-scale entity handler done serverside. Now what code would need to run serverside in order to actually make such a system work? Player-Position\n\n The position of every player needs to be known to the server. Let every player send their position to the server by using a serverside while loop on a Wait(500) + events. Entity-Position\n\n The position of every controlled entity needs to be updated. Could be done by using a serverside while loop on a Wait(500) and executing serverside events for every entity (e.g. Event “DriveToCoord” for the above entity). See below for these “action-events”. “Action-Events”\n\n The actions of the entities get controlled serverside. This is done by using events that simulate the behavior. Let’s assume that we want to send an entity to a specific coordinate, using a “DriveToCoord”-event.\n\n We need to check whether the entity is spawned or not. If the entity is spawned, this is trivial: Let the server send a command (using ) to the client responsible for the entity. That Client event should make the client trigger the Native for the respective entity (note that the server got every required variable for that native saved in the above list).\n\n If the entity is not spawned, this is harder, but certainly possible. First of all, we need The pathfinding algorithm\n\n I am very much certain that GTA V uses A-Star for pathfinding albeit in a very complex way. With 70000 nodes you wouldn’t want to have an algorithm venture through all of them to find the best way.\n\n However for the goal here this massive amount of nodes isn’t necessary at all. GTA V simulates movement up to the specific lane a car is driving on. For DISTANT peds all that is necessary is a broad approximation. For this, a simple implementation of A-Star should suffice. I already implemented A-Star and tested it successfully for Paleto Bay: This is a picture of Paleto Bay that I put out with path nodes. Neighboring pathnodes are connected, so the system can recognize every single road. Note that I included every by-street and parking lot, and got a total of 72 nodes. Excluding parking lots will bring this number down to approx. 25 nodes.\n\n A single node looks like this: It has a specific ID, coordinates, and has every possible exit to another node given in a list. The number after behind the id is the speed limit of that piece of road (unit is mph). Also you can use different booleans, e.g. , , , …, that could later be used to modify the behavior of that pathnode.\n\n Note how these pathnodes have MUCH fewer variables and information than Rockstars’ system. Yes, you’ll never get me back, now that I showed you that I do not only produce insane ideas but actually do parts of it.\n\n Is creating pathnodes for the rest of the map insane? Yes, but it’s only time intensive, you can very well\n\n create a small ingame script for it. A result for the A-star algorithm looks like this: It’s simply a list of the IDs of the pathnodes the entity needs to cross. Serverside movement\n\n While client-side movement needs to be smooth, you can simulate the serverside movement using a while loop on a Wait(500) and simply assume the paths between two pathnodes to be linear. No one is ever going to see movement that only happens serverside. As soon as you try to get near the entity, Rockstars’ system takes over. That way it shouldn’t be too much of a problem to actually simulate entity movement. With this base-idea in mind let’s check what I have already published and what I intentionally hid from the public [help] networked ped keeps unloading when no one is nearby\n\nYou scrolled until here and might even have read as far, so without further ado, here’s the github link Hey there, as noted in the FiveM-cookbook entities can be owned by the server in OneSync if “no player is having the entity in scope” (A quick note about OneSync server-side persistence – FiveM Cookbook). Thus I was wondering whether it is possible to give tasks to the server-owned entities (e.g. TaskVehicleDriveWander() ). If yes, how would that be possible? Whenever I tried the spawned peds would sometimes do things when I was alone on the server. As soon as multiple people spawned the succe… The last update I did in public about this was in January. So take the time and look into the Youtube-video to see how Serpent acts ingame.\n\n So looking at the github, where the hell do I start? Let’s go through it and check what of the description above can be found in the scripts. The startup\n\n When loading the resource the most important parts happen in the files , and of course . As explained in The main idea for a solution the peds and vehicles get created serverside and every bit of information is saved in serpent itself. creates the tables that will be filled with every (a ped that is controlled by serpent; this is opposed to your normal ped that will be spawned and despawned by GTA and which has nothing to do with this resource).\n\n The file starts the main-loop inside and creates event handlers for when players connect. This makes it possible for serpent to store the player information as described in Player-Position above. The serverside main thread\n\n lines 173 to 215 is the central piece of code for serpent. This is a loop triggered every 500 ms. Every single serpent-ped is controlled from here, by asking the very same question: Is any player close enough to the ped so that it has to be spawned in the game?\n\n If yes, spawn the ped and move the responsibility over to a client. (more on that later)\n\n If no, execute the task the the ped has been assigned. Let’s go through the code using an example. Let’s create a ped utilizing serpent: Yes, this is serverside code resembling the FiveM-native . The executed code is found in lines 3 to 154. Note how we can define the position, the model hash and everything else and have it saved in the serpent ´ssv_PedList` (ssv is short for serpent serverside). Now the server knows the ped and utilizing the SID (short for Serpent ID) you can assign commands to that ped from the server. Let’s assume that two players are on the server, both in Los Santos. Let (x = 0, y = 0, z = 69) and (x = 30, y = -50, z = 100) be the positions for those players.\n\n The main thread will calculate the distance from the spawned ped to both players and will determine whether a player is in spawning range. That isn’t the case as the spawnrange has been set to 175 meters.\n\n Now when a player moves closer the script would be able to recognize that, thus eventually spawning the ped (more on that later). The clientside main tasks\n\n Every spawned client has one main task: Continually inform the server about your position. In serpent this is solved in the main loop in line 7 (The rest of the loop will be explained further down). So every single player will be broadcasting his position to the server every 500 ms.\n\n That’s it. The rest is handled by the server. Executing commands for serverhandled peds - how do peds act on the server?\n\n For the enduser this is trivially easy. Take the SID we have fetched above and do this: This is serverside code and emulates .\n\n How is this done?\n\n Assuming that our ped is not near a player the Main Server Loop will trigger the Main Task Handler at line 207, main task handler is located same file at lines 217 - 236.\n\n The task of the MainTaskHandler is to understand which task the ped should be doing currently and triggering the correct serpent event. For that it reads the data saved for the serpent-ped and sends the necessary data further to the next event.\n\n In this case we are triggering a so called event , so the main task handler will trigger the event . Handlers for the serverside tasks\n\n Our next stop is the file . The first function (lines 1 - 66) define the export that we have already used above. This function only saves data into the ped-table and can be ignored for now.\n\n The important part starts at line 68:\n\n The task FollowNavMeshToCoord knows two states (out of three possible): or Initialize and (the third state would be ).\n\n This does what it says on the tin: will create much of the data that can be reused later, so will in general be shorter.\n\n The event starting line 68 will check for the current state and trigger the appropriate function, then change the state appropriately. It also includes a check for successful termination of the task, located at lines 85 - 93 (checking for the distance needed to be travelled and finishing the event). As we have only just entered the command, the script will execute . Initialising a task\n\n needs pathfinding. I have implemented a working version of A-Star and pathnodes for Paleto Bay. It’s already been stated in the first post so I’ll not comment on this even though a bit has changed since the main assumption is still the same.\n\n First we are checking whether PathfindingData is already existing. If not we create the pathfinding data for the current task (lines 110 - 162, the main function is line 145). Note line 152, which will send the created data to a client if the ped is currently spawned.\n\n After the pathfinding data has been created the function will read out the next target position for the ped. This will in general be the next node in the pathfinding data, so a set of coordinates x, y and z (lines 179 - 215). It also checks whether the node has been reached and the next node should be targeted (lines 164 - 177).\n\n Lastly it checks whether the ped is spawned or not and executes either the server-version or the client-version of the native.\n\n As our ped is not spawned it executes as in line 226. Moving the ped on the server\n\n The file is . This is classic linear algebra. I’m fetching the current position and the end position. From that I calculate the vector between them and normalize that vector (so that I got a vector pointing to my goal with a length of 1 m). Now I’ll multiply the vector with the speed of my ped (i.e. 1.0 m/s).\n\n The resulting vector is the distance the ped moves in 1 second. So in order to get the new position of the ped I’ll add half of that vector to the current position (reason for half the value is because the main loop works on 500 ms or half a second).\n\n I’m already finished here and got my ped moving whereever I want as long as pathnodes exist for that place. Continuing the task\n\n After the ped has moved one step (the distance in half a second) the main loop continues and will at some point get to my ped again. The task handler gets triggered just as described above, this time however the task is set to . This doesn’t change too much; however the script can fetch saved values instead of recreating them thus hopefully speeding up quite a bit. The real task will come however when\n\n Players get closer to the ped\n\n At this point the Main Server Loop will not trigger the Main Task Handler but rather the function ( line 204, function lines 238 - 250). This saves necessary data and shoves all of it to the player who got close to the ped. Now it’s time for the Main Client Loop to take over ( lines 1 to 32). The client loop will check for every ped in the clients’ responsibility whether it is still inside the despawning range (200 meters). For now this is only our ped we spawned but later on there might be multiple peds that the client controls.\n\n The functionality of this loop is the same as the main server loop. Check whether the player is still close. If yes, trigger the task handler, if no, trigger the despawning function.\n\n Let’s assume the player is close, triggering the clients’ main task handler. A word on distance\n\n You might have noticed that the spawning range 175.0 is different from the despawing range 200.0 . This is to avoid cases of player’s edging in and out of spawning range with every tick, meaning the serpent-ped spawns and despawns every 500 ms. Having different distances eliminates this issue. Triggering the clientside task handler\n\n This function ( lines 34 to 54) does the same as the serverside task handler. Note that the client task handler still triggers the serverside event handler as described above.\n\n This is because the event itself checks whether the ped is spawned. Tasks triggering clientside\n\n Check lines 219 - 224. This is what is triggered for the -version of the native but is the same for . The script checks for the entity ownership and triggers the clientside function for the entity owner.\n\n Note that entity ownership (i.e. FiveM / GTA V-assigned ownership) and serpent-ownership might be two different clients! Tasks executing clientside\n\n The file is . We’ll disregard the boolean for now so assume that one is set to false. We’ll thus check lines 3 to 33. Basically the script will check for a safe end coordinate for the ped (lines 6 to 15, so it doesn’t stop in the middle of the street) and then trigger the GTA V-native just normally (line 33).\n\n That’s it, task is executing on the client. Players moving away\n\n Now let’s assume that the player who has first spawned the ped (and thus has serpent ownership) moves out of the despawning range. The players’ main client loop notices this and triggers a despawning function ( lines 129 - 138). Unlike the name suggests this does NOT despawn the ped. Instead it merely deletes the information on the client and sends control back to the server (line 135). Now the server takes over ( lines 263 - 304). It resets a few informations and then checks if any other player is still near said ped. If yes it’ll transfer ownership over to that player. If no it’ll despawn the ped and resume ownership itself, thus making the main server loop responsible again. That was quite technical here. I hope to have explained the code in a way that it’s understandable what is happening behind the scenes.\n\n If you want to test out the script, you are welcome to use the following server side code: local ModelName = 'a_f_m_beach_01' local ModelHash = GetHashKey(ModelName) local SID = exports.serpent:ssv_nat_CreatePed(26, ModelHash, -180.0, 6190.0, 31.2, 66.0) Goals = { {x=-224.0, y=6149.0, z=31.2, h=66.0}, {x=-180.0, y=6190.0, z=31.2, h=246.0} } local goalcoordinate = 1 RegisterCommand(\"movetocoord\", function(source, args) local x = Goals[goalcoordinate].x local y = Goals[goalcoordinate].y local z = Goals[goalcoordinate].z local h = Goals[goalcoordinate].h print('Triggering export function') exports.serpent:ssv_nat_TaskFollowNavMeshToCoord(SID, x, y, z, 1.0, -1, 2.0, true, 'Curr', false) if goalcoordinate == 1 then goalcoordinate = 2 elseif goalcoordinate == 2 then goalcoordinate = 1 end end) Load in serpent, load in the above code as a separate resource and use the chatcommand . It might bug a bit but a ped should be moving between two coords on the main street of Paleto Bay. Have fun testing it out and finding bugs In order to see what the server is doing you can enable server prints in . Uncomment lines 35 to 47 and you are good to go.\n\n Beware: I was able to bluescreen my PC several times when running a local server and filling my console with printed data… Again, any questions feel free to post here in this topic or hit me up \n\n Thanks for sticking by to this point, yes it’s a VERY long one. Hope it’s worth the read (and I hope that you don’t want to admit me to psychiatry due to obvious insanity, I mean who would seriously commit to such a project?).\n\nTo boldly fail where others have failed before… That was the correct Star Trek quote, wasn’t it? Anyways, sadly I’m unable to commit much time to this project thus it’s stagnating for quite a while. Realizing that I’ll never finish this I decided to make it public (thus you getting the github-link; already forgot it? Here it is again: GitHub - xSilvermanx/serpent) So, spawning and despawning of peds is in a working state, without known problems even for multiple players. There might be an issue crashing the game if too many peds get spawned at once, I only got that while spawning 100 peds inside of each other so that was to be expected… Edited - However Serpent is currently missing the following features:\n\n There are no functions related to vehicles.\n\n There is no DeletePed()-function.\n\n There’s no natives to sync appearance of peds.\n\n There’s next to no Task-natives.\n\n There are no nodes outside of Paleto Bay. This is all something that needs time which I sadly cannot allocate.\n\n Now I know I’m basically asking for people to finish my project…\n\n But I hope that the possibilites of this project are a motivation to collaborate to get this done. I can offer every bit of advice I can give, ideas and how to create them in code. Also I do believe that I’m quite strong in bugfixing and finding errors in scripts.\n\n So if you are interested in this project I’d be thrilled to talk to you above possible contributions. If you have zero experience coding but want to learn I’d be more than happy to have you on board as well! Creating the nodes will require no coding experience so there’s something to do for everyone! If people are interested in this project I’ll set up a list of goals on the github in the next few days. As usual, comments, feedback, ideas, slander are all appreciated.\n\n Thanks for your timing reading this (or most likely skimming over it… :-P), hope to be talking to you soon.\n\n Best,\n\n Sebastian"
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/runtimes/lua",
        "document": "FiveM supports the general purpose programming language Lua as one of its scripting languages. Lua is a very easy language to learn, simple to use and fast to write. To use Lua, just use in your scripts file extensions.\n\nA modified version of Lua 5.3 is used in FiveM, called CfxLua. This version includes some of the modifications the Grit game engine introduced:\n\nTo learn more about Lua, read their official documentation.\n\nTo use Lua in your scripts, simply use the file extension. No additional configuration is required.\n\nBecause you might often have to deal with 'Jenkins one-at-a-time' hashes in GTA/RAGE, the Lua runtime has been extended to have support for compile-time generation of hash keys, similar to GET_HASH_KEY, however with zero runtime overhead.\n\nFiveM supports first-class vectors and quaternions in Lua. Vectors and quaternions are incredibly useful to represent things like positions, rotations or even colors. For performance reasons, vectors and quaternions are real data types in CfxLua, just like booleans, numbers and strings are.\n\nMany native functions return and accept vectors too. They're commonly used for world positions and standard euler rotations, so use them whenever you can. More about there here.\n\nFor usage and examples see their respective docs:\n\nYou can define exports by calling the global object:\n\nYou can also define an or entry in your resource manifest. Functions need to be global to be 'explicitly' exported. Note that these exports will only be available after the first scheduler tick.\n\nThe Lua runtime exposes some libraries on the global scope which you can use."
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/introduction/creating-your-first-script",
        "document": "Creating your first script in Lua\n\nGetting started with scripting for FiveM might be a tad overwhelming, given the wide range of possibilities and the sparsely spread documentation. In this quick and simple guide, we'll try to show you how to get started with a quick resource in Lua.\n\nA resource is, simply said, a collection of files that can be individually started, stopped and restarted. Your server-data folder (assuming you already installed a server) should have a folder already, with a few resources in them already.\n\nIf you're working on your own resources, you'll probably want to make a directory - this one will be ignored by Git when updating the server-data root. In there, we'll make a folder, since we're making, well, a gametype using the system.\n\nThat means you'll need to have a folder like this by now, assuming a Windows development system: . We'll call this folder from now on.\n\nA resource folder (you know, this you made above) will need a manifest to be detected by FiveM. Since this is a game type, it'll need some extra information as well to teach about the fact that this is a game type.\n\nMake a file called (this is always Lua, even if you'll be writing scripts in C#/JS later on) in your folder. In it, put the following text using your favorite text editor:\n\nAny new resource you make will probably want the latest game features. This is what the is for. You can read up on it elsewhere on this documentation site, if you ever feel the need to know more. To specify if this resource is for gta5, rdr3, or , you should use the variable.\n\nThe , on the other hand, tells that this, in fact, is a game type, and that it's called \"My awesome game type!\". If you're just making a 'standalone' add-on resource, you probably don't want to include a line.\n\nFinally, the indicates to the scripting runtime that the client should load a script, named . If this were a JS script, it'd say , or if it were C#, it'd probably be , but for now we're teaching Lua so just forget that.\n\nFinally, we should make a file called in the resource folder thing.\n\nTo learn more about resource manifest files, take a look at the resource manifest reference.\n\nIn this file, let's put the following content:\n\nThis is a tough one, especially if you're not used to the concept of first-class functions. You could also write it differently, using global/local functions - but that's just a bit odd.\n\nLet's go through this bit by bit, with an annotated version.\n\nA quick mention of the difference between client and server scripts: most of what you'll do in FiveM will be done using client scripts, since in current versions there's no interaction with game functionality in server scripts. Server scripts should be used to have scripted actions occur across clients (using client/server events), and to provide a 'source of trust' for various actions, such as storing/loading things in a persistent database.\n\nSince spawning a player is pretty much entirely game interaction, this happens on the client side. Every player that's joined will have a local instance of each client script running on their PC, with no shared variables or context between them.\n\nYou're probably hoping to be able to run this little example - well, hopefully you already have a running FXServer instance - if not, follow the guide for that.\n\nOnce you've started FXServer, execute the command in the console. This'll reread every single file for every resource you have installed, since you probably just started the server this isn't really needed but if you had the server running already this is just A Good Idea™ to do.\n\nFinally, execute in the console, and connect to your server using the FiveM client's handy button in developer mode (or just enter on the direct connect tab, or if you used the default port click this useful link on the PC you have FiveM installed on).\n\nOnce the game loads, you should see yourself spawning somewhere - hopefully on a big stage!\n\nKeep the game running (and maybe set it to borderless or windowed mode in the game options) and Alt-Tab out back into your code editor - we have more work to do!\n\nIt's silly to close your game and server and restart them both to iterate on your resource. Of course, you can restart your resource as well.\n\nLet's try some different spawn point.\n\nReplace the line (the first one) in with the following:\n\nThen, in your server console, execute the magical command . You should (again) see 'Welcome to the party!~' mentioned in your chat box, and end up on a pier instead of the stage.\n\nYou'll probably want to do more. For this, you're going to have to learn how to call natives, which has nothing to do with indigenous people and actually are a R* label for 'game-defined script functions'. There's a lot of intricacies involved in calling natives properly - for a full reference, see the special section for this - but we'll start simple for now.\n\nIn a stupid way of 'this trope again', we'll make a command that'll spawn a car. Locally. Because nobody cares about the server when they're starting out.\n\nAt the bottom of your , add this code:\n\nStarting already, we see a call to a function. We did not define that function. Well, we (as in, the FiveM team) did, but not when guiding you, the reader, through this wondrously written marvel of a guide. That means it must come from somewhere else!\n\nAnd, guess what, it's actually REGISTER_COMMAND! Click that link, and you'll be led to the documentation for this native. It looks a bit like this:\n\nWe'll mainly care about the name on the second line ( , as used in the Lua code above), and the arguments.\n\nAs you can see, the first argument is the command name. The second argument is a function that is the command handler, and the third argument is a boolean that specifies whether or not it should be a restricted command.\n\nThe function itself gets an argument that is the , which only really matters if you're running on the server (it'll be the client ID of the player that entered the command, a really useful thing to have), and an array of which are basically what you enter after the command like making end up being or being .\n\nSince we already know how to print a message to the chat box, we'll just pretend to spawn a vehicle by printing the name of the vehicle to the console.\n\nLet's restart the resource and see what happens. Run , then in the client chat box (default ) type . You'll see the chat box complain that you were too lazy to implement this. We'll show them that you're absolutely not lazy, and actually implement this now.\n\nThis is a lot of boilerplate code, and we'll want to do this the right way since lots of people will copy this example, so it might look a bit overwhelming.\n\nBasically what we'll do is:\n• Check if the passed model is valid. It's no fun trying to spawn a 'potato' when there's no vehicle with that name.\n• Load the model. You'll need to explicitly manage every model you're using, these are the rules originally defined by R*.\n• Wait for the model to be loaded. Yes, the game will continue running asynchronously.\n• Figure out where the player is once it loaded.\n• Create the vehicle! Awesome, finally you get to be creative.\n• Put the player into the vehicle.\n• Clean up, since we are tidy people and 🚮 and all.\n\nReplace the bit you just pasted in with this, and don't worry we'll explain it before you can say 'lazy' twice:\n\nThis uses a LOT of natives. We'll link a few of them and explain the hard parts.\n\nWe started with checking the vehicle name. If it's (that is, not existent), we'll default to the . Either way, it's stored in a variable.\n\nThen, we check if the vehicle is in the CD image using IS_MODEL_IN_CDIMAGE. This basically means 'is this registered with the game'. We also check if it's a vehicle using IS_MODEL_A_VEHICLE. If either check fails, we tell the player and return from the command.\n\nNow, we call REQUEST_MODEL to load the actual vehicle model. This native takes a argument, but in Lua you can also just pass a string and it'll be converted to a hash. You'll often see people use (GET_HASH_KEY), but if the native is specified as taking a , you actually don't need this.\n\nStep 3: Waiting for the model to be loaded\n\nWe loop calls to HAS_MODEL_LOADED to check if loading succeeded. Since this is a loop and we're cooperatively multitasked, you'll have to give the game time to run as well - otherwise it'll never even finish loading and the game will unfortunately freeze. That's what the call is for - it waits for the specified amount of milliseconds, then returns right back into the script.\n\nOnce the model's loaded, we'll continue.\n\nPlayers' physical incarnations are identified by their , which is short for 'pedestrian'. This is a GTA term, and it usually means 'anything that lives and has legs'. We use PLAYER_PED_ID to get the local (basically, whoever is executing this command) player's ped.\n\nAfter we have the ped and store it in a variable, we get the position of the player ped using GET_ENTITY_COORDS. Since a ped is an entity (the same goes for vehicles and a few other things), this native is used for getting their position. This native, again, returns a , similar to how the was defined earlier.\n\nWe use CREATE_VEHICLE to, well, create a vehicle. In the meanwhile, we snuck in a call to get the player's heading using GET_ENTITY_HEADING, which makes the car spawn facing the same direction as the player.\n\nThe is a convention in entity creation natives to create the vehicle with a network object ( ), but not make it a mission object ( ). You usually want the former, or nobody else will see the vehicle - and you won't want the latter, since you're not writing a full R* mission script.\n\nStep 6: Setting the player into the vehicle\n\nSince we have a ped and a vehicle now, we can use SET_PED_INTO_VEHICLE to place the ped into the vehicle. As the documentation happens to say, is the driver seat of the vehicle.\n\nThe game likes it when you clean up after yourself, and as we're not doing anything with the vehicle or the model anymore in this script, we'll let the game manage it. This is what we use SET_ENTITY_AS_NO_LONGER_NEEDED and SET_MODEL_AS_NO_LONGER_NEEDED for.\n\nFinally, we tell the player to enjoy their new vehicle.\n\nIn your server console, (yeah you can split stuff with semicolons), and try in the game client (which should by now be really bored of respawning). You'll now have your very own Rocket Voltic!\n\nYou'll probably also want to write scripts that interact with the server. This section is still to be written. :-("
    },
    {
        "link": "https://forum.cfx.re/t/client-server-script-explanation/270233",
        "document": "I am a YouTube Content Creator. I record videos on GTA V LSPDFR, FiveM & much more. The videos are entertaining, funny & good quality since I cut out all of ..."
    },
    {
        "link": "https://fivemx.com/tutorials/lua-scripting/introduction-lua-scripting",
        "document": "This guide aims to introduce readers to LUA scripting within the context of FiveM, a popular modification framework for GTA V. We will cover the essentials of LUA, how it integrates with FiveM, and the steps required to set up a development environment using Visual Studio Code (VSCode). By the end of this post, readers will have a working development environment and a basic understanding of LUA scripting for FiveM.\n\nIs LUA hard to learn? Well, every beginning is difficult – but LUA is a very easy coding language.\n\nLUA is a lightweight, high-level programming language designed for embedded use in applications. It is known for its simplicity, ease of integration, and fast execution. Originally developed in 1993, LUA has been widely adopted in various domains, particularly in game development, due to its flexibility and minimalistic syntax.\n• Lightweight: The entire LUA interpreter is small, making it ideal for embedding in other programs.\n• Easy to Learn: LUA’s syntax is straightforward and easy to grasp, which makes it a great choice for beginners.\n• Flexible and Dynamic: LUA supports dynamic typing and flexible object-oriented programming, which allows for rapid prototyping and modifications.\n• Extensible: LUA can easily be extended with custom libraries and functionalities, making it highly adaptable to different needs.\n\nWhy Use LUA in FiveM?\n\nIn the context of FiveM, LUA is the primary scripting language used to interact with the game engine. It allows developers to write scripts that can:\n• Interface with external data sources and APIs. (even ChatGPT)\n\nThe FiveM code provides a rich set of native functions and event handlers that can be accessed via LUA scripts, making it possible to extend and customize almost every aspect of the game.\n\nIntroduction to FiveM and its LUA Scripting Capabilities\n\nFiveM is a multiplayer modification framework for GTA V, enabling players to connect to dedicated servers with customized game modes and content. Unlike the standard multiplayer mode of GTA V, FiveM allows server owners to use mods, scripts, and custom assets to create unique experiences for players.\n• Server-Side Scripting: Scripts that run on the server, handling tasks such as player authentication, data storage, and world events. -> server.lua\n• Client-Side Scripting: Scripts that run on individual player clients, allowing for custom UI elements, client-side event handling, and interaction with server-side scripts. -> client.lua\n• Shared Scripting: Scripts that can be executed on both the client and server, enabling synchronized actions and shared functionalities. -> shared.lua\n\nWith FiveM, developers can create custom game modes such as roleplay servers, racing competitions, and mini-games. LUA serves as the backbone for these scripts, providing the logic and control needed to interact with the game world and players.\n\nTo start scripting with LUA in FiveM, you need to set up a suitable development environment. This section will guide you through the process of installing Visual Studio Code, configuring it for LUA development, and setting up a basic FiveM server environment to test your scripts.\n\nVisual Studio Code is a free, open-source code editor developed by Microsoft. It’s lightweight, feature-rich, and supports various programming languages, including LUA.\n• Download VSCode:\n• Download the installer for your operating system (Windows, macOS, Linux).\n• Run the installer and follow the installation instructions.\n• Install LUA Extensions:\n• Open VSCode.Click on the Extensions icon on the left sidebar or press .Search for “Lua” and install an extension such as “Lua Language Server” or “Lua Plus.” These extensions provide syntax highlighting, code completion, and other useful features.\n\nTo write and test LUA scripts, you need a local FiveM server setup. Follow these steps to create your development environment:\n• Extract and Configure the Server:\n• Create a new folder on your computer (e.g., ).\n• Extract the FiveM server files into this directory.\n• Inside the server folder, create a new subfolder named . This is where your custom scripts and resources will reside.\n• Create a Basic Server Configuration:\n• In the root of your FiveM server folder, you will find a server.cfg\n• This file is the configuration file for most settings:\n• Create a Script Directory:\n• Inside the folder, create a new directory for your script, e.g., .\n• Create the Script Files:\n• The file is a metadata file that tells FiveM about the resources in this directory. Add the following lines to :\n\nIn , write a simple LUA script that outputs a message to the server console:\n• Save the files and restart your FiveM server.\n• Check the server console for the message “Hello, FiveM! This is my first LUA script.” This confirms that your script is loaded and running successfully.\n\nLUA’s syntax is designed to be simple and clean. Understanding the basics is essential for effective scripting in FiveM.\n• Variables do not need to be declared with a type. LUA automatically assigns types based on the value.\n• Nil: Represents the absence of a value.\n\nExample of Variable Declaration and Data Types in LUA:\n\nPrint Function: The function outputs messages to the console. It’s useful for debugging and displaying information.\n\nServer Event Handlers: FiveM uses event-driven programming. You can define functions that run in response to specific events, such as a player joining the server.\n\n3. Setting Up LUA Coding Standards and Best Practices\n• Use Meaningful Variable Names:\n• Instead of naming a variable , use or . This improves readability and maintainability:\n• Consistent Indentation:\n• Proper indentation improves code readability. It’s a good practice to use 4 spaces or a tab for each level of indentation\n• Comment Your Code:\n• Use comments to explain complex logic or important sections of code\n• stands for “protected call.” It executes a function in protected mode and catches any errors.\n• Use statements to check the values of variables at different stages.\n• Keep an eye on the server console for error messages and warnings.\n• Break down complex functions into smaller parts to isolate and test specific functionality.\n\nLet’s create a simple chat command that players can use to greet each other. This example will illustrate how to handle player input and respond with a custom message.\n• Modifying the Script to Add a Chat Command:\n• Edit the file to include the following code:\n• This script registers a new command . When a player types this command in the chat, the server responds with a greeting message.\n• Testing the Chat Command:\n• Connect to the server using the FiveM client.\n• You should see a message like “Hello [Your Name], welcome to the server!” displayed in the chat.\n\nAs your scripts become more complex, organizing your project files becomes critical. Here are some tips for managing your FiveM LUA scripts effectively:\n\nDirectory Structure: Keep related scripts in separate folders within the directory. For example, create separate folders for player-related scripts, vehicle scripts, and UI scripts:\n\nModular Scripting: Break your scripts into smaller modules that handle specific tasks. This makes it easier to maintain and update individual components without affecting the entire script.\n\nUse a Version Control System: Consider using Git to track changes to your scripts. This allows you to roll back to previous versions if something breaks and collaborate with other developers more effectively.\n\nDocumentation: Document your code thoroughly. Create a README file in each project directory explaining what each script does, how to use it, and any dependencies it may have.\n\nNow that you have set up a basic development environment and written your first LUA script, you can explore more advanced topics in subsequent blog posts. These will include:\n• Basic LUA Syntax and Commands: Learn the essential syntax, data types, and commands in LUA.\n• Creating and Using Functions: Understand how to define and use functions in LUA to modularize and reuse code.\n• Conditional Statements and Looping Structures: Learn how to use if-else statements and loops to control the flow of your scripts.\n• Working with Tables: Discover how to use tables to manage complex data structures.\n• Error Handling and Debugging: Explore advanced techniques for catching and handling errors.\n• Using External Libraries and Modules: Learn how to integrate external libraries into your LUA scripts.\n• File I/O Operations: Understand how to read from and write to files.\n• Creating User Interfaces with NUI: Learn to create interactive UI elements using NUI (Native User Interface).\n\nSetting up a development environment for FiveM LUA scripting using VSCode is the first step towards creating rich, customized gameplay experiences. With this foundational setup, you can begin writing scripts to enhance your FiveM server. The example scripts and exercises provided here are just the beginning. As you gain more experience with LUA and FiveM, you’ll be able to create more complex and engaging scripts, pushing the boundaries of what’s possible in GTA V.\n• Modify the Greeting Command: Update the command to accept an additional parameter. If a name is provided, greet that name; otherwise, greet the player who used the command.\n• Create a New Command: Write a new command that broadcasts a message to all players on the server.\n• Error Handling Practice: Introduce error handling to check if a command is used without the required parameters and provide feedback to the player."
    },
    {
        "link": "https://forum.cfx.re/t/fivem-scripting-documentation/192",
        "document": "This are original documentations from here.\n\nIf you found other scripting documentations, you can post here.\n\nThis document lists valid directives provided by the core and other resources for the resource definition file (__resource.lua).\n\nA directive is basically a Lua function invoked by the ‘identifier followed by string or table equals a call’ rule - unknown directives are handled by returning a dummy function instead of nil (this means any undefined variable is actually a function - keep this in mind!). In effect, the following are equal:\n\nLists one or multiple client scripts for the resource. Parsed by both client (to load scripts) and server (to offer scripts for download). Aliased as client_script.\n\nLists one or multiple required resources for this resource. Aliased as dependency.\n\nSets the meta field ‘description’ in the resource’s metadata.\n\nLists one or multiple client-side script exports for other resources to call - these are taken from the resource’s global environment. Aliased as export.\n\nLists one or multiple server scripts for the resource. Only parsed server-side. Aliased as server_script.\n\nSets the meta field ‘version’ in the resource’s metadata.\n\nAn export can be called from any resource on the client (tbi on the server) as follows:\n\nLet’s start demonstrating the interaction between client and server resources and events by making a simple resource that will spawn a car when a message in the chat equals ‘car’.\n\nAs stated in the previous page, creating a resource requires you to make a subfolder, and a __resource.lua file. Therefore, we will make a folder called mycar in our resources/ folder, and create a new file called __resource.lua in the same directory.\n\nThe content in this file will be simple - we’re just creating a single client script and a single server script:\n\nAs chat messages are primarily handled on the server (as shown in the event documentation – you’ll be referring to it often!), we’ll start with the server script. It is as follows:\n\nThe server’s primary means of code execution is through events like these - the client also has the ability to create threads, which execute in the background together with the game.\n\nAs shown in the documentation for chatMessage], the first argument is the client ID of the player who sent the chat message. The ‘mycar:createCar’ event is our custom one, which we’ll implement below.\n\nGoing from there, we’re going to be creating the client script. We’ll show a basic example of the base framework, explain it, then continue on adding vehicle spawning.\n\nAgain, this is another event handler as above.\n\nNow, to actually spawn a vehicle, some knowledge of single player GTA scripting is fairly helpful. There are various guides available both for the GTA III series which partially apply here, and somewhat less guides for IV. Basically, to create a local entity, one starts by loading a model. This could be done like this, kind of:\n\nThis shows the way we interact with the game fairly clearly, as well - these functions are the so-called ‘native functions’ from the game, and are listed on various sites. These functions may return various return value types, such as ‘results’ and have ‘pointer arguments’. The _r in this example stands for ‘return result as integer’, and a full list follows:\n\nIf multiple reference items are specified, the return values will occur from left to right, like the following:\n\nHowever, there’s some issue with this model loading code, which has to be resolved in a better way: as loading a model may take a while, and the player is, well, playing the game, it’s usually a good idea to load the model asynchronously. This is typically done in native script by invoking a ‘wait’ command/function in a loop - and it’s no different here…\n\n… except you need a thread for this. Threads in CitizenMP are simply Lua ‘coroutines’, and therefore if you’re used to threads being a ‘bad thing’, they’re typically not over here. Let’s show how to actually do this:\n\nThis also introduces another new concept - marking models as ‘no longer needed’. If one is not going to perform further script operations on any game resource (whether it be an entity or model), it’s recommended to mark them as unneeded - this allows the game to release the memory resources required for this resource (that’s a lot of resource when it’s able to.\n\nNow that we have the model loaded, we can actually continue by creating our car. This usually ends up being done as follows:\n\nNote that GetPlayerPed isn’t a native function, but a convenience function we made to simplify getting the player’s character.\n\nIf we put it all together, as shown below…\n\n… we have our complete client script!\n\nLet’s try it out: add a line to your server .yml file’s AutoStartResources section to list ‘mycar’, start the server, join, and type ‘car’ in the chat. If everything’s okay, you should be put in a Turismo just fine! If not…\n\nCitizenMP:IV has the ability to override/insert files that would normally be placed in ‘CD images’ (.img files) at runtime. This, however, is bound to a few specific limitations:\n• No API. These files are simply loaded from a folder, without any exclusions specifiable.\n• Only at initialization. Streaming overrides only get initialized during game initialization, which basically means ‘during connecting to the server’. Dynamic resource starting/stopping won’t allow overriding these in the current version, and may not do so for a while to come.\n\nTo use this feature, simply create a folder titled stream in a resource folder (one that is started by AutoStartResources, preferably) and place streaming files (.wft, .wtd, .nod, .sco, …) in there. These will only be downloaded on demand (i.e. when said streaming object is requested, for instance by a call to RequestModel) and will be cached on the client locally for future usage.\n\nThe folder’s content can be categorized in subfolders for organization, these have no meaning to the game whatsoever.\n• from: The network ID of the client sending the chat message.\n• name: The name of the player sending the chat message.\n• color: A table containing a RGB color the chat message should be displayed as.\n\nThis event can be canceled."
    }
]