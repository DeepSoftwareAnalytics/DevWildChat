[
    {
        "link": "https://w3schools.com/python/ref_string_splitlines.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://geeksforgeeks.org/python-string-splitlines-method",
        "document": "In Python, the splitlines() method is used to break a string into a list of lines based on line breaks. This is helpful when we want to split a long string containing multiple lines into separate lines. The simplest way to use splitlines() is by calling it directly on a string. It will return a list of lines split by the newline characters.\n• keepends=True , each line in the list will include the line break characters.\n• keepends=False (default), the line breaks are removed from the lines in the returned list.\n\nIf we want to preserve the newline characters in the result, we can pass True as an argument to the keepends parameter. This keeps the newline characters (\n\n) in the list elements.\n\nsplitlines() also handles empty lines. By default, it will return an empty string for lines that are completely blank."
    },
    {
        "link": "https://docs.python.org/3/library/stdtypes.html",
        "document": "The following sections describe the standard types that are built into the interpreter.\n\nThe principal built-in types are numerics, sequences, mappings, classes, instances and exceptions.\n\nSome collection classes are mutable. The methods that add, subtract, or rearrange their members in place, and don’t return a specific item, never return the collection instance itself but .\n\nSome operations are supported by several object types; in particular, practically all objects can be compared for equality, tested for truth value, and converted to a string (with the function or the slightly different function). The latter function is implicitly used when an object is written by the function.\n\nThere are three distinct numeric types: integers, floating-point numbers, and complex numbers. In addition, Booleans are a subtype of integers. Integers have unlimited precision. Floating-point numbers are usually implemented using double in C; information about the precision and internal representation of floating-point numbers for the machine on which your program is running is available in . Complex numbers have a real and imaginary part, which are each a floating-point number. To extract these parts from a complex number z, use and . (The standard library includes the additional numeric types , for rationals, and , for floating-point numbers with user-definable precision.) Numbers are created by numeric literals or as the result of built-in functions and operators. Unadorned integer literals (including hex, octal and binary numbers) yield integers. Numeric literals containing a decimal point or an exponent sign yield floating-point numbers. Appending or to a numeric literal yields an imaginary number (a complex number with a zero real part) which you can add to an integer or float to get a complex number with real and imaginary parts. Python fully supports mixed arithmetic: when a binary arithmetic operator has operands of different numeric types, the operand with the “narrower” type is widened to that of the other, where integer is narrower than floating point, which is narrower than complex. A comparison between numbers of different types behaves as though the exact values of those numbers were being compared. The constructors , , and can be used to produce numbers of a specific type. All numeric types (except complex) support the following operations (for priorities of the operations, see Operator precedence): absolute value or magnitude of x a complex number with real part re, imaginary part im. im defaults to zero. conjugate of the complex number c\n• None Also referred to as integer division. For operands of type , the result has type . For operands of type , the result has type . In general, the result is a whole integer, though the result’s type is not necessarily . The result is always rounded towards minus infinity: is , is , is , and is .\n• None Not for complex numbers. Instead convert to floats using if appropriate.\n• None Conversion from to truncates, discarding the fractional part. See functions and for alternative conversions.\n• None float also accepts the strings “nan” and “inf” with an optional prefix “+” or “-” for Not a Number (NaN) and positive or negative infinity.\n• None Python defines and to be , as is common for programming languages.\n• None The numeric literals accepted include the digits to or any Unicode equivalent (code points with the property). See the Unicode Standard for a complete list of code points with the property. All types ( and ) also include the following operations: x rounded to n digits, rounding half to even. If n is omitted, it defaults to 0. For additional numeric operations see the and modules. Bitwise operations only make sense for integers. The result of bitwise operations is calculated as though carried out in two’s complement with an infinite number of sign bits. The priorities of the binary bitwise operations are all lower than the numeric operations and higher than the comparisons; the unary operation has the same priority as the other unary numeric operations ( and ). This table lists the bitwise operations sorted in ascending priority: bitwise exclusive or of x and y\n• None Negative shift counts are illegal and cause a to be raised.\n• None A left shift by n bits is equivalent to multiplication by .\n• None A right shift by n bits is equivalent to floor division by .\n• None Performing these calculations with at least one extra sign extension bit in a finite two’s complement representation (a working bit-width of or more) is sufficient to get the same result as if there were an infinite number of sign bits. The int type implements the abstract base class. In addition, it provides a few more methods: Return the number of bits necessary to represent an integer in binary, excluding the sign and leading zeros: More precisely, if is nonzero, then is the unique positive integer such that . Equivalently, when is small enough to have a correctly rounded logarithm, then . If is zero, then returns . Return the number of ones in the binary representation of the absolute value of the integer. This is also known as the population count. Example: Return an array of bytes representing an integer. The integer is represented using length bytes, and defaults to 1. An is raised if the integer is not representable with the given number of bytes. The byteorder argument determines the byte order used to represent the integer, and defaults to . If byteorder is , the most significant byte is at the beginning of the byte array. If byteorder is , the most significant byte is at the end of the byte array. The signed argument determines whether two’s complement is used to represent the integer. If signed is and a negative integer is given, an is raised. The default value for signed is . The default values can be used to conveniently turn an integer into a single byte object: However, when using the default arguments, don’t try to convert a value greater than 255 or you’ll get an . \"byteorder must be either 'little' or 'big'\" Changed in version 3.11: Added default argument values for and . Return the integer represented by the given array of bytes. The argument bytes must either be a bytes-like object or an iterable producing bytes. The byteorder argument determines the byte order used to represent the integer, and defaults to . If byteorder is , the most significant byte is at the beginning of the byte array. If byteorder is , the most significant byte is at the end of the byte array. To request the native byte order of the host system, use as the byte order value. The signed argument indicates whether two’s complement is used to represent the integer. \"byteorder must be either 'little' or 'big'\" Changed in version 3.11: Added default argument value for . Return a pair of integers whose ratio is equal to the original integer and has a positive denominator. The integer ratio of integers (whole numbers) is always the integer as the numerator and as the denominator. The float type implements the abstract base class. float also has the following additional methods. Return a pair of integers whose ratio is exactly equal to the original float. The ratio is in lowest terms and has a positive denominator. Raises on infinities and a on NaNs. Return if the float instance is finite with integral value, and otherwise: Two methods support conversion to and from hexadecimal strings. Since Python’s floats are stored internally as binary numbers, converting a float to or from a decimal string usually involves a small rounding error. In contrast, hexadecimal strings allow exact representation and specification of floating-point numbers. This can be useful when debugging, and in numerical work. Return a representation of a floating-point number as a hexadecimal string. For finite floating-point numbers, this representation will always include a leading and a trailing and exponent. Class method to return the float represented by a hexadecimal string s. The string s may have leading and trailing whitespace. Note that is an instance method, while is a class method. where the optional may by either or , and are strings of hexadecimal digits, and is a decimal integer with an optional leading sign. Case is not significant, and there must be at least one hexadecimal digit in either the integer or the fraction. This syntax is similar to the syntax specified in section 6.4.4.2 of the C99 standard, and also to the syntax used in Java 1.5 onwards. In particular, the output of is usable as a hexadecimal floating-point literal in C or Java code, and hexadecimal strings produced by C’s format character or Java’s are accepted by . Note that the exponent is written in decimal rather than hexadecimal, and that it gives the power of 2 by which to multiply the coefficient. For example, the hexadecimal string represents the floating-point number , or : Applying the reverse conversion to gives a different hexadecimal string representing the same number: For numbers and , possibly of different types, it’s a requirement that whenever (see the method documentation for more details). For ease of implementation and efficiency across a variety of numeric types (including , , and ) Python’s hash for numeric types is based on a single mathematical function that’s defined for any rational number, and hence applies to all instances of and , and all finite instances of and . Essentially, this function is given by reduction modulo for a fixed prime . The value of is made available to Python as the attribute of . CPython implementation detail: Currently, the prime used is on machines with 32-bit C longs and on machines with 64-bit C longs. Here are the rules in detail:\n• None If is a nonnegative rational number and is not divisible by , define as , where gives the inverse of modulo .\n• None If is a nonnegative rational number and is divisible by (but is not) then has no inverse modulo and the rule above doesn’t apply; in this case define to be the constant value .\n• None If is a negative rational number define as . If the resulting hash is , replace it with .\n• None The particular values and are used as hash values for positive infinity or negative infinity (respectively).\n• None For a number , the hash values of the real and imaginary parts are combined by computing , reduced modulo so that it lies in . Again, if the result is , it’s replaced with . To clarify the above rules, here’s some example Python code, equivalent to the built-in hash, for computing the hash of a rational number, , or : Assumes m and n are integers, with n positive. # Remove common factors of P. (Unnecessary if m and n already coprime.) # Fermat's Little Theorem: pow(n, P-1, P) is 1, so # pow(n, P-2, P) gives the inverse of n modulo P.\n\nThere are three basic sequence types: lists, tuples, and range objects. Additional sequence types tailored for processing of binary data and text strings are described in dedicated sections. The operations in the following table are supported by most sequence types, both mutable and immutable. The ABC is provided to make it easier to correctly implement these operations on custom sequence types. This table lists the sequence operations sorted in ascending priority. In the table, s and t are sequences of the same type, n, i, j and k are integers and x is an arbitrary object that meets any type and value restrictions imposed by s. The and operations have the same priorities as the comparison operations. The (concatenation) and (repetition) operations have the same priority as the corresponding numeric operations. if an item of s is equal to x, else if an item of s is equal to x, else the concatenation of s and t equivalent to adding s to itself n times slice of s from i to j with step k index of the first occurrence of x in s (at or after index i and before index j) total number of occurrences of x in s Sequences of the same type also support comparisons. In particular, tuples and lists are compared lexicographically by comparing corresponding elements. This means that to compare equal, every element must compare equal and the two sequences must be of the same type and have the same length. (For full details see Comparisons in the language reference.) Forward and reversed iterators over mutable sequences access values using an index. That index will continue to march forward (or backward) even if the underlying sequence is mutated. The iterator terminates only when an or a is encountered (or when the index drops below zero).\n• None While the and operations are used only for simple containment testing in the general case, some specialised sequences (such as , and ) also use them for subsequence testing:\n• None Values of n less than are treated as (which yields an empty sequence of the same type as s). Note that items in the sequence s are not copied; they are referenced multiple times. This often haunts new Python programmers; consider: What has happened is that is a one-element list containing an empty list, so all three elements of are references to this single empty list. Modifying any of the elements of modifies this single list. You can create a list of different lists this way: Further explanation is available in the FAQ entry How do I create a multidimensional list?.\n• None If i or j is negative, the index is relative to the end of sequence s: or is substituted. But note that is still .\n• None The slice of s from i to j is defined as the sequence of items with index k such that . If i or j is greater than , use . If i is omitted or , use . If j is omitted or , use . If i is greater than or equal to j, the slice is empty.\n• None The slice of s from i to j with step k is defined as the sequence of items with index such that . In other words, the indices are , , , and so on, stopping when j is reached (but never including j). When k is positive, i and j are reduced to if they are greater. When k is negative, i and j are reduced to if they are greater. If i or j are omitted or , they become “end” values (which end depends on the sign of k). Note, k cannot be zero. If k is , it is treated like .\n• None Concatenating immutable sequences always results in a new object. This means that building up a sequence by repeated concatenation will have a quadratic runtime cost in the total sequence length. To get a linear runtime cost, you must switch to one of the alternatives below:\n• None if concatenating objects, you can build a list and use at the end or else write to an instance and retrieve its value when complete\n• None if concatenating objects, you can similarly use or , or you can do in-place concatenation with a object. objects are mutable and have an efficient overallocation mechanism\n• None for other types, investigate the relevant class documentation\n• None Some sequence types (such as ) only support item sequences that follow specific patterns, and hence don’t support sequence concatenation or repetition.\n• None raises when x is not found in s. Not all implementations support passing the additional arguments i and j. These arguments allow efficient searching of subsections of the sequence. Passing the extra arguments is roughly equivalent to using , only without copying any data and with the returned index being relative to the start of the sequence rather than the start of the slice. The only operation that immutable sequence types generally implement that is not also implemented by mutable sequence types is support for the built-in. This support allows immutable sequences, such as instances, to be used as keys and stored in and instances. Attempting to hash an immutable sequence that contains unhashable values will result in . The operations in the following table are defined on mutable sequence types. The ABC is provided to make it easier to correctly implement these operations on custom sequence types. In the table s is an instance of a mutable sequence type, t is any iterable object and x is an arbitrary object that meets any type and value restrictions imposed by s (for example, only accepts integers that meet the value restriction ). item i of s is replaced by x slice of s from i to j is replaced by the contents of the iterable t the elements of are replaced by those of t removes the elements of from the list appends x to the end of the sequence (same as ) removes all items from s (same as ) creates a shallow copy of s (same as ) extends s with the contents of t (for the most part the same as ) inserts x into s at the index given by i (same as ) retrieves the item at i and also removes it from s removes the first item from s where is equal to x reverses the items of s in place\n• None If k is not equal to , t must have the same length as the slice it is replacing.\n• None The optional argument i defaults to , so that by default the last item is removed and returned.\n• None raises when x is not found in s.\n• None The method modifies the sequence in place for economy of space when reversing a large sequence. To remind users that it operates by side effect, it does not return the reversed sequence.\n• None and are included for consistency with the interfaces of mutable containers that don’t support slicing operations (such as and ). is not part of the ABC, but most concrete mutable sequence classes provide it.\n• None The value n is an integer, or an object implementing . Zero and negative values of n clear the sequence. Items in the sequence are not copied; they are referenced multiple times, as explained for under Common Sequence Operations. Lists are mutable sequences, typically used to store collections of homogeneous items (where the precise degree of similarity will vary by application). Lists may be constructed in several ways:\n• None Using a pair of square brackets to denote the empty list:\n• None Using the type constructor: or The constructor builds a list whose items are the same and in the same order as iterable’s items. iterable may be either a sequence, a container that supports iteration, or an iterator object. If iterable is already a list, a copy is made and returned, similar to . For example, returns and returns . If no argument is given, the constructor creates a new empty list, . Many other operations also produce lists, including the built-in. Lists implement all of the common and mutable sequence operations. Lists also provide the following additional method: This method sorts the list in place, using only comparisons between items. Exceptions are not suppressed - if any comparison operations fail, the entire sort operation will fail (and the list will likely be left in a partially modified state). accepts two arguments that can only be passed by keyword (keyword-only arguments): key specifies a function of one argument that is used to extract a comparison key from each list element (for example, ). The key corresponding to each item in the list is calculated once and then used for the entire sorting process. The default value of means that list items are sorted directly without calculating a separate key value. The utility is available to convert a 2.x style cmp function to a key function. reverse is a boolean value. If set to , then the list elements are sorted as if each comparison were reversed. This method modifies the sequence in place for economy of space when sorting a large sequence. To remind users that it operates by side effect, it does not return the sorted sequence (use to explicitly request a new sorted list instance). The method is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal — this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade). For sorting examples and a brief sorting tutorial, see Sorting Techniques. CPython implementation detail: While a list is being sorted, the effect of attempting to mutate, or even inspect, the list is undefined. The C implementation of Python makes the list appear empty for the duration, and raises if it can detect that the list has been mutated during a sort. Tuples are immutable sequences, typically used to store collections of heterogeneous data (such as the 2-tuples produced by the built-in). Tuples are also used for cases where an immutable sequence of homogeneous data is needed (such as allowing storage in a or instance). Tuples may be constructed in a number of ways:\n• None Using a pair of parentheses to denote the empty tuple:\n• None Using a trailing comma for a singleton tuple: or\n• None Using the built-in: or The constructor builds a tuple whose items are the same and in the same order as iterable’s items. iterable may be either a sequence, a container that supports iteration, or an iterator object. If iterable is already a tuple, it is returned unchanged. For example, returns and returns . If no argument is given, the constructor creates a new empty tuple, . Note that it is actually the comma which makes a tuple, not the parentheses. The parentheses are optional, except in the empty tuple case, or when they are needed to avoid syntactic ambiguity. For example, is a function call with three arguments, while is a function call with a 3-tuple as the sole argument. Tuples implement all of the common sequence operations. For heterogeneous collections of data where access by name is clearer than access by index, may be a more appropriate choice than a simple tuple object. The type represents an immutable sequence of numbers and is commonly used for looping a specific number of times in loops. The arguments to the range constructor must be integers (either built-in or any object that implements the special method). If the step argument is omitted, it defaults to . If the start argument is omitted, it defaults to . If step is zero, is raised. For a positive step, the contents of a range are determined by the formula where and . For a negative step, the contents of the range are still determined by the formula , but the constraints are and . A range object will be empty if does not meet the value constraint. Ranges do support negative indices, but these are interpreted as indexing from the end of the sequence determined by the positive indices. Ranges containing absolute values larger than are permitted but some features (such as ) may raise . Ranges implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition and concatenation will usually violate that pattern). The value of the start parameter (or if the parameter was not supplied) The value of the stop parameter The value of the step parameter (or if the parameter was not supplied) The advantage of the type over a regular or is that a object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the , and values, calculating individual items and subranges as needed). Range objects implement the ABC, and provide features such as containment tests, element index lookup, slicing and support for negative indices (see Sequence Types — list, tuple, range): Testing range objects for equality with and compares them as sequences. That is, two range objects are considered equal if they represent the same sequence of values. (Note that two range objects that compare equal might have different , and attributes, for example or .) Changed in version 3.2: Implement the Sequence ABC. Support slicing and negative indices. Test objects for membership in constant time instead of iterating through all items. Changed in version 3.3: Define ‘==’ and ‘!=’ to compare range objects based on the sequence of values they define (instead of comparing based on object identity).\n• None The linspace recipe shows how to implement a lazy version of range suitable for floating-point applications."
    },
    {
        "link": "https://codecademy.com/resources/docs/python/strings/splitlines",
        "document": "is a built-in string method in Python that is used to split a multi-line string into a list of lines. It recognizes different newline characters such as , , or and splits the string at those points. The method returns a list of strings, each corresponding to a line in the original multi-line string.\n• : This is the string on which to apply the method.\n• (optional): This is a boolean parameter. If , the line break characters are included in the resulting lines. If (the default), the line break characters are excluded.\n\nIn this example, is used to include the line break characters in the resulting lines.\n\nThis results in the following output:\n\nIn next example, is applied to a custom multi-line string with various line break characters ( , , and ).\n\nThis results in the following output:\n\nThe code below is runnable and uses to split :"
    },
    {
        "link": "https://programiz.com/python-programming/methods/string/splitlines",
        "document": "The syntax of the method is:\n\nHere, can be or any .\n\nThe method can take a single parameter:\n• (optional) - it determines whether line breaks are included in the resulting list or not. It's value can be or any number.\n• a list of lines in the string.\n\nIf there are not line break characters, it returns a list with a single item (a single line).\n\nIn the above example, we have used the method to split the string i.e. at the line breaks.\n\nHere, splits at line break and returns a list after removing the line break.\n\nWe can also split the lines from multi line strings using the method. For example,\n\nHere, the method splits the multi line string and returns the list .\n\nExample 3: Passing Boolean Value in splitlines()\n\nIn the above example, we have passed Boolean values and in the method to split .\n\nHere, in the method on passing:\n• - returns a list without including linebreaks in the items i.e.\n\nThe method takes an integer value as parameter. Here, 0 represents and other positive or negative numbers indicate . For example,"
    },
    {
        "link": "https://stackoverflow.com/questions/10660435/how-do-i-split-the-definition-of-a-long-string-over-multiple-lines",
        "document": "See also: How can I do a line break (line continuation) in Python (split up a long line of source code)? when the overall line of code is long but doesn't contain a long string literal.\n\nI tried doing something similar in Python, but it didn't work, so I used \\ to split the long string. However, I'm not sure if this is the only/best/pythonicest way of doing it. It looks awkward. Actual code:\n\nI have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a + operator (I know, maybe it's not the most efficient way to do it, but I'm not really concerned about performance in this stage, just code readability). Example:\n\nAre you talking about multi-line strings? Easy, use triple quotes to start and end them. s = \"\"\" this is a very long string if I had the energy to type more and more ...\"\"\" You can use single quotes too (3 of them of course at start and end) and treat the resulting string just like any other string. NOTE: Just as with any string, anything between the starting and ending quotes becomes part of the string, so this example has a leading blank (as pointed out by @root45). This string will also contain both blanks and newlines. ' this is a very\n\n long string if I had the\n\n energy to type more and more ...' Finally, one can also construct long lines in Python like this: s = (\"this is a very\" \"long string too\" \"for sure ...\" ) which will not include any extra blanks or newlines (this is a deliberate example showing what the effect of skipping blanks will result in): 'this is a verylong string toofor sure ...' No commas required, simply place the strings to be joined together into a pair of parenthesis and be sure to account for any needed blanks and newlines.\n\nIf you don't want a multiline string, but just have a long single line string, you can use parentheses. Just make sure you don't include commas between the string segments (then it will be a tuple). query = ('SELECT action.descr as \"action\", ' 'role.id as role_id,' 'role.descr as role' ' FROM ' 'public.role_action_def,' 'public.role,' 'public.record_def, ' 'public.action' ' WHERE role.id = role_action_def.role_id AND' ' record_def.id = role_action_def.def_id AND' ' action.id = role_action_def.action_id AND' ' role_action_def.account_id = '+account_id+' AND' ' record_def.account_id='+account_id+' AND' ' def_id='+def_id) In a SQL statement like what you're constructing, multiline strings would also be fine. But if the extra white space a multiline string would contain would be a problem, then this would be a good way to achieve what you want. As noted in the comments, concatenating SQL queries in this way is a SQL injection security risk waiting to happen, so use your database's parameterized queries feature to prevent this. However, I'm leaving the answer as-is otherwise as it directly answers the question asked.\n\nAs a general approach to long strings in Python, you can use triple quotes, and : _str = ' '.join('''Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo.'''.split()) 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo.' With regard to OP's question relating to a SQL query, the answer below disregards the correctness of this approach to building SQL queries and focuses only on building long strings in a readable and aesthetic way without additional imports. It also disregards the computational load this entails. Using triple quotes, we build a long and readable string which we then break up into a list using thereby stripping the white space and then join it back together with . Finally we insert the variables using the command: account_id = 123 def_id = 321 _str = ''' SELECT action.descr AS \"action\", role.id AS role_id, role.descr AS role FROM public.role_action_def, public.role, public.record_def, public.action WHERE role.id = role_action_def.role_id AND record_def.id = role_action_def.def_id AND' action.id = role_action_def.action_id AND role_action_def.account_id = {} AND record_def.account_id = {} AND def_id = {} ''' query = ' '.join(_str.split()).format(account_id, account_id, def_id) SELECT action.descr AS \"action\", role.id AS role_id, role.descr AS role FROM public.role_action_def, public.role, public.record_def, public.action WHERE role.id = role_action_def.role_id AND record_def.id = role_action_def.def_id AND action.id = role_action_def.action_id AND role_action_def.account_id = 123 AND record_def.account_id=123 AND def_id=321 This approach is not in line with PEP 8, but I find it useful at times. Please note that the curly brackets in the original string are used by the format() function.\n\nwith my formatting suggestion, you could write your query as: query = ('SELECT' ' action.descr as \"action\"' ',role.id as role_id' ',role.descr as role' ' FROM' ' public.role_action_def' ',public.role' ',public.record_def' ',public.action' ' WHERE' ' role.id = role_action_def.role_id' ' AND' ' record_def.id = role_action_def.def_id' ' AND' ' action.id = role_action_def.action_id' ' AND' ' role_action_def.account_id = ?' # account_id ' AND' ' record_def.account_id = ?' # account_id ' AND' ' def_id = ?' # def_id ) vars = (account_id, account_id, def_id) # A tuple of the query variables cursor.execute(query, vars) # Using Python's sqlite3 module vars = [] query = ('SELECT' ' action.descr as \"action\"' ',role.id as role_id' ',role.descr as role' ' FROM' ' public.role_action_def' ',public.role' ',public.record_def' ',public.action' ' WHERE' ' role.id = role_action_def.role_id' ' AND' ' record_def.id = role_action_def.def_id' ' AND' ' action.id = role_action_def.action_id' ' AND' ' role_action_def.account_id = ' vars.append(account_id) or '?' ' AND' ' record_def.account_id = ' vars.append(account_id) or '?' ' AND' ' def_id = ' vars.append(def_id) or '?' ) cursor.execute(query, tuple(vars)) # Using Python's sqlite3 module Which could be interesting together with 'IN' and 'vars.extend(options) or n_options(len(options))', where: Or with the hint from darkfeline, that you might still make mistakes with those leading spaces and separators and also with named placeholders: SPACE_SEP = ' ' COMMA_SEP = ', ' AND_SEP = ' AND ' query = SPACE_SEP.join(( 'SELECT', COMMA_SEP.join(( 'action.descr as \"action\"', 'role.id as role_id', 'role.descr as role', )), 'FROM', COMMA_SEP.join(( 'public.role_action_def', 'public.role', 'public.record_def', 'public.action', )), 'WHERE', AND_SEP.join(( 'role.id = role_action_def.role_id', 'record_def.id = role_action_def.def_id', 'action.id = role_action_def.action_id', 'role_action_def.account_id = :account_id', 'record_def.account_id = :account_id', 'def_id = :def_id', )), )) vars = {'account_id':account_id,'def_id':def_id} # A dictionary of the query variables cursor.execute(query, vars) # Using Python's sqlite3 module \"This is the [most Pythonic] way!\" - ..."
    },
    {
        "link": "https://discuss.python.org/t/multiple-line-rules/18940",
        "document": "I also removed the brackets around for which a saw no reason. To make the code more readable (the conditional expression lowers the readability) you can split it to lines: new_stuff = [ x.lower() if isinstance(x, str) else x for x in random] I’m always leary putting things on multiple lines because I thought there were only certain circumstances where that could be done, like a dictionary for example. In line of syntax I thought a \n\n was needed to split, as you say, to a new line. I’m very green at this and get mixed up on the rules of one thing to another. I’m starting to get worried my 47yr old brain isn’t up to this but I really like the problem solving and that Ah-ha moment when I figure it out.\n\nNearly always, an error or exception is just a minor annoyance. Especially a SyntaxError, which occurs before your code can run. So be bold and feel safe that if you get the syntax wrong, the interpreter will tell you. I don’t remember what all the rules for multi-line code are, but I think these are the most important: Multi-line strings: use triple quote marks “”\" or ‘’’ create multi-line strings. Brackets – round () square and curly {} – can extend over multiple lines. Not just dicts, but also lists, tuples, sets, function calls, list comprehensions, etc. And finally, if all else fails (and this should be a last resort) you can extend a single line of code over multiple physical lines by ending it with a backslash: But beware! You can’t have anything after the backslash, not even a space. So its best to avoid this and use the bracket/parentheses trick instead:\n\nI’m very green at this and get mixed up on the rules of one thing to another. I’m starting to get worried my 47yr old brain isn’t up to this but I really like the problem solving and that Ah-ha moment when I figure it out. My brain is 60 years old, and what works for me often is to read the documentation. In this case, The Python Language Reference, 2. Lexical analysis. The rules are quite simple, actually. A Python program is divided into a number of logical lines. The end of a logical line is represented by the token NEWLINE. Statements cannot cross logical line boundaries except where NEWLINE is allowed by the syntax (e.g., between statements in compound statements). A logical line is constructed from one or more physical lines by following the explicit or implicit line joining rules.… Two or more physical lines may be joined into logical lines using backslash characters ( ), as follows: when a physical line ends in a backslash that is not part of a string literal or comment, it is joined with the following forming a single logical line, deleting the backslash and the following end-of-line character.… Expressions in parentheses, square brackets or curly braces can be split over more than one physical line without using backslashes.… In the post you quoted, @vbrozik connected readability to splitting across lines: To make the code more readable (the conditional expression lowers the readability) you can split it to lines For a demonstration of how line-splitting can add to readability I encourage to you play with Black, the uncompromising code formatter. I don’t claim that you will want to break lines in Black’s way, but it is an interesting point of view, and I am happy submitting to it. There is a Black playground which seems to let you try things without installing Black itself. See how and where it adds physical line breaks. Do you understand why those line breaks are syntactically valid? Do you think it adds to readability?\n\nThere is a Black playground which seems to let you try things without installing Black itself. See how and where it adds physical line breaks. Do you understand why those line breaks are syntactically valid? Do you think it adds to readability? In the playground link provided, I do see the line breaks on the left side and I understand why they are valid. The right side, however is easier to read and adding parenthesis around things so that you can use multiple lines without the line-breaks seems much better. My brain is 60 years old, and what works for me often is to read the documentation. After the Marines in the 90’s I’ve mostly worked non-technical jobs so my knowledge of the inner working of computers dates back to C: commands with a floppy disk. I can use a computer well enough for the jobs I do and I taught myself to type, so I feel like some basics classes in computer math or computer logic might help my comprehension of the logic behind the code I’m writing. I know this is an emerging field and I like the problem solving aspect of what I’ve learned so far… I’m also not sure which career field would best suit my skills once I can get some certifications. Where are the guidance counselors we used to have when we were kids lol. I’m hoping to find a good networking group in my community that can offer some guidance. Thank you for your insight!\n\nIn the playground link provided, I do see the line breaks on the left side and I understand why they are valid. The right side, however is easier to read and adding parenthesis around things so that you can use multiple lines without the line-breaks seems much better. Ah, so you like how Black breaks lines! Just to be clear, the left side of the Black playground is the input code, and the right side is how Black formats it. Note that the right side has more lines. That is because Black added line breaks to make the code clearer. Also, note that you can type or paste your own code into the left side, and the playground will show you what Black makes of it in the right side. Try typing in the … expression above, and see how Black inserts line breaks."
    },
    {
        "link": "https://stackoverflow.com/questions/172439/how-do-i-split-a-multi-line-string-into-multiple-lines",
        "document": "Why is better\n\nIt also can optionally return the newline character in the split result when called with a argument, which is useful in some specific scenarios.\n\nWhy you should NOT use\n\nUsing creates very confusing bugs when sharing files across operating systems.\n\nin Python represents a Unix line-break (ASCII decimal code 10), independently of the OS where you run it. However, the ASCII linebreak representation is OS-dependent.\n\nOn Windows, is two characters, and (ASCII decimal codes 13 and 10, and ), while on modern Unix (Mac OS X, Linux, Android), it's the single character .\n\nworks correctly even if you have a string with line endings that don't match your platform:\n\nHowever, explicitly splitting on \"\n\n\", has OS-dependent behaviour:\n\nEven if you use , it will only split according to the newline separator on your platform, and will fail if you're processing text created in other platforms, or with a bare :\n\nReading files in text mode partially mitigates the newline representation problem, as it converts Python's into the platform's newline representation.\n\nHowever, text mode only exists on Windows. On Unix systems, all files are opened in binary mode, so using in a UNIX system with a Windows file will lead to undesired behavior. This can also happen when transferring files in the network."
    },
    {
        "link": "https://medium.com/the-abcs-of-ai/handling-multi-line-strings-in-python-a-primer-for-deep-learning-enthusiasts-22be0aba7973",
        "document": "As a deep learning enthusiast, you often come across scenarios where you need to work with long text data, such as training data for natural language processing (NLP) tasks or documentation for your deep learning projects.\n\nIn Python, handling multi-line strings can be a bit tricky, especially when it comes to maintaining readability and proper syntax highlighting in your code editor. In this article, we’ll explore how to effectively handle multi-line strings in Python and discuss its importance in the context of deep learning.\n\nIn Python, you can define multi-line strings using triple quotes, either triple double quotes (`”””`) or triple single quotes (`’’’`). This allows you to write a string that spans multiple lines without the need for explicit line breaks or string concatenation.\n\n#By using triple quotes, you can maintain the readability of your code and make it easier to work with long text data.\n\n\n\nlong_string = \"\"\"\n\nThis is a long string that spans\n\nmultiple lines. You can write it\n\nacross several lines, and your code editor\n\nwill highlight it…"
    },
    {
        "link": "https://pythonmorsels.com/multi-line-strings",
        "document": "A string with line breaks in it\n\nHere we have a Python program called that acts like a timer:\n\nIt counts upward one second at a time, until we manually exit it by hitting :\n\nIf we run this program with any command-line arguments at all, it prints out a usage statement instead of counting:\n\nThis usage statement is represented by multiple lines of text in a single string.\n\nThis string has characters in it, which are newline characters.\n\nUsing string concatenation to build up long strings\n\nCurrently our string is pretty long.\n\nIt'd be nice to break it up over multiple lines.\n\nWe could make this code a little bit more readable by breaking this string up into substrings and then concatenating each of these substrings together:\n\nEach of these lines in our code represents one line of text (each line of text ends in a character) and we're using plus ( ) to concatenate these lines together.\n\nNow, notice these parentheses, those are necessary to tell Python that these lines are all a continuation of just one line of code. That's called an implicit line continuation.\n\nUsing implicit line continuation and string concatenation does work. But there's a better way to represent strings that span over multiple lines of text in Python.\n\nThese triple quotes ( ... ) tell Python that we're making a string that might span over multiple lines of code. So Python knows that it should treat all of the newline characters within this string as part of our string, until it hits the end triple quote.\n\nMultiline strings can use triple double quotes ( ... ), or triple single quotes ( ... ). Either style is accepted by Python.\n\nIf you need to represent a block of text in your Python code that spans over multiple lines, you can use a multiline string."
    }
]