[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee",
        "document": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe HTML element is used to insert a scrolling area of text. You can control what happens when the text reaches the edges of its content area using its attributes.\n\nThe HTML element is deprecated and its use is strongly discouraged. If you must create the effect of scrolling text or continuous elements, consider using CSS animations with CSS transforms instead of elements to smoothly animate content. Additionally, include the CSS query to stop the animation based on user preference, thereby improving user experience and accessibility."
    },
    {
        "link": "https://geeksforgeeks.org/html-marquee-tag",
        "document": "The <marquee> tag in HTML creates a scrolling text or image effect within a webpage. It allows content to move horizontally or vertically across the screen, providing a simple way to add dynamic movement to elements. Although this tag is deprecated in HTML5, it is still useful to understand its functionality for legacy projects.\n\nWhat is the HTML <marquee> Tag?\n\nThe <marquee> tag is used to create a scrolling effect for text or images. This tag can make content move left, right, up, or down, adding an interactive element to your web page.\n\nExample 1: Right to Left Scrolling\n\nIn this example, we will see the implementation of the <marquee> tag with right-to-left scrolling.\n\nThis example demonstrates the <marquee> tag with bottom-to-top scrolling.\n\nExample 3: Up to Bottom Scrolling\n\nIn this example, we will see implementation of above tag from up to bottom.\n\nIs the <marquee> tag still used in modern web development?\n\nWhat are the alternatives to the <marquee> tag?\n\nCan I style the <marquee> tag with CSS?\n\nHow do I control the speed of the <marquee> tag?\n\nWhat does the behavior attribute do in the <marquee> tag?\n\nThe behavior attribute specifies the behavior of the scrolling content. It can take three values: scroll (default), which makes the content scroll in the specified direction; slide, which makes the content slide in and stop; and alternate, which makes the content bounce back and forth within the marquee area."
    },
    {
        "link": "https://tutorialspoint.com/html/html_marquee_tag.htm",
        "document": "HTML <marquee> tag is used to create auto scrolling or moveable element within webpage.\n\nIf we place any content inside this tag then that element will slide from right to left by default on it's own, but we can change the direction and axis through the attribute. This tag is now deprecated tag but supported by major browsers till now, we recommend you to use JavaScript and CSS to create this effect.\n\nHTML marquee tag supports Global and Event attributes of HTML. Accept some specific attributes as well which is listed below.\n\nMethods are used to perform some particular task on any element. Below listed method can be used on <marquee> element.\n\nEvent Handlers are used to trigger or activate taske based on the behavior of the element. Below listed event handlers can be used on <marquee> element.\n\nBellow examples will illustrate the usage of marquee tag. Where, when and how to use marquee tag to create scrolling element.\n\nIn this example we will implementing horizontal scrolling using direction attribute. We can create scrolling from left to right as well as right to left.\n\nIn this example we will implementing vertical scrolling using direction attribute. We can create scrolling from down to up as well as up to down.\n\nUsing all attributes on marquee Tag\n\nHere in this example we will use all the remaining specific attributes indibitualy on the marquee element so you can understand the use of them as well."
    },
    {
        "link": "https://w3schools.in/html/marquee-tag",
        "document": "Marquee is one of the important tags introduced in HTML to support such scrollable texts and images within a web page. In this tutorial, you will learn about the Marquee tag and its different attributes for developing a well-groomed static website.\n\nThe tag is a container tag of HTML that is implemented for creating scrollable text or images within a web page from either left to right or vice versa, or top to bottom or vice versa. But this tag has been deprecated in the new version of HTML, i.e., HTML 5.\n\nThe different attributes of tag are:\n\nHere's are some example of how to use tag in HTML:\n\nThis is a sample scrolling text that has scrolls in the upper direction.\n\nThis is a sample scrolling text that has scrolls texts to down.\n\nThis is a sample scrolling text that has scrolls texts to the right.\n\nThis is a sample scrolling text that has scrolls texts to the left.\n\nMarquee speed can be changed using the \"scrollmount\" attribute. For example, if you are using , then it sets the marque to scroll very slowly, and as you increase the \"scrollmount,\" the scrolling speed will also increase.\n\nMarquee can also be implemented using CSS. Read the CSS Marquee chapter to learn more about it.\n\nThis is an example of blinking text using CSS within a marquee."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMarqueeElement",
        "document": "Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The interface provides methods to manipulate elements. It inherits properties and methods from the interface.\n\nSets how the text is scrolled within the marquee. Possible values are , and . If no value is specified, the default value is . Sets the background color through color name or hexadecimal value. Sets the direction of the scrolling within the marquee. Possible values are , , and . If no value is specified, the default value is . Sets the height in pixels or percentage value. Sets the number of times the marquee will scroll. If no value is specified, the default value is −1, which means the marquee will scroll continuously. Sets the amount of scrolling at each interval in pixels. The default value is 6. Sets the interval between each scroll movement in milliseconds. The default value is 85. Note that any value smaller than 60 is ignored and the value 60 is used instead, unless is . By default, values lower than 60 are ignored. If is , then those values are not ignored. Sets the width in pixels or percentage value.\n\nFires when the marquee has reached the end of its scroll position. It can only fire when the behavior attribute is set to . Fires when the marquee has finished the amount of scrolling that is set by the loop attribute. It can only fire when the loop attribute is set to some number that is greater than 0."
    },
    {
        "link": "https://dev.to/jnschrag/creating-pixel-art-with-css-3451",
        "document": "I have always enjoyed looking at and creating pixel art. Before online pixel makers were a thing, I used to spend hours making my own pixel art in Photoshop with the pencil tool. This article will show you how using CSS (and a tiny bit of HTML), you can use code to make your own pixel art creations.\n\nWhile it is 100% possible to create pixel art by creating a bunch of s and changing their background color, that's a lot of s to keep track of and copy if you want to reuse your pixel in multiple places. I prefer to create pixel art with a single , which we can do thanks to the property.\n\nis commonly used to create a drop shadow effect behind an element, like in the example below.\n\nHow does that help us with creating the straight-edged pixel art? By removing the blur & spread parameters from the definition, we can straighten out the sides of the shadow.\n\nNext, we want to move the shadow so it is beside the block instead of being behind it. We can do this by adjusting the X- & Y-offset parameters according to the rules below.\n\nShadows inherit their dimensions from the element they're applied to. To move the shadow to the right of the block, we need to set the X-offset to be the same as the width of the block: . If we change the Y-offset to , the result looks like if we had two blocks sitting side-by-side.\n\nIt's starting to look like pixel art! But this only gives us two \"pixels\", and we're going to need a lot more than that. Thankfully, the property isn't limited to just one effect. By separating our effects with a comma, we can create multiple pixel-looking shadows.\n\nNow that we know how we can use , it's time to start making a real piece of pixel art.\n\nWe're going to be creating a pixel version of Pusheen. If you're new to making pixel art, I recommend searching for existing art so you have a reference for where your pixels should be placed. I'm going to be recreating this version of pixel Pusheen.\n\nIt is made up of 414 pixels (23 columns x 18 rows). To help me easily identify the individual pixels, I've used Photoshop to overlay a grid on the reference image.\n\nAlthough you could start drawing your pixel from anywhere, I'm going to start in the uppermost left corner so I don't have to worry about any negative offsets in my effects.\n\nI'm also going to use SASS instead of vanilla CSS to avoid writing 414 declarations by hand. By utilizing a custom SASS function and lists, we can automate calculating the offset positions and make our code more DRY.\n\nFirst, I’m going to make some modifications to our block. Instead of applying the to the block itself, I’m going to apply it to a pseudo element instead that is absolutely positioned relative to the block. Why? Because doesn’t take up space, meaning if I were to put another element next to my cat block, it would sit on top of my shadows. If we make the size of the cat block the final size of our pixel art, we can avoid this problem, but we need the pseudo element to separately define the width/height of our pixels (remember, the size of the shadow is inherited from the element the box-shadow is applied to). This is what those changes look like:\n\n\n\nNext, let’s set up some variables.\n\n\n\nNow we’re going to create a list to track what color each pixel should be. Starting on the left, let’s create a list for the first row.\n\n\n\nWe could create new variables for each of the subsequent rows ( , , etc.), but a better approach is to create a nested list, like so:\n\n\n\nThe nested list approach has the benefit of providing us with all the information we need to generate our effect for each of the cell: the X/Y positions to calculate our offset and the color of the shadow. We'll access that information with a custom \"pixelize\" function.\n\nOur \"pixelize\" function is going to do the heavy-lifting of turning our list of colors into usable definitions. I've provided line-by-line explanations of what this function does below.\n• Line 1: The function takes two arguments: the list of and the that the pixels should be\n• Line 2: Initializes our variable as a string. This is the variable the function will modify and return.\n• Line 3: Returns the number of rows in the list using the built-in function\n• Line 5: Starts a loop that iterates X times, where X is the number of rows in our list. The will increment by 1 on each loop.\n• Line 6: Calculates the Y-offset of all cells in that row. SASS Lists are index-1 (not index-0), so we subtract 1 from the current index so the 1st row has a Y-offset of 0, 2nd has Y-offset of 1, etc.\n• Lines 7 & 8: Returns the value of the current list item (the list of colors for the row) & calculates its length to determine the number of columns in the row\n• Line 10: Starts a loop to iterate over each column in the row\n• Line 11 & 12: Calculates the X-offset of that cell & returns the corresponding color\n• Lines 14-17: Sets the separator for the effects, but removes it for the first cell to ensure a valid property value.\n• Line 19: Updates the value to its existing value plus the new cell:\n• Line 23 & 24: is a string, so we use the function to remove the containing quotes. Finally, return the result.\n\nPut it all together, and here is our final Pusheen pixel!\n\nPretty neat! With a little refactoring, the use of CSS Variables, & a smidge of JavaScript, we could even allow users to select their own colors for their cats.\n\nI hope this post has inspired you to make your own pixel art. Even if it hasn't, I hope you've learned how you can use the property to create some neat effects in your projects. If you're interested in seeing more pixel art, including examples of how to animate them, check out \"Fun Times with CSS Pixel Art\" by Geoff Graham on CSS-Tricks."
    },
    {
        "link": "https://medium.com/@araltasher/create-pixel-art-using-css-part-2-2be8275ed73d",
        "document": "We’ll be using SCSS for styling so you’ll need to compile your SCSS to a CSS file once you’re done, or if you’re following this on CodePen, just make sure to set your pre-processor to SCSS.\n\nAs starters, let’s create our HTML mark up:\n\nThe is the container for our art, and the will be where our pixel art will live. The reason why I’m wrapping the pixel art around a container is purely personal preference; that way I can center the whole image with a simple trick.\n\nNow let’s move on to our file. We’ll start by creating a color map for our art; these will be all of the colors that we will use to draw our heart, and for this example we’ll only use red and transparent colors:\n\nFeel free to pick whatever color you’d like, but make sure to include the transparent as a color, as we’ll need that for the empty pixels.\n\nBefore we move on to creating our pixel art, let’s style our container, so that we have a nice background color and the art is positioned right in the center of the page once we are done.\n\nNow that that’s out of the way, let’s decide how big each pixel should look like, and then get on to creating our pixel matrix. The pixel matrix is essentially a 1-to-1 mapping of our art in matrix form. So if you recall our coordinate map from the previous tutorial, we’ll basically create that in matrix form.\n\nFor every pixel that’s blank, we’ll use , and for every red pixel we'll use from our color map.\n\nThe affects how big each pixel will be displayed on the screen. The reason why we set a variable for the size is because we will need to reference this size later on for multiple calculations. Moreover, keeping the size as a variable will allow us to change the size of our final-pixel art dynamically!\n\nIn the end, your heart matrix should look like above. If you look close, you can see that the ’s are in the shape of our pixel-heart.\n\nThe Algorithm for Drawing the Pixel Art\n\nTo draw the pixel art, we’ll be taking advantage of some powerful attributes of SCSS and create some functions. The function will take in our matrix and the variable we defined earlier --which is 20px, and draw the image.\n\nWe’ll draw the image by simply going through each row in our matrix one by one, and append the colors from the map as a property. In order to do this, we take advantage of for-loops and use 2 nested loops to iterate through the rows, and each individual cell.\n\nThe outer loop will go through each row, whereas the inner loop will iterate through each cell in that row. As we hit each cell on the inner loop. Here’s a little animation I created to explain the process visually:\n\n// Read matrix and pixelize\n\n@function pixelize($matrix, $size) {\n\n // Empty string to append all the drop-shadow properties\n\n $sh: '';\n\n \n\n // We'll use the length of our matrix to determine how many rows we need to loop through\n\n // In this case, if we look at our pixel-heart matrix, we can see that \n\n // we have 6 rows for our heart\n\n $rows: length($matrix);\n\n\n\n // The outer for-loop will iterate through each row\n\n @for $row from 1 through $rows {\n\n $row-num: nth($matrix, $row);\n\n @for $col from 1 through length($row-num) {\n\n $dot: nth($row-num, $col);\n\n\n\n // Append the shadow-property for each cell\n\n // So for cell 1, 3 our drop shadow propery will be\n\n // 1x20 and 3x20px with the color #F1A9A0\n\n // Eg: \"20px 60px #F1A9A0\"\n\n $sh: $sh + ($size*$col) + ' ' + ($size*$row) + ' ' + map-get($colors, $dot);\n\n \n\n // Add a comma after each drop-shadow except the last one\n\n @if not ($col==length($row-num) and $row==$rows) {\n\n $sh: $sh + ',';\n\n }\n\n }\n\n }\n\n\n\n // We have to unquote our final list\n\n // so that it's not a string when the CSS is applied\n\n @return unquote($sh);\n\n}\n\nSo we wrote a small algorithm to loop through a given matrix — which is the mapping of our art, and a size to draw the pixel-art. Now let’s style our art container, and apply this algorithm so that we can finally see our art on the page.\n\nLet’s go back to our styling and add the for our art. is nested in the code since, on our HTML, the heart is a child of our container.\n\nOur art won’t display until we give it a height and width, so we use our matrix size to decide how tall and wide our art is going to be. So for our height, we use the length of the rows multiplied by the pixel size, which is 6*20px, and for the row, we pick the length of our first row, multiplied by the pixel size 9*20px .\n\nAfter calculating the height and width, we attach the box-shadow property by calling our function and passing on the matrix, and the predefined value on the pseudo-element.\n\nThis was a decently long and complex tutorial, and it might look like a lot of work to draw a simple heart. But once you understand the full code, you can draw a lot more complex images 10x faster than with pure CSS.\n\nI hope you guys enjoyed this tutorial, and I can’t wait to see what kind of Pixel Art you’ll create with what you’ve learned here! If you do draw anything by following this tutorial make sure to use #araltasher on your Instagram posts, and I’ll make sure to check them out. Again all of the sample code is available on my CodePen .\n\nMake sure to check out my Darth Vader art if you don’t believe me!"
    },
    {
        "link": "https://reddit.com/r/Frontend/comments/1d5530g/is_pixelperfect_in_frontend_development_still_a",
        "document": "Obviously the answer is 'when it's required' but, with all the new tools and libraries we have today, I feel like there is less emphasis on being pixel-perfect. Generally when I get a new project involving styling, I just ballpark everything, everyone is happy unless there is something blatantly off. I used to work at digital agencies a long time ago, when being pixel perfect was really important. Pre Bootstrap days. Pre figma. I measured pixels with the marquee tool in photoshop.\n\nI had been thinking of this because of a project I did in 2018-19, where I was to build the frontend from designs for a website refresh. When I delivered the first page for review the CEO (who, unfortunately also designed the pages) came back with pixel specific revisions, and at the time I brushed it off and made the necessary adjustments.\n\nSeveral revisions and pages later we hadn't made the progress the CEO wanted to and got on a call where he was concerned that the project is behind and we're spending a lot of time on the back and forth, why can't i just code it as designed. Obviously I was trying to code it as designed, but this was like, next level nit picking - 1px off here, line-height not correct there, font size should be bolder for this, this break point everything is different. There was a low-key insult there but I don't quite remember what it was, maybe he shoulda tried harder to insult me.\n\nAnyway my response to him was that the CSS framework we were using, out of the box, is fully capabale of handing all the different custom gaps, widths, colors, and responsiveness. Cross browser, compatible, out of the box. But as you start to tinker, as you start to add more granular exceptions, you just create more points where things might not look correct, trying to satisfy the few people using an old browser or device, for example.\n\nUltimately he eased up but, not really, I just found better ways of making sure the \"19px padding on this page but 20px on that page but when its in mobile it should be 18px padding throughout\" broke less.\n\nIn other words, I did what I could to give him my best professional opinion; some people just want things done their way, down to the pixel."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Games/Techniques/Crisp_pixel_art_look",
        "document": "Retro pixel art aesthetics are getting popular, especially in indie games or game jam entries. But since today's screens render content at high resolutions, there is a problem with making sure the pixel art does not look blurry. Developers have been manually scaling up graphics so they are shown with blocks that represent pixels. Two downsides to this method are larger file sizes and compression artifacts.\n\nThe good news is that you can use CSS to automatically do the up-scaling, which not only solves the blur problem, but also allows you to use the images in their original, smaller size, thus saving download time. Also, some game techniques require algorithms that analyze images, which also benefit from working with smaller images. The CSS property to achieve this scaling is . The steps to achieve this effect are:\n• Create a element and set its and attributes to the original, smaller resolution.\n• Set its CSS and properties to be 2x or 4x the value of the HTML and . If the canvas was created with a 128 pixel width, for example, we would set the CSS to if we wanted a 4x scale.\n• Set the element's CSS property to , which does not make the image blurry. There are also the and values that work on some browsers. Check out the article for more information on the differences between these values, and which values to use depending on the browser.\n\nLet's have a look at an example. The original image we want to upscale looks like this: CSS to size the canvas and render a crisp image: And some JavaScript to set up the canvas and load the image: // Get canvas context const ctx = document.getElementById(\"game\").getContext(\"2d\"); // Load image const image = new Image(); image.onload = () => { // Draw the image into the canvas ctx.drawImage(image, 0, 0); }; image.src = \"cat.png\"; This code used together produces the following result: Note: Canvas content is not accessible to screen readers. Include descriptive text as the value of the attribute directly on the canvas element itself or include fallback content placed within the opening and closing canvas tag. Canvas content is not part of the DOM, but nested fallback content is."
    },
    {
        "link": "https://webfx.com/blog/web-design/coding-a-clean-illustrative-web-design-from-scratch",
        "document": "In this comprehensive and step-by-step web development tutorial, you will learn how to convert a Photoshop mockup of a professional web layout design that features an illustrative landscape header into a standards-compliant XHTML/CSS template. This is a follow-up tutorial requested by you, the readers of Six Revisions. To learn how to create the Photoshop web layout mockup, head on over to the tutorial called How to Create an Illustrative Web Design in Photoshop.\n\nClick on the following image to check out the live demo of what we’ll be building.\n\nDownload the source files and use them as your website template\n\nWe’re releasing the source files of this tutorial under the GNU General Public License we only ask that you retain the copyright information in the source code (which aren’t visible in the design).\n\nIf you’re not interested in reading the tutorial, you can use for your website or web template. So this post is a tutorial and a freebie.\n\nLet’s get the show started, shall we? Make sure you have a pot of coffee or your favorite caffeinated drink handy because you’re in for a long ride!\n\nSetting up our work area and files\n\n1 Create a new folder somewhere on your desktop called web design layout. 2 Within the web design layout folder, create another folder called images.\n\n3 Create a new blank HTML file using your favorite code editor and save it inside your web design layout folder with a filename of index.html. 4 Create a blank CSS file called styles.css and save this inside the web design layout folder. You should now have an ideal working setup for our template.\n\n5 Open up your index.html file and your styles.css file in your code editor.\n\n6 At the top of your HTML file, locate the tag. Inside the tag, add your website title. The information you input into the tag will determine what is displayed in the browser window.\n\n7 Underneath your tag, you need to link to your stylesheet using the code below.\n\nWe can now start to mock-up some of the HTML code for our layout. There are many ways to convert a Photoshop file (PSD) into a working template. Some people slice all the images first, then start coding the template and some people prefer to code, then slice afterwards.\n\nI find it best to code and slice as you go along starting from the header and working your way down the design.\n\n8 We’ll start off with a simple container div with an ID of . Use the HTML markup below.\n\n10 Now that we have a basic foundation, we can slice our background image and our header image. Open up the PSD file called illustrative_web_design_psd.psd in Adobe Photoshop which is freely available for download in the the first part of this tutorial series called How to Create an Illustrative Web Design in Photoshop.\n\nDownload the source files from that tutorial, then head on back over here. 11 Once the PSD file is opened in Photoshop, make sure that the Layers Panel is open by choosing the Window menu and making sure Layers is checked (alternatively, F7 toggles the Layers Panel). 12 Turn off all of your layers’ visibility as shown in the following figure.\n\n13 Select the Rectangular Marquee Tool (M) and make a selection around your header area similar to the following figure; don’t forget to include 2px of the background (as shown). 14 Once you’ve made the selection, go to Image > Crop. Important: Don’t save your PSD file!\n\n15 Save the cropped file for the web by choosing File > Save for Web & Devices (Alt + Shift + Ctrl + S). Save the file with the name header.gif inside your images folder. 16 Close your PSD file and when prompt to save, choose “No“. 17 Now, open up header.gif inside Photoshop. 18 Using the Zoom Tool (Z), zoom in to the right hand side where the mountain on the illustration ends. You will notice the mountain has a darkly shaded area where the inner shadow was added.\n\n19 We need to carefully erase the shaded bit so it matches the color of the mountains. Use the Rectangular Marquee Tool (M) to make a selection on header.gif just like the figure below. 20 Once you’ve made the selection, we’ll transform the selection.\n\nChoose Edit > Free Transform (Ctrl + T) to free transform the selection. Select the middle right transform control and drag towards the right edge. You should have something like the following figure.\n\n21 Resave your file (header.gif) by going to File > Save for Web & Devices (Alt + Shift + Ctrl + S). Leave your header.gif open in Photoshop. 22 Use the Rectangular Marquee Tool (M) to make a selection from the top to the bottom of the header area and as wide as the flat part of the mountain.\n\nUse the following figure as a guide. 23 Once you’ve made the selection, crop the image again using Image > Crop. 24 Save the cropped image as bg.gif inside your images folder using File > Save for Web & Devices (Alt + Shift + Ctrl + S).\n\nResetting margins and paddings of all elements\n\n25 Head back over to your code editor and open up styles.css.\n\n26 Before we start adding our header styles, we need to add a small CSS reset to reset all of the page elements’ margins and paddings. There are many methods to do this, but for the sake of succinctness, we’ve chosen to use the following method. If, however, you would like to learn more about better methods for resetting your styles, read the article called “CSS Tip #1: Resetting Your Styles with CSS Reset“. The CSS reset looks like this:\n\nOnce you’ve added the CSS reset at the top of your styles.css file, we can begin to style the body of our HTML document. 27 The bg.gif file will be incorporated as a CSS background and it will be repeated horizontally along the x-axis. We then finish off the body styles by adding a background color which matches our design’s background.\n\nWe can also remove some of the default styling from our paragraphs by styling the paragraph ( ) tags. Inspect the following block of code.\n\n28 The width of the design mockup is 950px. To set the width of our page template and to center it in the browser, we style the div using margin:auto technique and assign it a 950px width attribute.\n\n29 Before we style our div, we must first determine what the height of our header image is.\n\nIf you’re using Windows Vista, you can simply click the image file and it will tell in the status bar what the dimensions are. Feel free to use your own method on finding out the height of the image. As you can see from the figure below, the height is 302px.\n\n30 We can start styling our div by assigning a fixed width of 950px and a fixed height of 302px. We also float our image to the left. We add the header.gif image as a background.\n\nWe set the background-repeat atrribute to “no-repeat” to stop our header image from repeating horizontally, which is the default behavior in most web browsers. See the following code block.\n\n31 Test the index.html file by opening it in your web browser, you should have something that looks like the following figure.\n\nWe can’t really insert our logo/website title into our template as pure text because it contains too many layer styles in Photoshop.\n\nWe have no option but to include it as an image. 32 To start, open up your PSD file (illustrative_web_design_psd.psd) again. 33 Using the Rectangular Marquee Tool (M), make a selection around your logo/website title.\n\nUtilize the figure below as a guideline on how to make this selection. 34 Once you’ve made the selection, in the Layers Panel, turn off the visibility of all of your layers apart from the layers related to your logo/website title. The background should be transparent.\n\n35 Choose Image > Crop to crop the canvas down to just the logo/website title. 36 Save the cropped image as a PNG file. Use File > Save for Web & Devices (Alt + Shift + Ctrl + S) and save it with the name logo.png into your images folder.\n\nAdding the logo to the HTML document\n\n37 Head over to your HTML document and add a div called as a child of our div.\n\n38 Inside the div, add an element. 39 Inside the element, add a hyperlink ( ) with the name of your website. The reason we use an tag and not an inserted image is because were going to use a CSS background-image text replacement technique.\n\nYou can read about this technique on the stopdesign website in an article called Using background-image to replace text. Here is the code block for the above steps:\n\n40 We can start styling the logo/website title by adding a top margin to the div which will push our image down to where we want it.\n\n41 We then display our element as a block element and float it to the left. Our logo image had a width of 269px and a height of 45px so we style our element with those attributes.\n\nWe also need to push our element’s text off the page. We can do this by utilizing the CSS property with a value of -9999px.\n\n42 We then need to style our link that resides inside the element so it displays a block element or else the user might not be able to click on the logo to go to the home page. We can make the width and height of the link equal to its containing parent, so we simply give them 100% width and height property value.\n\nSo that the user doesn’t encounter a gray border when they click on the logo, we set the element’s outline attribute to none. Finally, we add the logo.png as a background image, again making sure that we give the background CSS property value of no-repeat so that it doesn’t tile our logo horizontally.\n\n43 Test your work in a web browser. The web layout should now look like the following figure (Oh, and by the way, if this section is new to you, congratulations, you just learned how to pull off a CSS background-image replacement technique).\n\nDetermining the height of the template’s primary navigation\n\n44 Before we start with the navigation, we must first find out what the height of it is. Re-open your PSD file and use the Zoom Tool (Z) to zoom in on your navigation area so that you can clearly see where the navigation starts and begins. 45 Make sure that the Info Panel is open by making sure Window > Info is checked (F8 to toggle the panel on or off).\n\n46 Use the Rectangular Marquee Tool (M) to make a selection. Use the following figure as a guide on how to make this selection. 47 Look at the Info Panel to determine the height (H:) value of the selection.\n\nThis is the height of our navigation (which I determined to be 38px).\n\nPutting the navigation bar in the HTML document\n\n48 Head back to your HTML file where we’ll now be adding the navigation to our HTML document’s structure. We’ll be using two simple unordered lists inside the div. We’ll put these guys inside a div called .\n\nInspect the following block of code.\n\n49 We first style our div. We add a fixed height of 38px which was the height we determined in Photoshop. We give the div a fixed width of 950px, same as our div.\n\nFinally, we place a top margin attribute to push our navigation down away from our logo and then floating it to the left.\n\n50 We style our navigation list items ( ) by floating them to the left, setting our links inline with each other. We add padding to the top and the right of the list items. The top padding pushes the links down, vertically centering them on navigation bar, whereas the right padding separates each link with a 25px gap.\n\n51 Our actual links (the elements inside the list items) will also need styling.\n\nWe give them some visual styles such as font family, color, and size. We also remove the default underlines of hyperlinks and also capitalize the text (using the attribute). We can also reduce the letter spacing by setting it to -1px.\n\nAlso, we change the color of the links to yellow when the user mouses over them (using the psuedo-selector). Inspect the code below to make sure you see how the above description translates to CSS.\n\n52 The list is styled in the same way as the list but we only really need to style the list items ( ). The most important style to pay attention to is the float attribute – we float it to the right so the phone number text is on the right of our web layout’s navigation bar.\n\nThe rest of the code is pretty self-explanatory.\n\n53 Test your work in a web browser. Your template should now look something like the following figure.\n\nThere are two ways we can code the content area.\n\nWe can either code our boxes as squares and use the CSS3 property to make them rounded with the downside that not all browsers support this method. The second option is to slice the content boxes up and set them as CSS background images on the box. If it was my personal website, I’d use , but for this tutorial, I think we’ll slice the content boxes up.\n\nIt’s good Photoshop practice, and until CSS3 specs reach W3C final recommendation status, it’s a bit risky to use CSS3 properties unless we code for Progressive Enhancement (which is out of the scope of what we want to do here). 54 Head over to your PSD file again. In the Layers Panel, hide the visibility of all your layers except for the welcome… group which contains layers for our main content box.\n\n55 Use the Rectangular Marquee Tool (M) to make a selection around the top half of the content box where the corners are rounded. Follow the figure below as a guide to making your selection. Note that the reason why I have chosen to make such a big selection is because the actual title area on the content box should actually be big enough inside for our text.\n\n56 Save the image as a PNG file by going to File > Save for Web & Devices (Alt + Shift + Ctrl + S) and save it as content_box_top.png inside your images folder. Repeat the process for the bottom part of the content box but when saving for the web, use the file name content_box_bottom.png. Check out the following figure to see how to create the marquee selection for the bottom part.\n\n57 The markup for our left content boxes where our primary content will show up is easier than it looks. First, we need create a div called . Inside the # div, we need to create three divs with distinct classes: , , and .\n\nThe div will contain our top content box image, the div will contain our main content, and our will contain the bottom content box image. Inspect the following block of code.\n\n58 We start with our div: we float it to the left, add a fixed width the same size as our content box images (566px), and then add a 20px top margin which will push the content boxes down away from the navigation.\n\n59 For the div class, we need to set our content_box_top.png file as a background, float the div to the left, and add a fixed height and width the same as our image.\n\nRemember that the padding also makes up the full amount towards the width so whatever padding you add, you’ll have to deduct it from the width or height. We then need to make sure our tags (which functions as our content box titles) sit nicely in the middle of the top part of the content box. To do this, we add a small top and bottom margin of 4px on the style rule and then add a bigger left and right margin to push the text across.\n\nInspect the following block of code to make sure the description above makes sense.\n\n60 The div will have a few different styles from , we can achieve the same look in the web layout mockup by using the CSS property. Inspect the following block of code to see how it works.\n\n61 The class will be styled in the same way as our class: we add content_box_bottom.png image as a CSS background, floating it to the left, and then adding a margin to the bottom of the box so it leaves a nice gap in between any other additional content boxes we might add.\n\n62 You may now add some dummy content to the content middle class, I’ve added a couple of paragraphs similar to our PSD file. We give the elements some visual styles (capitalize them, adjust letter spacing, etc.).\n\nIn our PSD file, we had a selection of text which was green and italic, this can be achieved by wrapping the text inside a with a class of . We align the text inside the content box by styling the elements and giving them a CSS property value of justify. Inspect the following code block to see if the above description makes sense.\n\n63 If you test your template in your browser you should now have something like the following figure.\n\n64 Create more content boxes by copy and pasting the , , and set inside .\n\n65 The sidebar boxes will be sliced in exactly the same way as we did our main content boxes, the only difference really is that the slices will just be smaller in width. Start by switching back to our PSD file.\n\n66 Hide all your background layers’s visibility in the Layers Panel so the background is transparent. 67 Make a selection around the top half of your sidebar box using the Rectangular Marquee Tool (M); make sure you get as close as you can to the edge, down to the last pixel. Use the figure below as a guide.\n\n68 Crop the PSD file to the selection using Image > Crop. 69 Save the cropped image as sidebar_top.png inside your images folder. 70 Close your PSD file and choose “No” when you’re prompted to save the changes (VERY important).\n\n71 Re-open your PSD file and repeat the same steps above, just with the bottom part this time. Again, create the selection as close to the edges as possible. 72 Crop the image by using Image > Crop.\n\n73 Save the cropped image as sidebar_bottom.png inside your images folder.\n\n74 The markup for our sidebar/right content area will be very similar to our main/left content, we’ll start with a div that has an ID of . Inside this div, we’ll have three classes: , , and . The class will contain our sidebar box title.\n\nWe’ll wrap the titles in tags exactly like in our left content area. The class will contain our sidebar content. Examine the following code block featuring the markup of our sidebar/right content area.\n\n75 We can now style our sidebar using the styles below. All the code is similar as our left content styles except for a couple of things. First, the height and width of our fixed elements.\n\nThe other difference is that the is floated to the right instead of the left. We also use the sidebar_top.png and sidebar_bottom.png we sliced in the previous section as the CSS background images of the and divs. Take a few moments to examine the code block below.\n\n76 Add some dummy content into your boxes then give it a whirl in your web browser.\n\n77 Slicing our footer is going to be quick and painless. To start head over to our PSD file.\n\n78 Use the Zoom Tool (Z) to zoom into your footer area. 79 Use the Rectangular Marquee Tool (M) to create a 1px wide selection spanning the height of your footer. Use the following figure as a guide.\n\n80 Crop the canvas to the selection using Image > Crop. 81 Save the file inside your images folder as a GIF called footer.gif.\n\n82 The div for the footer will sit outside of our div. The reasoning behind this is that we want the footer to span the entire width of the web browser: if you created the footer inside the div, it would have a max width of 950px.\n\nWe’ll start off using a div with an ID of Inside the div, create another div called . Inside , add your footer content inside tags. Study the markup below.\n\n83 We’ll style the by first adding our footer.gif as a CSS background.\n\nWe’ll want to repeat this background horizontally (along the x-axis). We need to clear both floats so the remains underneath the div. We also use a fixed height of 111px which is 20px bigger than our actual footer image that we created in Photoshop because when you add padding or a top margin to move the footer down away from the content, the gap tends to always be bigger or smaller in other browsers.\n\nThis way, the gap will always remain the same. Study our div’s style rule below.\n\n84 Our div will have a fixed width of 950px – equivalent to our div so that the content is flushed to the left and right of the page’s container. We set the margin CSS property to auto which will center our div in the same way div is centered.\n\nWe’ll add 20px padding to the top which will then bring our footer area level with our footer image. Check out the style rule to accomplish the things above.\n\n85 Our footer text inside a tag can also be styled. The top padding of 35px will push our text down into the middle of our footer.\n\nThat’s it – all done!\n\nIf you followed the steps, you should now have a working template. Click on the following image to check out the live demo of what we’ve made together.\n\nThe template has been checked in both Firefox and Internet Explorer 7. The only minor issue is a slight alignment difference within the height of the footer text. This can easily be fixed with a Internet Explorer 7 specific stylesheet. The template has also been validated through W3C auto-validators with no errors.\n\nWe’ll try to help you through all of your questions, so pose them in the comments.\n\nRemember that Six Revisions is beginner-friendly so don’t be afraid to ask any questions with the tutorial – the community here is friendly and we love helping each other out.\n\nWebFX is a full-service digital marketing agency that offers everything from personalized web content to social media marketing, all with a motive of being as transparent as possible and providing our clients with high-quality custom reporting. We have provided numerous clients with knowledge about web design and online marketing. These clients range from boat dealers to family-owned electrician companies.\n\nCheck us out for your website’s needs.\n• How to Create an Illustrative Web Design in Photoshop\n• How to Create a Dark and Sleek Web Design from Photoshop"
    }
]