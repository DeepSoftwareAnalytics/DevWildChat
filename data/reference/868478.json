[
    {
        "link": "https://stackoverflow.com/questions/11555355/calculating-the-distance-between-2-points",
        "document": "If you are using data type to represent a point, you can use\n• Result of is System.Windows.Vector and it has also property to save one calculation if you just need to compare distance.\n• Adding reference to assembly may be needed in your project\n• You can also use operators\n\nExample with and operators\n\nUnfortunately, and is available only in . It is not part of , , .\n\nand does not have any usable methods and operators and they are just containers.\n\nInteresing is which is probably best replacement for . It has similar API and is available in all flawors. But, the semantics is strange - using Vector for Point representation."
    },
    {
        "link": "https://stackoverflow.com/questions/26170708/math-pow-and-math-sqrt-formula-returning-value-of-0",
        "document": "So I don't think I'm bad at math, and I don't think translating simple math distance formulas into code is that difficult if I knew what I was doing. Which apparently I don't. Long story short, I'm supposed to calculate the distance between two 3D points and for some reason, my formula isn't working correctly. I don't know if I just wrote it wrong or if something is off, because I've written it multiple times and it still doesn't work right.\n\nThis is my , which has my distance formula\n\nI've tried writing it two ways, both of which test to 0 (I'm using a nested loop, with all variables looping up to 3, to test before I write for user input).\n\nIf anyone could explain why I'm getting this problem, it would be much appreciated.\n\nEdit: I know people are telling me to initialize to a certain value. I'm pretty sure I initialized it in my test loop, which I realize I should have posted for clarity.\n\nAnd yes, I do think it's a bit messy but I'm just trying to get it to work first before I get it to look nicer."
    },
    {
        "link": "https://geeksforgeeks.org/c-sharp-math-sqrt-method",
        "document": "In C#, Math.Sqrt() is a Math class method which is used to calculate the square root of the specified number. Sqrt is a slower computation. It can be cached for a performance boost. Syntax:\n\nReturn Type: This method returns the square root of d. If d is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned. The return type of this method is System.Double. Examples:\n\nBelow C# programs illustrate the working of Math.Sqrt():\n• Program 1: When the argument is positive double value then this method returns the square root of a given value.\n• Program 2: When the argument is Negative, this method will return NaN.\n• Program 3: When the argument is double value with decimal places, then this method will return the square root of a given value.\n• Program 4: When the argument is positive or negative Zero, then it will return the result as Zero.\n\nNote: If the value is too large then it gives the compile time error as error CS1021: Integral constant is too large. Reference: https://msdn.microsoft.com/en-us/library/system.math.sqrt"
    },
    {
        "link": "https://github.com/nawodyaishan/gamedev-pythagoras",
        "document": "The following program uses C# to calculate the distance between two points and the angle from the first point to the second point, based on the Pythagorean theorem.\n\nThis implementation is typically useful in the field of game development to find distances and angles between game objects or players in a 2D space.\n\nThe main class of this application, which houses all the logic.\n\nThe class has four static fields:\n• and : These represent the x and y coordinates respectively of the first point.\n• and : These represent the x and y coordinates respectively of the second point.\n\nThis is the entry point of the application. It begins by accepting a string from the console which should contain the coordinates of two points. The points should be in the following format: , where and are the coordinates for the first point, and and are the coordinates for the second point.\n\nIt then calls the method to parse the input string and assign the coordinate values to the relevant fields.\n\nNext, the program calculates the distance between the two points using the Pythagorean theorem:\n\nThe angle from the first point to the second is calculated using the function and converted to degrees:\n\nThese values are then printed to the console.\n\nThe application will continue to accept new input from the console until the user inputs a string that starts with 'q', which will exit the application.\n\nThis method is used to parse an input string and extract the coordinates for two points. The method assumes the input string is in the format: . It uses the function to find the spaces in the string and the function to extract the coordinate values.\n\nTo run this application, a user would input a string of four numbers separated by spaces, representing two 2D coordinates (e.g., ). The application will then output the distance between these two points and the angle from the first point to the second, rounded to six and five decimal places respectively.\n\nThe user can then input another set of coordinates or type 'q' to quit the application."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.math.pow?view=net-9.0",
        "document": "Some information relates to prerelease product that may be substantially modified before it’s released. Microsoft makes no warranties, express or implied, with respect to the information provided here.\n\nThe number raised to the power .\n\nThe following example uses the Pow method to calculate the value that results from raising 2 to a power ranging from 0 to 32.\n\nThe following table indicates the return value when various values or ranges of values are specified for the and parameters. For more information, see Double.PositiveInfinity, Double.NegativeInfinity, and Double.NaN.\n\n* These rows don't appear in the full set of rules for as defined by the IEEE Standard for Floating-Point Arithmetic. They're included here because .NET disables IEEE 754 floating-point exceptions and thus doesn't differentiate between (quiet NaN) and (signalling NaN). The IEEE 754 specification allows this exception disablement.\n\nThis method calls into the underlying C runtime, and the exact result or valid input range may differ between different operating systems or architectures."
    },
    {
        "link": "https://stackoverflow.com/questions/77579515/how-to-get-user-input-in-a-c-sharp-console-application-and-process-it-as-items-o",
        "document": "I made a few changes to your code to make it work as per your requirements.\n\nFirst, as pointed out by @jdweng in a comment, you need to move the assignation of your List before , because using you are coming back to that point and resetting the list to new() each iteration. Also note that you only need to store in the list to keep track of all the items you buy, so you can use a instead of a . I've called it :\n\nFor the options and you are not buying anything so you need to a new item to the orders only inside the block, which is the case when you buy an item:\n\nFinally, in order to show the list of all your items in the order, since the two arrays and loop through the list and for each order, print both the item name and the price. In each iteration, you also add the price to the variable to keep track of the total cost of your order and print it in the end:\n\nAll in all, the complete program looks like this:\n\nI agree with @Narish that you should probably refrain from using , and , as it makes the code harder to read, and it makes your code brittle, unnecessarily convoluted and prone to bugs and brittle (see what is wrong with using goto?). Instead, you can control the execution flow of your program with , or loops.\n\nAlso, take into account that the index in C# arrays and collections are 0-based, which means that the first position is 0, the second position is 1, and so on. Therefore, in your example:\n\n1 and 2 correspond to Gpu and Ram, not to Cpu and Gpu."
    },
    {
        "link": "https://w3schools.com/cs/cs_user_input.php",
        "document": "You have already learned that is used to output (print) values. Now we will use to get user input.\n\nIn the following example, the user can input his or hers username, which is stored in the variable . Then we print the value of :\n\nThe method returns a . Therefore, you cannot get information from another data type, such as . The following program will cause an error:\n\nLike the error message says, you cannot implicitly convert type 'string' to 'int'.\n\nLuckily, for you, you just learned from the previous chapter (Type Casting), that you can convert any type explicitly, by using one of the methods:"
    },
    {
        "link": "https://stackoverflow.com/questions/11252612/c-sharp-console-user-input",
        "document": "Console.Read() returns the ASCII value of the key entered. For example if you type in \"A\", you get the value 65 which is the ASCII code for \"A\".\n\nYou will need to parse your string to an integer:\n\nAlso note that arrays are indexed starting with 0 in C#, not with 1 as your code assumes.\n\nAlternatively you can still use Console.Read(), which returns the integer representation of the character entered, confirm that the character is in fact a number, and convert from the ASCII code to the appropriate number."
    },
    {
        "link": "https://dev.to/zacharypatten/beginner-s-guide-to-console-input-in-c-1654",
        "document": "Beginner's Guide To Console Input In C Sharp\n\nNote: I recommend reading this article in order because build on each other.\n\nMake sure you have a are the top of your file. Then whenever you want input from the user just use the method.\n\nExample 1: Getting Console Input With\n\nSo in , we are successfully getting input from the user. The input is stored in the variable and is a data type. The data type is not a numerical data type, therfore if you wanted to perform math operations on the input such as it will not work. So the next step is to convert the data type from to whatever type you need it to be. For this example we will convert the type from to .\n\nExample 2: Parsing The Console Input From To\n\nNote: There are numerous C# tutorials that use the method, but you should avoid this method. is an old method from before NET Framework 2.0, and we now have better methods to use isntead.\n\nshows how you can convert a to an using the method. It works when the user provides valid input such as , but it will throw an exception at runtime if the user provides invalid input such as . Thus, this is a bad practice and should be avoided or you may run into bugs in your software. The next step would be to validate the input rather than just trying to directly parse it into an .\n\nAn parameter is a way for methods to pass back more than one value. The method is passing back two values to the calling code:\n• The return value that indicates if the parse was successful. In we are storing this value in the variable.\n• The typed parameter that is the resulting value of the parse. In we are storing this value in the variable.\n\nshows how to validate that the input from the user using the method. We just need use branching (in this case an statement) to check if the return value of is true (successful) or false (unsuccessful).\n\nNow we have proper input validation for data types, but what if you need a valid input in order to continue? The next step is to loop until the user provides valid input.\n\nExample 4: Looping Until User Provides Valid Input\n\nshows how we can continually request input from the user until valid input is provided. When we get past the loop, we are guaranteed that the variable has been populated by a valid user input. However, what if we need to validate that value further? What if we want it to only be condsidered valid input if the value is between 0 and 100? The next step is to add additional validation.\n\nIn we added additional validation logic. Now when the loop ends we know that is a valid value proviided by the user and it is in the 0-100 range. That is pretty much all you need to know to accept proper input in your console applications.\n\nAlthough is fully functional, we can shorten it a bit if we want to, but any changes at this point are code style preferences and are not required. In particular though, it would be nice if we created variables for the and ranges of the valid user input and used a variable for the message to provide input from the user to prevent duplicated hard-coded values.\n\nExample 6: Optional Code Style Changes Over Example 5\n\nThere are ways to simplify the code even further by making your own methods, but these examples should have given you all you need to get started writing your own interactive console applications in C#. :)\n\ngive you all the fundamentals you need to get console input from the user, but if you are struggling to modify the examples to fit your needs, maybe some more examples will help. Here is an example where the user can select a mathematical operation from a set of values inside an array.\n\nExample 7: Another Example... Array Of Possible Inputs\n\nIn the user may select one of four operators: Addition (+), Subtraction (-), Multiplcation (*), and Division (/). The program will loop until the user selects a valid operator. After a valid operator is selected, the program uses a expression to convert the input into an value. Although it is not necessary to convert the into an , it is a good practice that will result in better code.\n\nYou might want to make it easier on the user and let them input multiple values at once. You don't need to, but I would probably recommend making helper methods for this. Lets see an example for handling multiple inputs at once.\n\nExample 8: Another Example... Multiple Inputs At Once\n\nIn we take in a line of input from the user that should contain multiple values seperated by commas. If any of the values are not valid values it is considered invalid and the user must try again. Once we have the input from the user, the first step is to divide the string up into each seperate value, which does using the method. There are other ways to parse strings than using the method, but that is one of the easiest ones for beginners. Once each input is seperated, we just need to each value to make sure they are all valid, and store them in an array. The method just removes any white space on the front or back of a string so the users can add spaces in their input if they want to. All of the following are acceptable inputs for example:\n\nshows how you can watch individual key presses from the user rather than taking in a full of input. You can do this with the method. In this case, is requesting that the user press the key before the program will continue. The method also allows you to intercept the input so that the input is accepted but will not be written to the console. Whether or not you want to intercept the input is determined by the parameter on the method.\n\nAre you wanting to learn how to code games? Even if you aren't interested in game development, making console games is a great way to learn how to program in C#. I have a GitHub repo with examples of console games if you want to give it a look. Many of the games use simple console input techniques like the examples in this gist:\n\n https://github.com/ZacharyPatten/dotnet-console-games\n\nIf you are still relatively new to C# I recommend you stop here. I do not recommend beginners attempt to simplify console input further than the examples in this gist. However, if you want to see some more advanced examples of console input you can expand the following:\n\nThis is an example of a console input helper method in C# that can make console input one line of code. It is dependent on the Towel nuget package, so you must add the nuget package as a dependency to build and run it. It uses Generics and optional parameters."
    },
    {
        "link": "https://gist.github.com/ZacharyPatten/798ed612d692a560bdd529367b6a7dbd",
        "document": "Make sure you have a are the top of your file. Then whenever you want input from the user just use the method.\n\nSo in , we are successfully getting input from the user. The input is stored in the variable and is a data type. The data type is not a numerical data type, therfore if you wanted to perform math operations on the input such as it will not work. So the next step is to convert the data type from to whatever type you need it to be. For this example we will convert the type from to .\n\nNote: There are numerous C# tutorials that use the method, but you should avoid this method. is an old method from before NET Framework 2.0, and we now have better methods to use isntead.\n\nshows how you can convert a to an using the method. It works when the user provides valid input such as , but it will throw an exception at runtime if the user provides invalid input such as . Thus, this is a bad practice and should be avoided or you may run into bugs in your software. The next step would be to validate the input rather than just trying to directly parse it into an .\n\nAn parameter is a way for methods to pass back more than one value. The method is passing back two values to the calling code:\n• The return value that indicates if the parse was successful. In we are storing this value in the variable.\n• The typed parameter that is the resulting value of the parse. In we are storing this value in the variable.\n\nshows how to validate that the input from the user using the method. We just need use branching (in this case an statement) to check if the return value of is true (successful) or false (unsuccessful).\n\nNow we have proper input validation for data types, but what if you need a valid input in order to continue? The next step is to loop until the user provides valid input.\n\nshows how we can continually request input from the user until valid input is provided. When we get past the loop, we are guaranteed that the variable has been populated by a valid user input. However, what if we need to validate that value further? What if we want it to only be condsidered valid input if the value is between 0 and 100? The next step is to add additional validation.\n\nIn we added additional validation logic. Now when the loop ends we know that is a valid value proviided by the user and it is in the 0-100 range. That is pretty much all you need to know to accept proper input in your console applications.\n\nAlthough is fully functional, we can shorten it a bit if we want to, but any changes at this point are code style preferences and are not required. In particular though, it would be nice if we created variables for the and ranges of the valid user input and used a variable for the message to provide input from the user to prevent duplicated hard-coded values.\n\nThere are ways to simplify the code even further by making your own methods, but these examples should have given you all you need to get started writing your own interactive console applications in C#. :)\n\ngive you all the fundamentals you need to get console input from the user, but if you are struggling to modify the examples to fit your needs, maybe some more examples will help. Here is an example where the user can select a mathematical operation from a set of values inside an array.\n\nIn the user may select one of four operators: Addition (+), Subtraction (-), Multiplcation (*), and Division (/). The program will loop until the user selects a valid operator. After a valid operator is selected, the program uses a expression to convert the input into an value. Although it is not necessary to convert the into an , it is a good practice that will result in better code.\n\nYou might want to make it easier on the user and let them input multiple values at once. You don't need to, but I would probably recommend making helper methods for this. Lets see an example for handling multiple inputs at once.\n\nIn we take in a line of input from the user that should contain multiple values seperated by commas. If any of the values are not valid values it is considered invalid and the user must try again. Once we have the input from the user, the first step is to divide the string up into each seperate value, which does using the method. There are other ways to parse strings than using the method, but that is one of the easiest ones for beginners. Once each input is seperated, we just need to each value to make sure they are all valid, and store them in an array. The method just removes any white space on the front or back of a string so the users can add spaces in their input if they want to. All of the following are acceptable inputs for example:\n\nshows how you can watch individual key presses from the user rather than taking in a full of input. You can do this with the method. In this case, is requesting that the user press the key before the program will continue. The method also allows you to intercept the input so that the input is accepted but will not be written to the console. Whether or not you want to intercept the input is determined by the parameter on the method.\n\nWe have discussed most topics regarding getting an handling console input, but what if we want to prevent console input?\n\ndemonstrates how you can prevent console input. It is flushing the input buffer by continually calling until there are no more keys available. Thus, any key presses that occured prior to the flush are ignored.\n\nThere are lots of ways to implement menus in the console, but has a helper method that takes an array of 's and 's as a parameter. The is the as it will appear to the user in the menu and the is what code will be called when the user selects that option. The code for rendering the menu and getting the user input are dynamic based on the size of the array, so all you need to do is add more parmeters and the helper method takes care of the rest for you.\n\nWhat if you want to loop the menu and add an \"Exit\" option to ? Here is another snippet of what that can look like:\n\nAre you wanting to learn how to code games? Even if you aren't interested in game development, making console games is a great way to learn how to program in C#. I have a GitHub repo with examples of console games if you want to give it a look. Many of the games use simple console input techniques like the examples in this gist: https://github.com/ZacharyPatten/dotnet-console-games\n\nIf you are still relatively new to C# I recommend you stop here. I do not recommend beginners attempt to simplify console input further than the previous examples in this gist. However, the following examples show how we can create helper methods to simplify console input to a single line of code.\n\nshows how we can make a generic console input method. It uses optional parameters, so you don't need to provide a , , or unless you want to customize them, but the parameter is still a required parameter for the method to work. A is a fuction pointer in C#. In this example we are requesting the calling code to provide the method for the relative generic type.\n\nNote: This example is dependent on the Towel nuget package. The Towel nuget package must be added as a dependency for the code to build and run.\n\nis using a dependency, but what is happening under the hood is we are using reflection to look up the method for the relative generic type so that the parameter can be made optional. This will work with any type that has a static method with the expected signature, types, or . If your type does not fit those requirements you can always provide you own parameter."
    },
    {
        "link": "https://stackoverflow.com/questions/43622971/how-to-store-multiple-values-from-user-to-array-upto-particular-size",
        "document": "I am trying to get a values from user and store it in a array up to particular size. my code looks like\n\nthe above code works but it doesn't stops after getting inputs and it allow me to store values after inputs. how do i make it stop getting inputs after inputs and i want to get all inputs in single space separated line. for eg:\n\nshould i use for loop to make that possible?"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/arrays",
        "document": "You can store multiple variables of the same type in an array data structure. You declare an array by specifying the type of its elements. If you want the array to store elements of any type, you can specify as its type. In the unified type system of C#, all types, predefined and user-defined, reference types and value types, inherit directly or indirectly from Object.\n\nAn array is a reference type, so the array can be a nullable reference type. The element types might be reference types, so an array can be declared to hold nullable reference types. The following example declarations show the different syntax used to declare the nullability of the array or the elements:\n\nUninitialized elements in an array are set to the default value for that type:\n\nAn array has the following properties:\n• An array can be single-dimensional, multidimensional, or jagged.\n• The number of dimensions are set when an array variable is declared. The length of each dimension is established when the array instance is created. These values can't be changed during the lifetime of the instance.\n• A jagged array is an array of arrays, and each member array has the default value of .\n• Arrays are zero indexed: an array with elements is indexed from to .\n• Array elements can be of any type, including an array type.\n• Array types are reference types derived from the abstract base type Array. All arrays implement IList and IEnumerable. You can use the foreach statement to iterate through an array. Single-dimensional arrays also implement IList<T> and IEnumerable<T>.\n\nThe elements of an array can be initialized to known values when the array is created. Beginning with C# 12, all of the collection types can be initialized using a Collection expression. Elements that aren't initialized are set to the default value. The default value is the 0-bit pattern. All reference types (including non-nullable types), have the values . All value types have the 0-bit patterns. That means the Nullable<T>.HasValue property is and the Nullable<T>.Value property is undefined. In the .NET implementation, the property throws an exception.\n\nThe following example creates single-dimensional, multidimensional, and jagged arrays:\n\nA single-dimensional array is a sequence of like elements. You access an element via its index. The index is its ordinal position in the sequence. The first element in the array is at index . You create a single-dimensional array using the new operator specifying the array element type and the number of elements. The following example declares and initializes single-dimensional arrays:\n\nThe first declaration declares an uninitialized array of five integers, from to . The elements of the array are initialized to the default value of the element type, for integers. The second declaration declares an array of strings and initializes all seven values of that array. A series of statements prints all the elements of the array. For single-dimensional arrays, the statement processes elements in increasing index order, starting with index 0 and ending with index .\n\nYou can pass an initialized single-dimensional array to a method. In the following example, an array of strings is initialized and passed as an argument to a method for strings. The method displays the elements of the array. Next, the method reverses the array elements, and then the method modifies the first three elements of the array. After each method returns, the method shows that passing an array by value doesn't prevent changes to the array elements.\n\nArrays can have more than one dimension. For example, the following declarations create four arrays. Two arrays have have two dimensions. Two arrays have three dimensions. The first two declarations declare the length of each dimension, but don't initialize the values of the array. The second two declarations use an initializer to set the values of each element in the multidimensional array.\n\nFor multi-dimensional arrays, elements are traversed such that the indices of the rightmost dimension are incremented first, then the next left dimension, and so on, to the leftmost index. The following example enumerates both a 2D and a 3D array:\n\nIn a 2D array, you can think of the left index as the row and the right index as the column.\n\nHowever, with multidimensional arrays, using a nested for loop gives you more control over the order in which to process the array elements:\n\nYou pass an initialized multidimensional array to a method in the same way that you pass a one-dimensional array. The following code shows a partial declaration of a print method that accepts a two-dimensional array as its argument. You can initialize and pass a new array in one step, as is shown in the following example. In the following example, a two-dimensional array of integers is initialized and passed to the method. The method displays the elements of the array.\n\nA jagged array is an array whose elements are arrays, possibly of different sizes. A jagged array is sometimes called an \"array of arrays.\" Its elements are reference types and are initialized to . The following examples show how to declare, initialize, and access jagged arrays. The first example, , is declared in one statement. Each contained array is created in subsequent statements. The second example, is declared and initialized in one statement. It's possible to mix jagged and multidimensional arrays. The final example, , is a declaration and initialization of a single-dimensional jagged array that contains three two-dimensional array elements of different sizes.\n\nA jagged array's elements must be initialized before you can use them. Each of the elements is itself an array. It's also possible to use initializers to fill the array elements with values. When you use initializers, you don't need the array size.\n\nThis example builds an array whose elements are themselves arrays. Each one of the array elements has a different size.\n\nYou can create an implicitly typed array in which the type of the array instance is inferred from the elements specified in the array initializer. The rules for any implicitly typed variable also apply to implicitly typed arrays. For more information, see Implicitly Typed Local Variables.\n\nThe following examples show how to create an implicitly typed array:\n\nIn the previous example, notice that with implicitly typed arrays, no square brackets are used on the left side of the initialization statement. Also, jagged arrays are initialized by using just like single-dimensional arrays.\n\nWhen you create an anonymous type that contains an array, the array must be implicitly typed in the type's object initializer. In the following example, is an implicitly typed array of anonymous types, each of which contains an array named . The keyword isn't used inside the object initializers."
    },
    {
        "link": "https://stackoverflow.com/questions/65416865/c-sharp-is-there-a-good-way-to-store-multiple-objects-and-still-be-easy-to-acces",
        "document": "Maybe it is hard to understand but I want to know if there is a way to store multiple variables like a 2d Array but use commands to access it easily?\n\nSo I can access it with a command like to get the name of it and to get the ID of it (names and IDs are unique). So later, I can request everything when I get the ID or the Name of the item.\n\nSomething like this:\n\nSry for my bad grammar still learning :x"
    },
    {
        "link": "https://discussions.unity.com/t/c-arrays-with-multiple-types-of-data-at-each-point/481756",
        "document": ""
    },
    {
        "link": "https://medium.com/@asifghanchi/arrays-in-c-90c14a5c1d46",
        "document": "An arrays store multiple values of the same data type in one variable. It allows you to work with collections of variables.\n\nWe can use an array instead of declaring separate variables for each value. Arrays are fundamental data structures in C# and are extensively used in various applications for storing and manipulating collections of values.\n\nNow let’s see how to declare and initialize an array.\n\nTo declare an array, we must specify the variable type with square brackets. Let's define a simple array for string variable type.\n\nNow it's time to store some values inside the array. Here we will use the same array for cars as we declared above. Let’s do it.\n\nTo create an array of integer variable types, we could write:\n\nWe can access the array element using the index number. Array indexes start with 0: [0] is the first element. [1] is the second element, etc.\n\nTo change the array value, we have to specify the index number.\n\nWe can iterate through arrays using loops like for, foreach, or while. You can learn more about loops here.\n\nI hope this helps! Let me know if you have any questions."
    }
]