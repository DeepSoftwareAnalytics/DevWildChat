[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/Structuring_documents",
        "document": "In addition to defining individual parts of your page (such as \"a paragraph\" or \"an image\"), HTML also boasts a number of block level elements used to define areas of your website (such as \"the header\", \"the navigation menu\", \"the main content column\"). This article looks into how to plan a basic website structure, and write the HTML to represent this structure. Basic HTML familiarity, as covered in Basic HTML Syntax. Text-level semantics such as headings and paragraphs and lists.\n• The common HTML semantic structural elements, for example , , , , , and , and how to use them correctly.\n• The need to use semantic elements in appropriate places, rather than just using elements wherever a block-level container is required, and the benefits of this (such as improved accessibility).\n\nWebpages can and will look pretty different from one another, but they all tend to share similar standard components, unless the page is displaying a fullscreen video or game, is part of some kind of art project, or is just badly structured: Usually a big strip across the top with a big heading, logo, and perhaps a tagline. This usually stays the same from one page of a website to another. Links to the site's main sections; usually represented by menu buttons, links, or tabs. Like the header, this content usually remains consistent from one webpage to another — having inconsistent navigation on your website will just lead to confused, frustrated users. Many web designers consider the navigation bar to be part of the header rather than an individual component, but that's not a requirement; in fact, some also argue that having the two separate is better for accessibility, as screen readers can read the two features better if they are separate. A big area in the center that contains most of the unique content of a given webpage, for example, the video you want to watch, or the main story you're reading, or the map you want to view, or the news headlines, etc. This is the one part of the website that definitely will vary from page to page! Some peripheral info, links, quotes, ads, etc. Usually, this is contextual to what is contained in the main content (for example on a news article page, the sidebar might contain the author's bio, or links to related articles) but there are also cases where you'll find some recurring elements like a secondary navigation system. A strip across the bottom of the page that generally contains fine print, copyright notices, or contact info. It's a place to put common information (like the header) but usually, that information is not critical or secondary to the website itself. The footer is also sometimes used for SEO purposes, by providing links for quick access to popular content. A \"typical website\" could be structured something like this: Note: The image above illustrates the main sections of a document, which you can define with HTML. However, the appearance of the page shown here — including the layout, colors, and fonts — is achieved by applying CSS to the HTML.\n\nActive learning: exploring the code for our example Our example seen above is represented by the following code (you can also find the example in our GitHub repository). We'd like you to look at the example above, and then look over the listing below to see what parts make up what section of the visual. <!doctype html> <html lang=\"en-US\"> <head> <meta charset=\"utf-8\" /> <meta name=\"viewport\" content=\"width=device-width\" /> <title>My page title</title> <link href=\"https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One\" rel=\"stylesheet\" /> <link rel=\"stylesheet\" href=\"style.css\" /> </head> <body> <!-- The main header used across all the pages of our website --> <header> <h1>Header</h1> </header> <nav> <ul> <li><a href=\"#\">Home</a></li> <li><a href=\"#\">Our team</a></li> <li><a href=\"#\">Projects</a></li> <li><a href=\"#\">Contact</a></li> </ul> <!-- A Search form: another common non-linear way to navigate through a site. --> <form> <input type=\"search\" name=\"q\" placeholder=\"Search query\" /> <input type=\"submit\" value=\"Go!\" /> </form> </nav> <!-- Our page's main content --> <main> <!-- An article --> <article> <h2>Article heading</h2> <p> Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. </p> <section> <h3>Subsection</h3> <p> Donec ut librero sed accu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aenean ut gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. </p> <p> Pelientesque auctor nisi id magna consequat sagittis. Curabitur dapibus, enim sit amet elit pharetra tincidunt feugiat nist imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. </p> </section> <section> <h3>Another subsection</h3> <p> Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum soclis natoque penatibus et manis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est. </p> <p> Vivamus fermentum semper porta. Nunc diam velit, adipscing ut tristique vitae sagittis vel odio. Maecenas convallis ullamcorper ultricied. Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, is fringille sem nunc vet mi. </p> </section> </article> <!-- the aside content can also be nested within the main content --> <aside> <h2>Related</h2> <ul> <li><a href=\"#\">Oh I do like to be beside the seaside</a></li> <li><a href=\"#\">Oh I do like to be beside the sea</a></li> <li><a href=\"#\">Although in the North of England</a></li> <li><a href=\"#\">It never stops raining</a></li> <li><a href=\"#\">Oh well…</a></li> </ul> </aside> </main> <!-- The footer that is used across all the pages of our website --> <footer> <p>©Copyright 2050 by nobody. All rights reversed.</p> </footer> </body> </html> Take some time to look over the code and understand it — the comments inside the code should also help you to understand it. We aren't asking you to do much else in this article, because the key to understanding document layout is writing a sound HTML structure, and then laying it out with CSS. We'll wait for this until you start to study CSS layout as part of the CSS topic.\n\nSometimes you'll come across a situation where you can't find an ideal semantic element to group some items together or wrap some content. Sometimes you might want to just group a set of elements together to affect them all as a single entity with some CSS or JavaScript. For cases like these, HTML provides the and elements. You should use these preferably with a suitable attribute, to provide some kind of label for them so they can be easily targeted. is an inline non-semantic element, which you should only use if you can't think of a better semantic text element to wrap your content, or don't want to add any specific meaning. For example: <p> The King walked drunkenly back to his room at 01:00, the beer doing nothing to aid him as he staggered through the door. <span class=\"editor-note\"> [Editor's note: At this point in the play, the lights should be down low]. </span> </p> In this case, the editor's note is supposed to merely provide extra direction for the director of the play; it is not supposed to have extra semantic meaning. For sighted users, CSS would perhaps be used to distance the note slightly from the main text. is a block level non-semantic element, which you should only use if you can't think of a better semantic block element to use, or don't want to add any specific meaning. For example, imagine a shopping cart widget that you could choose to pull up at any point during your time on an e-commerce site: This isn't really an , as it doesn't necessarily relate to the main content of the page (you want it viewable from anywhere). It doesn't even particularly warrant using a , as it isn't part of the main content of the page. So a is fine in this case. We've included a heading as a signpost to aid screen reader users in finding it. Warning: Divs are so convenient to use that it's easy to use them too much. As they carry no semantic value, they just clutter your HTML code. Take care to use them only when there is no better semantic solution and try to reduce their usage to the minimum otherwise you'll have a hard time updating and maintaining your documents.\n\nTwo elements that you'll use occasionally and will want to know about are and . creates a line break in a paragraph; it is the only way to force a rigid structure in a situation where you want a series of fixed short lines, such as in a postal address or a poem. For example: <p> There once was a man named O'Dell<br /> Who loved to write HTML<br /> But his structure was bad, his semantics were sad<br /> and his markup didn't read very well. </p> Without the elements, the paragraph would just be rendered in one long line (as we said earlier in the course, HTML ignores most whitespace); with elements in the code, the markup renders like this: elements create a horizontal rule in the document that denotes a thematic change in the text (such as a change in topic or scene). Visually it just looks like a horizontal line. As an example: <p> Ron was backed into a corner by the marauding netherbeasts. Scared, but determined to protect his friends, he raised his wand and prepared to do battle, hoping that his distress call had made it through. </p> <hr /> <p> Meanwhile, Harry was sitting at home, staring at his royalty statement and pondering when the next spin off series would come out, when an enchanted distress letter flew through his window and landed in his lap. He read it hazily and sighed; \"better get back to work then\", he mused. </p>"
    },
    {
        "link": "https://almabetter.com/bytes/tutorials/html/html5-structure",
        "document": "The basic structure of an HTML (Hypertext Markup Language) document refers to the overall organization and syntax of an HTML file. It consists of several elements that provide information about the web page's content, structure, and formatting.\n\nThe basic structure of an HTML document includes the following components:\n\n1.<!DOCTYPE html>: This declaration specifies the version of HTML that the document is written in. It is usually the first line of an HTML file.\n\n2.<html> element: This is the root element of the document and encloses all other elements.\n\n3.<head> element: This element contains metadata about the document, such as the title, author, and character set. It does not contain any visible content on the page.\n\n4.<title> element: This element is nested within the head element and specifies the title of the web page, which appears in the browser's title bar.\n\n5.<body> element: This element contains all visible content on the page, such as text, images, links, and other HTML elements.\n\n6.Other HTML elements: These are additional elements used to structure and format the content within the body element, such as headings, paragraphs, lists, tables, and more.\n\nBy following this basic structure, web developers can create consistent and well-organized HTML documents that are easy to understand and maintain.\n\nEvery HTML document begins with a document type declaration, which tells the browser what type of HTML the document is written in. The <!DOCTYPE html> declaration is an instruction that tells the web browser which version of HTML is being used in the document.\n\nThe DOCTYPE declaration is required in HTML documents to ensure that the browser renders the page in standards mode. Standards mode ensures that the web page is displayed consistently across different browsers and platforms.\n\nThe <!DOCTYPE html> declaration is used in HTML5 to indicate that the document is written in the latest version of HTML. It is usually placed at the beginning of an HTML document, before the <html> tag.\n\nThe <html>element is the root element of an HTML document and represents the top-level container for all other HTML elements in the document. It tells the browser that the document is an HTML document and encloses the entire HTML document, including the <head> and <body> elements. The HTML tag is opened at the beginning of the document and closed at the end of the document.\n\nThe <html> element also specifies the language of the document using the lang attribute. For example, to specify that the document is written in English, you would add the following attribute to the <html> tag:\n\nThe <head> element is a container for metadata about an HTML document, such as the title of the page, links to stylesheets and scripts, and other information that is not directly visible on the page.\n\nHere's an example of how the <head> element is used in an HTML document:\n\nIn this example, the <head> element contains several elements that provide metadata about the document:\n• <title>: This element specifies the title of the web page, which appears in the browser's title bar and is used by search engines to index the page.\n• <meta>: This element provides information about the character set used in the document. In this example, the charset attribute specifies that the document is encoded using UTF-8.\n• <link>: This element specifies the location of an external stylesheet that is used to define the visual style of the web page.\n• <script>: This element specifies the location of an external JavaScript file that is used to add interactivity to the web page.\n\nOverall, the <head> element is an important part of an HTML document as it provides information about the document that is used by the browser and other software to render the page correctly.\n\nIn HTML, the <body> element represents the content of an HTML document that is visible in a web browser. It is the main container for all the content that is displayed on a webpage, such as text, images, videos, and other HTML elements.\n\nThe <body> element typically comes after the <head> element in an HTML document, which contains information about the document that is not displayed in the browser, such as metadata and scripts. The content of the <body> element is what is rendered in the browser window, and it can include other HTML elements such as headings, paragraphs, lists, links, images, forms, and more.\n\nHere is an example of a basic HTML document structure that includes a <body> element:\n\nIn this example, the <body> element contains a heading (<h1>), a paragraph (<p>), and an image (<img>). When this HTML document is loaded in a web browser, these elements will be displayed in the main content area of the webpage.\n\nThe Opening and the Closing Tags\n\nIn HTML, elements are usually written as opening tags, content, and closing tags. The opening tag is denoted by the angle bracket \"<\", followed by the name of the element, and then another angle bracket \">\". The closing tag has the same name as the opening tag, but with a forward slash \"/\" before the name, and then another angle bracket \">\".\n\nFor example, consider the following HTML code:\n\nIn this code, <p> is the opening tag, and </p> is the closing tag. The content of the paragraph, \"This is a paragraph.\", is located between the opening and closing tags.\n\nIt is important to include both the opening and closing tags in your HTML code to ensure that the web browser can properly interpret the content and render it correctly on the webpage. If a closing tag is omitted, the web browser may not be able to properly interpret the HTML code, leading to display issues on the webpage.\n\nIn conclusion, the basic structure of an HTML document includes several elements that provide information about the web page's content, structure, and formatting. The HTML document begins with the <!DOCTYPE html> declaration, which specifies the version of HTML that the document is written in. The root element of the document is the <html> element, which encloses all other elements. The <head> element contains metadata about the document, such as the title, author, and character set, while the <body> element contains all visible content on the page. By following this basic structure, web developers can create consistent and well-organized HTML documents that are easy to understand and maintain."
    },
    {
        "link": "https://w3schools.com/html/html_intro.asp",
        "document": "HTML is the standard markup language for creating Web pages.\n• HTML is the standard markup language for creating Web pages\n• HTML elements tell the browser how to display the content\n• HTML elements label pieces of content such as \"this is a heading\", \"this is a paragraph\", \"this is a link\", etc.\n• The declaration defines that this document is an HTML5 document\n• The element is the root element of an HTML page\n• The element contains meta information about the HTML page\n• The element specifies a title for the HTML page (which is shown in the browser's title bar or in the page's tab)\n• The element defines the document's body, and is a container for all the visible contents, such as headings, paragraphs, images, hyperlinks, tables, lists, etc.\n\nWhat is an HTML Element?\n\nAn HTML element is defined by a start tag, some content, and an end tag:\n\nThe HTML element is everything from the start tag to the end tag:\n\nNote: Some HTML elements have no content (like the <br> element). These elements are called empty elements. Empty elements do not have an end tag!\n\nThe purpose of a web browser (Chrome, Edge, Firefox, Safari) is to read HTML documents and display them correctly.\n\nA browser does not display the HTML tags, but uses them to determine how to display the document:\n\nBelow is a visualization of an HTML page structure:\n\nSince the early days of the World Wide Web, there have been many versions of HTML:"
    },
    {
        "link": "http://web.simmons.edu/~grovesd/comm244/notes/week3/structural-elements",
        "document": "There are a group of HTML elements that are created to broadly give our documents more structure. You've already used the first section element: .\n\nThe element contains all of the content of our document.\n\nThis typically encompasses everything except the element and its sub elements.\n\nMost webpages contain a lot of information that is repeated across the site. This includes branding, navigation, advertisements and copyright information.\n\nThe element is used to designate the unique content of each page.\n\nIn the example below, the chile recipe is the unique content. The element is wrapped around the recipe parts:\n\nSeveral of these structural elements fall into the category of \"sectioning content\".\n\nThe and elements are both used similarly to represent thematic parts of a document. The primary difference between the two is that articles are meant to encapsulate content that is self-contained.\n\nWhen deciding between an article or section, consider whether the content would still make sense if taken out of its current page. This indicates and .\n\nA on the other hand, is only a part of a greater whole and does not stand on its own.\n\nConsider the following example of a simple recipe:\n\nThe recipe as a whole can stand on its own. This indicates it should be marked up as an .\n\nThe two sub sections of the recipe do not stand on their own and therefore should each be a .\n\nMarking up the recipe with articles and sections would look like this:\n\nNote: Both article and section elements can also contain article and section elements.\n\nThe element represents content that is tangentially related to the parent element.\n\nThis element is named after a sidebar. However, don't consider it only a sidebar since that implies the content will appear on the side. An aside could show in a variety of contexts and visual treatments.\n\nSome examples of valid asides could be:\n\nThe element is used to indicate areas of the page used for primary navigation.\n\nThere can be multiple nav elements on a page. However, this element should be reserved for primary navigational areas rather than simply lists of links.\n\nThe header and footer elements are both used within the context of their containing element.\n\nThe most common form is when the containing element is the body element.\n\nWhen the containing element is\n\nIn this case the header is typically used to indicate the website branding and main navigation elements.\n\nThe footer would be used to mark up content at the end of the page: copyright information, navigation links, or other content.\n\nWhen the containing element is an or"
    },
    {
        "link": "https://web.dev/learn/html/document-structure",
        "document": "HTML documents include a document type declaration and the root element. Nested in the element are the document head and document body. While the head of the document isn't visible to the sighted visitor, it is vital to make your site function. It contains all the meta information, including information for search engines and social media results, icons for the browser tab and mobile home screen shortcut, and the behavior and presentation of your content. In this section, you'll discover the components that, while not visible, are present on almost every web page.\n\nTo create the MachineLearningWorkshop.com (MLW) site, start by including the components that should be considered essential for every web page: the type of document, the content's human language, the character set, and, of course, the title or name of the site or application.\n\nThere are several features that should be considered essential for any and every web page. Browsers will still render content if these elements are missing, but include them. Always.\n\nThe first thing in any HTML document is the preamble. For HTML, all you need is . This may look like an HTML element, but it isn't. It's a special kind of node called \"doctype\". The doctype tells the browser to use standards mode. If omitted, browsers will use a different rendering mode known as quirks mode. Including the doctype helps prevent quirks mode.\n\nThe element is the root element for an HTML document. It is the parent of the and , containing everything in the HTML document other than the doctype. If omitted it will be implied, but it is important to include it, as this is the element on which the language of the content of the document is declared.\n\nThe language attribute added to the tag defines the main language of the document. The value of the attribute is a two- or three-letter ISO language code followed by the region. The region is optional, but recommended, as a language can vary greatly between regions. For example, French is very different in Canada ( ) versus Burkina Faso ( ). This language declaration enables screen readers, search engines, and translation services to know the document language.\n\nThe attribute is not limited to the tag. If there is text within the page that is in a language different from the main document language, the attribute should be used to identify exceptions to the main language within the document. Just like when it is included in the head, the attribute in the body has no visual effect. It only adds semantics, enabling assistive technologies and automated services to know the language of the impacted content.\n\nIn addition to setting the language for the document and exceptions to that base language, the attribute can be used in CSS selectors. can be targeted with the attribute and language selectors and .\n\nNested between the opening and closing tags, we find the two children: and :\n\nThe , or document metadata header, contains all the metadata for a site or application. The body contains the visible content. The rest of this section focuses on the components found nested inside the opening and closing\n\nThe document metadata, including the document title, character set, viewport settings, description, base URL, stylesheet links, and icons, are found in the element. While you may not need all these features, always include character set, title, and viewport settings.\n\nThe very first element in the should be the character encoding declaration. It comes before the title to ensure the browser can render the characters in that title and all the characters in the rest of the document.\n\nThe default encoding in most browsers is , depending on the locale. However, you should use , as it enables the one- to four-byte encoding of all characters, even ones you didn't even know existed. Also, it's the encoding type required by HTML5.\n\nTo set the character encoding to UTF-8, include:\n\nBy declaring (case-insensitive), you can even include emojis in your title (but please don't).\n\nThe character encoding is inherited into everything in the document, even and . This little declaration means you can include emojis in class names and the selectorAPI (again, please don't). If you do use emojis, make sure to use them in a way that enhances usability without harming accessibility.\n\nYour home page and all additional pages should each have a unique title. The contents for the document title, the text between the opening and closing tags, are displayed in the browser tab, the list of open windows, the history, search results, and, unless redefined with tags, in social media cards.\n\nThe other meta tag that should be considered essential is the viewport meta tag, which helps site responsiveness, enabling content to render well by default, no matter the viewport width. While the viewport meta tag has been around since June 2007, when the first iPhone came out, it's only recently been documented in a specification. As it enables controlling a viewport's size and scale, and prevents the site's content from being sized down to fit a 960px site onto a 320px screen, it is definitely recommended.\n\nThe preceding code means \"make the site responsive, starting by making the width of the content the width of the screen\". In addition to , you can set zoom and scalability, but they both default to accessible values. If you want to be explicit, include:\n\nViewport is part of the Lighthouse accessibility audit; your site will pass if it is scalable and has no maximum size set.\n\nSo far, the outline for our HTML file is:\n\nThere's a lot more that goes into the . All the metadata, in fact. Most of the elements you'll find in the are covered here, while saving a plethora of the options for the next chapter.\n\nYou've seen the meta character set and the document title, but there is a lot more metadata outside of tags that should be included.\n\nThe is where you include styles for your HTML. There is a learning path dedicated to CSS if you want to learn about styles, but you do need to know how to include them in your HTML documents.\n\nThere are three ways to include CSS: , , and the attribute.\n\nThe main two ways to include styles in your HTML file are by including an external resource using a element with the attribute set to , or including CSS directly in the head of your document within opening and closing tags.\n\nThe tag is the preferred method of including stylesheets. Linking a single or a few external style sheets is good for both developer experience and site performance: you get to maintain CSS in one spot instead of it being sprinkled everywhere, and browsers can cache the external file, meaning it doesn't have to be downloaded again with every page navigation.\n\nThe syntax is , where styles.css is the URL of your stylesheet. You'll often see . Not necessary! If you are including styles written in something other than CSS, the is needed, but since there isn't any other type, this attribute isn't needed. The attribute defines the relationship: in this case . If you omit this, your CSS will not be linked.\n\nYou'll discover a few other values shortly, but let's first discuss other ways of including CSS.\n\nIf you want your external style sheet styles to be within a cascade layer but you don't have access to edit the CSS file to put the layer information in it, you'll want to include the CSS with inside a :\n\nWhen using to import style sheets into your document, optionally into cascade layers, the statements must be the first statements in your or linked stylesheet, outside of the character set declaration.\n\nWhile cascade layers are still fairly new and you might not spot the in a head , you will often see custom properties declared in a head style block:\n\nStyles, either via or , or both, should go in the head. They will work if included in the document's body, but you want your styles in the head for performance reasons. That may seem counterintuitive, as you may think you want your content to load first, but you actually want the browser to know how to render the content when it is loaded. Adding styles first prevents the unnecessary repainting that occurs if an element is styled after it is first rendered.\n\nThen there's the one way of including styles you'll never use in the of your document: inline styles. You'll probably never use inline styles in the head because the user agents' style sheets hide the head by default. But if you want to make a CSS editor without JavaScript, for example, so you can test your page's custom elements, you can make the head visible with , and then hide everything in the head, and then with an inline attribute, make a content-editable style block visible.\n\nWhile you can add inline styles on the , it's way more fun to style your in your . I digress.\n\nOther uses of the element\n\nThe element is used to create relationships between the HTML document and external resources. Some of these resources may be downloaded, others are informational. The type of relationship is defined by the value of the attribute. There are currently 25 available values for the attribute that can be used with , and , or , with a few that can be used with all. It's preferable to include those related to meta information in the head and those related to performance in the .\n\nYou'll include three other types in your header now: , , and . (You'll include a fourth type, , in the next module).\n\nUse the tag, with the attribute/value pair to identify the favicon to be used for your document. A favicon is a very small icon that appears on the browser tab, generally to the left of the document title. When you have an unwieldy number of tabs open, the tabs will shrink and the title may disappear altogether, but the icon always remains visible. Most favicons are company or application logos.\n\nIf you don't declare a favicon, the browser will look for a file named in the top-level directory (the website's root folder). With , you can use a different file name and location:\n\nThe preceding code says \"use the as the icon for scenarios where a 16px, 32px, or 48px makes sense.\" The sizes attribute accepts the value of for scalable icons or a space-separated list of square values; where the width and height values are 16, 32, 48, or greater in that geometric sequence, the pixel unit is omitted, and the X is case-insensitive.\n\nThere are two special non-standard kind of icons for Safari browser: for iOS devices and for pinned tabs on macOS. is applied only when the user adds a site to home screen: you can specify multiple icons with different for different devices. will only be used if the user pins the tab in desktop Safari: the icon itself should be a monochrome SVG, and the attribute fills the icon with needed color.\n\nWhile you can use to define a completely different image on each page or even each page load, don't. For consistency and a good user experience, use a single image! Twitter uses the blue bird: when you see the blue bird in your browser tab, you know that tab is open to a Twitter page without clicking on the tab. Google uses different favicons for each of its different applications: there's a mail icon, a calendar icon, for example. But all the Google icons use the same color scheme. Again, you know exactly what the content of an open tab is simply from the icon.\n\nWe use the value of the attribute to identify translations, or alternate representations, of the site.\n\nLet's pretend we have versions of the site translated into French and Brazilian Portuguese:\n\nWhen using for a translation, the attribute must be set.\n\nThe alternate value is for more than just translations. For example, the attribute can define the alternate URI for an RSS feed when the attribute is set to or . Let's link to a pretend PDF version of the site.\n\nIf the value is , it defines an alternate stylesheet and the attribute must be set giving that alternate style a name.\n\nIf you create several translations or versions of Machine Learning Workshop, search engines may get confused as to which version is the authoritative source. For this, use to identify the preferred URL for the site or application.\n\nInclude the canonical URL on all of your translated pages, and on the home page, indicating our preferred URL:\n\nThe canonical link is most often used for cross-posting with publications and blogging platforms to credit the original source; when a site syndicates content, it should include the canonical link to the original source.\n\nThe tag is used to include, well, scripts. The default type is JavaScript. If you include any other scripting language, include the attribute with the mime type, or if it's a JavaScript module. Only JavaScript and JavaScript modules get parsed and executed.\n\nThe tags can be used to encapsulate your code or to download an external file. In MLW, there is no external script file because contrary to popular belief, you don't need JavaScript for a functional website, and, well, this is an HTML learning path, not a JavaScript one.\n\nYou will be including a tiny bit of JavaScript to create an Easter egg later on:\n\nThis snippet creates an event handler for an element with the id of . With JavaScript, you don't want to reference an element before it exists. It doesn't exist yet, so we won't include it yet. When we do add the light switch element, we'll add the at the bottom of the rather than in the . Why? Two reasons. We want to ensure elements exist before the script referencing them is encountered as we're not basing this script on a DOMContentLoaded event. And, mainly, JavaScript is not only render-blocking, but the browser stops downloading all assets when scripts are downloaded and doesn't resume downloading other assets until the JavaScript has finished execution. For this reason, you will often find JavaScript requests at the end of the document rather than in the head.\n\nThere are two attributes that can reduce the blocking nature of JavaScript download and execution: and . With , HTML rendering is not blocked during the download, and the JavaScript only executes after the document has otherwise finished rendering. With , rendering isn't blocked during the download either, but once the script has finished downloading, the rendering is paused while the JavaScript is executed.\n\nTo include MLW's JavaScript in an external file, you could write:\n\nAdding the attribute defers the execution of the script until after everything is rendered, preventing the script from harming performance. The and attributes are only valid on external scripts.\n\nThere is another element that is only found in the Not used very often, the element allows setting a default link URL and target. The attribute defines the base URL for all relative links.\n\nThe attribute, valid on as well as on links and forms, sets where those links should open. The default of opens linked files in the same context as the current document. Other options include , which opens every link in a new window, the of the current content, which may be the same as self if the opener is not an iframe, or , which is in the same browser tab, but popped out of any context to take up the entire tab.\n\nMost developers add the attribute to the few, if any, links they want to open in a new window on the links or form themselves, rather than using .\n\nIf our website found itself nested within an iframe on a site like Yummly, including the element would mean when a user clicks on any links within our document, the link will load popped out of the iframe, taking up the whole browser window.\n\nOne of the drawbacks of this element is that anchor links are resolved with . The effectively converts the link to , triggering an HTTP request to the base URL with the fragment attached.\n\nA few other things to note about : there can be only one element in a document, and it should come before any relative URLs are used, including possible script or stylesheet references.\n\nThe code now looks like this:\n\nNote that the script is wrapped between some angle brackets, dashes, and a bang. This is how you comment out HTML. We'll leave the script commented out until we have the actual content on the page. Anything between and will not be visible or parsed. HTML comments can be put anywhere on the page, including the head or body, with the exception of scripts or style blocks, where you should use JavaScript and CSS comments, respectively.\n\nYou have covered the basics of what goes in the , but you want to learn more than the basics. In the next sections, we will learn about meta tags, and how to control what gets displayed when your website is linked to on social media."
    },
    {
        "link": "https://bluecoding.com/post/a-comprehensive-guide-to-building-web-applications-with-javascript",
        "document": "JavaScript is one of the most popular programming languages in the world, especially for web development. It helps bring websites to life, turning static pages into dynamic, interactive experiences. Today, JavaScript is used to build web applications of all sizes, from simple personal websites to complex platforms like eCommerce sites and social media. This guide will take you through the essentials of creating web applications with JavaScript, covering basic concepts, popular tools, and practical steps for creating your own web application.\n\nWhy Use JavaScript for Web Development?\n\nJavaScript is widely used because it is the only programming language that web browsers understand natively. This means you don’t need to add any special plugins or tools to make it work on a website, just about every browser can handle JavaScript right out of the box. JavaScript makes it easy to create interactive features, like buttons that respond to clicks, animations, and real-time updates on a webpage. Beyond this, JavaScript has a massive community and plenty of free resources available, making it a great choice for beginners and experienced developers alike. Over time, JavaScript has expanded to become a full-stack language, meaning you can use it for both the front-end (what users see and interact with) and back-end (the server that powers the application) parts of web application development.\n\nBefore jumping into web application development projects, it’s important to understand some foundational JavaScript concepts. Once you understand these basics, you’ll have a strong foundation for building and customizing a web application. These basics include:\n• None Variables: Think of variables as containers that store information like numbers, words, or lists. For example, you could use a variable to store a user's name.\n• None Functions: Functions are blocks of code that perform specific tasks. If you want to repeat an action in multiple parts of your code, you can create a function to do it.\n• None Events: JavaScript lets you create reactions to things that happen on a webpage, such as a user clicking a button or typing into a form.\n\nWhen building a web application, the tools you use can make a big difference in your development experience. Setting up these basic tools will prepare you to start writing and testing JavaScript code efficiently. Here are a few essentials:\n• None Text Editor: A text editor is where you write and edit your JavaScript code. Visual Studio Code is a popular choice because it’s free, easy to use, and has many helpful features for JavaScript development.\n• None Version Control: Version control helps you track changes in your code. Git is the most commonly used version control system, and platforms like GitHub allow you to store your code online, making it easier to collaborate with others.\n• None Browser Developer Tools: Modern web browsers come with built-in tools that help you inspect, debug, and test your JavaScript code. These tools can show you what’s happening behind the scenes of your web application\n\nJavaScript frameworks and libraries provide a structure that makes it easier to build complex applications. These frameworks come with pre-made code and components that help you create user interfaces without starting from scratch. Choosing the right framework depends on your project’s needs and your comfort level with JavaScript. For beginners, Vue might be the easiest to start with, while React is often favored by those working on interactive applications. Let's get more into detail down below:\n\nReact, developed by Facebook, is widely used for building dynamic, interactive user interfaces on websites. One of React’s key features is its ability to create reusable components. Think of these components as individual building blocks you can use repeatedly throughout your site. For example, you might create a button as a component, and instead of rewriting code for each new button, you can simply reuse this one component. This modular approach keeps your code organized and makes it easier to manage as your project expands. React is especially popular because it’s fast, scalable, and allows developers to build complex web applications with JavaScript with ease.\n\nAngular, created by Google, is a comprehensive framework designed to help developers build large, feature-rich web applications. Unlike simpler libraries, Angular comes with a wide range of built-in tools, like data binding and dependency injection, which make managing complex applications easier. However, Angular has a steeper learning curve and requires more setup compared to frameworks like React. For larger projects, though, Angular’s structure can help keep code organized and maintainable. Because of its extensive capabilities, Angular is often used by companies that need powerful, high-performance web application development. This framework’s robust architecture makes it a solid choice for big, data-driven projects.\n\nVue is a lightweight, beginner-friendly framework that is easy to learn yet powerful enough to handle complex applications. Developed as an alternative to frameworks like React and Angular, Vue combines some of the best features of both. It’s popular among new developers because it doesn’t require extensive knowledge to get started, and its documentation is clear and beginner-friendly. Vue is flexible, letting you build anything from small, single-page applications to larger, more complex projects. Its simplicity and ease of integration make it a preferred choice for both startups and smaller teams who need quick, efficient web development solutions.\n\nWhen building web applications with JavaScript, organizing your code is key to keeping things manageable. Here are a few general guidelines:\n• None Components: Break down your application into smaller, reusable components. For example, if you’re building a blog, you might have components for the header, footer, and individual blog posts.\n• None State Management: As your application grows, you’ll need to keep track of various pieces of information, like user settings or search results. Using a tool to manage this “state” (the current status of these pieces) will keep your application consistent.\n• None Routing: If your application has multiple pages, like a home page, an about page, and a contact page, routing helps users navigate between them smoothly without having to reload the whole page.\n\nOne of the best things about building web applications with JavaScript is that with Node.js, you can use JavaScript on the back end to handle things like databases, user authentication, and server requests. Node.js is a powerful tool for setting up the “server” side of your application, enabling you to build a complete, full-stack application with just one language.\n\nSetting up a basic server with Node.js is relatively simple. Node can be installed directly from its official website. Once you have Node, you can use it to run JavaScript code on your computer, allowing it to handle server requests.\n\nExpress is a tool that works with Node.js to make it easier to create and manage routes and server requests. Express helps you create a backend that responds to different user actions and sends data to the front end, enabling a smooth user experience.\n\nMost web applications need a way to store data, whether it’s user information, product details, or message histories. Picking the right database depends on the type of data your application will manage and the level of complexity required. JavaScript is compatible with several databases that let you securely store and retrieve data:\n• None MongoDB: This is a NoSQL database, meaning it stores data in a flexible, JSON-like format. MongoDB is popular with JavaScript because it works well with modern web applications and is easy to scale.\n• None SQL Databases: SQL databases, such as MySQL and PostgreSQL, are also widely used and provide structured data storage. They can be integrated with JavaScript using tools that make it easy to interact with data.\n\nSecurity is an essential part of building any web application, as you’ll need to protect user information and prevent unauthorized access. Here are some general security practices to consider:\n• None Authentication: This verifies a user’s identity, often through a username and password or other methods like Google or Facebook login. JSON Web Tokens (JWT) are commonly used to securely manage user sessions.\n• None Encryption: Secure any sensitive information, like passwords or payment details, by encrypting it so that it cannot be easily accessed by unauthorized parties.\n• None Environment Variables: Rather than hardcoding sensitive information, use environment variables to store details like database credentials securely.\n\nTesting ensures your application functions as expected and helps you catch bugs before your users encounter them. Testing might seem like an extra step, but it’s a good habit to build, as it makes your application more reliable and stable. There are different types of testing, including:\n• None Unit Testing: Testing individual pieces of your code to ensure they work correctly.\n• None Integration Testing: Checking that different parts of the application work together as intended.\n• None User Testing: Letting real users interact with your application to gather feedback on usability and performance.\n\nOnce your application is ready, deployment is the next step. This means making it available online so users can access it. After deploying your application, maintaining it involves monitoring for bugs, releasing updates, and ensuring it remains secure and functional. Staying on top of maintenance will keep your application running smoothly and your users satisfied. Popular hosting platforms for programming JavaScript applications include:\n• None Netlify and Vercel: Both of these services are ideal for hosting front-end applications, and they offer free hosting for smaller projects.\n• None AWS and Heroku: These platforms are great for applications that need back-end support and are commonly used for large projects.\n\nIf you are interested in implementing the use of JavaScript in your business projects, but are unable to find the right freelance developers, then Blue Coding is here for you. We would like to advise you to work with specialized development agencies to minimize any potential risks and mishaps. Our team of consultants and software developers work remotely and provide the highest level of expertise. To learn more about how we can assist you with your specific software development needs, contact us and book your free strategy call!"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Getting_started/Your_first_website/Adding_interactivity",
        "document": "JavaScript is a powerful programming language that can add interactivity to a website. It was invented by Brendan Eich. JavaScript is versatile and beginner-friendly. With more experience, you'll be able to create games, animated 2D and 3D graphics, comprehensive database-driven apps, and much more! JavaScript itself is relatively compact, yet very flexible. Developers have written a variety of tools on top of the core JavaScript language, unlocking a vast amount of functionality with minimum effort. These include:\n• Browser Application Programming Interfaces (APIs) built into web browsers, providing functionality such as dynamically creating HTML and setting CSS styles, collecting and manipulating a video stream from a user's webcam, or generating 3D graphics and audio samples.\n• Third-party APIs that allow developers to incorporate functionality in sites from other content providers, such as YouTube or Facebook.\n• Third-party frameworks and libraries that you can apply to HTML to accelerate the work of building sites and applications. It's outside the scope of this article—as a light introduction to JavaScript—to present the details of how the core JavaScript language is different from the tools listed above. You can learn more in our Core modules, as well as in other parts of MDN. The section below introduces some aspects of the core language and offers an opportunity to play with a few browser API features too. Have fun!\n\nJavaScript is one of the most popular modern web technologies! As your JavaScript skills grow, your websites will enter a new dimension of power and creativity. However, getting comfortable with JavaScript is more challenging than getting comfortable with HTML and CSS. You should start small, and progress gradually. To begin, let's examine how to add JavaScript to your page for creating a Hello world! example. (Hello world! is the standard for introductory programming examples.) Warning: If you haven't been following along with the rest of our course, download this example code and use it as a starting point.\n• Within the folder, create a new text document called , and save it.\n• Go to your file and enter this code on a new line, just before the closing tag: This is doing the same job as the element for CSS. It applies the JavaScript to the page, so it can have an effect on the HTML (along with the CSS, and anything else on the page).\n• Add this code to your file:\n• Make sure the HTML and JavaScript files are saved, then load in your browser. You should see something like this: Note: The reason the above instructions place the element near the bottom of the HTML file is that the browser reads code in the order it appears in the file. If the JavaScript loads first and it is supposed to affect the HTML that hasn't loaded yet, there could be problems. Placing JavaScript near the bottom of an HTML page is one way to accommodate this dependency.\n\nVariables are containers that store values. You start by declaring a variable with the keyword, followed by the name you give to the variable: A semicolon at the end of a line indicates where a statement ends. It is only required when you need to separate statements on a single line. However, some people believe it's good practice to have semicolons at the end of each statement. There are other rules for when you should and shouldn't use semicolons. For more details, see Your Guide to Semicolons in JavaScript. You can name a variable nearly anything, but there are some restrictions. (See this section about naming rules.) If you are unsure, you can check your variable name to see if it's valid. JavaScript is case sensitive. This means is not the same as . If you have problems in your code, check the case! After declaring a variable, you can give it a value: Also, you can do both these operations on the same line: You retrieve the value by calling the variable name: After assigning a value to a variable, you can change it later in the code: Note that variables may hold values that have different data types: This is a sequence of text known as a string. To signify that the value is a string, enclose it in single or double quote marks. This is a number. Numbers don't have quotes around them. This is a True/False value. The words and are special keywords that don't need quote marks. This is a structure that allows you to store multiple values in a single reference. \n\nRefer to each member of the array like this:\n\n , , etc. This can be anything. Everything in JavaScript is an object and can be stored in a variable. Keep this in mind as you learn. \n\nAll of the above examples too. So why do we need variables? Variables are necessary to do anything interesting in programming. If values couldn't change, then you couldn't do anything dynamic, like personalize a greeting message or change an image displayed in an image gallery.\n\nAn is a mathematical symbol that produces a result based on two values (or variables). In the following table, you can see some of the simplest operators, along with some examples to try in the JavaScript console. Add two numbers together or combine two strings. These do what you'd expect them to do in basic math. 9 - 3;\n\n8 * 2; // multiply in JS is an asterisk\n\n9 / 3; As you've seen already: this assigns a value to a variable. This performs a test to see if two values are equal and of the same data type. It returns a / (Boolean) result. This returns the logically opposite value of what it precedes. It turns a into a , etc.. When it is used alongside the Equality operator, the negation operator tests whether two values are not equal. For \"Not\", the basic expression is , but the comparison returns because we negate it: \"Does-not-equal\" gives basically the same result with different syntax. Here we are testing \"is NOT equal to 3\". This returns because IS equal to 3: There are a lot more operators to explore, but this is enough for now. See Expressions and operators for a complete list. Note: Mixing data types can lead to some strange results when performing calculations. Be careful that you are referring to your variables correctly, and getting the results you expect. For example, enter into your console. Why don't you get the result you expected? Because the quote marks turn the numbers into strings, so you've ended up concatenating strings rather than adding numbers. If you enter you'll get the total of the two numbers.\n\nFunctions are a way of packaging functionality that you wish to reuse. It's possible to define a body of code as a function that executes when you call the function name in your code. This is a good alternative to repeatedly writing the same code. You have already seen some uses of functions. For example: The and functions are built into the browser. If you see something which looks like a variable name, but it's followed by parentheses — — it is likely to be a function. Functions often take arguments: bits of data they need to do their job. Arguments go inside the parentheses, separated by commas if there is more than one argument. For example, the function makes a pop-up box appear inside the browser window, but we need to give it a string as an argument to tell the function what message to display. You can also define your own functions. In the next example, we create a simple function which takes two numbers as arguments and multiplies them: Try running this in the console; then test with several arguments. For example: Note: The statement tells the browser to return the variable out of the function so it is available to use. This is necessary because variables defined inside functions are only available inside those functions. This is called variable scoping. (Read more about variable scoping.)\n\nNext, let's change the page heading to a personalized welcome message when the user first visits the site. This welcome message will persist. Should the user leave the site and return later, we will save the message using the Web Storage API. We will also include an option to change the username, and therefore, the welcome message.\n• In , add the following line just before the element:\n• In , place the following code at the bottom of the file, exactly as it is written. This creates references to the new button and the heading, storing each inside variables:\n• Add the following function to set the personalized greeting. This won't do anything yet; we will call the function later on. function setUserName() { const myName = prompt(\"Please enter your name.\"); localStorage.setItem(\"name\", myName); myHeading.textContent = `Mozilla is cool, ${myName}`; } The function contains a function, which displays a dialog box, similar to . This function does more than , asking the user to enter data, and storing it in a variable after the user clicks OK. In this case, we are asking the user to enter a name. Next, the code calls on the API, which allows us to store data in the browser and retrieve it later. We use localStorage's function to create and store a data item called , setting its value to the variable which contains the user's entry for the name. Finally, we set the of the heading to a string, plus the user's newly stored name.\n• Add the following condition block after the function declaration. We could call this initialization code, as it structures the app when it first loads. if (!localStorage.getItem(\"name\")) { setUserName(); } else { const storedName = localStorage.getItem(\"name\"); myHeading.textContent = `Mozilla is cool, ${storedName}`; } This first line of this block uses the negation operator (logical NOT, represented by the ) to check whether the data item is already stored in in localStorage. If not, the function runs to create it. If it exists (that is, the user set a user name during a previous visit), we retrieve the stored name using and set the of the heading to a string, plus the user's name, as we did inside .\n• Add a event handler function to the button, as shown below. When clicked, runs. This allows the user to enter a different name by pressing the button.\n\nWhen you run the example and get the dialog box that prompts you to enter your user name, try pressing the Cancel button. You should end up with a title that reads Mozilla is cool, null. This happens because the value is set as when you cancel the prompt. null is a special value in JavaScript that refers to the absence of a value. Also, try clicking OK without entering a name. You should end up with a title that reads Mozilla is cool, because you've set to an empty string. To avoid these problems, you could check that the user hasn't entered a blank name. Update your function to this: function setUserName() { const myName = prompt(\"Please enter your name.\"); if (!myName) { setUserName(); } else { localStorage.setItem(\"name\", myName); myHeading.textContent = `Mozilla is cool, ${myName}`; } } In human language, this means: If has no value, run again from the start. If it does have a value (if the above statement is not true), then store the value in and set it as the heading's text."
    },
    {
        "link": "https://dev.to/parthchovatiya/building-interactive-web-applications-with-vanilla-javascript-42m2",
        "document": "Frameworks like React and Vue are popular, but there's a lot you can do with plain JavaScript. Let's explore some techniques for building interactive web applications without any frameworks.\n\nInteract with server-side APIs using the Fetch API.\n\n\n\nVanilla JavaScript is powerful and versatile. By mastering DOM manipulation, the Fetch API, local storage, CSS transitions, and Web Components, you can build fully-featured interactive web applications without relying on frameworks. Happy coding!"
    },
    {
        "link": "https://nobledesktop.com/learn/javascript/from-html-to-javascript-building-interactive-web-components-step-by-step",
        "document": "Today we're going to look at a classic coding algorithm called the Fisher-Yates Shuffle, which is used for randomizing the items of an array."
    },
    {
        "link": "https://medium.com/@livajorge7/building-web-applications-with-javascript-best-practices-and-tools-5182b6427fb0",
        "document": "JavaScript is a powerful programming language that allows developers to build interactive web applications. With the rise of single-page applications and front-end frameworks such as React and Angular, JavaScript has become an essential skill for web developers. In this blog, we will explore the basics of building web applications with JavaScript, including popular libraries, frameworks, and best practices. As an expert in JavaScript development, CronJ will provide insights and recommendations throughout the article.\n\nBefore we dive into building web applications, it’s essential to understand the fundamentals of JavaScript. JavaScript is a high-level, dynamic, and interpreted programming language that is often used for front-end web development. JavaScript is a versatile language that can also be used for server-side development (Node.js), desktop applications (Electron), and mobile applications (React Native).\n\nSome of the key concepts in JavaScript include variables, data types, functions, conditionals, loops, and objects. One of the most important aspects of JavaScript is its event-driven programming model, where code is executed in response to user interactions, such as clicking a button or scrolling a page.\n\nTo build robust and efficient web applications, developers often rely on JavaScript libraries and frameworks. Libraries are collections of pre-written code that can be used to simplify common tasks, while frameworks provide a complete structure for building web applications. Some of the most popular JavaScript libraries and frameworks include:\n\nTo ensure that your JavaScript code is maintainable, efficient, and bug-free, it’s essential to follow best practices. Here are some tips for writing high-quality JavaScript code:\n• Use a linter — a linter is a tool that helps identify and fix common errors in your JavaScript code.\n• Avoid global variables — global variables can cause naming conflicts and make your code harder to test and debug.\n• Use comments and documentation — comments and documentation can help you and other developers understand your code and its purpose.\n• Optimize for performance — JavaScript can be slow, so it’s essential to optimize your code for performance by minimizing DOM manipulation and using efficient algorithms.\n• Test your code — automated testing is essential for ensuring that your JavaScript code works as expected and is bug-free.\n\nTo streamline the development process, developers often rely on tools and technologies to assist with coding, testing, and debugging. Some of the most popular tools for JavaScript development include:\n• Visual Studio Code — a powerful and lightweight code editor with built-in support for JavaScript.\n• Git — a popular version control system for managing code changes and collaborating with other developers.\n• Chrome DevTools — a set of debugging tools built into the Google Chrome browser that allows developers to inspect and manipulate the DOM, monitor network activity, and analyze performance.\n\nTo develop a web application with JavaScript, there are some best practices that should be followed to ensure the application is efficient, reliable, and easy to maintain. In this blog, we will discuss some of the important aspects of building web applications with JavaScript.\n• Framework Selection: Choosing the right framework is an essential aspect of building web applications with JavaScript. JavaScript frameworks such as React, Angular, and Vue provide a structured approach to developing web applications, which can make the development process more efficient.\n• Design Patterns: Design patterns are a set of repeatable solutions to common problems in software design. Using design patterns in web application development can simplify code maintenance, improve code readability, and reduce development time.\n• Code Organization: Organizing the code in a web application is important to ensure its maintainability. Grouping related files and components, using naming conventions, and commenting code are some of the best practices for code organization.\n• Security: Web application security is a crucial aspect of building a successful web application. Using secure authentication methods, input validation, and encryption are some of the best practices for web application security.\n• Performance: Web application performance is critical to user experience. Best practices for performance optimization include code optimization, minimizing the number of HTTP requests, using caching techniques, and minimizing image sizes.\n• Testing: Testing is an important aspect of web application development. Unit testing, integration testing, and end-to-end testing are some of the types of testing that can be performed to ensure the application works as intended.\n• Deployment: Deploying a web application involves a series of steps that must be followed to ensure the application runs smoothly in the production environment. Best practices for deployment include automated deployment, version control, and continuous integration.\n\nJavaScript is a versatile language, and with the right practices and tools, it can be used to build powerful and reliable web applications.\n\nAt CronJ, we have extensive experience in building web applications with JavaScript. Our team of experts can help you build a robust and efficient web application that meets your business needs."
    }
]