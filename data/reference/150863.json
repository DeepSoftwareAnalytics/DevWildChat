[
    {
        "link": "https://reddit.com/r/Unity3D/comments/247oxa/what_are_best_practices_for_programming_an_rpg_in",
        "document": "I’m in the process of planning out a traditional turn-based RPG in Unity using C#, and have issues with picking the ‘proper’ design pattern. I know there’s no one correct way to do anything, but I want to get away from using improper techniques that will cause headaches down the road.\n\nIt seems like all I have are manager/system scripts put in place to monitor and access data like skills and jobs, active party members’ stats, monsters, dialogue, inventory, input, GUI, and FSMs to keep track of the general state of the game and track the flow of combat. Many of these scripts currently need to communicate with each other on a global scale, so I’ve made them singletons.\n\nI’m aware that singletons are often considered bad practice due to hidden dependencies making it harder to test, but what should I do instead to foster good habits and make my life easier? Are some items like finite state machines better off remaining as singletons? Using GetComponent and storing references to each manager script would keep access to these systems, but it seems like it would only be marginally better than having it be a singleton.\n\nFor a traditional RPG made in Unity, is a messaging system the preferred means of interaction between all the systems to access data? What are the best ways to decouple my code so it’s not a number of system managers with hidden dependency issues?\n\nI feel like I’m missing a concept (or concepts) that would help reconcile between the component-entity design of Unity and the largely (global?) data based nature of RPGs. If someone could help point me in the correct direction, I’d be eternally grateful.\n\nI have as much data as I can in a separate XML or JSON file (dialogue, menu text, skills, jobs, monsters), but is it better practice to have things like monsters be prefabs instead of dynamically loaded?"
    },
    {
        "link": "https://discussions.unity.com/t/simple-word-puzzle-game-any-guidelines/857109",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/gamedev/comments/nqqg2r/i_made_a_tutorial_series_in_unity_for_an_rpg_like",
        "document": "The subreddit covers various game development aspects, including programming, design, writing, art, game jams, postmortems, and marketing. It serves as a hub for game creators to discuss and share their insights, experiences, and expertise in the industry."
    },
    {
        "link": "https://medium.com/@hardikparmarexpert/master-scripting-best-practices-in-unity-risk-free-e02c56aa49c2",
        "document": "\n• Unity is a powerful game development engine that allows developers to bring their creative ideas to life.\n• As a Unity developer, following best practices when scripting is essential to ensure clean, efficient, and maintainable code.\n• In this blog post, we will explore some of the best practices for scripting in Unity, including code organization, naming conventions, performance optimizations, and maintainable scripting practices.\n• We’ll also provide code examples to illustrate these practices.\n• One of the fundamental aspects of scripting in Unity is maintaining a well-organized codebase.\n\nHere are some best practices to consider:\n• Divide your code into reusable and modular components, such as scripts for player controls, enemy AI, and UI interactions.\n• Each script should have a clear responsibility and a focused scope.\n• Organize your scripts into logical folders based on their functionality.\n• For example, separate scripts related to player interactions, enemy behaviors, and game mechanics into separate folders.\n• This helps maintain clarity and makes it easier to locate specific scripts.\n• Add clear and concise comments to your code, especially for complex or critical sections.\n• Additionally, consider documenting your code using tools like XML documentation or tools like Doxygen.\n\nHere are some guidelines to follow:\n• Use descriptive names for variables, functions, classes, and assets.\n• Aim for clarity and avoid abbreviations or single-letter names that may be confusing later.\n• Use camel case (starting with a lowercase letter, with subsequent words capitalized) for variables and function names.\n• Use PascalCase (starting with an uppercase letter, with subsequent words capitalized) for class names.\n• Unity has its naming conventions for components and assets.\n• Follow Unity’s guidelines for naming GameObjects, scripts, tags, layers, and assets to ensure consistency.\n\nConsider the following practices:\n• Use object pooling to efficiently reuse and recycle objects instead of instantiating and destroying them frequently.\n• This reduces the overhead of creating and destroying objects, improving performance.\n• Move computationally expensive operations outside the Update loop, as it is called once per frame.\n• Cache references and calculations whenever possible.\n• Choose the most suitable data structures for specific scenarios.\n• For example, use Lists for dynamically sized collections and Dictionaries for fast lookup operations.\n\nTo ensure long-term maintainability and collaboration, follow these practices:\n• Each script should have a single responsibility.\n• Avoid combining unrelated functionalities into a single script, as it can make the codebase harder to understand and maintain.\n• Utilize version control systems like Git to track changes, collaborate with other developers, and easily revert to previous versions when needed.\n• Conduct regular code reviews to catch potential issues, maintain consistency, and share knowledge within the team.\n• Encourage refactoring to improve the codebase over time.\n• By adhering to these scripting best practices, you can enhance the quality, performance, and maintainability of your Unity projects.\n• Organizing your code, following naming conventions, optimizing performance, and adopting maintainable practices contribute to a more efficient and collaborative development process.\n• Remember to adapt these practices to your specific project requirements and team dynamics for optimal results.\n\nNow that you’re equipped with these invaluable Unity scripting best practices, take your development to the next level! At Expert App Devs, we offer dedicated Unity developers in USA, UK, UAE from India at competitive rates:\n• Free shared project manager to keep your project on track\n• Safe data with NDA for complete peace of mind\n\nDon’t wait — unlock the full potential of your Unity projects with expert support. Contact Expert App Devs today!"
    },
    {
        "link": "https://discussions.unity.com/t/i-want-to-create-a-text-based-inventory/913634",
        "document": ""
    },
    {
        "link": "https://forums.unrealengine.com/t/creating-a-dialogue-system-with-branching-choices-conditions-and-consequences/2264547",
        "document": "I am currently developping a small visual novel with a strong emphasis on choices and branching story, and am looking for a way to create a reliable system to manage all the dialogues, including choices and their outcomes, conditions blocking certain choices and different consequences for choosing A or B.\n\nSo far, I have created a datatable and a blueprint structure which hold the text, character sprites, etc., as well as a few functions (in my main HUD widget blueprint) to manage player inputs and when to display the “choices” UI or the normal one - see pictures.\n\nProblem is, this system doesn’t work to efficiently and simply manage choices, blocking options if certain conditions are not met, or to create branches in the story. I’d also have to put all my dialogues in a single DT, which would be impossible to manage in the long run.\n\nHow do I turn this system (or create an entirely new one if I have to) to achieve what I am looking for?\n\nThank you very much for your help!"
    },
    {
        "link": "https://reddit.com/r/gamedev/comments/18zx70i/how_do_you_implement_branching_dialogue_with",
        "document": "Yes, I watched tutorials, and read some articles and posts, but most focus on just a few written dialogue lines you can put in editor fields. I'm working on something with more dialogue so I'd definitely go with external files.\n\nWhat I'm unsure about, is how to handle voiced lines if I decide to go with it. I guess each line will need some kind of ID to link the voiced line, but how to handle it?\n\nAt first I was considering a simple TXT with a custom parser but I realized it might not be ideal to create links between lines and voice files.\n\nI'm now considering a spreadsheet, most likely exported to CSV file. That way I could also include notes for voice actors and it's easy to read.\n\nAnother issue is branching. One file per branch? With one-liners it doesn't make much sense. A special \"character identifier\" acting as control flow? Scan the file to the specified point?\n\nCan I even design a spreadsheet in a way that choice menu is created and populated automatically based on file and different branches trigger different events afterwards? Or have flow and branches as in-editor setup (Scriptable Object?) and just link appropriate dialogue sequences?\n\nI also need a way to trigger next dialogue sequence based on conditions. For example after getting a quest character repeats \"Did you finished the task?\" and after you met requirements only then next dialogue plays (again with choices and stuff).\n\nAdditionally, I need to specify facial expression and/or body animation and most likely some file for lip-sync...\n\nI was mostly inspired by this (a bit old) article: https://www.gamedeveloper.com/design/organizing-and-formatting-game-dialogue\n\nMy engine of choice is Unity if it matters. Don't suggest an already made Asset solution.\n\nEDIT to clarify why and what I'm trying to do:\n\nEssentially I need one system to share with writer/proofreader and then VAs. Extracting text and then checking if everything is set-up correctly might be troublesome. A change to one file will be quickly updated in-game."
    },
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/using-dialogue-voices-and-waves-in-unreal-engine",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/unrealengine/comments/sle68m/what_is_the_best_way_to_do_branching_dialogue",
        "document": "Hi I am super new to UE4 and I need help bad. I am working on a game for class. It has branching dialogue and I have failed to find anything online or on Discord that could help. I am wondering what is the best way to do. Or even the best way to start. Any help is appreciated."
    },
    {
        "link": "https://forums.unrealengine.com/t/how-to-make-a-simple-dialog-tree/213151",
        "document": "Not Yet: Dialogue Plugin System in Code Plugins - UE Marketplace\n\nThe Dialogue Plugin System allows you to create and edit Dialogues with ease in UE4 using a graph based editor."
    }
]