[
    {
        "link": "https://learn.jquery.com/using-jquery-core/document-ready",
        "document": "A page can't be manipulated safely until the document is \"ready.\" jQuery detects this state of readiness for you. Code included inside will only run once the page Document Object Model (DOM) is ready for JavaScript code to execute. Code included inside will run once the entire page (images or iframes), not just the DOM, is ready.\n\nExperienced developers sometimes use the shorthand for . If you are writing code that people who aren't experienced with jQuery may see, it's best to use the long form.\n\nYou can also pass a named function to instead of passing an anonymous function.\n\nThe example below shows and in action. The code tries to load a website URL in an and checks for both events:\n\nTo learn more about method, you can read the relevant documenation page."
    },
    {
        "link": "https://api.jquery.com/ready",
        "document": "Description: Specify a function to execute when the DOM is fully loaded.\n\nThe method offers a way to run JavaScript code as soon as the page's Document Object Model (DOM) becomes safe to manipulate. This will often be a good time to perform tasks that are needed before the user views or interacts with the page, for example to add event handlers and initialize plugins. When multiple functions are added via successive calls to this method, they run when the DOM is ready in the order in which they are added. As of jQuery 3.0, jQuery ensures that an exception occuring in one handler does not prevent subsequently added handlers from executing.\n\nMost browsers provide similar functionality in the form of a event. However, jQuery's method differs in an important and useful way: If the DOM becomes ready and the browser fires before the code calls , the function will still be executed. In contrast, a event listener added after the event fires is never executed.\n\nBrowsers also provide the event on the object. When this event fires it indicates that all assets on the page have loaded, including images. This event can be watched in jQuery using . In cases where code relies on loaded assets (for example, if the dimensions of an image are required), the code should be placed in a handler for the event instead.\n\nNote that although the DOM always becomes ready before the page is fully loaded, it is usually not safe to attach a event listener in code executed during a handler. For example, scripts can be loaded dynamically long after the page has loaded using methods such as . Although handlers added by will always be executed in a dynamically loaded script, the 's event has already occurred and those listeners will never run.\n\njQuery offers several ways to attach a function that will run when the DOM is ready. All of the following syntaxes are equivalent:\n\nAs of jQuery 3.0, only the first syntax is recommended; the other syntaxes still work but are deprecated. This is because the selection has no bearing on the behavior of the method, which is inefficient and can lead to incorrect assumptions about the method's behavior. For example, the third syntax works with which selects nothing. The fourth syntax waits for the document to be ready but implies (incorrectly) that it waits for images to become ready.\n\nThere is also , deprecated as of jQuery 1.8 and removed in jQuery 3.0. Note that if the DOM becomes ready before this event is attached, the handler will not be executed.\n\nThe method is typically used with an anonymous function:\n\nWhich is equivalent to the recommended way of calling:\n\nWhen is used to avoid namespace conflicts, the shortcut is no longer available. However, the handler is passed a reference to the object that called the method. This allows the handler to use a jQuery object, for example as , without knowing its aliased name:"
    },
    {
        "link": "https://builtin.com/articles/document-ready-javascript",
        "document": "In this article, we will explore the $(document).ready method equivalent in JavaScript without using jQuery. The $(document).ready() method in jQuery is used to execute JavaScript code as soon as the document object model (DOM) ready. It ensures that the DOM is fully loaded before executing any code that manipulates the DOM.\n\nThis method only waits for the DOM to be loaded, without taking into account the loading of style sheets, images and iframes. This method specifies the function to execute when the DOM is fully loaded. There are a few ways by which similar functionality can be achieved without jQuery, including:\n• None By using the async/await function with the\n\nHow to Use Document Ready in JavaScript\n\nWe will use the method to update the content of an HTML element as soon as it is ready. The event fires when the initial HTML document has been completely parsed and loaded. It does not wait for stylesheets and images to finish loading.\n\nThis event gets executed once the basic HTML document is loaded and its parsing has taken place. Some of the advantages of using the event, include:\n• None It helps in improving user experience as it shows messages or content much faster.\n• None It takes less time to load the page. \n\n\n\nIn this example, we are displaying a heading using the tags. The content of the heading will be displayed only when the HTML document has been completely loaded. This is ensured with the help of the method.\n\nThe JavaScript code inside the tags is executed when the initial event is triggered. This event is fired when the initial HTML document has been completely loaded and parsed, without waiting for external resources like images and stylesheets.\n\nAs a result, when the DOMContentLoaded event occurs, the element with the ID will display the text instead of being empty.\n\nThis demonstrates how to manipulate the content of an HTML element using Javascript when the event is triggered.\n\nMore on JavaScriptHow to Check If a Checkbox Is Checked in JavaScript and jQuery\n\nThe event is triggered when the ready state of the document changes. By checking if the is set to you can determine when the DOM is ready.\n\nIn this example, we are using the event and checking the property to determine when the DOM is ready.\n\nThe event is triggered when the ready state of the document changes. The property represents the current state of the document and can have different values throughout the loading process.\n\nThe property can have the following values:\n• None : This means the document is still loading.\n• None : The DOM is loaded, but some external resources are still loading.\n\nBy using the event and checking the property, we can accurately detect when the DOM is ready and perform necessary actions or execute code accordingly. In this example, we are changing the background color of the “Click Me” button to red and the text to white on page load.\n\nMore on JavaScriptHow to Convert a JavaScript String to a Number\n\nAnd that’s how you can use the method equivalent without using jQuery."
    },
    {
        "link": "https://stackoverflow.com/questions/35347109/jquery-document-ready-changed-in-jquery-3-0",
        "document": "Second method works already from version 1.\n\nI use this options always because $ can be used with other libraries as well and you have conflict."
    },
    {
        "link": "https://stackoverflow.com/questions/9899372/vanilla-javascript-equivalent-of-jquerys-ready-how-to-call-a-function-whe",
        "document": "The simplest thing to do in the absence of a framework that does all the cross-browser compatibility for you is to just put a call to your code at the end of the body. This is faster to execute than an handler because this waits only for the DOM to be ready, not for all images to load. And, this works in every browser.\n\nFor modern browsers (anything from IE9 and newer and any version of Chrome, Firefox or Safari), if you want to be able to implement a jQuery like method that you can call from anywhere (without worrying about where the calling script is positioned), you can just use something like this:\n\nIf you need full cross browser compatibility (including old versions of IE) and you don't want to wait for , then you probably should go look at how a framework like jQuery implements its method. It's fairly involved depending upon the capabilities of the browser.\n\nTo give you a little idea what jQuery does (which will work wherever the script tag is placed).\n\nIf supported, it tries the standard:\n\nor for older versions of IE, it uses:\n\nAnd, there are some work-arounds in the IE code path that I don't quite follow, but it looks like it has something to do with frames.\n\nHere is a full substitute for jQuery's written in plain javascript:\n\nThe latest version of the code is shared publicly on GitHub at https://github.com/jfriend00/docReady\n\nThis has been tested in:\n\nHere's a summary of how it works:\n• Create an IIFE (immediately invoked function expression) so we can have non-public state variables.\n• When is called, check if the ready handler has already fired. If so, just schedule the newly added callback to fire right after this thread of JS finishes with .\n• If the ready handler has not already fired, then add this new callback to the list of callbacks to be called later.\n• Check if the document is already ready. If so, execute all ready handlers.\n• If we haven't installed event listeners yet to know when the document becomes ready, then install them now.\n• If exists, then install event handlers using for both and events. The \"load\" is a backup event for safety and should not be needed.\n• If doesn't exist, then install event handlers using for and events.\n• In the event, check to see if the and if so, call a function to fire all the ready handlers.\n• In all the other event handlers, call a function to fire all the ready handlers.\n• In the function to call all the ready handlers, check a state variable to see if we've already fired. If we have, do nothing. If we haven't yet been called, then loop through the array of ready functions and call each one in the order they were added. Set a flag to indicate these have all been called so they are never executed more than once.\n• Clear the function array so any closures they might be using can be freed.\n\nHandlers registered with are guaranteed to be fired in the order they were registered.\n\nIf you call after the document is already ready, the callback will be scheduled to execute as soon as the current thread of execution completes using . This allows the calling code to always assume they are async callbacks that will be called later, even if later is as soon as the current thread of JS finishes and it preserves calling order."
    },
    {
        "link": "http://w3schools.com/JQuery/html_toggleclass.asp",
        "document": "The toggleClass() method toggles between adding and removing one or more class names from the selected elements.\n\nThis method checks each element for the specified class names. The class names are added if missing, and removed if already set - This creates a toggle effect.\n\nHowever, by using the \"switch\" parameter, you can specify to only remove, or only add a class name.\n\nTry it Yourself - Examples\n\nToggle between adding and removing a class name \n\n How to use the toggleClass() method to toggle between adding and removing a class name.\n\nToggle classes using a function\n\n Using a function to specify which class names should be toggled for the selected elements.\n\nUsing the switch parameter\n\n How to use the switch parameter to only add or remove a class name."
    },
    {
        "link": "https://stackoverflow.com/questions/7002039/easiest-way-to-toggle-2-classes-in-jquery",
        "document": "If I have class .A and class .B and want to switch in between on button click, what's a nice solution for that in jQuery? I still don't understand how works.\n\nIs there an inline solution to put it in event?"
    },
    {
        "link": "https://stackoverflow.com/questions/7455229/the-proper-use-of-jquery-toggle",
        "document": "in jQuery (after examining the 1.6.2 source code), supports a number of different types of arguments. One thing it supports is passing it two callback functions. If that's what you pass it, it will call the first function the first time you call it, the second time you call it it will call the second function and it will alternate each time. '\n\nWhen you pass functions to it like this, it does NO other operation except call your functions. If you want something to hide and show, you have to do that in your functions.\n\nYou can see it work here: http://jsfiddle.net/jfriend00/QGz5c/.\n\nThe jQuery documentation does not make this clear. There should be just one set of documentation for that describes all the options you can pass it, but as Šime points out, there are two completely different sets of doc for the different types of parameters you can pass it."
    },
    {
        "link": "https://api.jquery.com/toggleClass",
        "document": "Description: Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.\n\nA boolean value to determine whether the class should be added or removed.\n\nA function returning one or more space-separated class names or an array of class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the state as arguments.\n\nA boolean value to determine whether the class should be added or removed.\n\nA function returning one or more space-separated class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the state as arguments.\n\nA boolean (not just truthy/falsy) value to determine whether the class should be added or removed.\n\nAn array of classes to be toggled for each element in the matched set.\n\nAn array of classes to be toggled for each element in the matched set.\n\nA boolean (not just truthy/falsy) value to determine whether the class should be added or removed.\n\nOne or more classes (separated by spaces) to be toggled for each element in the matched set.\n\nOne or more classes (separated by spaces) to be toggled for each element in the matched set.\n\nThis method takes one or more classes as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply to a simple :\n\nThe first time we apply , we get the following:\n\nThe second time we apply , the class is returned to the single value:\n\nApplying to the same alternates between and .\n\nThe second version of uses the second parameter for determining whether the class should be added or removed. If this parameter's value is , then the class is added; if , the class is removed. In essence, the statement:\n\nAs of jQuery 1.4, if no arguments are passed to , all classes on the element the first time is called will be toggled. Also as of jQuery 1.4, the class name to be toggled can be determined by passing in a function.\n\nThis example will toggle the class for elements if their parent element has a class of ; otherwise, it will toggle the class."
    },
    {
        "link": "https://bitdegree.org/learn/jquery-toggleclass",
        "document": "\n• The jQuery alternates between adding and removing the specified classes from the selected elements.\n• Whether you add or remove a class depends on the parameters specified for the jQuery command.\n\nThe jQuery manipulates classes by either adding or removing them from specified HTML elements.\n\nThe example below adds a class to a element:\n\nThis jQuery syntax specifies classes to be toggled:\n\nAlternatively, you can define a , specifying the method which returns the classes to be toggled:\n\nYou may also indicate the :\n\nThe optional parameter has a boolean value specifying whether classes will be removed ( ) or added ( ).\n\nNote: while previously you could name the state as the only parameter, this type of syntax has been deprecated in jQuery 3.0."
    }
]