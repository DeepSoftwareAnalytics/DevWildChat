[
    {
        "link": "https://ibm.com/docs/en/i/7.4?topic=functions-srand-set-seed-rand-function",
        "document": "The function sets the starting point for producing a series of pseudo-random integers. If is not called, the seed is set as if srand(1) were called at program start. Any other value for seed sets the generator to a different starting point.\n\nThere is no return value.\n\nwith a value other than 1 to initiate the random value sequence. Then the program computes five random values for the array of integers that are called . #include <stdlib.h> #include <stdio.h> int main(void) { int i, ranvals[5]; srand(17); for (i = 0; i < 5; i++) { ranvals[i] = rand(); printf(\"Iteration %d ranvals [%d] = %d\n\n\", i+1, i, ranvals[i]); } } /****************** Output should be similar to: **************** Iteration 1 ranvals [0] = 24107 Iteration 2 ranvals [1] = 16552 Iteration 3 ranvals [2] = 12125 Iteration 4 ranvals [3] = 9427 Iteration 5 ranvals [4] = 13152 */ This example first callswith a value other than 1 to initiate the random value sequence. Then the program computes five random values for the array of integers that are called"
    },
    {
        "link": "https://stackoverflow.com/questions/18969783/how-can-i-get-the-sourcecode-for-rand-c",
        "document": "Correct me if I'm wrong, but although this answer points to part of the implementation, I found that there is more to used in , which is from . From the 2.32 version obtained from here, the folder contains a file which explains that a simple linear congruential algorithm is used. The folder also has and which can show you more of the source code. contained in the same folder will show you the values used for macros like .\n\n/* An improved random number generation package. In addition to the standard rand()/srand() like interface, this package also has a special state info interface. The initstate() routine is called with a seed, an array of bytes, and a count of how many bytes are being passed in; this array is then initialized to contain information for random number generation with that much state information. Good sizes for the amount of state information are 32, 64, 128, and 256 bytes. The state can be switched by calling the setstate() function with the same array as was initialized with initstate(). By default, the package runs with 128 bytes of state\n\n information and generates far better random numbers than a linear\n\n congruential generator. If the amount of state information is less than 32 bytes, a simple linear congruential R.N.G. is used. Internally, the state information is treated as an array of longs; the zeroth element of the array is the type of R.N.G. being used (small integer); the remainder of the array is the state information for the R.N.G. Thus, 32 bytes of state information will give 7 longs worth of state information, which will allow a degree seven polynomial. (Note: The zeroth word of state\n\n information also has some other information stored in it; see setstate for details). The random number generation technique is a linear feedback shift register approach, employing trinomials (since there are fewer terms to sum up that way). In this approach, the least significant bit of all the numbers in the state table will act as a linear feedback shift register, and will have period 2^deg - 1 (where deg is the degree of the polynomial being used, assuming that the polynomial is irreducible and primitive). The higher order bits will have longer periods, since their values are also influenced by pseudo-random carries out of the lower bits. The\n\n total period of the generator is approximately deg*(2deg - 1); thus doubling the amount of state information has a vast influence on the\n\n period of the generator. Note: The deg*(2deg - 1) is an approximation only good for large deg, when the period of the shift register is the dominant factor. With deg equal to seven, the period is actually much longer than the 7*(2**7 - 1) predicted by this formula. */"
    },
    {
        "link": "https://geeksforgeeks.org/rand-and-srand-in-ccpp",
        "document": "The std::rand() is a built-in function that is used to generate a series of random numbers. It will generate random numbers in the range [0, RAND_MAX) where RAND_MAX is a constant whose default value may vary but is granted to be at least 32767. It is defined inside <cstdlib> and <stdlib.h> header files.\n\nIn this article, we will learn about rand() function in C++ and how to use it to generate random numbers.\n• None This function does not take any parameters.\n• None Returns a pseudo-random number in the range of [0, RAND_MAX).\n\nThe random number generated by rand() function is generated using an algorithm that gives a series of non-related numbers by taking 1 as the starting point or seed. Due to this, the random number series will aways be same for different function calls. To resolve this problem, we use srand() function.\n\nThe srand() function changes the “seed” or the starting point of the algorithm. A seed is an integer used to initialize the random number generator.\n• seed: Integer used to initialize the random number generator. It is common to use the current time ( from ) to ensure a different sequence of random numbers.\n• None This function does not return anything return.\n\nApplications of rand() in C++\n\nrand() function is mainly used to generate random numbers in our program which can be used in the following applications:"
    },
    {
        "link": "https://support.sas.com/documentation/onlinedoc/sasc/doc700/html/lr1/z2056548.htm",
        "document": ""
    },
    {
        "link": "https://docs.python.org/3/library/random.html",
        "document": "This module implements pseudo-random number generators for various distributions.\n\nFor integers, there is uniform selection from a range. For sequences, there is uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement.\n\nOn the real line, there are functions to compute uniform, normal (Gaussian), lognormal, negative exponential, gamma, and beta distributions. For generating distributions of angles, the von Mises distribution is available.\n\nAlmost all module functions depend on the basic function , which generates a random float uniformly in the half-open range . Python uses the Mersenne Twister as the core generator. It produces 53-bit precision floats and has a period of 2**19937-1. The underlying implementation in C is both fast and threadsafe. The Mersenne Twister is one of the most extensively tested random number generators in existence. However, being completely deterministic, it is not suitable for all purposes, and is completely unsuitable for cryptographic purposes.\n\nThe functions supplied by this module are actually bound methods of a hidden instance of the class. You can instantiate your own instances of to get generators that don’t share state.\n\nClass can also be subclassed if you want to use a different basic generator of your own devising: see the documentation on that class for more details.\n\nThe module also provides the class which uses the system function to generate random numbers from sources provided by the operating system.\n\nReturn a random element from the non-empty sequence seq. If seq is empty, raises . Return a k sized list of elements chosen from the population with replacement. If the population is empty, raises . If a weights sequence is specified, selections are made according to the relative weights. Alternatively, if a cum_weights sequence is given, the selections are made according to the cumulative weights (perhaps computed using ). For example, the relative weights are equivalent to the cumulative weights . Internally, the relative weights are converted to cumulative weights before making selections, so supplying the cumulative weights saves work. If neither weights nor cum_weights are specified, selections are made with equal probability. If a weights sequence is supplied, it must be the same length as the population sequence. It is a to specify both weights and cum_weights. The weights or cum_weights can use any numeric type that interoperates with the values returned by (that includes integers, floats, and fractions but excludes decimals). Weights are assumed to be non-negative and finite. A is raised if all weights are zero. For a given seed, the function with equal weighting typically produces a different sequence than repeated calls to . The algorithm used by uses floating-point arithmetic for internal consistency and speed. The algorithm used by defaults to integer arithmetic with repeated selections to avoid small biases from round-off error. Changed in version 3.9: Raises a if all weights are zero. To shuffle an immutable sequence and return a new shuffled list, use instead. Note that even for small , the total number of permutations of x can quickly grow larger than the period of most random number generators. This implies that most permutations of a long sequence can never be generated. For example, a sequence of length 2080 is the largest that can fit within the period of the Mersenne Twister random number generator. Return a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement. Returns a new list containing elements from the population while leaving the original population unchanged. The resulting list is in selection order so that all sub-slices will also be valid random samples. This allows raffle winners (the sample) to be partitioned into grand prize and second place winners (the subslices). Members of the population need not be hashable or unique. If the population contains repeats, then each occurrence is a possible selection in the sample. Repeated elements can be specified one at a time or with the optional keyword-only counts parameter. For example, is equivalent to . To choose a sample from a range of integers, use a object as an argument. This is especially fast and space efficient for sampling from a large population: . If the sample size is larger than the population size, a is raised. Changed in version 3.11: The population must be a sequence. Automatic conversion of sets to lists is no longer supported.\n\nThe following functions generate specific real-valued distributions. Function parameters are named after the corresponding variables in the distribution’s equation, as used in common mathematical practice; most of these equations can be found in any statistics text. Return the next random floating-point number in the range Return a random floating-point number N such that for and for . The end-point value may or may not be included in the range depending on floating-point rounding in the expression . Return a random floating-point number N such that and with the specified mode between those bounds. The low and high bounds default to zero and one. The mode argument defaults to the midpoint between the bounds, giving a symmetric distribution. Beta distribution. Conditions on the parameters are and . Returned values range between 0 and 1. Exponential distribution. lambd is 1.0 divided by the desired mean. It should be nonzero. (The parameter would be called “lambda”, but that is a reserved word in Python.) Returned values range from 0 to positive infinity if lambd is positive, and from negative infinity to 0 if lambd is negative. Changed in version 3.12: Added the default value for . Gamma distribution. (Not the gamma function!) The shape and scale parameters, alpha and beta, must have positive values. (Calling conventions vary and some sources define ‘beta’ as the inverse of the scale). Normal distribution, also called the Gaussian distribution. mu is the mean, and sigma is the standard deviation. This is slightly faster than the function defined below. Multithreading note: When two threads call this function simultaneously, it is possible that they will receive the same return value. This can be avoided in three ways. 1) Have each thread use a different instance of the random number generator. 2) Put locks around all calls. 3) Use the slower, but thread-safe function instead. Changed in version 3.11: mu and sigma now have default arguments. Log normal distribution. If you take the natural logarithm of this distribution, you’ll get a normal distribution with mean mu and standard deviation sigma. mu can have any value, and sigma must be greater than zero. Normal distribution. mu is the mean, and sigma is the standard deviation. Changed in version 3.11: mu and sigma now have default arguments. mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa is the concentration parameter, which must be greater than or equal to zero. If kappa is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2*pi. Weibull distribution. alpha is the scale parameter and beta is the shape parameter.\n\n# Even integer from 0 to 100 inclusive ['four', 'two', 'ace', 'three'] # of 52 playing cards, and determine the proportion of cards # Estimate the probability of getting 5 or more heads from 7 spins # of a biased coin that settles on heads 60% of the time. # Probability of the median of 5 samples being in middle two quartiles Example of statistical bootstrapping using resampling with replacement to estimate a confidence interval for the mean of a sample: Example of a resampling permutation test to determine the statistical significance or p-value of an observed difference between the effects of a drug versus a placebo: # Example from \"Statistics is Easy\" by Dennis Shasha and Manda Wilson 'at least as extreme as the observed difference of leads us to reject the null' 'hypothesis that there is no difference between the drug and the placebo.' Simulation of arrival times and service deliveries for a multiserver queue: # time when each server becomes available Statistics for Hackers a video tutorial by Jake Vanderplas on statistical analysis using just a few fundamental concepts including simulation, sampling, shuffling, and cross-validation. Economics Simulation a simulation of a marketplace by Peter Norvig that shows effective use of many of the tools and distributions provided by this module (gauss, uniform, sample, betavariate, choice, triangular, and randrange). A Concrete Introduction to Probability (using Python) a tutorial by Peter Norvig covering the basics of probability theory, how to write simulations, and how to perform data analysis using Python.\n\nThese recipes show how to efficiently make random selections from the combinatoric iterators in the module: \"Choose r elements with replacement. Order the result to match the iterable.\" # Result will be in set(itertools.combinations_with_replacement(iterable, r)). The default returns multiples of 2⁻⁵³ in the range 0.0 ≤ x < 1.0. All such numbers are evenly spaced and are exactly representable as Python floats. However, many other representable floats in that interval are not possible selections. For example, isn’t an integer multiple of 2⁻⁵³. The following recipe takes a different approach. All floats in the interval are possible selections. The mantissa comes from a uniform distribution of integers in the range 2⁵² ≤ mantissa < 2⁵³. The exponent comes from a geometric distribution where exponents smaller than -53 occur half as often as the next larger exponent. All real valued distributions in the class will use the new method: The recipe is conceptually equivalent to an algorithm that chooses from all the multiples of 2⁻¹⁰⁷⁴ in the range 0.0 ≤ x < 1.0. All such numbers are evenly spaced, but most have to be rounded down to the nearest representable Python float. (The value 2⁻¹⁰⁷⁴ is the smallest positive unnormalized float and is equal to .) Generating Pseudo-random Floating-Point Values a paper by Allen B. Downey describing ways to generate more fine-grained floats than normally generated by ."
    },
    {
        "link": "https://forums.alliedmods.net/showthread.php?t=192205",
        "document": "Overall Feature\n\n \n\n In all three proposals, the following type of code will be possible:\n\n \n\n // Add an element to the array.\n\n Resizing an array with a constant size would not work. In all proposals, you can create global, dynamic arrays, resize them, assign them, etc. In all proposals, some amount of garbage collection is required. In all proposals, arrays passed to functions are still passed by-reference.\n\n \n\n Proposal 1: Arrays are references\n\n \n\n In this proposal, we would break existing copy semantics. All arrays in Pawn would be treated as references, and you could pass them anywhere, a lot like pointers in Java or C.\n\n \n\n Currently in Pawn, the final assignment only changes . In this proposal, it would change as well, because was changed to point to .\n\n \n\n : Easy to implement, consistent behavior, makes sense for objects/structs/2D arrays. Assignment is fast.\n\n : Makes all 1D array creation much slower unless we implement analyses or excellent garbage collection to mitigate that.\n\n \n\n Proposal 2: Arrays are values\n\n \n\n In this proposal, we would preserve existing copy semantics. All arrays in Pawn would be treated as values, and assigning one array to another would fully copy its contents.\n\n \n\n In this example, the final assignment would copy the contents of into , and changing one would not affect the other.\n\n \n\n Preserves existing semantics, consistent behavior. 1D array creation does not need fancy internal magic to be fast.\n\n Assigning an array anywhere becomes an expensive, unbounded copy. 2D+ arrays become extremely expensive to move around.\n\n \n\n Proposal 3: Hybrid\n\n \n\n In this proposal, we would try to capture the best of both worlds. Arrays with a constant size would continue to act as values, as in proposal 2. However, a new kind of reference array could be declared with:\n\n \n\n This creates the subtle difference that the new syntax would be needed to move references around:\n\n However, you could still pass them around as \"normal\" arrays, including into functions which expect non-dynamic arrays. Just assignment would not work (as it does not now).\n\n \n\n Best of both worlds, fine-grained performance control.\n\n Requires the programmer to understand the difference between reference and value arrays. Hi All. I am working on adding fully dynamic arrays to SourcePawn. I have three proposals in flight, and I would be grateful to get your input on them.In all three proposals, the following type of code will be possible:Resizing an array with a constant size would not work. In all proposals, you can create global, dynamic arrays, resize them, assign them, etc. In all proposals, some amount of garbage collection is required. In all proposals, arrays passed to functions are still passed by-reference.In this proposal, we would break existing copy semantics. All arrays in Pawn would be treated as references, and you could pass them anywhere, a lot like pointers in Java or C.Currently in Pawn, the final assignment only changes. In this proposal, it would changeas well, becausewas changed to point to: Easy to implement, consistent behavior, makes sense for objects/structs/2D arrays. Assignment is fast.: Makes all 1D array creation much slower unless we implement analyses or excellent garbage collection to mitigate that.In this proposal, we would preserve existing copy semantics. All arrays in Pawn would be treated as values, and assigning one array to another would fully copy its contents.In this example, the final assignment would copy the contents ofinto, and changing one would not affect the other.Preserves existing semantics, consistent behavior. 1D array creation does not need fancy internal magic to be fast.Assigning an array anywhere becomes an expensive, unbounded copy. 2D+ arrays become extremely expensive to move around.In this proposal, we would try to capture the best of both worlds. Arrays with a constant size would continue to act as values, as in proposal 2. However, a new kind of reference array could be declared with:This creates the subtle difference that the new syntax would be needed to move references around:However, you could still pass them around as \"normal\" arrays, including into functions which expect non-dynamic arrays. Just assignment would not work (as it does not now).Best of both worlds, fine-grained performance control.Requires the programmer to understand the difference between reference and value arrays. __________________\n\n Last edited by BAILOPAN; 08-07-2012 at ."
    },
    {
        "link": "https://forums.alliedmods.net/showthread.php?t=321089",
        "document": "Useful commands:\n\n - - calculate identical entity classes on the map and report in server console, useful for debug too.\n\n - - report list of entities and its endeces (require sm_cvar sv_cheats 1)\n\n \n\n \n\n // TODO:\n\n \n\n Explain difference between:\n\n - delete, CloseHande, methodmap.Close()\n\n - IsValidEdict(), IsValidEntity()\n\n - Prop_Send, Prop_Data and value limits for them (signed, unsigned)\n\n \n\n Explain most common entity use stuff:\n\n - move type and link to enum\n\n - collion group, what is it and link to enum: \n\n - ChangeEdictState use cases\n\n - difference between client character, model, and class\n\n - at least mention about \"Navigation mode\" that it is even exist.\n\n \n\n > Really Soooorry about overloading you. Just a possible plan to improve the article. Not request.\n\n Perhaps, something is more suitable for separate topic.\n\n \n\n \n\n Skip it. Already included in 1st post:\n\n \n\n \n\n // Todos:\n\n Explain difference between:\n\n ...\n\n Explain most common entity use stuff:\n\n \n\n - Entity limits: \n\n \n\n \n\n \n\n For advanced users (code optimizations):\n\n \n\n - do not declare variables as static when you pass them in recurse function (in most cases it is wrong and can cause crash).\n\n \n\n SilverShot, I would suggest you to update installation and all subsequent batch scripts with the following syntax of paths:\n\n \n\n because when you copy code from forum it automatically insert invisible space at the end of each line causing SteamCMD can't connect due to incorrect login name.\n\n I also added some corrections for reliability (like when script and folder is on different disks).\n\n \n\n \n\n ---\n\n Perhaps, it's good to see listing of short solutions for most common errors in logs, like:\n\n * Unable to load plugin (no debug string table) - you need to compile plugin with older version of sm, e.g. 1.9 (or better, update SourceMod version of your server).\n\n \n\n * Illegal disk size - smx file is corrupted during ftp uploading. Re-upload it again.\n\n \n\n * Client X is not connected or Client X is not in game - missing IsClientInGame() check in source code. Code practice:\n\n \n\n - Use \n\n (I saw it in 1st post, but I think, require hightlighting separately).\n\n \n\n - Before using or killing entity, ensure it is valid with \n\n and necessarily check for zero if(entity != 0) or just if(entity), \n\n because 0 (on dedicated server) is a world and valid, so you can crash server instantly.\n\n \n\n - use uniform style for naming the variables. Good start is \"\n\n e.g. prepend g_ if variable is declared in global scope.\n\n \n\n - Use TIMER_FLAG_NO_MAPCHANGE to close handle of timer automatically when map is about to end. It prevent from unexpected consequences.\n\n \n\n - !!iValue - to convert \"int\" to \"bool\" (somewhere was a better solution(?))\n\n \n\n \n\n For advanced users (code optimizations):\n\n \n\n - declare \"char\" type of variables as \"static\" if your function called several times. This will optimize speed, because variable is not allocated twice.\n\n \n\n Mistakes (for advanced):\n\n - if you use Database's transactions ensure you created table as Transaction-Safe type, like \"InnoDB\": \n\n (perhaps, need to add this notice directly in sm wiki)\n\n \n\n Basics:\n\n \n\n - floating point operations specific, like:\n\n incorrect:\n\n correct is to cast float to int first using :\n\n For basics section (?), I think:\n\n - list all possible abilities to store config externally (ConVars, Cookies, KeyValues, SMCParser, Database, simple file)\n\n \n\n More useful links for appropriate sections:\n\n \n\n How to load / reload plugins\n\n \n\n Entities list:\n\n L4d: \n\n L4d2: \n\n \n\n Particles list:\n\n L4d: \n\n L4d2: \n\n \n\n Useful commands:\n\n - - dump network properties in xml format\n\n \n\n ...- Entity limits: https://developer.valvesoftware.com/wiki/Entity_limit - do not declare variables as static when you pass them infunction (in most cases it is wrong and can cause crash)., I would suggest you to update installation and all subsequent batch scripts with the following syntax of paths:because when you copy code from forum it automatically insert invisible space at the end of each line causing SteamCMD can't connect due to incorrect login name.I also added some corrections for reliability (like when script and folder is on different disks).---Perhaps, it's good to see listing of short solutions for most common errors in logs, like:- Use AcceptEntityInput (entity, \"Kill\") instead of RemoveEdict (entity). It is much safer.(I saw it in 1st post, but I think, require hightlighting separately).- Before using or killing entity, ensure it is valid with IsValidEntity (),and necessarily check for zero if(entity != 0) or just if(entity),because 0 (on dedicated server) is a world and valid, so you can crash server instantly.- use uniform style for naming the variables. Good start is \" Hungarian notation e.g. prependif variable is declared in global scope.- Useto close handle of timer automatically when map is about to end. It prevent from unexpected consequences.iValue - to convert \"\" to \"\" (somewhere was a better solution(?))- declare \"\" type of variables as \"\" if your function called several times. This will optimize speed, because variable is not allocated twice.- if you use Database's transactions ensure you created table as, like \"InnoDB\": https://www.tutorialspoint.com/mysql...ansactions.htm (perhaps, need to add this notice directly in sm wiki)- floating point operations specific, like:incorrect:correct is to cast float to int first usingFor basics section (?), I think:- list all possible abilities to store config externally (ConVars, Cookies, KeyValues, SMCParser, Database, simple file)Entities list:L4d: https://developer.valvesoftware.com/..._Dead_entities L4d2: https://developer.valvesoftware.com/..._L4D2_Entities Particles list:L4d: https://developer.valvesoftware.com/..._L4D_Particles L4d2: https://developer.valvesoftware.com/...L4D2_Particles - dump network properties in xml format \n\n \n\n To Marttt:\n\n \n\n *I usually add in my scripts the #file tag to reduce the pathname of the file while compiling and fixing errors or warnings, this helps me to \"read\" better the log error/compiler output I am also against this because:\n\n - #file hides path in log and that full path is the only ability to find what version smx is compiled from for troubleshooting purposes since sm doesn't expose version number in error logs.\n\n - with #file you receive a mess in log comes with different strings format of plugins who use #file and who doesn't.\n\n - there are not so many lines in error logs, usually. Anyway, checkmark \"Do not wrap lines\" in text editor always solve such problem of convenient reading.\n\n I am also against this because:- #file hides path in log and that full path is the only ability to find what version smx is compiled from for troubleshooting purposes since sm doesn't expose version number in error logs.- with #file you receive a mess in log comes with different strings format of plugins who use #file and who doesn't.- there are not so many lines in error logs, usually. Anyway, checkmark \"Do not wrap lines\" in text editor always solve such problem of convenient reading. For 'Entity' section:- calculate identical entity classes on the map and report in server console, useful for debug too.- report list of entities and its endeces (require sm_cvar sv_cheats 1)- delete, CloseHande, methodmap.Close()- IsValidEdict(), IsValidEntity()- Prop_Send, Prop_Data and value limits for them (signed, unsigned)- move type and link to enum- collion group, what is it and link to enum: https://developer.valvesoftware.com/...llision_groups - ChangeEdictState use cases- difference between client character, model, and class- at least mention about \"Navigation mode\" that it is even exist.> Reallyabout overloading you. Just a possible plan to improve the article. Not request.Perhaps, something is more suitable for separate topic. __________________\n\n Expert of CMD/VBS/VB6. Malware analyst. L4D fun (Bloody Witch & FreeZone)\n\n [My plugins] [My tools] [GitHub] [Articles] [HiJackThis+] [Donate] Last edited by Dragokas; 03-29-2020 at ."
    },
    {
        "link": "https://softwareengineering.stackexchange.com/questions/361458/is-source-code-generation-an-anti-pattern",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://github.com/alliedmodders/sourcepawn/blob/master/docs/upgrading-1.11.md",
        "document": "SourcePawn 1.11 contains a major rewrite of the compiler. This rewrite is intended to allow rapid feature development and improve the health and stability of the language. It fixes many bugs, and as a result, old programs may not compile.\n\nNotably, SourcePawn 1.11 does not hide errors in unused functions anymore. If a stock is unused, and has errors, the errors should be fixed or the stock should be removed.\n\nMore common errors for 1.11 upgrades are listed below.\n\nThe following code is no longer valid:\n\nIn previous versions of SourcePawn, the right-hand side of the expression was evaluated after creating the left-hand name. We have changed the ordering to eliminate a source of confusion and possible bugs. Because the right-hand side now evaluates first, the symbol does not exist.\n\nThe fix is to explicitly initialize to zero:\n\nIn addition, the following code is no longer valid:\n\nIn previous versions, the \"const\" keyword was not respected. It is now properly implemented.\n\nIt is now a warning to omit a return statement. That means the following examples are all problematic:\n\nTo ease the transition to the new semantic checker, spcomp will emit a warning when the return value is an enum, boolean, or integer. Any other type is an error and compilation will fail.\n\nFunctions that return arrays now MUST use transitional syntax. The following will not work:\n\nInstead, it must be:\n\nTwo obscure syntax options have been deprecated, and will emit a warning. Using the keyword before a statement, and omitting parenthesis on control conditionals.\n\nThese examples should be changed to the standard syntax, which uses parentheses:\n\nnow only affects the current file, and does not affect sub-files. This is to enable better compatibility with include files. This also makes language changes less risky for extension developers.\n\nType checking of arrays has been greatly improved in SourcePawn 1.11. More errors will be caught and more initialization patterns are supported. Below are some common errors that the new compiler finds and some suggestions as to how to fix them.\n\nThe following code will trigger this error:\n\nWhen brackets follow the variable name, they indicate a fixed size. When they follow the type, they indicate a dynamic or unknown size. The error in this example is that the position indicates a fixed size, but no size was given. There is no way to deduce the size automatically because it's an argument, and the initializer only applies to default values.\n\nThe fix is to use the correct bracket positioning:\n\nThere are a number of reasons why this error might appear in 1.11 in a script that compiled fine in earlier versions.\n\nEarlier versions of SourcePawn incorrectly computed the size of string arrays. For example, was internally calculated as four bytes. This has been fixed in 1.11. Plugins relying on this incorrect calculation will no longer compile.\n\nHere are some examples of code that used to work, but don't anymore:\n\nFor international plugins, remember that utf8 strings can occupy more bytes than characters. You can use sizeof() to check the true size of a string.\n\nThe following code will no longer work and will report error 47:\n\nThe reason is that the final rank of the array has two different sizes, 4 bytes (for ) and 16 bytes (for ). Therefore the size of the last dimension is not known at compile-time. There are a few ways to work around this.\n\nFirst, you can use a hardcoded size:\n\nSecond, you can use :\n\nThis warning will happen when the following pattern is detected:\n\nThe error is that is a scalar (a single value) being assigned to an array, which is illegal. The correct syntax is:\n\nFor values (or , or , or ), an initializer is not needed at all:\n\nSince this pattern is quite common, we special-cased it so that it still works in 1.11 with a warning. In future versions it may become an error.\n\nThe following code will trigger this error:\n\nThe brackets ( ) are in the wrong position. Next to the type, they indicate an array of unknown or any size. Next to the name, they indicate a fixed size. The correct syntax is:\n\nThe following code will trigger this error:\n\nThis is similar to error 101 above. The brackets next to the type indicate an array of unknown size. When declaring a local variable in legacy syntax, the indicates a dynamic array. Dynamic arrays aren't allowed in global or static scope. The correct syntax is:\n\nIn earlier versions of SourcePawn, the preprocessor had visibility into things it shouldn't have, like local variables and enum names. This no longer works:\n\nInstead, consider either removing your dependence on the preprocessor, or by introducing a new macro:\n\nThe old behavior only worked in earlier compilers due to an implementation quirk. The preprocessor was sharing symbol tables with the rest of the compiler, meaning it had access to the entire language state. This kind of thing does not work at all in a proper compiler pipeline because the preprocessing stage is textual, not semantic. In fact it is an entirely separate language. So with 1.11, the preprocessor can only see preprocessor state, not language state.\n\nPlugins compiled with SourcePawn 1.11 use a new internal representation for multi-dimensional arrays called \"direct arrays\". A new method, , has been added to detect this. For extensions that provide natives taking multi-dimensional arrays or invoke public functions with multi-dimensional arrays, it is necessary to check for direct arrays and just memory access appropriately.\n\nPreviously, the effective address for was . When is true, the formula is ."
    },
    {
        "link": "https://forums.unrealengine.com/t/gameplay-ability-system-course-project-development-blog/1419542",
        "document": "For some reason, the effects of hazardous status effects, within the rules of the game, almost never change. Poison is going to slowly sap your HP. Silence is going to block your magic. Paralysis is going to keep you from moving. And the same status..."
    }
]