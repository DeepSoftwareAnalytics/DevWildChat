[
    {
        "link": "https://answers.microsoft.com/en-us/msoffice/forum/all/creating-a-drop-down-list-that-is-dependent-on/71302ded-e5e9-489d-9c51-9c70a984f1c8",
        "document": ""
    },
    {
        "link": "https://trumpexcel.com/dependent-drop-down-list-in-excel",
        "document": "An Excel drop down list is a useful feature when you’re creating data entry forms or Excel Dashboards.\n\nIt shows a list of items as a drop down in a cell, and the user can make a selection from the drop down. This could be useful when you have a list of names, products, or regions that you often need to enter in a set of cells.\n\nBelow is an example of an Excel drop down list:\n\nIn the above example, I have used the items in A2:A6 to create a drop-down in C3.\n\nSometimes, however, you may want to use more than one drop-down list in Excel such that the items available in a second drop-down list are dependent on the selection made in the first drop-down list.\n\nThese are called dependent drop-down lists in Excel.\n\nBelow is an example of what I mean by a dependent drop-down list in Excel:\n\nYou can see that the options in Drop Down 2 depend on the selection made in Drop Down 1. If I select ‘Fruits’ in Drop Down 1, I am shown the fruit names, but if I select Vegetables in Drop Down 1, then I am shown the vegetable names in Drop Down 2.\n\nThis is called a conditional or dependent drop down list in Excel.\n\nHere are the steps to create a dependent drop down list in Excel:\n• Select the cell where you want the first (main) drop down list.\n• Go to Data –> Data Validation. This will open the data validation dialog box.\n• In the data validation dialog box, within the settings tab, select List.\n• In Source field, specify the range that contains the items that are to be shown in the first drop down list.\n• Click OK. This will create the Drop Down 1.\n• Select the entire data set (A1:B6 in this example).\n• Go to Formulas –> Defined Names –> Create from Selection (or you can use the keyboard shortcut Control + Shift + F3).\n• In the ‘Create Named from Selection’ dialog box, check the Top row option and uncheck all the others. Doing this creates 2 names ranges (‘Fruits’ and ‘Vegetables’). Fruits named range refers to all the fruits in the list and Vegetables named range refers to all the vegetables in the list.\n• Select the cell where you want the Dependent/Conditional Drop Down list (E3 in this example).\n• In the Data Validation dialog box, within the setting tab, make sure List in selected.\n• In the Source field, enter the formula =INDIRECT(D3). Here, D3 is the cell that contains the main drop down.\n\nNow, when you make the selection in Drop Down 1, the options listed in Drop Down List 2 would automatically update.\n\nHow does this work? – The conditional drop down list (in cell E3) refers to =INDIRECT(D3). This means that when you select ‘Fruits’ in cell D3, the drop down list in E3 refers to the named range ‘Fruits’ (through the INDIRECT function) and hence lists all the items in that category.\n\nImportant Note: If the main category is more than one word (for example, ‘Seasonal Fruits’ instead of ‘Fruits’), then you need to use the formula =INDIRECT(SUBSTITUTE(D3,” “,”_”)), instead of the simple INDIRECT function shown above.\n• The reason for this is that Excel does not allow spaces in named ranges. So when you create a named range using more than one word, Excel automatically inserts an underscore in between words. For example, when you create a named range with ‘Seasonal Fruits’, it will be named Season_Fruits in the backend. Using the SUBSTITUTE function within the INDIRECT function makes sure that spaces are converted into underscores.\n\nWhen you have made the selection and then you change the parent drop down, the dependent drop down list would not change and would, therefore, be a wrong entry.\n\nFor example, if you select the ‘Fruits’ as the category and then select Apple as the item, and then go back and change the category to ‘Vegetables’, the dependent drop down would continue to show Apple as the item.\n\nYou can use VBA to make sure the contents of the dependent drop down list resets whenever the main drop down list is changed.\n\nHere is the VBA code to clear the contents of a dependent drop down list:\n\nThe credit for this code goes to this tutorial by Debra on clearing dependent drop down lists in Excel when the selection is changed.\n\nHere is how to make this code work:\n• In the Excel workbook where you have the dependent drop down list, go to Developer tab, and within the ‘Code’ group, click on Visual Basic (you can also use the keyboard shortcut – ALT + F11).\n• In the VB Editor Window, on the left in the project explorer, you would see all the worksheet names. Double-click on the one that has the drop down list.\n• Paste the code in the code window on the right.\n\nNow, whenever you change the main drop down list, the VBA code would be fired and it would clear the content of the dependent drop down list (as shown below).\n\nIf you’re not a fan of VBA, you can also use a simple conditional formatting trick that will highlight the cell whenever there is a mismatch. This can help you visually see and correct the mismatch (as shown below).\n\nHere are the steps t0 highlight mismatches in the dependent drop down lists:\n• Select the cell that has the dependent drop down list(s).\n• Go to Home –> Conditional Formatting –> New Rule.\n• In the New Formatting Rule dialog box, select ‘Use a formula to determine which cells to format’.\n• In the formula field, enter the following formula: =ISERROR(VLOOKUP(E3,INDEX($A$2:$B$6,,MATCH(D3,$A$1:$B$1)),1,0))\n\nThe formula uses the VLOOKUP function to check whether the item in the dependent drop down list is the one from the main category or not. If it isn’t, the formula returns an error. This is used by the ISERROR function to return TRUE which tells conditional formatting to highlight the cell.\n\nYou May Also Like the Following Excel Tutorials:"
    },
    {
        "link": "https://techcommunity.microsoft.com/discussions/excelgeneral/how-can-i-create-multiple-dependent-drop-down-lists/3828660",
        "document": "Lycias I realize this is an old discussion, but in case you or anyone else is interested in trying a LAMBDA based solution for creating dynamic, multi-level dependent drop-down lists, please see the attached workbook...\n\nOpen Name Manager to view the custom LAMBDA functions and named ranges. Basically, the TBL.TRANSFORM and TBL.JOINCOLS functions are used to transform your national areas table into a single lookup range with three columns: List_ID, Parent_ID and List_Items. The Parent_ID for each List_Item is created by joining all of the previous items for each record with a delimiter. These two named ranges are then passed to the third function, GET.LIST, which is used directly as the data validation list source.\n\nThe first data validation level (non-dependent) uses the first two arguments only:\n\nAll other dependent data validation levels can be set together using the same syntax, with a mixed cell reference for the [criteria] argument. For example:\n\nFor reference, the three custom LAMBDA functions are defined as follows:\n\nThese functions are dynamic and can transform a table of any dimensions. Please see the attached workbook for a complete demonstration..."
    },
    {
        "link": "https://youtube.com/playlist?list=PLmHVyfmcRKywYhC1Q9eZqR7D-_cdiwl6y",
        "document": ""
    },
    {
        "link": "https://excel-easy.com/examples/dependent-drop-down-lists.html",
        "document": "This example describes how to create dependent drop-down lists in Excel. Here's what we are trying to achieve:\n\nAs a result, a second drop-down list contains the Pizza items.\n\nTo create these dependent drop-down lists, execute the following steps.\n\n1. On the second sheet, create the following named ranges.\n\n2. On the first sheet, select cell B1.\n\n3. On the Data tab, in the Data Tools group, click Data Validation.\n\n4. In the Allow box, click List.\n\n5. Click in the Source box and type =Food.\n\n8. In the Allow box, click List.\n\n9. Click in the Source box and type =INDIRECT($B$1).\n\nExplanation: the INDIRECT function returns the reference specified by a text string. For example, the user selects Chinese from the first drop-down list. =INDIRECT($B$1) returns the Chinese reference. As a result, the second drop-down lists contains the Chinese items."
    },
    {
        "link": "https://ablebits.com/office-addins-blog/excel-indirect-function",
        "document": "This Excel INDIRECT tutorial explains the function's syntax, basic uses and provides a number of formula examples that demonstrate how to use INDIRECT in Excel.\n\nA great lot of functions exist in Microsoft Excel, some being easy-to-understand, other requiring a long learning curve, and the former being used more often than the latter. And yet, Excel INDIRECT is one of the kind. This Excel function does not perform any calculations, nor does it evaluate any conditions or logical tests.\n\nWell then, what is the INDIRECT function in Excel and what do I use it for? This is a very good question and hopefully you will get a comprehensive answer in a few minutes when you've finished reading this tutorial.\n\nAs its name suggests, Excel INDIRECT is used to indirectly reference cells, ranges, other sheets or workbooks. In other words, the INDIRECT function lets you create a dynamic cell or range reference instead of hard-coding them. As a result, you can change a reference within a formula without changing the formula itself. Moreover, these indirect references won't change when some new rows or columns are inserted in the worksheet or when you delete any existing ones. All this may be easier to understand from an example. However, to be able to write a formula, even the simplest one, you need to know the function's arguments, right? So, let's have a quick look at Excel INDIRECT syntax first. The INDIRECT function in Excel returns a cell reference from a text string. It has two arguments, the first is required and the second is optional: ref_text - is a cell reference, or a reference to a cell in the form of a text string, or a named range. a1 - is a logical value that specifies what type of reference is contained in the ref_text argument:\n• If TRUE or omitted, ref_text is interpreted as an A1-style cell reference.\n• If FALSE, ref_text is treated as a R1C1 reference. While the R1C1 reference type might be useful in certain situations, you'll probably want to use the familiar A1 references most of the time. Anyway, nearly all INDIRECT formulas in this tutorial will use A1 references, so we will be omitting the second argument.\n\n Basic use of the INDIRECT function To get into the function's insight, let's write a simple formula that demonstrates how you use INDIRECT in Excel. Suppose, you have number 3 in cell A1, and text A1 in cell C1. Now, put the formula in any other cell and see what happens:\n• The INDIRECT function refers to the value in cell C1, which is A1.\n• The function is routed to cell A1 where it picks the value to return, which is number 3. So, what the INDIRECT function actually does in this example is converting a text string into a cell reference. If you think this still has very little practical sense, please bear with me and I will show you some more formulas that reveal the real power of the Excel INDIRECT function.\n\n\n\nHow to use INDIRECT in Excel - formula examples As demonstrated in the above example, you can use the Excel INDIRECT function to put the address of one cell into another as a usual text string, and get the value of the 1st cell by referencing the 2nd. However, that trivial example is no more than a hint at the INDIRECT capabilities. When working with real data, the INDIRECT function can turn any text string into a reference including very complex strings that you build using the values of other cells and results returned by other Excel formulas. But let's not put the cart before the horse, and run through several Excel Indirect formulas, one at a time. As you remember, the Excel INDIRECT function allows for A1 and R1C1 reference styles. Usually, you cannot use both styles in a single sheet at a time, you can only switch between the two reference types via File > Options > Formulas > R1C1 check box. This is the reason why Excel users rarely consider using R1C1 as an alternative referencing approach. In an INDIRECT formula, you can use either reference type on the same sheet if you want to. Before we move any further, you may want to know the difference between A1 and R1C1 reference styles. A1 style is the usual reference type in Excel that refers to a column followed by a row number. For example, B2 refers to the cell at the intersection of column B and row 2. R1C1 style is the opposite reference type - rows followed by columns, which does take some time getting used to : ) For example, R4C1 refers to cell A4 which is in row 4, column 1 in a sheet. If no number comes after the letter, then you are referring to the same row or column. And now, let's see how the INDIRECT function handles A1 and R1C1 references: As you see in the screenshot above, three different Indirect formulas return the same result. Have you already figured out why? I bet you have : ) This is the easiest one. The formula refers to cell C1, fetches its value - text string A2, converts it into a cell reference, heads over to cell A2 and returns its value, which is 222. FALSE in the 2nd argument indicates that the referred value (C3) should be treated like a R1C1 cell reference, i.e. a row number followed by a column number. Therefore, our INDIRECT formula interprets the value in cell C3 (R2C1) as a reference to the cell at the conjunction of row 2 and column 1, which is cell A2.\n\n Similarly to how we created references from cell values, you can combine a text string and a cell reference within your INDIRECT formula, tied together with the concatenation operator (&). In the following example, the formula: =INDIRECT(\"B\"&C2) returns a value from cell B2 based on the following logical chain: The INDIRECT function concatenates the elements in the ref_text argument - text B and the value in cell C2 -> the value in cell C2 is number 2, which makes a reference to cell B2 -> the formula goes to cell B2 and returns its value, which is number 10. Using the INDIRECT function with named ranges Apart from making references from cell and text values, you can get the Excel INDIRECT function to refer to named ranges. Suppose, you have the following named ranges in your sheet: To create an Excel dynamic reference to any of the above named ranges, just enter its name in some cell, say G1, and refer to that cell from an Indirect formula . And now, you can take a step further and imbed this INDIRECT formula into other Excel functions to calculate the sum and average of the values in a given named range, or find the maximum / minimum value within the rage: Now that you've got the general idea of how to use the INDIRECT function in Excel, we can experiment with more powerful formulas.\n\n INDIRECT formula to dynamically refer to another worksheet The usefulness of the Excel INDIRECT function is not limited to building \"dynamic\" cell references. You can also utilize it to refer to cells in other worksheets \"on the fly\", and here's how. Suppose, you have some important data in Sheet 1, and you want to pull that data in Sheet 2. The following screenshot demonstrates how an Excel Indirect formula can handle this task: Let's break apart the formula you see in the screenshot and understand. As you know, the usual way to reference another sheet in Excel is writing the sheet's name followed by the exclamation mark and a cell / range reference, like SheetName!Range. Since a sheet name often contains a space(s), you'd better enclose it (the name, not a space : ) in single quotes to prevent an error, for example 'My Sheet!'$A$1. And now, all you have to do is to enter the sheet name in one cell, the cell address in another, concatenate them in a text string, and feed that string to the INDIRECT function. Remember that in a text string, you have to enclose each element other than a cell address or number in double quotes and link all elements together using the concatenation operator (&). Given the above, we get the following pattern: INDIRECT(\"'\" & Sheet's name & \"'!\" & Cell to pull data from) Going back to our example, you put the sheet's name in cell A1, and type the cell addresses in column B, as demonstrated in the screenshot above. As the result, you get the following formula: Also, please pay attention that if you are copying the formula into multiple cells, you have to lock the reference to the sheet's name using the absolute cell references like $A$1.\n• If either of the cells that contain the 2nd sheet's name and cell address (A1 and B1 in the above formula) is empty, your Indirect formula will return an error. To prevent this, you can wrap the INDIRECT function in the IF function:\n• For the INDIRECT formula that refers to another sheet to work correctly, the referred sheet should be open, otherwise the formula will return a #REF error. To avoid the error, you can use the IFERROR function, which will display an empty string, whatever error occurs: Creating an Excel dynamic reference to another workbook The Indirect formula that refers to a different Excel workbook is based on the same approach as a reference to another spreadsheet. You just have to specify the workbook's name is addition to the sheet name and cell address. To make things easier, let's start with making a reference to another book in the usual way (apostrophes are added in case your book and/or sheet names contain spaces):\n\n '[Book_name.xlsx]Sheet_name'!Range Assuming that the book name is in cell A2, the sheet name is in B2, and the cell address is in C2, we get the following formula: Since you don't want the cells containing the book's and sheet's names to change when copying the formula to other cells, you lock them by using absolute cell references, $A$2 and $B$2, respectively. And now, you can easily write your own dynamic reference to another Excel workbook by using the following pattern: Note. The workbook your formula refers to should always be open, otherwise the INDIRECT function will throw a #REF error. As usual, the IFERROR function can help you avoid it: Normally, Microsoft Excel changes cell references when you insert new or delete existing rows or columns in a sheet. To prevent this from happening, you can use the INDIRECT function to work with cell references that should remain intact in any case. To illustrate the difference, please do the following:\n• Enter any value in any cell, say, number 20 in cell A1.\n• Refer to A1 from two other cells in different ways: and See what happens? The cell with the equal to logical operator still returns 20, because its formula has been automatically changed to =A2. The cell with the INDIRECT formula now returns 0, because the formula was not changed when a new row was inserted and it still refers to cell A1, which is currently empty: After this demonstration, you may be under the impression that the INDIRECT function is more a nuisance than help. Okay, let's try it another way. Suppose, you want to sum the values in cells A2:A5, and you can easily do this using the SUM function: However, you want the formula to remain unchanged, no matter how many rows are deleted or inserted. The most obvious solution - the use of absolute references - won't help. To make sure, enter the formula in some cell, insert a new row, say at row 3, and… find the formula converted to . Of course, such courtesy of Microsoft Excel will work fine in most cases. Nevertheless, there may be scenarios when you don't want the formula to get changed automatically. The solution is to use the INDIRECT function, like this: Since Excel perceives \"A1:A5\" as a mere text string rather than a range reference, it won't make any changes when you insert or delete a row(s).\n\n Using INDIRECT with other Excel functions Apart from SUM, INDIRECT is frequently used with other Excel functions such as ROW, COLUMN, ADDRESS, VLOOKUP, SUMIF, to name a few. Quite often, the ROW function is used in Excel to return an array of values. For example, you can use the following array formula (remember it requires pressing Ctrl + Shift + Enter) to return the average of the 3 smallest numbers in the range A1:A10: However, if you insert a new row in your worksheet, anywhere between rows 1 and 3, the range in the ROW function will get changed to ROW(1:4) and the formula will return the average of the 4 smallest numbers instead of 3. To prevent this from happening, nest INDIRECT in the ROW function and your array formula will always remain correct, no matter how many rows are inserted or deleted: Here's a couple more examples of using INDIRECT and ROW in conjunction with the LARGE function: How to sum N largest numbers in a range.\n\n You can use Excel INDIRECT together with the ADDRESS function to get a value in a certain cell on the fly. As you may remember, the ADDRESS function is used in Excel to get a cell address by the row and column numbers. For example, the formula returns the string $C$1 since C1 is the cell at the intersection of the 1st row and 3rd column. To create an indirect cell reference, you simply embed the ADDRESS function into an INDIRECT formula like this: Of course, this trivial formula only demonstrates the technique. And here are a few examples that may prove really useful:\n• INDIRECT ADDRESS formula - how to switch rows and columns.\n• VLOOKUP and INDIRECT - how to dynamically pull data from different sheets.\n• INDIRECT with INDEX / MATCH - how to bring a case-sensitive VLOOKUP formula to perfection.\n• Excel INDIRECT and COUNTIF - how to use the COUNTIF function on a non-contiguous range or a selection of cells. Using INDIRECT with Data Validation in Excel You can use the Excel INDIRECT function with Data Validation to create cascading drop down lists that display different choices depending on what value the user selected in the first dropdown. A simple dependent drop-down list is really easy to make. All it takes is a few named ranges to store the dropdown's items and a simple formula where A2 is the cell displaying your first drop-down list. To make more complex 3-level menus or drop-downs with multi-word entries, you will need a bit more complex INDIRECT formula with a nested SUBSTITUTE function. For the detailed step-by-step guidance on how to use INDIRECT with Excel Data Validation, please check out this tutorial: How to make a dependent drop down list in Excel.\n\n\n\nAs demonstrated in the above examples, the INDIRECT function is quite helpful when dealing with cell and range references. However, not all Excel users eagerly embrace it mostly because extensive use of INDIRECT in Excel formulas results in lack of transparency. The INDIRECT function is difficult to review since the cell it refers to is not the ultimate location of the value used in the formula, which is pretty confusing indeed, especially when working with large complex formulas. In addition to the above said, like any other Excel function, INDIRECT may throw an error if you misuse the function's arguments. Here's a list of most typical mistakes: Most often, the INDIRECT function returns a #REF! error in three cases:\n• ref_text is not a valid cell reference. If the ref_text parameter in your Indirect formula is not a valid cell reference, the formula will result in the #REF! error value. To avoid possible issues, please check the INDIRECT function's arguments.\n• Range limit is exceeded. If the ref_text argument of your Indirect formula refers to a range of cells beyond the row limit of 1,048,576 or the column limit of 16,384, you will also get the #REF error in Excel 2007, 2010 and Excel 2013. Earlier Excel versions ignore the exceeded limit and do return some value, though often not the one you'd expect.\n• The referred sheet or workbook is closed. If your Indirect formula refers to another Excel workbook or worksheet, that other workbook / spreadsheet must be open, otherwise INDIRECT returns the #REF! error. This is the most obvious case, implying that there is some error in the function's name, which leads us to the next point : )\n\n Using the INDIRECT function in non-English locales You may be curious to know that the English name of the INDIRECT function has been translated into 14 languages, including: If you are interested to get the full list, please check out this page. A common problem with non-English localizations is not the INDIRECT function's name, but rather different Regional Settings for the List Separator. In the standard Windows configuration for North America and some other countries, the default List Separator is a comma. While in European countries, the comma is reserved as the Decimal Symbol and the List Separator is set to semicolon. As a result, when copying a formula between two different Excel locales, you may get the error message \"We found a problem with this formula…\" because the List separator used in the formula is different from what is set on your machine. If you run into this error when copying some INDIRECT formula from this tutorial into your Excel, simply replace all commas (,) with semicolons (;) to get it fixed. To check which List Separator and Decimal Symbol are set on your machine, open the Control Panel, and go to Region and Language > Additional Settings.\n\n\n\nHopefully, this tutorial has shed some light on using INDIRECT in Excel. Now that you know its strengths and limitations, it's time to give it a shot and see how the INDIRECT function can simplify your Excel tasks. Thank you for reading!"
    },
    {
        "link": "https://stackoverflow.com/questions/66481673/microsoft-excel-dynamic-data-validation-list-with-indirect-references",
        "document": "I'm looking to create a data validation list that can dynamically reference a sheet and dynamically populate only the cells that have data in them.\n\nI can make a dynamic data validation list that references an non-dynamic sheet using this formula: =OFFSET(SHEET_NAME!$A$2,,,COUNTA(SHEET_NAME!$A:$A))\n\nAnd I can make a non-dynamic data validation list (Only A2:A25) that dynamically references any sheet where Cell A3 contains the sheet name using this formula: \"=INDIRECT(\"'\"&A3&\"'!$A2:$A25\")\"\n\nBut I have been unable to combine the two to make a dynamic data validation list that can dynamically reference sheets. If anyone has any advice to make the two work together or a better method I would greatly appreciate it."
    },
    {
        "link": "https://stackoverflow.com/questions/54646063/using-indirect-formula-in-creating-a-dynamic-dropdown-list-using-a-dynamic-range",
        "document": "I am trying to create a dynamic dropdown list. So far I have used the offset formula to create named ranges. Here is a sample.\n\nWhen creating the dropdown list, I can enter =CASH_ON_HAND in the data validation box and it works fine as shown in this image: DropDown List, Data Validation\n\nHowever, that method would not be efficient so I need to use the INDIRECT formula so my dropdown list would depend on the value I select on one cell as shown in this image:\n\nSo to my surprise, dynamic ranges do not work well with the indirect formula so my dynamic dropdown would not work. I am working with over 100 dynamic ranges so manually setting the data validation rules for the dropdown is out of the question.\n\nIndirect Fomula using a Dynamic Range Name whic depends on the value of a cell\n\nIs there any way that I can use my dynamic ranges inside the INDIRECT formula? I really need to make this work. I have browsed a lot of materials on the internet but none has made it work."
    },
    {
        "link": "https://answers.microsoft.com/en-us/msoffice/forum/all/indirect-function-conflicting-with-dynamic-range/9366b25c-2610-42dc-9814-2cedf67c2ec7",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/excel/comments/1dkyeh4/data_validation_and_indirect_function",
        "document": "I'm trying to make a budgeting tool with excel. I have run into a problem with the indirect function.\n\nI am trying to create a drop down list that dynamically lists data from a table that is specified in another cell\n\nIn table \"A\" column D, I have used data validation to create a drop down list of 3 other tables: expenses, income, savings. These are all named in name manager.\n\nIn table \"A\" column E I am trying to create a dynamic list that lists the data from the table selected in column D. In data validation I have tried =INDIRECT(D12). This produces an error message.: This entry leads to an error, try entering different values to continue.\n\n=INDIRECT($D$12) works, however it then won't work row by row.\n\n=INDIRECT(D12) produces the data from the correct table when done in a cell and not though data validation.\n\nI am using the web version of excel\n\nIf anyone have any ideas it would be much appreciated!!"
    }
]