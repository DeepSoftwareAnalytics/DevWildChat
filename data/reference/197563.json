[
    {
        "link": "https://docs.oracle.com/en/java",
        "document": "Whether you are working on a new cutting edge app or simply ramping up on new technology, Java documentation has all the information you need to make your project a smashing success. Use the rich set of code samples, tutorials, developer guides, API documentation, and more to quickly develop your prototype and scale it up to a real world application."
    },
    {
        "link": "https://geeksforgeeks.org/learn-java-for-android-app-development-a-complete-guide",
        "document": "Java is one of the powerful general-purpose programming languages, created in 1995 by Sun Microsystems (now owned by Oracle). Java is Object-Oriented. However, it is not considered as pure object-oriented as it provides support for primitive data types (like int, char, etc). Java syntax is similar to C/C++. But Java does not provide low-level programming functionalities like pointers. Also, Java code is always written in the form of classes and objects.\n\nAndroid heavily relies on the Java programming language all the SDK s required to build for Android applications use the standard libraries of Java. If one is coming from a traditional programming background like C, C++, Java is easy to learn. So in this discussion, there is a complete guide to learning Java specifically considering Android App Development.\n\nHere’s a list highlighting reasons why Java is chosen for Android app development:\n• Established Ecosystem: Java has been the primary language for Android development since the platform’s inception, resulting in a vast ecosystem of libraries, frameworks, and tools specifically tailored for Android.\n• Wide Adoption and Support: Java is one of the most widely used programming languages globally, ensuring a large community of developers, extensive documentation, and abundant resources for learning and troubleshooting.\n• Mature Tooling: Android Studio, the official IDE for Android development, provides robust support for Java. It includes advanced features like code completion, debugging tools, and integration with the Android SDK, making development efficient and productive.\n• Performance: Java’s runtime performance is well-understood and optimized for Android devices. It offers predictable performance characteristics, making it suitable for developing high-performance applications.\n• Backward Compatibility: Java’s backward compatibility ensures that older Android devices can run apps developed with newer versions of the language, reducing fragmentation issues.\n• Enterprise Support: Many large enterprises and organizations have extensive Java codebases and expertise, making Java a natural choice for maintaining and extending existing Android applications..\n• Integration with Native Code: Java allows seamless integration with C/C++ code through the Java Native Interface (JNI), enabling developers to leverage existing native libraries for performance-critical tasks..\n• None – understand the core introduction of the Java programming language.\n• None The Hello World Example – The first Hello World program in Java.\n• None – Basic entry point of Java programming, which is writing the main class.\n• None – In Java, an identifier can be a class name, method name, variable name, or label.\n• None – Get to know what types of data types are supported by the Java programming language.\n• None – A variable is a name given to a memory location. It is the basic unit of storage in a program.\n• None – The scope of a variable is the part of the program where the variable is accessible.\n• None – A final variable in Java can be assigned a value only once. We can assign a value either in the declaration or later.\n• None – A programming language uses control statements to control the flow of execution of a program based on certain conditions.\n• None – The switch statement is a multi-way branch statement. It provides an easy way to dispatch execution to different parts of code based on the value of the expression.\n• None – Looping in programming languages is a feature that facilitates the execution of a set of instructions/functions repeatedly while some conditions are evaluated to be true.\n• None – For-each is another array traversing technique like for loop, while loop, do-while loop is introduced in Java5.\n• None – If the data types are compatible, then Java will perform the conversion automatically known as Automatic Type Conversion, and if not, then they need to be cast or converted explicitly.\n• None – Comments take part in making the program become more human-readable by placing the details of code involved and proper use of comments makes maintenance easier and finding bugs easier.\n• None – Java provides many types of operators which can be used according to the need. They are classified based on the functionality they provide.\n• None – String is a sequence of characters. In Java, objects of strings are immutable, which means constant and cannot be changed once created.\n• None – StringBuffer is a peer class of String that provides much of the functionality of strings.\n• None – The StringBuilder in Java represents a mutable sequence of characters.\n• None – The basic OOPs components Class and Object in the java programming language.\n• None Different ways to create objects in Java – Get to know the various ways of creating objects in Java.\n• None – It is the mechanism in Java by which one class is allowed to inherit the features(fields and methods) of another class.\n• None – Encapsulation is defined as the wrapping up of data under a single unit.\n• None – Data Abstraction is a property by virtue of which only the essential details are displayed to the user.\n• None – As the name suggests, access modifiers in Java help to restrict the scope of a class, constructor, variable, method, or data member.\n• None – ‘this’ is a reference variable that refers to the current object.\n• None – Overloading allows different methods to have the same name, but different signatures of methods.\n• None – Overriding is a feature that allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes.\n• None – Object class is present in the java.lang package. Every class in Java is directly or indirectly derived from the Object class.\n• None – Some classes can be made static in Java. Java supports Static Instance Variables, Static Methods, Static Block, and Static Classes.\n• None – An exception is an unwanted or unexpected event that occurs during the execution of a program i.e at run time.\n• None Types of Exception in Java with Examples – Java also allows users to define their own exceptions.\n• None – Like a class, an interface can have methods and variables, but the methods declared in an interface are by default abstract.\n• None – All methods in an interface are public, even if we do not specify public with method names. Also, data fields are public static final even if we do not mention them in field names.\n• None Access specifiers for classes or interfaces in Java – Methods and data members of a class/interface can have one of the following four access specifiers.\n• None – Java, a separate keyword abstract is used to make a class abstract.\n• None Difference between Abstract Class and Interface in Java – Get to know the differences between the interfaces and abstract classes.\n• None – It is an inner class without a name and for which only a single object is created.\n• None – ArrayList is a part of the collection framework and is present in the java.util package. It provides us with dynamic arrays in Java.\n• None – It stores the data in (Key, Value) pairs, and you can access it via an index of another type.\n• None – Naming conventions must be followed while developing software in Java for good maintenance and readability of code.\n• None – Generics mean parameterized types. The idea is to allow types ( Ingers, strings, … etc, and user-defined types) to be a parameter for methods, classes, and interfaces.\n• None – Annotations are used to provide supplemental information about a program.\n• None – Lambda expressions basically express instances of functional interfaces (An interface with a single abstract method is called a functional interface.\n\nJava is fundamental for Android app development, providing reliability, versatility, and a robust support network. It ensures consistent performance across diverse devices, empowering developers to innovate effectively in creating impactful applications. So, if you are looking for the complete guide for Java for Android development, then this tutorial is give all the resource that will help you to learn Java fundamental for Android development.\n\nWhat are the prerequisites for learning Java for Android app development?\n\nWhat is Java, and why is it important for Android app development?\n\nHow long does it take to learn Java for Android development?\n\nIs learning Java for Android development still relevant with the rise of Kotlin?"
    },
    {
        "link": "https://developer.android.com/develop",
        "document": "You use a game engine for most of your game design and development, but you still need to use Android tools to get the job done."
    },
    {
        "link": "https://docs.oracle.com/javase/tutorial",
        "document": "The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't take advantage of improvements introduced in later releases and might use technology no longer available.\n\nSee Dev.java for updated tutorials taking advantage of the latest releases.\n\nSee Java Language Changes for a summary of updated language features in Java SE 9 and subsequent releases.\n\nSee JDK Release Notes for information about new features, enhancements, and removed or deprecated options for all JDK releases.\n\nThe Java Tutorials are practical guides for programmers who want to use the Java programming language to create applications. They include hundreds of complete, working examples, and dozens of lessons. Groups of related lessons are organized into \"trails\".\n• Getting Started — An introduction to Java technology and lessons on installing Java development software and using it to create a simple program.\n• Learning the Java Language — Lessons describing the essential concepts and features of the Java Programming Language.\n• Essential Java Classes — Lessons on exceptions, basic input/output, concurrency, regular expressions, and the platform environment.\n• Collections — Lessons on using and extending the Java Collections Framework.\n• Date-Time APIs — How to use the pages to write date and time code.\n• Deployment — How to package applications and applets using JAR files, and deploy them using Java Web Start and Java Plug-in.\n• Preparation for Java Programming Language Certification — List of available training and tutorial resources.\n• Creating a GUI with Swing — A comprehensive introduction to GUI creation on the Java platform.\n\nThese trails are available in book form as. To buy this book, refer to the box to the right.\n\nThese trails and lessons are only available as web pages.\n• Custom Networking — An introduction to the Java platform's powerful networking features.\n• The Extension Mechanism — How to make custom APIs available to all applications running on the Java platform.\n• Full-Screen Exclusive Mode API — How to write applications that more fully utilize the user's graphics hardware.\n• Generics — An enhancement to the type system that supports operations on objects of various types while providing compile-time type safety. Note that this lesson is for advanced users. The Java Language trail contains a Generics lesson that is suitable for beginners.\n• Internationalization — An introduction to designing software so that it can be easily adapted (localized) to various languages and regions.\n• JDBC Database Access — Introduces an API for connectivity between the Java applications and a wide range of databases and data sources.\n• JMX— Java Management Extensions provides a standard way of managing resources such as applications, devices, and services.\n• JNDI— Java Naming and Directory Interface enables accessing the Naming and Directory Service such as DNS and LDAP.\n• Reflection — An API that represents (\"reflects\") the classes, interfaces, and objects in the current Java Virtual Machine.\n• RMI — The Remote Method Invocation API allows an object to invoke methods of an object running on another Java Virtual Machine.\n• Security — Java platform features that help protect applications from malicious software.\n• Sockets Direct Protocol — How to enable the Sockets Direct Protocol to take advantage of InfiniBand.\n• Sound — An API for playing sound data from applications.\n• 2D Graphics — How to display and print 2D graphics in applications."
    },
    {
        "link": "https://developer.android.com/guide/components/fundamentals",
        "document": "Android apps can be written using Kotlin, the Java programming language, and C++ languages. The Android SDK tools compile your code along with any data and resource files into an APK or an Android App Bundle.\n\nAn Android package, which is an archive file with an suffix, contains the contents of an Android app required at runtime, and it is the file that Android-powered devices use to install the app.\n\nAn Android App Bundle, which is an archive file with an suffix, contains the contents of an Android app project, including some additional metadata that isn't required at runtime. An AAB is a publishing format and can't be installed on Android devices. It defers APK generation and signing to a later stage.\n\nWhen distributing your app through Google Play, for example, Google Play's servers generate optimized APKs that contain only the resources and code that are required by the particular device requesting installation of the app.\n\nEach Android app lives in its own security sandbox, protected by the following Android security features:\n• The Android operating system is a multi-user Linux system in which each app is a different user.\n• By default, the system assigns each app a unique Linux user ID, which is used only by the system and is unknown to the app. The system sets permissions for all the files in an app so that only the user ID assigned to that app can access them.\n• Each process has its own virtual machine (VM), so an app's code runs in isolation from other apps.\n• By default, every app runs in its own Linux process. The Android system starts the process when any of the app's components need to be executed, and then shuts down the process when it's no longer needed or when the system must recover memory for other apps.\n\nThe Android system implements the principle of least privilege. That is, each app, by default, has access only to the components that it requires to do its work and no more. This creates a very secure environment in which an app can't access parts of the system it is not given permission for.\n\nHowever, there are ways for an app to share data with other apps and for an app to access system services:\n• It's possible to arrange for two apps to share the same Linux user ID, in which case they are able to access each other's files. To conserve system resources, apps with the same user ID can also arrange to run in the same Linux process and share the same VM. The apps must also be signed with the same certificate.\n• An app can request permission to access device data such as the device's location, camera, and Bluetooth connection. The user has to explicitly grant these permissions. For more information about permissions, see Permissions on Android.\n\nThe rest of this document introduces the following concepts:\n• The core framework components that define your app.\n• The manifest file in which you declare the components and the required device features for your app.\n• Resources that are separate from the app code and that let your app gracefully optimize its behavior for a variety of device configurations.\n\nApp components are the essential building blocks of an Android app. Each component is an entry point through which the system or a user can enter your app. Some components depend on others.\n\nThere are four types of app components:\n\nEach type serves a distinct purpose and has a distinct lifecycle that defines how a component is created and destroyed. The following sections describe the four types of app components.\n\nAn activity is the entry point for interacting with the user. It represents a single screen with a user interface. For example, an email app might have one activity that shows a list of new emails, another activity to compose an email, and another activity for reading emails. Although the activities work together to form a cohesive user experience in the email app, each one is independent of the others. A different app can start any one of these activities if the email app allows it. For example, a camera app might start the activity in the email app for composing a new email to let the user share a picture. An activity facilitates the following key interactions between system and app:\n• Keeping track of what the user currently cares about—what is on-screen—so that the system keeps running the process that is hosting the activity.\n• Knowing which previously used processes contain stopped activities the user might return to and prioritizing those processes more highly to keep them available.\n• Helping the app handle having its process killed so the user can return to activities with their previous state restored.\n• Providing a way for apps to implement user flows between each other, and for the system to coordinate these flows. The primary example of this is sharing. You implement an activity as a subclass of the class. For more information about the class, see Introduction to activities. A service is a general-purpose entry point for keeping an app running in the background for all kinds of reasons. It is a component that runs in the background to perform long-running operations or to perform work for remote processes. A service does not provide a user interface. For example, a service might play music in the background while the user is in a different app, or it might fetch data over the network without blocking user interaction with an activity. Another component, such as an activity, can start the service and let it run or bind to it to interact with it. There are two types of services that tell the system how to manage an app: started services and bound services. Started services tell the system to keep them running until their work is completed. This might be to sync some data in the background or play music even after the user leaves the app. Syncing data in the background or playing music represent different types of started services, which the system handles differently:\n• Music playback is something the user is directly aware of, and the app communicates this to the system by indicating that it wants to be in the foreground, with a notification to tell the user that it is running. In this case, the system prioritizes keeping that service's process running, because the user has a bad experience if it goes away.\n• A regular background service is not something the user is directly aware of, so the system has more freedom in managing its process. It might let it be killed, restarting the service sometime later, if it needs RAM for things that are of more immediate concern to the user. Bound services run because some other app (or the system) has said that it wants to make use of the service. A bound service provides an API to another process, and the system knows there is a dependency between these processes. So if process A is bound to a service in process B, the system knows that it needs to keep process B and its service running for A. Further, if process A is something the user cares about, then it knows to treat process B as something the user also cares about. Because of their flexibility, services are useful building blocks for all kinds of higher-level system concepts. Live wallpapers, notification listeners, screen savers, input methods, accessibility services, and many other core system features are all built as services that applications implement and the system binds to when they run. A service is implemented as a subclass of . For more information about the class, see the Services overview. Note: If your app targets Android 5.0 (API level 21) or higher, use the class to schedule actions. JobScheduler has the advantage of conserving battery by optimally scheduling jobs to reduce power consumption and by working with the Doze API. For more information about using this class, see the reference documentation. A broadcast receiver is a component that lets the system deliver events to the app outside of a regular user flow so the app can respond to system-wide broadcast announcements. Because broadcast receivers are another well-defined entry into the app, the system can deliver broadcasts even to apps that aren't currently running. So, for example, an app can schedule an alarm to post a notification to tell the user about an upcoming event. Because the alarm is delivered to a in the app, there is no need for the app to remain running until the alarm goes off. Many broadcasts originate from the system, like a broadcast announcing that the screen is turned off, the battery is low, or a picture is captured. Apps can also initiate broadcasts, such as to let other apps know that some data is downloaded to the device and is available for them to use. Although broadcast receivers don't display a user interface, they can create a status bar notification to alert the user when a broadcast event occurs. More commonly, though, a broadcast receiver is just a gateway to other components and is intended to do a very minimal amount of work. For instance, a broadcast receiver might schedule a to perform some work based on an event using . Broadcast receivers often involve apps interacting with each other, so it's important to be aware of the security implications when setting them up. A broadcast receiver is implemented as a subclass of , and each broadcast is delivered as an object. For more information, see the class. A content provider manages a shared set of app data that you can store in the file system, in a SQLite database, on the web, or on any other persistent storage location that your app can access. Through the content provider, other apps can query or modify the data, if the content provider permits it. For example, the Android system provides a content provider that manages the user's contact information. Any app with the proper permissions can query the content provider, such as using , to read and write information about a particular person. It is tempting to think of a content provider as an abstraction on a database, because there is a lot of API and support built in to them for that common case. However, they have a different core purpose from a system-design perspective. To the system, a content provider is an entry point into an app for publishing named data items, identified by a URI scheme. Thus, an app can decide how it wants to map the data it contains to a URI namespace, handing out those URIs to other entities which can in turn use them to access the data. There are a few particular things this lets the system do in managing an app:\n• Assigning a URI doesn't require that the app remain running, so URIs can persist after their owning apps exit. The system only needs to make sure that an owning app is still running when it retrieves the app's data from the corresponding URI.\n• These URIs also provide an important fine-grained security model. For example, an app can place the URI for an image it has on the clipboard, but leave its content provider locked up so that other apps cannot freely access it. When a second app attempts to access that URI on the clipboard, the system can let that app access the data using a temporary URI permission grant so that it accesses the data only behind that URI, and nothing else in the second app. Content providers are also useful for reading and writing data that is private to your app and not shared. A content provider is implemented as a subclass of and must implement a standard set of APIs that enable other apps to perform transactions. For more information, see the Content providers developer guide.\n\nA unique aspect of the Android system design is that any app can start another app’s component. For example, if you want the user to capture a photo with the device camera, there's probably another app that does that—and your app can use it instead of developing an activity to capture a photo yourself. You don't need to incorporate or even link to the code from the camera app. Instead, you can start the activity in the camera app that captures a photo. When complete, the photo is even returned to your app so you can use it. To the user, it seems as if the camera is actually a part of your app.\n\nWhen the system starts a component, it starts the process for that app, if it's not already running, and instantiates the classes needed for the component. For example, if your app starts the activity in the camera app that captures a photo, that activity runs in the process that belongs to the camera app, not in your app's process. Therefore, unlike apps on most other systems, Android apps don't have a single entry point: there's no function.\n\nBecause the system runs each app in a separate process with file permissions that restrict access to other apps, your app can't directly activate a component from another app. However, the Android system can. To activate a component in another app, you deliver a message to the system that specifies your intent to start a particular component. The system then activates the component for you.\n\nAn asynchronous message called an intent activates three of the four component types: activities, services, and broadcast receivers. Intents bind individual components to each other at runtime. You can think of them as the messengers that request an action from other components, whether the component belongs to your app or another.\n\nAn intent is created with an object, which defines a message to activate either a specific component (an explicit intent) or a specific type of component (an implicit intent).\n\nFor activities and services, an intent defines the action to perform, such as to view or send something, and might specify the URI of the data to act on, among other things that the component being started might need to know.\n\nFor example, an intent might convey a request for an activity to show an image or to open a web page. In some cases, you can start an activity to receive a result, in which case the activity also returns the result in an . You can also issue an intent to let the user pick a personal contact and have it returned to you. The return intent includes a URI pointing to the chosen contact.\n\nFor broadcast receivers, the intent defines the broadcast announcement. For example, a broadcast to indicate that the device battery is low includes only a known action string that indicates battery is low.\n\nUnlike activities, services, and broadcast receivers, content providers are activated when targeted by a request from a . The content resolver handles all direct transactions with the content provider, and the component performing transactions with the provider calls methods on the object. This leaves a layer of abstraction for security reasons between the content provider and the component requesting information.\n\nThere are separate methods for activating each type of component:\n• You can start an activity or give it something new to do by passing an to or, when you want the activity to return a result, .\n• On Android 5.0 (API level 21) and higher, you can use the class to schedule actions. For earlier Android versions, you can start a service or give new instructions to an ongoing service by passing an to . You can bind to the service by passing an to .\n• You can initiate a broadcast by passing an to methods such as or .\n• You can perform a query to a content provider by calling on a .\n\nFor more information about using intents, see the Intents and Intent Filters document. The following documents provide more information about activating specific components: Introduction to activities, Services overview, , and Content providers.\n\nBefore the Android system can start an app component, the system must know that the component exists by reading the app's manifest file, . Your app declares all its components in this file, which is at the root of the app project directory.\n\nThe manifest does a number of things in addition to declaring the app's components, such as the following:\n• Identifies any user permissions the app requires, such as internet access or read-access to the user's contacts.\n• Declares the minimum API level required by the app, based on which APIs the app uses.\n• Declares hardware and software features used or required by the app, such as a camera, Bluetooth services, or a multitouch screen.\n• Declares API libraries the app needs to be linked against (other than the Android framework APIs), such as the Google Maps library.\n\nThe primary task of the manifest is to inform the system about the app's components. For example, a manifest file can declare an activity as follows:\n\nIn the element, the attribute points to resources for an icon that identifies the app.\n\nIn the element, the attribute specifies the fully qualified class name of the subclass, and the attribute specifies a string to use as the user-visible label for the activity.\n\nYou must declare all app components using the following elements:\n\nActivities, services, and content providers that you include in your source but don't declare in the manifest aren't visible to the system and, consequently, can never run. However, broadcast receivers can either be declared in the manifest or created dynamically in code as objects and registered with the system by calling .\n\nFor more about how to structure the manifest file for your app, see the App manifest overview.\n\nAs discussed in the Activate components section, you can use an to start activities, services, and broadcast receivers. You do this by explicitly naming the target component, using the component class name, in the intent. You can also use an implicit intent, which describes the type of action to perform and, optionally, the data you want to perform the action on. An implicit intent lets the system find a component on the device that can perform the action and start it. If there are multiple components that can perform the action described by the intent, the user selects which one to use.\n\nCaution: If you use an intent to start a , make sure that your app is secure by using an explicit intent. Using an implicit intent to start a service is a security hazard, because you can't be certain what service responds to the intent and the user can't see which service starts. Beginning with Android 5.0 (API level 21), the system throws an exception if you call with an implicit intent. Don't declare intent filters for your services.\n\nThe system identifies the components that can respond to an intent by comparing the intent received to the intent filters provided in the manifest file of other apps on the device.\n\nWhen you declare an activity in your app's manifest, you can optionally include intent filters that declare the capabilities of the activity so it can respond to intents from other apps. You do this by adding an element as a child of the component's declaration element.\n\nFor example, if you build an email app with an activity for composing a new email, you can declare an intent filter to respond to \"send\" intents to send a new email, as shown in the following example:\n\nIf another app creates an intent with the action and passes it to , the system might start your activity so the user can draft and send an email.\n\nFor more about creating intent filters, see the Intents and Intent Filters document.\n\nThere are a variety of devices powered by Android, and not all of them provide the same features and capabilities. To prevent your app from being installed on devices that lack features needed by your app, it's important that you clearly define a profile for the types of devices your app supports by declaring device and software requirements in your manifest file.\n\nMost of these declarations are informational only. The system doesn't read them, but external services such as Google Play do read them to provide filtering for users when they search for apps from their device.\n\nFor example, suppose your app requires a camera and uses APIs introduced in Android 8.0 (API level 26). You must declare these requirements. The values for and are set in your app module's file:\n\nNote: Don't set and directly in the manifest file, since they are overwritten by Gradle during the build process. For more information, see Specify API level requirements.\n\nYou declare the camera feature in your app's manifest file:\n\nWith the declarations shown in these examples, devices that do not have a camera or have an Android version lower than 8.0 can't install your app from Google Play. However, you can also declare that your app uses the camera, but does not require it. To do so, you set the attribute to , check at runtime whether the device has a camera, and disable any camera features as needed.\n\nMore information about how you can manage your app's compatibility with different devices is provided in the Device compatibility overview.\n\nAn Android app is composed of more than just code. It requires resources that are separate from the source code, such as images, audio files, and anything relating to the visual presentation of the app. For example, you can define animations, menus, styles, colors, and the layout of activity user interfaces with XML files.\n\nUsing app resources makes it easy to update various characteristics of your app without modifying code. Providing sets of alternative resources lets you optimize your app for a variety of device configurations, such as different languages and screen sizes.\n\nFor every resource that you include in your Android project, the SDK build tools define a unique integer ID, which you can use to reference the resource from your app code or from other resources defined in XML. For example, if your app contains an image file named (saved in the directory), the SDK tools generate a resource ID named . This ID maps to an app-specific integer, which you can use to reference the image and insert it in your user interface.\n\nOne of the most important aspects of providing resources separate from your source code is the ability to provide alternative resources for different device configurations.\n\nFor example, by defining UI strings in XML, you can translate the strings into other languages and save those strings in separate files. Then Android applies the appropriate language strings to your UI based on a language qualifier that you append to the resource directory's name, such as for French string values, and the user's language setting.\n\nAndroid supports many qualifiers for your alternative resources. The qualifier is a short string that you include in the name of your resource directories to define the device configuration those resources are used for.\n\nFor example, you can create different layouts for your activities depending on the device's screen orientation and size. When the device screen is in portrait (tall) orientation, you might want a layout with buttons arranged vertically, but when the screen is in landscape (wide) orientation, you might want the buttons aligned horizontally. To change the layout depending on the orientation, you can define two layouts and apply the appropriate qualifier to each layout's directory name. Then, the system automatically applies the appropriate layout depending on the current device orientation.\n\nFor more information about the different kinds of resources you can include in your application and how to create alternative resources for different device configurations, read the App resources overview. To learn more about best practices and designing robust, production-quality apps, see the Guide to app architecture.\n\nTo learn Android development using videos and code tutorials, see the Developing Android Apps with Kotlin Udacity course."
    },
    {
        "link": "https://developer.apple.com/swift",
        "document": "Swift is the result of the latest research on programming languages, combined with decades of experience building software that runs on billions of devices. Named parameters are expressed in a clean syntax that makes APIs in Swift easy to read and maintain. Even better, you don’t even need to type semi-colons. Inferred types make code cleaner and less prone to mistakes, while modules eliminate headers and provide namespaces. To best support international languages and emoji, strings are Unicode-correct and use a UTF-8-based encoding to optimize performance for a wide variety of use cases. Memory is managed automatically using tight, deterministic reference counting, keeping memory usage to a minimum without the overhead of garbage collection. You can even write concurrent code with simple, built-in keywords that define asynchronous behavior, making your code more readable and less error prone.\n\nDeclare new types with modern, straightforward syntax. Provide default values for instance properties and define custom initializers.\n\nAdd functionality to existing types using extensions, and cut down on boilerplate code with custom string interpolations.\n\nQuickly extend your custom types to take advantage of powerful language features, such as automatic JSON encoding and decoding.\n\nThese forward-thinking concepts result in a language that’s fun and easy to use.\n\nSwift has many other features to make your code more expressive:\n• Generics that are powerful and simple to use\n• Fast and concise iteration over a range or collection\n• Enums can have payloads and support pattern matching\n\nSwift eliminates entire classes of unsafe code. Variables are always initialized before use, arrays and integers are checked for overflow, memory is automatically managed, and potential data races can be spotted at compile-time. Syntax is tuned to make it easy to define your intent — for example, simple three-character keywords define a variable ( var ) or constant ( let ). And Swift heavily leverages value types, especially for commonly used types like Arrays and Dictionaries. This means that when you make a copy of something with that type, you know it won’t be modified elsewhere.\n\nAnother safety feature is that by default Swift objects can never be nil. In fact, the Swift compiler will stop you from trying to make or use a nil object with a compile-time error. This makes writing code much cleaner and safer, and prevents a huge category of runtime crashes in your apps. However, there are cases where nil is valid and appropriate. For these situations Swift has an innovative feature known as optionals. An optional may contain nil, but Swift syntax ensures you to safely deal with it using the ? syntax to indicate to the compiler you understand the behavior and will handle it safely.\n\nUse optionals when you might have an instance to return from a function, or you might not.\n\nFeatures such as optional binding, optional chaining, and nil coalescing let you work safely and efficiently with optional values.\n\nFrom its earliest conception, Swift was built to be fast. Using the incredibly high-performance LLVM compiler technology, Swift code is transformed into optimized machine code that gets the most out of modern hardware. The syntax and standard library have also been tuned to make the most obvious way to write your code also perform the best whether it runs in the watch on your wrist or across a cluster of servers.\n\nSwift is a successor to the C, C++, and Objective-C languages. It includes low-level primitives such as types, flow control, and operators. It also provides object-oriented features such as classes, protocols, and generics.\n\nSwift can open doors to the world of coding. In fact, it was designed to be anyone’s first programming language, whether you’re still in school or exploring new career paths. For educators, Apple created free curriculum to teach Swift both in and out of the classroom. First-time coders can download Swift Playground — an app for iPad and Mac that makes getting started with Swift code interactive and fun.\n\nAspiring app developers can access free courses to learn to build their first apps in Xcode. And Apple Stores around the world host Today at Apple Coding & Apps sessions where you can get practical experience with Swift code.\n\nLearn more about Swift education resources from Apple\n\nSwift is developed in the open at Swift.org, with source code, a bug tracker, forums, and regular development builds available for everyone. This broad community of developers, both inside Apple as well as hundreds of outside contributors, work together to make Swift even more amazing. There is an even broader range of blogs, podcasts, conferences, and meetups where developers in the community share their experiences of how best to use Swift. Swift already supports all Apple platforms, Linux, and Windows, with community members actively working to port to even more platforms. With SourceKit-LSP, the community has integrated Swift support into a wide-variety of developer tools. We’re excited to see more ways in which Swift makes software safer and faster, while also making programming more fun. Swift is also being used for a new class of modern server applications. It’s perfect for use in server apps that need runtime safety, compiled performance, and a small memory footprint. To steer the direction of Swift for developing and deploying server applications, the community formed the Swift Server work group. The first product of this effort was SwiftNIO, a cross-platform asynchronous event-driven network application framework for high performance protocol servers and clients. It serves as the foundation for additional server-oriented tools and technologies, including logging, metrics, and database drivers. To learn more about the open source Swift community and the Swift Server work group, visit Swift.org.\n\nMuch like Swift Playground for iPad and Mac, playgrounds in Xcode make writing Swift code incredibly simple and fun. Type a line of code and the result appears immediately. You can then Quick Look the result from the side of your code, or pin that result directly below. The result view can display graphics, lists of results, or graphs of a value over time. You can open the Timeline Assistant to watch a complex view evolve and animate, great for experimenting with new UI code, or to play an animated SpriteKit scene as you code it. When you’ve perfected your code in the playground, simply move that code into your project. Swift is also interactive when you use it in Terminal or to the Xcode LLDB debugging console.\n\nSwift Package Manager is a cross-platform tool for building, running, testing, and packaging your Swift libraries and executables. Swift packages are the best way to distribute libraries and source code to the Swift community. Configuration of packages is written in Swift itself, making it easy to configure targets, declare products, and manage package dependencies. Swift packages can also include custom commands that help build your projects and provide additional tooling. Swift Package Manager itself is actually built with Swift and included in the Swift open source project as a package.\n\nYou can create an entirely new application with Swift today, or begin using Swift code to implement new features and functionality in your app. Swift code coexists along side your existing Objective-C and C++ files in the same project, with access to your Objective-C and C++ APIs, making it easy to adopt."
    },
    {
        "link": "https://forums.swift.org/t/starting-a-new-project-best-coding-practices/72057",
        "document": "I'm newly into coding with Swift and I have very little previous coding experience with html in my teenage years and some adult years. I've always wanted to be a software engineer but time and money have always been something I wasn't good at managing anyways... my question is kinda simple yet maybe complicated. In the past when I would code with say html we would simply open up a notepad document type out our code and save the file as .html and essentially it would be an html document you could upload. As I'm learning Swift in Xcode playgrounds following through The Swift Programming Language book I'm learning all types of coding and such but I'm not getting that BUILDING something vibe at all. When I open Xcode and start say a new project with the templates my screen is filled with pages like ViewController and AppDelegate etc and this makes the idea of creating a new project of my own with what I learned more daunting. I understand all this stuff is neccessary for app development but are there any guides or books you can suggest that essentially explain what all these things are? Or is there a way I can still build apps without knowing what any of this stuff is by essentially using what I learn from the book? I feel overwhelmed because I know I'm not going to learn everything and just have it memorized from the book but I have very little clue to where I should even start typing first. Also for The Swift Language guide should I simply just be reading it or should I be typing out the examples and exploring the principles in more detail for myself? I'm thinking that I would feel like I learn more if I could build something and essentially focus on learning what I need to do the job that I need done cause some of this stuff seems like stuff I may never use. Thanks for any insight.\n\nI feel overwhelmed because I know I'm not going to learn everything and just have it memorized from the book but I have very little clue to where I should even start typing first. If you're looking for something a bit more interactive, it might be worth trying Apple's Swift Playgrounds app (available on Mac and iPad) - ‎Swift Playgrounds on the Mac App Store It includes professionally-written, interactive tutorials about learning to program in general and about creating apps for Apple platforms specifically. They're translated in to many languages as well. And it's free, so no harm in trying it out in addition to other resources.\n\nI'd distinguish 3 main directions that in general are similar between languages and platforms.\n• The Apple's ecosystem (substitute with any framework to generalize). In order to thrive, you need to cover this three things together, which might feel overwhelming as there are a lot of things to look out for. You start with the language itself, free from any other entities, such as Xcode and Apple's SDKs. You learn language, write console apps, compile them from the terminal, etc - write as much as possible code, from book, from head, whatever - you need this sensation of what you're reading in the terms of execution. That will give you the feeling of the app, how it starts, how you can control it. Your apps at this point will be limited to standard input & output, but that's OK, core concepts are highly transferable. Your goal at this stage is to get comfortable with the language and its basic concepts - classes & structs (difference between them), protocols, control flows, etc. More advanced topics, like concurrency, generics, and others you also read through, but right now there is no urgency to understand them fluently. Once the language is more comfortable for you, you start with the Apple's platforms. I suggest as an entry point this tutorials - Introducing SwiftUI | Apple Developer Documentation. In that way, you will start making apps with some visible result, which is important to \"fuel up\" yourself. These tutorials will give you the basic understanding how to create apps for iOS, allowing to then go into exploration. Now as you get yourself more confident with foundational ideas, you need to get deeper at them. Choose some project idea (app you'd like to have) and start developing it. You will face tasks you are not yet know how to approach, and to find a solution you'd better advise to the docs (for example, how SwiftUI state management works, or how to work with API requests). That will allow cover more details. At the same time, you will deepen language understanding: you'll face generics and concurrency, for example, and will see that you need to revisit them with more knowledge of the language. Finally, it is time to go and get to know more purely programming concepts, by\n• Learning algorithms (Grokking Algorithms is one of the best to start with).\n• \"The Pragmatic Programmer\" book for almost everything I also highly suggest learning basics of C language. The deal with it is that it, first of all, really simple (not to confuse with easy or shallow), but exposes you to the some concepts, mostly memory-related, that is hidden in many other languages, allowing you to better understand what's going on here. Then, C has a long history and in some way a huge part of languages are compatible with it, including Swift, of course. It also has a lot of open source libraries that might be useful. The last point for learning is that, despite huge drift off the Objective-C, you still can find it useful or required (even though rarely) in development for Apple's platforms, and while there is almost no similarities between ObjC and C in syntax, catching up ObjC is easier when you know C.\n\nI feel the same -- even after years! One simplification for learning to be a software engineer is to focus on writing Swift packages and stay away from UI frameworks; that increases the ratio of coding to complying. Otherwise, for practice, focus on Apple sample code: it takes a working happy path to some achievable but interesting goal. For perspective, Apple's Books app has free books for teaching Swift (with separate teaching guides). The Swift Language Guide has to be read once to see the language and issues, but then used mainly as a reference. For a locally readable/searchable form, get https://github.com/apple/swift-book Apple materials are minimal and polished; they err on the side of leaving out complications (to avoid negative feedback at scale). Don't be surprised to stumble when off the happy path, and to have big gaps between the big picture and the problem at hand. Into these gaps flows a ton of community materials and practices that vary in quality and incentives but most of all in their topology -- in what they assume you know -- making it hard to find a good match. So if you can describe specifically the problem, usually searching will give an answer. Otherwise, to master a sub-domain, take one of the more ordered paths from a well-regarded author, e.g., from Paul Hudson's series HackingWithSwift. In any case, for each example, aim to understand it loosely inside-out:\n• The code: how it works, and how to change it to tweak behavior\n• The component: who calls it when and why\n• The product: what bits are produced and packaged where \"Loosely\": I make the most progress by summarizing the main lessons and outstanding (deferred) questions for each example. Otherwise I won't realize the point of the example, or I keep investigating side-issues without guidance, and then stall. All that said, I'd recommend Java over Swift as a first programming language. Both Apple and Swift are much more ambitious in the variety of contexts and use-cases they address. Swift has a number of subtle but pervasive aspects that are unique to the language (value types, specialized generics, protocols, discriminated unions, concurrency, ownership). \"Progressive disclosure\" holds out hope that new developers can ignore the hard stuff for a time, but somehow you always feel the dragon's breath. Layer on that the variety of Apple devices, Swift's reach into Linux and embedded, and the iron cage of Xcode, and you end up where it's the experts who know best how little they know. And because (for the most part) you can't do in Java or Python or Javascript all the magic you can in Swift on Apple, your hard-earned wisdom is not transferable.\n\nThank you for the response but my entire goal is strictly to develop for Apple platforms. I'm not looking for anything transferrable just looking to specialize in one aspect completely. Anyways I recently had a mental breakthrough after a few days off. I woke up one day and my brain just started seeing the world as \"code able\" I can look at something like a bottle of water and start to formulate the ideas around how I would create that object with code language. So I'm feeling less overwhelmed and more excited to start creating my ideas. I'm going to grind out reading the language guide and start developing ideas from there."
    },
    {
        "link": "https://techaheadcorp.com/blog/swift-programming-for-ios-app-development",
        "document": "Swift programming for iOS apps is Apple’s brainchild and the magic behind countless apps we can’t live without today. With each line of code you write, you’ll unlock doors leading to amazing creations.\n\nWe’ll start with understanding Swift’s essence before venturing through setting up your environment and some example sample apps and exploring fundamental concepts. From there, we get deeper into object-oriented principles and advanced topics while building an actual iOS app!\n\nBut the journey doesn’t end there. We’ll also guide you on best practices.\n• Firstly, its syntax is clear and concise. This makes coding less error-prone and more maintainable.\n• The safety features of Swift help prevent common programming errors. For example, variables must be initialized before use.\n• Last but not least, Swift was designed with performance in mind. It often outperforms other languages when it comes to speed.\n\nThis combination of power, simplicity, and security makes learning Swift a great investment for any aspiring app developer. Now, let’s get into the specifics of what makes this language so unique.\n\nIn numerous programming languages, null or not-initialized values can cause system failures during runtime. But Swift uses optionals to handle the absence of a value – making your code safer without extra hassle on your part.\n\nTo learn Swift and create iOS apps, you must acquire Xcode—Apple’s free IDE for Swift programming—from the Mac App Store. You can acquire Xcode, Apple’s IDE for Swift programming, at no cost by downloading it from the Mac App Store.\n\nXcode supplies all necessary components required for the programming environment for constructing, creating, and troubleshooting an iOS application. But first things first: make sure your macOS is up-to-date because Xcode needs the latest version of macOS to run smoothly.\n\nAfter ensuring that your MacOS is updated, go ahead and download Xcode from the Mac App Store. This could take some time, depending on your internet speed, as it’s quite a large file – but trust me, it’s worth every byte.\n\nFamiliarizing Yourself With The Interface\n\nThe next step after installation is getting familiar with its interface. If you’re feeling overwhelmed by all those panels and buttons – don’t worry. Here are three key areas:\n• Navigators Area: Located at the left-most part of the screen where files & resources are organized.\n• Editors Area: Middle section used for coding or designing user interfaces.\n• Utility Area: Right-hand side panel that gives more info about selected items or helps configure them.\n\nThis setup process will help kickstart your journey into developing iOS apps using Swift.\n\nSwift programming revolves around a few core concepts that you need to grasp. These fundamentals, once understood, let you start creating your iOS apps.\n\nIn Swift, we use variables and constants to store data. Variables are declared using the ‘var’ keyword and can change their value over time. On the other hand, constants utilize the ‘let’ keyword and hold values that stay constant throughout.\n\nThe next concept is data types. In the Swift code, each variable or constant has an associated type such as Integer (‘Int’), Double-precision floating-point number (‘Double’), Boolean (‘Bool’), or String.\n\nMoving on to operators – these symbols help us perform calculations in our code. Basic ones include addition (+), subtraction (-), multiplication (*), and division (/), along with comparison operators like equal (==) or not equal (.=).\n\nSwift is an expressive language that shines when we apply the principles of object-oriented programming (OOP). Let’s dive into classes, objects, inheritance, and polymorphism.\n\nThe Power of Classes and Objects\n\nIn Swift, a class is like a blueprint for creating objects. Each object created is a specific instance of the class blueprint. They hold unique values but share characteristics defined by their class. Apple’s official documentation offers more insights on this topic.\n\nA key benefit to OOP in the Swift language is inheritance and developing efficient, swift code. It enables you to construct fresh classes from existing ones without reproducing code, thereby saving time and energy. The Swift Language Guide goes deeper into this concept.\n\nLast but not least, let’s discuss polymorphism. This fancy term means that one name can have many forms – giving us flexibility while coding. Check out the Ray Wenderlich guide on Polymorphism in Swift.\n\nDiving deeper into Swift, we encounter concepts that might seem intimidating but are actually what makes the language so powerful and versatile. We’ll start with optionals, a unique feature in Swift.\n\nThink of optionals as gift boxes – they may hold a value (the gift) or be empty. This is how optionals handle the absence of a value without causing errors, thus making your code safer.\n\nMoving on to closures. If functions were superheroes, closures would be their secret identities – unnamed versions doing similar tasks.\n\nProtocols, another core concept in Swift, act like checklists for classes and structures. Just like you need certain things before embarking on an adventure (say compass and map), protocols ensure your types have the necessary methods or properties defined.\n\nLast but not least: Error handling. Picture it as catching balls thrown at you unexpectedly – some you catch (handle) successfully; others slip through. That’s how error handling works – it catches unexpected situations gracefully to prevent crashes.\n\nNo one likes fluff when learning something new–we get it. So everything explained here isn’t just theory; these concepts form the bedrock of professional-grade iOS apps built using Swift daily at TechAhead. We don’t merely ‘know’ this stuff–we live it daily.\n\nBuilding Your First iOS App with Swift\n\nAre you ready to put your newfound knowledge of Swift into practice? Let’s dive straight in and learn swiftly to build a simple app. Be astounded at the speed of it all coming together. Follow these steps:\n\nThe first step is deciding what kind of app you want to create. It should be something manageable for beginners, like a calculator app, a basic note-taking exercise calorie calculator app, or a weather-tracking application.\n\nYour next move will involve designing your app’s user interface using Xcode’s Interface Builder. This tool lets you lay out graphical elements intuitively and allows connecting interface objects.\n\nThis is where the enchantment occurs. With our UI laid out, we start writing code that brings functionality to those buttons and text fields. Remember: functions are key players here.\n\nYou’ve done some coding; now let’s see it in action. Make sure every button works as expected by running tests within Xcode itself.\n\nNote: this journey may seem daunting at first, but remember, even seasoned coders once started right where you are today.\n\nIn the world of iOS app development, Swift programming language has emerged as a powerful tool. It is a robust and intuitive language developed by Apple for iOS, macOS, watchOS, and tvOS apps that’s fast, easy to use, and open source. With its safe design patterns and added modern features like automatic memory management, developers can create high-performing applications with less coding effort.\n\nA perfect example of an application you could develop using Swift is an Exercise Calorie Calculator App. This type of application requires precision in calculation algorithms, which Swift can handle effectively.\n\nWhy Choose TechAhead For Your Mobile Application Development?\n\nWith TechAhead, you’re not just getting a team of developers; you’re partnering with a company that values innovation, quality, and customer satisfaction above all else. So why wait? Let’s bring your iOS application idea to life!\n\nThe journey of learning Swift doesn’t end here. Let’s investigate some additional assets that will aid in furthering your comprehension.\n\nApple’s official Swift documentation is a great starting point. It provides comprehensive information about the language, and it’s kept up-to-date with new features.\n\nYou might find value in online courses on app development concepts like iOS 13 & Swift 5 – The Complete iOS App Development Bootcamp on Udemy. These types of platforms provide interactive video tutorials, helping to make complex concepts easier to understand.\n• If you prefer books over videos, check out “Swift Programming: The Big Nerd Ranch Guide”. This book offers practical exercises and clear explanations, making it an excellent resource for beginners.\n• Online communities, such as StackOverflow (Swift tag), can offer real-time assistance from experienced developers when you get stuck with code problems or need clarification on certain topics.\n• Last but not least, don’t forget about podcasts. Shows like “Swift by Sundell” can keep you updated on the latest trends and techniques in Swift programming.\n\nThe first rule of thumb for any developer using Swift programming language is always to use constants over variables whenever possible. This not only improves your code’s performance but also helps prevent bugs caused by unintended value changes.\n\nNaming conventions matter a lot, too. A clear and descriptive naming style makes your code more readable and maintainable. For instance, ‘userAge’ is a better variable name than just ‘age’, as it provides more context about what the variable represents.\n\nError handling is another crucial aspect to pay attention to while coding in Swift. Always anticipate potential errors and handle them gracefully with do-catch statements or optional chaining methods.\n• Avoid force unwrapping optionals unless you’re certain the optional contains a non-nil value.\n• Leverage generics effectively to make your code more flexible and reusable.\n• Maintain modularity in your app architecture, which can help improve both testing efforts and the readability of your project structure.\n\nIs Swift used for iOS app development?\n\nAbsolutely. Swift is Apple’s own language, specifically designed to build apps for its platforms like iOS, macOS, and watchOS.\n\nCan you write iOS apps in Swift?\n\nYes, you can. In fact, writing iOS apps in Swift is now the standard due to its simplicity and powerful features.\n\nWhich is better, XCode or Swift?\n\nThis isn’t a fair comparison as they serve different purposes. Xcode is an IDE where you use languages like Swift to develop applications.\n\nIs Swift better than Python?\n\nThe “better” choice depends on your project needs. But when it comes down to building native iOS apps, yes, Swift outshines Python.\n\nWe have covered Swift Programming for iOS App Development."
    },
    {
        "link": "https://medium.com/@spmandrus/basics-swift-best-practices-175c21631aad",
        "document": "Now that we’ve seen a few examples of what I consider to not be best practices and how I would approach the same concept, I’m going to provide some examples and additional tips to keep in mind while coding.\n\nSome of concepts behind why I recommend the following may be too advanced for beginners to understand right away.\n\nclasses and variables in Swift are some things most developers I’ve worked with seem to ignore. By utilizing these keywords, you can increase the performance of your app/program. [1]\n\nIf you are a beginner reading this, there is a caveat to using these keywords. You should only use on a class that will not be subclassed. Similarly, will restrict access to that variable.\n\nEven with the words of caution, I recommend always declaring a new class as initially; and change it later if you need to subclass it. This way you get in the habit of always adding the keyword to your classes — making it, and improving the overall performance of your app, second nature.\n\nOptionals in Swift are great. However, completely ignoring them and force unwrapping all the time is not a good habit to get into. Personally, I hate to see a chain of force unwrapped optionals.\n\nWhen dealing with optionals, you should almost always not force unwrap it. Instead use an statement, statement, or provide a default value in case the value is .\n\nAgain, if you are a beginner, I urge you to read up on statements so you can use them effectively. As a beginner in the past, I have misused a before. It can cause some adverse side effects.\n\nComments. I used to absolutely despise comments. I thought they were a waste of time and were blocking me from spending more time on learning. I also found that when they were not kept up to date, they would cause more harm then good. Even keeping them up to date posed a challenge since you may have needed to update them several times.\n\nWhile the last couple statements hold true, in my personal code, I always do my best to update a comment if I change a block of code relating to that comment. My future self always thanks me for this.\n\nOne of the reasons I disliked comments so much was because I found out I was doing them wrong. When someone would ask me to comment my code, I would make useless comments that have no business being comments; the code already explained it perfectly. Unfortunately, I was never told this was wrong, so my hatred for commenting grew.\n\nAn exaggerated example would be:\n\nThis type of commenting is worthless. You can clearly see what is happening without the comment.\n\nComments should explain why something is done the way it is, or they should be used to provide better insight into a complex block of code that may need a more detailed explanation. Swift code is expressive; full english sentences can be even more expressive. Another reason I suggest commenting your code is so when you come back to it a year from now, you may wonder, “Why did I do this in that order?”. By adding a comment explaining why something is done the way it is allows other developers (or your future self) to know why something was done a particular way."
    },
    {
        "link": "https://sevensquaretech.com/swift-app-development-best-practices",
        "document": "Swift is Apple’s official programming language designed, and it is to create smooth and reliable apps for iPhones,\n\n iPads, and other Apple devices.\n\nSwift app development is one of the best ways to build fast, secure, and user-friendly iOS applications.\n\niOS app performance plays a big role in user experience. Slow and buggy apps can frustrate users and hurt a\n\n business’s reputation.\n\nThe competition between Flutter and Swift to build iOS apps is not a close call as programmers prefer to use Swift\n\n because it is backed by Apple itself.\n\nIn this blog, learn how skilled Swift developers use the Swift programming language to create high-performance iOS\n\n apps for the best results.\n\nWith React, you can create modern web apps that meet the needs of today’s users, now and in the future.\n\nWhether you’re launching a new product, improving your website, or building a custom tool for your business, React\n\n makes sure your app performs at its best.\n\nIn this blog, we tried to explain how React is considered one of the best choices for modern web app development\n\n and why businesses prefer it."
    }
]