[
    {
        "link": "https://learn.microsoft.com/en-us/visualstudio/ide/create-csharp-winform-visual-studio?view=vs-2022",
        "document": "Tutorial: Create a Windows Forms app in Visual Studio with C#\n\nIn this tutorial, you create a simple C# application that has a Windows-based user interface (UI). The app has a button that changes the text of a label. This simple app has all the components used for more complicated Windows Forms programs.\n\nFirst, create a C# application project. The project type comes with all the template files you need to create your application.\n\nAfter you select your C# project template and name your project, Visual Studio opens a form for you. A form is a Windows user interface. Create a Hello World application by adding controls to the form. Then run the app.\n• If you don't see the Toolbox option, you can open it from the menu bar. Select View > Toolbox or Ctrl+Alt+X.\n• None Select the Pin icon to dock the Toolbox window.\n• None Select the Button control and then drag it onto the form.\n• None In the Properties window, locate Text, change the name from Button1 to , and then select Enter. If you don't see the Properties window, you can open it from the menu bar. Select View > Properties Window or F4.\n• None In the Design section of the Properties window, change the name from Button1 to , and then select Enter. If you alphabetized the list in the Properties window, Button1 appears in the (DataBindings) section, instead. You can dock or anchor the controls on your form to help with automatic placement and sizing, when the form changes size. After you add a button control to create an action, add a label control to receive the text.\n• None Select the Label control from the Toolbox. Then drag it onto the form and drop it beneath the Click this button.\n• None In either the Design section or the (DataBindings) section of the Properties window, change the name of Label1 to . Then select Enter.\n• None In the Form1.cs [Design] window, double-click the Click this button to open the Form1.cs window. Alternatively, you can expand Form1.cs in Solution Explorer, and then choose View Code or select F7 from the shortcut menu on Form1.cs.\n• None In the Form1.cs window, after the private void line, type or enter as shown in the following screenshot.\n\nAfter you select your C# project template and name your project, Visual Studio opens a form for you. A form is a Windows user interface. Create a Hello World application by adding controls to the form. Then run the app.\n• If you don't see the Toolbox option, you can open it from the menu bar. Select View > Toolbox or Ctrl+Alt+X.\n• None Expand Common Controls and select the Pin icon to dock the Toolbox window.\n• None Select the Button control and then drag it onto the form.\n• None In the Properties window, locate Text. Change the name from button1 to , and then select Enter. If you don't see the Properties window, you can open it from the menu bar. Select View > Properties Window or F4.\n• None In the Design section of the Properties window, change the name from button1 to , and then select Enter. If you alphabetized the list in the Properties window, Button1 appears in the (DataBindings) section, instead. You can dock or anchor the controls on your form to help with automatic placement and sizing, when the form changes size. After you add a button control to create an action, add a label control to receive the text.\n• None Select the Label control from the Toolbox. Then drag it onto the form and drop it beneath the Click this button.\n• None In either the Design section or the (DataBindings) section of the Properties window, change the name of label1 to . Then select Enter.\n• None In the Form1.cs [Design] window, double-click the Click this button to open the Form1.cs window. Alternatively, you can expand Form1.cs in Solution Explorer, and then choose Form1.\n• None In the Form1.cs window, after the private void line, type or enter as shown in the following screenshot.\n• None Select the Start button to run the application. Several things happen. In the Visual Studio IDE, the Diagnostics Tools window opens, and an Output window opens, too. But outside of the IDE, a Form1 dialog box appears. It includes your Click this button and text that says label1.\n• None Select the Click this button in the Form1 dialog box. Notice that the label1 text changes to Hello World!.\n• None Close the Form1 dialog box to stop running the app.\n\nCongratulations on completing this tutorial. To learn more, continue with the following tutorial:\n\nOr try these other tutorials:"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/desktop/winforms?view=netdesktop-9.0",
        "document": "This browser is no longer supported.\n\nUpgrade to Microsoft Edge to take advantage of the latest features, security updates, and technical support."
    },
    {
        "link": "https://geeksforgeeks.org/introduction-to-c-sharp-windows-forms-applications",
        "document": "Windows Forms is a Graphical User Interface(GUI) class library which is bundled in .Net Framework. Its main purpose is to provide an easier interface to develop the applications for desktop, tablet, PCs. It is also termed as the WinForms. The applications which are developed by using Windows Forms or WinForms are known as the Windows Forms Applications that runs on the desktop computer. WinForms can be used only to develop the Windows Forms Applications not web applications. WinForms applications can contain the different type of controls like labels, list boxes, tooltip etc.\n• First, open the Visual Studio then Go to File -> New -> Project to create a new project and then select the language as Visual C# from the left menu. Click on Windows Forms App(.NET Framework) in the middle of current window. After that give the project name and Click OK. Here the solution is like a container which contains the projects and files that may be required by the program.\n• After that following window will display which will be divided into three parts as follows:\n• Editor Window or Main Window: Here, you will work with forms and code editing. You can notice the layout of form which is now blank. You will double click the form then it will open the code for that.\n• Solution Explorer Window: It is used to navigate between all items in solution. For example, if you will select a file form this window then particular information will be display in the property window.\n• Properties Window: This window is used to change the different properties of the selected item in the Solution Explorer. Also, you can change the properties of components or controls that you will add to the forms.\n• Now to add the controls to your WinForms application go to Toolbox tab present in the extreme left side of Visual Studio. Here, you can see a list of controls. To access the most commonly used controls go to Common Controls present in Toolbox tab.\n• Now drag and drop the controls that you needed on created Form. For example, if you can add TextBox, ListBox, Button etc. as shown below. By clicking on the particular dropped control you can see and change its properties present in the right most corner of Visual Studio. In the above image, you can see the TextBox is selected and its properties like TextAlign, MaxLength etc. are opened in right most corner. You can change its properties’ values as per the application need. The code of controls will be automatically added in the background. You can check the Form1.Designer.cs file present in the Solution Explorer Window.\n• To run the program you can use an F5 key or Play button present in the toolbar of Visual Studio. To stop the program you can use pause button present in the ToolBar. You can also run the program by going to Debug->Start Debugging menu in the menubar.\n\nC# Windows Forms is a graphical user interface (GUI) framework that enables developers to create desktop applications for the Windows operating system. Windows Forms applications are created using the C# programming language and the .NET framework. They are built by dragging and dropping controls such as buttons, text boxes, labels, and other user interface elements onto a form.\n• The Windows Forms framework provides a rich set of controls that developers can use to build applications with. These controls are designed to provide a consistent and familiar user interface for Windows users. Developers can customize the appearance and behavior of these controls by setting various properties and handling events.\n• To create a Windows Forms application in C#, you can use Microsoft Visual Studio, which is an integrated development environment (IDE) that provides a visual designer to create and layout the user interface elements. The visual designer is a drag-and-drop interface for building your UI, and you can easily configure each control’s properties through a user-friendly interface.\n• In addition to the visual designer, Visual Studio also provides a code editor that enables developers to write the C# code for the application’s logic. Developers can handle events and perform tasks such as data validation, data manipulation, and business logic implementation.\n• Windows Forms applications are versatile and can be used to create various types of applications such as data entry, management, and reporting applications, as well as games and multimedia applications.\n\nOverall, Windows Forms applications provide an easy-to-use and familiar graphical user interface for Windows users, making it an ideal choice for building desktop applications that require a high degree of interactivity and user engagement."
    },
    {
        "link": "https://lira.epac.to/DOCS-TECH/Programming/C%23%20-%20CSharp/Windows%20Forms%20Programming%20with%20CSharp.pdf",
        "document": ""
    },
    {
        "link": "https://w3schools.com/cs/index.php",
        "document": "C# (C-Sharp) is a programming language developed by Microsoft that runs on the .NET Framework.\n\nC# is used to develop web apps, desktop apps, mobile apps, games and much more."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection?view=net-9.0-pp",
        "document": "The following example creates a SqlCommand and a SqlConnection. The SqlConnection is opened and set as the Connection for the SqlCommand. The example then calls ExecuteNonQuery. To accomplish this, the ExecuteNonQuery is passed a SqlConnection and a query string that is a Transact-SQL INSERT statement. The connection is closed automatically when the code exits the using block.\n\nA SqlConnection object represents a unique session to a SQL Server data source. With a client/server database system, it is equivalent to a network connection to the server. SqlConnection is used together with SqlDataAdapter and SqlCommand to increase performance when connecting to a Microsoft SQL Server database. For all third-party SQL Server products and other OLE DB-supported data sources, use OleDbConnection.\n\nWhen you create an instance of SqlConnection, all properties are set to their initial values. For a list of these values, see the SqlConnection constructor.\n\nSee ConnectionString for a list of the keywords in a connection string.\n\nIf the SqlConnection goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling or . and are functionally equivalent. If the connection pooling value is set to or , the underlying connection is returned back to the connection pool. On the other hand, if is set to or , the underlying connection to the server is actually closed.\n\nTo ensure that connections are always closed, open the connection inside of a block, as shown in the following code fragment. Doing so ensures that the connection is automatically closed when the code exits the block.\n\nIf a SqlException is generated by the method executing a SqlCommand, the SqlConnection remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the SqlConnection. However, the user can reopen the connection and continue.\n\nAn application that creates an instance of the SqlConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. SqlConnection makes security demands using the SqlClientPermission object. Users can verify that their code has sufficient permissions by using the SqlClientPermissionAttribute object. Users and administrators can also use the Caspol.exe (Code Access Security Policy Tool) to modify security policy at the machine, user, and enterprise levels. For more information, see Security in .NET. For an example demonstrating how to use security demands, see Code Access Security and ADO.NET.\n\nFor more information about handling warning and informational messages from the server, see Connection Events. For more information about SQL Server engine errors and error messages, see Database Engine Events and Errors."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/microsoft.data.sqlclient.sqlconnection?view=sqlclient-dotnet-standard-5.2",
        "document": "The following example creates a SqlCommand and a SqlConnection. The SqlConnection is opened and set as the Connection for the SqlCommand. The example then calls ExecuteNonQuery. To accomplish this, the ExecuteNonQuery is passed a connection string and a query string that is a Transact-SQL INSERT statement. The connection is closed automatically when the code exits the using block.\n\nA SqlConnection object represents a unique session to a SQL Server data source. With a client/server database system, it is equivalent to a network connection to the server. SqlConnection is used together with SqlDataAdapter and SqlCommand to increase performance when connecting to a Microsoft SQL Server database. For all third-party SQL Server products and other OLE DB-supported data sources, use OleDbConnection.\n\nWhen you create an instance of SqlConnection, all properties are set to their initial values. For a list of these values, see the SqlConnection constructor.\n\nSee ConnectionString for a list of the keywords in a connection string.\n\nIf the SqlConnection goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling or . and are functionally equivalent. If the connection pooling value is set to or , the underlying connection is returned back to the connection pool. On the other hand, if is set to or , the underlying connection to the server is actually closed.\n\nTo ensure that connections are always closed, open the connection inside of a block, as shown in the following code fragment. Doing so ensures that the connection is automatically closed when the code exits the block.\n\nIf a SqlException is generated by the method executing a SqlCommand, the SqlConnection remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the SqlConnection. However, the user can reopen the connection and continue.\n\nAn application that creates an instance of the SqlConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. SqlConnection makes security demands using the SqlClientPermission object. Users can verify that their code has sufficient permissions by using the SqlClientPermissionAttribute object. Users and administrators can also use the Caspol.exe (Code Access Security Policy Tool) to modify security policy at the machine, user, and enterprise levels. For more information, see Security in .NET. For an example demonstrating how to use security demands, see Code Access Security and ADO.NET.\n\nFor more information about handling warning and informational messages from the server, see Connection Events. For more information about SQL Server engine errors and error messages, see Database Engine Events and Errors.\n\nGets or sets the access token for the connection. Gets or sets the access token callback for the connection. Gets a value that indicates whether this SqlConnection instance supports the DbBatch class. The connection ID of the most recent connection attempt, regardless of whether the attempt succeeded or failed. Gets or sets the time-to-live for column encryption key entries in the column encryption key cache for the Always Encrypted feature. The default value is 2 hours. 0 means no caching at all. Gets or sets a value that indicates whether query metadata caching is enabled (true) or not (false) for parameterized queries running against Always Encrypted enabled databases. The default value is true. Allows you to set a list of trusted key paths for a database server. If while processing an application query the driver receives a key path that is not on the list, the query will fail. This property provides additional protection against security attacks that involve a compromised SQL Server providing fake key paths, which may lead to leaking key store credentials. Gets the default wait time (in seconds) before terminating the attempt to execute a command and generating an error. The default is 30 seconds. Gets or sets the string used to open a SQL Server database. Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error. Gets or sets the SqlCredential object for this connection. Gets the name of the current database or the database to be used after a connection is opened. Gets the name of the instance of SQL Server to which to connect. Gets or sets the FireInfoMessageEventOnUserErrors property. Gets the size (in bytes) of network packets used to communicate with an instance of SQL Server. Gets or sets a value that specifies the SqlRetryLogicBaseProvider object bound to this command. Gets the server process Id (SPID) of the active connection. Gets a string that contains the version of the instance of SQL Server to which the client is connected. Indicates the state of the SqlConnection during the most recent network operation performed on the connection. When set to , enables statistics gathering for the current connection. Gets a string that identifies the database client.\n\nStarts a database transaction with the specified isolation level and transaction name. Starts a database transaction with the specified isolation level. Starts a database transaction with the specified transaction name. Changes the current database for an open SqlConnection. Changes the SQL Server password for the user indicated in the SqlCredential object. Changes the SQL Server password for the user indicated in the connection string to the supplied new password. Empties the connection pool associated with the specified connection. Closes the connection to the database. This is the preferred method of closing any open connection. Creates and returns a SqlCommand object associated with the SqlConnection. Enlists in the specified transaction as a distributed transaction. Enlists in the specified transaction as a distributed transaction. Returns schema information for the data source of this SqlConnection. For more information about scheme, see SQL Server Schema Collections. Returns schema information for the data source of this SqlConnection using the specified string for the schema name and the specified string array for the restriction values. Returns schema information for the data source of this SqlConnection using the specified string for the schema name. Opens a database connection with the property settings specified by the ConnectionString. Opens a database connection with the property settings specified by the ConnectionString. An asynchronous version of Open(), which opens a database connection with the property settings specified by the ConnectionString. The cancellation token can be used to request that the operation be abandoned before the connection timeout elapses. Exceptions will be propagated via the returned Task. If the connection timeout time elapses without successfully connecting, the returned Task will be marked as faulted with an Exception. The implementation returns a Task without blocking the calling thread for both pooled and non-pooled connections. Registers the column encryption key store providers. This function should only be called once in an app. This does shallow copying of the dictionary so that the app cannot alter the custom provider list once it has been set. The built-in column master key store providers that are available for the Windows Certificate Store, CNG Store and CSP are pre-registered. Registers the encryption key store providers on the SqlConnection instance. If this function has been called, any providers registered using the static RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>) methods will be ignored. This function can be called more than once. This does shallow copying of the dictionary so that the app cannot alter the custom provider list once it has been set. If statistics gathering is enabled, all values are reset to zero. Returns a name value pair collection of internal properties at the point in time the method is called. Returns a name value pair collection of statistics at the point in time the method is called."
    },
    {
        "link": "https://stackoverflow.com/questions/77843573/why-sqlconnection-is-not-directly-available-in-net-core",
        "document": "Your question is poorly formed because you don't really understand how the frameworks are structured or implemented. When you say \"directly\" in the title of your question, that's just wrong. What you really mean is \"by default\", but even that's not completely correct.\n\nAll .NET frameworks, whether .NET Framework or .NET Core or Mono or whatever, are comprised of assemblies. Those assemblies are .NET DLLs, in which types are defined. .NET Framework is always installed on a system running supported apps, so you always have access to all the standard assemblies. In .NET Core, you can install the framework or the required assemblies can be deployed with each application, or both.\n\nWhen you create a project in VS, a template is used to generate it. That template will include various things, including certain assemblies being referenced by default. When you create a .NET Framework project, most templates will include a reference to the System.Data.dll assembly. That assembly contains the definitions of types for the ADO.NET providers for ODBC ( ), OLE DB ( ) and SQL Server ( ). With that reference and an import of the appropriate namespace, you are able to refer to types like and to do so unqualified, i.e. without specifying the namespace.\n\nWhen you create a .NET Core project (.NET 5 and later are based on .NET Core), the same thing happens but the list of included assemblies tends to be smaller and what those assemblies contain may be less too. That's because, if you are going to deploy dependencies along with your application, you want there to be as few as possible and for them to be as small as possible. For this reason, the three ADO.NET providers mentioned earlier are all in different assemblies and it is up to you to install the appropriate NuGet package if and when you need to use one.\n\nWhen it comes to in .NET Core, there are two options. There is a System.Data.SqlClient NuGet package that basically contains a .NET Core version of the same provider as you get in .NET Framework. That exists for compatibility. There is also the newer Microsoft.Data.SqlClient package, which started out the same but has since had new functionality added and will continue to do so. Unless you specifically need to use the old version, install the Microsoft.Data.SqlClient package, add the appropriate namespace import and write code exactly as you did before, plus enjoy the new functionality if appropriate."
    },
    {
        "link": "https://stackoverflow.com/questions/29733221/the-type-or-namespace-name-sqlconnection-could-not-be-found",
        "document": "Something seems wrong with the c# database for Accounts:\n\nRight at the database I get the error message of:\n\nError 1 The type or namespace name 'Connection' could not be found (are you missing a using directive or an assembly reference?)\n\nWhat am I possibly doing wrong with it? I would like to connect to the database in the Accounts"
    },
    {
        "link": "https://hevodata.com/learn/c-sql-server",
        "document": "Interacting with database servers is a key skill for any C# developer. Whether you are maintaining enterprise applications or building smaller-scale solutions, connecting your .NET code to databases like SQL Server is fundamental.\n\nHowever, opening and managing connections from C# code to SQL Server can trip up new developers. Handling connections properly using best practices is important for security, performance and reliability reasons.\n\nIn this post, we will explore three methods to connect C# SQL Server along with the fundamentals of Database Connectivity and help you establish a C# SQL Server connection.\n\nMicrosoft SQL Server is a Relational Database Management System (RDBMS) that helps store and retrieve information as per the demand. Developed by Microsoft, it is one of the best designs to compete with Oracle Database and MySQL. Also, the Software Product supports different Business Intelligence Operations, Transaction Processing, Data Management, and Analytical Operations. The server has numerous versions managed and administered using the Structured Query Language (SQL) language.\n\nNowadays, various businesses carry sensitive customer information and share files through a network. In this case, using the Microsoft SQL Server will add increased security, speed, and reliability. Furthermore, it helps in maintaining a backup system. There are numerous benefits of using SQL Server in the business world. It also supports different database types.\n\nVarious Programming Languages like C# and .Net are compatible with Oracle and Microsoft SQL Server. Also, they follow the same logic with each database in most cases. Here are a few concepts common for all Databases.\n• Creating a Connection: The first and foremost step is to establish a connection. In order to work with Database information, establishing a connection is a must. Follow the below-listed parameters to create a connection.\n• Database Name or Data Source: Database Name refers to the name of the Database to which the Developer needs to create a connection. These are case-sensitive with a maximum length of 64 bytes. It comprises letters, numbers, underscores, and symbols. Also, every connection is allowed to work with one Database at a time.\n• Credentials: Secondly, to establish a secure connection to the Database, make sure to generate a username and strong password. This parameter allows only the privileged users to connect and use the database.\n• Optional Parameters: There are a few optional parameters to establish a better connection, such as details on how .net must handle connections or how long the connections will stay active. These parameters can inform users if no action takes place. Also, it helps determine if the connection to the Database needs closure.\n• Fetch data from the Database: As you create a connection to the database, the next step is to select information from the source. C# executes ‘SQL’ statements that can help fetch information from the database tables. Hence, to select specific information from the Database, it is recommended to execute the ‘SQL’ select command.\n• Insert Information into the Database: C# Programming Language is a great option to insert data into Databases. All you require is to add or specify values in C# for each row that you want to insert.\n• Update the Existing Data: C# Programming Language is also used for updating the previous data records in the Database. Again, you need to add or specify values in C# for each row that you want to update.\n• Remove Data: Use C# for deleting any previous or new data records from the Database. Select or specify commands for each row in C# that you want to delete.\n\nEntity Framework is an Object Relational Mapping(ORM) framework that lets the user build a clean, portable, and high-level data access layer with C# across SQL Databases. It is the easiest and most preferred method for C# SQL Server Connection since it does not require the user to write any SQL queries.\n\nFollow the steps below for an easy C# SQL Server Database connection:\n• Step 6: Use DbContext in Your Code\n\nCreate your data model by creating C# classes that represent entities. Entities are typically equivalent to database tables.\n\nCreate a class that inherits from to represent your database context. This class will be responsible for interacting with the database.\n\nMake sure your or file includes the connection string for your database.\n\nIn your application (e.g., in the method or in a web application), add code to initialize the database. This can be done using Entity Framework migrations or by simply calling in your code.\n\nStep 6: Use DbContext in Your Code\n\nNow, you can use your DbContext in your application to perform database operations.\n\nBy following these steps, you can integrate C# with SQL Server using Entity Framework in a Code-First approach. This method provides a convenient way to work with databases using C# classes, and it automatically handles the translation between the object-oriented world of C# and the relational world of SQL Server.\n• It supports the querying of data with C# instead of SQL.\n• It works with the data as objects.\n• It has more advanced powers and features for the end user.\n\nDapper is another open-source object-relational mapping (ORM) library for .NET and .NET Core applications. The library supports easy access to data from databases without the need to write endless code. Dapper is preferred for C# SQL Server connection because it facilitates the user in running raw SQL queries and mapping results to objects.\n\nFollow the steps below for an easy C# SQL Server Database connection:\n• Step 3: Use Dapper in Your Code\n\nDefine your data model by creating a C# class representing the entity. This class will map to a database table.\n\nNote: Make sure your application has access to the connection string for your database.\n\nStep 3: Use Dapper in Your Code\n\nUse Dapper to perform database operations in your application.\n\nDapper provides extension methods for the class, making it easy to execute queries and commands. The method is used for SELECT queries, and the method is used for INSERT, UPDATE, and DELETE operations.\n\nAdvantages of Using Dapper for C# SQL Server Connection:\n• It has a better speed and performance.\n\nLet’s say you want to create a connection to a Database named Demodb. Username (sa) and Password (demo123) are credentials that will make all the privileged users connect to a Database.\n\nFollow the steps below to establish a C# SQL Server Database connection.\n\nUsing a simple connect button, users can establish a C# SQL Server connection to the Database. Look at the Windows forms application to learn how to work with Databases.\n• To get started with C# SQL Server, open Visual Studio to create a new project. Once the visual studio is active, go to the menu option at the top. Select “New” and click on “Project“.\n• Mention your project name and choose a location from the browser. Now, press “OK“. Also, make sure to select your project type as a “Windows Forms” application.\n• Before you move on to the next step, make a note of these:\n• You can create various types of projects from the Project dialog box in Visual Studio. Go to the left-hand side and click on the “Windows” option.\n• Now, select “Windows Forms Application” from the list. Name the application and provide a location where you want to save the project. In this example, we have saved the application as “DemoApplication”.\n• Lastly, press the “OK” button to create a project in the Visual Studio.\n• Go to the toolbox and add a button to the Windows form. Mention the button’s text property as “Connect“. Here is how the button will appear on your screen.\n• To add the Event Handler to the code, make sure to double-click on the form. The Event Handler is used for the Button Click event. Copy the below-listed code and paste it into the Event Handler.\n• In the first stage, you create variables. These variables help generate the connection string. Further, it aids in establishing a C# SQL Server Database connectivity.\n• Now, in the next step, you will create a connection string. Make sure to place and specify it in the right manner for C#. It will help in a better understanding of the connection string. A connection string comprises:\n• Data Source: It refers to the server name where a Database is maintained. In this example, the machine on which the Database resides is WIN- 50GP30FGO75.\n• To specify the Database name, you require the initial catalog.\n• To establish a connection with the Database, create credentials – userID and password.\n• In the third step, the connection string is assigned to the variable cnn. It is a SqlConnection type mostly used to help create a connection with the Database.\n• Now, the Open method of the cnn variable is exercised to establish a connection. As the connection is established, a message will display on your screen confirming the status.\n• As the operation is successful, add a closure to the connection. It is best to close the connection if no other changes are necessary.\n• Execute the project using Visual Studio and place the above code correctly in C#. We assure if done properly, you will get the right output. Also, click the “Connect” button as the form displays on your screen.\n\nYou will notice that the connection to the Database is created as you press the connection button on the screen from the output. Here is how the output will appear on the screen.\n\nThat’s it, you’ve successfully established the C# SQL Server Database connection.\n\nMicrosoft SQL Server is a Relational Database Management System (RDBMS) that helps businesses work efficiently at all times. The Relational Database is generally used to store, retrieve information, Business Intelligence operations, manage data, and perform analysis.\n\nUsing Microsoft SQL Server adds more security, speed, and reliability. In this post, we have shown how to establish a C# SQL Server connection. Follow the above-listed fundamentals of Database connectivity and steps to build a C# SQL Server Database connectivity easily.\n\nDive into a deeper knowledge of SQL Server with these essential reads:\n\nTo get a complete overview of your business performance, it is important to consolidate data from SQL Server and other Data Sources into a Cloud Data Warehouse or a destination of your choice for further Business Analytics. This is where Hevo comes in.\n\nHevo Data with its strong integration with BI tools such as SQL Server, allows you to not only export data from sources & load data to the destinations, but also transform & enrich your data, & make it analysis-ready so that you can focus only on your key business needs and perform insightful analysis using BI tools.\n\nGive Hevo Data a try and sign up for a 14-day free trial today. Hevo offers plans & pricing for different use cases and business needs, check them out!\n\nShare your experience of working with C# SQL Server connection in the comments section below."
    },
    {
        "link": "https://stackoverflow.com/questions/36274296/crud-operations-using-datagridview-datatable-and-dataadapter-cannot-add-new-r",
        "document": "I'm trying to insert new records into the source table from the C# interface grid view.... But when I retrieve the records with the buttonclick code shown below... Im getting records in the gridview but no option for inserting new records(screen shot attached).. where as i can update the reocrds from the grid view.\n\nIs there any option or property for enabling the insertion option in the gridview ?"
    },
    {
        "link": "https://medium.com/nerd-for-tech/how-to-create-a-windows-form-crud-application-in-c-using-stored-procedures-a90f6e5719c5",
        "document": "In the world of software engineering, CRUD (Create, Read, Update, Delete) operations are fundamental for managing data. In this blog post, I will guide you through the process of building a basic Windows Form CRUD application using C#. Before we dive in, make sure you have Visual Studio and Microsoft SQL Server Management Studio installed as prerequisites.\n\nA Windows Form application is designed to run on a computer and won’t operate within a browser, as doing so would classify it as a web application.\n\nIn this article, I will guide you through every step of the process, from creating the user interface to implementing the necessary functionality, all aimed at enhancing user interaction 😃.\n\nTo initiate a new project, open the Visual Studio application on your computer and select the “Create New Project” option from the menu.\n\nNext, choose the project type as “Windows Form App (.NET Framework)” and click on the “Next” button located at the bottom of the page.\n\nAs the next step, provide a name for your new project, select a location where you’d like to create the project, and then click on the “Create” button to proceed with the configuration.\n\nIf you’ve followed the above-mentioned steps correctly, you should now see the output displayed in Visual Studio as follows:\n\nThe Form Designer is where you begin designing your Windows Forms application. In the Solution Explorer window, you can locate the application solution. The form application, named Form1.cs, will contain all the code for the Windows Forms application. The main program contains the startup code of the application.\n\nNavigate to the Toolbox section and drag and drop the required controls to your form. Modify the “Name” property of each control for proper identification. Whenever you need to alter the text on buttons or elsewhere, simply edit the “Text” property in the properties panel. Feel free to design your interface according to your preferences by adjusting the properties of each control.\n\nTo store and manage our data effectively, we’ll set up a database in Microsoft SQL Server. Open Microsoft SQL Server Management Studio, then right-click on the “Databases” folder and select “New Database”.\n\nProvide an appropriate name for the database and then click the “OK” button.\n\nNow it’s time to create the table. The application aims to create a student registration form. To initiate the creation of the student table, execute the following SQL command in SQL Server Management Studio.\n\nYou can view the table structure by right-clicking on the database and selecting “Design” as follows,\n\nTo establish the connection between the Windows application and the SQL database, follow these steps:\n\nNavigate to Server Explorer (if you can’t locate it, check under the “View” menu in the menu bar) and right-click on the data connection. Then, select “Add New Connection.”\n\nThen, it will open a dialog box as follows. Firstly, choose “Microsoft SQL Server (SQL Client)” as the data source. Next, provide the server name. Then, select the database name from the dropdown menu as “WindowsFormsAppDb” and click the “OK” button.\n\nOnce connected to the database, the connection details will be visible. To retrieve the connection string, right-click on the database and select “Properties”. Then, copy the connection string for further reference.\n\nDouble-click on the form page and create a SqlConnection. In the connection object, store the connection string we copied previously.\n\nTo create stored procedures for insert, read, update, delete, and search operations execute the following SQL command in the SQL server management studio.\n\nCOOl…😎 Now it’s time to implement the CRUD operation of your application.\n\nDouble-click on the insert button and within the function, follow the following steps. First, initialize variables to hold gender and selected languages. Determine the gender by checking the selected radio button, and identify the selected languages by checking the corresponding checkboxes. Then convert the selected languages into a comma-separated string. After that open the database connection and create a SqlCommand object with the stored procedure name (“dbo.SP_Student_Insert”). Next set the CommandType of the command to StoredProcedure and add parameters to the command for each input field. Finally, execute the command using the ExecuteNonQuery method and close the database connection.\n\nThe “LoadAllRecords” function is responsible for fetching all student data from the database and displaying them in a DataGridView control within the application. In this function initialize a new instance of the SqlCommand class with the name of the stored procedure. Then create SqlDataAdapter by passing the SqlCommand object and instantiate a DataTable object. Use the fill method to populate the DataTable with the records. Finally set the DataSource property of DataGridView to populate DataTable.\n\nRight-clicking on the update button and within the function write the following code.\n\nDouble-click on the delete button and write the following code under the event handler method. When the user clicks on the delete button The code within the event handler method for the button click should execute. Firstly, establish a connection to the database. Subsequently, prompt the user with a confirmation message box, ensuring their intention to delete the data. If the user confirms, proceed to execute the stored procedure, passing the index number from the textbox as a parameter. Following this, close the database connection and display a success message to the user.\n\nWhen clicking on the “Search” button this function comes into play. As previous operations open a connection to the database and create an SQL command that calls a stored procedure, passing the index number entered in the search box. This command is set up to retrieve data matching the provided index number.\n\nThe “StudentReg” class should resemble the following.\n\nNow you can perform CRUD operations in your Windows Forms application 🤩. The application will allow you to add, view, update, delete, and search student details from the connected database. The DataGridView will display the list of students retrieved from the database.\n\nIn conclusion, this article has provided a comprehensive, step-by-step guide for beginners in C# to develop straightforward Windows Form CRUD applications utilizing stored procedures. While there are multiple approaches to accomplish this task, and opportunities abound to refine these code snippets with best practices, the presented method serves as an ideal starting point for beginners. Encouraging experimentation and iteration, I invite readers to engage with the code, improve it, and try for excellence in their coding endeavors. Here’s to continual improvement and mastery in coding! 🤝"
    },
    {
        "link": "https://programmingadvices.com/courses/2100316/lectures/48166948",
        "document": ""
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters",
        "document": "The method of the DataAdapter is called to resolve changes from a DataSet back to the data source. The method, like the method, takes as arguments an instance of a , and an optional DataTable object or name. The instance is the that contains the changes that have been made, and the identifies the table from which to retrieve the changes. If no is specified, the first in the is used.\n\nWhen you call the method, the analyzes the changes that have been made and executes the appropriate command (INSERT, UPDATE, or DELETE). When the encounters a change to a DataRow, it uses the InsertCommand, UpdateCommand, or DeleteCommand to process the change. This allows you to maximize the performance of your ADO.NET application by specifying command syntax at design time and, where possible, through the use of stored procedures. You must explicitly set the commands before calling . If is called and the appropriate command does not exist for a particular update (for example, no for deleted rows), an exception is thrown.\n\nCommand parameters can be used to specify input and output values for an SQL statement or stored procedure for each modified row in a . For more information, see DataAdapter Parameters.\n\nIf your maps to or is generated from a single database table, you can take advantage of the DbCommandBuilder object to automatically generate the , , and objects for the . For more information, see Generating Commands with CommandBuilders.\n\nYou can control how the values returned from the data source are mapped back to the following a call to the Update method of a , by using the UpdatedRowSource property of a DbCommand object. By setting the property to one of the UpdateRowSource enumeration values, you can control whether output parameters returned by the commands are ignored or applied to the changed row in the . You can also specify whether the first returned row (if it exists) is applied to the changed row in the .\n\nThe following table describes the different values of the enumeration and how they affect the behavior of a command used with a .\n\nThe method resolves your changes back to the data source; however other clients may have modified data at the data source since the last time you filled the . To refresh your with current data, use the and method. New rows will be added to the table, and updated information will be incorporated into existing rows. The method determines whether a new row will be added or an existing row will be updated by examining the primary key values of the rows in the and the rows returned by the . If the method encounters a primary key value for a row in the that matches a primary key value from a row in the results returned by the , it updates the existing row with the information from the row returned by the and sets the RowState of the existing row to . If a row returned by the has a primary key value that does not match any of the primary key values of the rows in the , the method adds a new row with a of .\n\nTo handle exceptions that may occur when calling the method, you can use the event to respond to row update errors as they occur (see Handling DataAdapter Events), or you can set to before calling , and respond to the error information stored in the property of a particular row when the update is complete (see Row Error Information).\n\nThe following examples demonstrate how to perform updates to modified rows by explicitly setting the of a and calling its method. Notice that the parameter specified in the WHERE clause of the UPDATE statement is set to use the value of the . This is important, because the value may have been modified and may not match the value in the data source. The value is the value that was used to populate the from the data source.\n\nIf the tables from your data source have auto-incrementing columns, you can fill the columns in your either by returning the auto-increment value as an output parameter of a stored procedure and mapping that to a column in a table, by returning the auto-increment value in the first row of a result set returned by a stored procedure or SQL statement, or by using the event of the to execute an additional SELECT statement. For more information and an example, see Retrieving Identity or Autonumber Values.\n\nIn many circumstances, the order in which changes made through the are sent to the data source is important. For example, if a primary key value for an existing row is updated, and a new row has been added with the new primary key value as a foreign key, it is important to process the update before the insert.\n\nYou can use the method of the to return a array that only references rows with a particular . You can then pass the returned array to the method of the to process the modified rows. By specifying a subset of rows to be updated, you can control the order in which inserts, updates, and deletes are processed.\n\nFor example, the following code ensures that the deleted rows of the table are processed first, then the updated rows, and then the inserted rows.\n\nYou can use a DataAdapter to retrieve and update the data.\n• None The sample uses DataAdapter.AcceptChangesDuringFill to clone the data in the database. If the property is set as false, AcceptChanges is not called when filling the table, and the newly added rows are treated as inserted rows. So, the sample uses these rows to insert the new rows into the database.\n• None The samples uses DataAdapter.TableMappings to define the mapping between the source table and DataTable.\n• None The sample uses DataAdapter.FillLoadOption to determine how the adapter fills the DataTable from the DbDataReader. When you create a DataTable, you can only write the data from database to the current version or the original version by setting the property as the LoadOption.Upsert or the LoadOption.PreserveChanges.\n• None The sample will also update the table by using DbDataAdapter.UpdateBatchSize to perform batch operations.\n\nBefore you compile and run the sample, you need to create the sample database:"
    },
    {
        "link": "https://learn.microsoft.com/en-us/answers/questions/1141378/(winforms)search-button-that-is-using-stored-proce?orderBy=Newest",
        "document": "An object-oriented and type-safe programming language that has its roots in the C family of languages and includes support for component-oriented programming."
    }
]