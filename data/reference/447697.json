[
    {
        "link": "https://discussions.unity.com/t/arent-there-no-built-in-navigation-system-for-controller-directional-key/937296",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/Manual/class-InputManager.html",
        "document": "The Input Manager window allows you to define input axes and their associated actions for your Project. To access it, from Unity’s main menu, go to Edit > Project Settings, then select Input Manager from the navigation on the right.\n\nThe Input Manager uses the following types of controls:\n• Key refers to any key on a physical keyboard, such as W, Shift, or the space bar.\n• Button refers to any button on a physical controller (for example, gamepads), such as the X button on a remote control.\n• A virtual axis (plural: axes) is mapped to a control, such as a button or a key. When the user activates the control, the axis receives a value in the range of [–1..1]. You can use this value in your scripts \n\n A piece of code that allows you to create your own Components, trigger game events, modify Component properties over time and respond to user input in any way you like. More info .\n\nThe Physical keys option allows you to map key codes to the physical keyboard layout, rather than to the language-specific layout that may vary between users in different regions.\n\nFor example, on some keyboards the first row of letters reads “QWERTY”, and on others it reads “AZERTY”. This means if you scripted specific controls to use the well known “WASD” keys for movement, they would not be in the correct physical arrangement (like the arrow-key arrangement) on an AZERTY-layout keyboard.\n\nWith Physical Keys enabled, Unity uses a generic ANSI/ISO “Qwerty” layout to represent the physical location of the keys regardless of the user’s actual layout. This means if you specify the “Q” key, it will always be the left-most letter on the first row of letter keys, even if the user’s keyboard has a different letter in that position.\n\nNote, you should not read key input for in-game text input, because this will not allow users to enter non-Latin characters. Instead, use .\n\nEvery Project you create has a number of input axes created by default. These axes enable you to use keyboard, mouse, and joystick input in your Project straight away.\n\nTo see more about these axes, open the Input Manager window, and click the arrow next to any axis name to expand its properties.\n\nEach input axis has the following properties:\n• Between –1 and 1 for joystick and keyboard input. The neutral position for these axes is 0. Some types of controls, such as buttons on a keyboard, aren’t sensitive to input intensity, so they can’t produce values other than –1, 0, or 1.\n• Mouse delta (how much the mouse has moved during the last frame) for mouse input. The values for mouse input axes can be larger than 1 or smaller than –1 when the user moves the mouse quickly.\n\nTo add a virtual axis, increase the number in the Size field. This creates a new axis at the bottom of the list. The new axis copies the properties of the previous axis in the list.\n\nTo remove a virtual axis, you can either:\n• Decrease the number in the Size field. This removes the last axis in the list.\n• Right-click any axis, and select Delete Array Element.\n\n Note: You can’t undo this action.\n\nTo copy a virtual axis, right-click it and select Duplicate Array Element.\n\nTo map a key or button to an axis, enter its name in the Positive Button or Negative Button property in the Input Manager.\n\nMouse buttons are named and so on.\n\nYou can also query input for a specific key or button with and the naming conventions specified above. For example:\n\nAnother way to access keys is to use the enumeration.\n\nTo access virtual axes from scripts, you can use the axis name.\n\nFor example, to query the current value of the Horizontal axis and store it in a variable, you can use like this:\n\nFor axes that describe an event rather than a movement (for example, firing a weapon in a game), use instead.\n\nIf two or more axes have the same name, the query returns the axis with the largest absolute value. This makes it possible to assign more than one input device to an axis name.\n\nFor example, you can create two axes named Horizontal and assign one to keyboard input and the other to joystick input. If the user is using the joystick, input comes from the joystick and keyboard input is null. Otherwise, input comes from the keyboard and joystick input is null. This enables you to write a single script that covers input from multiple controllers.\n\nYou can use input from the Horizontal and Vertical axes and the method to move a GameObjectThe fundamental object in Unity scenes, which can represent characters, props, scenery, cameras, waypoints, and more. A GameObject’s functionality is defined by the Components attached to it. More info\n\nSee in Glossary in XZ space (forward, back, left, or right). Add the following code to the method on a script attached to the GameObject you want to move:\n\nrepresents the time that passed since the last frame. Multiplying the variable by ensures that the GameObject moves at a constant speed every frame."
    },
    {
        "link": "https://discussions.unity.com/t/best-practices-when-trying-to-handle-both-mouse-keyboard-and-gamepad-from-the-perspective-of-swapping-between-gameplay-and-menuing-controls/1553478",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/better-automatic-navigation-algorithm/869951",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/Packages/com.unity.ugui@2.0/manual/script-SelectableNavigation.html",
        "document": "In the above visualization mode, the arrows indicate how the change of focus is set up for the collection of controls as a group. That means - for each individual UI control - you can see which UI control will get focus next, if the user presses an arrow key when the given control has focus. So in the example shown above, If the \"button\" has focus and the user presses the right arrow key, the first (left-hand) vertical slider will then become focused. Note that the vertical sliders can't be focused-away-from using up or down keys, because they control the value of the slider. The same is true of the horizontal sliders and the left/right arrow keys."
    },
    {
        "link": "https://docs.unity3d.com/2018.2/Documentation/ScriptReference/UI.Image.html",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/GameObject.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close Switch to Manual\n\nThe is the fundamental object type in Unity. Use to represent everything in your project, including characters, props, and scenery. A acts as a container for functional components that determine how the GameObject looks and behaves.\n\n\n\nAny script that derives from MonoBehaviour can be added to a as a component. Use the Component.gameObject property from your code to access the the component is attached to.\n\n\n\n event functions such as the regular per-frame allow you to make the object responsive to events. To receive these event callbacks the must be active in the scene, which means both the and properties must be .\n\n\n\nYou can create an empty from code by invoking one of the constructors. However, a more common method is to instantiate a in Prefab form, with preconfigured components, property values, and child objects. For more information, refer to Instantiating Prefabs at runtime in the Manual.\n\n\n\nYou can modify many of the properties of this class in the Editor using the Inspector window. For a more comprehensive guide to using the GameObject class, refer to GameObject in the Manual.\n\n\n\nThe following example creates a named \"myExampleGO\" and adds a component of type AudioSource:"
    },
    {
        "link": "https://discussions.unity.com/t/array-image-to-ui/670820",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/39486497/change-the-ui-image-using-script-in-unity-c-sharp",
        "document": "To change the from a , don't use as you can potentially get another component that does not belong to the button. It can also return if the object is disabled.\n\nUse the or variable instead.\n\nIt really doesn't matter which one is used. Any of these two should work."
    },
    {
        "link": "https://discussions.unity.com/t/solved-changing-the-texture-of-an-ui-image-using-c/667516",
        "document": ""
    }
]