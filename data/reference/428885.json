[
    {
        "link": "https://stackoverflow.com/questions/47349854/spring-config-server-not-starting-with-keystore",
        "document": "trying to boot spring cloud config server with a keystore but am getting the following on startup:\n\nThe following options are used to start the component:\n\nI've tried the location as and even put the jks on the classpath and tried\n\nBut still get the same error regardless."
    },
    {
        "link": "https://spring.io/blog/2023/06/07/securing-spring-boot-applications-with-ssl",
        "document": "Tanzu Spring offers support and binaries for OpenJDK™, Spring, and Apache Tomcat® in one simple subscription."
    },
    {
        "link": "https://stackoverflow.com/questions/53096567/spring-config-server-security-encryption-and-decryption-not-working",
        "document": "The cloud config server's property is used to decrypt encrypted properties in the configuration files therefore it is clearly too late (and wrong from a security perspective) to provide said key in those configuration files.\n\nIt needs to be available to the bootstrap context so yes you can put it in if that configuration file is suitably secured or better yet it should be provided at startup time by a trusted secret storage system like Vault.\n\nIt's a shame that Spring's way of telling you that you have got this wrong is to emit this error message:"
    },
    {
        "link": "https://github.com/spring-cloud/spring-cloud-config/issues/98",
        "document": "I tried to do the key management thing mentioned http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_key_management. So I tried to do exactly as documentation\n\nand got the exception. Probably this is more of a module problem. But the file comes with the example config server is working fine on my computer. Is my command producing \"bad\" files? I've configred JCE as mentioned for my jdk (java-8-oracle jdk on ubuntu 12.04).\n\nAnd the exception is:"
    },
    {
        "link": "https://docs.spring.io/spring-boot/reference/features/ssl.html",
        "document": "Spring Boot provides the ability to configure SSL trust material that can be applied to several types of connections in order to support secure communications. Configuration properties with the prefix can be used to specify named sets of trust material and associated information.\n\nConfiguration properties with the prefix can be used to configure bundles of trust material created with the Java utility and stored in Java KeyStore files in the JKS or PKCS12 format. Each bundle has a user-provided name that can be used to reference the bundle. When used to secure an embedded web server, a is typically configured with a Java KeyStore containing a certificate and private key as shown in this example: When used to secure a client-side connection, a is typically configured with a Java KeyStore containing the server certificate as shown in this example: Rather than the location to a file, its Base64 encoded content can be provided. If you chose this option, the value of the property should start with . See for the full set of supported properties. If you’re using environment variables to configure the bundle, the name of the bundle is always converted to lowercase.\n\nConfiguration properties with the prefix can be used to configure bundles of trust material in the form of PEM-encoded text. Each bundle has a user-provided name that can be used to reference the bundle. When used to secure an embedded web server, a is typically configured with a certificate and private key as shown in this example: When used to secure a client-side connection, a is typically configured with the server certificate as shown in this example: Rather than the location to a file, its Base64 encoded content can be provided. If you chose this option, the value of the property should start with . PEM content can also be used directly for both the and properties. If the property values contain and markers then they will be treated as PEM content rather than a resource location. The following example shows how a truststore certificate can be defined: See for the full set of supported properties. If you’re using environment variables to configure the bundle, the name of the bundle is always converted to lowercase.\n\nOnce configured using properties, SSL bundles can be referred to by name in configuration properties for various types of connections that are auto-configured by Spring Boot. See the sections on embedded web servers, data technologies, and REST clients for further information.\n\nSpring Boot auto-configures a bean of type that provides access to each of the named bundles configured using the properties. An can be retrieved from the auto-configured bean and used to create objects that are used to configure SSL connectivity in client libraries. The provides a layered approach of obtaining these SSL objects:\n• provides access to the key store and trust store instances as well as any required key store password.\n• provides access to the and instances as well as the and arrays that they create.\n• provides a convenient way to obtain a new instance. In addition, the provides details about the key being used, the protocol to use and any option that should be applied to the SSL engine. The following example shows retrieving an and using it to create an : @Component public class MyComponent { public MyComponent(SslBundles sslBundles) { SslBundle sslBundle = sslBundles.getBundle(\"mybundle\"); SSLContext sslContext = sslBundle.createSslContext(); // do something with the created sslContext } } @Component class MyComponent(sslBundles: SslBundles) { init { val sslBundle = sslBundles.getBundle(\"mybundle\") val sslContext = sslBundle.createSslContext() // do something with the created sslContext } }\n\nSSL bundles can be reloaded when the key material changes. The component consuming the bundle has to be compatible with reloadable SSL bundles. Currently the following components are compatible: To enable reloading, you need to opt-in via a configuration property as shown in this example: A file watcher is then watching the files and if they change, the SSL bundle will be reloaded. This in turn triggers a reload in the consuming component, e.g. Tomcat rotates the certificates in the SSL enabled connectors. You can configure the quiet period (to make sure that there are no more changes) of the file watcher with the property."
    },
    {
        "link": "https://stackoverflow.com/questions/55364537/spring-java-app-not-finding-the-keystore-file",
        "document": "I am trying to set up a simple Spring application to use SSL and host it on Digital Ocean. Why is my app not finding the keystore file?\n\nThe droplet I've set up is based on Ubuntu 18.04. I used Letsencrypt to get a certificate and this guide to generate a PKCS file. I've set up my application.properties file to look in the jar file's current directory like so:\n\nI would expect this to run and start a web server on the configured port. However, what I get in the stack trace is this:\n\nWeirdly enough when I run the same jar with the same keystore.p12 file on my own Windows machine it runs fine:\n\nI don't think it's a permissions issue on the Ubuntu machine as I tried setting the permissions on the keystore file like so:\n\nI am running my jar file with the following command (tried with sudo infront as well):"
    },
    {
        "link": "https://stackoverflow.com/questions/76799660/java-springboot-having-trouble-loading-the-java-keystore-file",
        "document": "I have a backend application that utilizes a java keystore file, which contains imports of various certificate files I need to establish SSL connections to call upon spotify api. I have my keystore.jks file located under path \"src/main/resources/config/keystore.jks\" (since \"src/main/resources\" by default the root resource directory java springboot uses to locate all resource files during compilation process). I checked that after compiling my app, the keystore.jks file is located under target directory, which it does(\"target/classes/config/keystore.jks\"). However, when I launch my spring-boot app it's complaining \"unable to create a key store: Could not load store from 'classpath:/config/keystore.jks\". I don't know how to go about resolving this. I already made sure my spelling of keystore file is correct in application.properties file and made sure to get a new build before running my spring-boot app. I also listed contents of jar file and made sure it includes keystore.jks file. Much help would be appreciated.\n\nHere is the error output I get when I try to run spring-boot app:"
    },
    {
        "link": "https://spring.io/blog/2023/06/07/securing-spring-boot-applications-with-ssl",
        "document": "Tanzu Spring offers support and binaries for OpenJDK™, Spring, and Apache Tomcat® in one simple subscription."
    },
    {
        "link": "https://github.com/spring-projects/spring-boot/issues/43274",
        "document": "I am getting an exception with the SslBundles not being able to load the keystore. This worked fine with Spring Boot 3.3.6 (and previous levels). The file is in my current directory, from where the app is being run via .\n\nwith the root of the exception stack being"
    },
    {
        "link": "https://github.com/spring-projects/spring-kafka/issues/710",
        "document": "I have a file in and when I run the application with there are no exceptions but when I run the application with the following error occurs:\n\nCaused by: java.io.FileNotFoundException: class path resource [kafka-keytore.jks] cannot be resolved to absolute file path because it does not reside in the file system: jar:file:/Users/aalmazan/demo/target/demo-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/kafka-keytore.jks\n\n at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:217) ~[spring-core-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\n\n at org.springframework.core.io.AbstractFileResolvingResource.getFile(AbstractFileResolvingResource.java:133) ~[spring-core-5.0.7.RELEASE.jar!/:5.0.7.RELEASE]\n\n at org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl.resourceToPath(KafkaProperties.java:945) ~[spring-boot-autoconfigure-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]\n\n ... 76 common frames omitted\n\nIf I unpack the file is inside.\n\nHere are the steps to reproduce the problem:\n• Go to and generate new project skeleton with spring boot 2.0.3, demo artifact name and add dependency.\n• Add the following properties to file:"
    }
]