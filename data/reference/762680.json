[
    {
        "link": "https://developers.facebook.com/docs/messenger-platform/instagram",
        "document": ""
    },
    {
        "link": "https://developers.facebook.com/docs/instagram-platform/instagram-api-with-instagram-login/conversations-api",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/77795797/how-to-fetch-users-direct-messages-with-an-instagram-api-and-an-access-token",
        "document": "I have an access token, the validity of which was verified here, issued by an Instagram account for which I'd like to fetch direct messages. I tried calling\n\nand I get the response , even though the user has active conversations (3 in the last 1 week). I've gotten the field through the\n\nendpoint so I assume this is not an issue. I considered that there might be an issue with my access token's app permissions, but on the app's dashboard this\n\noption looks like the only one related to direct messages, but it doesn't seem to be what I'm looking for. I have researched this for two days and have noticed some implications that this functionality is not even available anymore. Can anyone point me towards solving this, or tell me that this is not something Instagram supports?"
    },
    {
        "link": "https://hubtype.com/blog/instagram-messenger-api",
        "document": "Instagram is a great channel to connect with prospects, develop connections, and engage with potential leads. But, without the right tools, it can be difficult to engage with customers at scale. Thankfully, the new Instagram Messenger API helps brands get one step closer to turning conversations into opportunities.\n\nKeep reading for everything you need to know about the Messenger API for Instagram.\n\nWhat is the Instagram Messenger API?\n\nThe Instagram Messenger API makes it possible for brands to manage high volumes of customer messages. It helps simplify technical needs, allows for more efficient workflows, and elevates customer experiences.\n\nWith the API, you can connect to your own tools and databases, so you can get a holistic view of the customer journey. You can also use automation and other robust messaging features to enhance experiences and exceed expectations.\n\nThe Instagram Messenger API is meant for larger businesses that use multiple live care agents to reply and attend to high volumes of inquiries. If you need to connect to existing tools and databases, streamline workflows, or automate parts of the customer journey, the API is a good fit for your needs.\n\nOn the other hand, if you are a smaller business with low-medium message volume, you probably won’t need to use the Instagram Messenger API. Facebook’s Business Inbox tool can probably handle your needs instead.\n\nFacebook’s Business Inbox tool aggregates conversations across Instagram and Facebook. This requires that your Instagram and Facebook pages be linked. Once you connect your Facebook and Instagram pages, anyone with access to your page’s inbox can respond to both Instagram and Facebook Messages.\n\nHow does the Messenger API for Instagram work?\n\nThe Messenger API is an intermediary between your business and Facebook’s servers. It makes it possible for you to use a third-party app to serve as a bridge between your agents and your business presence on Messenger.\n\nInstead of using the tools that Facebook provides out of the box, the Messenger API for Instagram lets you build experiences that are custom fit for both your business and your customers.\n\nOne of the biggest benefits of the Messenger API for Instagram is that it allows you to manage all of your customer communications from one place. You can direct message (DM) customers directly from a shared inbox or dashboard, so you can seamlessly communicate without having to access the app natively.\n\nThe Instagram Messenger API also makes it possible to integrate with other software in your tech stack for more personalized conversations. Connect to your customer relationship management (CRM) software, ticketing system, and other tools for more meaningful interactions across the customer journey.\n\nYou can increase team efficiency and responsiveness at scale by designing better workflows. The Instagram Messenger API makes it easier to monitor response times, assign tasks, and collaborate with teammates.\n\nWith the Messenger API, you can automate parts of the conversation for an always-on, consistent user experience. This helps capitalize on customer engagements and generate quick sales. You can also automate FAQs and route more complex questions to one of your human agents.\n\nThe new Messenger API for Instagram lets you send more than just text. You can respond with structured messages that include images, links, call-to-action buttons, quick replies, and more. Your customers can swipe through product carousels or follow simple steps to make a payment.\n\nGet notified when a variety of interactions or events happen, including when a person sends a message.\n\nThe User Profile API allows you to use an IG Scoped ID (IGSID) to retrieve user profile information that can be used to personalize the experience of people interacting with your business.\n\nPresent a set of buttons in the conversation for users to reply with.\n\nIce Breakers provide a way for users to start a conversation with a business with a list of frequently asked questions. A maximum of 4 questions can be set via the Ice Breaker API.\n\n\n\nSend a structured message that includes an image, text, and buttons.\n\nEnables two or more applications to collaborate by passing control of the conversation (thread) between Primary Receiver and Secondary Receiver apps.\n\nExamples of businesses using the Instagram Messenger API\n\nThe world’s leading brands are using the Instagram Messenger API to build great customer experiences. Sephora, H&M, and Kheil’s are just a few examples of companies that are boosting customer satisfaction scores, decreasing response times, and increasing revenue with the help of the API.\n\nSephora needed a way to streamline responses to customer queries on Instagram. They were encouraging customers to reach out via phone or email for faster support. But, they knew they were missing out on a big opportunity to engage with customers directly via social platforms.\n\nFor Sephora, it was critical to be able to integrate Instagram Messenger with their existing client engagement software. The API allowed them to use their own tech stack to automate responses, personalize engagement, measure response times, and get actionable insights.\n• 100% of clients reaching out through Instagram now served on Instagram\n• 15% decrease in average responses per conversation across all channels after implementing the Messenger API for Instagram, reducing time spent per inquiry and increasing agent efficiency\n\nH&M received huge volumes of Instagram direct messages daily. They needed a solution that would help their customer care team respond to shoppers through Instagram at scale.\n\nThe Instagram Messenger API helped H&M boost both agent productivity and customer satisfaction, as well as personalize customer service across all online communication.\n\nKiehl’s was finding it challenging to respond to the large volume of direct messages, comments, and Instagram Stories it received from people. They needed a solution that could help their team manage all inbound communication, answer questions, and convert leads.\n\nThey used the Instagram Messenger API to automate conversational flows. The automation was personalized, effective, and could seamlessly transfer complex conversations to the company’s customer support agents when needed.\n• 30% more qualified leads compared to other channels\n• Reduced registration completion time for beauty consultation to just two days\n\nWho can access the Messenger API for Instagram?\n\nAll Instagram business accounts have been able to connect to Messenger API for Instagram since August 16, 2021. The rollout of the Messenger API started in June of 2021, and happened in three phases:\n• Phase 1 (June 2021): Instagram accounts with more than 10K followers and less than 100K followers could connect to the Messenger API for Instagram.\n• Phase 2 (July 2021): Instagram accounts with between 1K and 100K followers were granted access to the Instagram Messenger API.\n• Phase 3 (August 2021 -- Current): All Instagram business accounts can now connect to Messenger API for Instagram.\n\nAlthough all Instagram business accounts can now use the Messenger API, it is most suitable for businesses with a high volume of inquiries on Instagram.\n\nHow to get started with the Instagram Messenger API\n\nDevelopers are encouraged to follow Facebook’s documentation to get started with the Instagram Messenger API. A good starting point is to check out Instagram’s sample experience that showcases the key features of the Instagram Platform.\n\nFacebook has even shared the open-source code for the app on GitHub, as well as a guide on how to deploy the experience on your local environment or remote server.\n\nBusinesses can work with an authorized Business Solution Provider, like Hubtype, to use the Messenger API for Instagram. At Hubtype, we have the expertise you need to connect to your existing tools, manage workflows, and use purposeful automation.\n\nAt Hubtype, we know that it’s not as simple as just opening up another messaging channel. All of your communications need to be in sync, with a framework that can grow and adapt to your changing needs.\n\nBy working with an expert, you can streamline the development of your conversational app, control development costs, and make sure you’re compliant with all of Facebook’s terms, policies, and technical requirements.\n\nBook a demo to find out how we can help you deliver next-level customer experiences to your customers. You can also read our article on how to use the Whatsapp Business API here."
    },
    {
        "link": "https://postman.com/meta/instagram/documentation/6yqw8pt/instagram-api",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/61010431/how-to-start-with-the-instagramapi-in-python",
        "document": "i want to play with the InstagramAPI and write some code for like getting a list of my follower and something like that. I am really new to that topic.\n\nWhat is the best way to do this? Is there a Python-Lib for handle those json request or should I send them directly to the (new? graphAPI, displayAPI) InstagramAPI?\n\nAppreciate every advice I can get. Thanks :)"
    },
    {
        "link": "https://github.com/subzeroid/instagrapi",
        "document": "If you want to work with Instagrapi (business interests), we strongly advise you to prefer HikerAPI SaaS project. However, you won't need to spend weeks or even months setting it up. The best service available today is HikerAPI SaaS, which handles 4–5 million daily requests, provides support around-the-clock, and offers partners a special rate. In many instances, our clients tried to save money and preferred instagrapi, but in our experience, they ultimately returned to HikerAPI SaaS after spending much more time and money. It will be difficult to find good accounts, good proxies, or resolve challenges, and IG will ban your accounts.\n\nThe instagrapi more suits for testing or research than a working business!\n• Getting public data of user, posts, stories, highlights, followers and following users\n• Getting public email and phone number, if the user specified them in his business profile\n• Getting public data of post, story, album, Reels, IGTV data and the ability to download content\n• Getting public data of hashtag and location data, as well as a list of posts for them\n• Getting public data of all comments on a post and a list of users who liked it\n• Login by username and password, sessionid and support 2FA\n• Managing messages and threads for Direct and attach files\n• Like, following, commenting, editing account (Bio) and much more else\n\nFast and effective Instagram Private API wrapper (public+private requests and challenge resolver) without selenium. Use the most recent version of the API from Instagram, which was obtained using reverse-engineering with Charles Proxy and Proxyman.\n\nFor any other languages (e.g. C++, C#, F#, D, Golang, Erlang, Elixir, Nim, Haskell, Lisp, Closure, Julia, R, Java, Kotlin, Scala, OCaml, JavaScript, Crystal, Ruby, Rust, Swift, Objective-C, Visual Basic, .NET, Pascal, Perl, Lua, PHP and others), I suggest using instagrapi-rest\n• Performs Web API or Mobile API requests depending on the situation (to avoid Instagram limits)\n• Login by username and password, including 2FA and by sessionid (and uses Authorization header instead Cookies)\n• Like, Follow, Edit account (Bio) and much more else\n• In the next release, account registration and captcha passing will appear\n• Interactions\n• - Collection of medias (name, picture and list of medias)\n• - Tag sticker to story (for example from giphy)\n\nTo release, you need to call the following commands:"
    },
    {
        "link": "https://stackoverflow.com/questions/35604976/instagram-api-using-python",
        "document": "I am currently using Instagram API in the sandbox mode using Python's library. Now, I have an application and its associated client id, client secret and access token, and one connected sandbox user.\n\nEarlier today, I was experimenting with the endpoint. First, I directly used their endpoint URL to send a request:\n\nwhere is the connected sandbox user of my Instagram application. This is the generated response:\n\nNow, I tried using the library to send request to the same endpoint as follows:\n\nHowever, this is the response I get in this case:\n\nWhy is it that I get different responses when I try to call the same endpoint using the direct URL and the Python library?"
    },
    {
        "link": "https://aalapdavjekar.medium.com/how-to-automate-your-instagram-with-python-using-instagrapi-and-replit-com-9fe64e62711b",
        "document": "This week, I wrote a simple program that takes some images and automatically uploads them one-by-one to an Instagram account.\n\nIf you are not too familiar with Python, I’d recommend starting with a basic version of the script that uploads a single image at a time. However, if you do have some experience with the language, I will walk you through the process of creating a script with a scheduler. We’ll explore how to leverage instagrapi, a fast and robust Python library for interacting with Instagram’s private API. We will be using replit.com, a free, cloud-based development platform, to host and run our script. This approach eliminates the need for local setup and allows your script to run continuously without relying on your personal computer.\n\nBy the end of this tutorial, you’ll have a fully functional Instagram auto-posting script that you can customize and expand to suit your specific needs.\n\nI created the images using Midjourney, a popular AI image generation tool, and saved them to a folder. The script, when executed, uploads each image from the folder to the account.\n\nBefore we dive into coding our script, we need to set up our development environment on replit.com. To do this, you’ll have to:\n\nCreate an account (the free tier will do for this project)\n• Create an account. You can sign up using your email, Google account, or GitHub account. Follow the prompts to complete your account creation.\n• Create a new Python Repl: Click on the “+” icon on the top right.\n• Select “Python” as your language, give your program a name, and click on the blue Create Repl button.\n\nIn the repl’s shell (usually on the right side of the screen), install the necessary libraries by typing:\n\nThis command installs the instagrapi library for Instagram interaction and the schedule library for managing post timing.\n\nSince there is no way to make projects private on the free tier, to keep our Instagram login information secure, we’ll use environment variables:\n• In the left sidebar of your repl, click on the padlock icon to open the “Secrets” tab.\n\nThese environment variables can be accessed in your script without exposing sensitive information in your code.\n\nWith these steps completed, your replit.com environment is now set up and ready for us to start writing our Instagram auto-posting script.\n\nIn this section, we’ll break down the main components of our Instagram auto-posting script and explain how each part works.\n\nCreate a new file in the Files tab and give it a name, making sure to use the suffix ‘.py’ when naming it.\n\nEnter the code provided below into the same file…\n\nFirst, let’s look at the libraries we’re using:\n• for keeping track of the script's activities\n\nWe set up basic logging to keep track of the script’s activities. The Instagram credentials are retrieved from environment variables for security.\n\nThe function is a crucial part of our script.\n\nThis function creates a new Client instance, logs in using the provided credentials, and returns the client object.\n\nThe function handles uploading an image to Instagram:\n\nIt takes a client object, the path to an image, and a caption, then uploads the photo to Instagram.\n\nThis function generates a list of posting times, starting from the given start time and posting every hour until either all images are scheduled or midnight is reached.\n\nThe function is the core of our auto-posting script:\n• Checks for images in the ‘images’ folder\n• If images are present, it takes the first image, generates a caption, posts the image, and then removes it from the folder\n• If no images are left, it logs this information and returns False\n\nWe set up the scheduling system as follows:\n\nThis code generates a daily schedule starting one minute from now, then uses the library to set up tasks for each posting time.\n\nFinally, we have the main loop that keeps the script running:\n\nThis loop continues running until all images have been posted. It checks for scheduled tasks every second and updates the count when the image folder becomes empty.\n\nIn your project directory, create a folder named “images”. This folder will contain all the images you want to post to Instagram.\n\nThe script is designed to use the filename of each image as its caption on Instagram. This feature allows for easy and automatic caption generation.\n\nYou can change the feature and even hardcode the captions, if you wish, by editing the code.\n\nIf you prefer custom captions, you can modify the function in the script. Look for the following line:\n\nYou can replace this line with your own caption generation logic. For example, you could:\n• Use a more complex naming convention for your image files\n\nThe images used in this project were generated using Midjourney, an AI-powered image generation tool.\n• Ensure all images are in a format supported by Instagram (JPEG is recommended).\n• Resize images to appropriate dimensions for Instagram before adding them to the folder.\n• Add new images to the folder regularly to maintain a steady posting schedule.\n• Consider using subfolders to organize images by theme or posting date if you have a large number of images.\n\nNow that we have finished writing our code, we can finally run our new Python script!\n\nTo do this, first we will create a configuration file:\n• Hit the green button on top that says Run. You will see the following message appear in the console. Click on >Configuration to continue.\n• In the Confiration Pane, you will have to provide a command that is run every time you click on the Run button.\n• Enter the following command replacing “[your Python file name]” with the name of the file you created and its extension:\n• Once you click the save you will see a new configuration file appear in the Files tab on the left called ‘.replit’. This file can be modified later if you wish to change the default Run command.\n• Now hit Run again and your script should come to life!\n• You should see the following output in the console:\n\nWhen running an automated Instagram posting script, you may encounter various issues. This section covers some common problems and their potential solutions:\n• Double-check that your USERNAME and PASSWORD environment variables are set correctly in Replit.\n• Ensure there are no typos or extra spaces in your credentials.\n• Instagram might temporarily block login attempts if there are too many in a short period.\n• Solution: Implement a delay between login attempts and use exponential backoff for retries.\n• Instagram may block logins from new locations or devices.\n• Solution: You might need to manually log in to your account and confirm the new login attempt.\n• If you’re seeing errors related to “too many requests” or “try again later,” you’re likely hitting Instagram’s rate limits.\n• Solution: Increase the delay between posts. Consider implementing a random delay between 30 minutes to 2 hours between posts.\n• Instagram may temporarily block your account’s ability to perform certain actions if it suspects automated behavior.\n• Solution: Reduce posting frequency and add more randomness to your posting schedule.\n• Ensure all your images are in a format supported by Instagram (JPEG is recommended).\n• Solution: Convert all images to JPEG format before adding them to your images folder.\n• Solution: Compress your images to reduce file size while maintaining quality.\n• Solution: Resize your images to fit Instagram’s recommended dimensions (1:1 square, 4:5 vertical, or 16:9 horizontal).\n• If your script runs out of images, it will stop posting.\n• Solution: Regularly check and replenish your images folder. Consider implementing a notification system to alert you when the folder is running low on images.\n• Free Replit projects go to sleep after periods of inactivity.\n• Solution: Use Replit’s “Always On” feature (requires Replit Hacker Plan) or implement a way to periodically wake up your project.\n• Ensure your environment variables are correctly set in Replit’s Secrets tab.\n• If variables aren’t being recognized, try restarting your Replit project.\n• Instagram frequently updates its API, which can break older versions of instagrapi.\n• Solution: Regularly update the instagrapi library to the latest version.\n• If you encounter unfamiliar errors, check the instagrapi GitHub issues page for known problems and solutions.\n• Consider implementing more robust error handling in your script to catch and log unexpected exceptions.\n\nRemember, when troubleshooting, it’s crucial to check your logs thoroughly. The logging system implemented in the script will be your primary tool for identifying and diagnosing issues. If problems persist, consider reaching out to the instagrapi community or consulting Instagram’s developer documentation for any recent changes that might affect your script’s functionality.\n\nWe’ve walked through the process of creating a Python script that automates Instagram posting. We covered:\n• Setting up the environment on Replit\n• Hosting and running the script on Replit\n\nThis script provides a foundation for automating your Instagram content strategy, allowing you to maintain a consistent posting schedule with minimal manual intervention.\n\nResponsible and Ethical Use of Automation\n\nWhile automation can be a powerful tool for managing social media presence, it’s crucial to use it responsibly:\n• Maintain authenticity in your content and engagement\n• Use automation as a tool to enhance your strategy, not replace genuine interaction\n• Be mindful of posting frequency to avoid overwhelming your followers or triggering Instagram’s anti-spam measures"
    },
    {
        "link": "https://github.com/subzeroid/aiograpi",
        "document": "If you want to work with aiograpi (business interests), we strongly advise you to prefer HikerAPI project. However, you won't need to spend weeks or even months setting it up. The best service available today is HikerAPI, which handles 4–5 million daily requests, provides support around-the-clock, and offers partners a special rate. In many instances, our clients tried to save money and preferred aiograpi, but in our experience, they ultimately returned to HikerAPI after spending much more time and money. It will be difficult to find good accounts, good proxies, or resolve challenges, and IG will ban your accounts.\n\nThe aiograpi more suits for testing or research than a working business!\n• Getting public data of user, posts, stories, highlights, followers and following users\n• Getting public email and phone number, if the user specified them in his business profile\n• Getting public data of post, story, album, Reels, IGTV data and the ability to download content\n• Getting public data of hashtag and location data, as well as a list of posts for them\n• Getting public data of all comments on a post and a list of users who liked it\n• Login by username and password, sessionid and support 2FA\n• Managing messages and threads for Direct and attach files\n• Like, following, commenting, editing account (Bio) and much more else\n\nAsynchronous Instagram Private API wrapper without selenium. Use the most recent version of the API from Instagram, which was obtained using reverse-engineering with Charles Proxy and Proxyman.\n\nFor any other languages (e.g. C++, C#, F#, D, Golang, Erlang, Elixir, Nim, Haskell, Lisp, Closure, Julia, R, Java, Kotlin, Scala, OCaml, JavaScript, Crystal, Ruby, Rust, Swift, Objective-C, Visual Basic, .NET, Pascal, Perl, Lua, PHP and others), I suggest using instagrapi-rest\n• Performs Web API or Mobile API requests depending on the situation (to avoid Instagram limits)\n• Login by username and password, including 2FA and by sessionid (and uses Authorization header instead Cookies)\n• Like, Follow, Edit account (Bio) and much more else\n• Account registration and captcha passing will appear\n• Interactions\n• - Collection of medias (name, picture and list of medias)\n• - Tag sticker to story (for example from giphy)\n\nTo release, you need to call the following commands:"
    }
]