[
    {
        "link": "https://wiki.multitheftauto.com/wiki/Scripting_Introduction",
        "document": "Resources are a key part of MTA. A resource is essentially a folder or zip file that contains a collection of files, plus a \"meta\" file that describes to the server how the resource should be loaded and what files it does contain. A resource can be seen as being partly equivalent to a program running in an operating system - it can be started and stopped, and multiple resources can run at once.\n\nEverything that has to do with scripting happens in resources, what a resource does defines if it is a gamemode, a map, or anything else. MTA comes with resources that you can optionally use in your gamemodes, such as map limits to keep playings within a playing area or death-pickups to create weapon pickups.\n\nWe will first learn how to make a basic script that lets the player walk around in the city, step by step.\n\nWhere are all the scripts?\n\nLet's take a look at the script's file structure. Go to your MTA Server folder, and follow the path below:\n\nYou will see a lot of .zip files, which are the packaged sample scripts shipped with MTA. Each file is a \"resource\", and they will all be unzipped and loaded by the server when it starts. To create your own resource, simply make a folder with your preferred name. We'll use \"myserver\" for this tutorial.\n\nNow you should be under this directory:\n\nIn order to let the server know what's in the resource, a meta.xml file must be created to list the resource's content. It must be located in the resource's root directory, which is the \"myserver\" folder in our case. So create a text file and name it \"meta.xml\", and open it with notepad.\n\nEnter the following codes in the meta.xml file:\n\nIn the <info /> tag, there's a \"type\" field which indicates that the resource is a gamemode instead of a regular include or a map, which will be explained later. A gamemode is what you need to make a stand-alone server.\n\nThe <script /> tag indicates the script files contained in the resource, which we will create next.\n\nNote that in the <script /> tag above, the .lua file is not under another directory. Therefore we'll create the file in the same folder as meta.xml. Now you can copy and paste the following code into script.lua:\n\nThe script will spawn you at the coordinate (x, y, z) specified above when you join the game. Note that the fadeCamera function must be used or the screen will be black. Also, in releases after DP2, you need to set the camera target (otherwise all the players will see is the blue sky).\n\nThe source variable indicates who triggered the event. Since a player has joined when the code is triggered, you use this variable to look which has joined. So it'll spawn that player instead of everyone or a random person.\n\nIf we have a closer look on addEventHandler, you can see 3 things: 'onPlayerJoin', which indicates when it's triggered. getRootElement(), which shows by what/who it can be triggered. (getRootElement() is everything/everyone) And joinHandler, which indicates the function that has to be triggered after the event is triggered. Other details will be explained later in another example, now let's just run the server and try it out!\n\nTo get the server started, simply run the executable under the server/ directory. A list of server stats will be shown first; note the port number, which you'll need when joining the game. Then the server loads all the resources under the mods/deathmatch/resources/ directory, and then \"ready to accept connections!\"\n\nBefore you connect to the server, you must run the gamemode. Type \"start myserver\" and press Enter. The server will start the gamemode you just created, and will also show any errors and warnings from this point on. Now you can start the MTA client, and \"Quick Connect\" using the IP address of your server and the port number you saw earlier. If all goes well, after a few seconds your character will be walking on the streets of Los Santos.\n\nNext, we'll add a command to your script that players can use to spawn a vehicle beside their position. You may skip it and check out more advanced scripting with the Map Manager, which continues this tutorial. Another branch from this tutorial is Introduction to Scripting GUI, you may follow it to see how the Graphical User Interface in MTA is drawn and scripted.\n\nLet's go back to the content of the script.lua file. As mentioned above, we want to provide a command to create a vehicle beside your current position in the game. Firstly we need to create a function we want to call and a command handler that creates the command the player will be able to enter in the console.\n\nNote: Function names are clickable in code examples on the wiki and linked to the functions' documentation.\n\nThe first argument of addCommandHandler is the name of the command the player will be able to enter, the second argument is the function this will call, in this case createVehicleForPlayer.\n\nIf you have already experienced in scripting, you will know that you call a function like this:\n\nIf we have a closer look on the lower example above, we can see argument1 is thePlayer and argument2 the commandName. thePlayer is simply the one who typed the command, so whatever you call it, the variable will contain the player who activated the command. commandName is simply the command they typed. So if they typed \"/greet\", this argument will contain \"greet\". Argument 3 is something extra the player typed, you'll learn it a little bit further in the tutorial. Never forget that the first 2 arguments are standard arguments, but you can name them to anything you want.\n\nWe called the addCommandHandler function this way already and since createVehicleForPlayer is a function too, it can be called that way as well. But we are using a command handler for that, which calls it in a similar manner, internally.\n\nFor example someone types \"createvehicle 468\" in-game in the console to spawn a Sanchez, the command handler calls the createVehicleForPlayer function, as if we would have this line of code in the script:\n\nAs we can see, it provides several parameters: the player who called the command, the command he entered, and whatever text he had after that, in this case, \"468\" as vehicle id for the Sanchez. The first two parameters are the same with all command handlers, which you can read on the addEventHandler page. For this fact, you always have to define at least those two parameters to use any after that (for example to process text that was entered after the command, like in our example the vehicle model id).\n\nNote: You have to add the command handler AFTER you defined the handler function, else it can't find it. The order of execution matters.\n\nIn order to fill the function we created, we need to think about what we have to do:\n• Get the players position, so we know where to spawn the vehicle (we want it to appear right beside the player)\n• Calculate the position we want to spawn the vehicle at (we don't want it to appear in the player)\n• Check if it has been spawned successfully, or output a message\n\nIn order to achieve our goals, we have to use several functions. To find the function we need to use, we should visit the Server Functions List. First, we need a function to get the player's position. Since players are Elements, we first jump to the Element functions where we find the getElementPosition function. By clicking on the function name in the list, you get to the function description. There we can see the syntax, what it returns, and usually an example. The syntax shows us what arguments we can or have to submit.\n\nFor getElementPosition, the syntax is:\n\nThe three float in front of the function name is the return type. In this case, it means the function returns three floating-point numbers. (x, y, and z) Within the parentheses, you can see what arguments you have to submit. In this case, only the element whose position you want to get, which is the player in our example.\n\nNext, we want to ensure that the vehicle won't spawn directly in the player, so we add a few units to the x variable, which will make it spawn east from the player.\n\nNow we need another function, one to spawn a vehicle. We once again search for it on the Server Functions List, this time - since we are talking about vehicles - in the Vehicle functions section, where we will choose createVehicle. In this function's syntax, we only have one return type (which is more common), a vehicle element that points to the vehicle we just created. Also, we see that some arguments are enclosed within [ ] which means that those are optional.\n\nWe already have all arguments we need for createVehicle in our function: The position we just calculated in the x,y,z variables and the model id that we provided through the command (\"createvehicle 468\") and can access in the function as vehicleModel variable.\n\nOf course, this code can be improved in many ways, but at least we want to add a check whether the vehicle was created successfully or not. As we can read on the createVehicle page under Returns, the function returns false when it was unable to create the vehicle. Thus, we check the value of the createVehicle variable.\n\nNow we have our complete script:\n\nAs you can see, we introduced another function with outputChatBox. By now, you should be able to explore the function's documentation page yourself. For more advanced scripting, please check out the Map Manager.\n\nWhat you need to know\n\nYou already read some things about resources, command handlers, and finding functions in the documentation in the first paragraph, but there is much more to learn. This section will give you a rather short overview over some of these things while linking to related pages if possible.\n\nYou may have already noticed these or similar terms (Server/Client) somewhere on this wiki, mostly in conjunction with functions. MTA not only supports scripts that run on the server and provide commands (like the one we wrote above) or other features but also scripts that run on the MTA client the players use to connect to the server. The reason for this is, that some features MTA provides have to be clientside (like a GUI - Graphical User Interface), others should be because they work better and still, others are better off to be serverside or just don't work clientside.\n\nMost scripts you will make (gamemodes, maps) will probably be serverside, like the one we wrote in the first section. If you run into something that can't be solved serverside, you will probably have to make it clientside. For a clientside script, for example, you would create an ordinary script file (for example called client.lua) and specify it in the meta.xml, like this:\n\nThe type attribute defaults to 'server', so you only need to specify it for client-side scripts. When you do this, the clientside script will be downloaded to the player's computer once he connects to the server. Read more about Client side scripts.\n\nThe previous section showed briefly how to add clientside scripts to the resource, but there is also much more possible. As mentioned at the very top of this page, resources can be pretty much everything. Their purpose is defined by what they do. Let's have some theoretical resources, by looking at the files it contains, the meta.xml and what they might do:\n• The commands.lua provides some admin commands, like banning a player, muting or something else that can be used to admin the server\n• The client.lua provides a GUI to be able to perform the mentioned actions easily\n\nThis example might be running all the time (maybe even auto-started when the server starts) as it's useful during the whole gaming experience and also won't interfere with the gameplay, unless an admin decides to take some action of course.\n• The counterstrike.lua contains similar to the following features:\n• Let players choose their team and spawn them\n• Provide them with weapons, targets, and instructions (maybe read from a Map, see below)\n• Define the game's rules, e.g. when does the round end, what happens when a player dies\n• .. and maybe some more\n• The buymenu.lua is a clientside script and creates a menu to buy weapons\n\nThis example can be called a gamemode, since it not only interferes with the gameplay but actually defines the rules of it. The type attribute indicates that this example works with the Map manager, yet another resource that was written by the QA Team to manage gamemodes and map loading. It is highly recommended that you base your gamemodes on the techniques it provides.\n\nThis also means that the gamemode probably won't run without a map. Gamemodes should always be as generic as possible. An example of a map is stated in the next example.\n• The airport.map in an XML file that provides information about the map to the gamemode, these may include:\n• Where the players should spawn, with what weapons, what teams there are\n• What the targets are\n• The airport.lua might contain map-specific features, that may include:\n• Opening some door/make something explode when something specific happens\n• Create or move some custom objects, or manipulate objects that are created through the .map file\n• .. anything else map-specific you can think of\n\nAs you can see, the type attribute changed to 'map', telling the Map manager that this resource is a map, while the gamemodes attribute tells it for which gamemodes this map is valid, in this case, the gamemode from the above example. What may come as a surprise is that there is also a script in the Map resource. Of course, this is not necessarily needed in a map but opens a wide range of possibilities for map makers to create their own world within the rules of the gamemode they create it for.\n\nThe airport.map file might look similiar to this:\n\nWhen a gamemode is started with a map, the map resources are automatically started by the map-manager and the information it contains can be read by the gamemode resource. When the map changes, the current map resource is stopped and the next map resource is started. For a more in-depth explanation and examples of how map resources are utilized in the main script, please visit the Writing Gamemodes page.\n\nEvents are the way MTA tells scripts about things that happen. For example, when a player dies, the onPlayerWasted event is triggered. In order to perform any actions when a player dies, you have to prepare yourself similar to adding a command handler, as shown in the first chapter.\n\nThis example will output a message with the name of the player who died:\n\nInstead of showing what arguments are needed, the documentation page for Events shows what parameters are passed to the handler function, similar to the way a command handler does, just that it is different from event to event. Another important point is the source variable, that exists in handler functions. It doesn't have to be added to the parameter list of the function, but it still exists. It has a different value from event to event, for player events (as in the example above) it is the player element. As another example, you can take a look at the basic spawning player script in the first section to get an idea of how source is used.\n\nWhere to go from here\n\nYou should now be familiar with the most basic aspects of MTA scripting and also a bit with the documentation. The Main Page provides you with links to more information, Tutorials, and References that allow a deeper look into the topics you desire to learn about."
    },
    {
        "link": "https://forum.multitheftauto.com/topic/64228-the-ultimate-lua-tutorial",
        "document": "This tutorial is no longer maintained and it's contents may be deprecated or no longer work. I created this tutorial in 2014, when I was very involved with MTA and the community around it. Due to the nature of life, I ended up leaving MTA to focus on more important things (work, family, life, etc).\n\nI believe this tutorial has helped a lot of people get into scripting for MTA over the years, and I'm happy I was able to do answer questions and help people get into coding!\n\nHello everyone, and thank you for viewing my introduction for Lua scripting. This tutorial will cover the basics of Lua, but nothing too advanced. This tutorial is highly detailed and should give you a pretty good understanding on how Lua works, even if you have never coded it before. Something to remember is that I do not teach or even talk about using object-oriented programming in this tutorial.\n\n- Create a resource and what is required for one - Complete\n\n- Exports & how to call one - Complete\n\nSo, now that you know what you're going to be learning about, let's get started!\n\nIn this section of the tutorial, I'll be teaching what a variable is and what it is used for. First of all, if you have any prior programming experience, you are likely to know what a variable is. Even if you are good at math, you should know what one is. A variable is like what you did in math class, solve for . Only in programming you don't solve for the variable, you set them and you can call them when the script needs to know something. So, A variable something that the user defined in the script. For example, if you set the variable equal to 255, then whenever you call the variable, it will replace it with 255 when the script is ran. Luckly for you, Lua doesn't make you define what type of variable it is (such as a boolean, string, array, etc..) Below I will list some examples of variables. Now, in the example above, whenever the variable , it will replace itself with . Variables can be re-written or in other words, you can change what they mean, shown in the code below. First the variable was defined as but after that, it was updated to . Not only can variables be re-defined, but they can also be duplicated and destroyed.. -- Set the variable var equal to \"Hello World\" (the value of my_var) Now that you have a basic understanding of variables (hopefully), we can move on to the difference between global and local variables. Local variables are variables that won't be defined in the whole script, or resource. They are variables that are defined in the function that is being used. If the variable isn't inside of a function, and is defined at the top of the script, then it will only be used for the file that it's in. Examples below. Here is an example of a variable just being defined in a function: -- You'll learn what this means later The variable \"hello\" will only be valid in the function \"Hello\". This means that if another function tries to call the variable \"hello\" it will return nil because it isn't defined. Here is an example of a variable that is globally defined in a function. Now the variable is defined for the entire script, but only after the function is called, because Lua works on a line-by-line basis, it doesn't all just load at once. Alrighty, now I think you pretty know what a variable is and how it works, but if you you still don't have a clear understanding please visit http://lua.gts-stolberg.de/en/Variablen.php\n\nWhat is a table? If you have programmed in another language and know what an array is, that's basically what a table is. If you don't know what it is, it is basically something you can define to hold a bunch of data in a single variable. So, to being, first I need to explain how to create a table. Tables are created the same way as a variable, only what you define is different, you will define: . For example: Right now the table is empty, so there is nothing in it to be used. There are a few methods to adding data to a table, and I'll be going over them. The first method is to just put the data in it when the table is created.. Such as this: You can define as much data as you want in a table, there isn't a limit. Not only strings have to be defined in a table, anything can be, even more tables can be defined in a table! Tables are a good way to define your stuff, because it keeps things really organized. This method for defining data isn't really a good way, unless your putting in something like coordinates. Most people will use the next method to define their data: This method is used to define an index for a table. The index doesn't have to be a number, but it can be anything that you want (except nil, of course) That is how a lot of scripters like to define their data, because most of the data that they are insert into the table they don't even really know the value of. This method can also be used inside of a table as shown below, they will both do the same exact thing: Now, the last method to insert data to a table is using the default lua function . This function has two arguments that you'll need to have, the table variable and what you want to insert. This method is used sometimes, but not as often as the other two ways. Now you have a basic knowledge of tables, so we can move on to section, functions!\n\nFunctions are the things that MTA creates for scripters to customize their servers and make theme unique. Almost anything that you are going to do in Lua is going to involve some sort of function, whether it is outputting text, formatting a string, or encrypting data, it is all going to use a function of some-sort. So, it's actually very, very basic to make a function in Lua. All you really have to do is write: and then be sure to end the function with at the end. So, let's go head and make your very first function in Lua. So now we have a function defined as , but it doesn't do anything Let's fix that now! Let's make it write \"Function funct loaded\" to the chatbox. To write to the chatbox, we'll be using the function that MTA provides called outputChatBox. The outputChatBox arguments (for server side) are: text -> The text that we want to output outputElement -> The element that we want to output r -> The amount of red you want on a scale of 0-255 g -> The amount of green you want on a scale of 0-255 b -> The amount of blue you want on a scale of 0-255 Now that we have our functions, we're ready to make our function actually do something! So, let's say that we want to send the message to all of the players in the server. If you want to send it to all of the players, you would just put another function called getRootElement() or you can use the MTA defined variable . returns the same thing as getRootElement(), so it doesn't matter what you put. Alright, so now we have created a basic function! But it won't output \\: This function is loaded into the server, but it is never being called, therefore it will never output, all you have to do is call the function, by putting somewhere below the function. The script is working! Now you have created your very very basic function. Let's get crazy! Let's add some function arguments.. We can add an argument to set custom text. So, to add arguments, you have to declare them when the function is created by doing: . That would define you 3 arguments. Think of the arguments as local variables defined inside your function, because that is basically all they are, and you can define them whenever you call the function, anyway, let's go head and add ourself some arguments! Now that we have our argumnet defined, let's set it when the function is called. This is done by doing: . Great! You're doing awesome so far on learning Lua! Now that we have the argument defined, lets go head and put it somewhere in the script. We can just replace our old message with the new argument, so you just have to replace the text with the argument (not in a string) Good job so far, you'll be a Lua master in no time at all! Now that we have our script working good, let's combine a variable and a string in the chatbox message. This is done by doing Now that you know what a function is and what arguments are, let's try adding some more arguments.. What should we do? Let's add some color codes shall we? All we basically are doing is re-creating the outputChatBox function. Feelin' like a scripter yet? Good! You're on the way to success.\n\nSo, now you're like a Lua professional! What is a loop? A loop is something to execute a piece of code amount of times. There are three types of loops that I'll be covering in this topic; table loops (pairs/ipairs), number loops (for i=x;10), and while loops. Let's just jump right into it! This type of loop is used to loop through everything inside of a table. It runs through all of the table index's and you can just do whatever you want with them. For the first example, I'll be getting all of the players in the server using getElementsByType(\"player\"). I'll get their names and output them to the chatbox, using the function that you should know by now, outputChatBox. \"The server says hello to \" In the example below, the script will get all of the players, put them into a table, and then put the table variable as . After all of the players are gotten and stored in the variable, it begins a for loop through the table. Index is the ID of the table that the loop is currently running, and player is what it returns in that index. is returning the players name, and then we output it. This type of loop is used, if the scripter knows exactly how much he wants the piece of code to run. It goes in the format and index is the variable that you're using for the number, 0 is the number that you want the table to begin at, and 100 is the number that you want the loop to go to. So, we're just going to make a loop for color codes, it will output the RGB color code, and make it the color that it is. This will be done be making a loop start at 0 and run to 255. Kinda colorful don'tcha think? As I'm sure you can see, loops are actually pretty basic to use, but they're EXTREMELY useful for coders. A while loops is a little bit different than the other two. A while loop runs while the argument that you put is true, or it reaches break. It is always important to make sure this loop ends, because if it doesn't your entire script will stop working and you'll get a stack overflow error message. We'll write the script that we just did, except this time in a while loop using a variable, and adding 1 to the variable each time. Something that is really useful when you're dealing with loops, is using or . When you use one of these methods, it will stop the loop immediately. For example, if you are running a while loop, and the statement is always going to be true, then you're going to need to use or . These are usually done using a basic statement. in the above script, it will always output chat if we didn't add a break. Once it outputs 200 times the will become true, and then it will stop the loop.\n\nAn if is just what you think it is. It is a thing to check if your arguments are valid. If they are valid, then the code will continue to run. If it isn't then it'll look for elseif, until it finds one that is true. If it can't find an elseif then it will simply run the else. If statements are really, really important when it comes to any type of programming. Whether it is Java, C++, or Lua, you need to know how to use an if statement, because there isn't much you can do without it. Let's get started with some basic if statements. -- Check to see if [i]player[/i] is equal to \"xXMADEXx\" \"This is your message!(:\" That code will work without a problem because the statement is returning true. Now, let's make it return false, and watch the results. -- Check to see if [i]player[/i] is equal to \"xXMADEXx\" \"This is your message!(:\" As you can see for that script, it will output to the console rather than outputting to the xXMADEXx player. Now, let's add another statement to check if the xXMADEXx player exists in the server. -- Check to see if [i]player[/i] is equal to \"xXMADEXx\" \"If Tutorial: The player variable is equal to \" \"This is your message!(:\" In that script, if is equal to xXMADEXx, then it would output to xXMADEXx, if he was in the server. If he wasn't then it out send a debug message saying that he wasn't in the server. As you can see, if statements are highly important, and really easy to do. Almost any script that you will make will have at least one if statement. Now, let's make: if -> elseif -> else. -- Check to see if [i]player[/i] is equal to \"xXMADEXx\" \"If Tutorial: xXMADEXx isn't present, but r was higher than 50.\" \"If Tutorial: The player variable is equal to \" \"This is your message!(:\" As you can see, if statements are really useful and easy to do. More info @ http://www.lua.org/pil/4.3.1.html\n\nGood, you've made it this far, you have what it takes to be a successful scripter, without a doubt! Now, I'm sure you want to learn how to add commands, because they're fast and easy to both create and execute. To add a command, you just stimply need to use the function addCommandHandler. Simple as that, just throw in your command name and the callback function! Here, let's get you started to just make a simple /kill command. Now, as you see in the code before, the player who executed the command is NOT as many new people to scripting MTA might think, don't be ashamed though, that's exactly what I thought when I first used the function. The player, the one who executed the command will be defined to the first argument of the callback function, so in my little command script, it just set the player to the variable (go figure lol). So, now let's build a bit of a more advanced command to do and where is, you can enter a number and it'll spawn a vehicle to you. Let's get started!! -- Now we know he has a vehicle ID (arg1) and it's an integer, now we need to check if it's between 400 and 611. -- Let's convert and round it, to prevent \"code-buggers\" As you can see in the code above, it's pretty straight forward. When you enter the command it'll run the function. will be set to the first argument that the player gives in the command. (This: ) will be set to the value that the user gives. First the function will check to see if the argument exists, and if it does, or the argument cannot be converted to a number then it will output a simple syntax error and stop the function with . If exists, and it can be converted to a number, then the code will take the value, convert it to a number, then round it to the lowest number if it's a decimal. After that, it checks if the number is a valid vehicle ID, and if it isn't then it just outputs a basic error saying it's invalid. If it is a valid number, it'll get the players position and rotation, then create a vehicle in the position and set the rotation Z axis to the players, then warp the player in and output a message.\n\nYou might be asking yourself, what is an export? Well, when you create a function, if it's global or a local function, MTA will make it only accessable by your resource. When you try to call the function in another resource, it'll say that it is undefined. An export gives you the ability to call a function that is contained in another resource. For example, in my resource TopBarChat (It's horrible English, I know) I made the function exported, so it can be used in any resource. Now, it's actually very easy to add an export, it's all about the meta. You just need an tag, with an attribute which is equal to the function that you want to export, and an optional attribute which tells whether it's a server or client function, server by default. There's some other attributes, however i'm not going to get into them because they're more for web-based applications. Let's say I have a resource named and it contains a function with the arguments:\n• - - A string of the message\n\n - - The player element to output to\n\n - - the R color from RGB\n\n - - the G color from RGB\n\n - - the B color from RGB So, in the resource, let's go head and create the server-side function. Now that the function is created, we need to create the meta. Now that we have our meta, we need to add the following line to export the function into other resources. Basically, the export line in the meta adds the function to a table called under the index of the resource name. Pretty basic right? Here is a basic diagram of the exports table: Say we have another resource, and we want to call the function that is exported in the resource. All you have to do is call the exports -> resource -> function_name. Here's what it would look like for the messages resource and the function message function: The main reason I never use method 3 is because it's easier to get confused, and it takes longer to type. I typically do method 1, but sometimes method 2.\n\nGood luck with your Lua scripting career, I hope that this tutorial has helped you!"
    },
    {
        "link": "https://github.com/multitheftauto/mtasa-blue",
        "document": "Multi Theft Auto (MTA) is a software project that adds network play functionality to Rockstar North's Grand Theft Auto game series, in which this functionality is not originally found. It is a unique modification that incorporates an extendable network play element into a proprietary commercial single-player PC game.\n\nNote If you're a fork developer, please read this note carefully. We have changed the default build type back to CUSTOM in . If you're developing without the anti-cheat in mind, say in the Debug configuration, this doesn't affect you at all. Now, if you plan to test your custom client with anti-cheat enabled, you should change your build type to . If you want to publish a release of your custom client, you must switch to a fork support hardened release of . Please read our Forks_Full_AC wiki page for more information.\n\nMulti Theft Auto is based on code injection and hooking techniques whereby the game is manipulated without altering any original files supplied with the game. The software functions as a game engine that installs itself as an extension of the original game, adding core functionality such as networking and GUI rendering while exposing the original game's engine functionality through a scripting language.\n\nOriginally founded back in early 2003 as an experimental piece of C/C++ software, Multi Theft Auto has since grown into an advanced multiplayer platform for gamers and third-party developers. Our software provides a minimal sandbox style gameplay that can be extended through the Lua scripting language in many ways, allowing servers to run custom created game modes with custom content for up to hundreds of online players.\n\nFormerly a closed-source project, we have migrated to open-source to encourage other developers to contribute as well as showing insight into our project's source code and design for educational reasons.\n\nMulti Theft Auto is built upon the \"Blue\" concept that implements a game engine framework. Since the class design of our game framework is based upon Grand Theft Auto's design, we are able to insert our code into the original game. The game is then heavily extended by providing new game functionality (including tweaks and crash fixes) as well as a completely new graphical interface, networking and scripting component.\n\nBy default, Multi Theft Auto provides the minimal sandbox style gameplay of Grand Theft Auto. The gameplay can be heavily extended through the use of the Lua scripting language that has been embedded in the client and server software. Both the server hosting the game, as well as the client playing the game are capable of running and synchronizing Lua scripts. These scripts are layered on top of Multi Theft Auto's game framework that consists of many classes and functions so that the game can be adjusted in virtually any possible way.\n\nAll gameplay content such as Lua scripts, images, sounds, custom models or textures is grouped into a \"resource\". This resource is nothing more than an archive (containing the content) and a metadata file describing the content and any extra information (such as dependencies on other resources).\n\nUsing a framework based on resources has a number of advantages. It allows content to be easily transferred to clients and servers. Another advantage is that we can provide a way to import and export scripting functionality in a resource. For example, different resources can import (often basic) functionality from one or more common resources. These will then be automatically downloaded and started. Another feature worth mentioning is that server administrators can control the access to specific resources by assigning a number of different user rights to them.\n\nOur project's code repository can be found on the multitheftauto/mtasa-blue Git repository at GitHub. We are always looking for new developers, so if you're interested, here are some useful links:\n\nVisit the wiki article \"Compiling MTASA\" for additional information and error troubleshooting.\n\nYou can build the MTA:SA server on GNU/Linux distributions only for x86, x86_64, armhf and arm64 CPU architectures. ARM architectures are currently in experimental phase, which means they're unstable, untested and may crash randomly. Beware that we only officially support building from x86_64 and that includes cross-compiling for x86, arm and arm64.\n\nPlease always read the Dockerfiles for up-to-date build dependencies. Note: ncftp is not required for building the MTA:SA server.\n\nNote: This script always deletes and directories and does a clean build.\n\nIf build architecture is not provided, then it's taken from the environment variable (defaults to: x64).\n\nIf build configuration is not provided, then it's taken from the environment variable (defaults to: release).\n\nIf you are trying to cross-compile to another architecture, then set , , , environment variables accordingly (see Dockerfile.arm64 for an example).\n\nIf you don't want to build the release configuration for the x86_64 architecture, you can instead pick another build configuration from: .\n\nIf you have problems resolving the required dependencies or want maximum compatibility, you can use our dockerized build environment that ships all needed dependencies. We also use this environment to build the official binaries.\n\nThese examples assume that your current directory is the mtasa-blue checkout directory. You should also know that is the code directory required by our Docker images inside the container. If the current directory is not a valid git repository, it instead create a (shallow) clone of the mtasa-blue repository. After compiling, you will find the resulting binaries in . To build the unoptimised debug build, add to the docker run arguments.\n\nUnless otherwise specified, all source code hosted on this repository is licensed under the GPLv3 license. See the LICENSE file for more details.\n\nGrand Theft Auto and all related trademarks are © Rockstar North 1997–2024."
    },
    {
        "link": "http://lua-users.org/wiki/LuaUses",
        "document": "Simultus allows the simulation of a device as a whole consisting of a mechanical design and a control program. Simultus software is used for prototyping and testing systems, allowing the user to avoid errors at the production stage.\n\nSmartThings? is a home IoT platform based around a physical hub that can control Zigbee, Z-Wave, and LAN devices. Individual devices are supported by [Edge Device Drivers] which are written in Lua and are run directly on the hub in a sandboxed environment. Drivers are written on a custom framework that uses a semi-event-based pattern. High-level events can have event handlers registered, which are then run within a [cosock] coroutine thread which allows simple blocking-style socket programming when interacting with devices.\n\nLua is also the native language of NSBase, database management software. Scripting makes it possible to make forms and reports more dynamic. Lua thus integrated makes it possible to create real database management applications.\n\nScrevle is a hardware platform that allows building an embedded product without the troubles of embedded development.\n\nSimply browse to the on-board Lua Development Environment and get immediate access to hardware (UART, I2C, SPI, ADC/DAC, PWM, CAN, ...) and software APIs (SMTP & HTTP client, GUI, SD-Card, Settings,...).\n\narcapos® is a point of sale solution for ticketing, libraries and retail. It is fully extensible using the Lua language. From Lua, you gain access to all peripheral devices, ticket printer, receipt printer, credit card terminals etc.\n\nChinese Text Analyser is a tool for people learning the Chinese language that keeps track of a user's known vocabulary and makes it easy to find text suited to their vocabulary level. It can also be used to extract lists of unknown words and sentences from Chinese text, and for gathering various word frequency statistics.\n\nIt exposes a large amount of its core text processing and statistics gathering features to Lua, and users can write Lua scripts that they run from within the application to manipulate text documents and extract useful information.\n\nV-REP is a 3D robot simulator based on a distributed control architecture: Lua scripts (i.e. control programs) can be directly attached to scene objects and run simultaneously in a threaded or non-threaded fashion. This makes V-REP very versatile and ideal for multi-robot applications, and allows users to model robotic systems in a similar fashion as in reality - where control is most of the time also distributed.\n\nSim City 4 continues a long tradition of high-quality city simulation games by Maxis. The game uses Lua for configuring game constants and to control various of its elements including the user interface, tutorials, advisors, and automata. Third-party plugins for Sim City can access these features to define the behavior of custom content.\n\nWorld of Warcraft is a massively multiplayer role-playing game (MMORPG) which uses Lua as an embedded scripting language for the UI subsystem. This allows rapid prototyping of new features during development, and has the benefit that customers are able to customize and improve their own interface, through mods and addons.\n\nAdobe Lightroom is \"the complete, elegant environment for the art and craft of digital photography from raw capture to creative output\". Over 40% of Adobe Lightroom is written in Lua.\n\nWarhammer Online is a new MMORP game from EA Mythic (the creators of Dark Age of Camelot). Mythic has been a prolific creator of multiplayer online games since its formation in the mid 1990s. In 2006 the company was bought by Eletronic Arts.\n\nAccording to Lance Robertson, the Producer of Warhammer Online, \"we are aiming for the game interface to be very modifiable; the actual method we have chosen for WAR is to have Lua addons.\" These Lua mods follow the same popular fashion of World of Warcraft mods, where authors can customize the default Warhammer Online interface all the way to create full new interfaces and functionality.\n\nLua / Luajit is used as the backend for data generation, also used together with openresty, the luajit enabled nginx web server. Has enabled lots of possibilities in fast coding and server resource saving as luajit's server footprint is minimal compared with the next commonly used scripting language such as Perl or PHP. Sites powered by [[bczcentral.com]], the IT solution provider arm for [[bcz.com]], uses luajit for analytics and chat messaging as well.\n\nCryENGINE2 is the successor of CryENGINE, the game engine behind Far Cry. Among others, the engine is used by Crysis, a first-person shooter game developed by Crytek and published by Electronic Arts. The use of Lua allows the setup and tweaking of weapons/game parameters, playing of sounds and loading of graphics without touching the C++ code. CryENGINE2 is also used in non-game applications like IMAGTP, a 3-D virtual visualization program.\n\nMetaplace is a next-generation virtual-worlds platform designed to work the way the Web does. Instead of giant custom clients and huge downloads, Metaplace lets you play the same game on any platform that reads its open client standard. It supplies a suite of tools so you can make worlds, and it hosts servers for you so that anyone can connect and play. And the client could be anywhere on the Web.\n\nMetaplace committed to an open markup standard for its network protocol - anyone can write a client for any platform they want. It uses Web standards for everything it could, which is why you can have a game world that is also a website, or use Web data to populate your world. The game logic is written in Lua, so it is easy to make whatever kind of game or world you want.\n\nFar Cry uses Lua extensively for scripting all game events and AI/game logic, both for single and multiplayer game, and for realtime game editing.\n\nSupreme Commander (Sup Com) is a real-time strategy computer game designed and developed by Gas Powered Games. The game is considered to be the successor to Total Annihilation, which was ranked by Game Spy as the number one real-time strategy game of all time. Lua is the language used by Supreme Commander for most of the high-level game code. Lua is also the language used to write Sup Com mods.\n\nJive is a software platform designed to power the development of remote control applications for Squeezebox and Transporter. The key highlights of the Jive platform are the Jive Browser, a resolution and color-depth independent renderer that allows us to power a wide range of display types, from monochrome VFDs to full color LCD screens; and the Jive UI, a new, Lua-based, scalable user interface that can be completely customized by anyone familiar with Lua, a powerful, open-source scripting language.\n\nGarry's Mod is a Half-Life 2 Modification. It won \"Mod of the Year\" (2005) from ModDB, \"PC Mod of the Year\" (2005) from Game Spy, and \"Best Mod 2005\" from PCGamer US. Lua opened a lot of doors to Gmod players, allowing them to script new weapons, gamemodes, and other features. There may never be any addition that was quite as great as Lua.\n\nLua TeX is an extended version of pdfTeX using Lua as an embedded scripting language. The Lua TeX projects main objective is to provide an open and configurable variant of TeX while at the same time offering downward compatibility.\n\nMySQL Proxy is a lightweight binary application standing between one or more MySQL clients and a server. The clients connect to the Proxy with the usual credentials, instead of connecting to the server. The Proxy acts as man-in-the-middle between client and server. The Proxy ships with an embedded Lua interpreter. Using Lua, you can define what to do with a query or a result set before the Proxy passes them along.\n\nThe power of the Proxy is all in its flexibility, as allowed by the Lua engine. You can intercept the query before it goes to the server, and do everything conceivable with it, like pass it along unchanged, fix spelling mistakes, rewrite the query, etc.\n\nNmap (\"Network Mapper\") is a free open source utility for network exploration or security auditing. Nmap uses raw IP packets in novel ways to determine what hosts are available on the network, what services (application name and version) those hosts are offering, what operating systems (and OS versions) they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics. It won Linux Journal's Editor's Choice Award for Best Security Tool, Linux Questions.Org Security App of the Year award, and Info World's Best Information Security Product award.\n\nThe Nmap scripting language is an embedded Lua interpreter which was extended with libraries for interfacing with Nmap. Lua was chosen because it exceeded in all criteria for Nmap: it is small, distributed under the MIT license, has coroutines which provide a sane method for parallel script execution, was designed with embeddability in mind, has excellent documentation, and has a large and committed community.\n\npbLua is an implementation of Lua 5.1 for the LEGO Mindstorms NXT. It is based on the open-source code for the NXT brick provided by LEGO. The low level drivers were modified slightly and then integrated with the Lua sources. pbLua is an alternative text-based programming environment for the NXT that supports coroutines, strings, tables, and limited floating point operations. The NXT is based on the ARM7 micro with 256K of FLASH and 64K of RAM. pbLua looks like a serial port to a PC and connects via USB. It is completely self contained as it runs the parser right on the brick. Eventually, we'll support the Mac and Linux platforms when we figure out how USB gets enumerated on those platforms.\n\n\"There\" is an online getaway where you can hang out with your friends and meet new ones -- all in a lush 3D environment that's yours to explore and help build. The game is written mostly in C++, served mostly from a scalable Linux cluster, with additional customization using There Script, which is Lua plus added functions.\n\nLua Player helps programmer newbies to write their own games in Lua. It provides some game related functions, like image loading and blitting and is available for Sony's Playstation Portable and perhaps later for other platforms.\n\nLua 4.0 was integrated into the system that is used to monitor gas concentration levels during Space Shuttle launch operations. Launch personnel use Lua to perform some of the more tedious tasks such as long duration leak testing and statistical data collection. Lua was integrated into the Windows application that provides remote control of leak detection equipment installed at the launch pad. The remote control application provides hooks into Lua that allow a Lua script to gain access to the data collected and to issue commands to the leak detection equipment. Lua was chosen mainly because it is an easy language to understand (a benefit for the launch personnel) and it is very easy to integrate into a project.\n\nPsychonauts is an XBox Action/Adventure game from the mind of Tim Schafer. All of Psychonauts Game logic is implemented via Lua. The Level Designers use Maya to create the geometry for the levels, and then place down markers for Lua controlled Script Entities. This includes all non-player characters, platforms, puzzle pieces. Basically the game engine boots up and places the main player into a static world. Lua scripts then take over and control all interactive elements. Lua is so light and fast! It is AWESOME!\n\nHeroes of Might and Magic V (HoMM5) is the fifth installment of the Heroes of Might and Magic computer game series. Lua is used for custom logics programming. The regular game process is programmed in C++, but all the high level functions (as hero movement, spell casting, changing resources or creatures quantity, placing map objects, creating text boxes, etc.) are also accessible from Lua script. Nival Interactive map and game designers use Lua for their needs because the language is simple to study and easy to use by non-programmers. And the programmers like Lua, because it can be easily bound to the existing C++ code and it's powerfull enough for a wide variety of applications.\n\nS.T.A.L.K.E.R.: Shadow of Chernobyl is a game of the genre FPS - \"first person shooter\". It has sold over 1 million copies for PC worldwide. The project has been developed for 6 years, and included 20 programmers (7 script writers). It uses Lua 5.0.2 with LuaJIT (thanks to Mike Pall). Lua was chosen because of its simplicity, speed, and the availability of an open-source binding library (luabind). Lua is an open-source project with 10 years of history, with a large community, with few bugs, and that has been used in many other FPS games.\n\nBarracuda provides Lua Server Pages (LSP) for web page authoring. The Barracuda platform is an advanced Embedded Web Server designed for controlling and monitoring embedded industrial applications in real time. The Barracuda Web server has a very small footprint and runs on almost any platform. LSP provides support for most of the Barracuda APIs (cookies, sessions, RPC, etc.) and has built-in Lua-SQL support. Barracuda LSP can be extended with existing Lua libraries. LSP applications can be packaged as ZIP files and/or embedded in the Barracuda web server executable.\n\nBarracudaDrive? transforms your computer and devices such as Raspberry Pi into a powerful and secure online storage system, letting you access and share files from any connected computer or device in the world.\n\nBarracudaDrive? is an application server, and it allows anyone with web and server side experience to extend and/or change the server. BarracudaDrive? supports a server-side scripting language called Lua Server Pages or LSP for short. See the [BarracudaDrive developer page] for more information.\n\nWireshark is the world's foremost network protocol analyzer, and is the standard in many industries. Wireshark is used by network professionals around the world for troubleshooting, analysis, software and protocol development, and education. It has all of the standard features you would expect in a protocol analyzer, and several features not seen in any other product. Lua been added to Wireshark as a language for prototyping and scripting. Lua can be used to write dissectors, post-dissectors and taps (a mechanism to fetch data from every frame).\n\nHercule is the firmware development platform for Olivetti printers, used in ANY_WAY and MY_WAY series. Lua is used as a configuration script to take the decisions about print modalities, provided desired qualities. This allows the printer driver to behave identically at run time. Additionally, Lua scripts can be executed directly from memory cards, without any host computer, simplifying test and production tasks.\n\nGiggle is a renderman procedural DSO developed for the production of visual effects created for the film 'Troy'. This project required the rendering of scenes comprising tens of thousands of battling soldiers,in addition to complex city layouts and particle effects for flames, smoke and dust. The generation of all this geometry was handled almost exclusively at rendertime by Giggle.\n\nGiggle's core functionality comprises approximately 40,000 lines of C++, written by 2 MPC programmers over the course of 9 months. This provides many capabilities including : * loading of geometry, shaders, particle caches and a proprietary cache format for agent simulations. * skinning and other geometry modifiers * procedural geometry generation * kd tree classes for space partitioning * geometry evaluators to perform ray intersections and closest point queries\n\nThe functionality is bound into Lua, providing a flexible scripting interface which allows it to be easily adapted to specific tasks. MPC initially chose Lua for its reputation for speed and efficiency as well as for the great simplicity of its API. It has subsequently proved itself through heavy use by a team of 16 or so CG artists and across a renderfarm of over 500 machines.\n\nSince adoption, Giggle's use has been extended to other MPC feature pipelines, and coupled with an interactive interpreter and OpenGL preview renderer to provide interactive script development and debugging.\n\nImpossible Creatures is a PC RTS (real time strategy) game released on January 7th 2003. The project has 100's of thousands of lines of code and was written by ~8 programmers. Lua contributed about 50,000 lines of that code.\n\nLua was used extensively in all aspects of the game. It was used to configure almost every system and subsystem in the game. It defined and controlled the UI, managed the AI, and specified the look of the effects and other graphical entities. It was used in tuning the game in realtime, for editing unit attributes, processing the game rules, automation of tasks, and on and on.\n\nLua was chosen because of its speed, its simple syntax and its ease to understand for both programmers and designers. It was also easy to debug, modify and itegrate into our C++ game/ tools.\n\nDigital Fusion is a fully integrated, non-linear compositing and special effects post-production system for finishing, design and effects creation, used extensively in many feature films, HDTV productions, broadcast video, web-based/multimedia projects and more. Lua forms the basis of 'DFScript', an integrated scripting language added in Digital Fusion v4. This allows the automation of repetitive tasks within the program, as well as facilitating integration into other aspects of a post production facility, such as clip management, 3D renderer integration, EDL/conform integration etc.\n\nToME is a free roguelike game. It is a very evolved and deep game that started its life as a variant of Angband (of one of the variants actually) and has now grown into a wildly new game.\n\nToME uses Lua to allow customization of the engine, new quests, spells, powers, whatever. A lot is customizable thanks to Lua, and a lot more will be. Lua was selected because of its portability, smallness, clarity of syntax, tables and general neatness :)\n\nPublique! is a web based content management system. The information structure managed by Publique! can comprise an entire HTML site or just part of it. Publique! can also be used as an XML based web service or as an WML front end. Publique! offers a workflow based on three user types or actors: Authors, Editors and Readers.\n\nThere are currently more than 100 sites using Publique in Brazil, Argentina, USA and Japan. The current version (2.2) is available in Portuguese and English. Japanese and Spanish versions are on the way.\n\nPublique started in 1998 and has been developed by a team of 3 to 7 programmers during its lifetime. The production team totals 30.\n\nPublique uses a modified version of [CGILua] as its current web engine and consists in almost 50K lines of Lua and 5K line of C (not including CGILua itself).\n\nLua has been chosen for its ease of prototyping, speed of execution and extensibility. It is used for almost every feature in the system other than the OS Platform, DBMS and Web Server abstraction layers.\n\nTecgraf is the result of a partnership between PUC-Rio, the Pontifical Catholic University of Rio de Janeiro, and [PETROBRAS], the Brazilian Oil Company. Tecgraf is Lua's birthplace, and the language has been used there since 1993. Currently, more than thirty programmers in Tecgraf use Lua regularly, who have written more than two hundred thousand lines of code, distributed among dozens of final products.\n\nMulti Theft Auto (MTA) is a multi-player modification for Rockstar North's Grand Theft Auto game series. Originally founded back in early 2003 as an experimental piece of software, Multi Theft Auto has since grown into an advanced multiplayer platform for gamers and third-party developers. Starting with MTA for Grand Theft Auto: San Andreas, you can play Grand Theft Auto on-line with your friends, in your own custom created maps and gamemodes, powered by the Lua scripting language and currently (as of end 2006) 373 game specific Lua functions! The use of Lua allows you to create virtually any gamemode or feature you like in the game. Examples and other cool Lua stuff can be found at our homepage.\n\nSetup Factory is a Windows software development tool for creating compact software installers for deployment via web, email, LAN, CD, DVD and floppy disk. Its compact single-file setup creates little runtime overhead (~450KB including uninstall) making it fast and easy to initialize and install. It uses Lua 5.0 as a scripting language to control and customize the installation process.\n\nSciTE is a SCIntilla based Text Editor. Originally built to demonstrate Scintilla, it has grown to be a generally useful editor with facilities for building and running programs. It is best used for jobs with simple configurations. SciTE features a lot of modern editor features (most provided by Scintilla) like syntax highlighting of code, call tips, autocompletion of code, folding, etc. Since version 1.60, Lua can be used to perform operations on the current buffer, using the full API of the Scintilla component.\n\nAuto Play Media Studio is a unique software tool which allows you to quickly create your own custom Windows software, autoplay/autorun CD/DVD ROMs, and interactive multimedia presentations. Simply drag and drop rich media content such as photos, video, audio, Macromedia Flash content, text, HTML, and more directly into your project. You can tie it all together with a powerful freeform scripting engine based on the popular Lua language. This easy-to-understand scripting language features everything from \"for, repeat and while\" loops, to \"if/else\" conditions, functions, variables and tables (associative arrays). We've included a library of 350+ powerful actions (high level functions) along with built-in mathematical and Boolean evaluation. The point-and-click \"Action Wizard\" and \"Code Wizard\" make is easy enough that even complete novices can add powerful interactivity to their projects. Advanced developers will appreciate the color syntax highlighting, code completion, function highlighting, as-you-type action prototypes and Ctrl+Space function listings. Auto Play Media Studio Personal Edition is a free non-commercial version of Auto Play Media Studio.\n\nHomeworld2 is a space PC RTS game that uses Lua4 extensively in almost every aspect of the game, including the UI, AI, game rules, game flow, stats, game attributes, game tuning and automation.\n\nWe use Lua for several parts of the project. We first chose it to be the language for mission scripting (triggers and other stuff), but currently we use Lua for mission scripting, sound scripting, data definition language, general preprocess tools and other uses.\n\nGUPPY (Genetic Understanding Perspective Preview sYstem) is a program for visualizing information of sequence databases in molecular biology. This program aims to accelerate computational tasks for various studies in bioinformatics. Our current development involves prototyping additional functions for some of active biological projects. Lua language was embedded in this program in order to facilitate data processing and scripting functions for layout of the sequence map.\n\nThis program also features highly interactive operations for smooth scrolling and zooming from the genomic landscape to discrete nucleic acid sequences.\n\nTomsrtbt includes a Lua interpreter with luasocket, md5, and regex libraries as well as vi and emacs editors, along with other tools. Utilities currently written in Lua include: wc unrpm-- undeb-- tee split login head grep dirname cut cmp basename dhcpcd--.\n\nSoul Ride is a PC snowboarding game featuring expansive real-world terrain and physics-based gameplay and character animation. We used stock Lua 3.2.2 in the engine as a configuration facility and console interface, and for scripting some game events. We dropped Lua into the engine late in development, and it proved to be simple, functional and headache-free.\n\nCrazy Ivan was the robot that won the Robo Cup 2000 in Denmark. Crazy Ivan has a \"brain\" that uses Lua for scripting language. All AI and logic is done in Lua. The brain is running on a Motorola Coldfire 5206e processor, and Lua is modified to use only int's as the Coldfire has no FPU.\n\nIllarion is an open source graphical online roleplaying game that focuses on true roleplaying. Illarion uses Lua as scripting language since 04/2005. Among other systems, non-player-characters, quests, spellcasting, fighting and crafting are handled by Lua scripts. Started in 2000, Illarion evolved to a feature rich online game, mostly comparable to Ultima Online. Illarion is using a Java client, based on the Slick 2D Game Library. It is funded by the Illarion e.V. and can be played free of charge.\n\n\"DCS: Black Shark\" is a PC flight simulator of the Russian Ka-50 attack helicopter and is the first title in a new Eagle Dynamics and The Fighter Collection simulation series: \"Digital Combat Simulator\" (DCS). Following Eagle Dynamics' tradition of excellence, \"DCS: Black Shark\" will bring an even more realistic simulation experience than its predecessor \"Flaming Cliffs\". \"DCS: Black Shark\" will offer an unprecedented level of realism in regards to flight dynamics, instruments modeling, avionics systems, and weapon systems. The artificial Intelligence of ground vehicles and helicopters has been improved dramatically as well as weapon modeling. A new Mission Editor includes a powerful electronic mapping system that allows user to easily create missions and campaigns. A new campaign system allows the front line of the battlefield to move back and fourth according to your mission success or failure. Due to the increased flexibility of the DCS system, additional fixed-wing aircraft and helicopter add-ons will follow shortly.\n\nOh My Bot is a tool for automation and bots creation. It has a rich API, uses Lua as scripting language and has an integrated graphical Lua debugger.\n\nDaimonin is a MMORPG and is using Lua server sided as general purpose script engine. It is used in combination with the map editor as quest and communication interface but also as AI extension or event triggered inside a map.\n\nThe base plugin to the C server and the scripts are hosted on the [sourceforge project SVN]\n\nFrom the above-linked website: Asterisk is software that turns an ordinary computer into a communications server. Asterisk powers IP PBX systems, VoIP gateways, conference servers and more. It is used by small businesses, large businesses, call centers, carriers and governments worldwide. Asterisk is free and open source.\n\nHexinator is a modeling tool for binary files. So-called grammars describe binary file formats in an abstract way. The parsing logic can be extended with custom Lua scripts. Additionally, special data types can be implemented with Lua."
    },
    {
        "link": "https://github.com/OwlGamingCommunity/MTA",
        "document": "This repository contains the OwlGaming MTA codebase for Multi Theft Auto. The recommended way to deploy the code is using a docker image.\n\nThe code in this repository comes from various sources from probably nearly a decade of development. Thank you to everyone who contributed over the years.\n• Refer to the environment variable below and deploy using your MySQL Database\n• You can grab the latest structures for your database from\n\nLogs are written to as they are created in game. It's recommended to pick these up using Filebeat with Elasticsearch to make them searchable."
    },
    {
        "link": "https://forum.multitheftauto.com/topic/139339-working-with-data",
        "document": "Storing player information such as points, cash, kills, and deaths in a database, rather than in the game's internal data, can be a more suitable option if you want to create a ranking panel or if you have performance concerns.\n\nUsing an SQL database to store player information, such as MySQL, allows you to easily retrieve and update player information, as well as run more complex queries and create more advanced systems. It also allows you to store this information even if the server restarts or the player logs out, you can use the SQL queries to update the data even when the player is not online.\n\nOne way to implement this in your gamemode would be to use the SQLite or MySQL library for Lua that is provided by the community to perform SQL queries on a local or remote database. You can use the queries such as SELECT, UPDATE, INSERT and DELETE to get and manipulate the data.\n\nWhen a player logs in, you would use an SQL SELECT query to retrieve their information from the database and set it as element data on the player. When the player logs out or quits, you would use an SQL UPDATE query to update their information in the database with the element data on the player.\n\nIt's important to note that, depending on the amount of players and how frequently the data is updated, this could put a lot of strain on the database and might slow down the server. To avoid this, it's good practice to use connection pooling, prepared statements and queries optimization.\n\nKeep in mind that the method you're currently using can work, but it's limited by the fact that the data is only stored for as long as the server is running and the player is logged in."
    },
    {
        "link": "https://forum.multitheftauto.com/topic/121619-lua-for-absolute-beginners",
        "document": "This tutorial can also be viewed on GitHub\n\nThis tutorial aims to teach the Lua scripting language to those with 0 previous experience with programming / scripting.\n\n This guide will start with explaining some Lua concepts, and will later on move to explaining MTA:SA specific concepts.\n\nThis part of the tutorial discusses Lua itself. No MTA-specific concepts will be discussed here.\n\nThe Lua scripting language is a language which is interpreted by a \"Lua interpreter\". MTA:SA's resources use such an interpreter to run Lua code. For the beginning of this tutorial you can use the online Lua interpreter available on https://www.Lua.org/demo.html. Any code in the Lua part of the tutorial can be run on this website.\n\nLua is written in \"plain text\". This means it exists of regular characters like any other text you are writing. To edit Lua files you will require a text editor. You use Notepad, but there are many far better alternatives. My personal favourite is Visual Studio Code, but there are many other good options, to name a few: Atom, sublime text, notepad++\n\n Lua files are usually saved with the file extension\n\nThe first concept we're going to discuss is variables. Variables allow you to store a value in your code.\n\n For example:\n\nwill output the value of the variable. We will get into what exactly is later in the tutorial.\n\nVariables can have any name you want, as long as you follow some specific rules.\n• variable names must start with a letter (lower or upper case), or an underscore (_)\n• variable names may contain letters (lower and upper case), numbers and underscores.\n\nThe convention in Lua is to name your variables in \"camelCase\". This means if a variable exists of multiple words you start every word with a capital letter, except for the first one.\n\nSo far we've seen variables used to store numeric values, but there are many different types of data Lua can handle. These are:\n• string\n\n A piece of text, a string is surrounded by or . For example or 'Hello world'\n• boolean\n\n A boolean is a data type that has only 2 options, and .\n• nil\n\n is a value indicating nothing. It's the absence of a value. (Not the be confused with 0)\n• table\n\n Tables will be discussed later in the tutorial\n• userdata\n\n Userdata will be discussed later in the tutorial\n• function\n\n Functions will be discussed later in the tutorial\n• thread\n\n Threads are out of scope for this tutorial and won't be discussed\n\nSo we can use these different data types, and store them in variables:\n\nOperators are symbols in Lua which can be used to do \"things\" with variables. Here's a list of operators and an example for each:\n\nSubtracts a value from another value\n\nDivides a value by another value\n\nThis is the \"modulo\" operator. This will divide a value by another, and return the leftover.\n\nThe result of this is\n\nThe operator will return if both variables are \"truthy\". Otherwise it returns \n\n (A \"truthy\" value is anything except for and )\n\nThe operator will return if one of the variables are \"truthy\". Otherwise it returns\n\nThe (equals) operator will return if both of the variables are the same. Otherwise it returns\n\nThe (does not equal) operator will return if both variables are not the same. Otherwise it returns\n\nThe (greater than) operator will return if the first value is greater than the second value. Otherwise it returns\n\nThe (greater than or equals) operator will return if the first value is greater than, or equal to, the second value. Otherwise it returns\n\nThe (less than) operator will return if the first value is less than the second value. Otherwise it returns\n\nThe (less than or equals) operator will return if the first value is less than, or equal to, the second value. Otherwise it returns\n\nThe (string concatanation) operator allows you to add two strings together.\n\nAn statement allows your code to decide to do something, or not. Depending on a value. Often times statements are used in combination with some of the above operators.\n\nAn if statement is written as :\n\nAny code between and will only be executed when the expression is true. You might also have noticed that the code between the and is moved over a bit to the right. This is called \"indentation\". Whenever we open a new scope (scopes will be discussed later in the tutorial) we move our code to the right. This is usually done by either a or several spaces . Many code editors will convert a to spaces.\n\nWithin an statement, you can also add an block. The code in such a block will be executed when the code in the block is not executed.\n\nIf you want to do multiple statements, you can use an :\n\nThe difference between the first example and the second is that if is higher than 10 in the first example both lines \"X is higher than 10\" and \"X is higher than 5\" will be output. Whilst in the second example only \"X is higher than 10\" will be output.\n\nAnd if statement must always start with an , can contain multiple s, and may only have one .\n\nFunctions allow you to write less code, by reusing pieces of code.\n\nThe syntax to create a function is\n\nIn order to execute code in the function, you \"call\" the function. You do this by writing the function name followed by .\n\nFunctions also allow you to send a variable to the function, for it to do something with. This is what's called a function parameter. Function parameters are defined in the brackets after the function name.\n\nYou may notice that this looks a lot like the we have been using. This is because is a built-in Lua function.\n\nA function not only can execute code, it can also give something back to where it was called. This is called a . In order to return something from a function you use the keyword.\n\nJust like in an statement, all code within a function is indented.\n\nNow let's combine everything we have learnt so far:\n\nWe quickly encountered scopes before, and said we indent our code whenever we enter a new scope. But scopes allow you to do more than that. Most importantly, \"local\" variables.\n\nA local variable is only available in the scope it was defined in (or scopes that were created from within that scope)\n\nYou can create a new scope using a block ( s and statements also have their own scope).\n\n(For) loops are ways in scripting / programming to have code executed multiple times, without having to write the same thing multiple times.\n\n An example of such a loop:\n\nThe first part : defines a variable called . Which start at . This will be incremented by 1, until it reaches . The code within the loop then can use this variable.\n\nYou can also increment with a different number than (including negative numbers) using this construct.\n\nThis code sample will start with at 20, and keep adding (thus subtracting ), until it reaches\n\nTables are a datatype in Lua which allows for lists of things.\n\n Here's an example:\n\nTables consist of key/value pairs. In the example above the key , has the value , has the value , and has the value .\n\n You can get the value in a table, by putting the key in between square brackets . Like in .\n\nYou can choose to not include the keys in a table. Doing so will automatically add numbers as keys, starting at 1. So the above example would be the exact same as the first example.\n\nTable keys and values can be of any data type, including other tables. This allows you to create (very) complex table structures.\n\nWhen using a string as the key in a table, you can leave out the square brackets and the quotes. This goes for both when defining the table, and for indexing it (getting a value from it). For example\n\nA table's values can be modified / set after creating the table as well.\n\nWhen using tables you will often want to add something to the \"end\" of a table. This is most common when you are using tables with numeric keys.\n\n In order to do this you can use a to get the amount of items currently in the table.\n\nThis will store the value on the key , because is 3.\n\nIterators are a mechanism that allow you to make a loop, which goes over a set of values. Writing your own iterators won't be discussed in this tutorial. But there are two functions which are often used to create an iterator to iterate over a table. These are and .\n\nThe difference between and is the order in which the key/value pairs are iterated over, and which of the key/value pairs are iterated over.\n\n Where will always use numeric keys, starting at , and going up by every time, until there is no entry in the table. This also means it won't iterate over anything key that is not numeric.\n\nA loop will iterate over any value in a table, but the order is not guaranteed. Meaning that between different runs of the script the order could be different.\n\nCallbacks are when you pass a function as an argument to another function. To have the function you passed be called later on. This is used often within MTA.\n\nAn example of a Lua function which uses a callback is . will sort a tables values, by default these values are sorted numerically. But you can use a callback to change this behaviour.\n\nIn the first call to ( ) you can see the function is passed as second argument to the function. Note that we don't write here (notice the brackets difference) because that would call the function, and pass its return value to .\n\nwill then call this function when it compares two different values, this function should return or depending on whether its second argument ( in this case) is larger than it's first argument ( ), in the context of sorting.\n\nIt is also possible to use an \"anonymous function\" when passing a callback to a function.\n\nThis part of the tutorial discusses MTA specific constructs. Code in this part of the tutorial won't run in the online Lua interpreter. You will need to set up a (local) server for this.\n\nBy default when installing MTA:SA a server is installed as well. This server is located in the directory of your MTA directory. This is usually at . This directory contains an file, running this file will start a server.\n\nScripts on a server are grouped by resources, a single resource can consist of multiple script files and other assets such as images, sounds, fonts, mods and more.\n\nResources are placed in your folder in your server folder. A resource is always in its own directory. A resource must always have a single file. This file tells the server (among others) what script files to load. A typical meta.xml file looks like this:\n\nYou will need an entry for every .Lua file you want to have executed on the server.\n\nYou can start a resource by typing in the server console (the window that opened when you started ). The resource name is the name of the directory your is in. (This may not have spaces).\n\n Starting a resource will start running the Lua scripts, if you've changed your scripts you will need to restart the resource for the changes to take effect. ( ).\n\nLua code can be executed in one of two places. The server, or the client.\n\n Server sided scripts are executed on the actual machine that is running the process.\n\n Client sided scripts are executed on the computer of every player that connects to your server.\n\nServer sided and client sided scripts have a distinct difference in responsibility and possibility. Some functions for example are only available on the client, whilst others are available only on the server (and many on both).\n\nNote: Some of these functions which are available both server sided and client sided are different on server and client\n\nIn plain Lua there's not much you can do to affect a game engine like MTA:SA. This is why MTA:SA offers a (large) list of functions available for you to use in your scripts which interact with the actual GTA world.\n\n You can find a list of all of these, what they do and how to use them on the MTA wiki.\n\nAn example of such a function is createObject(). This function will create a physical object in the game. The wiki page contains information on how to use it (what arguments it expects, and in what order). And often shows an example of how to use it.\n\nAt the start of this tutorial we quickly mentioned data types. These are data types configurable by the implementation of Lua. In this case, MTA.\n\n MTA uses userdata to represent \"elements\". Many things in MTA are elements, like objects, markers, peds, players, user interfaces, vehicles, etc.\n\n On the MTA wiki you will notice many functions either return elements, or require an element as arguments.\n\n A list of different types of elements can be found on the MTA wiki.\n\nElements also have a hierarchical structure to them. Elements can have a \"parent\", and multiple \"children\". This will result in a tree of elements, the element at the top of this tree (and thus the grandparent of all elements) is called the root element.\n\nOften times in MTA you want certain things to happen when a player enters a command. This is done using command handlers, command handlers use a callback, which we previously discussed.\n\n The wiki contains a page for the addCommandHandler() function. For this example we will be using the server side version.\n\nThis example also uses the outputChatBox() function, this will output a piece of text to the chat.(in this case, only for the player who executed the command)\n\nThe callback function passed to will be called every time a player uses the command ingame.\n\nBesides having your script do things when a user executes a command you likely want the game to respond to many different types of things that happen in the game. Like players taking damage, coming close to something, etc.\n\n These things are called events. Whenever an event is triggered you can run a piece of Lua code. You do this using event handlers. Event handlers are created using the addEventHandler().\n\nThe first argument to the function is the string name of the event. These can be found on the MTA wiki as well.\n\nAn event is always triggered for a specific element, for example is triggered on the player that was wasted (killed).\n\n You can attach an event handler to a single element to only have your callback function be called when the event is triggered on that specific element. But you could also use the root element here and your function will be called for every element the event is triggered on.\n\nThe getRootElement() function used in this example returns the root element discussed earlier.\n\n You can also see is used in this code snippet, we'll talk about that some more in the next section.\n\nMTA has some predifined global variables for you to use in your script.\n\n A list of them can be found on the wiki.\n\nHere's a couple notable ones and what they're used for\n• The root element, same as the return value of )\n• The element an event handler was called on. An event's wiki page always describes what the event source will be for the event.\n• The player element for the player whose client the script is running on. (Thus only available client sided)\n• Will be discussed in the next section\n\nAs stated earlier in this tutorial scripts can run either on the server, or one of the connected clients. However often times you would want to trigger something on the server from a client, or the other way around.\n\nAn example of this would be when the user clicks the login button on a GUI (Graphical user interface) the server should try to log that person in, and send him back whether or not this was successful.\n\nThis can be done using events. MTA allows you to create and trigger your own events, and these events can be triggered from server to client (and the other way around). You can do this using the addEvent() function.\n\n Once an event has been added (and marked as remotely triggerable by passing as second argument to ) you can call it from server/client. You do this using [triggerClientEvent()]https://wiki.multitheftauto.com/wiki/TriggerClientEvent() and triggerServerEvent() respectively.\n\nThis example will trigger the event from the client sided script. And passes the and arguments to the event.\n\n The server then handles this event in the function, which in our case just outputs something to the chatbox.\n\nIn this example you can see the previously mentioned global variable.\n\n This variable is set to the player element corresponding to the client the event was triggered from. (And is thus only usable when used in an event handler which has been triggered from a client).\n\nWith this information you should be able to start scripting, and making things in MTA! If you didn't understand it all in one go, or you have any more questions there is no shame in that!\n\n You can find myself and many others willing to help you with your scripting questions in the #scripting channel on the MTA discord.\n\n Another good source for programming / scripting related questions is stack overflow."
    },
    {
        "link": "http://matrixgames.com/forums/viewtopic.php?t=300606",
        "document": "I'm late to the party, but oh well.Command items:#3 See also [[the other string syntax]]. And [===[ [[]]] '\"\\ ]]===] and so on.--[[ and themultilinecomments]]Strictly speaking, if you're separating between command and general lua, this belongs in the other section.#4, #5Should these be separate?#6Is it worth mentioning that the command print function is non-conformant? It should be print ('Event 1: ', unit) but that just gets you a nasty error message.#7I believe a better approach will beYou should then omit your ==true and it will work the same, except this one allows you to store the return value and use it without doing another unit lookup inside the then block. Some functions seem to want a modified version of that return table.Before making that recommendation/suggestion, please try actually doing it, and tell us how.- Trigger on scenario loaded reliably does not fire when loaded in editor.- When you save+load, all variables, including all your functions, are wiped.Presuming a 'scenario loaded' trigger in a repeatable event loads every time the user loads outside of the editor, a special action for editor mode may solve the problem. Just... remember to update the event action too.#8This is all opinion:Ideally, the fact that you are using lua is an implementation detail. The action name should describe what the action does, and what it does under the covers - lua or not - should not matter.With that said, given the bug-prone nature of flexible scripting, marking them with lua (aka \"bugfixing attention here\") isn't a bad idea, but I'm keeping that at the end of the name.#9 has me asking what audience you are writing this for. Perhaps setting the expectations in a preface of sorts?Lua general:#1--[[You say to use comments, and through all your examples use comments in a way that is generally considered worse than not having any comments.When I say \"generally\" I mean \"among programmers\". The assumption is that you know, or will learn, how to read code. The code should say what, and the comments should say why. When comments say what, changing it will require changing two things. So when (not if) that does not happen,for i=1,24 do -- scan thru numbers 1 to 16I hope you don't rely on the comments to know what's going on there!Again, who are your audience? If they are beginners, and I believe most are, they may look at the comments shown by the guy who just told them to use comments, and think it's good.If your guide needs an emphasis on what, it may be better to include separate pseudocode. Or \"just\" write it more readably.]]#2 It gets worse - even if you store a variable globally, you cannot rely on it being there after your script exits. If the user saved and loaded in between, it's gone. So when you actually want to do that, ScenEdit_SetKeyValue and ScenEdit_GetKeyValue appears to be required.It is possible to make creating (writing) or reading a global variable an error, letting you spot these cases. Misspelled names included. Or make these automatically call setkeyvalue and getkeyvalue when used.It'll be a piece of code that needs to be run in the lua console before code it will be checking for.#3When the user doesn't have control over his display (e.g. a text file displayed in a web browser...) tabs may expand to 8 spaces, which can make it look very messy. I'm generally a fan of tabs for indentation precisely because it is customizable, but for this particular purpose I would recommend you use two spaces.#4, in its first example, does not follow #3.Also, to follow up my criticism in #1And the mandatory nitpick: Lua is a word (translates moon) and supposed to be capitalized as such. Lua or lua. LUA implies an acronym."
    },
    {
        "link": "https://assets.publishing.service.gov.uk/media/5a7ebee940f0b6230268b464/20140808_MOD_Acronyms_and_Abbreviations.pdf",
        "document": ""
    },
    {
        "link": "https://github.com/uhub/awesome-lua",
        "document": "We read every piece of feedback, and take your input very seriously."
    }
]