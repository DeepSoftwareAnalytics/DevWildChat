[
    {
        "link": "https://altexsoft.com/blog/how-to-write-code-documentation",
        "document": "When to use them\n\nWhen to use and how to write documentation comments\n\nBest practices and examples for code documentation\n\nDocument as you write the code"
    },
    {
        "link": "https://blog.codacy.com/code-documentation",
        "document": "When you buy furniture, it usually comes with assembly instructions. These instructions detail each step of the assembly process, including which parts go where and how to assemble them.\n\nNow, think of the code as furniture parts. Just as clear assembly instructions make it easier to assemble your furniture correctly and efficiently, excellent code documentation helps developers understand how the different parts of the code fit together and how to use them effectively.\n\nOr you can think of documentation as a recipe. If the cook makes a meal without detailing all of the ingredients and steps used to create it, it will be tough to make changes to the dish and improve it in the future if no one knows how it was made in the first place.\n\nCode documentation serves as a recipe for development, detailing the components and steps taken to create your project and making it easier to improve, fix, and maintain it in the long run.\n\nLet’s take a deep dive into documenting code, why it’s important, and what are some things your team can do to create better documentation for your code.\n\nJust like assembling furniture without instructions can lead to mistakes or even an utterly unusable piece, coding without documentation can result in errors, confusion, and inefficiency.\n\nMaintaining good code documentation leads to smoother development and maintenance of software projects because it provides developers with the following:\n• Clarity that helps developers understand the purpose, functionality, and usage of different parts of the codebase. Documentation provides valuable context and explanations that make it easier to comprehend complex logic or algorithms.\n• Easier maintainability as software evolves. Well-documented code streamlines the process of making changes, adding features, and fixing bugs by providing insights into the code's architecture, design decisions, and potential pitfalls.\n• Better collaboration, by serving as a shared knowledge resource that helps developers understand each other's contributions and intentions.\n• Easier onboarding for new developers joining a project. It enables them to get up to speed quickly. Documentation acts as a guide, reducing the learning curve and helping new team members become more productive.\n• Debugging during development or in production. Clear documentation helps developers diagnose problems more efficiently, providing insights into the code's behavior, potential edge cases, and known issues.\n• Compliance in regulated industries or projects requiring adherence to standards. Documentation can aid in audits and demonstrate compliance with industry best practices.\n\nDocumenting code properly enhances software projects' readability, maintainability, and longevity, ultimately saving time, reducing errors, and improving overall software quality.\n\nIt also serves as a vital future reference, helping developers write code with an understanding of the rationale behind design decisions or implementation details and allowing for easier identification of areas that need improvement.\n\nNot all code documentation is the same. Collectively, all code documentation helps contribute to building and maintaining a comprehensive understanding of the codebase over time. However, different types of code documentation serve various purposes and audiences.\n• Code comments are inline annotations within the code that explain its logic, clarify complex sections, or provide context for future developers. They are the simplest form of documentation and supplement other, more detailed forms by offering insights into specific code segments or algorithms.\n• Configuration files, such as YAML, JSON, or XML files, are often used to store a software project's settings, preferences, or other configuration data. Documentation within these files helps users understand the purpose and format of each configuration option, facilitating customization and configuration.\n• Documentation Strings (Docstrings) are special code comments embedded within code to document classes, functions, or modules in a structured format. They typically describe the entity, its parameters, return values, and usage examples. Docstrings can be automatically extracted to generate API documentation or viewed interactively within integrated development environments (IDEs).\n• Class/Module API documentation describes the classes or modules in a codebase, including their purpose, functionality, attributes, methods, and any relevant usage examples. It typically provides an overview of the available classes or modules and how they interact with each other.\n• Method/Function API documentation focuses on individual methods or functions within a class or module. It explains the purpose of each method, its parameters, return values, and any exceptions it may raise. This type of documentation helps developers understand how to use specific functions correctly.\n• The README.md file typically resides in the root directory of the project repository. A README file details the project's purpose, installation instructions, usage examples, and other relevant information for developers or users. A README file is often written in Markdown format—a lightweight markup language with plain-text formatting syntax—for easy formatting and readability.\n\nA wide variety of problems and issues can directly result from poor code documentation, including:\n• Difficulty understanding code: Developers may struggle to understand the purpose, functionality, and usage of different parts of the codebase, making it challenging to grasp complex logic or algorithms.\n• Increased time and effort: Developers spend more time deciphering code and trying to understand its behavior, which slows development processes and delays project d elivery. Developers already struggle with a lack of time to focus on code review. Our 2024 State of Software Quality report found that 58% of developers say not having enough time is the single most common challenge faced during code reviews.\n• Higher error rates: Developers may make incorrect assumptions or misunderstand how certain functions or components are intended to be used, resulting in errors, bugs, or unintended behavior in the software.\n• None Developers may hesitate to make changes for fear of breaking existing functionality or introducing bugs, which can impede the software's evolution and lead to stagnation or\n• None by making it easier to understand and refactor existing code. Poor documentation can lead to shortcuts and suboptimal solutions being implemented, leading to a higher\n• Limited collaboration: Developers may struggle to communicate effectively about the codebase, which can hinder teamwork and cohesion and lead to misunderstandings or conflicting interpretations.\n• Lower reusability: Developers may struggle to identify reusable components or modules within the codebase, leading to duplication of effort and increased code complexity.\n• Lack of transparency: Stakeholders, such as project managers, product owners, or clients, can have a difficult time understanding the progress of a project without adequate documentation.\n• Suboptimal onboarding processes: When new developers join a project that’s poorly documented, they must spend more time deciphering code and understanding its intricacies, slowing down their integration into the team and delaying their productivity.\n• Knowledge loss: In the absence of documentation, critical knowledge about the codebase may reside solely in the minds of individual developers. If these developers leave the project or organization, valuable insights and understanding may be lost.\n• None and reliability. Developers may inadvertently introduce defects or overlook critical considerations that compromise code quality without clear explanations of design decisions, assumptions, or constraints.\n\nPoor code documentation undermines readability, maintainability, and code quality, resulting in increased costs, reduced productivity, and a greater risk of errors and failures.\n\nIf you are unsure where to start when putting together guidelines for code documentation best practices, here are a few suggestions.\n• Use meaningful and descriptive names for variables, functions, classes, and other code elements to convey their purpose and functionality.\n• Keep documentation concise to communicate only essential information without unnecessary verbosity or redundancy. Use clear and straightforward language to ensure it is accessible to developers with varying experience levels.\n• Follow consistent formatting conventions, including indentation, line breaks, and spacing, to improve readability and maintainability.\n• Document intent behind code decisions, design choices, and algorithms to provide context for future developers and maintainers. Include overview documentation that outlines the codebase's purpose, architecture, and critical components to aid understanding.\n• Use inline comments appropriately to clarify complex or non-intuitive code sections, but avoid excessive commenting that may clutter the codebase. Keep code comments synchronized with code changes by updating them whenever the code they refer to is modified. Specify version information and release notes in documentation to track changes and updates to the codebase over time.\n• Provide usage examples and code snippets to effectively illustrate how to use functions, classes, and modules. Include references, such as links and citations to external resources, specifications, or design documents, to provide additional context and guidance.\n• Include visual aids like flowcharts and UML diagrams in your documentation to help developers comprehend complex relationships or concepts in the code more quickly.\n• Document interfaces (e.g., function signatures, class APIs) of code elements to specify their inputs, outputs, and behavior.\n• Document external dependencies, libraries, and frameworks used in the codebase, including version requirements and installation instructions.\n• Document testing strategies, including unit, integration, and acceptance tests, to ensure comprehensive code coverage and facilitate regression testing.\n• Document security considerations, vulnerabilities, and to ensure developers know potential security risks.\n• Specify licensing information, copyright notices, and usage restrictions in documentation to clarify the legal terms for using, modifying, and distributing the code.\n• Utilize Markdown or other markup languages to format documentation for readability and ease of maintenance. These languages offer a simple syntax for adding helpful information to your code, like headings, lists, and code snippets, making navigating your code and documentation easier.\n• Encourage contributions to documentation by providing guidelines, templates, and tools for creating and editing documentation collaboratively. Solicit feedback from team members, users, and stakeholders to identify areas for improvement and ensure documentation meets their needs and expectations.\n• Review and update documentation regularly to reflect changes in the codebase, address feedback, and ensure it remains accurate and relevant.\n• Delete dead documentation that is no longer relevant or accurate due to codebase or project requirements.\n\nAnother highly recommended best practice for better code documentation is using automated tools to help aid the process.\n\nHere are some excellent tools and frameworks that you can use for generating code documentation in various formats while saving time and ensuring that your document remains consistent:\n• is a documentation tool widely used in the Python community that supports various markup languages (including reStructuredText and Markdown) and integrates with popular programming languages like Python, C/C++, and JavaScript. Sphinx can generate documentation in multiple formats, including HTML, PDF, and ePub.\n• is a documentation generation tool for Java projects that uses special comments (Javadoc comments) embedded within Java code to generate API documentation in HTML format. Javadoc is commonly used to document Java classes, interfaces, and methods.\n• is a documentation generation tool for JavaScript projects that uses special comments (JSDoc comments) embedded within JavaScript code to generate API documentation in HTML format. JSDoc supports documenting functions, classes, variables, and more.\n• is a documentation generation tool that supports multiple programming languages, including C++, C, Java, Python, and more. It can generate documentation from source code comments in various formats, including HTML, LaTeX, RTF, and PDF. Doxygen is known for its flexibility and extensive customization options.\n• (now known as OpenAPI) is a framework for designing, documenting, and testing RESTful APIs. It allows developers to define API specifications using a JSON or YAML format, which can then be used to generate interactive API documentation.\n• is a documentation platform that allows you to write and publish documentation using Markdown or AsciiDoc. It provides a user-friendly interface for writing documentation, version control integration (with Git), and publishing documentation as websites or eBooks.\n• Various Markdown-based tools and frameworks, such as , , and , allow you to create documentation websites from Markdown files. These tools provide themes, navigation structures, and other features to create professional-looking documentation sites with minimal effort.\n• Various (IDE) plugins or extensions can assist with code documentation. For example, Visual Studio Code (which also ) has extensions like , which provides features for generating and previewing Markdown documentation.\n\n\n\n\n\nWhat does a well-documented code sample actually look like? Here's an example of good code documentation for a Python function calculating a given number's factorial:\n\nLet’s take a look at each section to understand what makes this an excellent example of code documentation:\n• The function factorial is defined with a clear and concise name that accurately describes its purpose.\n• The function is accompanied by a docstring enclosed within triple quotes (\"\"\"). The docstring comprehensively explains the function's purpose, parameters, return value, and potential exceptions raised.\n• The docstring includes a Parameters section that describes the input parameter n, specifying its type (int) and briefly describing its meaning.\n• The docstring includes a Returns section specifying the return type (int) and briefly describing the returned value (the factorial of the input integer).\n• The docstring includes a Raises section that documents the exceptions raised by the function and under what conditions they occur. In this case, a ValueError is raised if the input is not a non-negative integer.\n• The docstring includes an Examples section demonstrating the function's use with example inputs and expected outputs. This provides clear usage examples for developers to follow.\n• The function includes input validation to ensure that the input parameter n is a non-negative integer. If the input does not meet the specified criteria, a ValueError is raised with a descriptive error message.\n• The function utilizes recursion to calculate the factorial, well-documented in the docstring. The base case (factorial of 0) is explicitly handled, ensuring the function terminates correctly.\n\nThese elements help developers understand the function's purpose, behavior, and usage, facilitating easier integration and maintenance within the codebase.\n\nWhat To Do When Faced with Poor Code Documentation\n\nNavigating poorly documented code can be a daunting challenge for developers, yet it's a common scenario encountered in software development projects. Whether inheriting legacy code or collaborating on a team project with inadequate documentation, developers often grapple with ambiguity and uncertainty in code management.\n\nWhen faced with inadequate documentation, relying on the code to gain understanding becomes essential. Begin by thoroughly reviewing the codebase to discern its structure, logic, and patterns. Scrutinize variable names, function signatures, and overall architectural layout to derive insights into the code's functionality.\n\nIf possible, engage with the original developers or team members who know the codebase. Initiate discussions to clarify specific areas of confusion or ambiguity.\n\nTry reverse engineering techniques like debugging, logging, and step-through execution to analyze the code's behavior. Experiment with different inputs and scenarios to deduce the intended functionality.\n\nExplore the version control history (e.g., Git commit logs) to understand the evolution of the codebase over time. Analyzing past changes and commit messages may provide valuable context and insights into the code's development trajectory.\n\nThroughout this process, document your findings and insights as you gain a deeper understanding of the codebase. The goal is to both understand the code and start creating proper documentation for it.\n\nInitiate documentation enhancements by updating existing comments or introducing new ones. Incrementally improve documentation to facilitate comprehension for future developers.\n\nFinally, refactor the codebase to enhance readability and clarity. Rename variables and functions to convey their purpose more explicitly. Decompose complex logic into smaller, more manageable units for better comprehension. Eliminate redundant or ambiguous code to improve the code's self-explanatory nature.\n\nThe end goal is to get the code documentation into a state in which other developers who need to work with this code after you can easily do so, thanks to your contributions.\n\nBuild Documentation Best Practices Into Your Coding Standards\n\nSoftware development organizations create and implement coding standards to ensure their codebase's consistency, readability, maintainability, and scalability across teams and projects.\n\nWriting code documentation helps to amplify each one of these benefits, which is why you should build code documentation best practices into your coding standards to ensure the creation of clean code.\n\nBy following coding standards that include documentation recommendations and best practices, developers can increase speed and efficiency by avoiding common mistakes that can lead to errors and issues that slow down coding processes. It can also improve code reusability and help scale projects more efficiently.\n\nWriting impeccable code isn't just about ensuring compilation success or achieving full test coverage; it's about ensuring that both humans and computers can understand it.\n\nDevelopers dedicated to code health and quality should see their primary goal as prioritizing human readability over machine efficiency, with code documentation playing a crucial role in achieving this balance."
    },
    {
        "link": "https://stackoverflow.com/questions/74417031/how-to-export-to-pdf-with-syntax-highlighting",
        "document": "I need an extension in intellij or vscode or some app to transform my codes into pdf.\n\nI tried to use the app notion but it doesn't export with syntax highlighting.\n\n*Edit: I know it seems to have a very easy answer, but I was thinking exclusively about Intellij Community. I have to export my code into a legible PDF with syntax highlights without having to leave the IDEA. The current way to achieve exactly what I want is to copy the code in Intellij, paste it into Visual Studio Code (to get the syntax right), copy it again and paste it into Google Docs to change the background color (since I prefer to code in darker colors and want this in the PDF as well), and then save as a PDF.\n\nThis is a lot of steps for a simple task. The closest I can get is using Notion, where I can paste and copy the code into a Notion file (in the code area using markdown), and then simply save the file as a PDF. However, the syntax highlighting is ignored when exported to PDF."
    },
    {
        "link": "https://reddit.com/r/cscareerquestions/comments/sa55m5/which_idescode_editors_are_most_commonly_used_in",
        "document": "CSCareerQuestions is a community for those who are in the process of entering or are already part of the computer science field. Our goal is to help navigate and share challenges of the industry and strategies to be successful ."
    },
    {
        "link": "https://swimm.io/blog/developer-documenting-done-right",
        "document": "When it comes to developers working on code documentation, there are lots of different angles to take. Some focus on whether it’s necessary at all. Others consider how and when it should be done, what should be included, and how often it should be updated.\n\nRather than take a deep dive into any of these specific topics, we’re considering developer documenting from a high-level perspective as a good jumping-off point for deeper discussion and planning of your documentation strategy.\n\nWHY do developer documenting at all?\n\nTackling the question of why we do developer documenting in 2 different ways. First, why we do it (or why we should do it), and then we’ll unpack some common arguments against it.\n\nAs we begin our look at the reasons for investing in documentation, we’re using the word investment quite intentionally. There’s no question that producing quality documentation requires an investment of time and resources. But when it’s done right, that investment pays dividends time and time again.\n\nGitHub’s 2021 State of the Octoverse report confirmed what we at Swimm have known all along: good documentation increases dev productivity. But even we were surprised by how much. GitHub’s research showed a 50% productivity boost for developers with easy-to-source documentation.\n\nA 50% productivity increase is probably a good enough argument all on its own, but just in case, we’ll add a few more.\n\nGitHub’s report went on to highlight the importance of good information flow to building trust and promoting developer satisfaction. Particularly in our current reality of geographically dispersed teams and remote working environments, documentation plays a critical role in ensuring knowledge sharing among team members – both current and future.\n\n3. Code documentation is essential for onboarding new developers\n\nIn research conducted by Harvard Business School, executives acknowledged that their companies could do better in onboarding new employees – even pre-pandemic when things were rolling right along. This perspective is confirmed by Gallup research of employees themselves, which found that only 12% of employees strongly agree that their organization does a great job of onboarding new employees.\n\nFor developers, an important part of the onboarding process includes a tour of the existing codebase, an overview of system architecture, and an introduction to team coding practices and conventions. Ensuring that this education happened every time and with consistent quality was difficult enough when it took place face-to-face, but the added complication of remote onboarding makes it even more difficult.\n\nRich, self-paced onboarding experiences that include walkthroughs of the codebase and examples of existing code meet the developer onboarding challenge and then some. Though it will never take the place of personal mentoring and team interaction, properly designed documentation eases developer onboarding and supports empowered developers who can quickly make positive contributions to the team.\n\nWith Swimm Playlists, you can walk your new developers step-by-step through the codebase – including markdown files, code snippets, videos, images, and links – just as if you were sitting next to them!\n\n\n\nThis is part of a series of articles about code documentation.\n\nMost developers will tell you that documenting code is not their favorite part of the job. As a result, they’ve never had a problem coming up with reasons not to document their code. These reasons have become so ingrained and widespread that they’ve taken on the qualities of myth.\n\nWouldn’t it be nice if this were true.\n\nWhile exceptionally well-written code might speak for itself in terms of what it does, code documentation should really focus on the how and the why: How does the code do what it was designed to do? And, of all the available options for accomplishing this task, why did you choose to code it this way?\n\nFast forward to one month after you finish coding a feature: Will you really remember the answers to these questions when it’s time to fix a bug or add functionality?\n\nEven the best-written code won’t answer these questions, so it’s important that the documentation does.\n\nLack of time assuredly has a grain of truth to it if there’s no organizational buy-in to the value of documentation. Fifty percent productivity boost for devs with good documentation, in our mind, is incentive enough to lead the charge towards getting organizational buy-in to code documentation.\n\nMyth #3: Documentation is not customer-facing, so it’s not part of the product\n\nAs long as SaaS is the standard in software delivery and software development remains dynamic, your product is much more than the code. Customers expect features to be shipped faster, with higher stability and fewer bugs. So, if internal documentation leads to the next release coming faster and more efficiently, our feeling is that it’s part of the product.\n\nAnd even though code documentation is not intended to be customer-facing, it’s actually a great time saver for the rest of your team.\n\nWHO is the documentation for?\n\nThis is the first question you should ask yourself when you start writing any piece of documentation, and the answer can differ depending on the situation.\n• Current and future developers who will be called upon to update and add to your code (whether they’re new devs being onboarded or existing team members taking on new tasks)\n• The future you when you’re asked to squash bugs and add functionality to your code after you’ve put it down for a while\n• Technical writers, UX designers, researchers, and writers, or product managers who will write customer-facing documentation for your features\n• Customer support team members and sales engineers who need to answer customer and potential customer questions confidently and accurately\n\nAll of these internal consumers; many stakeholders, indeed.\n\nLearn more: read our guide on Documentation in Agile.\n\nWHAT should the documentation include?\n\nA good place to start is thinking about the things that a new developer on your team would need to get up to speed:\n• Walkthrough documentation (a guided tour of the codebase) with markdown documents that use code snippets as demonstrations\n• Explanations of recurring code patterns, algorithms, and interactions between parts of the code\n• Descriptions about how a block of code accomplishes its function\n• Explanations of why a particular option was chosen to solve a specific challenge\n• Notes about bugs and how they were solved\n• Changes to the code and why you made them.\n\nWHERE should developer documentation be maintained?\n\nMaintain your documentation in the repository alongside the code. In fact, it’s best practice to treat your documentation as part of the code itself, using the same source control and versioning.\n\nOf course, the best documentation in the world isn’t going to help if no one can find it (or even knows it exists). Make sure it’s properly indexed and fully searchable. Link to it from Slack channels or export the most recent version to any knowledge-sharing platforms your company uses (such as Confluence or Notion).\n\nAnd to truly make the most of your code documentation, make sure it’s visible and accessible right when you need it: while you’re working on the part of the code it relates to. Swimm’s IDE plugins make it particularly easy to do just that.\n\n\n\nRelated content: read our guide on Coding Diagrams.\n\nWHEN should developer documenting take place?\n\nIt’s perfectly intuitive to recommend writing documentation as you are coding or immediately after you finish. This is when the knowledge is fresh and best – flowing most easily into words.\n\nAnother best practice is to start writing even before you start coding with an outline of requirements and specifications for the code you are about to produce. You can easily identify gaps and create a clear path forward.\n\nThere is certainly no shortage of best practices for developers working on documentation:\n• Write just enough: Find the right balance between under- and over-documentation. Keep repetition to a minimum; instead, cross-link your documentation so that information is single-sourced and easier to maintain.\n• Use glossaries: Keep your documentation streamlined by defining terms and using them as needed. And don’t forget to link to the appropriate glossary entries when you use the terms you’ve defined!\n• Make it a collaborative effort: Get input from your peers and other stakeholders. Your peers are some of the main consumers of your documentation, and no one knows better what they need than they do!\n• Consider the medium: Great documentation consists of more than endless text. Consider the type of documentation that will get your point across best: annotated images and screenshots, code snippets, links to relevant outside articles, videos etc.\n• Keep it up to date: The most important best practice of all! In order for your documentation to have relevance and credibility, it needs to be regularly (continuously) maintained. Documentation that doesn’t change along with the code can cause reader frustration and errors.\n\n\n\nCode documentation is an investment that pays for itself over and over again. At the same time, we should make wise use of our investment resources by carefully considering the aspects of how, why, and for whom we are documenting in order to create and execute a comprehensive documentation plan.\n\nSwimm makes it easier for developers: with code-coupled editing, auto-sync, IDE integrations, Swimm keeps your documentation always up to date… and delivers it right where and when you need it. Become a part of Swimm’s growing developer community, and check out our free Swimm demo."
    },
    {
        "link": "https://jetbrains.com/help/idea/exporting-an-intellij-idea-project-to-eclipse.html",
        "document": "Before you start exporting a project, make sure that the Eclipse Integration plugin is enabled.\n\nAt present, migration from IntelliJ IDEA to Eclipse is subject to certain limitations:\n• None IntelliJ IDEA modules with multiple content roots cannot not be migrated.\n• None External sources in Eclipse are not migrated.\n• None Only Java modules are created automatically during the export. However, any module can be converted to the Eclipse compatible format manually.\n• None The default workspace JRE is not converted to/from the project SDK.\n\nWhen you export an IntelliJ IDEA project to Eclipse, it results in creating Eclipse project files .project and .classpath for each module file .iml in the module directory that contains the content root.\n• None In the main menu, go to File | Export | Project to Eclipse. The Export to Eclipse dialog displays the list of modules that have not been converted and switched to use the Eclipse format yet (the modules that have the IntelliJ IDEA module format .iml).\n• None Select the modules you want to export.\n• None Select the suggested options if necessary:\n• None Convert selected modules into Eclipse-compatible format: convert the modules selected in the Modules to export to the Eclipse-compatible format.\n• None Export non-module libraries: IntelliJ IDEA creates a User Library configuration file for Eclipse *.userlibraries, containing definitions of all external libraries used in the project.\n• None Path to resulting .userlibraries: the path to the generated *.userlibraries file. This field is available when the Export non-module libraries option is selected.\n• None The project is exported to the same directory. The Project tool window displays the newly created Eclipse files."
    },
    {
        "link": "https://stackoverflow.com/questions/13744779/exporting-intellij-idea-ui-form-to-eclipse",
        "document": "I have a Java Project to do for Class. So I decided to use the Designer in Inltellij-Idea to help me get the forms and windows quickcly done, and have more time developping the application.\n\nThe problem I am facing, is the fact that the teacher uses Eclipse, So I thought that at the end of the developpement I could export my Intellij-Idea project (UI and Classes) to make it work on Eclipse.\n\nI have no problem exporting the classes, but what about the .form files ? how do I reference them in my code, so that the eclipse project could be Buildable ?"
    },
    {
        "link": "https://stackoverflow.com/questions/35368889/how-can-i-export-settings",
        "document": "How is it possible to export all Visual Studio Code settings and plugins and import them to another machine?\n\nThere is an extension for Visual Studio Code, called Settings Sync. It synchronises your settings by gist (Gist by GitHub). It works the same as the Atom.io extension called settings-sync. This feature is now built into VS Code, it is worth switching to the official feature. (https://stackoverflow.com/a/64035356/2029818) You can now sync all your settings across devices with VSCode's built-in Settings Sync. It's found under Code > Preferences > Turn on Settings Sync...\n\nSimilar to the answer given by Big Rich you can do the following: This will list out your extensions with the command to install them so you can just copy and paste the entire output into your other machine: It is taken from the answer given here. Note: Make sure you have added VS Code to your path beforehand. On mac you can do the following:\n• Open the Command Palette ( + + ) and type 'shell command' to find the Shell Command: Install 'code' command in PATH command.\n\nYour user settings are in . If you're not concerned about synchronising and it's a one-time thing, you can just copy the files and to the corresponding folder on your new machine. Your extensions are in the folder. Most extensions aren't using any native bindings and they should be working properly when copied over. You can manually reinstall those who do not.\n\nI'm preferred my own way to synchronize all Visual Studio Code extensions between laptops, using and small script to perform updates automatically. This way helps me every time when I want to install all extensions I have without any single mouse activity in Visual Studio Code after installing (via Homebrew). So I just write each new added extension to .txt file stored at my folder. After that I pull master branch on another laptop to get up-to-date file with all extensions. Using the script, which Big Rich had written before, with one more change, I can totally synchronise all extensions almost automatically. And also there is one more way to automate that process. Here you can add a script which looks up a Visual Studio Code extension in realtime and each time when you take a diff between the command and your .txt file in , you can easily update your file and push it to your remote repository.\n\nOften there are questions about the Java settings in Visual Studio Code. This is a big question and can involve advanced user knowledge to accomplish. But there is simple way to get the existing Java settings from Visual Studio Code and copy these setting for use on another PC. This post is using recent versions of Visual Studio Code and JDK in mid-December 2020. There are several screen shots (below) that accompany this post which should provide enough information for the visual learners. First things first, open Visual Studio Code and either open an existing Java folder-file or create a new Java file in Visual Studio Code. Then look at the lower right corner of Visual Studio Code (on the blue command bar). The Visual Studio Code should be displaying an icon showing the version of the Java Standard Edition (Java SE) being used. The version being on this PC today is JavaSE-15. Click on that icon ( ) which then opens a new window named \" \". There should be two tabs below this name: and . Below these tabs is a link named, \" \". Click on that link. (Link 2) Two files should then open: and . This post only focuses on the \" \" file. The file shows various settings used for coding different programming languages (Python, R, and Java). Near the bottom of the file shows the settings this User uses in Visual Studio Code for programming Java. These Java settings are the settings that can be \"backed up\" - meaning these settings get copied and pasted to another PC for creating a Java programming environment similar to the Java programming environment on this PC. (Link 3)\n\nThanks for contributing an answer to Stack Overflow!\n• Please be sure to answer the question. Provide details and share your research!\n• Asking for help, clarification, or responding to other answers.\n• Making statements based on opinion; back them up with references or personal experience. To learn more, see our tips on writing great answers. Sign up or log in Sign up using Email and Password By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy."
    },
    {
        "link": "https://jetbrains.com/help/idea/configuring-code-style.html",
        "document": "The IDE comes with two pre-defined schemes: the Project scheme and the Default scheme.\n• None In the Project scheme, the settings that you configure apply only to your current project. These settings are stored in the codeStyles folder under .idea and are shared through VCS together with the project. The IDE creates the folder after you modify code style settings for your project.\n• None In the Default scheme (IDE-level scheme), the settings that you configure apply to all existing projects that have the Default code style scheme selected. These settings are stored in the codestyles folder under the IntelliJ IDEA configuration directory and are not shared through VCS.\n\nIf you want to use the project code style scheme as your default scheme, you can copy it to the IDE level. The other way around is also possible: you can overwrite your current project settings with the settings from an IDE-level scheme and share them with other members of your team.\n\nIn IntelliJ IDEA, code style settings are language-specific, so you need to configure them for every language that you use in your project separately. You can also copy the settings from one language and apply them to another language.\n• None Press to open settings and then select Editor | Code Style. To configure a scheme for new projects, go to File | New Projects Setup | Settings for New Projects | Editor | Code Style.\n• None Select the language for which you want to configure the code style.\n• None Select the code style Scheme that you want to configure: the Project scheme or one of the IDE-level schemes. Click next to the Default scheme and select Duplicate to create a copy of the scheme.\n• None Browse through the tabs and configure code style preferences. For a detailed description of each setting for Java, refer to Code Style. Java. Use the right section of the dialog to preview the changes. When you change a setting, one or several blinking areas appear in the preview area emphasizing the changes. In some languages, for example, in PHP, there are predefined coding standards that you can upload to the IDE and apply to your code.\n• None Press to open settings and then select Editor | Code Style. To configure a scheme for new projects, go to File | New Projects Setup | Settings for New Projects | Editor | Code Style.\n• None Select the language for which you want to configure the code style.\n• None Select the code style Scheme that you want to modify: the Project scheme or one of the IDE-level schemes.\n• None Click the Set from link, select Predefined, and select one of the pre-configured standard from the list. For most of the supported languages, you can copy code style settings from other languages or frameworks.\n• None Press to open settings and then select Editor | Code Style. To configure a scheme for new projects, go to File | New Projects Setup | Settings for New Projects | Editor | Code Style in the main menu.\n• None Select the language for which you want to configure the code style.\n• None Select the code style Scheme that you want to modify: the Project scheme or one of the IDE-level schemes.\n• None Click Set from in the upper-right corner. The link is shown only if it is possible to apply code style settings from another language.\n• None From the list that appears, select the language to copy the code style from. Only applicable settings are copied from another language, other settings are left intact.\n• None Press to open settings and then select Editor | Code Style. To configure a scheme for new projects, go to File | New Projects Setup | Settings for New Projects | Editor | Code Style in the main menu.\n• None Select the code style Scheme that you want to copy: the Project scheme or one of the IDE-level schemes.\n• None Click the icon and select one of the following options:\n• None Copy to IDE (for the Project scheme): copy the selected scheme to the IDE level. IntelliJ IDEA saves the new code style with the specified name to the IntelliJ IDEA home directory.\n• None Copy to Project (for IDE-level schemes): overwrite your current project settings with the settings from the selected IDE-level profile.\n• None Duplicate (for IDE-level schemes): create a copy of the selected IDE scheme on the same level.\n• None In the Scheme field, type the name of the new scheme and press to save the changes.\n\nIn IntelliJ IDEA, you cannot delete the bundled Project (project level) and Default (IDE level) code style schemes. You can delete copies of the schemes if you have any. These copies are always IDE-level since you cannot have multiple project schemes.\n• None Press to open settings and then select Editor | Code Style.\n• None From the Scheme list, select the scheme that you want to delete.\n• None In the popup that opens, confirm the action by clicking Delete."
    },
    {
        "link": "https://jrebel.com/blog/intellij-idea-tutorial",
        "document": ""
    }
]