[
    {
        "link": "https://developer.wordpress.org/plugins/plugin-basics/best-practices",
        "document": "Here are some best practices to help organize your code so it works well alongside WordPress core and other WordPress plugins.\n\nA naming collision happens when your plugin is using the same name for a variable, function or a class as another plugin.\n\nLuckily, you can avoid naming collisions by using the methods below.\n\nBy default, all variables, functions and classes are defined in the global namespace, which means that it is possible for your plugin to override variables, functions and classes set by another plugin and vice-versa. Variables that are defined inside of functions or classes are not affected by this.\n\nAll globally accessible code should be prefixed with a unique identifier. Prefixes prevent conflicts with other plugins and prevents them from overwriting your variables and accidentally calling your functions and classes.\n\nIn order to prevent conflicts with other plugins, your prefix should be at least 4 letters long, though we recommend 5. You should avoid using a common English word, and instead choose something unique to your plugin. We host tens of thousands of plugins on WordPress.org alone. There are hundreds of thousands more outside our servers. You’re going to run into conflicts.\n\nA good way to do this is with a prefix. For example, if your plugin is called “Easy Custom Post Types” then you could use names like these:\n\nBecause you are making code as a part of the WordPress project, you must avoid the use of prefixes that have a high probability of conflicting with the core WordPress. This includes but is not limited to: (double underscores), , , or (single underscore) If you are making code for a ‘sub’ plugin (such as a WooCommece extension), you would similarly need to avoid using any of their normal/common prefixes (i.e. Woo, WooCommerce). You can use them inside your classes or namespace, but not as stand-alone function/namespace/class.\n\nIf you’re using or for translation, that’s fine. We’re only talking about functions you’ve created for your plugin, not the core functions from WordPress. In fact, those core features are why you need to not use those prefixes in your own plugin! You wouldn’t want to break WordPress for your users.\n\nRemember: Good prefix names are unique and distinct to your plugin. This will help you and the next person in debugging, as well as prevent conflicts.\n\nCode that must be prefixed includes:\n\nPHP provides a number of functions to verify existence of variables, functions, classes and constants. All of these will return true if the entity exists.\n\nKeep in mind that using around all your functions and classes sounds like a great idea until you realize the fatal flaw. If something else has a function with the same name and their code loads first, your plugin will break. Using if-exists to replace/override a function or class should be reserved for shared libraries only.\n\nAn easier way to tackle the naming collision problem is to use a class for the code of your plugin.\n\nYou will still need to take care of checking whether the name of the class you want is already taken but the rest will be taken care of by PHP.\n\nThe root level of your plugin directory should contain your file and, optionally, your uninstall.php file. All other files should be organized into sub folders whenever possible.\n\nA clear folder structure helps you and others working on your plugin keep similar files together.\n\nThe architecture, or code organization, you choose for your plugin will likely depend on the size of your plugin.\n\nFor small, single-purpose plugins that have limited interaction with WordPress core, themes or other plugins, there’s little benefit in engineering complex classes; unless you know the plugin is going to expand greatly later on.\n\nFor large plugins with lots of code, start off with classes in mind. Separate style and scripts files, and even build-related files. This will help code organization and long-term maintenance of the plugin.\n\nIt’s helpful to separate your admin code from the public code. Use the conditional is_admin(). You must still perform capability checks as this doesn’t indicate the user is authenticated or has Administrator-level access. See Checking User Capabilities.\n\nAs a security precaution, it’s a good practice to disallow access if the global is not defined. This is only applicable to files which contain code outside of class or function definitions, such as the main plugin file.\n\nYou can implement this by including this code at the top of the file:\n\nWhile there are a number of possible architecture patterns, they can broadly be grouped into three variations:\n• Main plugin file, then one or more class files\n\nSpecific implementations of the more complex of the above code organizations have already been written up as tutorials and slides:\n\nInstead of starting from scratch for each new plugin you write, you may want to start with a boilerplate. One advantage of using a boilerplate is to have consistency among your own plugins. Boilerplates also make it easier for other people to contribute to your code if you use a boilerplate they are already familiar with.\n\nThese also serve as further examples of different yet comparable architectures.\n• WordPress Plugin Boilerplate: A foundation for WordPress Plugin Development that aims to provide a clear and consistent guide for building your plugins.\n• WordPress Plugin Bootstrap: Basic bootstrap to develop WordPress plugins using Grunt, Compass, GIT, and SVN.\n• WP Skeleton Plugin: Skeleton plugin that focuses on unit tests and use of composer for development.\n• WP CLI Scaffold: The Scaffold command of WP CLI creates a skeleton plugin with options such as CI configuration files\n\nOf course, you could take different aspects of these and others to create your own custom boilerplate."
    },
    {
        "link": "https://colorwhistle.com/wordpress-plugin-development-best-practices",
        "document": "WordPress wizards and plugin pioneers! Ready to dive into the exciting world of WordPress plugin development? Let’s start on the right foot by exploring some tried-and-true best practices. Whether you’re a seasoned developer or just starting, mastering these guidelines will make your plugins efficient and also contribute to a safer and more enjoyable WordPress experience.\n\nBefore you start with the WordPress plugin development get through an R&D process and analyze whether you have an answer to the following questions,\n• Is the plugin helpful to the users?\n• Does the plugin have any unique features?\n• How is the plugin going to help its users?\n• How to design the front end for the plugin?\n• How is the plugin going to integrate with other services/plugins?\n\nAfter a thorough analysis, you can start with the development process of the plugin as follows,\n• Choose a unique name for your plugin that is relevant to its functionality\n• Research potential trademark issues with your chosen name to avoid any legal complications\n• Create a well-organized folder structure for your plugin to make it easier to manage and maintain\n• Add a file header to your plugin that includes important details such as the plugin name, version, author, and description\n• Write the code for your plugin by following the WordPress coding standards and best practices\n• Test your plugin thoroughly to ensure it is stable and functional before deploying it to WordPress.\n\nConsider optimizing your plugin listing for visibility and conversions on the WordPress plugin repository or other marketplaces.\n\nWordPress plugins can enhance your website’s functionality, but poorly developed plugins can cause issues. This article will give you exclusive tips for building high-quality plugins efficiently.\n\nWhy it’s Important to Follow the WordPress Plugin Guidelines?\n\nWhen it comes to WordPress plugin development, following the guidelines is essential as it ensures compatibility, security, and usability. Adhering to these guidelines, such as those for coding standards and plugin submission, will help maintain consistency and quality.\n• Provides clear documentation for users and developers.\n\nHere you go !!!!!\n\nBefore you start building a successful WordPress plugin, it’s essential to identify the needs and requirements of your target audience and create a plan that focuses on meeting those needs. Avoid adding unnecessary features and instead, keep the scope of the plugin focusing on solving specific pain points. Make sure there is no existing plugin that addresses the same problem in the repository before creating a new one. Ensure that your plugin offers unique solutions and adds value to users’ websites. It’s important to have a clear strategy for creating and marketing your plugin to ensure its success. With a well-defined strategy, and a clear vision, you can successfully develop and market your WordPress plugin which can help in enhancing the website accessibility WordPress Coding Standards and Best Practices – Follow Them To ensure consistency and readability across all WordPress plugins, developers should be following the WordPress Coding Standards. The WordPress standards help prevent common errors and ensure that code is understandable to developers from any location. It’s essential to make use of well-documented APIs and functions and write clear, efficient, and reusable code while avoiding deprecated functions and PHP errors. In addition to general coding standards, WordPress also has language-specific and accessibility standards that dictate best practices when working with CSS, HTML, JavaScript, and PHP codes. By following these standards, developers can create high-quality plugins that meet the needs of the WordPress community and provide a seamless user experience.\n\nTo ensure the security of your WordPress plugin, it’s essential to take certain measures. With WordPress being a prime target for hackers, it’s crucial to follow security best practices like input validation, output escaping, and nonces to prevent CSRF attacks. Vulnerable third-party libraries should be avoided, and user input should be sanitized. Website security is essential for earning user trust, so investing more time in ensuring the security standard of your plugin is necessary. By utilizing Nonces, data can be sanitized, and SQL injections can be prevented. Validation and Sanitization will protect your plugin from any user-entered data. Make use of the following, Keeping your entire team on the same page is also essential when it comes to WordPress plugin security. Assigning roles to admins for restricted plugin functionality is recommended. If the plugin uses a directory that holds users’ files, it’s best to secure it with a password. Removing all unwanted and unused plugins is also essential. Ensure to Name Your Plugin Files Uniquely Always remember that you are installing your plugin in a global ecosystem where even your competitors’ plugins may also exist. Adding functions, variables, and classes to your plugin can result in conflicts with existing functions or classes in the global namespace. To prevent this issue, it’s important to add a unique prefix to your functions, variables, and classes. By following these name conventions, you can make sure that your plugin is easily identifiable, and unique which would eventually avoid conflicts that could potentially break your code.\n\nWordPress plugin and theme developers could make automatic updates. This feature, however, is not turned on by default, and users must either enable it themselves or through your plugin. It’s generally not recommended to enable automatic updates through your plugin, as users should always be given the choice to opt-in. That said, it’s important to remind users of the option for auto-updates through your plugin’s admin interface. When enabled, automatic updates can be a powerful tool for maintaining and improving your plugin. They allow for quick and easy deployment of security patches, hotfixes, and new versions. If your plugin is listed on WordPress.org, you can benefit from automatic version management through their repositories. This means that users who have opted into automatic updates will receive new versions of your plugin as soon as they are released. Keeping a well-organized folder structure is essential for any WordPress plugin development project. A clear structure not only helps to keep your files organized but also helps to streamline the development workflow. When creating your plugin, make sure to designate specific folders for different file types. For instance, images should be placed in the /images folder, and avoid scattering it throughout your directory. This helps in locating the files you need and avoids the confusion that can come with disorganized files. Having a well-organized file structure also makes it easier for other developers to contribute to your plugin in the future. It’s a small step that can make a big difference in the success of your WordPress plugin.\n\nAdding a Readme.txt file during the WordPress plugin development is a crucial step toward ensuring your plugin can be successfully distributed and installed by users. Your plugin’s Readme.txt file should provide detailed information about your plugin, including its features, installation instructions, and usage guidelines. Your plugin cannot pass through the review team without a complete readme.txt file. In addition to facilitating the plugin’s distribution process, a complete Readme.txt file helps users understand how to use your plugin effectively. When creating your plugin’s Readme.txt file, make sure to include all necessary information, such as a detailed description of the plugin, installation instructions, usage guidelines, version, PHP version, contributors, and any other relevant information. By providing a complete and accurate Readme.txt file, you can help ensure your plugin is both easy to install and use for users. Before releasing your plugin to the public, it’s crucial to thoroughly test it on different environments and devices. This ensures that the plugin is stable, works correctly, and does not conflict with other plugins or themes. One essential tool to use during this process is WordPress debugging tools like WP_DEBUG, which helps identify and fix any errors that may arise. Another way to test your plugin is to use a staging site that mirrors your live site’s setup. This allows you to test the plugin without affecting your live site’s functionality. It’s also essential to test your plugin on different browsers, operating systems, and devices to ensure compatibility and responsiveness. This helps to avoid any user experience issues that may arise. Testing your plugin extensively before releasing it can save you time and effort in the long run, as fixing bugs and conflicts after releasing the plugin can be challenging and may negatively impact your plugin’s reputation.\n\nA clear and comprehensive documentation is essential, that outlines the functionality, installation, and usage of your plugin. The documentation should be regularly updated to ensure its accuracy. In addition to this, it should include troubleshooting tips and frequently asked questions (FAQs) to help users resolve any issues they may encounter. By providing comprehensive documentation, users can understand the full potential of your plugin and how to use it effectively. This can also lead to increased user satisfaction, and positive reviews, ultimately improving the overall success of your plugin. Performance is a critical factor in WordPress plugin development. As more and more websites are using WordPress, it is essential to ensure that your plugin doesn’t slow down the site’s performance. Users today have a low tolerance for slow-loading sites, and they may abandon a site if it doesn’t load fast enough. To optimize your plugin’s performance, start by minimizing the code and database queries. Every line of code and every query adds to the site’s load time. Therefore, it’s crucial to optimize your code and limit database queries as much as possible. Test your plugin’s performance on different devices and browsers to ensure that it works efficiently across all platforms. You can use tools like GTmetrix, Google PageSpeed Insights, or Pingdom to analyze your site’s performance and identify areas that need improvement. Prioritizing performance in your WordPress plugin development can always help enhance the user experience, increase site traffic, and boost conversions.\n\nAnd yes, in addition to the list above, choose the right distribution channels\n\nChoosing the right distribution channels for your plugin is essential for reaching your target audience effectively. The official WordPress plugin repository is an excellent platform for reaching out to WordPress users. However, third-party marketplaces can also be useful for increasing your plugin’s exposure.\n\nTo ensure visibility and higher conversion rates, you must optimize your plugin listing with an attractive title, an accurate description, and relevant keywords. It would also help to add appealing screenshots and video demos to showcase your plugin’s features and functionality.\n\nBuilding high-quality WordPress plugins requires a combination of technical expertise, strategic planning, and attention to detail. Following these best practices will help ensure that your plugins are optimized for performance, compatibility, and user satisfaction. From organizing your code and folder structure to providing thorough documentation and optimizing your plugin listing for visibility, there are many steps you can take to enhance the quality and effectiveness of your WordPress plugins.\n\nBy adopting these best practices, you can create plugins that are not only functional but also user-friendly, secure, and scalable. With the right approach, you can build plugins that help drive the success of your WordPress website and delight your users.\n\nFor more professional WordPress plugin development services, or if you want to for your plugin / WordPress development services you can contact or call us at , we’ll get back to you at the earliest. We provide services tailored to your requirements that suit your business."
    },
    {
        "link": "https://developer.wordpress.org/plugins/intro",
        "document": "Welcome to the Plugin Developer Handbook. Whether you’re writing your first plugin or your fiftieth, we hope this resource helps you write the best plugin possible.\n\nThe Plugin Developer Handbook covers a variety of topics — everything from what should be in the plugin header, to security best practices, to tools you can use to build your plugin. It’s also a work in progress — if you find something missing or incomplete, please notify the documentation team in slack and we’ll make it better together.\n\nIf there’s one cardinal rule in WordPress development, it’s this: Don’t touch WordPress core. This means that you don’t edit core WordPress files to add functionality to your site. This is because WordPress overwrites core files with each update. Any functionality you want to add or modify should be done using plugins.\n\nWordPress plugins can be as simple or as complicated as you need them to be, depending on what you want to do. The simplest plugin is a single PHP file. The Hello Dolly plugin is an example of such a plugin. The plugin PHP file just needs a Plugin Header, a couple of PHP functions, and some hooks to attach your functions to.\n\nPlugins allow you to greatly extend the functionality of WordPress without touching WordPress core itself."
    },
    {
        "link": "https://wpwebinfotech.com/blog/wordpress-plugin-development-best-practices",
        "document": "Have you got an amazing solution that can solve common problems WordPress users face? If yes, then creating a plugin will be the best idea to monetize your skills and contribute to the WordPress community.\n\nWordPress aims to provide a safe place for all users, regardless of whether they are developers or from a non-technical background. To put everyone on an equal footing, WordPress has created guidelines for developers. You need to follow these guidelines to get approval for your idea.\n\nIn this blog, we will discuss the essential rules for developing a WordPress plugin and the best practices expert WordPress developers follow. So, let’s begin.\n\nWhy You Should Follow WordPress Plugin Development Rules\n\nFollowing WordPress plugin development rules isn’t just about ticking boxes—it’s essential for both developers and users. When you create a plugin, you’re contributing to the massive WordPress ecosystem, and there are a few key reasons why sticking to the guidelines matters.\n• Ensure Plugin Security: WordPress prioritizes security, and so should you. The guidelines help you write secure code, reducing the chances of vulnerabilities like SQL injection or cross-site scripting (XSS). If your plugin isn’t secure, it could easily be hacked, putting user data at risk. Sticking to the rules ensures your code is safe for everyone.\n• Build Trust with Users: WordPress has a huge community of developers and users. When you follow the rules, your plugin is more likely to gain the trust of this community. If users know your plugin adheres to WordPress standards, they’ll feel safer installing it, which can lead to better reviews and higher downloads.\n• Avoid Plugin Removal: Violating WordPress guidelines can lead to serious consequences. If your plugin doesn’t meet their standards, it can be removed from the Plugin Directory, and in some cases, it may not be restored. This could mean losing all your hard-earned reviews and user base. Repeated violations can even get you banned, which means no more hosting plugins on WordPress.org.\n• Maintain Compatibility: WordPress constantly updates its platform, and following the development guidelines ensures your plugin stays compatible with the latest versions. Ignoring these rules could result in your plugin breaking or causing issues for users, which is bad for your reputation as a developer.\n• Foster Community Respect: By adhering to the community, forums, and plugin directory guidelines, you contribute to a healthy and respectful environment. This fosters good relationships with other developers, users, and WordPress moderators. Plus, keeping your contact information updated and responding promptly shows professionalism and responsibility.\n\nDid you know that WordPress powers more than 40% of the web? It has become the best CMS for businesses.\n\nWith great power comes great responsibility, and that’s why WordPress has established a set of rules for plugin development. If your plugin doesn’t comply with these rules, it will not get approval from the review team, and your efforts will go in vain.\n\nLet’s explore these rules one by one to improve your approval chances.\n\nRule: Plugins must be compatible with the GNU(General Public License).\n• The recommended license is “GPLv2 or later”.\n• All code, data, and images in the plugin directory must comply with GPL or a GPL-Compatible license.\n• Third-party libraries must also be compatible.\n\nWhy It Matters: This rule ensures that WordPress remains true to its open-source roots. It allows for collaboration, modification, and sharing within the community, fostering innovation and improvement.\n\nRule: Developers are responsible for the contents and actions of their plugins.\n• Developers must ensure all files comply with guidelines.\n• Developers must confirm the licensing of all included files and comply with third-party service terms.\n\nWhy It Matters: This rule emphasizes the importance of due diligence and ethical development. It protects users from potentially harmful or non-compliant code.\n\nRule: A stable version of a plugin must be available from its WordPress Plugin Directory page.\n• The directory version should be up-to-date.\n• Distributing code via alternate methods without keeping the directory version updated may result in removal.\n\nWhy It Matters: This ensures users can always access a reliable version of your plugin, maintaining trust in the WordPress ecosystem.\n• Obscuring code through techniques like p,a,c,k,e,r or uglify’s mangle is not permitted.\n• Developers must provide the public with maintained access to their source code and build tools.\n\nWhy It Matters: This promotes code transparency, easier debugging, and community collaboration. It’s a safeguard against hidden, malicious code.\n• Plugins cannot contain functionality that is restricted or locked behind payment.\n• Functionality cannot be disabled after a trial period or quota.\n• Sandbox-only access to APIs and services is not allowed.\n\nWhy It Matters: This ensures that users have access to full functionality from the start, promoting a fair and open plugin ecosystem.\n\nRule: You can offer software as a service.\n• Plugins can interface with external third-party services, even paid ones.\n• The service must provide substantial functionality and be clearly documented.\n• Certain practices, like moving code to create a false service, are prohibited.\n\nWhy It Matters: SaaS allows for integration with valuable external services while maintaining the integrity of the WordPress plugin system.\n\nRule: Plugins should not track users without their consent.\n• Explicit and authorized consent is required, usually via opt-in.\n• Documentation on data collection and use should be included in the readme.\n• Certain practices, like automated data collection or misleading users, are prohibited.\n\nWhy It Matters: This protects user privacy and builds trust in the WordPress ecosystem.\n\nRule: Plugins should not send executable code via third-party systems.\n• All communication must be made as securely as possible.\n• Practices like serving updates from non-WordPress.org servers or calling third-party CDNs (except for fonts) are prohibited.\n\nWhy It Matters: This rule significantly enhances the security of WordPress sites by preventing potential vectors for malicious code injection.\n\nRule: Developers and their plugins must not do anything illegal, dishonest, or morally offensive.\n• Violations of the WordPress.org Community Code of Conduct, WordCamp Code of Conduct, or Forum Guidelines are not allowed.\n\nWhy It Matters: This rule maintains the integrity of the WordPress community and protects users from unethical practices.\n\nRule: Plugins should not embed external links or credits on the public site without explicitly asking the user’s permission.\n• All “Powered By” or credit displays must be optional and default to not show.\n• Plugins cannot require credit or links to function.\n\nWhy It Matters: This respects the user’s control over their site’s appearance and prevents unwanted advertising.\n\nRule: Plugins should not hijack the admin dashboard.\n• Upgrade prompts and notices must be limited and used sparingly.\n• Error messages must include resolution information and self-dismiss when resolved.\n• Advertising within the dashboard should be avoided or limited.\n\nWhy It Matters: This maintains a clean, uncluttered admin experience for users, enhancing usability.\n\nRule: Public-facing pages on WordPress.org (readme.txt) must not be spam.\n• readme.txt should be written for people, not bots.\n\nWhy It Matters: This ensures that plugin descriptions are useful for users and maintains the integrity of the plugin directory.\n• Plugins must use the versions of libraries packaged with WordPress, not include their own.\n\nWhy It Matters: This ensures compatibility and security across the WordPress ecosystem.\n\nRule: Frequent commits to a plugin should be avoided.\n• The SVN repository is for releases, not development.\n\nWhy It Matters: This prevents unnecessary strain on the system and maintains the integrity of update notifications.\n\nRule: Plugin version numbers must be incremented for each new release.\n• The trunk readme.txt must always reflect the current version.\n\nWhy It Matters: This ensures users are properly notified of updates.\n\nRule: A complete plugin must be available at the time of submission.\n• Names cannot be “reserved” for future use.\n\nWhy It Matters: This prevents cluttering the directory with incomplete or non-functional plugins.\n• Use of trademarks or project names as the sole or initial term of a plugin slug is prohibited without legal ownership/representation.\n\nWhy It Matters: This ensures legal compliance and respects the intellectual property of others in the community.\n\nBest Practices to Follow for WordPress Plugin Development\n\nNow that you know the basic rules for WordPress plugin development, you might be ready to get started.\n\nIf you want your WordPress plugin to be a hit, you need to follow some tried-and-true best practices. This section will guide you through the essential steps, from crafting a solid strategy and adhering to coding standards, to ensuring security and using advanced features like AJAX.\n\nStick with these best practices to create a plugin that stands out and delivers a great user experience.\n\nBefore diving into WordPress plugin development, having a clear strategy is essential. Without a solid plan, your efforts can go to waste. Start by identifying the pain points of your target audience and developing solutions that genuinely address their needs.\n• Is my plugin meant for everyday use or just a demo?\n• Am I developing it for community contribution, self-promotion, or income generation?\n• Are there existing plugins that already solve the problem?\n\nIt’s important to stand out. Your plugin should bring something new to the table that existing plugins fail to deliver. Users won’t install your plugin if it doesn’t provide clear value or enhance their website’s functionality.\n\nYour plugin needs to have a unique selling point (USP) and be easy to market. It should improve the website’s usability and offer a simple solution to a complex problem. A well-defined strategy ensures that you can create and promote your plugin successfully.\n\nFollowing WordPress Coding Standards is crucial to ensure that your plugin is clean, readable, and maintainable. Since WordPress is developed by a global community, adhering to these standards helps everyone understand your code, making it easier for others to contribute, debug, and improve.\n\nWordPress provides detailed standards for CSS, HTML, JavaScript, and PHP. Abiding by these guidelines enhances code consistency and reduces common errors. For instance, clear formatting, proper indentation, informative variable names, and well-placed comments make a huge difference.\n\nNotice the clear spacing, indentation, and proper commenting. Following these standards not only makes your code easier to understand but also simplifies future edits and debugging.\n\nWordPress plugins can be developed using either standalone functions or classes. If you choose to use functions, be mindful of the global namespace, where your functions can conflict with others. For example, a generic function like plugin_init might already exist in another plugin, causing issues.\n\nTo avoid conflicts, you can prefix your function names with something unique, like the initials of your plugin name. For example, if your plugin is called “My Great Plugin,” you could prefix all your functions with mgp_ to avoid collisions.\n\nA better solution is to structure your plugin as a class. This ensures that all your functions are namespaced under the class name, allowing you to use shorter, more common method names without worrying about conflicts. For example:\n\nYou can then access these methods under their own namespace:\n\nUsing classes ensures cleaner, more modular code, preventing function name conflicts and improving code organization.\n\nSecurity is one of the most crucial aspects of WordPress plugin development, yet it’s often neglected. Don’t make this mistake—your plugin’s security is vital for protecting your users and their data. Here are some key practices to ensure your plugin is secure:\n\nAlways sanitize any input data and escape output data to prevent malicious code from being injected or executed. WordPress provides several functions to help with this:\n\nIf you’re using wp_insert_post or $wpdb->insert, WordPress automatically sanitizes the data for you. But if you’re working with raw SQL queries (like $wpdb->get_results), always use wpdb->prepare to prevent SQL injection. For example:\n\nYou should use:\n\nHere, %s is a placeholder for a string (‘publish’), and %d is a placeholder for a number (1). This ensures that the data passed into the query is safe.\n\nUse Nonces for Form and URL Verification\n\nTo ensure that your WordPress site generated a form or URL and not an attacker, you need to use nonces (a number used once). For forms, you can generate a nonce field using wp_nonce_field, which adds a hidden field to your form:\n\nThen, when the form is submitted, verify the nonce using wp_verify_nonce:\n\nIf you’re working with URLs (for example, links in emails), use wp_nonce_url to generate a secure, nonced URL:\n\nThis will create a URL with a nonce, like:\n\nYou can verify this URL using check_admin_referer:\n\nAccessing external web services can be tricky, but WordPress provides an easy way to handle this with the HTTP API. It helps you make remote requests using the most efficient method available, ensuring your plugin works smoothly.\n\nFor example, to fetch remote data, use wp_remote_get:\n\nTo send data (like logging into a service), use wp_remote_post:\n\nBy using these WordPress functions, you ensure that your plugin handles web services efficiently, with minimal risk of failure.\n\n6. Clean Up Your Plugin’s Data on Deactivation\n\nWhen users deactivate and delete your plugin, it’s essential that you clean up any settings, options, or custom tables created during activation. Deactivating the plugin only stops it from running, but deleting it should remove any data it left behind.\n\nYou can handle this by creating an uninstall.php file. When the user deletes the plugin, WordPress will automatically run the code inside this file to perform a cleanup:\n\nBy adding this, you ensure that no unnecessary data lingers in the database after your plugin is removed.\n\nWordPress Debug is a powerful feature that should be enabled while you’re writing the plugin code. It helps you catch errors and troubleshoot issues, ensuring that your plugin works reliably. To enable it, add these lines to your wp-config.php file:\n\nWP_DEBUG will catch different types of errors:\n• Warnings: Problems that won’t break the plugin but need fixing.\n• Fatal Errors: Critical errors that will stop your plugin from working.\n\nBy enabling logging (WP_DEBUG_LOG), you can also store these errors for future reference, which is helpful for long-term troubleshooting. After you finish development, remember to turn off WP_DEBUG to avoid unnecessary notifications on the live site.\n\nAJAX (Asynchronous JavaScript and XML) is a powerful tool that allows you to update content on a page without needing to reload the entire page. When you’re developing a WordPress plugin, integrating AJAX can significantly improve both functionality and user experience.\n\nUsing AJAX, you can make your plugin more interactive and dynamic. For example, users can:\n\nAll of this happens in the background, without the need for a page refresh. This creates a seamless experience for the user, who won’t even notice that the content has been updated.\n\nWhy Use AJAX in WordPress Plugins?\n• Improved User Experience: Since AJAX eliminates the need for full-page reloads, it leads to faster content updates and smoother browsing, resulting in better user retention and conversion rates.\n• Streamlined Content Editing: AJAX allows for real-time editing of content on the page, making content management faster and easier.\n• Reduced Server Load: By only loading the necessary content instead of the whole page, AJAX reduces the strain on your server, which can speed up page load times and improve overall performance.\n\nWordPress also has built-in support for AJAX, which makes it highly compatible with plugins. This means you can smoothly integrate AJAX into your WordPress plugin without needing complex workarounds. Many professional WordPress developers and companies use AJAX in plugins rather than embedding it directly into the code, as it ensures better security and functionality.\n\nBy implementing AJAX, you not only enhance your plugin’s performance but also give users a more dynamic and enjoyable experience on their WordPress site.\n\nBuilding a WordPress plugin is both a challenge and an opportunity. By starting with a solid plan and sticking to WordPress coding standards, you set yourself up for success. Remember to:\n• Plan Ahead: Define your plugin’s purpose and make sure it stands out.\n• Follow Coding Standards: Keep your code clean and consistent for easier maintenance.\n• Prioritize Security: Sanitize inputs, escape outputs and use nonces to protect your users.\n• Clean Up: Ensure your plugin doesn’t leave behind unnecessary data when deleted.\n• Use Debugging Tools: Enable WP_DEBUG to spot and fix issues early in development.\n\nWith these practices in mind, you’ll not only create a functional plugin but one that’s secure, efficient, and user-friendly. Dive in, follow these steps, and watch your plugin make a positive impact on WordPress sites everywhere.\n\nIf you need help, our WordPress development experts are here to guide you through every step of the process."
    },
    {
        "link": "https://quora.com/What-are-the-main-practices-for-WordPress-plugin-development",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://medium.com/@arifhossen.dev/php-8-4s-new-array-functions-a-beginner-s-complete-guide-2025-50fda9719548",
        "document": "PHP 8.4 brings exciting new array functions that make developers’ lives easier. This comprehensive guide will explore these powerful additions with practical examples that even beginners can understand. Whether a novice programmer or an experienced developer, these new functions will streamline your array operations.\n\nPHP 8.4 introduces four powerful array functions that simplify common array operations. These functions reduce code complexity and improve readability, making array manipulation more intuitive than ever.\n\nThe function is your go-to solution for finding the first element that matches your criteria.\n\nNeed to find the key instead of the value? is your solution.\n\nCheck if any element meets your condition with this handy function.\n\nVerify if all elements meet your criteria using .\n• Always check for null returns with\n• Use type declarations for better code reliability\n\nQ: Are these functions available in PHP 8.3?\n\nA: No, these functions are specifically introduced in PHP 8.4.\n\nQ: Can I use these functions with associative arrays?\n\nA: Yes, all these functions work with both indexed and associative arrays.\n\nQ: What happens if no element matches the condition in array_find()?\n\nA: It returns null, so always handle this case in your code.\n\nPHP 8.4’s new array functions represent a significant step forward in array manipulation. They provide cleaner, more readable code while reducing the complexity of common array operations. Start using these functions in your projects to write more elegant and maintainable PHP code."
    },
    {
        "link": "https://php.net/manual/en/ref.array.php",
        "document": "permanovd at gmail dot com ¶ A simple trick that can help you to guess what diff/intersect or sort function does by name.\n\n\n\n[suffix] assoc - additional index check. Compares both value and index.\n\n\n\nExample: array_diff_assoc, array_intersect_assoc.\n\n\n\n[suffix] key - index only check. Ignores value of array, compares only indexes.\n\n\n\nExample: array_diff_key, array_intersect_key.\n\n\n\n[suffix] **empty** - no \"key\" or \"assoc\" word in suffix. Compares values only. Ignores indexes of array.\n\n\n\nExample: array_diff, array_intersect.\n\n\n\n[prefix] u - will do comparison with user defined function. Letter u can be used twice in some functions (like array_udiff_uassoc), this means that you have to use 2 functions (one for value, one for index).\n\n\n\nExample: array_udiff_uassoc, array_uintersect_assoc.\n\n\n\nThis also works with array sort functions:\n\n\n\n[prefix] a - associative. Will preserve keys.\n\n\n\nExample: arsort, asort.\n\n\n\n[prefix] k - key sort. Will sort array by keys.\n\n\n\nExample: uksort, ksort.\n\n\n\n[prefix] r - reverse. Will sort array in reverse order.\n\n\n\nExample: rsort, krsort.\n\n\n\n[prefix] u - sort by user defined function (same as for diff/intersect). \n\n\n\nExample: usort, uasort.\n\net2225zas14 at susu dot ru ¶ Be careful with type hints in callbacks when using array-traverse functions. In some cases, this may silently cause the data type of elements to change. \n\n\n\n\n\nThe above example will output (PHP version 8.3.6, error_reporting E_ALL):\n\n\n\n\n\nrenatonascto at gmail dot com ¶ Big arrays use a lot of memory possibly resulting in memory limit errors. You can reduce memory usage on your script by destroying them as soon as you´re done with them. I was able to get over a few megabytes of memory by simply destroying some variables I didn´t use anymore. \n\nYou can view the memory usage/gain by using the funcion memory_get_usage(). Hope this helps!\n\nindioeuropeo at driverop dot com ¶ I need to take an element from the Array and change its position within the Array by moving the rest of the elements as required.\n\nThis is the function that does it. The first parameter is the working Array. The second is the position of the element to move and the third is the position where to move the element.\n\nThe function returns the modified Array.\n\n Examples:\n\n Return:"
    },
    {
        "link": "https://php.net/manual/en/language.types.array.php",
        "document": "An array in PHP is actually an ordered map. A map is a type that associates values to keys. This type is optimized for several different uses; it can be treated as an array, list (vector), hash table (an implementation of a map), dictionary, collection, stack, queue, and probably more. As array values can be other arrays, trees and multidimensional arrays are also possible.\n\nExplanation of those data structures is beyond the scope of this manual, but at least one example is provided for each of them. For more information, look towards the considerable literature that exists about this broad topic.\n\nAn array can be created using the array() language construct. It takes any number of comma-separated pairs as arguments. The comma after the last array element is optional and can be omitted. This is usually done for single-line arrays, i.e. is preferred over . For multi-line arrays on the other hand the trailing comma is commonly used, as it allows easier addition of new elements at the end. The key can either be an int or a string. The value can be of any type. Additionally the following key casts will occur:\n• s containing valid decimal s, unless the number is preceded by a sign, will be cast to the type. E.g. the key will actually be stored under . On the other hand will not be cast, as it isn't a valid decimal integer. s containing valid decimals, unless the number is preceded by asign, will be cast to thetype. E.g. the keywill actually be stored under. On the other handwill not be cast, as it isn't a valid decimal integer.\n• s are also cast to s, which means that the fractional part will be truncated. E.g. the key will actually be stored under . s are also cast tos, which means that the fractional part will be truncated. E.g. the keywill actually be stored under\n• s are cast to s, too, i.e. the key will actually be stored under and the key under . s are cast tos, too, i.e. the keywill actually be stored underand the keyunder\n• will be cast to the empty string, i.e. the key will actually be stored under . will be cast to the empty string, i.e. the keywill actually be stored under\n• s and s can not be used as keys. Doing so will result in a warning: . s ands can not be used as keys. Doing so will result in a warning: If multiple elements in the array declaration use the same key, only the last one will be used as all others are overwritten. Example #2 Type Casting and Overwriting example The above example will output: As all the keys in the above example are cast to , the value will be overwritten on every new element and the last assigned value is the only one left over. PHP arrays can contain int and string keys at the same time as PHP does not distinguish between indexed and associative arrays. The above example will output: The key is optional. If it is not specified, PHP will use the increment of the largest previously used int key. The above example will output: It is possible to specify the key only for some elements and leave it out for others: Example #5 Keys not on all elements The above example will output: As you can see the last value was assigned the key . This is because the largest integer key before that was . Example #6 Complex Type Casting and Overwriting example This example includes all variations of type casting of keys and overwriting of elements. // the value \"a\" will be overwritten by \"b\"\n\n // the value \"b\" will be overwritten by \"c\"\n\n // as this is not an integer string it will NOT override the key for 1\n\n // as this is not an integer string it will NOT override the key for 1\n\n // the value \"c\" will be overwritten by \"g\"\n\n // the value \"i\" will be overwritten by \"j\"\n\n // value \"k\" is assigned the key 2. This is because the largest integer key before that was 1\n\n // the value \"k\" will be overwritten by \"l\"\n\n The above example will output: When assigning a negative integer key , PHP will take care to assign the next key to . The above example will output: Warning Prior to PHP 8.3.0, assigning a negative integer key would assign the next key to , the previous example would therefore output: Array elements can be accessed using the syntax. The above example will output: Prior to PHP 8.0.0, square brackets and curly braces could be used interchangeably for accessing array elements (e.g. and would both do the same thing in the example above). The curly brace syntax was deprecated as of PHP 7.4.0 and no longer supported as of PHP 8.0.0. Attempting to access an array key which has not been defined is the same as accessing any other undefined variable: an -level error message ( -level prior to PHP 8.0.0) will be issued, and the result will be . Array dereferencing a scalar value which is not a string yields . Prior to PHP 7.4.0, that did not issue an error message. As of PHP 7.4.0, this issues ; as of PHP 8.0.0, this issues . An existing array can be modified by explicitly setting values in it. This is done by assigning values to the array, specifying the key in brackets. The key can also be omitted, resulting in an empty pair of brackets ( ). $arr[ ] = ; $arr[] = ; // may be an or // may be any value of any type If doesn't exist yet or is set to or , it will be created, so this is also an alternative way to create an array. This practice is however discouraged because if already contains some value (e.g. string from request variable) then this value will stay in the place and may actually stand for string access operator. It is always better to initialize a variable by a direct assignment. Note: As of PHP 7.1.0, applying the empty index operator on a string throws a fatal error. Formerly, the string was silently converted to an array. Note: As of PHP 8.1.0, creating a new array from value is deprecated. Creating a new array from and undefined values is still allowed. To change a certain value, assign a new value to that element using its key. To remove a key/value pair, call the unset() function on it. // This is the same as $arr[13] = 56;\n\n // at this point of the script\n\n\n\n // This adds a new element to\n\n // the array with key \"x\"\n\n\n\n // This removes the element from the array\n\n\n\n // This deletes the whole array\n\n As mentioned above, if no key is specified, the maximum of the existing int indices is taken, and the new key will be that maximum value plus 1 (but at least 0). If no int indices exist yet, the key will be (zero). Note that the maximum integer key used for this need not currently exist in the array. It need only have existed in the array at some time since the last time the array was re-indexed. The following example illustrates: // Now delete every item, but leave the array itself intact:\n\n // Append an item (note that the new key is 5, instead of 0).\n\n The above example will output: Arrays can be destructured using the (as of PHP 7.1.0) or list() language constructs. These constructs can be used to destructure an array into distinct variables. Array destructuring can be used in to destructure a multi-dimensional array while iterating over it. // logic here with $id and $name\n\n Array elements will be ignored if the variable is not provided. Array destructuring always starts at index . // Assign the element at index 2 to the variable $baz\n\n As of PHP 7.1.0, associative arrays can be destructured too. This also allows for easier selection of the right element in numerically indexed arrays as the index can be explicitly specified. // Assign the element at index 'baz' to the variable $three\n\n // Assign the element at index 2 to the variable $baz\n\n Array destructuring can be used for easy swapping of two variables. The spread operator ( ) is not supported in assignments. Attempting to access an array key which has not been defined is the same as accessing any other undefined variable: an -level error message ( -level prior to PHP 8.0.0) will be issued, and the result will be .\n\nAlways use quotes around a string literal array index. For example, is correct, while is not. But why? It is common to encounter this kind of syntax in old scripts: This is wrong, but it works. The reason is that this code has an undefined constant ( ) rather than a string ( - notice the quotes). It works because PHP automatically converts a bare string (an unquoted string which does not correspond to any known symbol) into a string which contains the bare string. For instance, if there is no defined constant named , then PHP will substitute in the string and use that. Warning The fallback to treat an undefined constant as bare string issues an error of level . This has been deprecated as of PHP 7.2.0, and issues an error of level . As of PHP 8.0.0, it has been removed and throws an Error exception. Note: This does not mean to always quote the key. Do not quote keys which are constants or variables, as this will prevent PHP from interpreting them. The above example will output: Checking 0: Notice: Undefined index: $i in /path/to/script.html on line 9 Bad: Good: 1 Notice: Undefined index: $i in /path/to/script.html on line 11 Bad: Good: 1 Checking 1: Notice: Undefined index: $i in /path/to/script.html on line 9 Bad: Good: 2 Notice: Undefined index: $i in /path/to/script.html on line 11 Bad: Good: 2 More examples to demonstrate this behaviour: // carrot\n\n\n\n// Incorrect. This works but also throws a PHP error of level E_NOTICE because\n\n// of an undefined constant named fruit\n\n//\n\n// Notice: Use of undefined constant fruit - assumed 'fruit' in...\n\n // apple\n\n\n\n// This defines a constant to demonstrate what's going on. The value 'veggie'\n\n// is assigned to a constant named fruit.\n\n // carrot\n\n\n\n// The following is okay, as it's inside a string. Constants are not looked for\n\n// within strings, so no E_NOTICE occurs here\n\n // Hello apple\n\n\n\n// With one exception: braces surrounding arrays within strings allows constants\n\n// to be interpreted\n\n // Hello apple\n\n\n\n// Concatenation is another option\n\n // This will not work, and will result in a parse error, such as:\n\n// Parse error: parse error, expecting T_STRING' or T_VARIABLE' or T_NUM_STRING'\n\n// This of course applies to using superglobals in strings as well\n\nprint \"Hello $arr['fruit']\";\n\nprint \"Hello $_GET['foo']\"; When error_reporting is set to show level errors (by setting it to , for example), such uses will become immediately visible. By default, error_reporting is set not to show notices. As stated in the syntax section, what's inside the square brackets (' ' and ' ') must be an expression. This means that code like this works: This is an example of using a function return value as the array index. PHP also knows about constants: \"This is just an informal notice\" Note that is also a valid identifier, just like in the first example. But the last example is in fact the same as writing: \"This is just an informal notice\" So why is it bad then? At some point in the future, the PHP team might want to add another constant or keyword, or a constant in other code may interfere. For example, it is already wrong to use the words and this way, since they are reserved keywords. Note: To reiterate, inside a double-quoted string, it's valid to not surround array indexes with quotes so is valid. See the above examples for details on why as well as the section on variable parsing in strings.\n\nFor any of the types int, float, string, bool and resource, converting a value to an array results in an array with a single element with index zero and the value of the scalar which was converted. In other words, is exactly the same as . If an object is converted to an array, the result is an array whose elements are the object's properties. The keys are the member variable names, with a few notable exceptions: integer properties are unaccessible; private variables have the class name prepended to the variable name; protected variables have a '*' prepended to the variable name. These prepended values have bytes on either side. Uninitialized typed properties are silently discarded. The above example will output: These can result in some unexpected behaviour: // This will become '\\0A\\0A'\n\n // This will become '\\0B\\0A'\n\n The above example will output: The above will appear to have two keys named 'AA', although one of them is actually named '\\0A\\0A'. Converting to an array results in an empty array.\n\nThe array type in PHP is very versatile. Here are some examples: // After the above code is executed, $a will be the array\n\n// array('color' => 'red', 'taste' => 'sweet', 'shape' => 'round',\n\n// 'name' => 'apple', 0 => 4), and $b will be the array\n\n// array(0 => 'a', 1 => 'b', 2 => 'c'), or simply array('a', 'b', 'c').\n\n // this is the same as array(0 => 7, 1 => 8, ...)\n\n\n\n // the value 10 will be overwritten by 12\n\n The above example will output: Do you like red? Do you like blue? Do you like green? Do you like yellow? Changing the values of the array directly is possible by passing them by reference. Example #14 Changing element in the loop /* ensure that following writes to\n\n$color will not modify the last array element */\n\n\n\n The above example will output: The above example will output: // fill an array with all items from a directory\n\n Arrays are ordered. The order can be changed using various sorting functions. See the array functions section for more information. The count() function can be used to count the number of items in an array. Because the value of an array can be anything, it can also be another array. This enables the creation of recursive and multi-dimensional arrays. // Some examples to address values in the array above\n\n Array assignment always involves value copying. Use the reference operator to copy an array by reference. // $arr2 is changed,\n\n // $arr1 is still array(2, 3)\n\n\n\n // now $arr1 and $arr3 are the same"
    },
    {
        "link": "https://infoq.com/articles/php8-functions-methods",
        "document": "PHP 8.0 adds support for several functions- and methods-related features, some of which are an improvement of existing features, while others are completely new features. The enhanced callable syntax in PHP 8.1 can be used to create anonymous functions from a callable. Named function arguments may be used along with positional arguments with the added benefit that named arguments are not ordered and can convey meaning by their name. Fibers are interruptible functions that add support for multitasking.\n\nObject inheritance is a programming paradigm that is used by most object-oriented languages including PHP. It makes it possible to override public and protected methods, and class properties and constants defined in a class from any class that extends it. In PHP, public methods cannot be reimplemented with a more restrictive access such as by making a method . To demonstrate this, consider a class B that extends class A and reimplements a public method from A.\n\nWhen run, the script generates an error message:\n\nOn the contrary, private methods defined in a class are not inherited and can be reimplemented in a class that extends it. As an example, class B extends class A in the following script and reimplements a private method from A.\n\nPrior to PHP 8.0, two restrictions applied to private method redeclaration in an extending class: the and modifiers were not allowed to be changed. If a method was declared , an extending class was not allowed to redeclare the method. If a private method was declared static, it was to be kept static in an extending class. And, if a private method did not have the static modifier, an extending class was not allowed to add a static modifier. Both restrictions have been lifted in PHP 8. The following script runs ok in PHP 8.\n\nThe only private method restriction in PHP 8 is to enforce constructors, which are sometimes used to disable the constructor when using static factory methods as a substitute.\n\nA variadic argument may replace any number of function arguments\n\nIn PHP 8, a single variadic argument may replace any number of function arguments. Consider the following script in which class B extends class A and replaces the three-argument function with a single variadic argument.\n\nThe function in class B may be called using multiple arguments.\n\nThe output is as follows:\n\nA callable is a PHP expression that can be called, such as an instance method, a static method, or an invocable object. A callable can be used to create a short-form expression for a method call, for example. In PHP 8.1, there is new callable syntax available:\n\nThe AVariableCallableExpression represents a variable callable expression. The ellipses … is included in the syntax.\n\nWhy a new callable syntax? Let’s recall what the traditional callable syntax looks like with some examples:\n\nThis has two issues:\n• The scope is not maintained at the point at which the callable is created.\n\nTo demonstrate this, consider the following script for sorting an array in which the method returns a callable for the method with .\n\nUsing instead of would fix the scope issue, but using the method makes the call verbose. The new callable syntax fixes both the scope and syntax verbosity issues. With the new callable syntax, the function becomes:\n\nThe array gets sorted with output:\n\nThe new syntax can be combined with the traditional syntax involving strings and arrays to fix the scope issue. The scope at which the callable is created is kept unchanged.\n\nThe new callable syntax may be used with static methods as well, as demonstrated by the following script that includes a static function.\n\nThe output is the same as before:\n\nThe following are equivalent ways for calling a method:\n\nThe following are equivalent ways for calling a static method:\n\nThe new callable syntax may be used even if a function declares parameters.\n\nA callable must be called with its arguments if the method declares any.\n\nSimplified Syntax can be used with any PHP Callable expression\n\nThe simplified callable syntax may be used with any PHP callable expression. The callable syntax is not supported with the new operator for object creation because the callable syntax AVariableCallableExpression(...) does not have provision to specify constructor args, which could be required. The following is an example that is not supported:\n\nFatal error: Cannot create Closure for new expression\n\nThe following script demonstrates the full range of callable expressions that are supported.\n\nAnother new feature in PHP 8.0 is support for adding a trailing comma at the end of the list of parameters to a function to improve readability. Any trailing comma is ignored. A trailing comma may not always be useful, but could be useful if the parameters list is long or if parameter names are long, making it suitable to list them vertically. A trailing comma is also supported in closure use lists.\n\nPHP 8.0 deprecates declaring optional arguments before required arguments. Optional arguments declared before required arguments are implicitly required.\n\nThe following script demonstrates the required parameters implicit order in addition to the use of trailing comma.\n\nThe output is as follows:\n\nNullable parameters are not considered optional parameters and may be declared before required parameters using the form or the explicit nullable type, as in the following script:\n\nPHP 8.0 adds support for named function parameters and arguments besides already supported positional parameters and arguments. Named arguments are passed in a function call with the following syntax:\n\nSome of the benefits of named arguments are the following:\n• Function parameters may be given a meaningful name to make them self-documenting\n• Arguments are order-independent when passed by name\n\nIn the following script, the function declares named parameters. The function may be passed argument values with or without argument names. When positional arguments are passed, the function parameters declaration order is used. When named arguments are passed, any arbitrary order may be used.\n\nNamed arguments and positional arguments may be used in the same function call. The mixed arguments call is used with the same example function .\n\nNotice that named arguments are used only after positional arguments. The following script reverses the order and uses positional arguments after named arguments:\n\nDeclaring optional arguments before required arguments is deprecated even with named arguments, as demonstrated by the following script:\n\nWhen using optional named parameters after required named parameters, named arguments may be used to skip over one or more optional parameters in a function call, as in the script:\n\nYou may call a function with only a subset of its optional arguments, regardless of their order.\n\nOutput is as follows:\n\nEven when calling a function with a subset of its optional arguments, positional arguments cannot be used after named arguments, as demonstrated by script:\n\nThe following error message is produced:\n\nFatal error: Cannot use positional argument after named argument\n\nPHP 8.1 improves on the named arguments feature by supporting named arguments after unpacking the arguments, as in the script:\n\nThe output is as follows:\n\nHowever, a named argument must not overwrite an earlier argument as demonstrated by script:\n\nOutput is as follows:\n\nPrior to PHP 8.0, if you called a non-static method in a static context, or statically, you only got a deprecation message. With 8.0 you now get an error message. Also, is undefined in a static context. To demonstrate this, consider the following script in which a non-static method is called with static syntax .\n\nIf you run the script, you would get an error message:\n\nPHP 8.1 adds support for multi-tasking with Fibers. A Fiber is an interruptible function with a stack of its own. A Fiber may be suspended from anywhere in the call stack, and resumed later. The new Fiber class is a final class that supports the following public methods:\n\nConstructor to create a new Fiber instance. The parameter is the callable to invoke when starting the fiber. Arguments given to will be provided as arguments to the given callable. The callable need not call at all, or if called need not call directly. The call to may be deeply nested down the call stack. Starts the fiber. The method returns when the fiber suspends or terminates. A variadic list of arguments is provided to the callable used when constructing the fiber. A mixed value is returned from the first suspension point or if the fiber returns. A is thrown if the fiber has already been started when this method is called. Resumes the fiber, returning the given mixed value from Fiber::suspend(). Returns when the fiber suspends or terminates. The returned mixed value is actually returned from the next suspension point or NULL if the fiber returns. Throws a FiberError if the fiber has not started, is running, or has terminated. Throws the given exception into the fiber from . Returns when the fiber suspends or terminates. The param is the Throwable $exception. The returned mixed Value is actually returned from the next suspension point or if the fiber returns. Throws a if the fiber has not started, is running, or has terminated. Gets the mixed return value of the fiber callback. is returned if the fiber does not have a return statement. Throws a if the fiber has not terminated or the fiber threw an exception. Returns bool if the fiber has been started. Returns bool if the fiber has been suspended. Returns bool if the fiber is currently running. Returns bool if the fiber has been terminated. Suspends the fiber. Returns execution to the call to , , or . The fiber may be resumed with or . Cannot be called from the main thread outside the fiber. The param is a to return from or . The return mixed value is provided to . Throws FiberError if not within a fiber (i.e., if called from the main thread). Returns the currently executing fiber instance or if in main.\n\nA Fiber may be started only once, but may be suspended and resumed multiple times. The following script demonstrates multitasking by using a Fiber to perform different types of sorts on an array. The Fiber is suspended after each sort, and resumed later to perform a different type of sort.\n\nThe output is as follows:\n\nIf the Fiber is not resumed after first suspension, only one type of sort is made, which could be implemented by commenting out the two calls to resume().\n\nOutput is the result from the first sort:\n\nPHP 8.0 introduces a new interface called e that provides only one method . The method if provided in a class would implicitly implement the interface. Consider the class A that provides a method.\n\nThe script returns 1 from the type check for .\n\nThe reverse is however not true. If a class implements the Stringable interface, it must explicitly provide the __toString() method as the method is not added automatically, as in:\n\nPHP 8 introduces a number of new functions belonging to its standard library.\n\nThe function returns a to indicate if the string given as the first argument contains the string given as the second argument. The following script returns :\n\nAnd the following script returns 1, or true:\n\nThe str_starts_with function returns a bool to indicate if the string given as the first argument starts with the string given as the second argument. The following script returns false.\n\nAnd the following script returns 1, or true.\n\nThe function returns a to indicate if the string given as the first argument ends with the string given as the second argument. The following script returns .\n\nAnd the following script returns , or .\n\nThe function divides two numbers and returns a value, as demonstrated by the script:\n\nThe function, aliased to on Windows, synchronizes data to a stream on a file. To demonstrate its use, create an empty file directory that contains PHP scripts to run. Run the script:\n\nSubsequently, open the test.txt file to find the text:\n\nThe function returns a bool to indicate whether a given array is a list. The array must start at 0, the keys must be all consecutive integer keys and in the correct order. The following script demonstrates the function:\n\nMagic methods are special methods in PHP to override default actions They include the following methods, of which the constructor method may be the most familiar:\n\nAs of PHP 8.0 the signature of the magic method definitions must be correct, which implies that if type declarations are used in method parameters or return type, they must be identical to that in the documentation. The new method must declare as return type. To demonstrate declare return type as :\n\nHowever, functions that don’t declare a return type by definition such as the constructor function must not declare a return type, not even a return type. The following script is an example:\n\nAll magic methods with a few exceptions, e.g. , must be declared with public visibility. To demonstrate this, declare with visibility.\n\nEven though it is ok to omit mixed return types, the method signature must be the same. For example, in the following script, declares without specifying its return type, while the defines its first parameter as an\n\nWith PHP 8.1 most internal methods, which are the methods in internal classes, have “tentatively” started to declare a return type. Tentatively implies that while in 8.1 only a Deprecation notice is raised, in version 9.0 an error condition message shall be output. Thus, any extending class must declare a return type that is compatible with the internal class, or a deprecation notice is issued. To demonstrate this, extend the internal class Directory and redeclare the function read() without a return type:\n\nThe following script, however is OK:\n\nWhile stack traces for exceptions that include detailed information about method parameters are quite useful for debugging, you may not want to output parameter values for some sensitive parameters such as those associated with passwords and credentials. PHP 8.2 introduces a new attribute called \\SensitiveParameter so that, if a method parameter is annotated with the attribute, the parameter’s value is not output in an exception stack trace.\n\nTo demonstrate this, consider the following script in which the function has the parameter associated with the attribute.\n\nThe function throws an just to demonstrate the feature. Call the function:\n\nNotice that the exception stack trace does not include the value for the parameter, and instead has listed.\n\nThe built-in functions and have often been misunderstood because their names imply encoding/decoding just about any string. Actually the functions are for encoding/decoding only ISO8859-1, aka “Latin-1”, strings. Additionally, the error messages they generate are not descriptive enough for debugging. PHP 8.2 has deprecated these functions. The following script makes use of them:\n\nIn PHP 8.2, the functions and accept all iterables. The function copies the elements of an iterator into an array. The function counts the elements of an array. These functions accept an as the first argument. In PHP 8.2, the type of the parameter has been widened from to so that any arbitrary iterable value is accepted.\n\nThe following script demonstrates their use with both and .\n\nThe output is as follows:\n\nIn this article in the PHP 8 series, we discussed the new features related to functions and methods, the most salient being named function parameters/arguments, a simplified callable syntax, and interruptible functions called Fibers.\n\nIn the next article in the series, we will cover new features for PHP’s type system."
    },
    {
        "link": "https://php.net/manual/en/language.attributes.overview.php",
        "document": "PHP attributes provide structured, machine-readable metadata for classes, methods, functions, parameters, properties, and constants. They can be inspected at runtime via the Reflection API, enabling dynamic behavior without modifying code. Attributes provide a declarative way to annotate code with metadata. Attributes enable the decoupling of a feature's implementation from its usage. While interfaces define structure by enforcing methods, attributes provide metadata across multiple elements, including methods, functions, properties, and constants. Unlike interfaces, which enforce method implementations, attributes annotate code without altering its structure. Attributes can complement or replace optional interface methods by providing metadata instead of enforced structure. Consider an interface that represents an operation in an application. Some implementations may require a setup step while others do not. Instead of forcing all classes implementing to define a method, an attribute can indicate setup requirements. This approach increases flexibility, allowing attributes to be applied multiple times when necessary. Example #1 Implementing optional methods of an interface with Attributes\n\nHarshdeep ¶ While the example displays us what we can accomplish with attributes, it should be kept in mind that the main idea behind attributes is to attach static metadata to code (methods, properties, etc.). \n\n\n\nThis metadata often includes concepts such as \"markers\" and \"configuration\". For example, you can write a serializer using reflection that only serializes marked properties (with optional configuration, such as field name in serialized file). This is reminiscent of serializers written for C# applications.\n\n\n\nThat said, full reflection and attributes go hand in hand. If your use case is satisfied by inheritance or interfaces, prefer that. The most common use case for attributes is when you have no prior information about the provided object/class.\n\n\n\n\n\nversus, using attributes,\n\n The example above is a little extra convoluted with the existence of the VersionedObject class as I wished to display that with attribute mark ups, you do not need to care how the base class manages its attributes (no call to parent in overriden method). Florian Krmer ¶ I've tried Harshdeeps example and it didn't run out of the box and I think it is not complete, so I wrote a complete and working naive example regarding attribute based serialization."
    },
    {
        "link": "https://kinsta.com/blog/wordpress-hooks",
        "document": "WordPress Hooks are one of the most important tools to have in a WordPress developer’s arsenal. They’re the foundation of WordPress plugin and theme development. You can use WordPress’ many built-in hooks to ‘hook into’ the WordPress Core with your custom code and do or modify something.\n\nThere are two types of WordPress hooks: Actions and Filters. Hooks are so common that even WordPress Core uses them extensively itself. WordPress also includes a way for you to define your own custom hooks so that other developers can hook into your code.\n\nLearning how actions, filters, and custom hooks work is essential to master WordPress development.\n\nThe first half of this article covers the basics of WordPress hooks and explains how they work with multiple examples. In the second half, you’ll learn how you can use hooks to customize WordPress, create your own custom hooks, and use them to build your own extensible plugins.\n\nA WordPress page is assembled by tons of functions and database queries. The WordPress Core, plugins, and theme work together to output the page elements like text, images, scripts, and styles. Once fully assembled, the browser then puts them all together and renders the page.\n\nWordPress hooks allow you to ‘hook into’ this build process at certain points and run your custom code. The main function of hooks is to allow you to modify or add features to WordPress without touching the core files.\n\nThe WordPress Plugin API powers the functionality of WordPress hooks. You use hooks by calling certain WordPress functions called Hook Functions at specific instances during the WordPress runtime.\n\nUsing hook functions, you can bundle your custom code within a Callback Function and have it registered with any hook. Once registered, this callback will run wherever the hook is, allowing you to augment or replace the default WordPress features.\n\nThe hook’s position in the code execution process is an important factor. You’ll learn more about its significance in the upcoming sections.\n\nTwo Types of WordPress Hooks: Actions and Filters\n\nWordPress includes two types of hooks called Actions and Filters. Actions let you do something at certain predefined points in the WordPress runtime, while Filters let you modify any data processed by WordPress and it.\n\nActions are defined in the WordPress code as:\n\nThe string is the name of the action. You can specify the variable to pass additional arguments to the callback function. If this field is not specified, then its default value will be empty.\n\nExample: The action can be hooked in to run custom code every time WordPress processes the site header. This action doesn’t have any other arguments.\n\nFilters are defined in the WordPress code as:\n\nThe string is the name of the filter, the variable is the value that needs to be filtered and returned, and the variable can pass additional arguments, just like with actions.\n\nExample: The filter can be hooked in to modify the text displayed in the admin footer. As of WordPress 5.4, its default value will display the sentence Thank you for creating with WordPress. in the admin area footer.\n\nYou’ll learn how to hook into actions and filters later with many examples from the WordPress Core.\n\nOnce hooked, you can direct your code to do or customize something on your site. For instance, you can use hooks to send an automated email after publishing a post, or load custom stylesheets to change the appearance of your site.\n\nThe simplest way to understand hooks is to imagine your WordPress website as building a house.\n\nHooks are akin to using a crane to move construction items back and forth. The items being transferred are the Callback Functions which include your custom code. These items (or functions) can help you build or modify the house.\n\nCallback functions can be regular PHP functions, default WordPress functions, or custom functions defined by you.\n\nWe can only carry certain items on specific carriers attached to particular hooks. Thus, actions can only be hooked with Action Functions. Likewise, filters can only be hooked with Filter Functions.\n\nWhile it’s tedious to change the hooks and carriers on a crane, WordPress makes it super easy by including over 2,200 types of default hooks.\n\nYou can find hooks spread across the WordPress Core, allowing you to tap into the exact position where you want to hook in to and run your custom code.\n\nAs per the WordPress Plugin Handbook:\n\nThere’s widespread inconsistency with how the terms Hook, Action, and Filter are used. A few tutorials and guides mix them up with the functions associated with them. A major reason this confusion exists is because of the complex nature of how hooks work.\n\nEven when you look carefully inside the WordPress Core, you’ll find that there’s not much difference between adding actions and filters. Here’s the source code for the add_action() function from the file:\n\nThe function just calls the function and returns its value. Why? Because they both fundamentally work the same way, except for one difference.\n\nThe function returns a value that can change existing data types, while the function returns nothing (NULL value in PHP).\n\nIf you’re still confused, don’t fret! Once you’re through the first half of this article, all will be clear. We’ll stick to the official WordPress Codex terminology as it’s clear, precise, and universal.\n\nFor now, familiarize yourself with the hook routine shown below.\n\nLet’s break down the differences between Actions and Hooks.\n\nSometimes, you can use either an action or a filter to accomplish the same goal. For instance, if you want to modify the text in a post, you can register a callback function with the publish_post action and change the post content when it’s being saved to the database.\n\nOr you can register another callback function with the_content filter to modify the post content before it’s displayed in the browser.\n\nTwo different approaches with the same result. Knowing when to use one over the other is key to being a good WordPress developer.\n\nThe house example was simple enough to understand the basic functioning of hooks, but it doesn’t capture the complexity of how they work. Most importantly the concepts of hook position and specificity.\n\nA better example would be to imagine processing a WordPress webpage as assembling a car. Unlike manufacturing a car, which takes time, assembling a webpage is almost instantaneous.\n\nMuch like how a car is put together part-by-part in a modern assembly line, a WordPress webpage is assembled element-by-element by the server and the client.\n\nThe WordPress Core is like the car engine, chassis, and other essentials, powering the “core” functionality of the website.\n\nYou can have a functional website with just the WordPress Core, but where’s the fun in that? You need to add exciting features to the site. That’s where WordPress plugins and themes step in, both of which use hooks extensively.\n\nIn the example above, every numbered station is like a hook inside the WordPress Core. There are two kinds of stations, like actions and filters. Each station includes a specific type of slot that only accepts certain tools, akin to action functions and filter functions.\n\nAll the stations are placed at frequent intervals for modularity and efficiency.\n\nDepending on the requirement at a particular position, we can attach (or hook) the most appropriate tool for the job at that specific station. These tools are like the callback functions used to interact with or modify WordPress.\n\nSome tools can significantly alter the working of the car, much like callbacks registered to actions. Other tools are only used to customize the appearance of the car, like callbacks registered to filters.\n\nUsing the right tools at the right stations is crucial to build a top-notch car. In the same way, hooks help us customize WordPress as per our unique needs.\n\nIf you extend this analogy, plugins are like adding helpful automobile features such as airbags, entertainment console, remote keyless system, etc (like these to enhance WooCommerce’s functionality). Themes are analogous to customizing the visual part of the car, like the overall design, paint job, rims, etc. (here’s how to customize your WordPress theme).\n\nWhere to Register Hooks and Their Functions?\n\nThere are two recommended ways to add hooks in WordPress:\n• Plugins: Make your own plugin and add all your custom code within it.\n• Child Themes: Register the hooks and callback functions in your child theme’s file.\n\nFor this tutorial, let’s start by creating a plugin. To do that, create a new folder in your directory.\n\nI’m naming my plugin , but you can name it anything you want. As per WordPress guidelines, you need to create a PHP file with the same name ( ) inside your plugin directory.\n\nAdd the following header fields to your plugin file to register it with WordPress. You can learn more about plugin header requirements in the WordPress Codex.\n\nSave this file and then activate the plugin in your WordPress dashboard. I’ll be using this plugin within a local WordPress installation to demonstrate how hooks work.\n\nAs a side note, you can also edit the WordPress Core files directly to register hooks. However, it’s not recommended as all your custom code will be overwritten every time you update WordPress. You shouldn’t add hooks inside your parent theme for the same reason.\n\nA WordPress hook by itself does nothing. It just sits in the code, waiting for some hook function to activate it. To make use of a hook, you need to call at least 2 other functions.\n\nFirst, you need to register the hook with a hook function and reference a callback function within it. And then you need to define the callback function which you mentioned earlier in the hook function. WordPress will run this callback function every time the hook is fired.\n\nThe order in which you define these functions doesn’t matter, but it’s a good idea to place them close together.\n\nActions and filters have distinct hook functions. From now on, let’s refer to them as Action Functions and Filter Functions. As you’ll see, they have their own syntax and parameter requirements.\n\nActions provide a way for running your custom code at a particular point in the execution of WordPress Core, plugins, or themes.\n\nYou can register a callback function with an action by following these steps:\n• Define a Callback function with your custom code inside it. This callback function will run when any action it’s registered to is fired during WordPress’ code execution.\n• Hook your callback function to the action you want with the function. As per the WordPress Codex, the add_action() function needs to pass at least two parameters:\n• \n• Name of the action to hook into.\n• Name of the callback function that’ll run when the action is triggered.\n• The function also accepts two optional parameters for setting the and the . We’ll discuss them both later.\n\nIt’s good practice to name your callback function parameters as close as possible to the parameters passed by the hook function.\n\nLet’s look at an example of using the function.\n\nExample of Hooking an Action\n\nWordPress includes a built-in action called init that fires after WordPress has finished loading and authenticated the user, but before any headers are sent. Many plugins use this hook as the starting point to instantiate their code as almost all the major WordPress features have finished loading by the time WordPress runs this action.\n\nWordPress has a similar action called admin_init. It fires while the admin screen is being initialized, while the action fires only after WordPress has finished loading.\n\nLet’s run a custom code to a simple message during the execution of action. Here’s how to do it:\n\nYou can see the message being echoed in the top-left corner of my local WordPress installation.\n\nWordPress includes actions every time it does something, like a user logging in or publishing a new post. You can find a comprehensive list of all the actions run by WordPress in the Plugin API/Action Reference page.\n\nThe Codex has split all the actions listed in there into various categories and arranged them from first to last in the WordPress execution order.\n\nIn most cases, many of these actions won’t do anything as nothing is hooked to them. But if you need them, they’re there for you to hook into.\n\nFeeling a bit overwhelmed with all the actions? It’s natural. As you gain more experience and go through the WordPress Core source code, it’ll become easier to find the perfect hook for your needs. Just perform a search for the term “do_action” and you’ll find plenty of actions that you can hook into.\n\nThe function can accept two more parameters: one for setting the and the other for setting the . While they’re optional, if used correctly, they can be super helpful.\n\nThe first additional parameter supported by function sets the . This parameter can only be a positive integer. The lower the priority number, the earlier the function will run. Its default value is 10 if you don’t specify it.\n\nTo see how it works, let’s register three callback functions to the action, but each with different priorities.\n\nIn the examples above, the callback function with the lowest priority number will run first and the one with the highest number will run last. If their priorities are the same, then they’ll run in the order in which you register them.\n\nPriority plays an important role when a single hook can have multiple callback functions registered with it. To avoid unexpected results, you can set a priority for each callback function, so they fire in the order you want them to.\n\nBy default, any callback function registered through the function will receive only one argument. However, sometimes you may need to pass extra data to the callback function.\n\nFor this reason the function accepts an optional parameter for setting the number of arguments.\n\nA great example to showcase this is the comment_post action. This action runs immediately after WordPress adds a comment to the database. If you don’t set the parameter, it’ll pass only a single value to the callback function, which in this case will be the .\n\nIf you set the number of arguments parameter to 3 as in the above example, the action function will pass three values: , , and .\n\nWordPress sets the value to 1 for approved comments, 0 if not approved, and ‘spam‘ if the comment is marked as spam.\n\nThe variable is an array that includes all the comment data, like the comment author’s name, email address, website, and the content of the comment itself. You can check out the WordPress Codex to find all the key-value pairs included in the ‘commentdata’ array.\n\nYou can have as many arguments as you want, but the callback function and the function need to specify the same number of arguments.\n\nBy passing additional parameters to the callback function, you can do more with your code. For instance, you can check whether or not a comment is approved and automatically email the comment text to the admin if it’s approved. It’s not possible to do this without specifying the additional arguments as your callback function won’t have access to the data.\n\nIf you don’t want to set the priority, but only want to change the number of arguments, you still need to set a priority. Just use its default value (i.e. 10).\n\nWordPress Core itself uses many of its built-in actions to perform various functions.\n\nTake the wp_head action for example. It’s fired when WordPress is outputting the header section of the webpages (the code that goes between and ).\n\nYou can find most of WordPress Core’s action functions related to the hook in the file. I scoped through the code and compiled a list of all the functions which invoke the action.\n\nThat’s a lot of callback functions hooked to just one action. Setting the here is crucial to make sure that the most important hooked functions run first.\n\nIn the above example, loading the scripts with callback function is more important (priority = 1) than loading the site icon meta tags with callback function (priority = 99).\n\nWhile is the most used action function, there are many others that are equally helpful. Let’s see how they all work.\n\nThis action function checks whether an action has been hooked. It accepts two parameters. The first one is the name of the action. The second parameter is optional and is the name of the callback function.\n\nIf you specify just the first parameter, it returns if any function is hooked to the parameter.\n\nBut if you also specify the second parameter, it’ll return if the specified callback function isn’t registered to the action mentioned.\n\nIf it finds the callback function attached to the action hook though, it’ll return the (an integer) set for that function on this action hook.\n\nWe’ve encountered this action function before. WordPress uses it to define all its default actions, enabling other functions to hook into them. Just like WordPress, you can also use the function to create a new custom action by specifying a new action name as the parameter.\n\nJust declaring this function won’t do anything by itself. But it’ll sit in the code, waiting for other action functions to activate it. Passing any extra arguments is optional, but it’s important if you want your callback functions to use them.\n\nThis action function is identical to , except for one difference. Any arguments passed through it must be an array. When you have a lot of arguments to pass or your arguments are already in an array, this function is super helpful.\n\nSince PHP arrays are an ordered map, make sure that the arguments you pass are in the right order.\n\nAn example of this action function’s usage is the admin_bar_menu action. It can be hooked in to add, manipulate, or remove the various admin bar items. All the admin bar items are defined as elements of an array.\n\nIf you want to count the number of times any action is fired, you can invoke this action function.\n\nThis function returns an integer value.\n\nThe function is extremely handy when you want to run a callback function only the first time an action is run and never again.\n\nThis action function removes a callback function hooked to the specified action. For instance, you can use this function to remove the default WordPress functions hooked into built-in actions and replace them with your own.\n\nThere are a few prerequisites to calling the function:\n• The and parameters must be the same as the ones used originally in the function.\n• You cannot call the function directly. You need to call it from inside another function.\n• If the callback function is registered from a class, then removing it has other requirements. You can check out the WordPress Codex documentation for more details.\n• You cannot remove the callback function before it’s registered or after it’s run.\n\nHere’s an example of how WooCommerce uses this action function to remove the default product thumbnail on the main shop page.\n\nThis action function removes everything hooked to an action. The priority parameter is optional.\n\nRemember that this function can’t be called from the action you would like to deregister callback functions from. That would cause an infinite loop. You can hook into an action that’s fired earlier to run this function without any errors.\n\nThis action function checks whether the specified action is being run or not. It returns a boolean value ( or ).\n\nYou can leave the parameter empty to check whether any action is being executed. It’ll return every time any action is fired.\n\nActions Example 1: Show a Maintenance Message to Your Site Visitors\n\nSometimes, it’s best to take your site offline and put up an Under Maintenance page. Thankfully, WordPress provides an easy way to do just that.\n\nLet’s break down the code and go through each step:\n• get_header is an action that’s triggered before the header template file of the site loads. It’s a perfect action to hook into if you want to interrupt the main site from being loaded.\n• Hook into the action using the function with the callback function.\n• is a user capability test function that checks whether the current user is logged in and can edit posts. Every user registered on a WordPress site except for those with Subscriber roles has the capability to edit posts. There are other robust ways to perform this check, but we’ll stick with this simple method here.\n• Use the default wp_die() function to kill WordPress execution gracefully and display an HTML page with an error message. You can use HTML syntax in the error message parameter to format it.\n\nAfter saving the code in my custom plugin, I loaded up my local WordPress installation in private browsing mode. The Under Maintenance page is a success!\n\nThe site loads successfully if I’m logged in as it passes the user capability test. You can now continue working on fixing your site while it shows regular visitors this page.\n\nIf you’re running a multi-author blog or managing a site for your clients, then you may need to hide certain admin menus from the WordPress dashboard for non-admin users. You can do that by hooking into the action.\n\nHere’s a step-by-step walkthrough of the code snippet above:\n• admin_menu is an action that’s triggered before the admin menu loads in the WordPress dashboard area.\n• Hook into the action using the function using the callback function.\n• The callback function defines the logic of the code. It’s run every time the action fires.\n• Inside the callback function, the function checks whether the logged-in user is an admin. Since only site admins have the capability, the function ends with a statement if the user is an admin.\n• The wp_get_current_user() WordPress function retrieves the current user object. With this function, we can check whether the logged-in user has a particular set. This is an optional line, in case you want to omit certain non-admin users from being locked out due to this callback function.\n• The remove_menu_page() WordPress function removes top-level admin menus. In the code example above, I’m removing the following admin menus: Plugins, Themes, Tools, Users, Pages, and Options.\n\nAfter saving the plugin file, here’s a snapshot of the WordPress dashboard with an admin logged in.\n\nAnd here’s a screenshot of the WordPress dashboard with a non-admin user logged in.\n\nThis solution only hides the specified admin menu items from appearing in the WordPress dashboard. All users can still access them by entering the menu URLs in their browsers.\n\nTo disable certain user roles from accessing specific menus, you need to edit their capabilities.\n\nFilters provide a way for your custom code to modify data used by other WordPress functions. Unlike actions, functions hooked to filters need to return a value.\n\nYou can hook a callback function to a filter by following these steps:\n• Define a Callback function that will run when WordPress fires the filter. Callback functions for filters need to have at least one argument specified, as all filters pass at least one value to their callback functions.\n• Register the callback function to a filter with the function. The filter will take care of calling the callback function. As per the WordPress Codex, the add_filter() function needs to pass at least two parameters:\n• Name of the filter to hook into.\n• Name of the callback function that’ll run when the filter fires.\n• The function also accepts two additional optional parameters for setting the and the . These parameters work the same way as with the function.\n\nHere’s an example of how you can use the function to hook a callback function to a filter.\n\nWordPress provides a filter called login_message to filter the message displayed on the login page above the login form. The value returned by this filter can have HTML markup.\n\nLet’s hook into the filter and modify the message shown on the login screen.\n\nThe statement in the callback function checks whether the login message is already set, mostly by another plugin or theme. In such cases, the callback function returns the original value making no changes. This is one way to avoid conflicts with other plugins or themes.\n\nYou can see the message being displayed above the login form in the WordPress login page.\n\nYou can style all the elements on the login page by enqueueing custom style sheets. Doing so will allow you to fully customize your default WordPress login page.\n\nYou’ll learn how to load custom style sheets using actions in the “Customize the WordPress Login Page with Hooks” section.\n\nAnywhere WordPress processes or modifies data, you can almost certainly find a filter to hook into and change it. Think of filters as an interface between the WordPress database and the browser.\n\nYou can find an exhaustive list of all the filters supported by WordPress in the Plugin API/Filter Reference page.\n\nAll the filters listed there are split up into multiple categories and arranged from top to bottom in the WordPress execution order.\n\nIf you want to find filters to hook into in the WordPress source code, perform a search for the term “apply_filters” and you’ll get tons of results. The WordPress Code Reference is also a great place to search for everything that’s included in WordPress, including actions and filters.\n\nWordPress Core itself uses a lot of its built-in filters to modify data used by its various functions.\n\nConsider the the_content filter for example. It filters post content after it’s retrieved from the database and before it’s displayed on the browser.\n\nJust like with actions, you can find most of WordPress Core’s filter functions related to the hook in the file.\n\nHere’s a list of all the core functions that hook into the filter:\n\nNote the priority specified for certain callback functions.\n\nFor example, the do_blocks() function parses any dynamic blocks in the post content and re-renders them to be compatible with WordPress’ new block editor. It’s specified a higher priority than the default (10) to make sure that the content is block-ready before the other functions are run.\n\nThe convert_smilies() function is set to run at a lower priority as its task is to convert text smileys to image sprites. Having it run in the end after filtering all the post content makes sense.\n\nFun Fact: Shortcodes are a subset of filters. They take in input from the shortcode, process it, and then return the output back to it. Learn more about shortcodes in this ultimate WordPress Shortcodes guide.\n\nWhile is the most used filter function, there are many other helpful filter functions. Let’s discuss them all in depth.\n\nThis function checks whether the specified filter is hooked by any function. It accepts two parameters. The first parameter is for entering the filter name. The second parameter is optional and is for entering the name of the callback function.\n\nIf you specify just the first parameter, it’ll return if the is hooked by any function.\n\nHowever, if you specify both the parameters, then it’ll return if the callback function mentioned isn’t registered with the given filter. If it finds the callback function registered with the filter, then it’ll return the (an integer) set for that function on this filter.\n\nOne possible application of the function is to check whether any filter has been hooked already, and based on that go ahead with code execution.\n\nThis filter function is like the action function. Any callback functions hooked to this filter will run wherever this function is in the WordPress code.\n\nYou can also use this function to create a new custom filter by specifying the filter name and the filter value as parameters.\n\nDon’t forget to specify any additional arguments if you want to pass them on to your callback functions. Most filters only use one argument, so it’s easy to miss out on defining the additional ones.\n\nThis function is like the function, except all the arguments it accepts are bundled up as an array.\n\nThis filter function can be handy when you have many arguments to pass or if all of them are already in an array. Ensure that the arguments inside the array are in the right order.\n\nThis filter function retrieves the name of the current filter or action being run. You don’t need to specify any parameters as it runs within the callback function.\n\nHere’s an example of its usage:\n\nDespite its name, this function can retrieve the name of both actions and filters.\n\nThis filter function removes the callback function attached to the specified filter. It’s works exactly like the function. You can use it to delete default WordPress functions registered with a specific filter, and if necessary replace them with your own functions.\n\nTo unhitch a callback function hooked to a filter, the and parameters must be identical to the arguments used when hooking the callback function.\n\nIf the filter has been added from within a class, which is usually the case when they’re added by plugins, then you need to access the class variable to remove the filter.\n\nLet’s check out a great example of in action.\n\nThe WooCommerce plugin uses the wc_lostpassword_url() call function hooked to its lostpassword_url filter to redirect “Lost Your Password?” attempts by users.\n\nIt takes any user clicking on that link to a custom frontend page with the URL . Without this filter, it’d take them to the standard WordPress login URL at .\n\nSay you want to reset this functionality and send your users to the default password retrieval page or to a separate page altogether. You can remove this callback function like this:\n\nThis filter function removes all the callback functions registered to a filter.\n\nThe popular Advanced Excerpts plugin uses this function to remove all default functions hooked to and filters. After doing that, it then hooks its own callback function to the filter.\n\nThis filter function checks whether the filter specified is being executed at the moment.\n\nIt returns a boolean value ( or ).\n\nYou should note the difference between this function and the function, which returns the name of the filter or action being run (a string).\n\nManaging all the comments on your WordPress site can be a cumbersome process. The comment_text filter lets you set up rules to modify the comments before they’re printed on the display.\n\nYou can direct WordPress to remove any expletives automatically before they’re displayed to your site visitors. Let’s get to it.\n• comment_text is a filter hook that lets you modify the text of a comment before the browser displays it. You can register your callback function with it to filter its output.\n• The function lets you hook into the filter and attach a callback function to it.\n• is the name of the callback function. It accepts only one parameter, which is a string containing the comment text. Define this custom function with the appropriate code logic.\n• Store all the profane words in a PHP array called . You can add as many words as you want to this array. I’m storing the size of this array in the variable with the help of sizeof() PHP function.\n• Loop through all the profane words and use PHP’s default str_ireplace() function to replace any of the matching profanities with symbols. Since this is a case-insensitive string replacement function, you don’t have to worry about capitalization. Check out different ways to perform a search and replace.\n• Use to output the filtered comment text.\n\nSave the changes to your custom plugin file and reload any post with comments. All the words you’ve included in the array should now be replaced with ‘*’ symbols.\n\nThe original comments will still be available as is in the database. This filter only modifies the comment text before it’s outputted to the frontend.\n\nOnce you’re hooked into the right filter, you can do a lot of cool stuff with it.\n\nFor example, you can also use the filter to remove any URLs from all the comments (make sure to read this in-depth guide on how to stop spam comments in WordPress).\n\nOr you can hook into the pre_comment_approved filter and mark comments as approved, spam, or thrash based on predefined criteria.\n\nYou’ve already seen how WordPress uses filter to modify post or page content. Let’s use the same filter to add something at the end of each post.\n\nUnderstanding the code logic in the above example:\n• filter hook helps you grab the content of the current post and customize it.\n• Use the function to hook into filter with the callback function.\n• Define the callback function by passing the current post’s content as a parameter ( ).\n• Inside the callback function, check that you’re only filtering the content in the main query, which in this case is the post content. If you don’t verify this, sometimes the code will unintentionally filter content from other places such as sidebars and footers.\n• is_main_query() and in_the_loop() conditionals determine whether the query is a main query and happening within the main WordPress Loop.\n• is_single() conditional checks whether the query is for a single post.\n• Use PHP’s string concatenation operator ( ) to add extra stuff to the page content.\n• the filtered comment if all the above conditionals check out. If it doesn’t, then just return the content with no changes.\n\nSave your plugin file, load up any post on your site, and scroll to the end.\n\nYou can use the same logic to add anything to the beginning of all your posts by reversing the position of string concatenation parameters ( ).\n\nLet’s use both actions and filters to customize the default WordPress login page. I’ll create a new plugin called Sal Custom Login Page to do this. You can find the full source code of this plugin at the end of this section.\n\nLet’s get started by adding the standard plugin header fields and registering it with WordPress.\n\nFirst, hook into the login_enque_scripts action to enqueue your custom style sheet. Any scripts or styles you enqueue here are included in the header section of your login page.\n\nIf you want to load custom scripts and style sheets on your site’s frontend (rather than on the admin backend or login area), then you need to hook into the action. You can read more about it in the WordPress Codex and Kinsta’s article on how to use wp_enqueue_scripts.\n\nInside the callback function, use the wp_enqueue_style() function to load the custom style sheet ( ) placed in the same plugin’s directory. WordPress’ built-in plugin_dir_url( __FILE__ ) function makes it easy to get the URL path (with a trailing slash) of the current plugin’s directory.\n\nI won’t explain the CSS styles applied here, but you can find them all in the source code linked at the end of this section.\n\nNext, hook into the login_errors filter to change the error message shown when someone enters incorrect credentials. Filtering the error message will block attackers from guessing your username easily.\n\nEvery time someone enters incorrect login credentials, the login form box shakes aggressively. This is an optional step, but I’ve included it to show that you can also remove certain features from the login page.\n\nYou’ll learn more about and functions in the final section of this article.\n\nThe final step is to change the login header’s URL and text. You can hook into the login_headerurl and login_headertext filters to modify them both.\n\nIf you want to build upon this plugin and experiment further, you can download the plugin’s source code and get started.\n\nIt’s hard to memorize all the various hooks WordPress has. There are thousands of built-in actions and filters to hook into. Hence, finding an appropriate hook may sometimes feel like a scavenger hunt.\n\nThankfully, there are various resources you can use to identify the perfect hook for your needs.\n\nThe first place to get familiar with hooks is the WordPress Codex, particularly its Hooks section in the Plugin Handbook. Here you can find essential information about hooks and links to complete documentation on all actions and filters.\n\nBookmark these helpful links from the Plugin Handbook to speed up your search:\n\nBoth the action reference and the filter reference pages will give you a list of all the hooks that typically run during a specific WordPress request.\n\nFor example, you can find all the hooks fired when you access an admin page, when you’re dealing with post page attachments, or with categories.\n\nThe WordPress Codex also includes a handy search tool to find all its functions, hooks, methods, and classes. This page also lists new and updated components in the most recent version of WordPress. Head here first if you want to find what’s happening inside WordPress.\n\nThis index of WordPress hooks sorts all the hooks by type, the WordPress version they debuted, and if they’re deprecated.\n\nSorting the hooks in order of their appearance will show you that the oldest WordPress hooks are still the most used ones. If you’re new to WordPress development, getting familiar with these popular actions and filters is the fastest way to catch up.\n\nWhile this index hasn’t been updated since WordPress 5.1, it’s still helpful to skim through all the major hooks.\n\nStill finding it hard to find the hook you want? An online search with the right keyword is always a good way to start. If everything else fails, you can always dig into the WordPress code.\n\nAs we’ve seen, WordPress has tons of hooks available, but not every hook fires on every page. If you can find which actions and filters you can hook into on a particular page, then you’ve won half the battle.\n\nWhile you can use advanced PHP debugging tools like xdebug and PHPCS to help with this, there are simpler development tools like Debug Bar and Query Monitor which you can run inside WordPress.\n\nDebug Bar is an official WordPress plugin that adds a Debug menu to your admin bar. It shows PHP warnings and notices, cache requests, MySQL queries, and other helpful debugging information.\n\nAfter installing the plugin, you need to add the code snippet below to your site’s file to enable its debugging features.\n\nYou should now see the Debug menu option show up in your admin bar. Clicking on it will take you to its dashboard where you can see various queries and caches attached to the page you accessed it from.\n\nNext, you need to install the Debug Bar Actions and Filters Addon plugin. It’s a handy extension that’ll add two more tabs to your Debug Bar dashboard to display actions and filters triggered on the current request.\n\nIt’ll also list all the functions hooked to them with their priority.\n\nYou can click on the Debug menu from any page on your site to know all the actions and filters that you can hook into on that page.\n\nQuery Monitor is a powerful developer tools panel for WordPress. You can use it to dig into the hooks available on a page and their load order.\n\nUnlike with Debug Bar, you don’t have to install any addons to see the actions and filters triggered on a certain page.\n\nQuery Monitor also gives you more information about where exactly a hook is being fired from.\n\nIn the component column, you can see that most of the hooks are registered from the Core. But some hooks are registered from a theme or plugin. A few hooks may be registered from more than one component.\n\nYou can use the hook and component dropdown menus to view only the hooks you need.\n\nNote: Query Monitor uses “Hooks” as a catchall term for both actions and filters, but it calls the registered callback functions as “Actions.” This is technically a wrong definition and can confuse you, so do keep that in mind.\n\nYou can do more than just check all the queries and requests with Query Monitor. It also includes advanced features such as listing styles, scripts, languages, Ajax calls, user capability checks, and REST API Calls.\n\nWordPress has a special hook named ‘all’ that you can hook in to run a callback function for every single hook, regardless of whether it’s registered with them all. It’s useful to debug page crashes or if you want to know when a particular event is happening.\n\nFor instance, you can use the hook like in the example below to all the actions being run.\n\nThe defined above will run when any action fires. Knowing what the last run action was will give you a better idea of where you need to look into.\n\nWordPress uses the WP_Hook class to implement how hooks work. This core class is used to handle all the inbuilt WordPress actions and filters. You can find almost all the code related to this class in the wp-includes/class-wp-hook.php file.\n\nTechnically, the class is an array of objects comprising properties such as callbacks, iterations, current_priority, nesting_level, and doing_action. It also defines a lot of useful hook functions which can be called using the WP_Hook methods.\n\nMost WordPress developers don’t have to worry much about where WordPress stores hooks as long as they stick to the Plugin API guidelines.\n\nHow to Create Your Custom WordPress Hooks\n\nYou’ve seen the various hooks WordPress provides through its Plugin API. You’ve also looked at how you can use the default hooks to inject your own code into WordPress runtime.\n\nIf you’re a plugin or theme developer, it’s good practice to provide other developers with a way to interact with your code the same way. Custom hooks let you do exactly that. They allow other developers to extend and modify the functionality of your plugins and themes.\n\nCreating your own actions and filters is fairly simple. You use the same functions WordPress Core uses to create hooks. Let’s look at a few examples.\n\nHow to Create Custom Actions in WordPress\n\nUse the function to create a custom action hook. Here’s how you do it:\n\nNow, other developers can hook into your plugin or theme without modifying the source code. All they have to do is register their callback functions to your plugin’s custom action using the function.\n\nMake sure to document your custom hooks thoroughly, explaining what they do in detail. After all, the main use of creating custom hooks is to help other developers interact with your code.\n\nHow to Create a Custom Filter in WordPress\n\nUse the function to create a custom filter hook. Here’s how you can do it:\n\nYour custom filter’s parameters should include a unique identifier and a value to filter. Other developers can hook into your custom filter with the function and modify the passed value.\n\nWhen you’re defining your custom filter, ensure that it’s not positioned before the value it’s supposed to filter is defined. If you don’t position the filter correctly, the filtered value will get overwritten by the default value afterward.\n\nIt’s important to choose a unique name for all your custom hooks. Since any plugin or theme can have its own custom hooks, having identical hook names can cause code collisions with unexpected results.\n\nFor example, if you name your action , it’s highly likely that other plugin developers may also choose the same term as it isn’t unique enough. If any website installs both yours and the other developer’s plugins, it can cause errors that’ll be hard to trace.\n\nYou can prefix all your custom hooks with a common identifier to keep them both simple and unique. So, instead of , you can name it (plugin_name_ is the unique prefix here).\n\nLet’s create an extensible plugin (or a pluggable plugin) that will allow other developers to interact with it using its custom hooks.\n\nI’ll name this plugin Custom Hooks Demo. Its main function is to output a quotation box wherever you insert a shortcode. It’ll include custom actions and filters at the right locations to make it possible for other developers to modify or extend its functionality.\n\nYou can refer to my WordPress shortcodes guide to learn more about how shortcodes work.\n\nLet’s get started with the extensible plugin.\n• The function is used to create the custom shortcode. And then you define the shortcode’s callback function with all of this plugin’s functionality.\n• ob_start() is a PHP function that enables output buffering. It’s a super handy feature that instructs PHP to hold onto any output in the server’s buffer memory rather than outputting it right away. You can use it to build complex, readable HTML code in PHP.\n• defines your first custom action. To make it useful, you need to define it before the plugin outputs anything. Other developers can hook into this custom action to run their code before this custom shortcode prints out anything.\n• Create the variables you want to filter. In this plugin, those variables are and . They’re both strings in this example, but you can set them to be any PHP data-type (e.g. integer, boolean, array).\n• Use the function to create your custom filters. Since all filters return a value, you can assign the previously defined variables to this filter’s returned value. Other developers can now hook into this filter to modify the default values of the predefined variables.\n• Use statements to build your shortcode’s output line-by-line. Since we’ve enabled output buffering, no output will reach the browser right away.\n• defines your last custom action. You need to define it at the very end, but before returning all the buffer contents.\n• ob_get_clean() is an default 3-in-1 PHP function. It’ll retrieve the buffer contents, eliminate all the buffer data, and then stop the output buffering. It’ll the collected buffer contents as a single concatenated string.\n\nOnce saved and activated, adding the shortcode to your post content will output a quotation box with the default values.\n\nNow, let’s create another plugin called Custom Hooks Demo Extension. It’ll hook into all the custom hooks created by the previous plugin and do or modify something.\n\nAs you can see, this extension plugin contains nothing but action and filter functions hooking into the original plugin at the right places to make modifications.\n\nIt uses the and functions to register its callback functions with the custom actions and filters created by the original plugin (e.g. , ).\n\nCustom action hooks allow you to interject your code at the right intervals in the original plugin and run your own scripts. Here, we’re adding an image at the top and a button at the bottom.\n\nLikewise, custom filter hooks let you modify the values of the quote content and its author name. The ultimate outcome is a plugin that’s fully extensible by anyone without modifying its source code.\n\nCustom hooks enable individual WordPress plugins and themes to have a rich ecosystem of extensible plugins. Consider the WooCommerce plugin. It adds ecommerce functionality to WordPress, but it also includes tons of hooks within its code.\n\nWooCommerce has hundreds of extensions and plugins that use its hooks to build on its core functionality and make it even better.\n\nYou can use these extensions to integrate WooCommerce with Stripe, MailChimp, Salesforce, Zapier, and much more.\n\nA good practice is to check out the documentation section of popular WordPress plugins to see how they implement custom hooks. A few of my top suggestions are Easy Digital Downloads, BuddyPress, Quiz and Survey Master, and Gravity Forms.\n\nWhen to Use Custom Hooks?\n\nDepending on the theme or plugin you’re creating, and who it’s intended for, you may wonder whether you need to add any custom hooks.\n\nA good rule of thumb when deciding on whether or not to add custom hooks is to check if they offer any extensibility benefits to other developers. If not, then it’s better to hold off until other developers ask you to add them.\n\nYou need to be highly certain about adding custom hooks to your plugin or theme. Once it’s released, and if other developers have already used it, you can’t ever change it without breaking backward compatibility.\n\nYou’ve already seen examples of how to remove callback functions registered to certain hooks. These callbacks could be registered by plugins, themes, or even WordPress Core itself. Let’s look at removing hooked callback functions with more examples.\n\nTo remove a callback function from a hook, depending on whether it’s registered to an action or a filter, you need to use the or functions.\n\nOne caveat is that you need to call these functions with the identical parameters used to register the callback function. Basically, copy-paste the parameters from their or functions.\n\nAlso, you can remove callback functions only after they’re registered. If you try to remove them before they’re registered, the removal process will fail. You need to get the execution order of the hooks right.\n\nLet’s say you want to remove a callback function registered by a theme that adds bloat to your site (you want a fast site, don’t you?).\n\nFor example, the above callback function could load many unnecessary scripts and style sheets. Removing it will give your site a huge performance boost.\n\nHowever, you need to ensure that the function runs only after the template_redirect action. One way to do this is to hook into the after_setup_theme action as it’s triggered after the action.\n\nThe will now unhitch itself from the action.\n\nThere’s more to removing callback functions than just disabling them altogether. Sometimes you may need to remove them temporarily, run your code, and then add them again.\n\nFor example, the save_post action fires every time the and functions are called. You can find them both defined in the file.\n\nSo, if you have a callback function hooked to the action, and if you call or functions within your callback function, the action will fire multiple times.\n\nA function calling the action which also calls it can create unexpected results. One way to get around this issue is to use the function inside your callback function before you call .\n\nThat’s another practical use of or functions. Digging deeper into the WordPress Core will help you understand how you can avoid these situations better.\n• Your Complete Guide to the WordPress Media Library\n• How to Create and Modify a WordPress Cron Job\n• Disable WordPress Plugins From Loading on Specific Pages and Posts\n\nThere are multiple advantages of using WordPress hooks if you’re a WordPress developer.\n\nNot only do hooks allow you to modify or extend the core functionality of WordPress, but you can also use them to modify plugins, themes, and let other developers interact with your plugins or themes.\n\nIt’s time to get hooked on WordPress hooks!"
    },
    {
        "link": "https://ilovewp.com/guide-wordpress-hooks-actions-filters",
        "document": "The WordPress hook system is a way for developers to modify the default behavior of the WordPress platform by “hooking” into various points in the WordPress code. This allows developers to add their own custom code to the platform without having to modify the core WordPress code.\n\nThere are two types of hooks in WordPress: actions and filters. Actions allow developers to add their own code at a specific point in the WordPress code, while filters allow developers to modify data before it is displayed or saved to the database.\n\nTo use hooks in WordPress, developers can create custom functions and then use the or functions to “hook” their custom function into the WordPress code.\n\nHere is an example of how to use the function to create a custom function that displays a message on the WordPress login page:\n\nIn this example, the function is the custom function that will display the message. The function is used to “hook” the custom function into the WordPress code at the action hook. This will cause the message to be displayed on the login form.\n\nHere is an example of how to use the function to create a custom function that modifies the post title before it is saved to the database:\n\nAction hooks allow developers to add their own code at a specific point in the WordPress code. For example, an action hook might be used to add a custom script to the front-end of the site, or to send an email when a user registers.\n\nAction hooks are triggered by specific events in the WordPress code, and developers can use the function to “hook” their custom function into the WordPress code at a specific action hook.\n\nFilter hooks allow developers to modify data before it is displayed or saved to the database. For example, a filter hook might be used to modify the post title before it is saved to the database, or to modify the excerpt length on archive pages.\n\nFilter hooks are used to “filter” data as it is passed through the WordPress code, and developers can use the function to “hook” their custom function into the WordPress code at a specific filter hook.\n\n3. The difference between WordPress actions and filters\n\nBoth types of hooks can be used to create custom functions that modify the default behavior of the WordPress platform.\n\nAction hooks allow developers to add custom code to WordPress at specific points in the code, while filter hooks allow developers to modify data as it is passed through the code.\n\nif you are creating a more complex modification that involves multiple hooks and custom functions, it may be easier to manage the code in a custom plugin.\n\nSome of the advantages include:\n• Custom plugins can make it easier for developers to manage and update their custom code, as all of the custom functions and hooks are contained in a single plugin file. This can be especially useful for developers who are working on a team, as it allows them to easily share and collaborate on the custom code.\n• Using a custom plugin can help to improve the performance and security of the site by ensuring that the custom code is only loaded when it is needed, rather than being loaded on every page of the site. This can also help to reduce the risk of conflicts with other plugins or themes.\n\nThese are just a few examples of the many custom functions that can be created using the WordPress hook system.\n\nAdding a custom style sheet to the front-end of the site:\n\nModifying the default sort order of posts on the front-end:\n\nModifying the default from address for WordPress emails:\n\nModifying the default from name for WordPress emails:\n\nAdding a custom body class to the front-end of the site:"
    },
    {
        "link": "https://wordpress.stackexchange.com/questions/1007/difference-between-filter-and-action-hooks",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://learn.wordpress.org/tutorial/wordpress-filter-hooks",
        "document": "The WordPress Hooks system is what makes WordPress so extendable, and allows you to build anything on the foundation of WordPress, from a blog to an online eCommerce platform.\n\nIn this lesson, you will learn about filter hooks, how they work, how to choose the right hook, and how to use them in your code.\n• Understand the difference between action hooks and filter hooks.\n• What is the difference between an action hook and a filter hook?\n• What function is used to register a filter callback function on an existing filter hook?\n• Which parameter affects when the filter hook callback is run?\n• Which parameter affects the number of variables passed to the hook callback?\n\nHey there, and welcome to Learn WordPress.\n\nToday we’re going to learn about a WordPress development concept called filter hooks. In this video, we will cover a brief introduction to hooks, the two types of hooks, actions and filters, what are filters and how to use them, filter priority and argument parameters, and filter hook order.\n\nHooks allow your theme or plugin code to interact with or modify the execution of a WordPress request at specific predefined spots. Hooks are what Make WordPress so extendable and allow you to build anything on foundation of WordPress.\n\nThere are two types of hooks, action hooks and filter hooks. These are more commonly known as actions and filters. In this video will be focusing on filters, but check out the action hooks tutorial for more information on action hooks.\n\nFilters allow you to modify or filter some data at a specific point, which will be used later on. In order to make use of a filter, you register a function in your code to a pre existing filter hook, which is known as a callback function. To better explain this, let’s look at a filter called the_content.\n\nThis filter is defined inside the function which is used in theme templates whenever the template needs to render any post or page content. Inside that function, we see the following code content, apply_filters. Here the apply_filters function defines the filter hook with the hook name of the_content. You’ll notice that a content variable is passed as an argument of apply_filters, and that the value of a apply_filters is assigned back to the variable. In this case, again the content variable. If you look a little higher in this function, the content variable is assigned the value of the get_the_content function, which is a WordPress core function that retrieves the value of the post_content field for the current post or page in the post table. So the apply_filters function registers the filter hook, passes the value of content at this point in the code execution to any callback functions registered on this hook and requires the updated value to be passed back.\n\nLet’s register a callback function on this filter. To register your callback function on a filter you use the WordPress add_filter function, you will need to pass the hook name and the name of your callback function as arguments to the add_filter function. Let’s take a look at what this looks like in a theme’s functions.php file.\n\nStart by saying add_filter, then passing the filter name and then our callback function, with a slight spelling error.\n\nThen create the callback function which accepts the relevant arguments from the filter. You don’t have to name the arguments the same as the variable name passed from the filter, but it does make it easier if you do.\n\nIn our case, it’s just called content, then we can do something with content. And make sure that we return an updated version of content back.\n\nNotice that you have to return the updated data. This is so that the original variable being updated from the apply_filters call gets the updated data. Oops, I left a small bug. Let’s just fix this quickly.\n\nLet’s say you wanted to add something to the end of the content of each post. You could append it to the content variable like this.\n\nSo I’m just going to start by creating an additional_content variable. And then I’m going to update content by appending additional_content.\n\nIn this example, I’m merely adding some text in a paragraph block, which renders at the bottom of each post on the front end. Let’s take a look at what that looks like in our WordPress site.\n\nRefresh. There we go.\n\nIt’s very important to always return something back from a filter callback. Ideally, the modified content of the variable being passed to the filter. Not returning something will cause a fatal error on your WordPress site. Now let’s talk about hook priority.\n\nIf you take a look at the documentation for add_filter, you will see two additional function parameters after the hook name and the callback function. The third parameter is the hook priority, which is an integer which defaults to 10. This means if you register a filter in your code without specifying a priority, it will be registered with a priority of 10. Hook priority allows you to determine the order in which your hook callback is run relative to any other hook callbacks that may be registered on the given hook, either by WordPress core, or other themes and plugins. Hooks run in numerical order of priority starting at one. It’s usually safe to leave the priority to default to 10 unless you specifically want to change the order in which your callback function is run. For example, in your the_content filter example, you may want to make sure that the registered callback function is only run after any callbacks registered by WordPress core are run. Because WordPress core registers any hook callbacks with the default priority of 10, if you specify a priority of 11, like this, you can make sure your callback function is run after any core callbacks have been completed. Alternatively, if you want to make sure your callback is run before WordPress core’s you could set a lower priority, say nine. Often you might see callbacks being registered with a higher priority, either 99 or sometimes even 9999. This is because the plugin or theme developer wants to be sure that their callback is run after all other callback functions. However, one can never really know at what priority other third party plugins or themes might register their callbacks, so it’s a bit of a guess.\n\nThe fourth parameter available to the add_filter function is the number of accepted arguments the callback function can accept. In order to better understand how this works, let’s take a look at another content related filter hook. In this case, get_the_excerpt. This filter is defined in the wp-include/post-template.php file on line 492. The filter is defined in the get_excerpt function, which in turn is called from the_excerpt function. This function is typically used when displaying search results where it’s useful to show the post excerpt and not the post content.\n\nGetting back to the filter. Here, the apply_filters function is registering the filter hook with two variables that are associated with the filter, the post excerpt and the post object. When defining a filter hook using apply_filters, any number of possible arguments can be added. However, the number passed to the accepted arguments parameter determines how many of them are passed to the callback function. If you look at the documentation for apply_filters, you will see the default value for the number of accepted arguments is one. Which means that if you don’t specify a value for this parameter, the first argument will be available to be passed to the callback function. In the get_excerpt filter there are two possible variables to be accepted. So if you register the callback without setting the number of arguments, only the first will be available to the callback function, in this case, the post excerpt. Let’s see what that looks like.\n\nThe add_filter, again the filter name and our callback. Priority, and now we can define our function.\n\nAnd because we haven’t specified number of accepted arguments, the post excerpt will automatically be sent. In order to accept more of the available arguments, you need to specify the number of arguments to accept. So in our case, we have two possible arguments we can accept. So if we update the number of accepted arguments to two, our function can also accept the post object.\n\nBeing able to determine which arguments you need for your callback function, and setting the number in the hook registration, is a valuable skill. For example, let’s say you just wanted to add a simple piece of text after the excerpt similar to what we did with the content. In that case, you would only need the post excerpt, so you can leave out the accepted argument setting.\n\nSo if we remove that we know we’re only receiving one argument. And then we can add something to the post excerpt. And finally, return it. Notice I’m also updating the priority to eleven. You might do this because you want to make sure the text is amended after any core filter callbacks assigned to this filter have been run. Let’s take a look at how this looks in our search results.\n\nSo I’m going to simulate a search just by passing in the search variable and give it a string. And there we go “verified by search engine”. However, what if you wanted to include something from the post, say the post title. In that case, you will update your callback to accept both arguments from the hook to get the post title from the post object.\n\nSo we update our number of arguments. Then we can add the post object from the original filter registration. And here we could do something like this, adding the post title to our additional content string. Let’s see what this looks like in our search results. Here we go and it includes the post title.\n\nDepending on your specific requirements, you may first need to determine which filter is the correct one to use. Fortunately, the WordPress Codex has a filter reference, which has a list of filter hooks available in WordPress and the order that they are run different requests on a WordPress site.\n\nAnd that wraps up this tutorial on WordPress filter hooks. See you next time."
    },
    {
        "link": "https://toptal.com/wordpress/power-of-wordpress-hooks-actions-and-filters",
        "document": "Like any CMS, WordPress won’t always meet your every need right out of the box. Since it is open-source, you could hack it to make it conform to your business needs—but instead, you can use WordPress’ hooks to achieve your goals. Building with hooks is a winning strategy that frees WordPress developers to build just about any website feature imaginable.\n\nWordPress hooks are not just powerful customization tools, they are how WordPress components interact with one another. Hooked functions manage many of the routine tasks we consider to be part and parcel of WordPress, such as adding styles or scripts to a page, or surrounding footer text with HTML elements. A search of WordPress Core’s codebase reveals thousands of hooks in more than 700 locations. WordPress themes and plugins contain even more hooks.\n\nBefore we jump into hooks and explore the difference between action hooks and filter hooks, let’s understand where they fit within WordPress’ architecture.\n\nWordPress’ modular elements readily integrate with one another, so we can easily mix, match, and combine:\n• WordPress Core: These are the files required for WordPress to work. WordPress Core provides generalized architecture, the WP Admin dashboard, database queries, security, and more. WordPress Core is written in PHP and uses a MySQL database.\n• Theme (or Parent Theme): A theme defines the basic layout and design of a website. Powered by PHP, HTML, JavaScript, and CSS files, a theme functions by reading the WordPress MySQL database to generate the HTML code that renders in a browser. Hooks in a theme may add stylesheets, scripts, fonts, or custom post types, for example.\n• Child Theme: We create child themes ourselves to fine-tune the basic layout and design that parent themes provide. Child themes can define stylesheets and scripts to modify inherited features or add or remove post types. Child theme instructions always supersede those of the parent theme.\n• Plugin(s): To extend the back-end functionality of WordPress, we can choose from thousands of third-party plugins. Hooks in a plugin could, for example, notify us by email when a post is published or hide user-submitted comments that contain banned language.\n• Custom Plugin(s): When a third-party plugin does not fully meet business needs, we can turbocharge it by writing a custom plugin in PHP. Or we can write a new plugin from scratch. In both cases, we would add hook(s) to extend existing functionality.\n\nGiven that we have access to the source of all five layers, why are hooks needed in WordPress?\n\nTo keep up with evolving technologies, contributors to WordPress Core, parent themes, and plugins frequently release updates to mitigate security vulnerabilities, fix bugs, resolve incompatibilities, or offer new features. As any consultant with emergency experience knows firsthand, failure to keep WordPress components up to date can compromise or even disable a site.\n\nIf we directly modify local copies of upstream WordPress components, we encounter a problem: Updates overwrite our customizations. How can we circumvent this when customizing WordPress? Via hooks, in the child theme and custom plugin(s).\n\nA child theme is a safe space where we can customize the look and feel of our installed theme. Any code added here will override comparable code in the parent without the risk of being overwritten by an update.\n\nWhen a child theme is activated, it links to a deactivated parent, inheriting and exhibiting the parent’s characteristics while remaining unimpacted by the parent’s updates. So as not to fall prey to temptation to modify a theme, best practices suggest that a child theme be activated as part of our setup.\n\nWhen a plugin is activated, its file executes with each call on the server. WordPress, in turn, loads and sorts hooks from all active plugins according to their priority and executes these sequentially. To extend the functionality of a third-party plugin, we can write our own WordPress custom plugin.\n\nWhere to Place Our Hooks in WordPress\n\nTo avoid conflating terms, we’ll stick to this terminology:\n• A hook is a sweet spot in WordPress where functions are registered to run. We may connect our functions to one of the many hooks in WordPress and its components or create our own.\n• A hooked function is a custom PHP callback function that we’ve “hooked” into a WordPress hook location. Which type to use depends on whether the hook is meant to allow changes outside the function—e.g., adding directly to the webpage output, modifying a database, or sending an email. These are known as side effects.\n• A filter (or filter function) should avoid side effects by only working on, then returning a modified copy of, the data passed to it.\n• An action (or action function), in contrast, is intended to cause side effects. It has no return value.\n\nWith these distinctions in mind, we can begin our exploration of hooks.\n\nWhen an action or filter is incorporated into a hook, as needed, we fulfill the objectives of writing just one function per task and of avoiding the duplication of code within a project. For example, say we want to add the same stylesheet to three page templates (archive, single page, and custom post) in our theme. Rather than overriding each template in the parent, then recreating each in our child theme, then adding stylesheets to individual head sections, we can write code in a single function and attach it with the hook.\n\nProactively avoid conflicts by naming a child theme or custom plugin hooks uniquely. Having same-named hooks in a single site is a recipe for unintended code behavior. Best practices prescribe that we begin the name of our hook with a unique, short prefix (e.g., author’s, project’s, or company’s initials), followed by a descriptive hook name. For example, using the pattern “project initials plus hook name,” for the project Tahir’s Fabulous Plugin, we could name our hooks or .\n\nA single hook may trigger more than just one action or filter. For example, we could write a web page that contains multiple scripts, all of which use the action hook to print HTML (e.g., a or section) within the section on the page’s front end.\n\nThus, several plugin developers can advance multiple goals in parallel on a single plugin, or divide the plugin into multiple, simpler individual plugins. If a feature does not work properly, we can directly investigate and debug its hooked function without having to search the entire project.\n\nAn action runs code when an event occurs in WordPress. Actions can perform operations such as:\n• Tracking locations and storing them in the database.\n\nExamples of events where actions can be triggered include:\n• , after WordPress loads but prior to its sending headers to the output stream.\n• , when a post has been saved.\n• , just after a navigation menu is created successfully.\n\nAn action can interact with an API to transmit data (e.g., a link to a post on social media), but it will not return data to the calling hook.\n\nLet’s say we would like to automate the sharing of all new posts on our site via social media. Begin by looking through WordPress documentation for a hook that can be triggered whenever a post is published.\n\nThere are no shortcuts to finding our hook: We would learn through experience or pore through the listed actions to find likely candidates. We might consider a candidate, but quickly rule it out since it would trigger multiple times during a single editing session. A better choice is , which triggers only when a post status is changed (e.g., from to , from to ).\n\nWe will go with but will also refine our action to run only when the status of our post transitions to . Further, by following the official documentation and APIs of the various social media platforms, we can integrate and publish our post’s content, along with a featured image:\n\nNow that we know how to use action hooks, there’s one that’s particularly helpful, especially when it comes to CSS.\n\nSay we want to add our child theme’s stylesheet last, after all others have loaded, to ensure that any same-named classes originating elsewhere are overridden by our child theme’s classes.\n\n…the value of the added action determines its order of execution:\n• The default value for (or any action) is “10.”\n• A function runs earlier if we reset its to a lower number.\n• A function runs later if we reset its to a higher number.\n\nTo load our child theme’s stylesheet last, use , an action that is commonly used by WordPress themes and plugins. We need only change the priority of our child theme’s action to a number that is higher than the default of “10,” say “99”:\n\nIn general, we use actions when we are not looking for return values. To return data to the calling hook, we need to look at filters.\n\nA filter allows us to modify data before it is processed for display in a browser. To this end, a filter accepts variable(s), modifies the passed value(s), and returns data for further processing.\n\nWordPress checks for and executes all registered filters before preparing content for browsers. This way, we can manipulate data before sending it to the browser or database, as appropriate.\n\nOne of my clients personalizes the products he sells by imprinting them with images that customers provide. This client uses the WooCommerce plugin to manage e-commerce. WooCommerce does not support this functionality out of the box. Therefore, I added two bits of code to my client’s :\n• , listed in the WooCommerce documentation, is a filter hook that allows customers to add external elements to their carts, prior to checkout.\n• is a filter that we will write ourselves and use to trigger whenever WooCommerce prepares a cart for display.\n\nUsing the following template, we can add add our filter and modify the cart’s default behavior:\n\nWe add filters the same way we add actions. Filters work similarly to actions, including how priorities are processed. The major difference between filters and actions is that an action will not return data to the calling hook but a filter will.\n\nWriting custom action hooks does not extend Wordpress Core but merely creates new trigger points within our own code.\n\nAdding a custom hook in our theme or plugin allows other developers to extend functionality without modifying our code base. To add a custom hook, use the same technique the WordPress Core code base itself uses: At our desired trigger point, we simply call with the name of our new hook, optionally adding as many arguments as our callbacks might find useful:\n\nThis code simply runs any callback functions that have been hooked onto our custom hook. Note that the namespace is global so, as suggested previously, it would be a good idea to preface our custom hook names with a shortened form of the name of our organization (and possibly our project, as well), hence the here.\n\nNow that we’ve defined , it’s available for developers to hook into the exact same way we covered earlier for built-in hooks: Define a function, then call .\n\nUnless we want to use a new hook purely internally—it’s a helpful way to structure our code, after all—we’ll have to communicate its availability downstream, to other members of our team or to external users of our plugin, via clear documentation.\n\nWordPress’ pattern for custom filter hooks is the same as that of action hooks, except that we call instead of .\n\nLet’s run through a more concrete example this time. Suppose our plugin creates a sidebar menu, which normally consists of four items. We’ll add a custom filter hook so that we (and downstream developers) can modify that list of items elsewhere:\n\nThat’s it—our custom filter hook is now ready to use in a plugin that may be loaded later or elsewhere in this one. This allows anyone writing downstream code to customize our sidebar.\n\nWe or other developers will follow the same pattern when using a built-in WordPress hook. In other words, we’ll start by defining some callback functions that return a modified version of the data they’re passed:\n\nAs with our earlier examples, we’re now ready to hook our filter callback functions to our custom hook:\n\nWith that, we’ve hooked our two example callback functions onto our custom filter hook. Both now modify the original content of . Because we gave a higher value to , it runs later, after executes.\n\nDownstream developers are always free to hook more callback functions to . As they do, they can use the parameter to make their hooks run before, after, or between our two example callback functions.\n\nThe Sky’s the Limit With Actions and Filters\n\nWith actions, filters, and hooks WordPress functionality can grow by leaps and bounds. We can develop custom features for our site, leaving our own contributions just as extensible as WordPress. Hooks let us adhere to safety and best practices as we take our WordPress site to the next level.\n\nThe Toptal Engineering Blog extends its gratitude to Fahad Murtaza for his expertise, beta testing, and technical review of this article."
    }
]