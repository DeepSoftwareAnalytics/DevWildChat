[
    {
        "link": "https://htmltables.io/blog/beginners-guide-to-html-tables",
        "document": "HTML tables allow you to display data in rows and columns on a webpage. New web technologies such as CSS grid and flexbox provide additional layout options. However, tables remain valuable for displaying tabular data and spreadsheet-like information.\n\nIn this beginner's guide, we'll walk through everything you need to know to start building these tables from scratch.\n\nWho Can Benefit from This Beginner's Guide?\n• Web Developers Starting Out with HTML: Whether you're just starting with HTML or already know your way around, this guide helps you build a strong foundation for working with HTML tables.\n• Marketers and Content Creators: Building long-form content that involves presenting data sets? HTML tables can be your ally, and this guide will equip you with the knowledge to use them effectively.\n• Anyone Needing to Display Relational Datasets: No matter your experience, if you want to display data on a webpage while keeping the connections clear, this guide is for you.\n\nWe'll cover all the basics, best practices, and details you need to start building HTML tables. You do not need any prior HTML experience to follow along. Let's dive in!\n\nThe <table> tag defines HTML tables. The <tr> tag defines each row inside a table. Within each row, you define data using either the <td> or <th> tag, depending on its location and context.\n\nIn this example, we created a simple 3x4 table with 3 columns and 4 rows. Pretty easy, right?\n\nWhen to Use Tables\n\n\n\nTables are important for web developers and content creators, providing many benefits that make them necessary in different situations. Here are some key reasons to consider using them in your projects:\n\nTables organize data in rows and columns, making it easier to present and arrange information in a structured manner. This makes them ideal for showcasing data sets that follow a relational structure.\n\nTables are good at aligning text both horizontally and vertically. This flexibility in alignment ensures a clean and visually appealing presentation of your content.\n\n‍By utilizing HTML tables, you impart semantic meaning to your data. This improves code readability and helps search engines understand content structure, leading to better SEO.\n\nTables play a crucial role in improving Search Engine Optimization (SEO) by clearly displaying relational data. HTML tables organize data like financial reports, sports results, and train schedules for easy presentation and understanding. They help show the connections between different pieces of information.\n\nWhen NOT to Use Tables\n\nWhile tables are useful for organizing tabular data, there are situations where they may not be the best choice. Here are some instances where it's not a good idea to use them:\n\nYou should not use tables for page layout or to create a grid-based structure. Instead, use CSS for layout purposes. CSS is for presentation; using tables for layout can make code harder to maintain and more complicated.\n\nTables can be challenging to make responsive for different screen sizes. Modern web design favors responsive layouts that adapt to various devices, such as smartphones and tablets. Using tables for layout can make it difficult to achieve a responsive design.\n\nTables can present challenges for accessibility. Screen readers struggle with tables used for layout, making it harder for disabled users to access content. Proper HTML5 structural elements and semantic markup are essential for creating accessible content.\n\nIf the content you're presenting is not tabular data, using a table is not a good fit. For non-tabular content, use semantic HTML elements that accurately describe the structure and purpose of the content.\n\nTables can be difficult to navigate on small screens. For mobile users, try different ways to show information on smaller screens, like collapsing columns or using responsive design techniques.\n\nBefore diving into the details of tables, let's recap some key HTML basics.\n\nHTML stands for HyperText Markup Language. HTML documents contain text content along with HTML tags that apply structure and meaning to content.\n\nHere are some common HTML tags:\n• <html> - The root element that contains the entire HTML document\n• <head> - Contains metadata about the page\n• <h1> to <h6> - Headings, <h1> is the most important\n• <table> - Defines a table (the element you're here for!)\n\nHTML tags provide semantic structure and meaning to content. Most tags have an opening and closing tag with the content in between:\n\n\n\nSome tags are self-closing with just one tag:\n\nNow that we've reviewed some HTML basics, let's look at the anatomy of an HTML table.\n\nAs mentioned earlier, you define an HTML table with the <table> tag. The <tr> tag defines each row inside the table. The <td> tag defines data in table cells inside each row.\n• <caption> - Provides a caption or title for a table\n\nThese elements help add additional semantic meaning to tables.\n\nFollow along as we build a simple HTML table to display a list of products and prices:\n\nStep 1: Add a <table> element along with the <caption> element to add a title\n\nWe're going to start off with the most basic table element — the <table> tag. From here, we're going to add a <caption> that describes our table. In this case, we'll call it \"Product Pricing.\"\n\nAs you can see, no other table elements have been added aside from the caption. Let's change that!\n\nStep 2: Add a <thead> element and nested <tr> and <th> elements to define the table header row\n\nTime to get semantical (is that even a word?). Let's add our <thead> tag to define our table header along with a single <tr> tag (since it's still a row in the table). Inside of that <tr> tag, we'll add 2 <th> tags to semantically establish them as header cells.\n\nStep 3: Add a <tbody> element and use <tr> and <td> to add table rows and data cells\n\nMuch like what we did for the header of the table, we can now establish the body of the table using the <tbody> tag. We can use <tr> and <td> tags to show product details like name and price in this section.\n\nOur table now has semantic structure. We're almost done!\n\nStep 4: Fill in the content for each cell\n\nNow, we can add our content into each table cell. Your content will almost always come in the form of text (with few exceptions, especially for modern tables).\n\nWe now have a near complete table. However, we'd now like to link each product to it's given product page. Let's add some <a> tags in order to establish links.\n\nAnd that's the basics of building out an HTML table! The <table>, <tr>, <td>, and <th> elements provide the overall table structure. Tags like <thead>, <tbody>, and <caption> add semantic meaning.\n\nNext let's look at some key table attributes to control styling and layout.\n\nThe rowspan attribute is used to make a cell span multiple rows in a table. This can be particularly useful when dealing with data that should be grouped across several rows.\n\nIn this example, the first cell in the first row has a rowspan of 2, causing it to span the first and second rows. This creates a visual grouping effect for the data.\n\nSimilarly, the colspan attribute allows a cell to span multiple columns, enabling the consolidation of data horizontally.\n\nIn this case, the second cell in the first row has a colspan of 2, causing it to span the second and third columns. This creates a wider cell that accommodates the data intended for both columns.\n\nYou can combine rowspan and colspan attributes to create complex table layouts.\n\nIn this example, the second cell in the first row spans two columns (colspan=\"2\") and two rows (rowspan=\"2\"), creating a larger cell that spans multiple rows and columns simultaneously.\n\nUnderstanding and effectively using rowspan and colspan attributes can significantly enhance the presentation of data in HTML tables, allowing for more flexible and visually appealing layouts.\n\nHowever, it's important to keep accessibility in mind—the more complex the table layout, the more challenging your data can be to interpret, both by humans and screen readers.\n\nThe border attribute adds a visible border to the table and cells. This attribute is deprecated in HTML5, meaning CSS borders should be used instead:\n\nIn this example, border-collapse: collapse; is used to collapse the borders into a single border, and border: 1px solid black; is applied to both the table and table cells (<td> and <th>).\n\ncellpadding controls padding inside each cell, while cellspacing controls spacing between cells. Both are deprecated in HTML5 in favor of CSS:\n\nIn this example, padding: 10px; is applied to both <td> and <th> elements to control the padding inside each cell. border-collapse: separate; and border-spacing: 10px; are used to control the spacing between cells.\n\nNow that we've covered table structure and attributes, let's look at styling tables with CSS in greater detail.\n\nWhile HTML provides the overall table structure, CSS is used to style and layout tables.\n\nSetting the layout of an HTML table involves controlling its width and centering it horizontally. This can be achieved through CSS styles. For example:\n\nHere, the width property is used to define the overall width of the table, and margin: 0 auto; centers the table by setting equal margins on the left and right.\n\n\n\nAdding borders to the table and cells enhances the visual structure. You can control the border color, style, and width using CSS properties:\n\nIn this example, the border property is used to set a solid black border around the table and its cells. Additional styling is applied to header cells (<th>) for improved visual distinction.\n\n\n\nAdding zebra stripes involves applying alternating background colors to rows, which enhances readability. Here's an example:\n\nThis CSS selector targets even rows (tr:nth-child(even)) and applies a background color, creating a visually appealing zebra stripe effect.\n\nAligning text within cells improves the overall presentation. You can control horizontal text alignment using the text-align property:\n\nThis example centers text horizontally within both regular cells (<td>) and header cells (<th>), but you can customize it based on your layout preferences.\n\nAdding padding inside cells helps create spacing between the content and cell borders. Here's an example:\n\nIn this case, the padding property is used to add 10 pixels of padding to both regular cells (<td>) and header cells (<th>), enhancing the visual appeal and readability of the table.\n\nThere are tons of styling options for formatting tables with CSS. These are just a few!\n\nWhen building tables, it's important to keep accessibility in mind:\n\n‍When creating HTML tables, it's good practice to use the <caption> element to provide a brief and concise description of the table's purpose and content. The <caption> element serves as a title or heading for the table, making it more accessible and providing context to users or assistive technologies.\n\n‍To enhance the accessibility and understanding of your table, use the <th> element to designate header cells. Header cells should be used for the labels of rows and columns. By associating headers with corresponding data cells, you create a clear and meaningful relationship within the table. This association is particularly valuable for users relying on screen readers, as it helps them interpret the structure of the table more effectively.\n\n‍Break up your table into logical sections using semantic elements such as <thead>, <tbody>, and <tfoot>. These elements help to organize the content and improve the structure of the table. The <thead> element contains header information, <tbody> includes the main content, and <tfoot> holds the footer or summary information. This segmentation not only enhances readability but also contributes to a more accessible and well-structured table.\n\n‍Maintain clean and well-structured HTML markup when creating tables. Avoid unnecessary nesting of tables and complex cell spanning, as these practices can make the table more challenging to navigate for both users and assistive technologies. Clean and well-organized markup ensures that the table is easily understandable, promoting better accessibility and a more seamless user experience.\n\nPaying attention to accessibility ensures your HTML tables are usable and understandable to all readers.\n\nWe've covered the basics, but there are a few more advanced table features to be aware of:\n\nWhile we touched on colspan and rowspan attributes earlier, their advanced usage involves merging cells across rows and columns. These attributes allow a single cell to span multiple columns or rows, creating a more complex layout:\n\nHere, the first cell spans two rows (rowspan=\"2\") and the second cell spans two columns (colspan=\"2\"), resulting in a table with merged and spanned cells.\n\nThough it's not usually recommended because it makes the code more complicated, nested tables involve putting one table inside another. It can help with making detailed layouts, but it's best to use it carefully so that the code (and your table) stays easy to read. Honestly, this isn't something people use a lot, and it's usually better not to.\n\nNested tables can be useful but use them sparingly as they create more complex markup.\n\nResponsive design is crucial for tables, ensuring they adapt to various screen sizes. Advanced techniques involve using CSS and HTML to address responsive challenges:\n\nWrap your table within a container and apply the overflow: auto; property to enable horizontal scrolling on smaller screens. This prevents the table from expanding beyond the viewport width.\n\nUse media queries to hide less important columns on smaller screens, improving readability and focusing on essential content.\n\nModify font sizes and padding for tables and cells on smaller screens to maintain a balanced design.\n\nIncorporating these advanced features enhances the versatility of HTML tables, allowing for more sophisticated layouts and ensuring a seamless user experience across various devices and screen sizes.\n\nWhile tables are a powerful tool, their misuse can lead to accessibility issues, poor performance, and difficulties in maintaining code. In this section, we will explore best practices to ensure that your HTML tables are well-structured, semantically meaningful, and accessible. By following these guidelines, you can enhance the user experience, improve search engine optimization, and create more maintainable and future-proof tables.\n\nUse HTML to Define the Table Structure and Relationships\n\nshould be used to set up the overall table structure and relationships between data. Let HTML handle the semantics. Don't try to achieve visual layouts with complex HTML markup. Keeping the HTML clean and straightforward makes it easier to maintain and style.\n\nMake use of HTML5 semantic elements like:\n\nto add meaning to the table structure. Use <th> to indicate table header cells explicitly. Semantic elements lead to better accessibility and SEO.\n\nOnce the HTML defines the overall structure, use CSS for all styling and layout needs. Things like borders, background colors, height/width, alignment, padding, font styles, etc. should all be handled in CSS. This separation of concerns leads to cleaner and more maintainable code.\n\nHere are some quick and easy tips:\n• The HTML markup itself should be lean, clean and well formatted.\n• Well organized and commented code is much easier to revisit later on.\n\nKeep accessibility in mind when structuring tables. Here are some ways to do it:\n\nAll these practices help make tables usable by those with disabilities.\n\nUse the W3C HTML Validator to check for any errors or warnings in table markup. Fixing validation issues can uncover problems like improper nesting, malformed attributes, and badly formatted code. Proper validation helps ensure proper rendering across different browsers.\n\nFollowing coding best practices will improve your table markup and user experience. Even if you're not a developer, understanding the basics will go a long way.\n\nYou should now have a good understanding of how to create HTML tables!\n• Adding borders, spacing, styling, and layout with HTML attributes and CSS\n\nHTML tables provide a handy way to display relational datasets on webpages. Start putting your new skills into practice by building out HTML tables for your own projects!\n\nHere are some recommended resources for learning more about HTML tables:\n\nAnd for a complete guide to web development, take a look at The Odin Project."
    },
    {
        "link": "https://w3schools.com/html/html_tables.asp",
        "document": "HTML tables allow web developers to arrange data into rows and columns.\n\nA table in HTML consists of table cells inside rows and columns.\n\nEach table cell is defined by a and a tag.\n\nEverything between and is the content of a table cell.\n\nNote: A table cell can contain all sorts of HTML elements: text, images, lists, links, other tables, etc.\n\nEach table row starts with a and ends with a tag.\n\nYou can have as many rows as you like in a table; just make sure that the number of cells are the same in each row.\n\nNote: There are times when a row can have less or more cells than another. You will learn about that in a later chapter.\n\nSometimes you want your cells to be table header cells. In those cases use the tag instead of the tag:\n\nBy default, the text in elements are bold and centered, but you can change that with CSS."
    },
    {
        "link": "https://quora.com/How-do-you-create-a-table-with-4-rows-and-3-columns-with-HTML-programs",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/HTML_table_basics",
        "document": "A table is a structured set of data made up of rows and columns (tabular data). A table allows you to quickly and easily look up values that indicate some kind of connection between different types of data, for example a person and their age, or a day of the week, or the timetable for a local swimming pool. Tables are very commonly used in human society, and have been for a long time, as evidenced by this US Census document from 1800: It is therefore no wonder that the creators of HTML provided a means by which to structure and present tabular data on the web.\n\nYou can also have a look at the live example on GitHub! One thing you'll notice is that the table does look a bit more readable there — this is because the table you see above on this page has minimal styling, whereas the GitHub version has more significant CSS applied. Be under no illusion; for tables to be effective on the web, you need to provide some styling information with CSS, as well as good solid structure with HTML. In this lesson we are focusing on the HTML part; you'll find out about styling tables later on, in our Styling tables lesson. We won't focus on CSS in this module, but we have provided a minimal CSS stylesheet for you to use that will make your tables more readable than the default you get without any styling. You can find the stylesheet here, and you can also find an HTML template that applies the stylesheet — these together will give you a good starting point for experimenting with HTML tables.\n\nWhen should you NOT use HTML tables? HTML tables should be used for tabular data — this is what they are designed for. Unfortunately, a lot of people used to use HTML tables to lay out web pages, e.g. one row to contain the header, one row to contain the content columns, one row to contain the footer, etc. You can find more details and an example at Page Layouts in our Accessibility Learning Module. This was commonly used because CSS support across browsers used to be terrible; table layouts are much less common nowadays, but you might still see them in some corners of the web. In short, using tables for layout rather than CSS layout techniques is a bad idea. The main reasons are as follows:\n• Layout tables reduce accessibility for visually impaired users: screen readers, used by blind people, interpret the tags that exist in an HTML page and read out the contents to the user. Because tables are not the right tool for layout, and the markup is more complex than with CSS layout techniques, the screen readers' output will be confusing to their users.\n• Tables produce tag soup: As mentioned above, table layouts generally involve more complex markup structures than proper layout techniques. This can result in the code being harder to write, maintain, and debug.\n• Tables are not automatically responsive: When you use proper layout containers (such as , , , or ), their width defaults to 100% of their parent element. Tables on the other hand are sized according to their content by default, so extra measures are needed to get table layout styling to effectively work across a variety of devices.\n\nWe've talked table theory enough, so, let's dive into a practical example and build up a simple table.\n• First of all, make a local copy of blank-template.html and minimal-table.css in a new directory on your local machine.\n• The content of every table is enclosed by these two tags: . Add these inside the body of your HTML.\n• The smallest container inside a table is a table cell, which is created by a element ('td' stands for 'table data'). Add the following inside your table tags:\n• If we want a row of four cells, we need to copy these tags three times. Update the contents of your table to look like so: <td>Hi, I'm your first cell.</td> <td>I'm your second cell.</td> <td>I'm your third cell.</td> <td>I'm your fourth cell.</td> As you will see, the cells are not placed underneath each other, rather they are automatically aligned with each other on the same row. Each element creates a single cell and together they make up the first row. Every cell we add makes the row grow longer. To stop this row from growing and start placing subsequent cells on a second row, we need to use the element ('tr' stands for 'table row'). Let's investigate this now.\n• Place the four cells you've already created inside tags, like so: <tr> <td>Hi, I'm your first cell.</td> <td>I'm your second cell.</td> <td>I'm your third cell.</td> <td>I'm your fourth cell.</td> </tr>\n• Now you've made one row, have a go at making one or two more — each row needs to be wrapped in an additional element, with each cell contained in a .\n\nNow let's turn our attention to table headers — special cells that go at the start of a row or column and define the type of data that row or column contains (as an example, see the \"Person\" and \"Age\" cells in the first example shown in this article). To illustrate why they are useful, have a look at the following table example. First the source code: The problem here is that, while you can kind of make out what's going on, it is not as easy to cross reference data as it could be. If the column and row headings stood out in some way, it would be much better.\n\nWhy are headers useful? We have already partially answered this question — it is easier to find the data you are looking for when the headers clearly stand out, and the design just generally looks better. Note: Table headings come with some default styling — they are bold and centered even if you don't add your own styling to the table, to help them stand out. Tables headers also have an added benefit — along with the attribute (which we'll learn about in the next article), they allow you to make tables more accessible by associating each header with all the data in the same row or column. Screen readers are then able to read out a whole row or column of data at once, which is pretty useful.\n\nSometimes we want cells to span multiple rows or columns. Take the following simple example, which shows the names of common animals. In some cases, we want to show the names of the males and females next to the animal name. Sometimes we don't, and in such cases we just want the animal name to span the whole table. The initial markup looks like this: But the output doesn't give us quite what we want: We need a way to get \"Animals\", \"Hippopotamus\", and \"Crocodile\" to span across two columns, and \"Horse\" and \"Chicken\" to span downwards over two rows. Fortunately, table headers and cells have the and attributes, which allow us to do just those things. Both accept a unitless number value, which equals the number of rows or columns you want spanned. For example, makes a cell span two columns. Let's use and to improve this table.\n• First, make a local copy of our animals-table.html and minimal-table.css files in a new directory on your local machine. The HTML contains the same animals example as you saw above.\n• Next, use to make \"Animals\", \"Hippopotamus\", and \"Crocodile\" span across two columns.\n• Finally, use to make \"Horse\" and \"Chicken\" span across two rows.\n• Save and open your code in a browser to see the improvement. Note: You can find our finished example at animals-table-fixed.html on GitHub (see it live also)."
    },
    {
        "link": "https://stackoverflow.com/questions/23703186/proper-html-table-structure",
        "document": "Almost embarrassed to ask, because I have never had a need to use tables much before...\n\nNow I have a project that will require massive organized tables, go figure.\n\nSuppose I have a table like this:\n\nFirst of all, from what I have read, and seem to be optional for grouping purposes, but is this basic set up correct?\n\nIt looks fine when displayed in a browser, but I wonder if my code actually structures elements correctly in the DOM? I.E. does the DOM correctly associate the with the 's that contain the first name data? I ask because I am going to need to rely on that to sort the tables later with javascript.\n\nI apologize if this is really simple question. If there is a reference to a \"proper table structure\" article, i will accept that as well."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table",
        "document": "The examples below include tables of progressively increasing complexity. See also our beginner's Styling tables guide for table styling information including common, useful techniques. Since the structure of a involves the use of several table-related HTML elements along with various associated attributes, the following examples are intended to provide a simplified explanation that covers the basics and common standards. Additional and more detailed information can be found on the corresponding linked pages. These table examples demonstrate how to create an accessible table that is structured with HTML and styled with CSS. Because of how HTML tables are structured, the markup can quickly grow. For this reason, it is important to clearly define the table's purpose and final appearance to create the appropriate structure. A logical structure developed with semantic markup is not only easier to style, but enables useful and accessible tables that can be understood and navigated by everyone, including search engines and users of assistive technologies. The first example is basic, with subsequent examples growing in complexity. First, we will develop a very basic HTML table structure for the table. The first two examples contain no table section groups such as a defined head, body, or foot, and involve no cell spanning or explicitly defined cell relationships. Not even a caption is provided. As we work through the examples, they will be progressively enhanced to include all the table features that a complex data table should possess.\n\nIn addition to improving accessibility by specifying cell relations, the semantics of the table can be improved by introducing table section groups. Since the first row ( element) contains only column header cells and provides the header for the rest of the table's contents, it can be enclosed in the element to explicitly specify that row as the head section of the table. Moreover, what is automatically accomplished by the browser can also be defined explicitly—the body section of the table, which contains the main data of the table, is specified by enclosing the corresponding rows in the element. The explicit use of the element helps the browser to create the intended table structure, avoiding unwanted results. Once again, the CSS and visual result are unchanged—specifying such table section groups provides valuable contextual information for assistive technologies, including screen readers and search engines, as well as for styling in the CSS, which will be shown in a later example.\n\nNow we'll go all-out, with styles on rows in the header and body areas both, including alternating row colors, cells with different colors depending on position within a row, and so forth. Let's take a look at the result first this time. Here's what the final table will look like: There is no change to the HTML again. See what proper preparation of the HTML structure can do? The CSS is much more involved this time. It's not complicated, but there's a lot going on. Let's break it down. Here the and properties are added to eliminate spacing between cells and collapse borders that touch one another to be a single border instead of winding up with double borders. Additionally, the is placed at the of the table using the property: Next, the property is used to give all the table cells space around their content. The property aligns the content of the header cells to the of the cell, which can be seen on the cells in the head that span two rows: The next CSS rule sets the of all elements in the table's head (as specified using ). Then the bottom border of the head is set to be a two-pixel wide line. Notice, however, that we're using the selector to apply the property to the second row in the head. Why? Because the head is made of two rows that are spanned by some of the cells. That means there are actually two rows there; applying the style to the first row would not give us the expected result: Let's style the two header cells \"Joined\" and \"Canceled\" with green and red hues to represent the \"good\" of a new member and the \"bummer\" of a canceled membership. Here we dig into the last row of the table's head section using the selector and give the first header cell in it (the \"Joined\" header) a greenish color, and the second header cell in it (the \"Canceled\" header) a reddish hue: Since the first column should stand out as well, some custom styling is added here too. This CSS rule styles the first header cell in each row of the table's body with the property to left-justify the member names, and with a somewhat different : It's common to help improve the readability of table data by alternating row colors—this is sometimes referred to as \"zebra striping\". Let's add a bit of to every even row: Since it's standard practice to right-justify currency values in tables, let's do that here. This just sets the property for the last in each body row to : Finally, some styling similar to the head is applied to the foot section of the table to make it stand out as well:\n\nA common issue with tables on the web is that they don't natively work very well on small screens when the amount of content is large, and the way to make them scrollable isn't obvious, especially when the markup may come from a CMS and cannot be modified to have a wrapper. This example provides one way to display tables in small spaces. We've hidden the HTML content as it is very large, and there is nothing remarkable about it. The CSS is more useful to inspect in this example. When looking at these styles you'll notice that table's property has been set to . While this allows scrolling, the table loses some of its integrity, and table cells try to become as small as possible. To mitigate this issue we've set to on the . However, we don't do this for the to avoid long titles forcing columns to be wider than they need to be to display the data. To keep the table headers on the page while scrolling down we've set to sticky on the elements. Note that we have not set to , as if we do the header cannot be separated correctly from the rest of the table. Given that the has a fixed size, the set to is the important part here, as it makes the table scrollable."
    },
    {
        "link": "https://w3schools.com/html/html_tables.asp",
        "document": "HTML tables allow web developers to arrange data into rows and columns.\n\nA table in HTML consists of table cells inside rows and columns.\n\nEach table cell is defined by a and a tag.\n\nEverything between and is the content of a table cell.\n\nNote: A table cell can contain all sorts of HTML elements: text, images, lists, links, other tables, etc.\n\nEach table row starts with a and ends with a tag.\n\nYou can have as many rows as you like in a table; just make sure that the number of cells are the same in each row.\n\nNote: There are times when a row can have less or more cells than another. You will learn about that in a later chapter.\n\nSometimes you want your cells to be table header cells. In those cases use the tag instead of the tag:\n\nBy default, the text in elements are bold and centered, but you can change that with CSS."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr",
        "document": "The following attributes are deprecated and should not be used. They are documented below for reference when updating existing code and for historical interest only. Specifies the horizontal alignment of each row cell. The possible enumerated values are , , , , and . When supported, the value aligns the textual content on the character defined in the attribute and on offset defined by the attribute. Use the CSS property instead, as this attribute is deprecated. Defines the background color of each row cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a , or a color keyword. Other CSS values are not supported. Use the CSS property instead, as this attribute is deprecated. Specifies the alignment of the content to a character of each row cell. Typical values for this include a period ( ) when attempting to align numbers or monetary values. If is not set to , this attribute is ignored. Specifies the number of characters to offset the row cell content from the alignment character specified by the attribute. Specifies the vertical alignment of each row cell. The possible enumerated values are , , , and . Use the CSS property instead, as this attribute is deprecated.\n\nThis example demonstrates a table with four rows and three columns, where the first column contains headers for the row data cells. Four elements are used to create four table rows. Each row contains three cells - one header cell ( ) and two data cells ( ) - creating three columns. The attribute set on each header cell specifies which cells they relate to, which in this example is all data cells within the . The CSS pseudo-class is used to select every row and set the of those rows to a slightly darker tone, creating a so-called \"zebra stripe\" effect. This alternating background makes the rows of data in the table easier to parse and read—imagine having many rows and columns and trying to find some data in a particular row. In addition, the row header cells ( elements) are highlighted with a to distinguish them from the data cells ( elements).\n\nThis example extends the basic table from the previous example by adding a header row as the first row of the table. An additional table row ( ) is added as the first row of the table with column header cells ( ) providing a header for each column. We put this row in a grouping element to indicate this is the header of the table. The attribute is added to each header cell ( ) within this head row to explicitly specify that each header cell relates to all the cells within its own column, even though those cells are in the . The CSS is nearly unchanged from the previous example, except for some additional styling to highlight the \"header row\" so that the headers of the columns stand out from the other cells.\n\nThere are no native methods for sorting the rows ( elements) of a . But using , , and , a custom function can be implemented in JavaScript to sort an of elements. A element is used in this basic table to mark the body section of the table and to include three rows ( elements) with data ( elements), creating one column with numbers in descending order. In the JavaScript code below, the created function is attached to the element so that it sorts the table cells in order of increasing value and updates the display accordingly.\n\nThis example extends the basic table from the previous example by making the sorting interactive and independent for multiple columns. An additional data cell ( element) is added to each row ( element) within the table body ( element) to create a second column with letters in ascending order. Using the element, a head section is added before the body section to introduce a head row with table header cells ( element). These header cells are used in the JavaScript code below to make them clickable and then to perform the corresponding sorting when activated per click. A click event handler is added to each table header ( element) of each in the ; it sorts all the rows ( elements) of the based on the contents of the data cells ( elements) contained in the rows. Note: This solution assumes that the elements are populated by raw text with no descendant elements. const allTables = document.querySelectorAll(\"table\"); for (const table of allTables) { const tBody = table.tBodies[0]; const rows = Array.from(tBody.rows); const headerCells = table.tHead.rows[0].cells; for (const th of headerCells) { const cellIndex = th.cellIndex; th.addEventListener(\"click\", () => { rows.sort((tr1, tr2) => { const tr1Text = tr1.cells[cellIndex].textContent; const tr2Text = tr2.cells[cellIndex].textContent; return tr1Text.localeCompare(tr2Text); }); tBody.append(...rows); }); } } Note: To be usable and accessible, the header cell of each sortable column must be identifiable as a sorting button and each must define whether the column is currently sorted in ascending or descending order visually and with the attribute. See the ARIA Authoring Practices Guide's sortable table example for more information."
    },
    {
        "link": "https://w3schools.com/tags/tag_table.asp",
        "document": "More \"Try it Yourself\" examples below.\n\nAn HTML table consists of one element and one or more <tr>, <th>, and <td> elements.\n\nThe <tr> element defines a table row, the <th> element defines a table header, and the <td> element defines a table cell.\n\nAn HTML table may also include <caption>, <colgroup>, <thead>, <tfoot>, and <tbody> elements.\n\nThe tag also supports the Global Attributes in HTML.\n\nThe tag also supports the Event Attributes in HTML.\n\nHow to define table cells that span more than one row or one column: Try it Yourself »\n\nMost browsers will display the element with the following default values:"
    },
    {
        "link": "https://w3.org/TR/html4/struct/tables.html",
        "document": "The HTML table model allows authors to arrange data -- text, preformatted text, images, links, forms, form fields, other tables, etc. -- into rows and columns of cells.\n\nEach table may have an associated caption (see the element) that provides a short description of the table's purpose. A longer description may also be provided (via the attribute) for the benefit of people using speech or Braille-based user agents.\n\nTable rows may be grouped into a head, foot, and body sections, (via the , and elements, respectively). Row groups convey additional structural information and may be rendered by user agents in ways that emphasize this structure. User agents may exploit the head/body/foot division to support scrolling of body sections independently of the head and foot sections. When long tables are printed, the head and foot information may be repeated on each page that contains table data.\n\nAuthors may also group columns to provide additional structural information that may be exploited by user agents. Furthermore, authors may declare column properties at the start of a table definition (via the and elements) in a way that enables user agents to render the table incrementally rather than having to wait for all the table data to arrive before rendering.\n\nTable cells may either contain \"header\" information (see the element) or \"data\" (see the element). Cells may span multiple rows and columns. The HTML 4 table model allows authors to label each cell so that non-visual user agents may more easily communicate heading information about the cell to the user. Not only do these mechanisms greatly assist users with visual disabilities, they make it possible for multi-modal wireless browsers with limited display capabilities (e.g., Web-enabled pagers and phones) to handle tables.\n\nTables should not be used purely as a means to layout document content as this may present problems when rendering to non-visual media. Additionally, when used with graphics, these tables may force users to scroll horizontally to view a table designed on a system with a larger display. To minimize these problems, authors should use style sheets to control layout rather than tables.\n\nThe element contains all other elements that specify caption, rows, content, and formatting.\n\nThe following informative list describes what operations user agents may carry out when rendering a table:\n• Make the table available to the user. Authors should provide a summary of a table's content and structure so that people using non-visual user agents may better understand it.\n• Render the caption, if one is defined.\n• Render the table header, if one is specified. Render the table footer, if one is specified. User agents must know where to render the header and footer. For instance, if the output medium is paged, user agents may put the header at the top of each page and the footer at the bottom. Similarly, if the user agent provides a mechanism to scroll the rows, the header may appear at the top of the scrolled area and the footer at the bottom.\n• Calculate the number of columns in the table. Note that the number of rows in a table is equal to the number of elements contained by the element.\n• Group the columns according to any column group specifications.\n• Render the cells, row by row and grouped in appropriate columns, between the header and footer. Visual user agents should format the table according to HTML attributes and style sheet specification.\n\nThe HTML table model has been designed so that, with author assistance, user agents may render tables incrementally (i.e., as table rows arrive) rather than having to wait for all the data before beginning to render.\n\nIn order for a user agent to format a table in one pass, authors must tell the user agent:\n• The number of columns in the table. Please consult the section on calculating the number of columns in a table for details on how to supply this information.\n• The widths of these columns. Please consult the section on calculating the width of columns for details on how to supply this information.\n\nMore precisely, a user agent may render a table in a single pass when the column widths are specified using a combination of and elements. If any of the columns are specified in relative or percentage terms (see the section on calculating the width of columns), authors must also specify the width of the table itself.\n\nThe directionality of a table is either the inherited directionality (the default is left-to-right) or that specified by the attribute for the element.\n\nFor a left-to-right table, column zero is on the left side and row zero is at the top. For a right-to-left table, column zero is on the right side and row zero is at the top.\n\nWhen a user agent allots extra cells to a row (see the section on calculating the number of columns in a table), extra row cells are added to the right of the table for left-to-right tables and to the left side for right-to-left tables.\n\nNote that is the only element on which reverses the visual order of the columns; a single table row ( ) or a group of columns ( ) cannot be independently reversed.\n\nWhen set for the element, the attribute also affects the direction of text within table cells (since the attribute is inherited by block-level elements).\n\nThe direction of text in individual cells can be changed by setting the attribute in an element that defines the cell. Please consult the section on bidirectional text for more information on text direction issues.\n\nWhen present, the element's text should describe the nature of the table. The element is only permitted immediately after the start tag. A element may only contain one element.\n\nVisual user agents allow sighted people to quickly grasp the structure of the table from the headings as well as the caption. A consequence of this is that captions will often be inadequate as a summary of the purpose and structure of the table from the perspective of people relying on non-visual user agents.\n\nAuthors should therefore take care to provide additional information summarizing the purpose and structure of the table using the attribute of the element. This is especially important for tables without captions. Examples below illustrate the use of the attribute.\n\nVisual user agents should avoid clipping any part of the table including the caption, unless a means is provided to access all parts, e.g., by horizontal or vertical scrolling. We recommend that the caption text be wrapped to the same width as the table. (See also the section on recommended layout algorithms.)\n\nTable rows may be grouped into a table head, table foot, and one or more table body sections, using the , and elements, respectively. This division enables user agents to support scrolling of table bodies independently of the table head and foot. When long tables are printed, the table head and foot information may be repeated on each page that contains table data.\n\nThe table head and table foot should contain information about the table's columns. The table body should contain rows of table data.\n\nWhen present, each , , and contains a row group. Each row group must contain at least one row, defined by the element.\n\nmust appear before within a definition so that user agents can render the foot before receiving all of the (potentially numerous) rows of data. The following summarizes which tags are required and which may be omitted:\n• The start tag is always required except when the table contains only one table body and no table head or foot sections. The end tag may always be safely omitted.\n• The start tags for and are required when the table head and foot sections are present respectively, but the corresponding end tags may always be safely omitted.\n\nConforming user agent parsers must obey these rules for reasons of backward compatibility.\n\nThe , , and sections must contain the same number of columns.\n\nColumn groups allow authors to create structural divisions within a table. Authors may highlight this structure through style sheets or HTML attributes (e.g., the attribute for the element). For an example of the visual presentation of column groups, please consult the sample table.\n\nA table may either contain a single implicit column group (no element delimits the columns) or any number of explicit column groups (each delimited by an instance of the element).\n\nThe element allows authors to share attributes among several columns without implying any structural grouping. The \"span\" of the element is the number of columns that will share the element's attributes.\n\nThe element creates an explicit column group. The number of columns in the column group may be specified in two, mutually exclusive ways:\n• The element's attribute (default value 1) specifies the number of columns in the group.\n• Each element in the represents one or more columns in the group.\n\nThe advantage of using the attribute is that authors may group together information about column widths. Thus, if a table contains forty columns, all of which have a width of 20 pixels, it is easier to write:\n\nWhen it is necessary to single out a column (e.g., for style information, to specify width information, etc.) within a group, authors must identify that column with a element. Thus, to apply special style information to the last column of the previous table, we single it out as follows:\n\nThe attribute of the element is inherited by all 40 columns. The first element refers to the first 39 columns (doing nothing special to them) and the second one assigns an value to the fortieth column so that style sheets may refer to it.\n\nThe element allows authors to group together attribute specifications for table columns. The does not group columns together structurally -- that is the role of the element. elements are empty and serve only as a support for attributes. They may appear inside or outside an explicit column group (i.e., element).\n\nThe attribute for refers to the width of each column in the element's span.\n\nCalculating the number of columns in a table\n\nThere are two ways to determine the number of columns in a table (in order of precedence):\n• If the element contains any or elements, user agents should calculate the number of columns by summing the following:\n• For each element, take the value of its attribute (default value 1).\n• For each element containing at least one element, ignore the attribute for the element. For each element, perform the calculation of step 1.\n• For each empty element, take the value of its attribute (default value 1).\n• Otherwise, if the element contains no or elements, user agents should base the number of columns on what is required by the rows. The number of columns is equal to the number of columns required by the row with the most columns, including cells that span multiple columns. For any row that has fewer than this number of columns, the end of that row should be padded with empty cells. The \"end\" of a row depends on the table directionality.\n\nIt is an error if a table contains or elements and the two calculations do not result in the same number of columns.\n\nOnce the user agent has calculated the number of columns in the table, it may group them into column groups.\n\nAuthors may specify column widths in three ways:\n\nIf an author specifies no width information for a column, a user agent may not be able to incrementally format the table since it must wait for the entire column of data to arrive in order to allot an appropriate width.\n\nIf column widths prove to be too narrow for the contents of a particular table cell, user agents may choose to reflow the table.\n\nThe elements acts as a container for a row of table cells. The end tag may be omitted.\n\nTable cells may contain two types of information: header information and data. This distinction enables user agents to render header and data cells distinctly, even in the absence of style sheets. For example, visual user agents may present header cell text with a bold font. Speech synthesizers may render header information with a distinct voice inflection.\n\nThe element defines a cell that contains header information. User agents have two pieces of header information available: the contents of the element and the value of the attribute. User agents must render either the contents of the cell or the value of the attribute. For visual media, the latter may be appropriate when there is insufficient space to render the full contents of the cell. For non-visual media may be used as an abbreviation for table headers when these are rendered along with the contents of the cells to which they apply.\n\nThe and attributes also allow authors to help non-visual user agents process header information. Please consult the section on labeling cells for non-visual user agents for information and examples.\n\nThe element defines a cell that contains data.\n\nCells may be empty (i.e., contain no data).\n\nCells that span several rows or columns\n\nCells may span several rows or columns. The number of rows or columns spanned by a cell is set by the and attributes for the and elements.\n\nDefining overlapping cells is an error. User agents may vary in how they handle this error (e.g., rendering may vary).\n\nThe following attributes affect a table's external frame and internal rules.\n\nThe following settings should be observed by user agents for backwards compatibility.\n• Setting =\"0\" implies =\"void\" and, unless otherwise specified, =\"none\".\n• Other values of imply =\"border\" and, unless otherwise specified, =\"all\".\n• The value \"border\" in the start tag of the element should be interpreted as the value of the attribute. It implies =\"all\" and some default (non-zero) value for the attribute.\n\nThe following attributes may be set for different table elements (see their definitions).\n\nWhen the contents of a cell contain more than one instance of the alignment character specified by and the contents wrap, user agent behavior is undefined. Authors should therefore be attentive in their use of .\n\nThe alignment of cell contents can be specified on a cell by cell basis, or inherited from enclosing elements, such as the row, column or the table itself.\n\nThe order of precedence (from highest to lowest) for the attributes , , and is the following:\n• An alignment attribute set on an element within a cell's data (e.g., ).\n• An alignment attribute set on a cell ( and ).\n• An alignment attribute set on a column grouping element ( and ). When a cell is part of a multi-column span, the alignment property is inherited from the cell definition at the beginning of the span.\n• An alignment attribute set on a row or row grouping element ( , , , and ). When a cell is part of a multi-row span, the alignment property is inherited from the cell definition at the beginning of the span.\n• An alignment attribute set on the table ( ).\n\nThe order of precedence (from highest to lowest) for the attribute (as well as the other inherited attributes , , and ) is the following:\n• An attribute set on an element within a cell's data (e.g., ).\n• An attribute set on a cell ( and ).\n• An attribute set on a row or row grouping element ( , , , and ). When a cell is part of a multi-row span, the attribute value is inherited from the cell definition at the beginning of the span.\n• An attribute set on a column grouping element ( and ). When a cell is part of a multi-column span, the attribute value is inherited from the cell definition at the beginning of the span.\n• An attribute set on the table ( ).\n\nFurthermore, when rendering cells, horizontal alignment is determined by columns in preference to rows, while for vertical alignment, rows are given preference over columns.\n\nThe default alignment for cells depends on the user agent. However, user agents should substitute the default attribute for the current directionality (i.e., not just \"left\" in all cases).\n\nUser agents that do not support the \"justify\" value of the attribute should use the value of the inherited directionality in its place.\n\nNote. Note that a cell may inherit an attribute not from its parent but from the first cell in a span. This is an exception to the general attribute inheritance rules.\n\nThese two attributes control spacing between and within cells. The following illustration explains how they relate:\n\nIf a table or given column has a fixed width, and may demand more space than assigned. User agents may give these attributes precedence over the attribute when a conflict occurs, but are not required to.\n\nNon-visual user agents such as speech synthesizers and Braille-based devices may use the following and element attributes to render table cells more intuitively:\n• For a given data cell, the attribute lists which cells provide pertinent header information. For this purpose, each header cell must be named using the attribute. Note that it's not always possible to make a clean division of cells into headers or data. You should use the element for such cells together with the or attributes as appropriate.\n• , the attribute tells the user agent the data cells for which this header provides information. Authors may choose to use this attribute instead of according to which is more convenient; the two attributes fulfill the same function. The attribute is generally needed when headers are placed in irregular positions with respect to the data they apply to.\n• specifies an abbreviated header for header cells so that user agents may render header information more rapidly.\n\nUsers browsing a table with a speech-based user agent may wish to hear an explanation of a cell's contents in addition to the contents themselves. One way the user might provide an explanation is by speaking associated header information before speaking the data cell's contents (see the section on associating header information with data cells).\n\nUsers may also want information about more than one cell, in which case header information provided at the cell level (by , , and ) may not provide adequate context. Consider the following table, which classifies expenses for meals, hotels, and transport in two locations (San Jose and Seattle) over several days:\n\nUsers might want to extract information from the table in the form of queries:\n• \"What did I spend for all my meals?\"\n• \"What did I spend for meals on 25 August?\"\n• \"What did I spend for all expenses in San Jose?\"\n\nEach query involves a computation by the user agent that may involve zero or more cells. In order to determine, for example, the costs of meals on 25 August, the user agent must know which table cells refer to \"Meals\" (all of them) and which refer to \"Dates\" (specifically, 25 August), and find the intersection of the two sets.\n\nTo accommodate this type of query, the HTML 4 table model allows authors to place cell headers and data into categories. For example, for the travel expense table, an author could group the header cells \"San Jose\" and \"Seattle\" into the category \"Location\", the headers \"Meals\", \"Hotels\", and \"Transport\" in the category \"Expenses\", and the four days into the category \"Date\". The previous three questions would then have the following meanings:\n• \"What did I spend for all my meals?\" means \"What are all the data cells in the \"Expenses=Meals\" category?\n• \"What did I spend for meals on 25 August?\" means \"What are all the data cells in the \"Expenses=Meals\" and \"Date=Aug-25-1997\" categories?\n• \"What did I spend for all expenses in San Jose?\" means \"What are all the data cells in the \"Expenses=Meals, Hotels, Transport\" and \"Location=San Jose\" categories?\n\nAuthors categorize a header or data cell by setting the attribute for the cell. For instance, in the travel expense table, the cell containing the information \"San Jose\" could be placed in the \"Location\" category as follows:\n\nAny cell containing information related to \"San Jose\" should refer to this header cell via either the or the attribute. Thus, meal expenses for 25-Aug-1997 should be marked up to refer to attribute (whose value here is \"a6\") of the \"San Jose\" header cell:\n\nEach attribute provides a list of references. Authors may thus categorize a given cell in any number of ways (or, along any number of \"headers\", hence the name).\n\nBelow we mark up the travel expense table with category information:\n\nNote that marking up the table this way also allows user agents to avoid confusing the user with unwanted information. For instance, if a speech synthesizer were to speak all of the figures in the \"Meals\" column of this table in response to the query \"What were all my meal expenses?\", a user would not be able to distinguish a day's expenses from subtotals or totals. By carefully categorizing cell data, authors allow user agents to make important semantic distinctions when rendering.\n\nOf course, there is no limit to how authors may categorize information in a table. In the travel expense table, for example, we could add the additional categories \"subtotals\" and \"totals\".\n\nThis specification does not require user agents to handle information provided by the attribute, nor does it make any recommendations about how user agents may present information to users or how users may query the user agent about this information.\n\nHowever, user agents, particularly speech synthesizers, may want to factor out information common to several cells that are the result of a query. For instance, if the user asks \"What did I spend for meals in San Jose?\", the user agent would first determine the cells in question (25-Aug-1997: 37.74, 26-Aug-1997:27.28), then render this information. A user agent speaking this information might read it:\n\nAn even more economical rendering would factor the common information and reorder it:\n\nUser agents that support this type of rendering should allow user agents a means to customize rendering (e.g., through style sheets).\n\nIn the absence of header information from either the or attribute, user agents may construct header information according to the following algorithm. The goal of the algorithm is to find an ordered list of headers. (In the following description of the algorithm the table directionality is assumed to be left-to-right.)\n• First, search left from the cell's position to find row header cells. Then search upwards to find column header cells. The search in a given direction stops when the edge of the table is reached or when a data cell is found after a header cell.\n• Row headers are inserted into the list in the order they appear in the table. For left-to-right tables, headers are inserted from left to right.\n• Column headers are inserted after row headers, in the order they appear in the table, from top to bottom.\n• If a header cell has the attribute set, then the headers referenced by this attribute are inserted into the list and the search stops for the current direction.\n• cells that set the attribute are also treated as header cells.\n\nThis sample illustrates grouped rows and columns. The example is adapted from \"Developing International Software\", by Nadine Kano."
    }
]