[
    {
        "link": "https://github.com/mysqljs/mysql",
        "document": "\n• Closing all the connections in a pool\n• Getting the id of an inserted row\n• Getting the number of affected rows\n• Getting the number of changed rows\n\nThis is a Node.js module available through the npm registry.\n\nBefore installing, download and install Node.js. Node.js 0.6 or higher is required.\n\nInstallation is done using the command:\n\nFor information about the previous 0.9.x releases, visit the v0.9 branch.\n\nSometimes I may also ask you to install the latest version from Github to check if a bugfix is working. In this case, please do:\n\nThis is a node.js driver for mysql. It is written in JavaScript, does not require compiling, and is 100% MIT licensed.\n\nHere is an example on how to use it:\n\nFrom this example, you can learn the following:\n• Every method you invoke on a connection is queued and executed in sequence.\n• Closing the connection is done using which makes sure all remaining queries are executed before sending a quit packet to the mysql server.\n\nThanks goes to the people who have contributed code to this module, see the GitHub Contributors page.\n\nAdditionally I'd like to thank the following people:\n• Andrey Hristov (Oracle) - for helping me with protocol questions.\n• Ulf Wendel (Oracle) - for helping me with protocol questions.\n\nThe following companies have supported this project financially, allowing me to spend more time on it (ordered by time of contribution):\n• Transloadit (my startup, we do file uploading & video encoding as a service, check it out)\n\nIf you'd like to discuss this module, or ask questions about it, please use one of the following:\n• IRC Channel: #node.js (on freenode.net, I pay attention to any message including the term )\n\nThe recommended way to establish a connection is this:\n\nHowever, a connection can also be implicitly established by invoking a query:\n\nDepending on how you like to handle your errors, either method may be appropriate. Any type of connection error (handshake or network) is considered a fatal error, see the Error Handling section for more information.\n\nWhen establishing a connection, you can set the following options:\n• : The hostname of the database you are connecting to. (Default: )\n• : The port number to connect to. (Default: )\n• : The source IP address to use for TCP connection. (Optional)\n• : The path to a unix domain socket to connect to. When used and are ignored.\n• : The MySQL user to authenticate as.\n• : The password of that MySQL user.\n• : Name of the database to use for this connection (Optional).\n• : The charset for the connection. This is called \"collation\" in the SQL-level of MySQL (like ). If a SQL-level charset is specified (like ) then the default collation for that charset is used. (Default: )\n• : The timezone configured on the MySQL server. This is used to type cast server date/time values to JavaScript object and vice versa. This can be , , or an offset in the form or . (Default: )\n• : The milliseconds before a timeout occurs during the initial connection to the MySQL server. (Default: )\n• : Stringify objects instead of converting to values. (Default: )\n• : Allow connecting to MySQL instances that ask for the old (insecure) authentication method. (Default: )\n• : Determines if column values should be converted to native JavaScript types. (Default: )\n• : When dealing with big numbers (BIGINT and DECIMAL columns) in the database, you should enable this option (Default: ).\n• : Enabling both and forces big numbers (BIGINT and DECIMAL columns) to be always returned as JavaScript String objects (Default: ). Enabling but leaving disabled will return big numbers as String objects only when they cannot be accurately represented with [JavaScript Number objects] (https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type) (which happens when they exceed the [-2^53, +2^53] range), otherwise they will be returned as Number objects. This option is ignored if is disabled.\n• : Force date types (TIMESTAMP, DATETIME, DATE) to be returned as strings rather than inflated into JavaScript Date objects. Can be / or an array of type names to keep as strings. (Default: )\n• : Prints protocol details to stdout. Can be / or an array of packet type names that should be printed. (Default: )\n• : Generates stack traces on to include call site of library entrance (\"long stack traces\"). Slight performance penalty for most calls. (Default: )\n• : Allow to use the modifier. (Default: )\n• : Allow multiple mysql statements per query. Be careful with this, it could increase the scope of SQL injection attacks. (Default: )\n• : List of connection flags to use other than the default ones. It is also possible to blacklist default ones. For more information, check Connection Flags.\n• : object with ssl parameters or a string containing name of ssl profile. See SSL options.\n\nIn addition to passing these options as an object, you can also use a url string. For example:\n\nNote: The query values are first attempted to be parsed as JSON, and if that fails assumed to be plaintext strings.\n\nThe option in the connection options takes a string or an object. When given a string, it uses one of the predefined SSL profiles included. The following profiles are included:\n• : this profile is for connecting to an Amazon RDS server and contains the certificates from https://rds.amazonaws.com/doc/rds-ssl-ca-cert.pem and https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem\n\nWhen connecting to other servers, you will need to provide an object with any of the following options:\n• : The certificate(s) to trust instead of the ones Node.js is configured to trust. This refers to the value of the certificate(s) and not a filename of the certificate(s). This is passed as the option for the underlying call (or underlying if using Node.js below 0.12).\n• : The client certificate to use in the SSL handshake. This is passed as the option for the underlying call (or underlying if using Node.js below 0.12).\n• : The ciphers to use to use in the SSL handshake instead of the default ones for Node.js. This is passed as the option for call (or underlying if using Node.js below 0.12).\n• : This is passed as the option for the underlying call.\n• : This is passed as the option for the underlying call.\n• : This is passed as the option for call (or underlying if using Node.js below 0.12).\n• : This is passed as the option for call (or underlying if using Node.js below 0.12).\n• : The server certificate is verified against the list of supplied CAs and the hostname, and if no match is found, the SSL connection will fail. (Default: )\n\nHere is a simple example:\n\nYou can also connect to a MySQL server without properly providing the appropriate CA to trust. You should not do this.\n\nIf, for any reason, you would like to change the default connection flags, you can use the connection option . Pass a string with a comma separated list of items to add to the default flags. If you don't want a default flag to be used prepend the flag with a minus sign. To add a flag that is not in the default list, just write the flag name, or prefix it with a plus (case insensitive).\n\nThe following flags are available:\n• - Enable protocol compression. This feature is not currently supported by the Node.js implementation so cannot be turned on. (Default off)\n• - Ability to specify the database on connection. (Default on)\n• - Send the found rows instead of the affected rows as . (Default on)\n• - Don't issue SIGPIPE if network failures. This flag has no effect on this Node.js implementation. (Default on)\n• - Let the parser ignore spaces before the in queries. (Default on)\n• - Indicates to the MySQL server this is an \"interactive\" client. This will use the interactive timeouts on the MySQL server and report as interactive in the process list. (Default off)\n• - Can use . This flag is controlled by the connection option . (Default on)\n• - Use the improved version of Old Password Authentication. (Default on)\n• - Can handle multiple resultsets for queries. (Default on)\n• - The client may send multiple statement per query or statement prepare (separated by ). This flag is controlled by the connection option . (Default off)\n• Special handling of ODBC behaviour. This flag has no effect on this Node.js implementation. (Default on)\n• - Uses the plugin authentication mechanism when connecting to the MySQL server. This feature is not currently supported by the Node.js implementation so cannot be turned on. (Default off)\n• - Uses the 4.1 protocol. (Default on)\n• - Can handle multiple resultsets for execute. (Default on)\n• - This is specific to the C client, and has no effect on this Node.js implementation. (Default off)\n• - Old flag for the 4.1 protocol. (Default on)\n• - Use SSL after handshake to encrypt data in transport. This feature is controlled though the connection option, so the flag has no effect. (Default off)\n• - Verify the server certificate during SSL set up. This feature is controlled though the connection option, so the flag has no effect. (Default off)\n• - Asks for the transaction status flags. (Default on)\n\nThere are two ways to end a connection. Terminating a connection gracefully is done by calling the method:\n\nThis will make sure all previously enqueued queries are still executed before sending a packet to the MySQL server. If a fatal error occurs before the packet can be sent, an argument will be provided to the callback, but the connection will be terminated regardless of that.\n\nAn alternative way to end the connection is to call the method. This will cause an immediate termination of the underlying socket. Additionally guarantees that no more events or callbacks will be triggered for the connection.\n\nUnlike the method does not take a callback argument.\n\nRather than creating and managing connections one-by-one, this module also provides built-in connection pooling using . Read more about connection pooling.\n\nCreate a pool and use it directly:\n\nThis is a shortcut for the -> -> code flow. Using is useful to share connection state for subsequent queries. This is because two calls to may use two different connections and run in parallel. This is the basic structure:\n\nIf you would like to close the connection and remove it from the pool, use instead. The pool will create a new connection the next time one is needed.\n\nConnections are lazily created by the pool. If you configure the pool to allow up to 100 connections, but only ever use 5 simultaneously, only 5 connections will be made. Connections are also cycled round-robin style, with connections being taken from the top of the pool and returning to the bottom.\n\nWhen a previous connection is retrieved from the pool, a ping packet is sent to the server to check if the connection is still good.\n\nPools accept all the same options as a connection. When creating a new connection, the options are simply passed to the connection constructor. In addition to those options pools accept a few extras:\n• : The milliseconds before a timeout occurs during the connection acquisition. This is slightly different from , because acquiring a pool connection does not always involve making a connection. If a connection request is queued, the time the request spends in the queue does not count towards this timeout. (Default: )\n• : Determines the pool's action when no connections are available and the limit has been reached. If , the pool will queue the connection request and call it when one becomes available. If , the pool will immediately call back with an error. (Default: )\n• : The maximum number of connections to create at once. (Default: )\n• : The maximum number of connection requests the pool will queue before returning an error from . If set to , there is no limit to the number of queued connection requests. (Default: )\n\nThe pool will emit an event when a connection is acquired from the pool. This is called after all acquiring activity has been performed on the connection, right before the connection is handed to the callback of the acquiring code.\n\nThe pool will emit a event when a new connection is made within the pool. If you need to set session variables on the connection before it gets used, you can listen to the event.\n\nThe pool will emit an event when a callback has been queued to wait for an available connection.\n\nThe pool will emit a event when a connection is released back to the pool. This is called after all release activity has been performed on the connection, so the connection will be listed as free at the time of the event.\n\nWhen you are done using the pool, you have to end all the connections or the Node.js event loop will stay active until the connections are closed by the MySQL server. This is typically done if the pool is used in a script or when trying to gracefully shutdown a server. To end all the connections in the pool, use the method on the pool:\n\nThe method takes an optional callback that you can use to know when all the connections are ended.\n\nOnce is called, and other operations can no longer be performed. Wait until all connections in the pool are released before calling . If you use the shortcut method , in place of → → , wait until it completes.\n\ncalls on every active connection in the pool. This queues a packet on the connection and sets a flag to prevent from creating new connections. All commands / queries already in progress will complete, but new commands won't execute.\n• : If , will attempt to reconnect when connection fails. (Default: )\n• : If connection fails, node's increases. When is greater than , remove a node in the . (Default: )\n• : If connection fails, specifies the number of milliseconds before another connection attempt will be made. If set to , then node will be removed instead and never re-used. (Default: )\n• : The default selector. (Default: )\n• : Select the first node available unconditionally.\n\nMySQL offers a changeUser command that allows you to alter the current user and other aspects of the connection without shutting down the underlying socket:\n\nThe available options for this feature are:\n• : The name of the new user (defaults to the previous one).\n• : The password of the new user (defaults to the previous one).\n• : The new charset (defaults to the previous one).\n• : The new database (defaults to the previous one).\n\nA sometimes useful side effect of this functionality is that this function also resets any connection state (variables, transactions, etc.).\n\nErrors encountered during this operation are treated as fatal connection errors by this module.\n\nYou may lose the connection to a MySQL server due to network problems, the server timing you out, the server being restarted, or crashing. All of these events are considered fatal errors, and will have the . See the Error Handling section for more information.\n\nRe-connecting a connection is done by establishing a new connection. Once terminated, an existing connection object cannot be re-connected by design.\n\nWith Pool, disconnected connections will be removed from the pool freeing up space for a new connection to be created on the next getConnection call.\n\nWith PoolCluster, disconnected connections will count as errors against the related node, incrementing the error code for that node. Once there are more than errors on a given node, it is removed from the cluster. When this occurs, the PoolCluster may emit a error if there are no longer any matching nodes for the pattern. The config can be set to restore offline nodes after a given timeout.\n\nThe most basic way to perform a query is to call the method on an object (like a , , or instance).\n\nThe simplest form of is , where a SQL string is the first argument and the second is a callback:\n\nThe second form comes when using placeholder values (see escaping query values):\n\nThe third form comes when using various advanced options on the query, like escaping query values, joins with overlapping column names, timeouts, and type casting.\n\nNote that a combination of the second and third forms can be used where the placeholder values are passed as an argument and not in the options object. The argument will override the in the option object.\n\nIf the query only has a single replacement character ( ), and the value is not , , or an array, it can be passed directly as the second argument to :\n\nCaution These methods of escaping values only works when the NO_BACKSLASH_ESCAPES SQL mode is disabled (which is the default state for MySQL servers).\n\nCaution This library performs client-side escaping, as this is a library to generate SQL strings on the client side. The syntax for functions like may look similar to a prepared statement, but it is not and the escaping rules from this module are used to generate a resulting SQL string. The purpose of escaping input is to avoid SQL Injection attacks. In order to support enhanced support like and formatting, this module will escape based on the shape of the passed in JavaScript value, and the resulting escaped string may be more than a single value. When structured user input is provided as the value to escape, care should be taken to validate the shape of the input to validate the output will be what is expected.\n\nIn order to avoid SQL Injection attacks, you should always escape any user provided data before using it inside a SQL query. You can do so using the , or methods:\n\nAlternatively, you can use characters as placeholders for values you would like to have escaped like this:\n\nMultiple placeholders are mapped to values in the same order as passed. For example, in the following query equals , equals , equals , and will be :\n\nThis looks similar to prepared statements in MySQL, however it really just uses the same method internally.\n\nCaution This also differs from prepared statements in that all are replaced, even those contained in comments and strings.\n\nDifferent value types are escaped differently, here is how:\n• Arrays are turned into list, e.g. turns into\n• Nested arrays are turned into grouped lists (for bulk inserts), e.g. turns into\n• Objects that have a method will have called and the returned value is used as the raw SQL.\n• Objects are turned into pairs for each enumerable property on the object. If the property's value is a function, it is skipped; if the property's value is an object, toString() is called on it and the returned value is used.\n• / are left as-is. MySQL does not support these, and trying to insert them as values will trigger MySQL errors until they implement support.\n\nThis escaping allows you to do neat things like this:\n\nAnd the method allows you to form complex queries with functions:\n\nTo generate objects with a method, the method can be used. This creates an object that will be left un-touched when using in a placeholder, useful for using functions as dynamic values:\n\nCaution The string provided to will skip all escaping functions when used, so be careful when passing in unvalidated input.\n\nIf you feel the need to escape queries by yourself, you can also use the escaping function directly:\n\nIf you can't trust an SQL identifier (database / table / column name) because it is provided by a user, you should escape it with , or like this:\n\nIt also supports adding qualified identifiers. It will escape both parts.\n\nIf you do not want to treat as qualified identifiers, you can set the second argument to in order to keep the string as a literal identifier:\n\nAlternatively, you can use characters as placeholders for identifiers you would like to have escaped like this:\n\nPlease note that this last character sequence is experimental and syntax might change\n\nWhen you pass an Object to or , is used to avoid SQL injection in object keys.\n\nYou can use mysql.format to prepare a query with multiple insertion points, utilizing the proper escaping for ids and values. A simple example of this follows:\n\nFollowing this you then have a valid, escaped query that you can then send to the database safely. This is useful if you are looking to prepare the query before actually sending it to the database. As mysql.format is exposed from SqlString.format you also have the option (but are not required) to pass in stringifyObject and timezone, allowing you provide a custom means of turning objects into strings, as well as a location-specific/timezone-aware Date.\n\nIf you prefer to have another type of query escape format, there's a connection configuration option you can use to define a custom format function. You can access the connection object if you want to use the built-in or any other connection function.\n\nHere's an example of how to implement another format:\n\nIf you are inserting a row into a table with an auto increment primary key, you can retrieve the insert id like this:\n\nWhen dealing with big numbers (above JavaScript Number precision limit), you should consider enabling option to be able to read the insert id as a string, otherwise it will throw an error.\n\nThis option is also required when fetching big numbers from the database, otherwise you will get values rounded to hundreds or thousands due to the precision limit.\n\nYou can get the number of affected rows from an insert, update or delete statement.\n\nYou can get the number of changed rows from an update statement.\n\n\"changedRows\" differs from \"affectedRows\" in that it does not count updated rows whose values were not changed.\n\nYou can get the MySQL connection ID (\"thread ID\") of a given connection using the property.\n\nThe MySQL protocol is sequential, this means that you need multiple connections to execute queries in parallel. You can use a Pool to manage connections, one simple approach is to create one connection per incoming http request.\n\nSometimes you may want to select large quantities of rows and process each of them as they are received. This can be done like this:\n\nPlease note a few things about the example above:\n• Usually you will want to receive a certain amount of rows before starting to throttle the connection using . This number will depend on the amount and size of your rows.\n• / operate on the underlying socket and parser. You are guaranteed that no more events will fire after calling .\n• You MUST NOT provide a callback to the method when streaming rows.\n• The event will fire for both rows as well as OK packets confirming the success of a INSERT/UPDATE query.\n• It is very important not to leave the result paused too long, or you may encounter The time limit for this is determined by the net_write_timeout setting on your MySQL server.\n\nAdditionally you may be interested to know that it is currently not possible to stream individual row columns, they will always be buffered up entirely. If you have a good use case for streaming large fields to and from MySQL, I'd love to get your thoughts and contributions on this.\n\nThe query object provides a convenience method that wraps query events into a Readable Stream object. This stream can easily be piped downstream and provides automatic pause/resume, based on downstream congestion and the optional . The parameter of the stream is set to and cannot be changed (if you need a byte stream, you will need to use a transform stream, like objstream for example).\n\nFor example, piping query results into another stream (with a max buffer of 5 objects) is simply:\n\nSupport for multiple statements is disabled for security reasons (it allows for SQL injection attacks if values are not properly escaped). To use this feature you have to enable it for your connection:\n\nOnce enabled, you can execute multiple statement queries like any other query:\n\nAdditionally you can also stream the results of multiple statement queries:\n\nIf one of the statements in your query causes an error, the resulting Error object contains a property which tells you which statement caused it. MySQL will also stop executing any remaining statements when an error occurs.\n\nPlease note that the interface for streaming multiple statement queries is experimental and I am looking forward to feedback on it.\n\nYou can call stored procedures from your queries as with any other mysql driver. If the stored procedure produces several result sets, they are exposed to you the same way as the results for multiple statement queries.\n\nWhen executing joins, you are likely to get result sets with overlapping column names.\n\nBy default, node-mysql will overwrite colliding column names in the order the columns are received from MySQL, causing some of the received values to be unavailable.\n\nHowever, you can also specify that you want your columns to be nested below the table name like this:\n\nOr use a string separator to have your results merged.\n\nSimple transaction support is available at the connection level:\n\nPlease note that beginTransaction(), commit() and rollback() are simply convenience functions that execute the START TRANSACTION, COMMIT, and ROLLBACK commands respectively. It is important to understand that many commands in MySQL can cause an implicit commit, as described in the MySQL documentation\n\nA ping packet can be sent over a connection using the method. This method will send a ping packet to the server and when the server responds, the callback will fire. If an error occurred, the callback will fire with an error argument.\n\nEvery operation takes an optional inactivity timeout option. This allows you to specify appropriate timeouts for operations. It is important to note that these timeouts are not part of the MySQL protocol, and rather timeout operations through the client. This means that when a timeout is reached, the connection it occurred on will be destroyed and no further operations can be performed.\n\nThis module comes with a consistent approach to error handling that you should review carefully in order to write solid applications.\n\nMost errors created by this module are instances of the JavaScript Error object. Additionally they typically come with two extra properties:\n• : String, contains the MySQL server error symbol if the error is a MySQL server error (e.g. ), a Node.js error code if it is a Node.js error (e.g. ), or an internal error code (e.g. ).\n• : Number, contains the MySQL server error number. Only populated from MySQL server error.\n• : Boolean, indicating if this error is terminal to the connection object. If the error is not from a MySQL protocol operation, this property will not be defined.\n• : String, contains the full SQL of the failed query. This can be useful when using a higher level interface like an ORM that is generating the queries.\n• : String, contains the five-character SQLSTATE value. Only populated from MySQL server error.\n• : String, contains the message string that provides a textual description of the error. Only populated from MySQL server error.\n\nFatal errors are propagated to all pending callbacks. In the example below, a fatal error is triggered by trying to connect to a blocked port. Therefore the error object is propagated to both pending callbacks:\n\nNormal errors however are only delegated to the callback they belong to. So in the example below, only the first callback receives an error, the second query works as expected:\n\nLast but not least: If a fatal errors occurs and there are no pending callbacks, or a normal error occurs which has no callback belonging to it, the error is emitted as an event on the connection object. This is demonstrated in the example below:\n\nNote: events are special in node. If they occur without an attached listener, a stack trace is printed and your process is killed.\n\ntl;dr: This module does not want you to deal with silent failures. You should always provide callbacks to your method calls. If you want to ignore this advice and suppress unhandled errors, you can do this:\n\nThis module is exception safe. That means you can continue to use it, even if one of your callback functions throws an error which you're catching using 'uncaughtException' or a domain.\n\nFor your convenience, this driver will cast mysql types into native JavaScript types by default. The default behavior can be changed through various Connection options. The following mappings exist:\n• BIT (last byte will be filled with 0 bits as necessary)\n\nNote text in the binary character set is returned as , rather than a string.\n• TIME (could be mapped to Date, but what date would be set?)\n• GEOMETRY (never used those, get in touch if you do)\n\nIt is not recommended (and may go away / change in the future) to disable type casting, but you can currently do so on either the connection:\n\nOr on the query level:\n\nYou can also pass a function and handle type casting yourself. You're given some column information like database, table and name and also type and length. If you just want to apply a custom type casting to a specific type you can do it and then fallback to the default.\n\nThe function is provided two arguments and and is expected to return the value for the given field by invoking the parser functions through the object.\n\nThe argument is a object and contains data about the field that need to be parsed. The following are some of the properties on a object:\n• - a string of the database the field came from.\n• - a string of the table the field came from.\n• - a string of the field name.\n• - a string of the field type in all caps.\n• - a number of the field length, as given by the database.\n\nThe argument is a that, when called, will return the default type conversion for the given field.\n\nWhen getting the field data, the following helper methods are present on the object:\n• - parse the field as a geometry value.\n\nThe MySQL protocol is a text-based protocol. This means that over the wire, all field types are represented as a string, which is why only string-like functions are available on the object. Based on the type information (like ), the type cast should convert the string field into a different JavaScript type (like a ).\n\nHere's an example of converting to boolean:\n\nWARNING: YOU MUST INVOKE the parser using one of these three field functions in your custom typeCast callback. They can only be called once.\n\nIf you are running into problems, one thing that may help is enabling the mode for the connection:\n\nThis will print all incoming and outgoing packets on stdout. You can also restrict debugging to packet types by passing an array of types to debug:\n\nto restrict debugging to the query and data packets.\n\nIf that does not help, feel free to open a GitHub issue. A good GitHub issue will have:\n• The minimal amount of code required to reproduce the problem (if possible)\n• As much debugging output and information about your environment (mysql version, node version, os, etc.) as you can gather.\n\nSecurity issues should not be first reported through GitHub or another public forum, but kept private in order for the collaborators to assess the report and either (a) devise a fix and plan a release date or (b) assert that it is not a security issue (in which case it can be posted in a public forum, like a GitHub issue).\n\nThe primary private forum is email, either by emailing the module's author or opening a GitHub issue simply asking to whom a security issues should be addressed to without disclosing the issue or type of issue.\n\nAn ideal report would include a clear indication of what the security issue is and how it would be exploited, ideally with an accompanying proof of concept (\"PoC\") for collaborators to work against and validate potentional fixes against.\n\nThis project welcomes contributions from the community. Contributions are accepted using GitHub pull requests. If you're not familiar with making GitHub pull requests, please refer to the GitHub documentation \"Creating a pull request\".\n\nFor a good pull request, we ask you provide the following:\n• Try to include a clear description of your pull request in the description. It should include the basic \"what\" and \"why\"s for the request.\n• The tests should pass as best as you can. See the Running tests section on how to run the different tests. GitHub will automatically run the tests as well, to act as a safety net.\n• The pull request should include tests for the change. A new feature should have tests for the new feature and bug fixes should include a test that fails without the corresponding code change and passes after they are applied. The command will generate a folder that contains HTML pages of the code coverage, to better understand if everything you're adding is being tested.\n• If the pull request is a new feature, please be sure to include all appropriate documentation additions in the file as well.\n• To help ensure that your code is similar in style to the existing code, run the command and fix any displayed issues.\n\nThe test suite is split into two parts: unit tests and integration tests. The unit tests run on any machine while the integration tests require a MySQL server instance to be setup.\n\nSet the environment variables , , , and . can also be used in place of and to connect over a UNIX socket. Then run .\n\nFor example, if you have an installation of mysql running on localhost:3306 and no password set for the user, run:\n• Support for encodings other than UTF-8 / ASCII"
    },
    {
        "link": "https://stackoverflow.com/questions/40141332/node-js-mysql-error-handling",
        "document": "I've read several examples for using mysql in node.js and I have questions about the error handling.\n\nMost examples do error handling like this (perhaps for brevity):\n\nThis causes the server to crash every time there's an sql error. I'd like to avoid that and keep the server running.\n\nMy code is like this:\n\nI'm not sure if this is the best way to handle it. I'm also wondering if there should be a in the query's block. Otherwise the connections might stay open and build up over time.\n\nI'm used to Java's or where I can \"cleanly\" catch any errors and close all my resources at the end. Is there a way to propagate the errors up and handle them all in one place?"
    },
    {
        "link": "https://gosquared.com/blog/node-js-error-handling-callbacks-vs-promises",
        "document": "Error handling can be a drag, but it’s essential for the stability of your app. Naturally, I’m interested in ways to streamline the error handling process to make it as stable as it can be for the app whilst also being convenient for me to write.\n\nLately, I’ve been reading a lot about new features in ES6, such as generators, and that’s led me onto promises, an alternative method of asynchronous flow control to callbacks. I decided to look into the differences in how these different methods approach error handling, their strengths and weaknesses.\n\nThe main kind of errors we’re looking at here are I/O errors in asynchronous operations. These occur when an I/O operation fails to yield the expected results, sometimes due to some external problem outside of your program’s control. For example, we might be fetching data from a MySQL database, but our query contains an error:\n\nNotice that in this example we are using Node’s default style of using a callback to handle the result of the I/O. The first argument of the callback function is . This is the standard convention in Node, the one you should follow when writing your own async functions.\n\nThe first argument to callbacks should always be\n\nDevelopers new to Node sometimes forget to follow this convention which makes it very frustrating for other developers trying to work with their code, because they have no consistent point of reference to check whether the operation succeeded or not. But if the first parameter to our callback is reserved for errors then they can be checked before processing the results of each callback.\n\nIf is falsy (usually null), then the callback can carry on assuming the operation succeeded. Otherwise, it can deal with the error in an appropriate way, such as logging it along with any contextual information. It can then decide whether or not to carry on depending on the severity of the error or whether or not the resultant data is required to continue operation.\n\nLet’s implement some error handling for our query error:\n\nHere, we check if is present. If it is, we log the error and the query that triggered it then return from the function, stopping it from running any further.\n\nYou might have a collection of multiple async operations executing in parallel. How do we handle errors in any of those?\n\nOur favourite library for asynchronous flow control is async. Both and accept a collection of operations, and if any of them pass an error to its callback, async will immediately invoke your completion callback with the error:\n\nwill execute both and in parallel but if either or both fail it will invoke our completion callback with the error that occurred first.\n\nStandard callbacks are all well and good when we’re following Node’s convention, but it’s a little bit laborious to check the result of every operation, and this can quickly get messy when there are many nested callbacks each with their own error handling code.\n\nPromises are an alternative to callbacks for asynchronous control flow. They are viewed as a solution to the “pyramid of doom” indentation caused by nested callbacks, but they also have some useful error handling features.\n\nQ is a popular module to get you working with promises. In its README, Q describes the concept of promises:\n\nPromises allow us to chain operations together in a sequential manner, without the need for nesting. They also neatly encapsulate any results and errors raised within the chain. For example:\n\nCompare this to the callback-based equivalent:\n\nThe promises method is much more compact, clearer and quicker to write. If an error or exception occurs within any of the ops it is handled by the single handler. Having this single place to handle all errors means you don’t need to write error checking for each stage of the work.\n\nAdditionally, the promise chain has more robust protection against exceptions and runtime errors that could be thrown within operations. If an exception is thrown, it will be caught by your handler, or any intermediary error handlers passed to each step. In contrast, the callback method would crash the node process because it doesn’t encapsulate exceptions thrown in I/O callbacks. Catching exceptions like this allows you to gracefully handle the error in an appropriate way instead of crashing the process straight away.\n\nFurthermore, you can use Q’s long stack support to get more helpful stack traces that keep track of the call stack across asynchronous operations.\n\nOne slight disadvantage of promises is that in order to use them, you need to make any normal node callback-style code compatible with promise flow control. This usually involves passing the functions through an adapter to make it compatible with promises, such as Q’s .\n\nWe’ve spoken a lot about I/O errors during asynchronous flow control, but Node.js has another way of running handlers asynchronously: events.\n\nIn Node, an object can be made into an event emitter by inheriting the EventEmitter on its prototype. All core node modules that emit events such as or inherit from EventEmitter.\n\nWhen an event emitter encounters an error (e.g. a TCP socket abruptly disconnects), it will emit a special ‘error’ event. The ‘error’ event is special in Node because if there are no listeners on the event emitter for this event then the event emitter will throw an exception and this will crash the process.\n\nYou might be tempted to prevent exceptions being thrown by binding a listener to the ‘error’ event and logging it instead of crashing. This is potentially dangerous, because you usually can’t guarantee exactly where the error originated from and what all the consequences of it are. Usually the best thing to do is catch the error, log it, close any existing connections and gracefully restart your app.\n\nDo not use\n\nwas added to node for the purpose of catching errors and doing cleanup before the node process exits. Beware! This has quickly become an anti-pattern in Node. It loses the context of the exception, and is prone to hanging if your event handler doesn’t call .\n\nDomains were created as a more official way of capturing uncaught exceptions or stray ‘error’ events before they get to crash the process.\n\nWhile the domains API is still in unstable state and is subject to some criticism, it is still better than using . Read the docs for usage info.\n\nFurther reading on Q module and domains documentation."
    },
    {
        "link": "https://github.com/mariadb-corporation/mariadb-connector-nodejs/blob/master/documentation/callback-api.md",
        "document": "There are two different connection implementation: one, the default, uses Promise and the other uses Callback, allowing for compatibility with the mysql and mysql2 API's. The documentation provided on this page follows Callback. If you want information on the Promise API, see the README.\n\nYou can then use the Connector in your application code with the Callback API. For instance,\n\nIn order to use the Connector you first need to install it on your system. The installation process for Promise and Callback API's is managed with the same package through npm.\n\nTo use the Connector, you need to import the package into your application code. Given that the Callback API is not the default, the statement is a little different.\n\nThis initializes the constant , which is set to use the Callback API rather than the default Promise API.\n\nDefault behaviour for decoding BIGINT / DECIMAL datatype for 2.x version and mysql/mysql2 drivers return a javascript Number object. BIGINT/DECIMAL values might not be in the safe range, resulting in approximate results.\n\nFor compatibility with previous version or mysql/mysql driver, 4 options have been added to return BIGINT/DECIMAL as number, as previous defaults.\n\nPrevious options and still exist for compatibility, but are now deprecated.\n\nmysql has an experimental syntax permitting the use of characters as placeholder to escape id. This isn't implemented in mariadb driver, permitting same query syntax for Connection.query and Connection.execute.\n\nhas to use explicit escapeId:\n\nCluster configuration default to when mysql/mysql2 default to value . This avoids removing nodes without explicitly saying so.\n\nClient and database can have a different timezone.\n\nThe connector has different solutions when this is the case. the option can have the following value:\n• 'local' (default) : connector doesn't do any conversion. If the database has a different timezone, there will be an offset issue.\n• 'auto' : connector retrieve server timezone. Dates will be converted if server timezone differs from client\n\nWhen using IANA timezone, the connector will set the connection timezone to the timezone. this can throw an error on connection if timezone is unknown by the server (see mariadb timezone documentation, timezone tables might be not initialized) If you are sure the server is using that timezone, this step can be skipped with the option .\n\nIf timezone correspond to javascript default timezone, then no conversion will be done\n\nThe best is to have the same timezone on client and database, then keep the 'local' default value.\n\nIf different, then either client or server has to convert date. In general, that is best to use client conversion, to avoid putting any unneeded stress on the database. timezone has to be set to the IANA timezone corresponding to server timezone and disabled option since you are sure that the server has the corresponding timezone.\n\nexample: client use 'America/New_York' by default, and server 'America/Los_Angeles'. execute 'SELECT @@system_time_zone' on the server. that will give the server default timezone. the server can return POSIX timezone like 'PDT' (Pacific Daylight Time). IANA timezone correspondence must be found : (see IANA timezone List) and configure client-side. This will ensure DST (automatic date saving time change will be handled)\n\nConnection details such as URL, username, and password are better hidden into environment variables. using code like :\n\nThen for example, run node.js setting those environment variable :\n\nAnother solution is using package. Dotenv loads environment variables from .env files into the process.env variable in Node.js :\n\nthen configure dotenv to load all .env files\n\n.env files must NOT be pushed into repository, using .gitignore\n\nAlternatively, node.js 20.0 introduced the experimental feature of using the syntax to load environment variables without the need for external dependencies. WE can then simply write\n\nAssuming the presence of the same .env file as previously described.\n\nThe Connector with the Callback API is similar to the one using Promise, but with a few differences.\n• : Commit the current transaction, if any.\n• : Rolls back the current transaction, if any.\n• : Sends an empty packet to the server to check that connection is active.\n• : Checks that the connection is active without checking socket state.\n• : remove and end pool according to pattern.\n\nThe difference between this method and the same with the Promise API is that this method returns a object, rather than a Promise that resolves to a object.\n\nFor more information, see the Connection Options documentation.\n\nWhen working with a local database (that is, cases where MariaDB and your Node.js application run on the same host), you can connect to MariaDB through the Unix socket or Windows named pipe for better performance, rather than using the TCP/IP layer.\n\nIn order to set this up, you need to assign the connection a value. When this is done, the Connector ignores the and options.\n\nThe specific socket path you need to set is defined by the server system variable. If you don't know it off hand, you can retrieve it from the server.\n\nIt defaults to on Unix-like operating systems and on Windows. Additionally, on Windows, this feature only works when the server is started with the option.\n\nFor instance, on Unix a connection might look like this:\n\nIt has a similar syntax on Windows:\n\nPool options includes connection option documentation that will be used when creating new connections.\n\nPool cluster options includes pool option documentation that will be used when creating new pools.\n\npermit listing default option that will be used.\n\nSends query to the database with a Callback function to call when done.\n\nIn cases where the query returns huge result-sets, this means that all data is stored in memory. You may find it more practical to use the object to handle the rows one by one, to avoid overloading memory resources.\n\nFor example, issuing a query with an SQL string:\n\nTo avoid SQL Injection attacks, queries permit the use of a question mark as a placeholder. The Connector escapes values according to their type. You can use any native JavaScript type, Buffer, Readable or any object with a method in these values. All other objects are stringified using the method.\n\nThe Connector automatically streams objects that implement Readable. In these cases, check the values on the following server system variables, as they may interfere:\n• : The server must receive the query in full from the Connector before timing out. The default value for this system variable is 30 seconds.\n• : Using this system variable you can control the maximum amount of data the Connector can send to the server.\n\nYou can also issue the same query using Streaming.\n\nQueries issued from the Connector return two different kinds of results: a JSON object and an array, depending on the type of query you issue. Queries that write to the database, such as , and commands return a JSON object with the following properties:\n• : An integer listing the number of affected rows.\n• : An integer noting the auto-increment ID. In case multiple rows have been inserted, this corresponds to the FIRST auto-increment value.\n• : An integer indicating whether the query ended with a warning.\n\nQueries issued from the Connector return two different kinds of results: a JSON object and an array, depending on the type of query you issue. When the query returns multiple rows, the Connector returns an array, representing the data for each row in the array. It also returns a object, containing query metadata.\n\nYou can formt the data results using the and options. By default, it returns a JSON object for each row.\n\npiping can be use using .stream() function on query, that returns a Readable object, that will emit rows objects.\n\nImplementation depend of server type and version. for MariaDB server version 10.2.7+, implementation use dedicated bulk protocol.\n\nFor other, insert queries will be rewritten for optimization. example: insert into ab (i) values (?) with first batch values = 1, second = 2 will be rewritten insert into ab (i) values (1), (2).\n\nIf query cannot be re-writen will execute a query for each values.\n\nresult difference compared to execute multiple single query insert is that only first generated insert id will be returned.\n\nCommits the current transaction, if there is one active. The Connector keeps track of the current transaction state on the server. When there isn't an active transaction, this method sends no commands to the server.\n\nRolls back the current transaction, if there is one active. The Connector keeps track of the current transaction state on the server. Where there isn't an active transaction, this method sends no commands to the server.\n\nResets the connection and re-authenticates with the given credentials. This is the equivalent of creating a new connection with a new user, reusing the existing open socket.\n\nSends a one byte packet to the server to check that the connection is still active.\n\nCloses the connection gracefully. That is, the Connector waits for current queries to finish their execution then closes the connection.\n\nThis command is only available for MariaDB >=10.2.4 or MySQL >= 5.7.3. function will be rejected with error \"Reset command not permitted for server XXX\" if version doesn't permit reset.\n\nFor previous MariaDB version, reset connection can be done using that do the same + redo authentication phase.\n\nIndicates the connection state as the Connector knows it. If it returns false, there is an issue with the connection, such as the socket disconnected without the Connector knowing about it.\n\nCloses the connection without waiting for any currently executing queries. These queries are interrupted. MariaDB logs the event as an unexpected socket close.\n\nThis function permit to escape a parameter properly according to parameter type to avoid injection. See mariadb String literals for escaping.\n• this is less efficient compare to using standard conn.query(), that will stream data to socket, avoiding string concatenation and using memory unnecessary\n• Array: list of escaped value. ex: =>\n• geoJson: MariaDB transformation to corresponding geotype. ex: =>\n• JSON: Stringification of JSON, or if is enable, key escaped as identifier + value\n• String: escaped value, (\\u0000, ', \", \\b, \n\n, \\r, \\t, \\u001A, and \\ characters are escaped with '')\n\nEscape is done for sql_mode value without NO_BACKSLASH_ESCAPES that disable \\ escaping (default); Escaping API are meant to prevent SQL injection. However, privilege the use of and avoid building the command manually.\n\nThis function permit to escape a Identifier properly . See Identifier Names for escaping. Value will be enclosed by '`' character if content doesn't satisfy:\n\nRetrieves the version of the currently connected server. Throws an error when not connected to a server.\n\nImport sql file. If database is set, database will be use, then after file import, database will be reverted\n\nWhen the Connector encounters an error, Promise returns an object. In addition to the standard properties, this object has the following properties:\n• : A boolean value indicating whether the connection remains valid.\n\nErrors contain an error stack, query and parameter values (the length of which is limited to 1,024 characters, by default). To retrieve the initial stack trace (shown as in the example above), you must have the Connection option enabled.\n\nFor more information on error numbers and SQL state signification, see the MariaDB Error Code documentation.\n\nConnection object that inherits from the Node.js . Emits an error event when the connection closes unexpectedly.\n\nEach time a connection is asked, if the pool contains a connection that is not used, the pool will validate the connection, exchanging an empty MySQL packet with the server to ensure the connection state, then give the connection. The pool reuses connection intensively, so this validation is done only if a connection has not been used for a period (specified by the \"minDelayValidation\" option with the default value of 500ms).\n\nIf no connection is available, the request for a connection will be put in a queue until connection timeout. When a connection is available (new creation or released to the pool), it will be used to satisfy queued requests in FIFO order.\n\nWhen a connection is given back to the pool, any remaining transactions will be rolled back.\n\nCreates a new Connection object. Connection must be given back to pool with the connection.end() method.\n\nThis is a shortcut to get a connection from pool, execute a query and release connection.\n\nThis is a shortcut to get a connection from pool, execute a batch and release connection.\n\nThis is an alias for to escape parameters\n\nThis is an alias for to escape Identifier\n\nImport sql file. If database is set, database will be use, then after file import, database will be reverted\n\nCluster handle multiple pools according to patterns and handle failover / distributed load (round robin / random / ordered ).\n\nCreates a new Connection object. Connection must be given back to pool with the connection.end() method.\n\nPoolCluster object inherits from the Node.js . Emits 'remove' event when a node is removed from configuration if the option is defined (default to 5) and connector fails to connect more than times. (if other nodes are present, each attemps will wait for value of the option )\n\nCreates a new filtered pool cluster object that is a subset of cluster.\n• : Creates a new connection from pools that corresponds to pattern .\n• : this is a shortcut to get a connection from pools that corresponds to pattern, execute a query and release connection."
    },
    {
        "link": "https://downloads.mysql.com/docs/connector-nodejs-relnotes-en.pdf",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/31530431/node-mysql-callback-for-multiple-queries",
        "document": "I ran into an issue whilst attempting to create the logic to add rows to a new table I made on my MySql database. When adding a row I need to query the database 4 times to check other rows and to then add the correct value to the new row. I am using node.js and the mysql module to accomplish this. While coding I ran into a snag, the code does not wait for the 4 queries to finish before inserting the new row, this then gives the values being found a value of 0 every time. After some research I realize a callback function would be in order, looking something like this:\n\n\n\nNote: The select queries can only return one item so the if condition should not effect this issue.\n\n\n\n\n\nA callback function with only one query to wait on is clear to me, but I become a bit lost for multiple queries to wait on. The only idea that I had would be to create another variable that increments before the callback is called, and is then passed in the callback function's arguments. Then inside the callback the query could be encapsulated by an if statement with a condition of this being the variable equaling the number of queries that need to be called, 4 for my purposes here. I could see this working but wasn't sure if this sort of situation already has a built in solution or if there are other, better, solutions already developed."
    },
    {
        "link": "https://stackoverflow.com/questions/57901157/how-to-use-results-variable-callback-function-inside-query-mysql-in-another",
        "document": "I have a project, to store every message that pass through mosquitto (mqtt) installed in CentOS7 to mysql database. I use Nodejs to store message that pass through.\n\nAnd then I display that message in my website. I put \"add device\" function to add new table in database based on total data every device. (If i had device named \"device1\" that store temperature and humidity, it will create new table named \"device1\" and 3 column, id, humidity, and temperature.)\n\nI have a problem. I want to use \"results\" variable from callback function inside query mysql in javascript. I want to use that variable outside that function.\n\nHere is the code:\n\nBased on the example I gave above (device1). Console.log will print '3' (because of 3 columns).\n\nI want to use it (the results[0].hitung value) in another function like:\n\nBut it show error, that I can use that variable. Im new in website development, because i have interest in only networking. Sorry for my bad english, hope you understand my problem. Im new in this community. Thank you."
    },
    {
        "link": "https://evertpot.com/executing-a-mysql-query-in-nodejs",
        "document": "If you’re integrating your Node.js service with MySQL, you probably want to execute queries.\n\nI’ve seen a fair bit of ugly code to do this, often using callbacks. I thought I would share some of my own patterns here. Maybe this is useful to others to read.\n\nI don’t typically use ORM’s. If you’re already happy with sequalize, this article is probably not for you.\n\nThe most popular NPM package for MySQL is mysql, but I use the mysql2 package instead.\n\nThe package is also very popular, but has a few advantages. The advantage I care about is support for promises. The authors of this package have actually teamed up with the authors of the package to reduce double efforts, and was made to be compatible with so for many people it’s a drop-in replacement.\n\nNote: if you are migrating from the to package, you probably don’t want to require . You can instead require to get full backwards compatibility and use the functions to get access to promisified versions of the APIs.\n\nNote2: uses the charset by default. If you don’t know what this means trust that it’s the right choice. If you do know what this is, rejoice that somebody finally picked a sane default.\n\nGenerally I don’t need transactions for queries, because of this I can simply ask the pool to execute the query.\n\nlooks a bit weird, this is because the result of the query returns a tuple (array) with 2 items. The first item has the result of the query, and the second has the meta data. This subtle decision is my #1 complaint about the library because it makes a lot of things slightly uglier than they need to be.\n\nSo if we want just the first record of the result, you can access it with .\n\nWhenever I write a function that should return exactly 1 item, I will either return an item or throw an error. I don’t return or .\n\nA query that returns multiple records is more elegant:\n\nWhenever I write a function that returns 0 or more items, this function always returns an array with 0 or more items. If the collection is empty, I return an empty array.\n\nNote: sometimes there is a distinction between an empty collection or a collection not existing. If that distinction exists, I do throw an error in the latter case.\n\nGenerally when doing queries, most people use the following syntax:\n\nMySQL also has a second system for inserting that is less popular, and looks more like an statement:\n\nThe second syntax is the one I use. A big advantage is that the ‘value’ is close to the name of the field. If you ever had to count questionmarks, you know why this is nice.\n\nNaively you can execute this query as follows:\n\nBut there is a nicer way to do this:\n\nIf you are used to MySQL prepared statements, you might wonder why does this work?\n\nThe reason is that the placeholder gets special treatement when you pass objects or arrays to it.\n\nSpecifically, if you pass an array like this:\n\nAnd objects such as this:\n\nHere’s another neat example of this:\n\nThis actually works. If you are well versed with how MySQL works you might scream at this point: “This doesn’t use real prepared statements”, and you would be right.\n\nBoth the and package by default emulate prepared statements client-side. A lot of people feel that this is a really bad security practice.\n\nI disagree, and might write about that in another article at one point. Ask most security experts though and they’ll tell you this is bad.\n\nTo do a real prepared statements, you have to use the function:\n\nThis uses real MySQL prepared statements, but unfortunately doesn’t let you work with arrays and objects.\n\nEvery time you call or , you might get a new connection from the pool. Sometimes it’s a good idea to use the same connection if you do multiple queries.\n\nOne reason might be that you have multiple replicated MySQL servers and you want to ensure that you’re running the queries on the same machine with the same state.\n\nTo do this, you need to grab a connection from the pool, and release it once you’re done.\n\nThe ideal pattern for me looks like this:\n\nRemember that if you run multiple queries on a single connection they must be serialized. They must not be parallel.\n\nIf you run multiple queries that change the state of the database, it’s often a very good idea to have them all succeed or fail as a group.\n\nTransactions are used for that. After a transaction has started its possible to roll back every query since the start of the transaction.\n\nThe pattern I use for this is similar to the last, but a bit more complex:\n\nIf my transaction code becomes too complex and I need to split it up over multiple functions, I pass the object around as the argument.\n\nIf you’re finding you’re doing this kind of thing a lot, it’s also possible to generalize this pattern into a transaction function.\n\nTo use it:\n\nThis is not a ‘universal’ solution, as you might have other clean-up tasks, but for the simple transaction cases this is an easy way to reduce a lot of boilerplate.\n\nI wanted my examples to be accessible, but all my code is written in Typescript. Every MySQL table row has its own type and I’m as strict as I can.\n\nThis is a really good idea. If there’s interest, I can write another post with typescript and mysql2 examples.\n• You can reply to this tweet to automatically see your response here.\n• If you’re a dev, you can also send a pull request and edit in your comment in this article."
    },
    {
        "link": "https://dev.to/lisahjung/beginner-s-guide-to-using-mysql-database-in-a-node-js-app-49li",
        "document": "In my previous blogs, we have learned how to create Ruby on Rails and Node.js/Express servers from scratch. In these examples, we have created(C), read(R), updated(U) or deleted(D) data stored in files in our servers.\n\nWhile this method may have been enough to handle data for simple tutorial apps we have created, it is not an optimal way to manage data for apps in real life.\n\nImagine that you have created the next Amazon e-commerce platform. Millions of users will be accessing your app to sell and buy items at the same time.\n\nCan you imagine having to read through the entire data file every time someone wants to buy an item? It would take forever and we would end up with lots of frustrated customers!\n\nThis is where the database comes in! It is specifically designed to efficiently store and retrieve data.\n\nSQL(relational) and NoSQL(non-relational) are the two primary types of databases out there. This tutorial will focus on SQL database.\n\nIf you want to delve into the differences between SQL and NoSQL and their use cases, check out these resources. I have found them to be helpful!\n\nAs the name suggests, SQL database is written in SQL(Structured Query Language),a programming language used to design relational databases.\n\nSQL database is known for requiring a predefined data schema, which is a collection of database objects such as data tables. Before we can work with data tables, we must define what columns(fields) it has and what type of data(integer, text & etc) this table will hold.\n\nIn order to store the data, the data must meet all the predefined requirements. As you can see, the strict rules of SQL database keeps data consistent across applications or database copies you will be working with.\n\nSQL database is a relational database, a type of database that stores and provides access to data points that are related to one another(excerpt from Oracle).\n\nFor example, let's say we are managing a database for a project management app for a team. Project management involves three factors: team members, project tasks, and a manager.\n\nAs you can see all of these factors are related to each other. Team members could have have multiple projects. A project could have multiple team members. The team members report to the manager who keeps track of who is working on what project tasks.\n\nIn SQL databases, a table is created for each factor(model). Team members table contains information specific to team members(id,name, and title). The project tasks table contains info specific to the tasks(id, project name, project details, and deadlines). Only the manager table keeps track of which team member(team member id) is working on which project(project id) and serves as the single source of truth. All of these tables are related to one another.\n\nI created a table to help you visualize this concept!\n\nThere are many scenarios in which keeping track of the relationships could come in very handy.\n\nFor example, relational databases could be used to track inventories, process ecommerce transactions, manage huge amounts of mission-critical customer information, and much more. A relational database can be considered for any information need in which data points relate to each other and must be managed in a secure, rules-based, consistent way(excerpt from Oracle).\n\nWhat are we building?\n\nMySQL is one of the most popular SQL databases. This blog will explore how to use MySQL database with Node.js server.\n\nBy the end of this blog, you will be able to:\n• configure the server to create(C), retrieve(R), update(U), and delete(D) data in the database\n• send the appropriate server response to the client\n\nIn the spirit of football season, we will be creating a CRUD app to manage quarterback rankings data for fantasy football! \n\n\n\nBefore we get started...\n\nWe will be working with quarterback rankings data from FantasyData.\n\nClick on the link and have it pulled up on a separate tab. We will referring to this later!\n\nAfter installing and setting up MySQL database, we will be building a Node.js server with Express framework.\n\nWe will breeze through a lot of the steps as detailed explanations of these steps have already been covered in my previous blogs:\n\n-Beginner's guide to building a server with Express as Node.js framework\n\n -Beginner's guide to building a Node.js server\n\nFeel free to refer to these blogs if you need a deeper understanding of the steps covered in this tutorial.\n\nHere is the GitHub repo of the server we will be building. Use this repo as a resource if you encounter any errors while following along.\n\nWe will be installing the free version of MySQL Community Server and MySQL Workbench.\n\nInstallation steps for Windows and macOS are very similar and vary slightly. The major difference may be that in Windows, you can download the community server and workbench in one fell swoop. In macOS, you will have to download these separately.\n\nI will only go over Windows installation directions to keep this blog as short as possible. But don't worry. There are tons of installation videos on line for mac users if you have trouble with installation.\n\nGo to mysql.com. Click on Downloads option(green box).\n\nScroll down and click on MySQL Community(GPL) Downloads option(green box).\n\nReminder \n\n If you are installing on Windows, clicking on MySQL Community Server will give you an option to download both the community server and the workbench.\n\nmacOS users will have to download MySQL Community Server(orange box) and MySQL Workbench(green box) separately.\n\nStep 4: Select an operating system and go to Download Page(orange box)\n\nStep 5: Select the very first download option(green box)\n\nStep 6: Select No thanks, just start my download option(red box)\n\nStep 7: Click on the download and start the installation process\n\nOnce MySQL has downloaded, click on the downloaded file and go through the installation process. Agree to the terms of software license agreement.\n\nStep 8: Choose the Custom option at the bottom(green box) and click on Next\n\nStep 9: Add MySQL Server and MySQL Workbench to Products/Features to be Installed list\n\nLook at the region highlighted with a green box.\n\nExpand MySQL Servers option by clicking on the + sign to the left.\n\n Then, expand MySQL Server and MySQL Server 8.0.\n\nSelect the server at the top of the list. Click on the right facing arrow(green box) to add MySQL Server to Products/Features To Be Installed list.\n\nOnce you finish this step, you should see that MySQL Community Server has been added to the list(orange box).\n\nGo back to the region highlighted with a green box. Expand Applications, MySQL Workbench and MySQL Workbench 8.0.\n\nSelect the workbench at the top of the list and click on the right facing arrow. The workbench will be added to the Products/Features To Be Installed list(orange box).\n\nStep 11: Complete configuration\n\n At this time, a MySQL installer window should pop up to guide you through configuration.\n\nSelect the Standalone MySQL Server/Classic MySQL Replication option and click on Next.\n\nIt should take you to the Type and Networking step. Leave the default values and click Next.\n\nIn the Authentication Method step, select the Use Legacy Authentication Method option and click Next.\n\nIn the Accounts and Roles step, enter the password you would like to use to gain access to MySQL database, save it somewhere safe, and click Next.\n\nIn the Windows Service step, select the Configure MySQL Server as a Windows Service option and click Next.\n\nFor Logging Options and Advance Options, leave the default settings and click Next.\n\nIn the Apply Configurations step, click on Execute.\n\nOnce configurations are completed, it should automatically start MySQL server for you.\n\nNOTE:\n\n For Windows users, installation of MySQL Community Server and MySQL Workbench are now complete. For mac users, you will need to go back to the downloads page and install the workbench separately.\n\nWorkbench is a visual client for our database. It allows us to inspect and explore the database outside of our Node.js server. It is going to be your best friend while working with MySQL database because it is going to make debugging and developing a lot easier!\n\nStep 1: Open MySQL workbench and connect to the database\n\nYou should see an icon with a dolphin on your desktop. Double click to open.\n\nYou should see a local instance already running(red box).\n\nTo connect to the database, double click on local instance. It will prompt you to enter the password you have provided during the installation steps.\n\nYou will see the following display.\n\nClick on Schema option highlighted with a red box in the image above. You will see the following displayed on your screen.\n\nGo to the upper left side of the workbench. Under the search bar, right click to see the drop down menu. Select Create Schema option(red box).\n\nIt will prompt you to review the SQL script to be applied on the database. Click Apply(red box).\n\nWe have just created a fantasy football database we will use to create, retrieve, update, and delete quarterback ranking data!\n\nLet's create a data table for quarterback rankings and enter information about one quarterback.\n\nIn the navigator of your workbench, expand fantasy_football. You will see bunch of options presented to you. Right click on Tables(green box) and select Create Table option(red box).\n\nSection highlighted with a orange box is where we will be specifying the name of our data table. Section highlighted with a green box is where we will be specifying column names and its data types.\n\nWe will be working with quarterback ranking data from FantasyData. The snapshot of data is shared below but do pull it up on your browser so you can see the table clearly.\n\nLet's pay attention to the columns highlighted in blue.\n\nWe have the quarterback's id(#), name, position(pos), team, and opposing team(opp). The next four columns show the three experts and FantasyData's rankings of the quarterbacks.\n\nYou can see that each row displays corresponding data and each column has different data types. For example, the column name will contain data that consists of characters. Column id(#) will contain data that consists of integers.\n\nWe will model our data table after the FantasyData's quarterback rankings table.\n\nLet's get back to the MySQL Workbench.\n\nThe following image shows the final version of our data table.\n\nChange the Table Name to quarterback_rankings(orange box).\n\nLook at the region highlighted with a green box. This is where we will be filling out the column names and its data types.\n\nDouble click under column name. It should now allow you to type in ID in the box. Enter the column names for Name, Position, Team, OpposingTeam, JodySmith, EricMoody, JohnFerguson, and FantasyData as shown in the image(Note that column names are PascalCased. Do not put any space between the words and capitalize the first letter).\n\nTo the right of Column Name column, you will see the Datatype column. Under Datatype column, click on the space below. It will give you a drop down menu of data types you can choose from. Fill out the data type as specified below.\n\nColumns ID, JodySmith, EricMoody, JohnFerguson, and FantasyData contain numbered rankings for the quarterbacks. Specify the data type as INT(integer).\n\nColumns Name, Position, Team, and OpposingTeam contain characters and none of the values are greater than 20 characters. Choose VARCHAR(45) as their data type.\n\nOn a side note, the parenthesis next to VARCHAR allows you to specify the number of characters you are willing to allow. Change the number of characters if your use case requires longer characters. For long lines of texts, choose Text as the data type.\n\nIf you look to the right of DataType column, you will see column properties depicted in acronyms. Let's go over these.\n\nPK: primary key\n\n Primary key uniquely identifies each record in a table. It must contain unique values and cannot contain null values. A table can only have one primary key(excerpt from w3schools.com).\n\nNN: not null\n\n Values cannot be null.\n\nB: binary\n\n Values store any kind of binary data like images, word files, ext files and etc(excerpt from tutlane).\n\nZF: zero fill\n\n ZF pads the displayed value of the field with zeros up to the display width set in the column definition(excerpt from tutorialspoint).\n\nAI: auto_increment\n\n AI allows a unique number to be generated automatically when a new record is inserted into a table and increment by 1 for each record(excerpt from w3schools.com)\n\nG: Generated Column\n\n G stores data without actually sending it through the INSERT or UPDATE clauses in SQL(excerpt from gabi.dev).\n\nID is used as a unique identifier of each quarterback(PK). ID must be a unique(UQ) value and cannot be null(NN). ID cannot be a negative value(US). It must be generated automatically when a new record is inserted into a table and increment by 1 for each record(AI).\n\nSo the column properties selected for ID column are PK, NN, UQ, UN, and AI.\n\nFor the rest of the columns, only select NN as none of these could be null values.\n\nA pop up window show up and it will prompt you to review the SQL script to be applied on the database. Click on Apply(orange box).\n\nAnother window should pop up. Leave the default setting and click Finish.\n\nYou should now see the quarterback_rankings table in the navigator on the left(highlighted in light blue). When you hover over the quarterback_rankings table, you should see three icons show up.\n\nClick on the rightmost icon highlighted with a red arrow. The workbench should display the following.\n\nLook at the section highlighted with a orange box. It has the same columns as the data table in FantasyData. Woot woot!\n\nLet's fill out information about Patrick Mahomes! To fill out the data, just double click under each column and type in Patrick Mahomes' data from FantasyData table as shown below.\n\nYou will see a pop up window nudging you to review the SQL script to be applied on the database. Click on Apply.\n\nAnother window should pop up. Leave the default setting and click Finish.\n\nAll right, our MySQL database is good to go.\n\nLet's create a Node.js server that will interact with our new database.\n\nIn the appropriate directory, type in the following in your terminal.\n\n\n\nGet into Fantasy_Football directory and open it up in your text editor.\n\n\n\npackage.json file keeps track of all of the packages and applications it depends on, information about its unique source control, and specific metadata such as the project's name, description and author(excerpt from nodesource.com).\n\nA series of questions regarding the details of your app will be presented to you as you press enter after each question.\n\nYou can fill out this info if you choose to but for the purpose of this tutorial, we can skip this part. Press enter multiple times until the terminal exits out of the questionnaire.\n\nAt this time, you should see that package.json file has been created for you.\n\nInstall mysql, express, and body-parser as production dependencies. Run the following command in your terminal.\n\n\n\nInstall nodemon as a development dependency by running the following command in your terminal.\n\n\n\nYou will see that body-parser, express, and mysql have been installed as production dependencies(green box) and that nodemon has been installed as development dependency(yellow box).\n\nNext, let's instruct our app to use nodemon to restart our app every time there is a change in our code.\n\nIn the section highlighted with a red box, add a comma at the end of line 7. On line 8, add a start script, \"start\":\"nodemon server.js\" as shown in the image above.\n\nIn the explorer, you should also see that a package-lock.json file has been created for you(blue box).\n\nYour directory should look like the following.\n\nYour directory should look like the following.\n\nqb is short for quarterback. We will write SQL queries here to store quarterback rankings data in our database.\n\nCopy and paste the following code into qb.js.\n\n\n\nDon't worry about the code just yet. We will go over these line by line in later!\n\nIn your terminal, execute the following command.\n\n\n\nYou will see that server.js has been created within your directory.\n\nIn server.js, copy and paste the following code.\n\n\n\nLet's go over this line by line. To explain the code in a logical manner, I may skip around a little bit so be sure to pay attention to the line numbers.\n\nLines 1-3\n\n During set up, we have installed three packages(mysql, express, and bodyParser). We need to import these packages into server.js to gain access to all the awesome functionalities that come with these packages.\n\nLine 6\n\n Among these functionalities, express() is used to create an Express app. Set express() equal to a constant app.\n\nLine 8\n\n When an HTTP request is sent to the server, the data is contained within the body of the request. Before we can work with the data, we need to first parse the data using bodyParser.\n\nLine 8 allows you to use bodyParser in your server.\n\nLine 10\n\n Whenever you see app.use() in an Express app, know that you are looking at a middleware function.\n\nIn my previous blog on Express, we did a deep dive on middleware. If you are having trouble understanding this concept throughout the tutorial, refer to the blog to get a deeper understanding of the code we will be writing.\n\nIn short, middleware function is designed to recognize a specific type of HTTP request(GET, POST, PUT, DELETE) and the url of the request. When a middleware function recognizes its matching request, its function is triggered and it sends an appropriate response to the browser.\n\nWriting out the details of middleware functions in the server could make our server.js really lengthy and hard to read.\n\nDuring setup, we have created a folder called routes and created a qb.js file within it.\n\nTo compartmentalize our code, we will be writing out the details of middleware functions in qb.js and passing it as an argument in app.use() on line 10.\n\nLine 4\n\n In order to pass middleware functions written out in qb.js in line 10, we need to import the qb.js file(line 4).\n\nLocate the utils folder and open the database.js file in utils folder. This is where we will connect our database to our server.\n\nCopy and paste the following code into database.js\n\n\n\nLet's go over these line by line!\n\nLine 1\n\n During set up, we have installed mysql in our server. Import it into database.js. This will allow us to gain access to all of the methods that will help us connect our Node.js server to our fantasy_football database.\n\nLines 3-9\n\n First, we need to create a connection between MySQL database and the server. We can do that calling on createConnection() method. Within this method, we need to provide information about the database we are trying connect with our Node.js server. We set this equal to a constant mysqlConnection.\n\nLine 4\n\n The database hostname will be localhost as we are running on our local machine.\n\nLine 5\n\n We will define the username as 'root' as it was given to us during the configuration process.\n\nLine 6 \n\n For the database name, we will type in fantasy_football as that's what we named our database.\n\nLine 7 \n\n For the password, enter the password you used to create the database.\n\nLine 8\n\n For multipleStatements, add the value to be true as we will be executing multiple statement queries in qb.js.\n\nLines 11-19\n\n Now that we have created a connection, we are going to connect the database to the server by using the connect() method. This method accepts a callback function that has error as an argument. This error will come up if the server fails to connect to the database.\n\nTo create a convenient way to check on the database connection, we write an error handler. The lines 12-18 are saying that if there is no error, then print \"Connected\" in our server console. If there is an error, then print \"Connection Failed\".\n\nLine 21\n\n We export mysqlConnection as we will be using this in our qb.js file!\n\nLet's check if our database is connected to our Node.js server.\n\nIn your terminal, run the following command.\n\n\n\nThe server should be connected to the database and you should see the following message on your console.\n\nLocate the routes folder and open up qb.js file.\n\nqb.js is where we will be writing out the details of middleware functions. As mentioned earlier, an HTTP request(GET, POST, PUT, DELETE) is funneled through middleware functions until it finds the function designed to handle the request.\n\nWhen a middleware function recognizes its matching request, it sends a query to the MySQL database to either create, retrieve, update, or delete data. Once this action is completed, the server will send an appropriate response to the browser.\n\nReplace the existing code in qb.js with the following.\n\n\n\nLet's go over these line by line!\n\nLine 1\n\n We import Express to gain access to its Router() method.\n\nLine 2\n\n We import mysqlConnection as we will need this to send queries to the database.\n\nLine 4\n\n We invoke the Router() method here to create router-level middleware functions that handle different HTTP requests.\n\nLine 6-14\n\n This is how you would write a router-level middleware function that handles GET request from a browser.\n\nThe syntax of middleware functions and the concept of router-level middleware function have already been covered in my previous blog on Express. So we will just skip right over to the SQL query performed on the database.\n\nLine 7\n\n We send the query to the database by invoking the query method on mysqlConnection. Inside of the parenthesis, we write a SQL query(\"SELECT * FROM quarterback_rankings\") and a call back function that contains an eventual error, results, and fields.\n\nSQL query allows us to communicate with the database. From our Node.js server, we can instruct the database to create, retrieve, update, or delete data.\n\nSELECT allows us to choose specific piece of information we want to pull from our database. Adding * after SELECT tells the database that we want all the information FROM quarterback_rankings table we created earlier.\n\nRight now, we only have one row of information about Patrick Mahomes. So we should get a row of info for Patrick Mahomes.\n\nAfter the SQL query, we write a call back function that contains an eventual error, results, and fields.\n\nLines 9-12 are saying that if no error is encountered while running queries in SQL database, then send results as a response. If there is an error, then print the error in the console.\n\nAll right! Let's test this out.\n\nEarlier you have downloaded Postman. We will be using it to test whether the query sent from our server is being accurately handled by MySQL database.\n\nI have covered the general layout of Postman and how to use it in my previous blogs so we will breeze through this part.\n\nIf you need further explanations, check out my previous blogs:\n\nSelect the HTTP method to GET(red box). Enter the url localhost:4000 in the url bar(orange box) and press send(blue button).\n\nTake a look at the body region highlighted with a green box. You will see that info regarding Patrick Mahomes has been retrieved for you. Woot woot!\n\nStep 9: Configure qb.js to handle POST request\n\n Our server and database should be able to handle POST and PUT requests.\n\nTo create or update a record in our table, we need to send the values for all the columns in our data table(id, name, position, team & etc). As you can imagine, the SQL queries for these requests could get quite lengthy!\n\nInstead of writing this out for both POST and PUT requests in our qb.js file, we will write it out once in MySQL Server and save it as a stored procedure. Then, we will call the stored procedure in qb.js to execute it.\n\nGo to MySQL Workbench. In your navigator, locate fantasy_football database. Expand it to locate Stored Procedures option(green box).\n\nRight click on Store Procedures to display a drop down menu. Select Create Stored procedure(orange box).\n\nIn the region highlighted with a blue box, we will write out the procedure.\n\nThe code enclosed within a blue box is the basic syntax of create procedure statement. In line 1, you can replace _new_procedure with the name of your stored procedure. When you specify the name, it should automatically display the name in the region highlighted with a yellow box.\n\n( ) is a space for you to specify a list of comma-separated parameters for the stored procedure.\n\nBetween the Begin and End block, you can write the code that instructs the database to either create or update a record in quarterback_rankings data table.\n\nCopy and paste the following into the region highlighted with a blue box.\n\n\n\nClick on Apply. You will see a pop up window nudging you to review the SQL script to be applied on the database. Click on Apply.\n\nAnother window should pop up. Leave the default setting and click onFinish.\n\nLet's go over these line by line!\n\nLine 1\n\n This line allows you to create a procedure. We have specified the name of the procedure to be Add_or_Update_QB.\n\nLines 2-10\n\n In MySQL, there are three modes of parameters: IN, OUT, or INOUT.\n\nIN is the default mode and when you define an IN parameter in a stored procedure, the calling program(i.e. our server) has to pass an argument to the stored procedure(excerpt from mysqltutorial.org).\n\nI am sure this sounds very abstract at the moment. Let's look at the big picture and see where these IN parameters come in to play.\n\nWhen the server receives a POST request from the browser, it receives the values for all the columns in our data table(id, name, position, team & etc) in the body of the request. The server parses the data and sends these parameters to the database in a query. These parameters are the IN parameters you are looking at now!\n\nFirst, you need to specify the parameter mode IN. Then, specify the name of the parameter. These must be identical to the column names in the data table you are making changes to(i.e. quarterback_rankings).\n\nThen, you must specify its data type. If the data type is varchar, you must specify the maximum length of the parameter.\n\nLines 12-32\n\n \n\n Between the Begin and End block, you can write conditional statements on how you would like the database to create or update a record in our data table.\n\nWe will be writing a IF-THEN-ELSE statement and its syntax looks like the following.\n\n\n\nIf condition is true, then we execute the statement in between IF -THEN and ELSE. If condition is not true, then the else-statement between ELSE and END IF will execute.\n\nLines 13-17\n\n When our server receives the POST request, it will send the parameters(_ID, _Name, _Position, _Team, _OpposingTeam, _JodySmith, _EricMoody, _JohnFerguson, _FantasyData).\n\nThese lines are saying that if the _ID in the query is 0, then INSERT the parameters(_ID, _Name, _Position, _Team, _OpposingTeam, _JodySmith, _EricMoody, _JohnFerguson, _FantasyData) as values for columns(Name, Position, Team, OpposingTeam, JodySmith, EricMoody, JohnFerguson, FantasyData) in the quarterback_rankings table.\n\nThis essentially creates a new record in the table.\n\nThen, set the _ID of the new record as auto_increment id of the last row that has been inserted or updated in a table(line 17).\n\nLines 18-30\n\n If _ID parameter in the query is not 0(line 18), then find the row whose ID matches the _ID of the parameter(line 29). Then, update that row(line 19) by setting the values of the specified columns with the corresponding parameters in the query(lines 21-28).\n\nLine 31\n\n Retrieve everything from quarterback-rankings table and send it to the server.\n\nTime to return to qb.js in our server!\n\nLine 21-22\n\n We invoke our stored procedure Add_or_Update_QB by using the CALL statement(red box). Remember the IN parameters we have written in our stored procedure? Our server has to pass these parameters to the stored procedure by including them in the parenthesis.\n\nIn line 21, we create a constant called sql. In line 22, we create variables for all of the parameters we are passing through Add_or_Update_QB and setting it equal to ?. The ?s, AKA the values of these variables will be dynamically retrieved from the body of the POST request.\n\nThen, we invoke Add_or_Update_QB stored procedure and pass these variables as parameters(red box).\n\nLines 23-35\n\n We create a SQL query(line 23) that we will send to the database. In the query, we pass the variable sql. Remember how we set the variables in line 22 to question marks?\n\nIn line 20, we grab the body of the request that contains all of these values and set it equal to qb.\n\nIn lines 26-34, we grab these values and replace the ? of corresponding variables.\n\nLines 36-43\n\n These lines of code are very similar to the call back function of our GET request. This functions contains eventual error, results, and fields.\n\nWe are saying that if no error is encountered while running queries in SQL database, then send the array element that contains all the info retrieved from the database and send it to the browser. If there is an error, then print the error in the console.\n\nA little background information on lines 38-39. The results that come back from the database is an array that contains a mix of objects and an array that contains info about the record we have created. So we are simply iterating through the elements of the results array(results.forEach((element)). If we come across an element that is an array(if (element.constructor === Array) res.send(element)), then we are sending that element as a response.\n\nAll right! Let's test to see if this works.\n\nUnder the url bar, click on Body tab(grey box). It should present multiple options below.\n\nSelect raw(orange box). If you look to the right you will see the Text option. Click on it to access the drop down menu and select JSON(yellow box).\n\nIn the region below raw and JSON tabs(purple box), copy and paste the following.\n\n\n\nThis is the JavaScript object that contains all the parameters necessary to create a record in our quarterback_rankings table in MySQL database. Notice that the ID set to 0.\n\nLet's see how everything comes together.\n\nWhen the browser sends this POST request, our server receives the the sent info in the body of the request.\n\nThe server parses the data and sends these parameters to the database in a query. The query invokes the stored procedure which takes in these parameters(IN parameters).\n\nOur stored procedure recognizes that ID parameter is 0 and inserts the values of these parameters to the appropriate columns in our quarterback_rankings table.\n\nAll coming together now, right?\n\nIf you look at the response, you will see that a new record of Lamar Jackson has been created(blue box).\n\nDon't mind the \"ID\" of 10 you see on my image. I have been playing around with this database for a while and have created and deleted multiple records. If you are doing this for the first time around, Lamar Jackson should have an ID of 2.\n\nMake sure the quarterback_rankings table is pulled up on your screen. Click on the lightning bolt to refresh the table(red box).\n\nYou will see that a new record for Lamar Jackson has been created(blue box)!\n\nStep 10: Configure qb.js to handle PUT request\n\n The code to update a record of the database is almost identical to the POST request.\n\nTwo differences are highlighted with red boxes.\n\nOn line 48, we specify the HTTP method to be PUT. One line 67, we send a message that the record has been successfully updated.\n\nLet's test this out with Postman!\n\nIn the body of the request, specify the id of the record you would like to change. In my case, I know I have a record with an id of 10(orange box).\n\nChange the OpposingTeam to \"vs. HOU\"(yellow box).\n\nWhen you look at the response from the server, you will see the message that \"The data for the selected quarterback has been successfully updated.\"\n\nClick on the lightning boly to refresh the table(orange box).\n\nYou will see that the opposing team of the record you have specified has been updated to \"vs. HOU\"(red box)!\n\nStep 11: Configure qb.js to handle DELETE request\n\n The code for DELETE request is very similar to the GET request we wrote earlier.\n\nThe differences are highlighted in colorful boxes.\n\nThe URL of the request includes the id of the record we would like to delete(blue box).\n\nLine 77-78\n\n SQL query instructs the database to delete the record whose ID matches the id parameter in the request.\n\nLines 80-81\n\n If there is no error, server sends the message \"The selected quarterback has been successfully deleted\" as a response.\n\nLine 89\n\n Export Router so that these router-level middleware functions could be accessed by server.js in line 10.\n\nIn Postman, change the HTTP method to DELETE(red box). In the url bar, at the end of localhost:4000, add the /id of the record you would like to delete(orange box - localhost:4000/10).\n\nYou will see that the server sent the message \"The selected quarterback has been successfully deleted.\" as a response.\n\nCheck your MySQL database and click on the lightning bolt. You will see that the record with the id you have specified has been deleted from your data table.\n\nThere you have it! You now know how to:\n• configure the server to create, retrieve, update, and delete data in the database\n• send the appropriate server response to the browser\n\nYou are a rock star. Now step away from your computer and enjoy your day!"
    },
    {
        "link": "https://github.com/Asana/node-mysql",
        "document": "Despite the alpha tag, this is the recommended version for new applications. For information about the previous 0.9.x releases, visit the v0.9 branch.\n\nSometimes I may also ask you to install the latest version from Github to check if a bugfix is working. In this case, please do:\n\nThis is a node.js driver for mysql. It is written in JavaScript, does not require compiling, and is 100% MIT licensed.\n\nHere is an example on how to use it:\n\nFrom this example, you can learn the following:\n• Every method you invoke on a connection is queued and executed in sequence.\n• Closing the connection is done using which makes sure all remaining queries are executed before sending a quit packet to the mysql server.\n\nThanks goes to the people who have contributed code to this module, see the GitHub Contributors page.\n\nAdditionally I'd like to thank the following people:\n• Andrey Hristov (Oracle) - for helping me with protocol questions.\n• Ulf Wendel (Oracle) - for helping me with protocol questions.\n\nThe following companies have supported this project financially, allowing me to spend more time on it (ordered by time of contribution):\n• Transloadit (my startup, we do file uploading & video encoding as a service, check it out)\n\nIf you are interested in sponsoring a day or more of my time, please get in touch.\n\nIf you'd like to discuss this module, or ask questions about it, please use one of the following:\n• IRC Channel: #node.js (on freenode.net, I pay attention to any message including the term )\n\nThe recommended way to establish a connection is this:\n\nHowever, a connection can also be implicitly established by invoking a query:\n\nDepending on how you like to handle your errors, either method may be appropriate. Any type of connection error (handshake or network) is considered a fatal error, see the Error Handling section for more information.\n\nWhen establishing a connection, you can set the following options:\n• : The hostname of the database you are connecting to. (Default: )\n• : The port number to connect to. (Default: )\n• : The path to a unix domain socket to connect to. When used and are ignored.\n• : The MySQL user to authenticate as.\n• : The password of that MySQL user.\n• : Name of the database to use for this connection (Optional).\n• : The charset for the connection. (Default: )\n• : The timezone used to store local dates. (Default: )\n• : Stringify objects instead of converting to values. See issue #501. (Default: )\n• : Allow connecting to MySQL instances that ask for the old (insecure) authentication method. (Default: )\n• : Determines if column values should be converted to native JavaScript types. (Default: )\n• : When dealing with big numbers (BIGINT and DECIMAL columns) in the database, you should enable this option (Default: ).\n• : Enabling both and forces big numbers (BIGINT and DECIMAL columns) to be always returned as JavaScript String objects (Default: ). Enabling but leaving disabled will return big numbers as String objects only when they cannot be accurately represented with [JavaScript Number objects] (http://ecma262-5.com/ELS5_HTML.htm#Section_8.5) (which happens when they exceed the [-2^53, +2^53] range), otherwise they will be returned as Number objects. This option is ignored if is disabled.\n• : Allow multiple mysql statements per query. Be careful with this, it exposes you to SQL injection attacks. (Default: )\n• : List of connection flags to use other than the default ones. It is also possible to blacklist default ones. For more information, check Connection Flags.\n\nIn addition to passing these options as an object, you can also use a url string. For example:\n\nNote: The query values are first attempted to be parsed as JSON, and if that fails assumed to be plaintext strings.\n\nThere are two ways to end a connection. Terminating a connection gracefully is done by calling the method:\n\nThis will make sure all previously enqueued queries are still before sending a packet to the MySQL server. If a fatal error occurs before the packet can be sent, an argument will be provided to the callback, but the connection will be terminated regardless of that.\n\nAn alternative way to end the connection is to call the method. This will cause an immediate termination of the underlying socket. Additionally guarantees that no more events or callbacks will be triggered for the connection.\n\nUnlike the method does not take a callback argument.\n\nConnections can be pooled to ease sharing a single connection, or managing multiple connections.\n\nIf you need to set session variables on the connection before it gets used, you can listen to the event.\n\nWhen you are done with a connection, just call and the connection will return to the pool, ready to be used again by someone else.\n\nIf you would like to close the connection and remove it from the pool, use instead. The pool will create a new connection the next time one is needed.\n\nConnections are lazily created by the pool. If you configure the pool to allow up to 100 connections, but only ever use 5 simultaneously, only 5 connections will be made. Connections are also cycled round-robin style, with connections being taken from the top of the pool and returning to the bottom.\n\nPools accept all the same options as a connection. When creating a new connection, the options are simply passed to the connection constructor. In addition to those options pools accept a few extras:\n• : The function to use to create the connection. (Default: )\n• : Determines the pool's action when no connections are available and the limit has been reached. If , the pool will queue the connection request and call it when one becomes available. If , the pool will immediately call back with an error. (Default: )\n• : The maximum number of connections to create at once. (Default: )\n• : The maximum number of connection requests the pool will queue before returning an error from . If set to , there is no limit to the number of queued connection requests. (Default: )\n\nMySQL offers a changeUser command that allows you to alter the current user and other aspects of the connection without shutting down the underlying socket:\n\nThe available options for this feature are:\n• : The name of the new user (defaults to the previous one).\n• : The password of the new user (defaults to the previous one).\n• : The new charset (defaults to the previous one).\n• : The new database (defaults to the previous one).\n\nA sometimes useful side effect of this functionality is that this function also resets any connection state (variables, transactions, etc.).\n\nErrors encountered during this operation are treated as fatal connection errors by this module.\n\nYou may lose the connection to a MySQL server due to network problems, the server timing you out, or the server crashing. All of these events are considered fatal errors, and will have the . See the Error Handling section for more information.\n\nThe best way to handle such unexpected disconnects is shown below:\n\nAs you can see in the example above, re-connecting a connection is done by establishing a new connection. Once terminated, an existing connection object cannot be re-connected by design.\n\nWith Pool, disconnected connections will be removed from the pool freeing up space for a new connection to be created on the next getConnection call.\n\nIn order to avoid SQL Injection attacks, you should always escape any user provided data before using it inside a SQL query. You can do so using the method:\n\nAlternatively, you can use characters as placeholders for values you would like to have escaped like this:\n\nThis looks similar to prepared statements in MySQL, however it really just uses the same method internally.\n\nDifferent value types are escaped differently, here is how:\n• Arrays are turned into list, e.g. turns into\n• Nested arrays are turned into grouped lists (for bulk inserts), e.g. turns into\n• Objects are turned into pairs. Nested objects are cast to strings.\n• / are left as-is. MySQL does not support these, and trying to insert them as values will trigger MySQL errors until they implement support.\n\nIf you paid attention, you may have noticed that this escaping allows you to do neat things like this:\n\nIf you feel the need to escape queries by yourself, you can also use the escaping function directly:\n\nIf you can't trust an SQL identifier (database / table / column name) because it is provided by a user, you should escape it with like this:\n\nIt also supports adding qualified identifiers. It will escape both parts.\n\nAlternatively, you can use characters as placeholders for identifiers you would like to have escaped like this:\n\nPlease note that this last character sequence is experimental and syntax might change\n\nWhen you pass an Object to or , is used to avoid SQL injection in object keys.\n\nIf you prefer to have another type of query escape format, there's a connection configuration option you can use to define a custom format function. You can access the connection object if you want to use the built-in or any other connection function.\n\nHere's an example of how to implement another format:\n\nIf you are inserting a row into a table with an auto increment primary key, you can retrieve the insert id like this:\n\nWhen dealing with big numbers (above JavaScript Number precision limit), you should consider enabling option to be able to read the insert id as a string, otherwise it will throw.\n\nThis option is also required when fetching big numbers from the database, otherwise you will get values rounded to hundreds or thousands due to the precision limit.\n\nThe MySQL protocol is sequential, this means that you need multiple connections to execute queries in parallel. You can use a Pool to manage connections, one simple approach is to create one connection per incoming http request.\n\nSometimes you may want to select large quantities of rows and process each of them as they are received. This can be done like this:\n\nPlease note a few things about the example above:\n• Usually you will want to receive a certain amount of rows before starting to throttle the connection using . This number will depend on the amount and size of your rows.\n• / operate on the underlying socket and parser. You are guaranteed that no more events will fire after calling .\n• You MUST NOT provide a callback to the method when streaming rows.\n• The event will fire for both rows as well as OK packets confirming the success of a INSERT/UPDATE query.\n\nAdditionally you may be interested to know that it is currently not possible to stream individual row columns, they will always be buffered up entirely. If you have a good use case for streaming large fields to and from MySQL, I'd love to get your thoughts and contributions on this.\n\nThe query object provides a convenience method that wraps query events into a Readable Streams2 object. This stream can easily be piped downstream and provides automatic pause/resume, based on downstream congestion and the optional . The parameter of the stream is set to by default.\n\nFor example, piping query results into another stream (with a max buffer of 5 objects) is simply:\n\nSupport for multiple statements is disabled for security reasons (it allows for SQL injection attacks if values are not properly escaped). To use this feature you have to enable it for your connection:\n\nOnce enabled, you can execute multiple statement queries like any other query:\n\nAdditionally you can also stream the results of multiple statement queries:\n\nIf one of the statements in your query causes an error, the resulting Error object contains a property which tells you which statement caused it. MySQL will also stop executing any remaining statements when an error occurs.\n\nPlease note that the interface for streaming multiple statement queries is experimental and I am looking forward to feedback on it.\n\nYou can call stored procedures from your queries as with any other mysql driver. If the stored procedure produces several result sets, they are exposed to you the same way as the results for multiple statement queries.\n\nWhen executing joins, you are likely to get result sets with overlapping column names.\n\nBy default, node-mysql will overwrite colliding column names in the order the columns are received from MySQL, causing some of the received values to be unavailable.\n\nHowever, you can also specify that you want your columns to be nested below the table name like this:\n\nOr use a string separator to have your results merged.\n\nThis module comes with a consistent approach to error handling that you should review carefully in order to write solid applications.\n\nAll errors created by this module are instances of the JavaScript Error object. Additionally they come with two properties:\n• : Either a MySQL server error (e.g. ), a node.js error (e.g. ) or an internal error (e.g. ).\n• : Boolean, indicating if this error is terminal to the connection object.\n\nFatal errors are propagated to all pending callbacks. In the example below, a fatal error is triggered by trying to connect to an invalid port. Therefore the error object is propagated to both pending callbacks:\n\nNormal errors however are only delegated to the callback they belong to. So in the example below, only the first callback receives an error, the second query works as expected:\n\nLast but not least: If a fatal errors occurs and there are no pending callbacks, or a normal error occurs which has no callback belonging to it, the error is emitted as an event on the connection object. This is demonstrated in the example below:\n\nNote: are special in node. If they occur without an attached listener, a stack trace is printed and your process is killed.\n\ntl;dr: This module does not want you to deal with silent failures. You should always provide callbacks to your method calls. If you want to ignore this advice and suppress unhandled errors, you can do this:\n\nThis module is exception safe. That means you can continue to use it, even if one of your callback functions throws an error which you're catching using 'uncaughtException' or a domain.\n\nFor your convenience, this driver will cast mysql types into native JavaScript types by default. The following mappings exist:\n• BIT (last byte will be filled with 0 bits as necessary)\n• TIME (could be mapped to Date, but what date would be set?)\n• GEOMETRY (never used those, get in touch if you do)\n\nIt is not recommended (and may go away / change in the future) to disable type casting, but you can currently do so on either the connection:\n\nOr on the query level:\n\nYou can also pass a function and handle type casting yourself. You're given some column information like database, table and name and also type and length. If you just want to apply a custom type casting to a specific type you can do it and then fallback to the default. Here's an example of converting to boolean:\n\nIf you need a buffer there's also a function and also a one both used by the default type cast that you can use.\n\nIf, for any reason, you would like to change the default connection flags, you can use the connection option . Pass a string with a comma separated list of items to add to the default flags. If you don't want a default flag to be used prepend the flag with a minus sign. To add a flag that is not in the default list, don't prepend it with a plus sign, just write the flag name (case insensitive).\n\nPlease note that some available flags that are not default are still not supported (e.g.: SSL, Compression). Use at your own risk.\n\nThe next example blacklists FOUND_ROWS flag from default connection flags.\n• MULTI_STATEMENTS (used if option is activated)\n\nIf you are running into problems, one thing that may help is enabling the mode for the connection:\n\nThis will print all incoming and outgoing packets on stdout. You can also restrict debugging to packet types by passing an array of types to debug:\n\nto restrict debugging to the query and data packets.\n\nIf that does not help, feel free to open a GitHub issue. A good GitHub issue will have:\n• The minimal amount of code required to reproduce the problem (if possible)\n• As much debugging output and information about your environment (mysql version, node version, os, etc.) as you can gather.\n\nSet the environment variables , , , and . (You may want to put these in a file and source it when you run the tests). Then run .\n\nFor example, if you have an installation of mysql running on localhost:3306 and no password set for the user, run:\n• Support for encodings other than UTF-8 / ASCII"
    }
]