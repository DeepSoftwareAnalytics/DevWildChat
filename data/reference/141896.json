[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nThe method of the interface repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. This method returns an interval ID which uniquely identifies the interval, so you can remove it later by calling .\n\nA to be executed every milliseconds. The first execution happens after milliseconds. An optional syntax allows you to include a string instead of a function, which is compiled and executed every milliseconds. This syntax is not recommended for the same reasons that make using a security risk. The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. Defaults to 0 if not specified. See Delay restrictions below for details on the permitted range of values. Additional arguments which are passed through to the function specified by func once the timer expires.\n\nThe returned is a numeric, non-zero value which identifies the timer created by the call to ; this value can be passed to to cancel the interval. It may be helpful to be aware that and share the same pool of IDs, and that and can technically be used interchangeably. For clarity, however, you should try to always match them to avoid confusion when maintaining your code. Note: The argument is converted to a signed 32-bit integer. This effectively limits to 2147483647 ms, roughly 24.8 days, since it's specified as a signed integer in the IDL.\n\nCode executed by runs in a separate execution context than the function from which it was called. As a consequence, the keyword for the called function is set to the (or ) object, it is not the same as the value for the function that called . See the following example (which uses instead of – the problem, in fact, is the same for both timers): myArray = [\"zero\", \"one\", \"two\"]; myArray.myMethod = function (sProperty) { alert(arguments.length > 0 ? this[sProperty] : this); }; myArray.myMethod(); // prints \"zero,one,two\" myArray.myMethod(1); // prints \"one\" setTimeout(myArray.myMethod, 1000); // prints \"[object Window]\" after 1 second setTimeout(myArray.myMethod, 1500, \"1\"); // prints \"undefined\" after 1.5 seconds // Passing the 'this' object with .call won't work // because this will change the value of this inside setTimeout itself // while we want to change the value of this inside myArray.myMethod. // In fact, it will be an error because setTimeout code expects this to be the window object: setTimeout.call(myArray, myArray.myMethod, 2000); // error: \"NS_ERROR_XPC_BAD_OP_ON_WN_PROTO: Illegal operation on WrappedNative prototype object\" setTimeout.call(myArray, myArray.myMethod, 2500, 2); // same error As you can see there are no ways to pass the object to the callback function in the legacy JavaScript.\n\nAll modern JavaScript runtimes (in browsers and elsewhere) support arrow functions, with lexical — allowing us to write if we're inside the method. If you need to support IE, use the method, which lets you specify the value that should be used as for all calls to a given function. That lets you easily bypass problems where it's unclear what will be, depending on the context from which your function was called.\n\nThe function is commonly used to set a delay for functions that are executed again and again, such as animations. You can cancel the interval using . If you wish to have your function called once after the specified delay, use .\n\nIt's possible for intervals to be nested; that is, the callback for can in turn call to start another interval running, even though the first one is still going. To mitigate the potential impact this can have on performance, once intervals are nested beyond five levels deep, the browser will automatically enforce a 4 ms minimum value for the interval. Attempts to specify a value less than 4 ms in deeply-nested calls to will be pinned to 4 ms. Browsers may enforce even more stringent minimum values for the interval under some circumstances, although these should not be common. Note also that the actual amount of time that elapses between calls to the callback may be longer than the given ; see Reasons for delays longer than specified for examples.\n\nEnsure that execution duration is shorter than interval frequency If there is a possibility that your logic could take longer to execute than the interval time, it is recommended that you recursively call a named function using . For example, if using to poll a remote server every 5 seconds, network latency, an unresponsive server, and a host of other issues could prevent the request from completing in its allotted time. As such, you may find yourself with queued up XHR requests that won't necessarily return in order. In these cases, a recursive pattern is preferred: In the above snippet, a named function is declared and is immediately executed. is recursively called inside after the logic has completed executing. While this pattern does not guarantee execution on a fixed interval, it does guarantee that the previous interval has completed before recursing."
    },
    {
        "link": "https://w3schools.com/jsref/met_win_setinterval.asp",
        "document": "Display \"Hello\" every second (1000 milliseconds):\n\nThe method calls a function at specified intervals (in milliseconds).\n\nThe method continues calling the function until is called, or the window is closed.\n\nTo execute the function only once, use the method instead.\n\nTo clear an interval, use the id returned from setInterval():\n\nThen you can to stop the execution by calling clearInterval():"
    },
    {
        "link": "https://stackoverflow.com/questions/2604450/how-to-create-a-jquery-clock-timer",
        "document": "I have a simple quiz application and I want display a nice timer / clock at the top of the page which shows the user how long they've been going for. (If I could somehow show them a timer for Total Quiz Time and also a second one for This Question Time that would be even cooler but I should be able to figure out how to do myself that once I've got one timer working.\n\nWhat's a nice, easy way to show a simple timer / clock using JQuery? (straight JS is also ok) I know how to check time, but how do I get incrementing seconds?\n\nMy own searches keep leading me to JQuery plugins (I want to roll my own) and also \"event timers\" which are not what I'm looking for..."
    },
    {
        "link": "https://w3schools.com/js/js_timing.asp",
        "document": "The object allows execution of code at specified time intervals.\n\nThe two key methods to use with JavaScript are:\n• )\n\nExecutes a function, after waiting a specified number of milliseconds.\n• )\n\nSame as setTimeout(), but repeats the execution of the function continuously.\n\nThe method can be written without the window prefix.\n\nThe first parameter is a function to be executed.\n\nThe second parameter indicates the number of milliseconds before execution.\n\nHow to Stop the Execution?\n\nThe method stops the execution of the function specified in setTimeout().\n\nThe method can be written without the window prefix.\n\nThe method uses the variable returned from :\n\nIf the function has not already been executed, you can stop the execution by calling the method:\n\nThe method repeats a given function at every given time-interval.\n\nThe method can be written without the window prefix.\n\nThe first parameter is the function to be executed.\n\nThe second parameter indicates the length of the time-interval between each execution.\n\nThis example executes a function called \"myTimer\" once every second (like a digital watch).\n\nHow to Stop the Execution?\n\nThe method stops the executions of the function specified in the setInterval() method.\n\nThe method can be written without the window prefix.\n\nThe method uses the variable returned from :"
    },
    {
        "link": "https://stackoverflow.com/questions/10576106/setintervalfunction-time-change-time-on-runtime",
        "document": "You're clearing the interval on the next line, so the first one wont work, as it gets cleared right away :\n\nAlso, as gdoron says, setting a interval of nothing isn't really valid, and not a really good idea either, use setTimeout instead, or just run the function outright if no delay is needed."
    },
    {
        "link": "https://stackoverflow.com/questions/16227858/how-to-increment-number-using-animate-with-comma-using-jquery",
        "document": "I'm trying to increment a number inside an element on page. But I need the number to include a comma for the thousandth place value. (e.g. 45,000 not 45000)\n\nHow can I increment a number using animate with comma?"
    },
    {
        "link": "https://stackoverflow.com/questions/5411343/how-to-animate-numbers-using-jquery",
        "document": "The counter is easy, however It's not very clear how you want the effect to look like(give us a link to an example). Regardless the effect would probably be unpractical to do in jQuery.\n\nI would recommend something like raphael js\n\nHave a look at the examples, they are very nice."
    },
    {
        "link": "https://hashbangcode.com/article/animating-number-updates-jquery",
        "document": "I was working on a user dashboard recently and decided to add some more signposting to values being updated. Users were able to select different parameters in order to produce different values, but I thought that the values being updated weren't clear enough.\n\nI had the idea to add some animation to the number as it was updated. This would show the user what items changed as they updated the dashboard. As the dashboard project had jQuery installed this gave me a nice animation system to use.\n\nThe HTML of the dashboard was quite simple and contained a number of div elements that contained numbers. Each of the different numbers had a id so that it could be updated independently.\n\nWhat I needed was a way to animate this number being updated. A good way to do this is to count from 0 to the value of the number to show that it has changed in some way. The on screen animation will cause the user to understand that the number has updated after they performed an action.\n\nThe following function takes an element and a number and will animate the steps from 0 up to that number.\n\nThe call to the prop() function will setup a variable of 0 that will then be used in the animate() function to take that value up to the passed in number. The duration of 500 means that the whole thing will take half a second to run. Set this number to a higher value if you want the animation to run for longer. Personally, I set it low in order to avoid annoying the user who has to wait for the animation to finish before looking at the number.\n\nThis creates a number update that looks like this.\n\nBy also using the jQuery UI library I could further enhance this effect by adding in a little \"pop\" at the end of the animation. This is done using the 'complete' event of the animate function.\n\nNow, when the animation has completed the number will 'pulse' slightly to show that is the final value. This is done by increasing the zoom of the element by 10% and then reducing it back down to the original value.\n\nThis is what the final version of the code looks like.\n\nAs this is a function it can be run from anywhere in your code. You would normally put it in an ajax callback function, but it's also possible to put it in any other event that updates a number. As an example, I created a function that created a random number and then ran the animation function to update the number in our HTML to be that value.\n\nAs a secondary note, if you want to run this function on multiple items at the same time then you can pair it with the each() function. This will loop through the elements found and run the update animation on each of those numbers. This will run as the page loads.\n\nIf you want to see all of this code in action then I have created a CodePen that shows this number animation working. Feel free to play with the parameters to create the effect you are looking for."
    },
    {
        "link": "https://api.jquery.com/animate",
        "document": "A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).\n\nA function to be called when the animation on an element fails to complete (its Promise object is rejected).\n\nA function to be called when the animation on an element completes (its Promise object is resolved).\n\nA function that is called once the animation on an element is complete.\n\nA function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.\n\nA function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.\n\nAn object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.\n\nA Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. As of jQuery 1.7 , the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call .dequeue(\"queuename\") to start it.\n\nAn object of CSS properties and values that the animation will move toward.\n\nAn object of CSS properties and values that the animation will move toward.\n\nThe method allows us to create animation effects on any numeric CSS property. The only required parameter is a plain object of CSS properties. This object is similar to the one that can be sent to the method, except that the range of properties is more restrictive.\n\nAll animated properties should be animated to a single numeric value, except as noted below; most properties that are non-numeric cannot be animated using basic jQuery functionality (For example, , , or can be animated but cannot be, unless the jQuery.Color plugin is used). Property values are treated as a number of pixels unless otherwise specified. The units and can be specified where applicable.\n\nIn addition to style properties, some non-style properties such as and , as well as custom properties, can be animated.\n\nShorthand CSS properties (e.g. font, background, border) are not fully supported. For example, if you want to animate the rendered border width, at least a border style and border width other than \"auto\" must be set in advance. Or, if you want to animate font size, you would use or the CSS equivalent rather than simply .\n\nIn addition to numeric values, each property can take the strings , , and . These shortcuts allow for custom hiding and showing animations that take into account the display type of the element. In order to use jQuery's built-in toggle state tracking, the keyword must be consistently given as the value of the property being animated.\n\nAnimated properties can also be relative. If a value is supplied with a leading or sequence of characters, then the target value is computed by adding or subtracting the given number from the current value of the property.\n\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The default duration is milliseconds. The strings and can be supplied to indicate durations of and milliseconds, respectively.\n\nIf supplied, the , , , , , , and callbacks are called on a per-element basis; is set to the DOM element being animated. If no elements are in the set, no callbacks are called. If multiple elements are animated, the callback is executed once per matched element, not once for the animation as a whole. Use the method to obtain a promise to which you can attach callbacks that fire once for an animated set of any size, including zero elements.\n\nTo animate any element, such as a simple image:\n\nTo animate the opacity, left offset, and height of the image simultaneously:\n\nNote that the target value of the property is . Since the image was visible before, the animation shrinks the height to 0 to hide it. A second click then reverses this transition:\n\nThe of the image is already at its target value, so this property is not animated by the second click. Since the target value for is a relative value, the image moves even farther to the right during this second animation.\n\nDirectional properties ( , , , ) have no discernible effect on elements if their style property is , which it is by default.\n\nThe second version of provides a option — a callback function that is fired at each step of the animation. This function is useful for enabling custom animation types or altering the animation as it is occurring. It accepts two arguments ( and ), and is set to the DOM element being animated.\n• : the numeric value of the property being animated at each step\n• : a reference to the prototype object, which contains a number of properties such as for the animated element, and for the first and last value of the animated property, respectively, and for the property being animated.\n\nNote that the function is called for each animated property on each animated element. For example, given two list items, the function fires four times at each step of the animation:\n\nThe remaining parameter of is a string naming an easing function to use. An easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called , and one that progresses at a constant pace, called . More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\n\nAs of jQuery version 1.4, you can set per-property easing functions within a single call. In the first version of , each property can take an array as its value: The first member of the array is the CSS property and the second member is an easing function. If a per-property easing function is not defined for a particular property, it uses the value of the method's optional easing argument. If the easing argument is not defined, the default function is used.\n\nFor example, to simultaneously animate the width and height with the easing function and the opacity with the easing function:\n\nIn the second version of , the options object can include the property, which is itself an object of CSS properties and their corresponding easing functions. For example, to simultaneously animate the width using the easing function and the height using the easing function:\n\nAs previously noted, a plugin is required for the function."
    },
    {
        "link": "https://jqueryscript.net/animation/animated-number-counting-up.html",
        "document": "In this tutorial, we'll be using jQuery's method to create an animated number counting up effect on the page.\n\nThis jQuery script will help you create an elegant looking counter for your site. Not only does it look good, it’s also very simple and easy to use, which means you don’t need any coding skills.\n\nHow to use it:\n\n1. Place the number you want to count 1up to in an inline element.\n\n2. Load the necessary jQuery library at the end of the document.\n\n3. The core JavaScript (jQuery script) to enable the countup effect on page load.\n\nThis awesome jQuery plugin is developed by naeemprasla. For more Advanced Usages, please check the demo page or visit the official website."
    }
]