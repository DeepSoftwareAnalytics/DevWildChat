[
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.apply.html",
        "document": "Determines if row or column is passed as a Series or ndarray object:\n• None : passes each row or column as a Series to the function.\n• None : the passed function will receive ndarray objects instead. If you are just applying a NumPy reduction function this will achieve much better performance.\n\nThese only act when (columns):\n• None ‘expand’ : list-like results will be turned into columns.\n• None ‘reduce’ : returns a Series if possible rather than expanding list-like results. This is the opposite of ‘expand’.\n• None ‘broadcast’ : results will be broadcast to the original shape of the DataFrame, the original index and columns will be retained. The default behaviour (None) depends on the return value of the applied function: list-like results will be returned as a Series of those. However if the apply function returns a Series these are expanded to columns.\n\nOnly has an effect when is a listlike or dictlike of funcs and the func isn’t a string. If “compat”, will if possible first translate the func into pandas methods (e.g. will be translated to ). If that doesn’t work, will try call to apply again with and if that fails, will call apply again with (backward compatible). If False, the funcs will be passed the whole Series at once.\n\nChoose between the python (default) engine or the numba engine in apply. The numba engine will attempt to JIT compile the passed function, which may result in speedups for large DataFrames. It also supports the following engine_kwargs :\n• None parallel (try to apply the function in parallel over the DataFrame) Note: Due to limitations within numba/how pandas interfaces with numba, you should only use this if raw=True Note: The numba compiler only supports a subset of valid Python/numpy operations. Please read more about the supported python features and supported numpy features in numba to learn what you can or cannot use in the passed function.\n\nPass keyword arguments to the engine. This is currently only used by the numba engine, see the documentation for the engine argument for more information."
    },
    {
        "link": "https://pandas.pydata.org/docs/dev/reference/api/pandas.DataFrame.apply.html",
        "document": "These only act when (columns):\n• None ‘expand’ : list-like results will be turned into columns.\n• None ‘reduce’ : returns a Series if possible rather than expanding list-like results. This is the opposite of ‘expand’.\n• None ‘broadcast’ : results will be broadcast to the original shape of the DataFrame, the original index and columns will be retained. The default behaviour (None) depends on the return value of the applied function: list-like results will be returned as a Series of those. However if the apply function returns a Series these are expanded to columns.\n\nOnly has an effect when is a listlike or dictlike of funcs and the func isn’t a string. If “compat”, will if possible first translate the func into pandas methods (e.g. will be translated to ). If that doesn’t work, will try call to apply again with and if that fails, will call apply again with (backward compatible). If False, the funcs will be passed the whole Series at once.\n\nChoose the execution engine to use. If not provided the function will be executed by the regular Python interpreter. Other options include JIT compilers such Numba and Bodo, which in some cases can speed up the execution. To use an executor you can provide the decorators , or . You can also provide the decorator with parameters, like . Not all functions can be executed with all execution engines. In general, JIT compilers will require type stability in the function (no variable should change data type during the execution). And not all pandas and NumPy APIs are supported. Check the engine documentation [1] and [2] for limitations. String parameters will stop being supported in a future pandas version.\n\nPass keyword arguments to the engine. This is currently only used by the numba engine, see the documentation for the engine argument for more information."
    },
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/2.1.2/reference/api/pandas.DataFrame.apply.html",
        "document": "Axis along which the function is applied:\n• None 0 or ‘index’: apply function to each column.\n• None 1 or ‘columns’: apply function to each row.\n\nDetermines if row or column is passed as a Series or ndarray object:\n• None : passes each row or column as a Series to the function.\n• None : the passed function will receive ndarray objects instead. If you are just applying a NumPy reduction function this will achieve much better performance.\n\nThese only act when (columns):\n• None ‘expand’ : list-like results will be turned into columns.\n• None ‘reduce’ : returns a Series if possible rather than expanding list-like results. This is the opposite of ‘expand’.\n• None ‘broadcast’ : results will be broadcast to the original shape of the DataFrame, the original index and columns will be retained. The default behaviour (None) depends on the return value of the applied function: list-like results will be returned as a Series of those. However if the apply function returns a Series these are expanded to columns.\n\nPositional arguments to pass to in addition to the array/series.\n\nOnly has an effect when is a listlike or dictlike of funcs and the func isn’t a string. If “compat”, will if possible first translate the func into pandas methods (e.g. will be translated to ). If that doesn’t work, will try call to apply again with and if that fails, will call apply again with (backward compatible). If False, the funcs will be passed the whole Series at once."
    },
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/2.1/reference/api/pandas.DataFrame.apply.html",
        "document": "Axis along which the function is applied:\n• None 0 or ‘index’: apply function to each column.\n• None 1 or ‘columns’: apply function to each row.\n\nDetermines if row or column is passed as a Series or ndarray object:\n• None : passes each row or column as a Series to the function.\n• None : the passed function will receive ndarray objects instead. If you are just applying a NumPy reduction function this will achieve much better performance.\n\nThese only act when (columns):\n• None ‘expand’ : list-like results will be turned into columns.\n• None ‘reduce’ : returns a Series if possible rather than expanding list-like results. This is the opposite of ‘expand’.\n• None ‘broadcast’ : results will be broadcast to the original shape of the DataFrame, the original index and columns will be retained. The default behaviour (None) depends on the return value of the applied function: list-like results will be returned as a Series of those. However if the apply function returns a Series these are expanded to columns.\n\nPositional arguments to pass to in addition to the array/series.\n\nOnly has an effect when is a listlike or dictlike of funcs and the func isn’t a string. If “compat”, will if possible first translate the func into pandas methods (e.g. will be translated to ). If that doesn’t work, will try call to apply again with and if that fails, will call apply again with (backward compatible). If False, the funcs will be passed the whole Series at once."
    },
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/2.1.0/reference/api/pandas.DataFrame.apply.html",
        "document": "Axis along which the function is applied:\n• None 0 or ‘index’: apply function to each column.\n• None 1 or ‘columns’: apply function to each row.\n\nDetermines if row or column is passed as a Series or ndarray object:\n• None : passes each row or column as a Series to the function.\n• None : the passed function will receive ndarray objects instead. If you are just applying a NumPy reduction function this will achieve much better performance.\n\nThese only act when (columns):\n• None ‘expand’ : list-like results will be turned into columns.\n• None ‘reduce’ : returns a Series if possible rather than expanding list-like results. This is the opposite of ‘expand’.\n• None ‘broadcast’ : results will be broadcast to the original shape of the DataFrame, the original index and columns will be retained. The default behaviour (None) depends on the return value of the applied function: list-like results will be returned as a Series of those. However if the apply function returns a Series these are expanded to columns.\n\nPositional arguments to pass to in addition to the array/series.\n\nOnly has an effect when is a listlike or dictlike of funcs and the func isn’t a string. If “compat”, will if possible first translate the func into pandas methods (e.g. will be translated to ). If that doesn’t work, will try call to apply again with and if that fails, will call apply again with (backward compatible). If False, the funcs will be passed the whole Series at once."
    },
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.Series.str.zfill.html",
        "document": "Pad strings in the Series/Index by prepending ‘0’ characters.\n\nStrings in the Series/Index are padded with ‘0’ characters on the left of the string to reach a total string length . Strings in the Series/Index with length greater or equal to are unchanged.\n\nDiffers from which has special handling for ‘+’/’-’ in the string.\n\nNote that and are not strings, therefore they are converted to . The minus sign in is treated as a special character and the zero is added to the right of it ( would have moved it to the left). remains unchanged as it is longer than ."
    },
    {
        "link": "https://stackoverflow.com/questions/23836277/add-leading-zeros-to-strings-in-pandas-dataframe",
        "document": "It can be achieved with a single line while initialization. Just use converters argument.\n\nso you'll reduce the code length by half :)\n\nPS: read_csv have this argument as well."
    },
    {
        "link": "https://stackoverflow.com/questions/41749681/converting-numbers-to-particular-string-format-in-a-pandas-dataframe",
        "document": "You can also do this using the Series.apply() method and an f-string wrapped in a lambda function:\n\nIn the f-string, the part after the colon says \"zero-pad the field with four characters and make it a signed base-10 integer\"."
    },
    {
        "link": "https://geeksforgeeks.org/python-pandas-series-str-zfill",
        "document": "Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages and makes importing and analyzing data much easier.\n\nPandas method is used to fill left side of string with zeros. If length of string is more than or equal to the width parameter, then no zeroes are prefixed. Since this is a string method, it is only applicable on series of strings and .str has to be prefixed every time before calling this method.\n\nUsage: This function can be used whenever dealing with numeric data stored in string format. For example, If a series contains binary numbers with different bit size. Then to do operations like 1’s compliment addition, every binary needs to be of same bit size.\n\nTo download the data set used in following examples, click here.\n\nIn the following examples, the data frame used contains data of some employees. The image of data frame before any operations is attached below.\n\n\n\nIn this example, a width of 8 is set and zeroes are prefixed to Salary column using method. Since the Salary column has data type of int64, it’s converted to string first using astype() method.\n\nOutput:\n\n As shown in the output image, zeroes have been prefixed and length of every string in salary column is 10 now."
    },
    {
        "link": "https://w3schools.com/python/ref_string_zfill.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    }
]