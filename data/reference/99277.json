[
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/introduction/creating-your-first-script",
        "document": "Creating your first script in Lua\n\nGetting started with scripting for FiveM might be a tad overwhelming, given the wide range of possibilities and the sparsely spread documentation. In this quick and simple guide, we'll try to show you how to get started with a quick resource in Lua.\n\nA resource is, simply said, a collection of files that can be individually started, stopped and restarted. Your server-data folder (assuming you already installed a server) should have a folder already, with a few resources in them already.\n\nIf you're working on your own resources, you'll probably want to make a directory - this one will be ignored by Git when updating the server-data root. In there, we'll make a folder, since we're making, well, a gametype using the system.\n\nThat means you'll need to have a folder like this by now, assuming a Windows development system: . We'll call this folder from now on.\n\nA resource folder (you know, this you made above) will need a manifest to be detected by FiveM. Since this is a game type, it'll need some extra information as well to teach about the fact that this is a game type.\n\nMake a file called (this is always Lua, even if you'll be writing scripts in C#/JS later on) in your folder. In it, put the following text using your favorite text editor:\n\nAny new resource you make will probably want the latest game features. This is what the is for. You can read up on it elsewhere on this documentation site, if you ever feel the need to know more. To specify if this resource is for gta5, rdr3, or , you should use the variable.\n\nThe , on the other hand, tells that this, in fact, is a game type, and that it's called \"My awesome game type!\". If you're just making a 'standalone' add-on resource, you probably don't want to include a line.\n\nFinally, the indicates to the scripting runtime that the client should load a script, named . If this were a JS script, it'd say , or if it were C#, it'd probably be , but for now we're teaching Lua so just forget that.\n\nFinally, we should make a file called in the resource folder thing.\n\nTo learn more about resource manifest files, take a look at the resource manifest reference.\n\nIn this file, let's put the following content:\n\nThis is a tough one, especially if you're not used to the concept of first-class functions. You could also write it differently, using global/local functions - but that's just a bit odd.\n\nLet's go through this bit by bit, with an annotated version.\n\nA quick mention of the difference between client and server scripts: most of what you'll do in FiveM will be done using client scripts, since in current versions there's no interaction with game functionality in server scripts. Server scripts should be used to have scripted actions occur across clients (using client/server events), and to provide a 'source of trust' for various actions, such as storing/loading things in a persistent database.\n\nSince spawning a player is pretty much entirely game interaction, this happens on the client side. Every player that's joined will have a local instance of each client script running on their PC, with no shared variables or context between them.\n\nYou're probably hoping to be able to run this little example - well, hopefully you already have a running FXServer instance - if not, follow the guide for that.\n\nOnce you've started FXServer, execute the command in the console. This'll reread every single file for every resource you have installed, since you probably just started the server this isn't really needed but if you had the server running already this is just A Good Idea™ to do.\n\nFinally, execute in the console, and connect to your server using the FiveM client's handy button in developer mode (or just enter on the direct connect tab, or if you used the default port click this useful link on the PC you have FiveM installed on).\n\nOnce the game loads, you should see yourself spawning somewhere - hopefully on a big stage!\n\nKeep the game running (and maybe set it to borderless or windowed mode in the game options) and Alt-Tab out back into your code editor - we have more work to do!\n\nIt's silly to close your game and server and restart them both to iterate on your resource. Of course, you can restart your resource as well.\n\nLet's try some different spawn point.\n\nReplace the line (the first one) in with the following:\n\nThen, in your server console, execute the magical command . You should (again) see 'Welcome to the party!~' mentioned in your chat box, and end up on a pier instead of the stage.\n\nYou'll probably want to do more. For this, you're going to have to learn how to call natives, which has nothing to do with indigenous people and actually are a R* label for 'game-defined script functions'. There's a lot of intricacies involved in calling natives properly - for a full reference, see the special section for this - but we'll start simple for now.\n\nIn a stupid way of 'this trope again', we'll make a command that'll spawn a car. Locally. Because nobody cares about the server when they're starting out.\n\nAt the bottom of your , add this code:\n\nStarting already, we see a call to a function. We did not define that function. Well, we (as in, the FiveM team) did, but not when guiding you, the reader, through this wondrously written marvel of a guide. That means it must come from somewhere else!\n\nAnd, guess what, it's actually REGISTER_COMMAND! Click that link, and you'll be led to the documentation for this native. It looks a bit like this:\n\nWe'll mainly care about the name on the second line ( , as used in the Lua code above), and the arguments.\n\nAs you can see, the first argument is the command name. The second argument is a function that is the command handler, and the third argument is a boolean that specifies whether or not it should be a restricted command.\n\nThe function itself gets an argument that is the , which only really matters if you're running on the server (it'll be the client ID of the player that entered the command, a really useful thing to have), and an array of which are basically what you enter after the command like making end up being or being .\n\nSince we already know how to print a message to the chat box, we'll just pretend to spawn a vehicle by printing the name of the vehicle to the console.\n\nLet's restart the resource and see what happens. Run , then in the client chat box (default ) type . You'll see the chat box complain that you were too lazy to implement this. We'll show them that you're absolutely not lazy, and actually implement this now.\n\nThis is a lot of boilerplate code, and we'll want to do this the right way since lots of people will copy this example, so it might look a bit overwhelming.\n\nBasically what we'll do is:\n• Check if the passed model is valid. It's no fun trying to spawn a 'potato' when there's no vehicle with that name.\n• Load the model. You'll need to explicitly manage every model you're using, these are the rules originally defined by R*.\n• Wait for the model to be loaded. Yes, the game will continue running asynchronously.\n• Figure out where the player is once it loaded.\n• Create the vehicle! Awesome, finally you get to be creative.\n• Put the player into the vehicle.\n• Clean up, since we are tidy people and 🚮 and all.\n\nReplace the bit you just pasted in with this, and don't worry we'll explain it before you can say 'lazy' twice:\n\nThis uses a LOT of natives. We'll link a few of them and explain the hard parts.\n\nWe started with checking the vehicle name. If it's (that is, not existent), we'll default to the . Either way, it's stored in a variable.\n\nThen, we check if the vehicle is in the CD image using IS_MODEL_IN_CDIMAGE. This basically means 'is this registered with the game'. We also check if it's a vehicle using IS_MODEL_A_VEHICLE. If either check fails, we tell the player and return from the command.\n\nNow, we call REQUEST_MODEL to load the actual vehicle model. This native takes a argument, but in Lua you can also just pass a string and it'll be converted to a hash. You'll often see people use (GET_HASH_KEY), but if the native is specified as taking a , you actually don't need this.\n\nStep 3: Waiting for the model to be loaded\n\nWe loop calls to HAS_MODEL_LOADED to check if loading succeeded. Since this is a loop and we're cooperatively multitasked, you'll have to give the game time to run as well - otherwise it'll never even finish loading and the game will unfortunately freeze. That's what the call is for - it waits for the specified amount of milliseconds, then returns right back into the script.\n\nOnce the model's loaded, we'll continue.\n\nPlayers' physical incarnations are identified by their , which is short for 'pedestrian'. This is a GTA term, and it usually means 'anything that lives and has legs'. We use PLAYER_PED_ID to get the local (basically, whoever is executing this command) player's ped.\n\nAfter we have the ped and store it in a variable, we get the position of the player ped using GET_ENTITY_COORDS. Since a ped is an entity (the same goes for vehicles and a few other things), this native is used for getting their position. This native, again, returns a , similar to how the was defined earlier.\n\nWe use CREATE_VEHICLE to, well, create a vehicle. In the meanwhile, we snuck in a call to get the player's heading using GET_ENTITY_HEADING, which makes the car spawn facing the same direction as the player.\n\nThe is a convention in entity creation natives to create the vehicle with a network object ( ), but not make it a mission object ( ). You usually want the former, or nobody else will see the vehicle - and you won't want the latter, since you're not writing a full R* mission script.\n\nStep 6: Setting the player into the vehicle\n\nSince we have a ped and a vehicle now, we can use SET_PED_INTO_VEHICLE to place the ped into the vehicle. As the documentation happens to say, is the driver seat of the vehicle.\n\nThe game likes it when you clean up after yourself, and as we're not doing anything with the vehicle or the model anymore in this script, we'll let the game manage it. This is what we use SET_ENTITY_AS_NO_LONGER_NEEDED and SET_MODEL_AS_NO_LONGER_NEEDED for.\n\nFinally, we tell the player to enjoy their new vehicle.\n\nIn your server console, (yeah you can split stuff with semicolons), and try in the game client (which should by now be really bored of respawning). You'll now have your very own Rocket Voltic!\n\nYou'll probably also want to write scripts that interact with the server. This section is still to be written. :-("
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/runtimes/lua",
        "document": "FiveM supports the general purpose programming language Lua as one of its scripting languages. Lua is a very easy language to learn, simple to use and fast to write. To use Lua, just use in your scripts file extensions.\n\nA modified version of Lua 5.3 is used in FiveM, called CfxLua. This version includes some of the modifications the Grit game engine introduced:\n\nTo learn more about Lua, read their official documentation.\n\nTo use Lua in your scripts, simply use the file extension. No additional configuration is required.\n\nBecause you might often have to deal with 'Jenkins one-at-a-time' hashes in GTA/RAGE, the Lua runtime has been extended to have support for compile-time generation of hash keys, similar to GET_HASH_KEY, however with zero runtime overhead.\n\nFiveM supports first-class vectors and quaternions in Lua. Vectors and quaternions are incredibly useful to represent things like positions, rotations or even colors. For performance reasons, vectors and quaternions are real data types in CfxLua, just like booleans, numbers and strings are.\n\nMany native functions return and accept vectors too. They're commonly used for world positions and standard euler rotations, so use them whenever you can. More about there here.\n\nFor usage and examples see their respective docs:\n\nYou can define exports by calling the global object:\n\nYou can also define an or entry in your resource manifest. Functions need to be global to be 'explicitly' exported. Note that these exports will only be available after the first scheduler tick.\n\nThe Lua runtime exposes some libraries on the global scope which you can use."
    },
    {
        "link": "https://docs-backend.fivem.net/docs/scripting-manual/introduction/creating-your-first-script",
        "document": "Creating your first script in Lua\n\nGetting started with scripting for FiveM might be a tad overwhelming, given the wide range of possibilities and the sparsely spread documentation. In this quick and simple guide, we’ll try to show you how to get started with a quick resource in Lua.\n\nA resource is, simply said, a collection of files that can be individually started, stopped and restarted. Your server-data folder (assuming you already installed a server) should have a folder already, with a few resources in them already.\n\nIf you’re working on your own resources, you’ll probably want to make a directory - this one will be ignored by Git when updating the server-data root. In there, we’ll make a folder, since we’re making, well, a gametype using the system.\n\nThat means you’ll need to have a folder like this by now, assuming a Windows development system: . We’ll call this folder from now on.\n\nA resource folder (you know, this you made above) will need a manifest to be detected by FiveM. Since this is a game type, it’ll need some extra information as well to teach about the fact that this is a game type.\n\nMake a file called (this is always Lua, even if you’ll be writing scripts in C#/JS later on) in your folder. In it, put the following text using your favorite text editor:\n\nAny new resource you make will probably want the latest game features. This is what the is for. You can read up on it elsewhere on this documentation site, if you ever feel the need to know more. To specify if this resource is for gta5, rdr3, or , you should use the variable.\n\nThe , on the other hand, tells that this, in fact, is a game type, and that it’s called “My awesome game type!\". If you’re just making a ‘standalone’ add-on resource, you probably don’t want to include a line.\n\nFinally, the indicates to the scripting runtime that the client should load a script, named . If this were a JS script, it’d say , or if it were C#, it’d probably be , but for now we’re teaching Lua so just forget that.\n\nFinally, we should make a file called in the resource folder thing.\n\nTo learn more about resource manifest files, take a look at the resource manifest reference.\n\nIn this file, let’s put the following content:\n\nThis is a tough one, especially if you’re not used to the concept of first-class functions. You could also write it differently, using global/local functions - but that’s just a bit odd.\n\nLet’s go through this bit by bit, with an annotated version.\n\n-- define a local variable called `spawnPos` with a coordinate somewhere on the map -- Lua in FiveM (through CfxLua) supports first-class vectors, which in this case can be accessed using .x, .y and .z. -- add an event handler for the (local) event called 'onClientGameTypeStart'. -- it takes no arguments in this case (in Lua you can omit arguments), since our resource is a game type and you can only run one at once, -- that means this will basically run when we start ourselves on the client. nice! -- set an automatic spawn callback for the spawn manager. -- normally, this works using hardcoded spawn points, but since this is a scripting tutorial, we'll do it this way. -- the spawn manager will call this when the player is dead, or when forceRespawn is called. -- spawnmanager has said we should spawn, let's spawn! -- this argument is basically a table containing the spawn location... -- ... and the model to spawn as. -- a callback to be called once the player is spawned in and the game is visible -- in this case, we just send a message to the local chat box. -- and force respawn when the game type starts\n\nA quick mention of the difference between client and server scripts: most of what you’ll do in FiveM will be done using client scripts, since in current versions there’s no interaction with game functionality in server scripts. Server scripts should be used to have scripted actions occur across clients (using client/server events), and to provide a ‘source of trust’ for various actions, such as storing/loading things in a persistent database.\n\nSince spawning a player is pretty much entirely game interaction, this happens on the client side. Every player that’s joined will have a local instance of each client script running on their PC, with no shared variables or context between them.\n\nYou’re probably hoping to be able to run this little example - well, hopefully you already have a running FXServer instance - if not, follow the guide for that.\n\nOnce you’ve started FXServer, execute the command in the console. This’ll reread every single file for every resource you have installed, since you probably just started the server this isn’t really needed but if you had the server running already this is just A Good Idea™ to do.\n\nFinally, execute in the console, and connect to your server using the FiveM client’s handy button in developer mode (or just enter on the direct connect tab, or if you used the default port click this useful link on the PC you have FiveM installed on).\n\nOnce the game loads, you should see yourself spawning somewhere - hopefully on a big stage!\n\nKeep the game running (and maybe set it to borderless or windowed mode in the game options) and Alt-Tab out back into your code editor - we have more work to do!\n\nIt’s silly to close your game and server and restart them both to iterate on your resource. Of course, you can restart your resource as well.\n\nLet’s try some different spawn point.\n\nReplace the line (the first one) in with the following:\n\nThen, in your server console, execute the magical command . You should (again) see ‘Welcome to the party!~’ mentioned in your chat box, and end up on a pier instead of the stage.\n\nYou’ll probably want to do more. For this, you’re going to have to learn how to call natives, which has nothing to do with indigenous people and actually are a R* label for ‘game-defined script functions’. There’s a lot of intricacies involved in calling natives properly - for a full reference, see the special section for this - but we’ll start simple for now.\n\nIn a stupid way of ‘this trope again’, we’ll make a command that’ll spawn a car. Locally. Because nobody cares about the server when they’re starting out.\n\nAt the bottom of your , add this code:\n\nStarting already, we see a call to a function. We did not define that function. Well, we (as in, the FiveM team) did, but not when guiding you, the reader, through this wondrously written marvel of a guide. That means it must come from somewhere else!\n\nAnd, guess what, it’s actually REGISTER_COMMAND! Click that link, and you’ll be led to the documentation for this native. It looks a bit like this:\n\nWe’ll mainly care about the name on the second line ( , as used in the Lua code above), and the arguments.\n\nAs you can see, the first argument is the command name. The second argument is a function that is the command handler, and the third argument is a boolean that specifies whether or not it should be a restricted command.\n\nThe function itself gets an argument that is the , which only really matters if you’re running on the server (it’ll be the client ID of the player that entered the command, a really useful thing to have), and an array of which are basically what you enter after the command like making end up being or being .\n\nSince we already know how to print a message to the chat box, we’ll just pretend to spawn a vehicle by printing the name of the vehicle to the console.\n\nLet’s restart the resource and see what happens. Run , then in the client chat box (default ) type . You’ll see the chat box complain that you were too lazy to implement this. We’ll show them that you’re absolutely not lazy, and actually implement this now.\n\nThis is a lot of boilerplate code, and we’ll want to do this the right way since lots of people will copy this example, so it might look a bit overwhelming.\n\nBasically what we’ll do is:\n• Check if the passed model is valid. It’s no fun trying to spawn a ‘potato’ when there’s no vehicle with that name.\n• Load the model. You’ll need to explicitly manage every model you’re using, these are the rules originally defined by R*.\n• Wait for the model to be loaded. Yes, the game will continue running asynchronously.\n• Figure out where the player is once it loaded.\n• Create the vehicle! Awesome, finally you get to be creative.\n• Put the player into the vehicle.\n• Clean up, since we are tidy people and 🚮 and all.\n\nReplace the bit you just pasted in with this, and don’t worry we’ll explain it before you can say ‘lazy’ twice:\n\nThis uses a LOT of natives. We’ll link a few of them and explain the hard parts.\n\nWe started with checking the vehicle name. If it’s (that is, not existent), we’ll default to the . Either way, it’s stored in a variable.\n\nThen, we check if the vehicle is in the CD image using IS_MODEL_IN_CDIMAGE. This basically means ‘is this registered with the game’. We also check if it’s a vehicle using IS_MODEL_A_VEHICLE. If either check fails, we tell the player and return from the command.\n\nNow, we call REQUEST_MODEL to load the actual vehicle model. This native takes a argument, but in Lua you can also just pass a string and it’ll be converted to a hash. You’ll often see people use (GET_HASH_KEY), but if the native is specified as taking a , you actually don’t need this.\n\nStep 3: Waiting for the model to be loaded\n\nWe loop calls to HAS_MODEL_LOADED to check if loading succeeded. Since this is a loop and we’re cooperatively multitasked, you’ll have to give the game time to run as well - otherwise it’ll never even finish loading and the game will unfortunately freeze. That’s what the call is for - it waits for the specified amount of milliseconds, then returns right back into the script.\n\nPlayers' physical incarnations are identified by their , which is short for ‘pedestrian’. This is a GTA term, and it usually means ‘anything that lives and has legs’. We use PLAYER_PED_ID to get the local (basically, whoever is executing this command) player’s ped.\n\nAfter we have the ped and store it in a variable, we get the position of the player ped using GET_ENTITY_COORDS. Since a ped is an entity (the same goes for vehicles and a few other things), this native is used for getting their position. This native, again, returns a , similar to how the was defined earlier.\n\nWe use CREATE_VEHICLE to, well, create a vehicle. In the meanwhile, we snuck in a call to get the player’s heading using GET_ENTITY_HEADING, which makes the car spawn facing the same direction as the player.\n\nThe is a convention in entity creation natives to create the vehicle with a network object ( ), but not make it a mission object ( ). You usually want the former, or nobody else will see the vehicle - and you won’t want the latter, since you’re not writing a full R* mission script.\n\nStep 6: Setting the player into the vehicle\n\nSince we have a ped and a vehicle now, we can use SET_PED_INTO_VEHICLE to place the ped into the vehicle. As the documentation happens to say, is the driver seat of the vehicle.\n\nThe game likes it when you clean up after yourself, and as we’re not doing anything with the vehicle or the model anymore in this script, we’ll let the game manage it. This is what we use SET_ENTITY_AS_NO_LONGER_NEEDED and SET_MODEL_AS_NO_LONGER_NEEDED for.\n\nFinally, we tell the player to enjoy their new vehicle.\n\nIn your server console, (yeah you can split stuff with semicolons), and try in the game client (which should by now be really bored of respawning). You’ll now have your very own Rocket Voltic!\n\nYou’ll probably also want to write scripts that interact with the server. This section is still to be written. :-("
    },
    {
        "link": "https://forum.cfx.re/t/fivem-scripting-documentation/192",
        "document": "This are original documentations from here.\n\nIf you found other scripting documentations, you can post here.\n\nThis document lists valid directives provided by the core and other resources for the resource definition file (__resource.lua).\n\nA directive is basically a Lua function invoked by the ‘identifier followed by string or table equals a call’ rule - unknown directives are handled by returning a dummy function instead of nil (this means any undefined variable is actually a function - keep this in mind!). In effect, the following are equal:\n\nLists one or multiple client scripts for the resource. Parsed by both client (to load scripts) and server (to offer scripts for download). Aliased as client_script.\n\nLists one or multiple required resources for this resource. Aliased as dependency.\n\nSets the meta field ‘description’ in the resource’s metadata.\n\nLists one or multiple client-side script exports for other resources to call - these are taken from the resource’s global environment. Aliased as export.\n\nLists one or multiple server scripts for the resource. Only parsed server-side. Aliased as server_script.\n\nSets the meta field ‘version’ in the resource’s metadata.\n\nAn export can be called from any resource on the client (tbi on the server) as follows:\n\nLet’s start demonstrating the interaction between client and server resources and events by making a simple resource that will spawn a car when a message in the chat equals ‘car’.\n\nAs stated in the previous page, creating a resource requires you to make a subfolder, and a __resource.lua file. Therefore, we will make a folder called mycar in our resources/ folder, and create a new file called __resource.lua in the same directory.\n\nThe content in this file will be simple - we’re just creating a single client script and a single server script:\n\nAs chat messages are primarily handled on the server (as shown in the event documentation – you’ll be referring to it often!), we’ll start with the server script. It is as follows:\n\nThe server’s primary means of code execution is through events like these - the client also has the ability to create threads, which execute in the background together with the game.\n\nAs shown in the documentation for chatMessage], the first argument is the client ID of the player who sent the chat message. The ‘mycar:createCar’ event is our custom one, which we’ll implement below.\n\nGoing from there, we’re going to be creating the client script. We’ll show a basic example of the base framework, explain it, then continue on adding vehicle spawning.\n\nAgain, this is another event handler as above.\n\nNow, to actually spawn a vehicle, some knowledge of single player GTA scripting is fairly helpful. There are various guides available both for the GTA III series which partially apply here, and somewhat less guides for IV. Basically, to create a local entity, one starts by loading a model. This could be done like this, kind of:\n\nThis shows the way we interact with the game fairly clearly, as well - these functions are the so-called ‘native functions’ from the game, and are listed on various sites. These functions may return various return value types, such as ‘results’ and have ‘pointer arguments’. The _r in this example stands for ‘return result as integer’, and a full list follows:\n\nIf multiple reference items are specified, the return values will occur from left to right, like the following:\n\nHowever, there’s some issue with this model loading code, which has to be resolved in a better way: as loading a model may take a while, and the player is, well, playing the game, it’s usually a good idea to load the model asynchronously. This is typically done in native script by invoking a ‘wait’ command/function in a loop - and it’s no different here…\n\n… except you need a thread for this. Threads in CitizenMP are simply Lua ‘coroutines’, and therefore if you’re used to threads being a ‘bad thing’, they’re typically not over here. Let’s show how to actually do this:\n\nThis also introduces another new concept - marking models as ‘no longer needed’. If one is not going to perform further script operations on any game resource (whether it be an entity or model), it’s recommended to mark them as unneeded - this allows the game to release the memory resources required for this resource (that’s a lot of resource when it’s able to.\n\nNow that we have the model loaded, we can actually continue by creating our car. This usually ends up being done as follows:\n\nNote that GetPlayerPed isn’t a native function, but a convenience function we made to simplify getting the player’s character.\n\nIf we put it all together, as shown below…\n\n… we have our complete client script!\n\nLet’s try it out: add a line to your server .yml file’s AutoStartResources section to list ‘mycar’, start the server, join, and type ‘car’ in the chat. If everything’s okay, you should be put in a Turismo just fine! If not…\n\nCitizenMP:IV has the ability to override/insert files that would normally be placed in ‘CD images’ (.img files) at runtime. This, however, is bound to a few specific limitations:\n• No API. These files are simply loaded from a folder, without any exclusions specifiable.\n• Only at initialization. Streaming overrides only get initialized during game initialization, which basically means ‘during connecting to the server’. Dynamic resource starting/stopping won’t allow overriding these in the current version, and may not do so for a while to come.\n\nTo use this feature, simply create a folder titled stream in a resource folder (one that is started by AutoStartResources, preferably) and place streaming files (.wft, .wtd, .nod, .sco, …) in there. These will only be downloaded on demand (i.e. when said streaming object is requested, for instance by a call to RequestModel) and will be cached on the client locally for future usage.\n\nThe folder’s content can be categorized in subfolders for organization, these have no meaning to the game whatsoever.\n• from: The network ID of the client sending the chat message.\n• name: The name of the player sending the chat message.\n• color: A table containing a RGB color the chat message should be displayed as.\n\nThis event can be canceled."
    },
    {
        "link": "https://github.com/citizenfx/fivem/blob/master/data/shared/citizen/scripting/lua/scheduler.lua",
        "document": "if this is a net event and we don't allow this event to be triggered from the network, return\n\nas Lua doesn't allow directly getting lengths from a data buffer, and _s will zero-terminate, we have a wrapper in the game itself\n\n'old' function (uses events for compatibility, as people may have relied on this implementation detail)"
    },
    {
        "link": "https://forum.cfx.re/t/lua-coding-help/105554",
        "document": "CreateThread is away of create a .\n\n A coroutine is like normal function, it will execute the code. However it does not have to “complete” or run all the way to the end.\n\nA coroutine can “yield”, that is a coroutine saying “I am done with whatever I was doing” and the system will then continue what it was doing before the coroutine.\n\nNext time around, it will continue/resume the coroutine where it left off, until it yet again will run into a yield.\n\n In this case the “yield” is known as “Citizen.Wait(0)”\n\nA coroutine has similar functionality as a thread, but instead of executing it in parallel, it will execute it one by one.\n\nMore information:\n\n Definition of a thread (good to know the general concept).\n\n Explain like i’m 5 entry\n\nYou can call these methods in the LUA code. For instance if you want to get the player ped, you can write “PlayerPedId()” as described in the native documentation\n\nNote that you need to use the right names, PLAYER_PED_ID wont work, it needs to be:\n\nThe are just a way of documenting. I would advice looking up in the native references.\n\nIt can be called like .\n\nmeans a interger value, more information here."
    },
    {
        "link": "https://forum.cfx.re/t/how-to-apply-scripts-to-the-server/746458",
        "document": "Thanks alot, i think i am nearly done, i have this script,which removes all Ai unit from gta v server, So i create a _resource.lua and a client.lua then i put this\n\nInto the client and it should work ?\n\n Although i didnt add the manifest as i dont know where to find the code and which one to use"
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/runtimes/lua",
        "document": "FiveM supports the general purpose programming language Lua as one of its scripting languages. Lua is a very easy language to learn, simple to use and fast to write. To use Lua, just use in your scripts file extensions.\n\nA modified version of Lua 5.3 is used in FiveM, called CfxLua. This version includes some of the modifications the Grit game engine introduced:\n\nTo learn more about Lua, read their official documentation.\n\nTo use Lua in your scripts, simply use the file extension. No additional configuration is required.\n\nBecause you might often have to deal with 'Jenkins one-at-a-time' hashes in GTA/RAGE, the Lua runtime has been extended to have support for compile-time generation of hash keys, similar to GET_HASH_KEY, however with zero runtime overhead.\n\nFiveM supports first-class vectors and quaternions in Lua. Vectors and quaternions are incredibly useful to represent things like positions, rotations or even colors. For performance reasons, vectors and quaternions are real data types in CfxLua, just like booleans, numbers and strings are.\n\nMany native functions return and accept vectors too. They're commonly used for world positions and standard euler rotations, so use them whenever you can. More about there here.\n\nFor usage and examples see their respective docs:\n\nYou can define exports by calling the global object:\n\nYou can also define an or entry in your resource manifest. Functions need to be global to be 'explicitly' exported. Note that these exports will only be available after the first scheduler tick.\n\nThe Lua runtime exposes some libraries on the global scope which you can use."
    },
    {
        "link": "https://forum.cfx.re/t/release-online-interiors-70-interiors-with-teleports-blips/836300",
        "document": "GitHub - cloudy-develop/online-interiors-maps: A FiveM resource adding map edits to the map of...\n\nA FiveM resource adding map edits to the map of Grand Theft Auto V, as an addon to Online Interiors."
    },
    {
        "link": "https://fivemx.com/tutorials/how-to-create-mods-for-fivem",
        "document": "FiveM has grown to become one of the most popular platforms for creating and hosting custom multiplayer experiences within Grand Theft Auto V (GTA V). Whether you’re looking to create unique MLOs, scripts, mods, or other types of custom content, FiveM offers limitless possibilities. This guide will provide you with a step-by-step process for developing various types of mods for FiveM, focusing on MLOs (Map Load Objects), scripts, mods, resources, and textures.\n\nBefore you start creating mods for FiveM, it’s important to understand what FiveM is. FiveM is a modification framework for GTA V that allows users to host custom multiplayer servers. Unlike Rockstar’s GTA Online, which is quite restrictive, FiveM enables players to create their own rules, add custom content, and build entirely new game modes.\n\nSome of the key benefits of FiveM include:\n• Custom content: Users can create custom scripts, maps, and mods to tailor their game experience.\n• Dedicated servers: Players can set up their own dedicated servers to control the environment and settings.\n• No limitations on modding: FiveM doesn’t impose strict restrictions on modding like Rockstar’s official online mode.\n\nThere are various types of mods you can create in FiveM, each serving a different function. Let’s break them down:\n\nAn MLO is essentially a map mod that adds new interiors and structures to the game world. Unlike traditional map mods, which can sometimes look flat or unrealistic, MLOs are fully interactable 3D spaces that players can walk into and explore.\n\nScripts in FiveM are the backbone of how your custom server operates. They are written in programming languages such as Lua, C#, and JavaScript, and control everything from game mechanics to custom user interfaces. Whether you want to introduce custom commands, new gameplay features, or entire game modes, scripts are essential.\n\nMods in FiveM can include anything from custom vehicles, weapons, skins, to entire gameplay overhauls. Each mod type is classified based on what it modifies within the game:\n\nResources are the core of every FiveM mod. A resource is essentially a mod or script packaged in a way that FiveM can load and use. Each resource has its own folder structure and is defined in a resource manifest ( or ).\n\nTextures are used to skin objects, vehicles, or characters in the game. This includes applying custom designs to cars, signs, or even clothing for player avatars. Creating textures requires skill in graphic design and an understanding of how to manipulate DFF and TXD files.\n\nBefore we jump into creating mods, it’s essential to set up your development environment. Here’s a checklist to make sure you’re prepared:\n• Install GTA V: You’ll need the base game to test your mods.\n• Install FiveM: Download the latest version of FiveM from the official website.\n• Text Editor or IDE: A code editor like VSCode, Sublime Text, or Notepad++ will help you write and organize your scripts and manifest files.\n• 3D Modeling Software: For creating MLOs or custom models, you’ll need software like Blender, 3ds Max, or SketchUp.\n• Image Editing Software: Tools like Photoshop or GIMP are needed to create or modify textures.\n• FiveM Server: To test your mods, you’ll want to set up a local FiveM server on your PC.\n\nCreating MLOs is a complex but rewarding process. MLOs add custom interiors and explorable spaces to your FiveM server. To create an MLO, you will need to work with 3D models and implement them in the FiveM environment.\n• 3D Modeling Software: Software such as Blender or 3ds Max for modeling.\n• OpenIV: A GTA V modding tool that allows for model and texture imports/exports.\n• Open CodeWalker: Begin by loading the GTA V map. Use this to identify the location where you want your MLO to be placed.\n• Design the 3D Space: Using your 3D modeling software, design your custom interior or building. Export the model as YDR/YFT format, which is compatible with GTA V.\n• Create the Collision Model: For every model, you need to create a collision model to ensure the physics of the game interact properly with the object.\n• Convert and Import: Use OpenIV to import your custom model into the game files, ensuring it replaces or adds the correct objects.\n• Add to FiveM: Package your MLO as a resource and load it into your FiveM server. Test thoroughly to make sure players can enter and interact with the new space.\n\nFull Tutorial is available here\n\nFiveM Scripts control every dynamic aspect of your FiveM server, from player interactions to game modes. Lua is the most commonly used scripting language for FiveM, but you can also write scripts in C# or JavaScript.\n• Lua: Lightweight and easy to learn, Lua is ideal for beginners.\n• C#: More powerful and structured, ideal for complex mods.\n• Create a Resource Folder: In your server’s folder, create a new directory for your script. Name it something like .\n• Create the : This file tells FiveM that this is a resource. Here’s a basic example:\n• Write the Script: Create a file called in the same folder. Add the following code:\n• Test the Script: After saving your script, restart your server and use the command to spawn any car.\n\nYou can find our full tutorial about how to create scripts here\n\nMods can change the game’s look, feel, and functionality. Here’s how to create common mod types:\n• Using OpenIV to import and replace GTA V’s stock vehicles.\n• Create entirely new weapons using custom 3D models.\n\nPeds can be customized by creating new character models or retexturing existing ones.\n\nResources in FiveM consist of scripts, assets, and configurations that define a mod’s behavior.\n\nEach resource folder should contain:\n\nCustom textures bring life to your mods, whether it’s a custom logo on a car or a new skin for a character.\n\nUse Photoshop or GIMP to edit TXD files (texture files) extracted using OpenIV. Save them in the correct format and import them back into the game.\n\nTesting is crucial to ensure that your mods work as intended. Set up a local FiveM server and thoroughly test each mod.\n\nAfter testing, optimize your mod by reducing unnecessary assets or scripts that cause high resource usage. You can publish your mods on platforms like the FiveM forums or modding communities!\n\nCreating mods for FiveM can be a challenging yet incredibly rewarding experience. Whether you’re making scripts, MLOs, or custom textures, the possibilities for customization in FiveM are virtually limitless. Follow this guide, experiment with your ideas, and soon you’ll be able to create rich, immersive experiences for your server’s players."
    },
    {
        "link": "https://m.youtube.com/embed/KZehUcKdWx0",
        "document": ""
    },
    {
        "link": "https://github.com/JustAnotherModder/mythic_interiors",
        "document": "This is the basic frameworking for the spawnable interiors. Call any of the functions passing a spawn point and it will spawn objects there and then teleport the player.\n\nYou do need the custom objects in the stream folder along with the YTYP files defined in the resource manifest.\n\nNOTE: As with most MythicRP releases at this point, this has several calls to Mythic Framework resources that have not (and may not) released publicly. This is intended as a dev resource at most and not a simple drag & drop to use on public servers. Do not make any issues asking for it to be made to work on a public framework or why it isn't plug n' play.\n\nThis release only has a few interiors added to it, I'll likely add more to it as I do them but if you want to create them yourself I made a video explaining how to do so, can find it here\n\nAgain, you just call one of the functions and pass a spawn point. Odds are if you're going to be using this on a public server you'd want to add some validation to counter script kiddies trying to LUA inject but that'd be on you. All the functions that spawn an interior returns a list that has all the entity IDs of the objects spawned (You want to store this and call it when the interior is no longer needed and call the despawn function) as well as a list that has the entrance & exit locations of that interior in off-set form.\n\nThere's 2 different sets of functions, ones that spawn just the bare minimum shells that're intended to be used for custom player housing. And ones that're spawning the entirety of the objects in the original interior\n\nFor best results, I suggest you disable any time & weather syncing you're doing while they're in the interior and setting it to EXTRASUNNY & 24:00 so colors aren't messed up and there isn't water in the building (If it was raining, there will be puddles. There's way to disable it)\n\nExample of how I'm spawning interiors in my realestate script;\n\n( ) May not be needed, just doing it in-case ( ) This is my sync script for syncing time & weather. While they're in an interior I'm disabling the sync . ( ) Wait to ensure my syncing was stopped ( ) ( ) ( ) ( , , ) . This is from data that I am storing in my realestate script for properties that're player ownable. Just door locations really { [ ], [ ], ( [ ] ) } We're than getting the offset from the property coords so we can spawn it underground. Offsets may need to be tweaked depending on terrain & interior [ ]: ( , ) [ ] Due to exports not returning 2 things correct, gotta return it in a single object then set it after value is returned [ ] Due to exports not returning 2 things correct, gotta return it in a single object then set it after value is returned . ( , ) Calling function that handles anything that I want to be done while they're in the property. IE inventory, clothes, logout, etc . ( ) Delay to ensure all spawning stuff is done and handled Set a control boolean to false to indicate the player is no longer in the process of entering an interior\n\nHere's a video showcasing what can be done with these interiors. This script is not released, just a showcase showing what's possible."
    }
]