[
    {
        "link": "https://flex.apache.org/asdoc/mx/controls/ProgressBar.html",
        "document": "The ProgressBar control provides a visual representation of the progress of a task over time. There are two types of ProgressBar controls: determinate and indeterminate. The ProgressBar control provides a visual representation of the progress of a task over time. There are two types of ProgressBar controls: determinate and indeterminate. A determinate ProgressBar control is a linear representation of the progress of a task over time. You use a determinate ProgressBar when the scope of the task is known. It displays when the user has to wait for an extended amount of time. An indeterminate ProgressBar control represents time-based processes for which the scope is not yet known. As soon as you can determine the scope, you should use a determinate ProgressBar control. The ProgressBar control has the following default characteristics: The tag inherits all of the tag attributes of its superclass, and adds the following tag attributes: \n\n\n\naccessibilityDescription : String A convenience accessor for the description property in this UIComponent's accessibilityProperties object. accessibilityEnabled : Boolean A convenience accessor for the silent property in this UIComponent's accessibilityProperties object. accessibilityName : String A convenience accessor for the name property in this UIComponent's accessibilityProperties object. accessibilityShortcut : String A convenience accessor for the shortcut property in this UIComponent's accessibilityProperties object. activeEffects : Array [read-only] The list of effects that are currently playing on the component, as an Array of EffectInstance instances. automationDelegate : Object The delegate object that handles the automation-related functionality. automationEnabled : Boolean [read-only] True if this component is enabled for automation, false otherwise. automationName : String Name that can be used as an identifier for this object. automationOwner : DisplayObjectContainer [read-only] The owner of this component for automation purposes. automationParent : DisplayObjectContainer [read-only] The parent of this component for automation purposes. automationTabularData : Object [read-only] An implementation of the IAutomationTabularData interface, which can be used to retrieve the data. automationValue : Array [read-only] This value generally corresponds to the rendered appearance of the object and should be usable for correlating the identifier with the object as it appears visually within the application. automationVisible : Boolean [read-only] True if this component is visible for automation, false otherwise. baseline : Object For components, this layout constraint property is a facade on top of the similarly-named style. baselinePosition : Number [read-only] The y-coordinate of the baseline of the first line of text of the component. bottom : Object For components, this layout constraint property is a facade on top of the similarly-named style. cacheHeuristic : Boolean [write-only] Used by Flex to suggest bitmap caching for the object. cachePolicy : String Specifies the bitmap caching policy for this object. className : String [read-only] The name of this instance's class, such as \"Button\". contentMouseX : Number [read-only] Returns the x position of the mouse, in the content coordinate system. contentMouseY : Number [read-only] Returns the y position of the mouse, in the content coordinate system. conversion : Number Number used to convert incoming current bytes loaded value and the total bytes loaded values. currentState : String The current view state of the component. cursorManager : ICursorManager [read-only] Gets the CursorManager that controls the cursor for this component and its peers. depth : Number Determines the order in which items inside of containers are rendered. descriptor : UIComponentDescriptor Reference to the UIComponentDescriptor, if any, that was used by the createComponentFromDescriptor() method to create this UIComponent instance. designLayer : DesignLayer Specifies the optional DesignLayer instance associated with this visual element. direction : String Direction in which the fill of the ProgressBar expands toward completion. document : Object A reference to the document object associated with this UIComponent. enabled : Boolean Whether the component can accept user interaction. errorString : String The text that displayed by a component's error tip when a component is monitored by a Validator and validation fails. explicitHeight : Number Number that specifies the explicit height of the component, in pixels, in the component's coordinates. explicitMaxHeight : Number The maximum recommended height of the component to be considered by the parent during layout. explicitMaxWidth : Number The maximum recommended width of the component to be considered by the parent during layout. explicitMinHeight : Number The minimum recommended height of the component to be considered by the parent during layout. explicitMinWidth : Number The minimum recommended width of the component to be considered by the parent during layout. explicitWidth : Number Number that specifies the explicit width of the component, in pixels, in the component's coordinates. flexContextMenu : IFlexContextMenu The context menu for this UIComponent. focusEnabled : Boolean Indicates whether the component can receive focus when tabbed to. focusManager : IFocusManager Gets the FocusManager that controls focus for this component and its peers. focusPane : Sprite The focus pane associated with this object. hasFocusableChildren : Boolean A flag that indicates whether child objects can receive focus. hasLayoutMatrix3D : Boolean [read-only] Contains true if the element has 3D Matrix. height : Number [override] Number that specifies the height of the component, in pixels, in the parent's coordinates. horizontalCenter : Object For components, this layout constraint property is a facade on top of the similarly-named style. includeInLayout : Boolean Specifies whether this component is included in the layout of the parent container. indeterminate : Boolean Whether the ProgressBar control has a determinate or indeterminate appearance. inheritingStyles : Object The beginning of this component's chain of inheriting styles. initialized : Boolean A flag that determines if an object has been through all three phases of layout: commitment, measurement, and layout (provided that any were required). instanceIndices : Array An Array containing the indices required to reference this UIComponent object from its parent document. is3D : Boolean [read-only] Contains true when the element is in 3D. isDocument : Boolean [read-only] Contains true if this UIComponent instance is a document object. isPopUp : Boolean Set to true by the PopUpManager to indicate that component has been popped up. layoutMatrix3D : Matrix3D [write-only] The transform matrix that is used to calculate a component's layout relative to its siblings. left : Object For components, this layout constraint property is a facade on top of the similarly-named style. maintainProjectionCenter : Boolean When true, the component keeps its projection matrix centered on the middle of its bounding box. maxHeight : Number The maximum recommended height of the component to be considered by the parent during layout. maximum : Number Largest progress value for the ProgressBar. maxWidth : Number The maximum recommended width of the component to be considered by the parent during layout. measuredHeight : Number The default height of the component, in pixels. measuredMinHeight : Number The default minimum height of the component, in pixels. measuredMinWidth : Number The default minimum width of the component, in pixels. measuredWidth : Number The default width of the component, in pixels. minHeight : Number The minimum recommended height of the component to be considered by the parent during layout. minimum : Number Smallest progress value for the ProgressBar. minWidth : Number The minimum recommended width of the component to be considered by the parent during layout. mode : String Specifies the method used to update the bar. moduleFactory : IFlexModuleFactory A module factory is used as context for using embedded fonts and for finding the style manager that controls the styles for this component. mouseFocusEnabled : Boolean Whether you can receive focus when clicked on. nestLevel : int Depth of this object in the containment hierarchy. nonInheritingStyles : Object The beginning of this component's chain of non-inheriting styles. numAutomationChildren : int [read-only] The number of automation children this container has. owner : DisplayObjectContainer The owner of this IVisualElement object. parent : DisplayObjectContainer [override] [read-only] The parent container or component for this component. parentApplication : Object [read-only] A reference to the Application object that contains this UIComponent instance. parentDocument : Object [read-only] A reference to the parent document object for this UIComponent. percentComplete : Number [read-only] Percentage of process that is completed.The range is 0 to 100. percentHeight : Number Specifies the height of a component as a percentage of its parent's size. percentWidth : Number Specifies the width of a component as a percentage of its parent's size. postLayoutTransformOffsets : TransformOffsets Defines a set of adjustments that can be applied to the object's transform in a way that is invisible to its parent's layout. processedDescriptors : Boolean Set to true after immediate or deferred child creation, depending on which one happens. repeater : IRepeater [read-only] A reference to the Repeater object in the parent document that produced this UIComponent. repeaterIndex : int [read-only] The index of the item in the data provider of the Repeater that produced this UIComponent. repeaterIndices : Array An Array containing the indices of the items in the data provider of the Repeaters in the parent document that produced this UIComponent. repeaters : Array An Array containing references to the Repeater objects in the parent document that produced this UIComponent. right : Object For components, this layout constraint property is a facade on top of the similarly-named style. rotationX : Number [override] Indicates the x-axis rotation of the DisplayObject instance, in degrees, from its original orientation relative to the 3D parent container. rotationY : Number [override] Indicates the y-axis rotation of the DisplayObject instance, in degrees, from its original orientation relative to the 3D parent container. scaleZ : Number [override] Number that specifies the scaling factor along the z axis. screen : Rectangle [read-only] Returns an object that contains the size and position of the base drawing surface for this object. showInAutomationHierarchy : Boolean A flag that determines if an automation object shows in the automation hierarchy. source : Object Refers to the control that the ProgressBar is measuring the progress of. states : Array The view states that are defined for this component. styleDeclaration : CSSStyleDeclaration Storage for the inline inheriting styles on this object. styleManager : IStyleManager2 [read-only] Returns the StyleManager instance used by this component. styleName : Object The class style used by this component. styleParent : IAdvancedStyleClient A component's parent is used to evaluate descendant selectors. systemManager : ISystemManager Returns the SystemManager object used by this component. tabFocusEnabled : Boolean A flag that indicates whether this object can receive focus via the TAB key This is similar to the tabEnabled property used by the Flash Player. This is usually true for components that handle keyboard input, but some components in controlbars have them set to false because they should not steal focus from another component like an editor. toolTip : String Text to display in the ToolTip. top : Object For components, this layout constraint property is a facade on top of the similarly-named style. transform : Transform [override] An object with properties pertaining to a display object's matrix, color transform, and pixel bounds. transformX : Number Sets the x coordinate for the transform center of the component. transformY : Number Sets the y coordinate for the transform center of the component. transformZ : Number Sets the z coordinate for the transform center of the component. transitions : Array An Array of Transition objects, where each Transition object defines a set of effects to play when a view state change occurs. tweeningProperties : Array Array of properties that are currently being tweened on this object. updateCompletePendingFlag : Boolean A flag that determines if an object has been through all three phases of layout validation (provided that any were required). validationSubField : String Used by a validator to associate a subfield with this component. value : Number [read-only] Read-only property that contains the amount of progress that has been made - between the minimum and maximum values. verticalCenter : Object For components, this layout constraint property is a facade on top of the similarly-named style. visible : Boolean [override] Whether or not the display object is visible. width : Number [override] Number that specifies the width of the component, in pixels, in the parent's coordinates. x : Number [override] Number that specifies the component's horizontal position, in pixels, within its parent container. y : Number [override] Number that specifies the component's vertical position, in pixels, within its parent container.\n\nuint Color yes halo\n\n Determines the color of a ProgressBar. A ProgressBar is filled with a vertical gradient between this color and a brighter color computed from it. This style has no effect on other components, but can be set on a container to control the appearance of all progress bars found within. The default value is , which means it is not set. In this case, the style property is used. Class no\n\n Skin style for a determinate progress bar. The default value for the Halo theme is . The default value for the Spark theme is . String no\n\nThe vertical distance in pixels from the top edge of the content area to the control's baseline position. uint Color no halo\n\n Black section of a three-dimensional border, or the color section of a two-dimensional border. The default value is . String no\n\nThe vertical distance, in pixels, from the bottom edge of the component to the bottom edge of its parent container's content area. uint Color yes\n\n Color of text in the component, including the component label. The default value for the Halo theme is . The default value for the Spark theme is . String yes\n\n The directionality of the text displayed by the component. The allowed values are for left-to-right text, as in Latin-style scripts, and for right-to-left text, as in Arabic and Hebrew. FTE and TLF use this value in their bidirectional text layout algorithm, which maps Unicode character order to glyph order. Note: This style only applies when an MX component specifies UIFTETextField as its . The also affects the alignment of the text within the bounds of the TLFTextField. It does not, however, affect the the placement of the TLFTextField within the component. The default value is . uint Color yes\n\n Color of text in the component if it is disabled. The default value is . uint Color yes\n\nColor of the component highlight when validation fails. String no\n\nBlend mode used by the focus rectangle. Class no\n\nSkin used to draw the focus rectangle. Number Length no\n\nThickness, in pixels, of the focus rectangle outline. String yes\n\n Sets the property of internal TextFields. The possible values are ( ) and ( ). The default value is , which enables advanced anti-aliasing for the font. Set to to disable the advanced anti-aliasing. This style has no effect for system fonts. This style applies to all the text in a TextField subcontrol; you cannot apply it to some characters and not others. The default value is . String yes\n\n Name of the font to use. Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default font for the Halo theme is . The default font for the Spark theme is . String yes\n\n Sets the property of internal TextFields that represent text in Flex controls. The possible values are ( ), ( ), and ( ). This property only applies when you are using an embedded font and the property is set to . This style has no effect for system fonts. This style applies to all the text in a TextField subcontrol; you can't apply it to some characters and not others. The default value is . Number yes\n\n Sets the property of internal TextFields that represent text in Flex controls. This property specifies the sharpness of the glyph edges. The possible values are Numbers from -400 through 400. This property only applies when you are using an embedded font and the property is set to . This style has no effect for system fonts. This style applies to all the text in a TextField subcontrol; you can't apply it to some characters and not others. The default value is . Number Length yes\n\n Height of the text, in pixels. In the Halo theme, the default value is 10 for all controls except the ColorPicker control. For the Halo themed ColorPicker control, the default value is 11. In the Spark theme, the default value is 12 for all controls except the ColorPicker control. For the Spark themed ColorPicker control, the default value is 11. String yes\n\n Determines whether the text is italic font. Recognized values are and . The default value is . Number yes\n\n Sets the property of internal TextFields that represent text in Flex controls. This property specifies the thickness of the glyph edges. The possible values are Numbers from -200 to 200. This property only applies when you are using an embedded font and the property is set to . This style has no effect on system fonts. This style applies to all the text in a TextField subcontrol; you can't apply it to some characters and not others. The default value is . String yes\n\n Determines whether the text is boldface. Recognized values are and . The default value for Button controls is . The default value for all other controls is . String no\n\nThe horizontal distance in pixels from the center of the component's content area to the center of the component. Number Length no\n\n Number of pixels between children in the horizontal direction. The default value depends on the component class; if not overridden for the class, the default value is 8. Number no\n\n The number of pixels to move the indeterminate progress bar for each indeterminate loop. Once the progress bar has moved the specified number of pixels, it gets respositioned back to its starting point. A value of 0 means that the bar is not moved. The default value for the Halo theme is . The default value for the Spark theme is . Class no\n\n Skin style for an indeterminate progress bar. The default value for the Halo theme is . The default value for the Spark theme is . Boolean yes\n\n A Boolean value that indicates whether kerning is enabled ( ) or disabled ( ). Kerning adjusts the gap between certain character pairs to improve readability, and should be used only when necessary, such as with headings in large fonts. Kerning is supported for embedded fonts only. Certain fonts, such as Verdana, and monospaced fonts, such as Courier New, do not support kerning. The default value is . Number Length yes\n\n The width of the label in pixels. If the value is NaN, the ProgressBar control sets it to the width of the control. The default value is . Number Length yes\n\n Additional vertical space between lines of text. The default value for the ComboBox control is 0. String no\n\nThe horizontal distance, in pixels, from the left edge of the component to the left edge of its parent container's content area. Number yes\n\n The number of additional pixels to appear between each character. A positive value increases the character spacing beyond the normal spacing, while a negative value decreases it. The default value is . String yes\n\n The locale of the text displayed by this component. FTE and TLF use this locale to map Unicode characters to font glyphs and to find fallback fonts. Note: This style only applies when an MX component specifies UIFTETextField as its . The default value is . Class no\n\n Skin style for the mask of the determinate and indeterminate bars. The default value for the Halo theme is . The default value for the Spark theme is . Number Length no\n\n Number of pixels between the component's left border and the left edge of its content area. The default value for a Button control in the Halo theme is 10 and in the Spark theme is 6. The default value for the ComboBox control is 5. The default value for the Form container is 16. The default value for the Tree control is 2. Number Length no\n\n Number of pixels between the component's right border and the right edge of its content area. The default value for a Button control in the Halo theme is 10 and in the Spark theme is 6. The default value for the ComboBox control is 5. The default value for the Form container is 16. String no\n\nThe horizontal distance, in pixels, from the right edge of the component to the right edge of its parent container's content area. Boolean yes\n\nShow the error border or skin when this component is invalid. Boolean yes\n\nShow the error tip when this component is invalid and the user rolls over it. String yes\n\n Alignment of text within a container. Possible values are , , or . The default value for most components is . For the FormItem component, the default value is . For the Button, LinkButton, and AccordionHeader components, the default value is , and this property is only recognized when the property is set to or . If is set to or , the text and any icon are centered. String yes\n\n Determines whether the text is underlined. Possible values are and . The default value is . Class no\n\n The class implementing IUITextField that is used by this component to render text. It can be set to either the mx.core.UITextField class (to use the classic TextField class built into Flash Player) or the mx.core.UIFTETextField class (to use the Text Layout Framework to get improved text rendering, including bidirectional layout). The default value is . Number Length yes\n\n Offset of first line of text from the left side of the container, in pixels. The default value is . uint Color yes halo\n\n Theme color of the ProgressBar control. Possible values are haloGreen, haloBlue, and haloOrange. Adobe recommends setting the style in the tag, instead of in individual controls. The default value is . String no\n\nThe vertical distance, in pixels, from the top edge of the component to the top edge of its parent container's content area. Array Color no halo\n\n The colors of the track, as an array of two colors. You can use the same color twice for a solid track color. The default value is . Number Length no\n\n The height of the track in pixels. If the value is NaN, then use the height of the skin specified by the property. The default value is . Class no\n\n Skin style for the progress indicator track. The default value for the Halo theme is . The default value for the Spark theme is . String no\n\nThe vertical distance in pixels from the center of the component's content area to the center of the component. Number Length no\n\n Number of pixels between children in the vertical direction. The default value depends on the component class; if not overridden for the class, the default value is 6.\n\nNumber used to convert incoming current bytes loaded value and the total bytes loaded values. Flex divides the current and total values by this property and uses the closest integer that is less than or equal to each value in the label string. A value of 1 does no conversion. This property can be used as the source for data binding. \n\n\n\n \n\n \n\n Direction in which the fill of the ProgressBar expands toward completion. Valid values in MXML are and . In ActionScript, you use use the following constants to set this property: and . The default value is . This property can be used as the source for data binding. \n\n\n\n \n\n \n\n Whether the ProgressBar control has a determinate or indeterminate appearance. Use an indeterminate appearance when the progress status cannot be determined. If , the appearance is indeterminate. The default value is . This property can be used as the source for data binding. \n\n\n\n \n\n \n\n Text that accompanies the progress bar. You can include the following special characters in the text string: If a field is unknown, it is replaced by \"??\". If undefined, the label is not displayed. If you are in manual mode, you can set the values of these special characters by using the method. The default value is . This property can be used as the source for data binding. \n\n\n\n \n\n \n\n Placement of the label. Valid values in MXML are , , , , and . In ActionScript, you can use use the following constants to set this property: , , , , and . The default value is . This property can be used as the source for data binding. \n\n\n\n \n\n \n\n Largest progress value for the ProgressBar. You can only use this property in manual mode. This property can be used as the source for data binding. \n\n\n\n \n\n \n\n Smallest progress value for the ProgressBar. This property is set by the developer only in manual mode. This property can be used as the source for data binding. \n\n\n\n \n\n \n\n Specifies the method used to update the bar. Use one of the following values in MXML:\n• The control specified by the property must dispatch progress and completed events. The ProgressBar control uses these events to update its status. The ProgressBar control only updates if the value of the property extends the EventDispatcher class.\n• The property must specify an object that exposes and properties. The ProgressBar control calls these methods to update its status.\n• You manually update the ProgressBar status. In this mode you specify the and properties and use the property method to specify the status. This mode is often used when the property is . In ActionScript, you can use use the following constants to set this property: , , and . The default value is . This property can be used as the source for data binding. \n\n\n\n \n\n \n\n [read-only] Percentage of process that is completed.The range is 0 to 100. Use the method to change the percentage. This property can be used as the source for data binding. \n\n\n\n \n\n Refers to the control that the ProgressBar is measuring the progress of. Use this property only in event and polled mode. A typical usage is to set this property to a Loader control. This property can be used as the source for data binding. \n\n\n\n \n\n \n\n [read-only] Read-only property that contains the amount of progress that has been made - between the minimum and maximum values. This property can be used as the source for data binding. \n\n\n\n \n\n Sets the state of the bar to reflect the amount of progress made when using manual mode. The argument is assigned to the property and the argument is assigned to the property. The property is not altered. \n\n \n\n Dispatched when an object's state changes from visible to invisible. The constant defines the value of the property of the event object for a event. Theconstant defines the value of theproperty of the event object for aevent. The properties of the event object have the following values: The Object that defines the event listener that handles the event. For example, if you use to register an event listener, myButton is the value of the . The Object that dispatched the event; it is not always the Object listening for the event. Use the property to always access the Object listening for the event. \n\n \n\n Dispatched as content loads in event or polled mode. \n\n \n\n Dispatched when the component becomes visible. The constant defines the value of the property of the event object for a event. Theconstant defines the value of theproperty of the event object for aevent. The properties of the event object have the following values: The Object that defines the event listener that handles the event. For example, if you use to register an event listener, myButton is the value of the . The Object that dispatched the event; it is not always the Object listening for the event. Use the property to always access the Object listening for the event. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> <!-- Simple example to demonstrate the Halo ProgressBar control. --> <s:Application xmlns:fx=\"http://ns.adobe.com/mxml/2009\" xmlns:s=\"library://ns.adobe.com/flex/spark\" xmlns:mx=\"library://ns.adobe.com/flex/mx\"> <fx:Script> <![CDATA[ private var j:uint = 0; // Event handler function to set the value of the // Halo ProgressBar control. private function runit():void { if (j < 100) { j += 10; } else if (j >= 100) { j = 0; } bar.setProgress(j, 100); bar.label = \"Current Progress: \" + j + \"%\"; } ]]> </fx:Script> <s:Panel title=\"Halo ProgressBar Control Example\" width=\"75%\" height=\"75%\" horizontalCenter=\"0\" verticalCenter=\"0\"> <s:VGroup left=\"10\" right=\"10\" top=\"10\" bottom=\"10\"> <s:Label width=\"100%\" color=\"blue\" text=\"Click the button to increment the progress bar.\" /> <s:Button id=\"Speed\" label=\"Run\" click=\"runit();\"/> <mx:ProgressBar id=\"bar\" labelPlacement=\"bottom\" chromeColor=\"red\" minimum=\"0\" visible=\"true\" maximum=\"100\" label=\"CurrentProgress 0%\" direction=\"right\" mode=\"manual\" width=\"100%\"/> </s:VGroup> </s:Panel> </s:Application>"
    },
    {
        "link": "https://stackoverflow.com/questions/19899249/displaying-progress-bar-for-long-running-process-in-actionscript-flash-builder-w",
        "document": "I'm working on an application that processes (possibly large reaching one or two million lines) text (in tab separated form) files containing detail of items and since the processing time can be long I want to update a progress bar so the user knows that the application didn't just hang, or better, to provide an idea of the remaining time.\n\nI've already researched and I know how to update a simple progress bar but the examples tend to be simplistic as to call something like progressBar.setProgress(counter++, 100) using Timer, there are other examples where the logic is simple and written in the same class. I'm also new to the language having done mostly Java and some JavaScript in the past, among others.\n\nI wrote the logic for processing the file (validation of input and creation of output files). But then, if I call the processing logic in the main class the update will be done at the end of processing (flying by so fast from 0 to 100) no matter if I update variables and try to dispatch events or things like that; the bar won't reflect the processing progress.\n\nWould processing the input by chunks be a valid approach? And then, I'm not sure if the processing delay of one data chunk won't affect the processing of the next chunk and so on, because the timer tick is set to be 1 millisecond and the chunk processing time would be longer than that. Also, if the order of the input won't be affected or the result will get corrupted in some way. I've read multithreading is not supported in the language, so should that be a concern?\n\nI already coded the logic described before and it seems to work:\n\nThe declaration for the progress bar is as follows:\n\nI tested it with an input of 50000 lines and it seems to work generating the same result as the other approach that processes the input at once. But, would that be a valid approach or is there a better approach?"
    },
    {
        "link": "https://home.csulb.edu/~arezaei/ETEC570/Action%20script%203.pdf",
        "document": ""
    },
    {
        "link": "https://dl.icdst.org/pdfs/files/0f48b384430965fe36fd4db403d59b6f.pdf",
        "document": ""
    },
    {
        "link": "https://lazka.github.io/pgi-docs/Gtk-3.0/classes/ProgressBar.html",
        "document": "The is typically used to display the progress of a long running operation. It provides a visual clue that processing is underway. The can be used in two different modes: percentage mode and activity mode.\n\nWhen an application can determine how much work needs to take place (e.g. read a fixed number of bytes from a file) and can monitor its progress, it can use the in percentage mode and the user sees a growing bar indicating the percentage of the work that has been completed. In this mode, the application is required to call () periodically to update the progress bar.\n\nWhen an application has no accurate way of knowing the amount of work to do, it can use the in activity mode, which shows activity by a block moving back and forth within the progress area. In this mode, the application is required to call () periodically to update the progress bar.\n\nThere is quite a bit of flexibility provided to control the appearance of the . Functions are provided to control the orientation of the bar, optional text can be displayed along with the bar, and the step size used in activity mode can be set.\n\nhas a main CSS node with name progressbar and subnodes with names text and trough, of which the latter has a subnode named progress. The text subnode is only present if text is shown. The progress subnode has the style class .pulse when in activity mode. It gets the style classes .left, .right, .top or .bottom added when the progress ‘touches’ the corresponding end of the . The .osd class on the progressbar node is for use in overlays like the one Epiphany has for page loading progress.\n\nCauses the given to appear next to the progress bar. If is and is , the current value of will be displayed as a percentage. If is non- and is , the text will be displayed. In this case, it will not display the progress percentage. If is the empty string, the progress bar will still be styled and sized suitably for containing text, as long as is ."
    },
    {
        "link": "https://airsdk.dev/reference/actionscript/3.0/flash/net/URLLoader.html",
        "document": "For more information related to security, see the Flash Player Developer Center Topic: Security .\n\nWhen you use this class in Flash Player and in AIR application content in security sandboxes other than then application security sandbox, consider the following security model:\n\nWhen loading very large video files, such as FLV's, out-of-memory errors may occur.\n\nA URLLoader object downloads all of the data from a URL before making it available to code in the applications. It sends out notifications about the progress of the download, which you can monitor through the bytesLoaded and bytesTotal properties, as well as through dispatched events.\n\nThe URLLoader class downloads data from a URL as text, binary data, or URL-encoded variables. It is useful for downloading text files, XML, or other information to be used in a dynamic, data-driven application.\n\nControls whether the downloaded data is received as text ( URLLoaderDataFormat.TEXT ), raw binary data ( URLLoaderDataFormat.BINARY ), or URL-encoded variables ( URLLoaderDataFormat.VARIABLES ).\n\nA reference to the class object or constructor function for a given object instance.\n\nIndicates the total number of bytes in the downloaded data.\n\nIndicates the number of bytes that have been loaded thus far during the load operation.\n\nChecks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.\n\nReturns the primitive value of the specified object.\n\nReturns the string representation of this object, formatted according to locale-specific conventions.\n\nIndicates whether the specified property exists and is enumerable.\n\nIndicates whether an instance of the Object class is in the prototype chain of the object specified as the parameter.\n\nIndicates whether an object has a specified property defined.\n\nChecks whether the EventDispatcher object has any listeners registered for a specific type of event.\n\nRegisters an event listener object with an EventDispatcher object so that the listener receives notification of an event.\n\nThe data received from the load operation. This property is populated only when the load operation is complete. The format of the data depends on the setting of the property: If the property is , the received data is a string containing the text of the loaded file. If the property is , the received data is a ByteArray object containing the raw binary data. If the property is , the received data is a URLVariables object containing the URL-encoded variables. \n\n \n\nThe following example shows how you can load an external text file with URL encoded variables into an ActionScript 3.0 document using the URLLoader class and setting the dataFormat property to the URLLoaderDataFormat.VARIABLES constant (\"variables\"). Example provided by //params.txt is a local file that includes: firstName=Tom&lastName=Jones var lbl:TextField = new TextField(); var urlRequest:URLRequest = new URLRequest(\"params.txt\"); var urlLoader:URLLoader = new URLLoader(); urlLoader.dataFormat = URLLoaderDataFormat.VARIABLES; urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete); urlLoader.load(urlRequest); function urlLoader_complete(evt:Event):void { lbl.text = urlLoader.data.lastName + \",\" + urlLoader.data.firstName; addChild(lbl); } The following example shows how you can load an external text file with URL encoded variables into an ActionScript 3.0 document using the URLLoader class and setting the dataFormat property to the URLLoaderDataFormat.VARIABLES constant (\"variables\"). Example provided by ActionScriptExamples.com\n\nControls whether the downloaded data is received as text ( ), raw binary data ( ), or URL-encoded variables ( ). If the value of the property is , the received data is a string containing the text of the loaded file. If the value of the property is , the received data is a ByteArray object containing the raw binary data. If the value of the property is , the received data is a URLVariables object containing the URL-encoded variables. The default value is . \n\n \n\nThe following example shows how you can load external text files. Use the URLRequest and URLLoader classes, and then listen for the complete event. Example provided by The following example shows how you can load external text files. Use the URLRequest and URLLoader classes, and then listen for the complete event. Example provided by ActionScriptExamples.com\n\nRegisters an event listener object with an EventDispatcher object so that the listener receives notification of an event. You can register event listeners on all nodes in the display list for a specific type of event, phase, and priority. JavaScript code in the AIR runtime uses this method to register event listeners for events defined by the AIR APIs. For other JavaScript events (such as the event of the DOM object), you can use standard event handling techniques, as you would for content running in the browser. After you successfully register an event listener, you cannot change its priority through additional calls to . To change a listener's priority, you must first call . Then you can register the listener again with the new priority level. Keep in mind that after the listener is registered, subsequent calls to with a different or value result in the creation of a separate listener registration. For example, if you first register a listener with set to , it listens only during the capture phase. If you call again using the same listener object, but with set to , you have two separate listeners: one that listens during the capture phase and another that listens during the target and bubbling phases. You cannot register an event listener for only the target phase or the bubbling phase. Those phases are coupled during registration because bubbling applies only to the ancestors of the target node. If you no longer need an event listener, remove it by calling , or memory problems could result. Event listeners are not automatically removed from memory because the garbage collector does not remove the listener as long as the dispatching object exists (unless the parameter is set to ). Copying an EventDispatcher instance does not copy the event listeners attached to it. (If your newly created node needs an event listener, you must attach the listener after creating the node.) However, if you move an EventDispatcher instance, the event listeners attached to it move along with it. If the event listener is being registered on a node while an event is being processed on this node, the event listener is not triggered during the current phase but can be triggered during a later phase in the event flow, such as the bubbling phase. If an event listener is removed from a node while an event is being processed on the node, it is still triggered by the current actions. After it is removed, the event listener is never invoked again (unless registered again for future processing). — The listener function that processes the event. This function must accept an Event object as its only parameter and must return nothing The function can have any name. (default = ) — This parameter applies to display objects in the ActionScript 3.0 display list architecture, used by SWF content. Determines whether the listener works in the capture phase or the target and bubbling phases. If is set to , the listener processes the event only during the capture phase and not in the target or bubbling phase. If is , the listener processes the event only during the target or bubbling phase. To listen for the event in all three phases, call twice, once with set to , then again with set to . (default = ) — The priority level of the event listener. The priority is designated by a signed 32-bit integer. The higher the number, the higher the priority. All listeners with priority n are processed before listeners of priority n-1. If two or more listeners share the same priority, they are processed in the order in which they were added. The default priority is 0. (default = ) — Determines whether the reference to the listener is strong or weak. A strong reference (the default) prevents your listener from being garbage-collected. A weak reference does not. Class-level member functions are not subject to garbage collection, so you can set to for class-level member functions without subjecting them to garbage collection. If you set to for a listener that is a nested inner function, the function will be garbage-collected and no longer persistent. If you create references to the inner function (save it in another variable) then it is not garbage-collected and stays persistent.\n\nSends and loads data from the specified URL. The data can be received as text, raw binary data, or URL-encoded variables, depending on the value you set for the property. Note that the default value of the property is text. If you want to send data to the specified URL, you can set the property in the URLRequest object. Note: If a file being loaded contains non-ASCII characters (as found in many non-English languages), it is recommended that you save the file with UTF-8 or UTF-16 encoding as opposed to a non-Unicode format like ASCII. A SWF file in the local-with-filesystem sandbox may not load data from, or provide data to, a resource that is in the network sandbox. By default, the calling SWF file and the URL you load must be in exactly the same domain. For example, a SWF file at www.adobe.com can load data only from sources that are also at www.adobe.com. To load data from a different domain, place a URL policy file on the server hosting the data. You cannot connect to commonly reserved ports. For a complete list of blocked ports, see \"Restricting Networking APIs\" in the ActionScript 3.0 Developer's Guide. In Flash Player 10 and later, if you use a multipart Content-Type (for example \"multipart/form-data\") that contains an upload (indicated by a \"filename\" parameter in a \"content-disposition\" header within the POST body), the POST operation is subject to the security rules applied to uploads:\n• The POST operation must be performed in response to a user-initiated action, such as a mouse click or key press.\n• If the POST operation is cross-domain (the POST target is not on the same server as the SWF file that is sending the POST request), the target server must provide a URL policy file that permits cross-domain access. Also, for any multipart Content-Type, the syntax must be valid (according to the RFC2046 standards). If the syntax appears to be invalid, the POST operation is subject to the security rules applied to uploads. For more information related to security, see the Flash Player Developer Center Topic: Security. — A URLRequest object specifying the URL to download. \n\n — If access is over HTTP, and the current Flash Player environment supports obtaining status codes, you may receive these events in addition to any or event. — The load operation could not be completed. — Dispatched when data is received as the download operation progresses. — A load operation attempted to retrieve data from a server outside the caller's security sandbox. This may be worked around using a policy file on the server. — A load operation attempted to load a SWZ file (a Adobe platform component), but the certificate is invalid or the digest does not match the component. — Dispatched if a call to the method attempts to access data over HTTP and Adobe AIR is able to detect and return the status code for the request. \n\n — objects may not contain certain prohibited HTTP request headers. For more information, see the URLRequestHeader class description. — This error can occur for the following reasons: 1) AIR cannot convert the parameter from UTF8 to MBCS. This error is applicable if the URLRequest object passed to is set to perform a operation and if is set to . 2) AIR cannot allocate memory for the data. This error is applicable if the URLRequest object passed to is set to perform a operation. — Local untrusted files may not communicate with the Internet. This may be worked around by reclassifying this file as local-with-networking or trusted. — You are trying to connect to a commonly reserved port. For a complete list of blocked ports, see \"Restricting Networking APIs\" in the ActionScript 3.0 Developer's Guide. — The value of the request parameter or the property of the URLRequest object passed are . \n\n \n\nIn the following example, an XML files is loaded and the content of its elements' first arguments are displayed in a text field. In the following example, an XML files is loaded and the content of its elements' first arguments are displayed in a text field. A object is created to identify the location of the XML file, which for this example is in the same directory as the SWF file. The file is loaded in a block in order to catch any error that may occur. (Here we catch the errors.) If an event occurs, the method is invoked, which writes an error message in the text field. Once the XML file data is received and place in the data property of the URLLoader object, the event is dispatched and the method is invoked. In the method, a block is used to catch any parsing error that may occur while converting the loaded data from the file into an XML object. The method then recursively goes through all the elements in the nodes of the XML document and appends the text field with a list of the first attributes of all the elements. package { import flash.display.Sprite; import flash.events.Event; import flash.net.URLLoader; import flash.net.URLRequest; import flash.text.TextField; import flash.text.TextFieldAutoSize; import flash.xml.*; import flash.events.IOErrorEvent; public class URLLoader_loadExample extends Sprite { private var xmlTextField:TextField = new TextField(); private var externalXML:XML; private var loader:URLLoader; public function URLLoader_loadExample() { var request:URLRequest = new URLRequest(\"xmlFile.xml\"); loader = new URLLoader(); try { loader.load(request); } catch (error:SecurityError) { trace(\"A SecurityError has occurred.\"); } loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler); loader.addEventListener(Event.COMPLETE, loaderCompleteHandler); xmlTextField.x = 10; xmlTextField.y = 10; xmlTextField.background = true; xmlTextField.autoSize = TextFieldAutoSize.LEFT; addChild(xmlTextField); } private function loaderCompleteHandler(event:Event):void { try { externalXML = new XML(loader.data); readNodes(externalXML); } catch (e:TypeError) { trace(\"Could not parse the XML file.\"); } } private function readNodes(node:XML):void { for each (var element:XML in node.elements()) { xmlTextField.appendText(element.attributes()[0] + \"\n\n\"); readNodes(element); } } private function errorHandler(e:IOErrorEvent):void { xmlTextField.text = \"Had problem loading the XML File.\"; } } }\n\n\n\n \n\n Dispatched if a call to URLLoader.load() attempts to load data from a server with an invalid certificate (for example, self-signed or untrusted, or with an invalid date). If a listener is added, any operating system standard behaviour will be ignored, instead the default action will be to close down the connection. To allow the default connection, you can call the function on the error object. The constant is used when the runtime detects a problem with a server's security certificate. This event is then dispatched, giving the application the chance to handle this and determine whether to allow the connection or to block it (which is the default behaviour). To allow it, call on the error object. Note that not handling this error type will result in the default operating system behaviour - typically, a message will be displayed to the end user to allow them to choose the action. This event has the following properties: ; default behavior is to close the connection, use to allow it. The object that is actively processing the Event object with an event listener. Text to be displayed as an error message.\n\n\n\n \n\n Dispatched if a call to the load() method attempts to access data over HTTP, and Adobe AIR is able to detect and return the status code for the request. Unlike the event, the event is delivered before any response data. Also, the event includes values for the and properties (which are undefined for an event. Note that the event (if any) will be sent before (and in addition to) any or event. The constant defines the value of the property of a event object. This event has the following properties: ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. The URL from which the response was returned. The response headers that the response returned, as an array of URLRequestHeader objects. The HTTP status code returned by the server. Whether the reponse is the result of a redierct."
    },
    {
        "link": "https://stackoverflow.com/questions/14391317/as3-air-mobile-urlloader-progress-bar",
        "document": "I have an app (for iOS and Android) which has the ability for users to select an image from the cameraroll or take an image using the cameraui. After selecting the image it is then uploaded to a server using urlloader and urlrequestwrapper class. This all works great but I need to display a percentage uploaded progress text/bar to the user but having real trouble finding a solution."
    },
    {
        "link": "https://stackoverflow.com/questions/2930513/monitoring-file-upload-progress-in-actionscript-3",
        "document": "Well, I found this question when stumbling to a similar problem. I have a multiple file upload applet. I am monitoring two pieces of progress: each file individually and the total number of files. The latter works as expected because it is done manually but the firs one fails exactly the same way. Adding a trace reveals a nasty behaviour:\n\nMy upload is around 500 kbps so each file takes several seconds but as you can see in all cases except the first file only one event per file is fired and immediately after the start and at 100%.\n\nUPDATE UPDATE: Found out! After deinstalling AVG Antivirus the progress event worked EXACTLY the way it should. Some people with NOD have experienced the same problems as well. So this seems to be the problem of AV/Firewall applications. AVG Free has no firewall included but it still seems to break the upload."
    },
    {
        "link": "https://cs.vu.nl/~eliens/assets/flex3/langref/flash/net/URLLoader.html",
        "document": "The URLLoader class downloads data from a URL as text, binary data, or URL-encoded variables. It is useful for downloading text files, XML, or other information to be used in a dynamic, data-driven application. The URLLoader class downloads data from a URL as text, binary data, or URL-encoded variables. It is useful for downloading text files, XML, or other information to be used in a dynamic, data-driven application. A URLLoader object downloads all of the data from a URL before making it available to code in the applications. It sends out notifications about the progress of the download, which you can monitor through the and properties, as well as through dispatched events. The value you pass for the parameter must, by default, be in exactly the same domain. For example, a file at www.adobe.com can load data only from sources that are also at www.adobe.com. To load data from a different domain, place a cross-domain policy file on the server hosting the data. However, AIR application content in the application security domain can access content from any domain. When you use this class in Flash Player and in AIR application content in security sandboxes other than then application security sandbox, consider the following security model: For Flash Player 8 and later:\n• Data loading is not allowed if the calling file is in the local-with-file-system sandbox and the target resource is from a network sandbox.\n• Data loading is also not allowed if the calling file is from a network sandbox and the target resource is local. However, in Adobe AIR, content in the security sandbox (content installed with the AIR application) are not restricted by these security limitations. For Flash Player 7 and later:\n• Websites can permit cross-domain access to a resource through a cross-domain policy file.\n• In SWF files of any version running in Flash Player 7 and later, must be in exactly the same domain. For example, a SWF file at www.adobe.com can load data only from sources that are also at www.adobe.com. In SWF files that are running in a version of the player earlier than Flash Player 7, must be in the same superdomain as the SWF file that is issuing this call. A superdomain is derived by removing the leftmost component of a file's URL. For example, a SWF file at www.adobe.com can load data from sources at store.adobe.com because both files are in the same superdomain named adobe.com. For more information, see the following:\n• The security chapter in the Programming ActionScript 3.0 book and the latest comments on LiveDocs\n• The \"Understanding AIR Security\" section of the \"Getting started with Adobe AIR\" chapter in the Developing AIR Applications book. \n\n\n\nIndicates the number of bytes that have been loaded thus far during the load operation. Indicates the total number of bytes in the downloaded data. This property contains 0 while the load operation is in progress and is populated when the operation is complete. Also, a missing Content-Length header will result in bytesTotal being indeterminate. The data received from the load operation. This property is populated only when the load operation is complete. The format of the data depends on the setting of the property: If the property is , the received data is a string containing the text of the loaded file. If the property is , the received data is a ByteArray object containing the raw binary data. If the property is , the received data is a URLVariables object containing the URL-encoded variables. Controls whether the downloaded data is received as text ( ), raw binary data ( ), or URL-encoded variables ( ). If the value of the property is , the received data is a string containing the text of the loaded file. If the value of the property is , the received data is a ByteArray object containing the raw binary data. If the value of the property is , the received data is a URLVariables object containing the URL-encoded variables. The default value is . (default = ) — A URLRequest object specifying the URL to download. If this parameter is omitted, no load operation begins. If specified, the load operation begins immediately (see the entry for more information). Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event. You can register event listeners on all nodes in the display list for a specific type of event, phase, and priority. After you successfully register an event listener, you cannot change its priority through additional calls to . To change a listener's priority, you must first call . Then you can register the listener again with the new priority level. Keep in mind that after the listener is registered, subsequent calls to with a different or value result in the creation of a separate listener registration. For example, if you first register a listener with set to , it listens only during the capture phase. If you call again using the same listener object, but with set to , you have two separate listeners: one that listens during the capture phase and another that listens during the target and bubbling phases. You cannot register an event listener for only the target phase or the bubbling phase. Those phases are coupled during registration because bubbling applies only to the ancestors of the target node. If you no longer need an event listener, remove it by calling , or memory problems could result. Objects with registered event listeners are not automatically removed from memory because the garbage collector does not remove objects that still have references. Copying an EventDispatcher instance does not copy the event listeners attached to it. (If your newly created node needs an event listener, you must attach the listener after creating the node.) However, if you move an EventDispatcher instance, the event listeners attached to it move along with it. If the event listener is being registered on a node while an event is being processed on this node, the event listener is not triggered during the current phase but can be triggered during a later phase in the event flow, such as the bubbling phase. If an event listener is removed from a node while an event is being processed on the node, it is still triggered by the current actions. After it is removed, the event listener is never invoked again (unless registered again for future processing). — The listener function that processes the event. This function must accept an Event object as its only parameter and must return nothing The function can have any name. (default = ) — Determines whether the listener works in the capture phase or the target and bubbling phases. If is set to , the listener processes the event only during the capture phase and not in the target or bubbling phase. If is , the listener processes the event only during the target or bubbling phase. To listen for the event in all three phases, call twice, once with set to , then again with set to . (default = ) — The priority level of the event listener. The priority is designated by a signed 32-bit integer. The higher the number, the higher the priority. All listeners with priority n are processed before listeners of priority n-1. If two or more listeners share the same priority, they are processed in the order in which they were added. The default priority is 0. (default = ) — Determines whether the reference to the listener is strong or weak. A strong reference (the default) prevents your listener from being garbage-collected. A weak reference does not. Class-level member functions are not subject to garbage collection, so you can set to for class-level member functions without subjecting them to garbage collection. If you set to for a listener that is a nested inner function, the function will be garbage-collected and no longer persistent. If you create references to the inner function (save it in another variable) then it is not garbage-collected and stays persistent. Closes the load operation in progress. Any load operation in progress is immediately terminated. If no URL is currently being streamed, an invalid stream error is thrown. Sends and loads data from the specified URL. The data can be received as text, raw binary data, or URL-encoded variables, depending on the value you set for the property. Note that the default value of the property is text. If you want to send data to the specified URL, you can set the property in the URLRequest object. Note: If a file being loaded contains non-ASCII characters (as found in many non-English languages), it is recommended that you save the file with UTF-8 or UTF-16 encoding as opposed to a non-Unicode format like ASCII. By default, for Flash Player content and AIR content not in the application security domain, the URL you load must be in exactly the same domain as the calling file. For example, a file at www.adobe.com can load data only from sources that are also at www.adobe.com. To load data from a different domain, put a cross-domain policy file on the server hosting the data. In AIR applications, content in the application security sandbox can load content from any domain. When you use this method , consider the Flash Player security model: When you use this class in Flash Player and in AIR application content in security sandboxes other than then application security sandbox, consider the Flash Player security model: For Flash Player 8 and later:\n• Data loading is not allowed if the calling file is in the local-with-file-system sandbox and the target resource is from a network sandbox.\n• Data loading is also not allowed if the calling file is from a network sandbox and the target resource is local. For Flash Player 7 and later websites can permit cross-domain access to a resource through a cross-domain policy file. In files of any version running in Flash Player 7 and later, must be in exactly the same domain. For example, a file at www.adobe.com can load data only from sources that are also at www.adobe.com. In SWF files that are running in a version of the player earlier than Flash Player 7, must be in the same superdomain as the SWF file that is issuing this call. A superdomain is derived by removing the leftmost component of a file's URL. For example, a SWF file at www.adobe.com can load data from sources at store.adobe.com because both files are in the same superdomain of adobe.com. For more information, see the following:\n• The security chapter in the Programming ActionScript 3.0 book and the latest comments on LiveDocs\n• The \"Understanding AIR Security\" section of the \"Getting started with Adobe AIR\" chapter in the Developing AIR Applications book.\n• The security chapter in the Programming ActionScript 3.0 book and the latest comments on LiveDocs — A URLRequest object specifying the URL to download. \n\n — If access is over HTTP, and the current Flash Player environment supports obtaining status codes, you may receive these events in addition to any or event. — The load operation could not be completed. — Dispatched when data is received as the download operation progresses. — A load operation attempted to retrieve data from a server outside the caller's security sandbox. This may be worked around using a policy file on the server. — Dispatched if a call to the method attempts to access data over HTTP and Adobe AIR is able to detect and return the status code for the request. \n\n — objects may not contain certain prohibited HTTP request headers. For more information, see the URLRequestHeader class description. — This error can occur for the following reasons: 1) AIR cannot convert the parameter from UTF8 to MBCS. This error is applicable if the URLRequest object passed to is set to perform a operation and if is set to . 2) AIR cannot allocate memory for the data. This error is applicable if the URLRequest object passed to is set to perform a operation. — Local untrusted files may not communicate with the Internet. This may be worked around by reclassifying this file as local-with-networking or trusted. — The value of the request parameter or the property of the URLRequest object passed are . \n\n \n\n \n\n In the following example, an XML files is loaded and the content of its elements' first arguments are displayed in a text field. A object is created to identify the location of the XML file, which for this example is in the same directory as the SWF file. The file is loaded in a block in order to catch any error that may occur. (Here we catch the errors.) If an event occurs, the method is invoked, which writes an error message in the text field. Once the XML file data is received and place in the data property of the URLLoader object, the event is dispatched and the method is invoked. In the method, a block is used to catch any parsing error that may occur while converting the loaded data from the file into an XML object. The method then recursively goes through all the elements in the nodes of the XML document and appends the text field with a list of the first attributes of all the elements. package { import flash.display.Sprite; import flash.events.Event; import flash.net.URLLoader; import flash.net.URLRequest; import flash.text.TextField; import flash.text.TextFieldAutoSize; import flash.xml.*; import flash.events.IOErrorEvent; public class URLLoader_loadExample extends Sprite { private var xmlTextField:TextField = new TextField(); private var externalXML:XML; private var loader:URLLoader; public function URLLoader_loadExample() { var request:URLRequest = new URLRequest(\"xmlFile.xml\"); loader = new URLLoader(); try { loader.load(request); } catch (error:SecurityError) { trace(\"A SecurityError has occurred.\"); } loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler); loader.addEventListener(Event.COMPLETE, loaderCompleteHandler); xmlTextField.x = 10; xmlTextField.y = 10; xmlTextField.background = true; xmlTextField.autoSize = TextFieldAutoSize.LEFT; addChild(xmlTextField); } private function loaderCompleteHandler(event:Event):void { try { externalXML = new XML(loader.data); readNodes(externalXML); } catch (e:TypeError) { trace(\"Could not parse the XML file.\"); } } private function readNodes(node:XML):void { for each (var element:XML in node.elements()) { xmlTextField.appendText(element.attributes()[0] + \"\n\n\"); readNodes(element); } } private function errorHandler(e:IOErrorEvent):void { xmlTextField.text = \"Had problem loading the XML File.\"; } } } \n\n \n\n Dispatched after all the received data is decoded and placed in the property of the URLLoader object. The received data may be accessed once this event has been dispatched. The constant defines the value of the property of a event object. Theconstant defines the value of theproperty of aevent object. This event has the following properties: ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. The network object that has completed loading. \n\n \n\n Dispatched if a call to the method attempts to access data over HTTP, and Adobe AIR is able to detect and return the status code for the request. Unlike the event, the event is delivered before any response data. Also, the event includes values for the and properties (which are undefined for an event. Note that the event (if any) will be sent before (and in addition to) any or event. Unlike theevent, theevent is delivered before any response data. Also, theevent includes values for theandproperties (which are undefined for anevent. Note that theevent (if any) will be sent before (and in addition to) anyorevent. The constant defines the value of the property of a event object. This event has the following properties: ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. The URL from which the response was returned. The response headers that the response returned, as an array of URLRequestHeader objects. The HTTP status code returned by the server. \n\n \n\n Dispatched if a call to attempts to access data over HTTP. For content running in Flash Player, this event is only dispatched if the current Flash Player environment is able to detect and return the status code for the request. (Some browser environments may not be able to provide this information.) Note that the event (if any) is sent before (and in addition to) any or event. The constant defines the value of the property of a event object. Theconstant defines the value of theproperty of aevent object. This event has the following properties: ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. The HTTP status code returned by the server. \n\n \n\n Dispatched if a call to results in a fatal error that terminates the download. Defines the value of the property of an event object. Defines the value of theproperty of anevent object. This event has the following properties: ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. A reference number associated with the specific error. Text to be displayed as an error message. \n\n \n\n Dispatched when the download operation commences following a call to the method. The constant defines the value of the property of an event object. Theconstant defines the value of theproperty of anevent object. This event has the following properties: ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. The network object that has opened a connection. \n\n \n\n Dispatched when data is received as the download operation progresses. Note that with a URLLoader object, it is not possible to access the data until it has been received completely. So, the progress event only serves as a notification of how far the download has progressed. To access the data before it's entirely downloaded, use a URLStream object. Defines the value of the property of a event object. Defines the value of theproperty of aevent object. This event has the following properties: The number of items or bytes loaded at the time the listener processes the event. The total number of items or bytes that ultimately will be loaded if the loading process succeeds. ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. \n\n \n\n Dispatched if a call to attempts to load data from a server outside the security sandbox. The constant defines the value of the property of a event object. Theconstant defines the value of theproperty of aevent object. This event has the following properties: ; there is no default behavior to cancel. The object that is actively processing the Event object with an event listener. Text to be displayed as an error message. How to use examples \n\n The following example loads and displays the data found in a local text file. It also traces event handling information. Note: To run this example, put a file named urlLoaderExample.txt in the same directory as your SWF file. That file should only contain the following line of text: The example code does the following:\n• The constructor function creates a URLLoader instance named and a URLRequest instance named , which contains the location and name of the file to be loaded.\n• The object is passed to the method, which adds listeners for each of the supported URLLoader events.\n• The object is then passed to , which loads the text file.\n• When the URLLoader has finished loading the text file the fires, triggering the method. The method creates a URLVariables object from the text loaded from the file. The URLVariables object converts URL-encoded name/value pairs into ActionScript properties to make it easier to manipulate the loaded data. package { import flash.display.Sprite; import flash.events.*; import flash.net.*; public class URLLoaderExample extends Sprite { public function URLLoaderExample() { var loader:URLLoader = new URLLoader(); configureListeners(loader); var request:URLRequest = new URLRequest(\"urlLoaderExample.txt\"); try { loader.load(request); } catch (error:Error) { trace(\"Unable to load requested document.\"); } } private function configureListeners(dispatcher:IEventDispatcher):void { dispatcher.addEventListener(Event.COMPLETE, completeHandler); dispatcher.addEventListener(Event.OPEN, openHandler); dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler); dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler); dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler); dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler); } private function completeHandler(event:Event):void { var loader:URLLoader = URLLoader(event.target); trace(\"completeHandler: \" + loader.data); var vars:URLVariables = new URLVariables(loader.data); trace(\"The answer is \" + vars.answer); } private function openHandler(event:Event):void { trace(\"openHandler: \" + event); } private function progressHandler(event:ProgressEvent):void { trace(\"progressHandler loaded:\" + event.bytesLoaded + \" total: \" + event.bytesTotal); } private function securityErrorHandler(event:SecurityErrorEvent):void { trace(\"securityErrorHandler: \" + event); } private function httpStatusHandler(event:HTTPStatusEvent):void { trace(\"httpStatusHandler: \" + event); } private function ioErrorHandler(event:IOErrorEvent):void { trace(\"ioErrorHandler: \" + event); } } }"
    },
    {
        "link": "https://andrewnoske.com/wiki/ActionScript_-_loading_and_saving_data",
        "document": "There are a number of ways Adobe Flash can save data, but in this article, we focus on the use of Action Script 3 (AS3) to upload and download data via HTML POST requests to server-side pages. I started this article when I had the need to use AS3 to upload and retrieve dynamically generated images and text to a database via PHP pages. Searching the web I found a huge number of posts - some better than others, so here I intend to consolidate some of the best solutions I have found.\n\nWARNING: To get these examples working you will need a recent version of Adobe Flash (version 9 or above) and make sure you create projects with ActionScript 3.0. To test successful uploading you will need access to a local or remote PHP sever... preferably 4.1 or later. The PHP scripts below all try to save images to the same directory as the PHP page, meaning you should set the permission of your remote directory appropriately. If in doubt write-all and execute-all will work. I recommend Adobe Dreamweaver to edit and upload your PHP pages. If you have an older PHP version 4.0 or earlier use $_HTTP_POST_FILES instead of $_FILES.\n\nIf all you need to do is upload an (existing) image file from your desktop the solution is quite easy - you can use the built-in FileReference class and call FileReference.browse() to locate the file, then FileReference.upload() to upload the image to your desired CGI page.\n\n\n\n INSTRUCTIONS: To get this code working you can create a new AS3 Flash file, add a single button called \"button\" and add the action script to the first frame of the timeline.\n\n\n\n And the matching page (\"uploadimage_fromfile.php\") is:\n\n\n\n This example also demonstrated how extra text variables (in this case a 'user_name') can be easily posted along with this image using the URLVariables class.\n\nUploading binary data using the ByteArray and URLLoader classes\n\nIf the image you wish to upload isn't save to disk, but instead generated within your code (eg: taking a screenshot), the code is a bit trickier - you will need to use the ByteArray class to generate your binary data and the URLLoader class to upload it. The example below uploads a JPEG screenshot of your main Flash interface.\n\n\n\n INSTRUCTIONS: This example uses the well known \"as3corelib\" by Mike Chambers to encode BitmapData into a JPEG as a ByteArray. To get this working you must first go to as3corelib, download a .zip, and then put the \"com\" folder (under \"src\") into the same folder as your .fla file containing the AS below in the first frame. You'll probably also want to scribble a line in your clip so your saved file isn't plain white.\n\n\n\n And the matching page (\"uploadimage_frombytearray.php\") is:\n\nNotice that this example passes a \"name\" for the file in the query string (GET). Sadly when you POST an image like this it isn't easily possible to use these classes to POST extra text values, nor to POST more than one images at time - even though these classes write out request using multipart/form-data.\n\nFor those who are keen, there are a few nice workaround to upload multiple binary files at once. Searching the web there are several people who have coded solutions, the best I've found is \"[as3urlrequestbuilder http://blog.mikestead.me/upload-multiple-files-with-a-single-request-in-flash/]\" by Mike Stead - a set of two simple classes, \"URLFileVariable\" and \"URLRequestBuilder\", which integrate with URLVariables and URLRequest. In the code below I use this library to save two PNG files with the second one representing an clone of the first which has been inverted.\n\nINSTRUCTION: To install Mike's library go to here, download the .zip and move the \"co\" folder (under \"src\") to the same directory as your fla file. Notice it also requires the \"as3corelib\" library from the example above to call \"PNGEncoder\".\n\n\n\n And the matching page (\"uploadimages_multiple.php\") is:\n\n\n\n There are other people who've coded their own solutions too:\n• [multipart-loader http://www.neerfri.com/2007/12/flex-multipartform-data-post-request.html] - a collection of about five classes which are similar to \"UrlRequest\", written by Neerfri (download). I had a bit of trouble getting it working, but others have given it high praise.\n• Adobe LiveDocs - Working with file upload and download - has a nice long explanation of how AC3 and HTTP POST request work."
    }
]