[
    {
        "link": "https://docs.unity3d.com/2023.2/Documentation/Manual/class-LineRenderer.html",
        "document": "The Line Renderer component takes an array of two or more points in 3D space, and draws a straight line between each one. You can use a Line Renderer to draw anything from a simple straight line to a complex spiral.\n\nThe line is always continuous; if you need to draw two or more completely separate lines, you should use multiple GameObjectsThe fundamental object in Unity scenes, which can represent characters, props, scenery, cameras, waypoints, and more. A GameObject’s functionality is defined by the Components attached to it. More info\n\nSee in Glossary, each with its own Line Renderer.\n\nThe Line Renderer does not render lines that have a width in pixelsThe smallest unit in a computer image. Pixel size depends on your screen resolution. Pixel lighting is calculated at every screen pixel. More info\n\nSee in Glossary. It renders polygons that have a width in world units. The Line Renderer uses the same algorithm for line rendering as the Trail RendererA visual effect that lets you to make trails behind GameObjects in the Scene as they move. More info\n\nSee in Glossary.\n• In the Unity menu bar, go to GameObject > Effects > Line.\n• Add points to the Line Renderer’s Positions array, either by directly setting array values in the Inspector \n\n A Unity window that displays information about the currently selected GameObject, asset or project settings, allowing you to inspect and edit the values. More info window or by using the Create Points Scene Editing Mode.\n• Use the Inspector window to configure the color, width, and other display settings of the line.\n\nBy default, a Line Renderer uses the built-in Material, Default-Line. You can make many changes to the appearance of the line without changing this Material, such as editing the color gradient or width of the line.\n\nFor other effects, such as applying a texture to the line, you will need to use a different Material. If you do not want to write your own ShaderA program that runs on the GPU. More info\n\nSee in Glossary for the new Material, Unity’s built-in Standard Particle Shaders work well with Line Renderers.\n\nSee Creating and using Materials for more information.\n\nYou can use the Line Renderer’s Inspector to change the SceneA Scene contains the environments and menus of your game. Think of each unique Scene file as a unique level. In each Scene, you place your environments, obstacles, and decorations, essentially designing and building your game in pieces. More info\n\nSee in Glossary Editing Mode. Different Scene Editing Modes enable you to use the Scene viewAn interactive view into the world you are creating. You use the Scene View to select and position scenery, characters, cameras, lights, and all other types of Game Object. More info\n\nSee in Glossary and the Inspector to edit the Line Renderer in different ways.\n\nThere are three Scene Editing Modes: None, Edit Points, and Create Points.\n\nUse the Edit Points and Create Points buttons at the top of the Inspector to set the current Scene Editing Mode.\n\nClick the Edit Points button to set the Scene Editing Mode to Edit Points. Click it again to set the Scene Editing Mode to None.\n\nClick the Create Points button to set the Scene Editing Mode to Create Points. Click it again to set the Scene Editing Mode to None.\n\nWhen no Scene Editing Mode is selected, you can configure and perform a simplification operation that removes unnecessary points from the Positions array.\n\nThe following controls are visible in the Inspector:\n\nWhen the Scene Editing Mode is set to Edit Points, Unity represents each point in the Line Renderer’s Positions array as a yellow sphere in the Scene view. You can move the individual points using the Move tool.\n\nThe following controls are visible in the Inspector:\n\nWhen the Scene Editing Mode is set to Create Points, you can click inside the Scene view to add new points to the end of the Line Renderer’s Positions array.\n\nThe following controls are visible in the Inspector:\n\nThis section contains the following sub-sections:\n• None Materials \n\n An asset that defines how a surface should be rendered. More info\n\nEnable this to connect the first and last positions of the line, and form a closed loop. The array of Vector3 points to connect. Define a width value, and a curve value to control the width of your line along its length.\n\n\n\nThe curve is sampled at each vertex, so its accuracy is limited by the number of vertices in your line. The overall width of the line is controlled by the width value. Define a gradient to control the color of the line along its length.\n\n\n\nUnity samples colors from the Color gradient at each vertex. Between each vertex, Unity applies linear interpolation to colors. Adding more vertices to your line might give a closer approximation of a detailed gradient. This property dictates how many extra vertices are used when drawing corners in a line. Increase this value to make the line corners appear rounder. This property dictates how many extra vertices are used to create end caps on the line. Increase this value to make the line caps appear rounder. Set the direction that the line faces. The line faces the Z axis of its Transform component \n\n A Transform component determines the Position, Rotation, and Scale of each object in the scene. Every GameObject has a Transform. More info . Control how the Texture is applied to the line. Map the texture once along the entire length of the line. Repeat the texture along the line, based on its length in world units. To set the tiling rate, use Material.SetTextureScale. Map the texture once along the entire length of the line, assuming all vertices are evenly spaced. Repeat the texture along the line, repeating at a rate of once per line segment. To adjust the tiling rate, use Material.SetTextureScale. Set the amount to move shadows away from the Light to remove shadowing artifacts caused by approximating a volume with billboarded geometry. If enabled, Unity builds the line geometry with normals and tangents included. This allows it to use Materials that use the Scene lighting. If enabled, the points are considered as world space coordinates. If disabled, they are local to the transform of the GameObject to which this component is attached.\n\nThe Materials section lists all the materials that this component uses.\n\nThe Lighting section contains properties that relate to lighting.\n\nThe Probes section contains properties relating to Light Probe and Reflection ProbesA rendering component that captures a spherical view of its surroundings in all directions, rather like a camera. The captured image is then stored as a Cubemap that can be used by objects with reflective materials. More info\n\nSee in Glossary."
    },
    {
        "link": "https://docs.unity3d.com/Manual/class-LineRenderer.html",
        "document": "Explore the properties for the Scene \n\n A Scene contains the environments and menus of your game. Think of each unique Scene file as a unique level. In each Scene, you place your environments, obstacles, and decorations, essentially designing and building your game in pieces. More info Tools panel."
    },
    {
        "link": "https://discussions.unity.com/t/how-can-i-make-a-good-looking-laser-beam/110131",
        "document": ""
    },
    {
        "link": "https://thegamerspad.net/unity-line-renderer-ultimate-guide",
        "document": "The Unity Line Renderer stands as a formidable instrument, affording you the capability to craft and exhibit lines within the Unity environment. This versatile tool extends its utility beyond mere line generation, enabling the creation of a myriad of captivating visual embellishments, ranging from elementary strokes to intricate configurations and designs. Integral to its functionality, the Line Renderer component accepts an array of points, allowing for intricate customization of line shapes. Furthermore, you possess the ability to tailor the Line Renderer’s appearance to your precise specifications, configuring attributes such as color, width, and vertex count to achieve the desired aesthetic and behavior.\n\nThe Unity Line Renderer is a versatile tool, enabling developers to depict lines between two or more points in their games. This function primarily visualizes the trajectory between given coordinates, and its appearance is determined by parameters set for the beginning and end width. By mastering its basics, a developer can tap into its potential for a myriad of applications.\n\nBelow, you’ll find a comprehensive, step-by-step tutorial on how to incorporate this essential element:\n• Commence by choosing the specific game object of interest from the Hierarchy window;\n• Upon highlighting your chosen game object, proceed to access the Inspector window positioned on the right-hand side;\n• Next, initiate the process by clicking the ‘Add Component’ button;\n• In either the search bar or the available list, diligently pinpoint and opt for the ‘Line Renderer’ component.\n\nBy default, the Unity Line Renderer might depict a pink hue, which signals the absence of a material. To customize its appearance:\n• Design a unique Material according to the desired aesthetic;\n• Once created, simply drag the new material and release it on the ‘material property’ slot of the Line Renderer component. This will apply the texture and color properties of the material to the line.\n• Incorporate the Line Renderer Component seamlessly into this entity;\n• Specify the dimensions of the line; for instance, setting it to 2 necessitates the definition of two positional points;\n• Designate the initial position (indexed at 0) and the ultimate position (indexed at 1). To provide an example, you can set the coordinates from 0,0,0 to 10,10,10;\n• Attach the previously generated Material to the Line Renderer;\n• Presto! The line now graces the game world with its presence.\n\nFor those inclined towards a programmatic approach:\n• Spawn an unadorned game object and bestow upon it the moniker “line.”;\n• Append the Line Renderer Component to this entity. Should this step be inadvertently skipped, a script can effortlessly remedy the omission;\n• Foster a novel script christened ‘LineDraw’ and affix it to the “line” game entity;\n• Establish a connection between the custom material and the ‘mat’ property before launching the game.\n\nThis script essentially defines the line’s starting and ending points and then applies the chosen material, offering developers a dynamic way to integrate lines in their games.\n\nWhile Unity’s core components cater primarily to 3D graphics, many of these components are versatile enough to be adapted for 2D projects. One such component is the Line Renderer. Originally designed for 3D graphics, this component can be skillfully used for 2D graphics with a simple trick.\n\nTo utilize the Line Renderer for 2D graphics, simply constrain the z-axis values for all vertices or points to a fixed number, commonly zero. By doing so, the renderer’s output simulates a 2D visual on the screen.\n• Setup: Begin by creating a new game object in Unity. Name it “Triangle” for clarity;\n• Add Component: Navigate to the object’s properties and attach the Line Renderer component;\n• Looping: Activate the ‘Loop’ checkbox to ensure the start and end points of the triangle connect;\n• Vertex Configuration: Adjust the positions array size to three, representing the three vertices of a triangle. Input the desired coordinates for the triangle vertices. If uncertain about exact positions, input provisional values for fine-tuning later. Remember, for 2D representation, ensure the z-axis value remains consistent, preferably at zero.\n• Point Addition: Locate the Scene Tool property within the Line Renderer. Here, clicking on the ‘+’ symbol permits point addition directly within the Unity Editor’s scene view;\n• Triangle Completion: In the scene view, click thrice at different locations. These represent the triangle’s vertices;\n• End Point Addition: Click on the ‘+’ symbol once again to halt the point addition process;\n• Vertex Adjustment: Should there be a need for any adjustments, utilize the ‘Edit’ button adjacent to the ‘+’ symbol. Drag the vertices to achieve the desired shape and alignment.\n\nFor those with a coding inclination, Unity allows for shape creation using scripts. Here’s a method to script a triangle with specific vertices:\n• Initialization: Generate a new game object and christen it “Triangle.” Following this, integrate a new script named “DrawTriangle.”;\n• Scripting: The provided code offers a template to script the triangle’s vertices and appearance.\n\nBy following these steps and techniques, users can effectively harness it for 2D graphics, expanding its versatility beyond its primary 3D functions.\n\nHarness the power of Unity’s Line Renderer to effortlessly mold complex polygonal designs. Dive into this detailed, step-by-step tutorial to master the art of constructing these advanced polygons:\n• Initiate the process by spawning an empty game entity. Label this freshly minted entity as ‘Polygon.’;\n• Proceed by attaching the ‘Line Renderer’ component to your ‘Polygon’ entity.\n\nFor a flawless and continuous polygon contour, activate the loop functionality.\n• Adjust the dimensions of the position array in alignment with the specific polygon you envision. As an illustration, a hexagon calls for 6 distinct positions;\n• Fill the position array with 6 Vector3 data points. If exact coordinates are elusive, opt for estimated values. It’s crucial for 2D configurations to maintain a z-value of 0 across all positions.\n• Navigate to the scene toolbox and select the editing symbol;\n• Manipulate the coordinates directly within the Scene perspective until your polygon mirrors your vision.\n\nTapping into coding to spawn adaptable polygon configurations offers unparalleled versatility. Delve into this in-depth guide to uncover more:\n• Capture the total number of vertices from the user;\n\nThe rotation angle depends on the number of vertices. For a square (4 vertices), it would be 90 degrees (360/4).\n\nIncorporate the following script, ensuring that it’s tailored to your needs:\n\nA blast wave can profoundly elevate your gaming immersion, catapulting it to unprecedented levels of interaction. In Unity, achieving this sensation is simpler than you might think. Using the Unity Line Renderer’s capabilities, you can create a captivating horizontal blast wave, adding a vibrant energy to your game. Let’s dive into this detailed guide, and I’ll lead you through each phase diligently.\n\nThe foundation of this extraordinary blast wave effect lies in the Line Renderer component. To begin, we’ll delve into a series of mathematical calculations, carefully plotting points on a circular path. As our blast wave’s radius expands, we’ll continuously adjust the Line Renderer’s position, resulting in a constantly evolving visual display.\n\nCalculate the angle between each point on the circle by dividing 360 by the number of points you desire. This will help evenly distribute the points around the circumference.\n\nIn our game, which is set in the XZ plane, we need to find the positions in the X and Z axes. You can achieve this by using trigonometric functions like Sin and Cos applied to the angles and then multiplying them by the radius to obtain the positions. Ensure that the last position matches the first one to close the loop.\n\nNow that we’ve achieved the visual aspect of the blast wave, let’s make it interact with objects within its radius. We’ll use Unity’s Physics overlap sphere function to identify colliders within the specified blast radius. To apply force to these objects, you’ll need to ensure they have Rigidbody components attached.\n\nHere’s how the code looks:\n\nCombining It All Together\n\nWith all these pieces in place, you’re ready to witness your blast wave in action. Create a new empty GameObject in the Unity Hierarchy window and attach the provided script to it. Don’t forget to add a Line Renderer component. Customize the Line Renderer’s material to your liking and uncheck the “Use World Space” option for the best results.\n\nHere’s the complete script to bring your blast wave to life:\n\nWith this step-by-step guide and the provided script, you can easily create an impressive blast wave effect that not only looks visually stunning but also interacts with objects in your game world, adding an exciting layer of realism and excitement. Dive in and let your creativity explode!\n\nIn conclusion, the Unity Line Renderer is a versatile and powerful tool that can enhance the visual appeal and functionality of your Unity projects. This ultimate guide has taken you through the fundamentals of it, including its basic components and settings, as well as advanced techniques and creative applications.\n\nWe’ve explored how Line Renderer can be used for a wide range of purposes, from creating laser beams and trails to implementing dynamic visual effects and even simulating complex behaviors. With the knowledge gained from this guide, you now have the tools to bring your game or interactive application to life in ways you may not have thought possible."
    },
    {
        "link": "https://docs.unity.cn/540/Documentation/Manual/class-LineRenderer.html",
        "document": "The Line Renderer component takes an array of two or more points in 3D space, and draws a straight line between each one. A single Line Renderer component can therefore be used to draw anything from a simple straight line to a complex spiral. The line is always continuous; if you need to draw two or more completely separate lines, you should use multiple GameObjects, each with its own Line Renderer.\n\nThe Line Renderer does not render one-pixel-wide lines. It renders billboard lines (polygons that always face the camera) that have a width in world units and can be textured. It uses the same algorithm for line rendering as the Trail Renderer.\n• In the Unity menu bar, go to GameObject > Create Empty\n• In the Unity menu bar, go to Component > Effects > Line Renderer\n• Drag a Texture or Material onto the Line Renderer. It looks best if you use a particle Shader in the Material.\n• Line Renderers are useful for effects where you need to lay out all the vertices in one frame.\n• The lines may seem to rotate as you move the Camera. This is intentional.\n• The Line Renderer should be the only Renderer on a GameObject."
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Physics2D.Raycast.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close\n\nA raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported.\n\n\n\nThis function returns a RaycastHit2D object with a reference to the Collider that is hit by the ray (the Collider property of the result will be NULL if nothing was hit). The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).\n\n\n\nOverloads of this method that use can filter the results by the options available in ContactFilter2D.\n\n\n\nRaycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay.\n\n\n\nAdditionally, this will also detect Collider(s) at the start of the ray. In this case, the ray starts inside the Collider and doesn't intersect the Collider surface. This means that the collision normal cannot be calculated, in which case the returned collision normal is set to the inverse of the ray vector being tested. This can easily be detected because such results are always at a RaycastHit2D fraction of zero.\n\n\n\nAdditional resources: LayerMask class, RaycastHit2D class, RaycastAll, Linecast, DefaultRaycastLayers, IgnoreRaycastLayer, raycastsHitTriggers.\n\nThis function returns the number of contacts found and places those contacts in the array. The results can also be filtered by the .\n\n\n\nAdditional resources: ContactFilter2D and RaycastHit2D.\n\nThe integer return value is the number of results written into the list. The results list will be resized if it doesn't contain enough elements to report all the results. This prevents memory from being allocated for results when the list does not need to be resized, and improves garbage collection performance when the query is performed frequently.\n\n\n\nThe results can also be filtered by the .\n\n\n\nAdditional resources: ContactFilter2D and RaycastHit2D."
    },
    {
        "link": "https://discussions.unity.com/t/raycast-reflection-2d/228865",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/78597131/how-do-i-properly-reflect-a-laser-off-of-a-collider-in-unity-2d",
        "document": "I'm trying to create a game that involved shooting a laser at objects and having that laser reflect off objects, but the laser seems to go through objects sometimes. I've noticed that the second raycast will end at the origin of the scene instead of reflecting off the object, even if that means going through the object.\n\n Here is a picture of what I mean: Sometimes it will reflect off the object, but still go through the origin.\n\nThis is my code for reflecting so far:\n\nI've tried using the Vector2.Reflect method, but it does the same thing. I've tried using the hit.normal, but that doesn't work either. I've also tried using a ray and setting the direction to be the opposite of the ray's direction, but that didn't work."
    },
    {
        "link": "https://stackoverflow.com/questions/62318462/raycast-2d-ricochet-in-unity",
        "document": "I'm new to Raycasting so I might be going about this in a bad way, but I would to send a raycast outward to direction a gameobject is facing, bounce off the first object it hits and go a short distance before disappearing.\n\nAs far as I can tell there is no built in function for reflecting raycasts in Unity, so I have been trying to generate a another raycast where the first one hits but my luck hasn't been going well. Here's what I have so far:\n\nThis current script is sort of able to generate a 2nd raycast, however as you can see, the first raycast still does not stop when it hits something, and more importantly while this solution works well when it hits a flat object on a horizontal plane. But if it hits on object on a vertical or diagonal plane it applys several calculations to the wrong axis:\n\nAny help would be greatly appreciated."
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Physics.Raycast.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close\n\nTo select which layers a ray should collide with, use a LayerMask.\n\n\n\nSpecifying allows you to control whether or not Trigger colliders generate a hit, or whether to use the global Physics.queriesHitTriggers setting.\n\n\n\nNotes: Raycasts will not detect Colliders for which the Raycast origin is inside the Collider. In all these examples FixedUpdate is used rather than Update. Refer to Order of execution for event functions to understand the difference between Update and FixedUpdate, and to see how they relate to physics queries."
    }
]