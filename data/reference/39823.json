[
    {
        "link": "https://mssqltips.com/sqlservertip/7703/sql-case-in-where-clause",
        "document": "The WHERE clause in SQL queries filters data based on a specified expression or condition. We usually define a static condition or value, however, if you need to filter data based on different conditions, this can be done using SQL CASE in the WHERE clause.\n\nThis SQL tutorial will guide you on conditionally filtering using the WHERE clause using a SQL CASE statement.\n\nThe SQL CASE statement specifies a conditional expression to perform different actions depending on the input expression value. The syntax for the CASE statement in a SQL database is:\n\nFor example, in the AdventureWorks2019 sample database, look at the [MaritalStatus] column value from the [HumanResources].[Employee] table. It contains the abbreviation “S” for Single and “M” for Married.\n\nWe can use a CASE statement to replace the abbreviation with the custom text, as shown below. It changes the abbreviations “S” and “M” to “Single” and “Married”, respectively.\n\nWe can use CASE in SQL statements such as SELECT, WHERE, and ORDER BY.\n\nCASE Statement in the WHERE Clause\n\nThe CASE statement in the WHERE clause can conditionally filter rows based on defined criteria. The syntax for the CASE statement in the WHERE clause is shown below. The CASE expression matches the condition and returns the value of the first THEN clause. If none of the conditions are true, it returns the value of the ELSE clause.\n\nLet’s see it used in a few examples.\n\nThe following query uses the CASE statement in the WHERE clause to filter single employees.\n\nAs shown below, it returns only rows where [MaritialStatus] is S.\n\nIn another example, the CASE statement in the WHERE clause consists of multiple WHEN conditions. SQL Server evaluates the first condition and checks for records satisfying the given conditions.\n\nHere is the output of the CASE statement conditions.\n\nIf we want to exclude the records instead of including them, we can change the filter to return records with values set to 0 by the CASE statement.\n\nSimilarly, you can combine multiple CASE statement conditions with OR and AND operators. For example, the query below returns both Single and Married employees. You can see we combined two CASE statements with the OR operator.\n\nWe can also use dynamic values or calculate values in the CASE statement in the WHERE condition. For example, suppose we want records with an average total due amount over 3000.\n\nLet’s look at another example where the CASE statement filters records when the OrderDate is between specified dates.\n\nNote: all of these queries could be written without the CASE, but sometimes using CASE makes it easier to read the code. Here is an example of using CASE versus using OR for the query. These both return the same results and also have the same execution plan.\n\nHere is another example of using CASE.\n\nNested CASE Statement in the WHERE Clause\n\nYou can combine multiple conditions with a nested CASE statement in the WHERE clause. For example, we want records from the [SalesOrderHeader] table where the orderdate is between specified dates. If this condition is satisfied, check for orders with a value 1 for column [OnlineOrderFlag]:\n\nCASE Statement in WHERE Clause as SubQuery\n\nWe can use CASE statements in a subquery as well. Here is an example SELECT statement:\n• Read more T-SQL related articles\n• Some Tricky Situations When Working with SQL Server NULLs\n• What are the Aggregate Functions in SQL"
    },
    {
        "link": "https://stackoverflow.com/questions/65116090/using-case-statement-in-a-where-clause",
        "document": "If you are still wanting to know how to utilize a CASE Expression in a WHERE Clause the CASE Expression must be compared to a value as that is the syntax understood for conditions contained within a WHERE Clause. See below a mock example.\n\nThere are a few reasons I've used CASE Expressions within a WHERE Clause over using AND/ORs. Just one minor reason is it allows me to contain and organize logic in a WHERE Clause inside CASE Expressions rather than having multiple AND/ORs all nested together. I've also found that using CASE Expressions in the WHERE Clause is useful when encountering Dynamic queries that accept variables to be later inserted into the SQL before being sent to the database for processing. In the case of using Dynamic SQL there are times when a CASE Statement MUST be used due to the fact that there could be data that is being compared against in the WHERE clause that is NOT a column.field value but a hardcoded value that is compared to perhaps a user selection or status (as examples)... it might be a static value passed in via the application which is how my web application works that I support which is why I bring it up.\n\nBasically it's good to know how to use a CASE Expression in a WHERE Clause as there are some cases when the ONLY way to evaluate certain data is by using a CASE Expression .\n\nI have no data to test this against and that's not the point. The point of my answer is to simply provide to you an alternative to the existing answer. In my opinion this logic is basic and the already provided answer is the correct one however my answer is to demonstrate how you could go about using a CASE in a WHERE Clause.\n\nIf interested see this SO Post for the differences between a CASE Statement vs a CASE Expression however know that this terminology slightly differs between databases.\n\nAs an example of this... SQL Server refers to these as Simple vs Searched but refers to all of it as a CASE Expression. Therefore a CASE Expression can either be a Simple or a Searched CASE that can be used within a Statement."
    },
    {
        "link": "https://w3schools.com/sql/sql_case.asp",
        "document": "The expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the clause.\n\nIf there is no part and no conditions are true, it returns NULL.\n\nCASE\n\n WHEN condition1 THEN result1\n\n WHEN condition2 THEN result2\n\n WHEN conditionN THEN resultN\n\n ELSE result\n\nEND;\n\nBelow is a selection from the \"OrderDetails\" table in the Northwind sample database:\n\nThe following SQL goes through conditions and returns a value when the first condition is met:\n\nThe following SQL will order the customers by City. However, if City is NULL, then order by Country:"
    },
    {
        "link": "https://stackoverflow.com/questions/19271853/sql-use-case-statement-in-where-in-clause",
        "document": "Is it posible to use case in where in clause? Something like this:\n\nThis code gives the error : Incorrect syntax near ','."
    },
    {
        "link": "https://reddit.com/r/SQL/comments/112xk8a/when_should_we_use_case_statement_inside_where",
        "document": "Create your account and connect with a world of communities.\n\nBy continuing, you agree to our\n\nand acknowledge that you understand the"
    },
    {
        "link": "https://postgresql.org/docs/current/functions-conditional.html",
        "document": "This section describes the -compliant conditional expressions available in PostgreSQL.\n\nThe expression is a generic conditional expression, similar to if/else statements in other programming languages: clauses can be used wherever an expression is valid. Each is an expression that returns a result. If the condition's result is true, the value of the expression is the that follows the condition, and the remainder of the expression is not processed. If the condition's result is not true, any subsequent clauses are examined in the same manner. If no yields true, the value of the expression is the of the clause. If the clause is omitted and no condition is true, the result is null. SELECT * FROM test; a --- 1 2 3 SELECT a, CASE WHEN a=1 THEN 'one' WHEN a=2 THEN 'two' ELSE 'other' END FROM test; a | case ---+------- 1 | one 2 | two 3 | other The data types of all the expressions must be convertible to a single output type. See Section 10.5 for more details. There is a “simple” form of expression that is a variant of the general form above: The first is computed, then compared to each of the expressions in the clauses until one is found that is equal to it. If no match is found, the of the clause (or a null value) is returned. This is similar to the statement in C. The example above can be written using the simple syntax: SELECT a, CASE a WHEN 1 THEN 'one' WHEN 2 THEN 'two' ELSE 'other' END FROM test; a | case ---+------- 1 | one 2 | two 3 | other A expression does not evaluate any subexpressions that are not needed to determine the result. For example, this is a possible way of avoiding a division-by-zero failure: SELECT ... WHERE CASE WHEN x <> 0 THEN y/x > 1.5 ELSE false END; As described in Section 4.2.14, there are various situations in which subexpressions of an expression are evaluated at different times, so that the principle that “ evaluates only necessary subexpressions” is not ironclad. For example a constant subexpression will usually result in a division-by-zero failure at planning time, even if it's within a arm that would never be entered at run time.\n\nThe function returns the first of its arguments that is not null. Null is returned only if all arguments are null. It is often used to substitute a default value for null values when data is retrieved for display, for example: This returns if it is not null, otherwise if it is not null, otherwise . The arguments must all be convertible to a common data type, which will be the type of the result (see Section 10.5 for details). Like a expression, only evaluates the arguments that are needed to determine the result; that is, arguments to the right of the first non-null argument are not evaluated. This SQL-standard function provides capabilities similar to and , which are used in some other database systems.\n\nThe function returns a null value if equals ; otherwise it returns . This can be used to perform the inverse operation of the example given above: In this example, if is , null is returned, otherwise the value of is returned. The two arguments must be of comparable types. To be specific, they are compared exactly as if you had written , so there must be a suitable operator available. The result has the same type as the first argument — but there is a subtlety. What is actually returned is the first argument of the implied operator, and in some cases that will have been promoted to match the second argument's type. For example, yields , because there is no operator, only .\n\nThe and functions select the largest or smallest value from a list of any number of expressions. The expressions must all be convertible to a common data type, which will be the type of the result (see Section 10.5 for details). NULL values in the argument list are ignored. The result will be NULL only if all the expressions evaluate to NULL. (This is a deviation from the SQL standard. According to the standard, the return value is NULL if any argument is NULL. Some other databases behave this way.)"
    },
    {
        "link": "https://dev.mysql.com/doc/refman/en/case.html",
        "document": "For the first syntax, is an expression. This value is compared to the expression in each clause until one of them is equal. When an equal is found, the corresponding clause executes. If no is equal, the clause executes, if there is one.\n\nThis syntax cannot be used to test for equality with because is false. See Section 5.3.4.6, “Working with NULL Values”.\n\nFor the second syntax, each clause expression is evaluated until one is true, at which point its corresponding clause executes. If no is equal, the clause executes, if there is one.\n\nIf no or matches the value tested and the statement contains no clause, a Case not found for CASE statement error results.\n\nEach consists of one or more SQL statements; an empty is not permitted.\n\nTo handle situations where no value is matched by any clause, use an containing an empty block, as shown in this example. (The indentation used here in the clause is for purposes of clarity only, and is not otherwise significant.)"
    },
    {
        "link": "https://w3schools.com/postgresql/postgresql_case.php",
        "document": "The expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement).\n\nOnce a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the clause.\n\nIf there is no part and no conditions are true, it returns NULL.\n\nSELECT product_name,\n\n CASE\n\n WHEN price < 10 THEN 'Low price product'\n\n WHEN price > 50 THEN 'High price product'\n\nELSE\n\n 'Normal product'\n\nEND\n\nFROM products; Run Example »\n\nWhen a column name is not specified for the \"case\" field, the parser uses as the column name.\n\nTo specify a column name, add an alias after the keyword.\n\nYou can read more about aliases in our PostgreSQL AS chapter."
    },
    {
        "link": "https://stackoverflow.com/questions/36671353/postgresql-case-statement",
        "document": "You are confusing documentation for PL/pgSQL with the one for SQL. You link to the manual for PL/pgSQL, but your code displays an SQL expression.\n\nBoth use the key word , but it's not the same thing. in PL/pgSQL is a control structure for the procedural language, while in SQL is a conditional expression.\n\nYou are not the first to be confused. There are other minor differences in the syntax. For instance, PL/pgSQL allows a list of values for the \"simple \" variant, which is not possible in SQL:\n\nWould be nice to have in SQL as well, but the standard doesn't allow it and Postgres sticks to the standard."
    },
    {
        "link": "https://geeksforgeeks.org/postgresql-case-statement",
        "document": "In PostgreSQL, CASE statements provide a way to implement conditional logic within SQL queries. Using these statements effectively can help streamline database functions, optimize query performance, and provide targeted outputs.\n\nThis guide will break down the types of CASE statements available in PostgreSQL, with detailed examples and explanations.\n\nCASE statements in PostgreSQL enable us to evaluate conditions and return results based on whether these conditions are true or false. PostgreSQL CASE is flexible, allowing for decision-making directly within queries, essential for building efficient functions and creating streamlined workflows\n\nIn PostgreSQL, there are two primary forms of the CASE statement:\n\nThe Simple CASE statement evaluates a search expression against a set of expressions using the equality operator ( ). If a match is found, the corresponding block of code is executed. If no match is found, the block (if provided) is executed; otherwise, PostgreSQL raises\n• None : The expression to be evaluated.\n• None : The expressions to be matched against the\n• None : The statements executed if the\n• None : The statements executed if no match is found. This clause is optional.\n\nHere we will create a new function named ‘get_price_segment’ that accepts ‘p_film_id’ as the argument. Based on the rental rate of the film, it returns the price segment: mass, mainstream, high end. In case the price is not 0.99, 2.99 or 4.99, the function returns unspecified.\n\nTesting the Function: Now test the get_price_segment() function using the statement:\n\nThe Searched CASE statement evaluates Boolean expressions in each WHEN clause sequentially from top to bottom. The first true Boolean expression triggers the execution of the corresponding statements. If no true expression is found and an ELSE clause is present, its statements are executed. If the ELSE clause is omitted and no match is found, PostgreSQL raises the ‘ exception.\n• : The statements executed if the Boolean expression is true.\n• : The statements executed if no Boolean expression is true. This clause is optional.\n\nThe ‘get_customer_service’ function accepts ‘p_customer_id’ as the argument. It first gets the total payment paid by the customer from the payment table. Then based on the total payment, the function uses the searched CASE statement to return the service level platinum, gold, and silver.\n\nTesting the Function: Now let’s test the above function using the below statement:\n• Simple CASE vs. Searched CASE : The Simple CASE statement matches expressions using equality, while the Searched CASE statement evaluates Boolean expressions.\n• Error Handling exception if no match is found and the ELSE clause\n• Practical Use Cases : Use CASE statements to streamline decision-making logic within your PostgreSQL functions and queries.\n\nPostgreSQL CASE statements are a valuable tool for adding conditional logic to SQL queries, allowing us to make decisions within your database operations. By using Simple CASE for direct matches and Searched CASE for evaluating conditions, we can handle data more efficiently and improve query performance. These statements are especially useful for organizing complex queries, making them essential for anyone looking to manage data effectively in PostgreSQL.\n\nHow do I run PostgreSQL on Windows?\n\nHow can I view all functions in PostgreSQL?"
    }
]