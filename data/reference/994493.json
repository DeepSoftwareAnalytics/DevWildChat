[
    {
        "link": "https://react.dev/learn/creating-a-react-app",
        "document": "If your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, you can build a React app from scratch.\n\nThese recommended frameworks support all the features you need to deploy and scale your app in production. They have integrated the latest React features and take advantage of React’s architecture.\n\nAll the frameworks on this page support client-side rendering (CSR), single-page apps (SPA), and static-site generation (SSG). These apps can be deployed to a CDN or static hosting service without a server. Additionally, these frameworks allow you to add server-side rendering on a per-route basis, when it makes sense for your use case. This allows you to start with a client-only app, and if your needs change later, you can opt-in to using server features on individual routes without rewriting your app. See your framework’s documentation for configuring the rendering strategy.\n\nNext.js’s App Router is a React framework that takes full advantage of React’s architecture to enable full-stack React apps.\n\nNext.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports static export which doesn’t require a server. Vercel additionally provides opt-in paid cloud services.\n\nReact Router is the most popular routing library for React and can be paired with Vite to create a full-stack React framework. It emphasizes standard Web APIs and has several ready to deploy templates for various JavaScript runtimes and platforms.\n\nExpo is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs. It provides an SDK for React Native that makes the native parts easier to use. To create a new Expo project, run:\n\nIf you’re new to Expo, check out the Expo tutorial.\n\nExpo is maintained by Expo (the company). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.\n\nThere are other up-and-coming frameworks that are working towards our full stack React vision:\n• TanStack Start (Beta): TanStack Start is a full-stack React framework powered by TanStack Router. It provides a full-document SSR, streaming, server functions, bundling, and more using tools like Nitro and Vite.\n• RedwoodJS: Redwood is a full stack React framework with lots of pre-installed packages and configuration that makes it easy to build full-stack web applications.\n\nWhich features make up the React team’s full-stack architecture vision? Next.js’s App Router bundler fully implements the official React Server Components specification. This lets you mix build-time, server-only, and interactive components in a single React tree. For example, you can write a server-only React component as an function that reads from a database or from a file. Then you can pass data down from it to your interactive components: Next.js’s App Router also integrates data fetching with Suspense. This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree: Server Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.\n\nIf your app has constraints not well-served by existing frameworks, you prefer to build your own framework, or you just want to learn the basics of a React app, there are other options available for starting a React project from scratch.\n\nStarting from scratch gives you more flexibility, but does require that you make choices on which tools to use for routing, data fetching, and other common usage patterns. It’s a lot like building your own framework, instead of using a framework that already exists. The frameworks we recommend have built-in solutions for these problems.\n\nIf you want to build your own solutions, see our guide to build a React app from Scratch for instructions on how to set up a new React project starting with a built tool like Vite, Parcel, or RSbuild.\n\nIf you’re a framework author interested in being included on this page, please let us know."
    },
    {
        "link": "https://create-react-app.dev/docs/getting-started",
        "document": "Create React App is an officially supported way to create single-page React applications. It offers a modern build setup with no configuration.\n\nThen open http://localhost:3000/ to see your app.\n\nWhen you’re ready to deploy to production, create a minified bundle with .\n\nYou don’t need to install or configure tools like webpack or Babel. They are preconfigured and hidden so that you can focus on the code.\n\nCreate a project, and you’re good to go.\n\nYou’ll need to have Node >= 14 on your local development machine (but it’s not required on the server). You can use nvm (macOS/Linux) or nvm-windows to switch Node versions between different projects.\n\nTo create a new app, you may choose one of the following methods:\n\nis available in npm 6+\n\nis available in Yarn 0.25+\n\nYou can now optionally start a new app from a template by appending to the creation command.\n\nIf you don't select a template, we'll create your project with our base template.\n\nTemplates are always named in the format , however you only need to provide the to the creation command.\n\nOur Custom Templates documentation describes how you can build your own template.\n\nYou can start a new TypeScript app using templates. To use our provided TypeScript template, append to the creation command.\n\nIf you already have a project and would like to add TypeScript, see our Adding TypeScript documentation.\n\nWhen you create a new app, the CLI will use npm or Yarn to install dependencies, depending on which tool you use to run . For example:\n\nRunning any of these commands will create a directory called inside the current folder. Inside that directory, it will generate the initial project structure and install the transitive dependencies:\n\nNo configuration or complicated folder structures, only the files you need to build your app. Once the installation is done, you can open your project folder:\n\nInside the newly created project, you can run some built-in commands:\n\nRuns the app in development mode. Open http://localhost:3000 to view it in the browser.\n\nThe page will automatically reload if you make changes to the code. You will see the build errors and lint warnings in the console.\n\nRuns the test watcher in an interactive mode. By default, runs tests related to files changed since the last commit.\n\nBuilds the app for production to the folder. It correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\n\nYour app is ready to be deployed."
    },
    {
        "link": "https://react.dev/learn",
        "document": "Welcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.\n• How to create and nest components\n• How to add markup and styles\n• How to render conditions and lists\n• How to respond to events and update the screen\n• How to share data between components React apps are made out of components. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page. Now that you’ve declared , you can nest it into another component: Welcome to my app\n\n Notice that starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase. Have a look at the result:\n\nThe keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, MDN and javascript.info have great references. The markup syntax you’ve seen above is called JSX. It is optional, but most React projects use JSX for its convenience. All of the tools we recommend for local development support JSX out of the box. JSX is stricter than HTML. You have to close tags like . Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a or an empty wrapper: Hello there. How do you do?\n\n If you have a lot of HTML to port to JSX, you can use an online converter. In React, you specify a CSS class with . It works the same way as the HTML attribute: Then you write the CSS rules for it in a separate CSS file: React does not prescribe how you add CSS files. In the simplest case, you’ll add a tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project. JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display : You can also “escape into JavaScript” from JSX attributes, but you have to use curly braces instead of quotes. For example, passes the string as the CSS class, but reads the JavaScript variable value, and then passes that value as the attribute: You can put more complex expressions inside the JSX curly braces too, for example, string concatenation:\n\nIn the above example, is not a special syntax, but a regular object inside the JSX curly braces. You can use the attribute when your styles depend on JavaScript variables. In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an statement to conditionally include JSX: If you prefer more compact code, you can use the conditional operator. Unlike , it works inside JSX: When you don’t need the branch, you can also use a shorter logical syntax: All of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using . You will rely on JavaScript features like loop and the array function to render lists of components. For example, let’s say you have an array of products: Inside your component, use the function to transform an array of products into an array of items: Notice how has a attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.\n\nYou can respond to events by declaring event handler functions inside your components: Notice how has no parentheses at the end! Do not call the event handler function: you only need to pass it down. React will call your event handler when the user clicks the button. Often, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add state to your component. Now you can declare a state variable inside your component: You’ll get two things from : the current state ( ), and the function that lets you update it ( ). You can give them any names, but the convention is to write . The first time the button is displayed, will be because you passed to . When you want to change state, call and pass the new value to it. Clicking this button will increment the counter: React will call your component function again. This time, will be . Then it will be . And so on. If you render the same component multiple times, each will get its own state. Click each button separately:\n\nNotice how each button “remembers” its own state and doesn’t affect other buttons. Functions starting with are called Hooks. is a built-in Hook provided by React. You can find other built-in Hooks in the API reference. You can also write your own Hooks by combining the existing ones. Hooks are more restrictive than other functions. You can only call Hooks at the top of your components (or other Hooks). If you want to use in a condition or a loop, extract a new component and put it there. In the previous example, each had its own independent , and when each button was clicked, only the for the button clicked changed: The first updates its to However, often you’ll need components to share data and always update together. To make both components display the same and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them. In this example, it is : Initially, ’s state is and is passed down to both children On click, updates its state to and passes it down to both children Now when you click either button, the in will change, which will change both of the counts in . Here’s how you can express this in code. First, move the state up from into : Then, pass the state down from to each , together with the shared click handler. You can pass information to using the JSX curly braces, just like you previously did with built-in tags like : The information you pass down like this is called props. Now the component contains the state and the event handler, and passes both of them down as props to each of the buttons. Finally, change to read the props you have passed from its parent component: When you click the button, the handler fires. Each button’s prop was set to the function inside , so the code inside of it runs. That code calls , incrementing the state variable. The new value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components."
    },
    {
        "link": "https://reddit.com/r/reactjs/comments/1i7acdo/createreactapp",
        "document": "If CRA has been deprecated, why are fairly recent tutorials still using it? Is there some educational value to be had? I see scrimba using it , I see John Smilga using it, I see Jonas Schmedtmann using it."
    },
    {
        "link": "https://legacy.reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html",
        "document": "As we shared in the release post, React 18 introduces features powered by our new concurrent renderer, with a gradual adoption strategy for existing applications. In this post, we will guide you through the steps for upgrading to React 18.\n\nPlease report any issues you encounter while upgrading to React 18.\n\nNote for React Native users: React 18 will ship in a future version of React Native. This is because React 18 relies on the New React Native Architecture to benefit from the new capabilities presented in this blogpost. For more information, see the React Conf keynote here.\n\nTo install the latest version of React:\n\nOr if you’re using yarn:\n\nWhen you first install React 18, you will see a warning in the console:\n\nReact 18 introduces a new root API which provides better ergonomics for managing roots. The new root API also enables the new concurrent renderer, which allows you to opt-into concurrent features.\n\nWe’ve also removed the callback from render, since it usually does not have the expected result when using Suspense:\n\nFinally, if your app uses server-side rendering with hydration, upgrade to :\n\nFor more information, see the working group discussion here.\n\nIn this release, we’re revamping our APIs to fully support Suspense on the server and Streaming SSR. As part of these changes, we’re deprecating the old Node streaming API, which does not support incremental Suspense streaming on the server.\n\nUsing this API will now warn:\n\nInstead, for streaming in Node environments, use:\n\nWe’re also introducing a new API to support streaming SSR with Suspense for modern edge runtime environments, such as Deno and Cloudflare workers:\n\nThe following APIs will continue working, but with limited support for Suspense:\n\nFinally, this API will continue to work for rendering e-mails:\n\nFor more information on the changes to server rendering APIs, see the working group post on Upgrading to React 18 on the server, a deep dive on the new Suspense SSR Architecture, and Shaundai Person’s talk on Streaming Server Rendering with Suspense at React Conf 2021.\n\nIf your project uses TypeScript, you will need to update your and dependencies to the latest versions. The new types are safer and catch issues that used to be ignored by the type checker. The most notable change is that the prop now needs to be listed explicitly when defining props, for example:\n\nSee the React 18 typings pull request for a full list of type-only changes. It links to example fixes in library types so you can see how to adjust your code. You can use the automated migration script to help port your application code to the new and safer typings faster.\n\nIf you find a bug in the typings, please file an issue in the DefinitelyTyped repo.\n\nReact 18 adds out-of-the-box performance improvements by doing more batching by default. Batching is when React groups multiple state updates into a single re-render for better performance. Before React 18, we only batched updates inside React event handlers. Updates inside of promises, setTimeout, native event handlers, or any other event were not batched in React by default:\n\nStarting in React 18 with , all updates will be automatically batched, no matter where they originate from. This means that updates inside of timeouts, promises, native event handlers or any other event will batch the same way as updates inside of React events:\n\nThis is a breaking change, but we expect this to result in less work rendering, and therefore better performance in your applications. To opt-out of automatic batching, you can use :\n\nFor more information, see the Automatic batching deep dive.\n\nIn the React 18 Working Group we worked with library maintainers to create new APIs needed to support concurrent rendering for use cases specific to their use case in areas like styles, and external stores. To support React 18, some libraries may need to switch to one of the following APIs:\n• is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. This new API is recommended for any library that integrates with state external to React. For more information, see the useSyncExternalStore overview post and useSyncExternalStore API details.\n• is a new hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render. Unless you’ve already built a CSS-in-JS library we don’t expect you to ever use this. This hook will run after the DOM is mutated, but before layout effects read the new layout. This solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering, giving it a chance to recalculate layout. For more information, see the Library Upgrade Guide for .\n\nReact 18 also introduces new APIs for concurrent rendering such as , and , which we share more about in the release post.\n\nIn the future, we’d like to add a feature that allows React to add and remove sections of the UI while preserving state. For example, when a user tabs away from a screen and back, React should be able to immediately show the previous screen. To do this, React would unmount and remount trees using the same component state as before.\n\nThis feature will give React better performance out-of-the-box, but requires components to be resilient to effects being mounted and destroyed multiple times. Most effects will work without any changes, but some effects assume they are only mounted or destroyed once.\n\nTo help surface these issues, React 18 introduces a new development-only check to Strict Mode. This new check will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount.\n\nBefore this change, React would mount the component and create the effects:\n\nWith Strict Mode in React 18, React will simulate unmounting and remounting the component in development mode:\n\nFor more information, see the Working Group posts for Adding Reusable State to StrictMode and How to support Reusable State in Effects.\n\nWhen you first update your tests to use , you may see this warning in your test console:\n\nTo fix this, set to before running your test:\n\nThe purpose of the flag is to tell React that it’s running in a unit test-like environment. React will log helpful warnings if you forget to wrap an update with .\n\nYou can also set the flag to to tell React that isn’t needed. This can be useful for end-to-end tests that simulate a full browser environment.\n\nEventually, we expect testing libraries will configure this for you automatically. For example, the next version of React Testing Library has built-in support for React 18 without any additional configuration.\n\nMore background on the testing API and related changes is available in the working group.\n\nIn this release, React is dropping support for Internet Explorer, which is going out of support on June 15, 2022. We’re making this change now because new features introduced in React 18 are built using modern browser features such as microtasks which cannot be adequately polyfilled in IE.\n\nIf you need to support Internet Explorer we recommend you stay with React 17.\n• : has been deprecated. Using it will warn and run your app in React 17 mode.\n• : has been deprecated. Using it will warn and run your app in React 17 mode.\n• Consistent useEffect timing: React now always synchronously flushes effect functions if the update was triggered during a discrete user input event such as a click or a keydown event. Previously, the behavior wasn’t always predictable or consistent.\n• Stricter hydration errors: Hydration mismatches due to missing or extra text content are now treated like errors instead of warnings. React will no longer attempt to “patch up” individual nodes by inserting or deleting a node on the client in an attempt to match the server markup, and will revert to client rendering up to the closest boundary in the tree. This ensures the hydrated tree is consistent and avoids potential privacy and security holes that can be caused by hydration mismatches.\n• Suspense trees are always consistent: If a component suspends before it’s fully added to the tree, React will not add it to the tree in an incomplete state or fire its effects. Instead, React will throw away the new tree completely, wait for the asynchronous operation to finish, and then retry rendering again from scratch. React will render the retry attempt concurrently, and without blocking the browser.\n• Layout Effects with Suspense: When a tree re-suspends and reverts to a fallback, React will now clean up layout effects, and then re-create them when the content inside the boundary is shown again. This fixes an issue which prevented component libraries from correctly measuring layout when used with Suspense.\n• New JS Environment Requirements: React now depends on modern browsers features including , , and . If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.\n• Components can now render : React no longer warns if you return from a component. This makes the allowed component return values consistent with values that are allowed in the middle of a component tree. We suggest to use a linter to prevent mistakes like forgetting a statement before JSX.\n• In tests, warnings are now opt-in: If you’re running end-to-end tests, the warnings are unnecessary. We’ve introduced an opt-in mechanism so you can enable them only for unit tests where they are useful and beneficial.\n• No warning about on unmounted components: Previously, React warned about memory leaks when you call on an unmounted component. This warning was added for subscriptions, but people primarily run into it in scenarios where setting state is fine, and workarounds make the code worse. We’ve removed this warning.\n• No suppression of console logs: When you use Strict Mode, React renders each component twice to help you find unexpected side effects. In React 17, we’ve suppressed console logs for one of the two renders to make the logs easier to read. In response to community feedback about this being confusing, we’ve removed the suppression. Instead, if you have React DevTools installed, the second log’s renders will be displayed in grey, and there will be an option (off by default) to suppress them completely.\n• Improved memory usage: React now cleans up more internal fields on unmount, making the impact from unfixed memory leaks that may exist in your application code less severe.\n• : Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest boundary and then retry rendering the same content on the client. It is still recommended that you switch to a streaming API like or instead.\n• : Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest boundary.\n\nYou can view the full changelog here."
    },
    {
        "link": "https://reactdatepicker.com",
        "document": ""
    },
    {
        "link": "https://refine.dev/blog/react-date-picker",
        "document": "This article was last updated on November 12, 2024, to add sections for Accessibility Considerations, Internationalization and Localization, Performance Optimization, and Testing Date Pickers.\n\nHaving a date picker that is simple, intuitive and consistent may be necessary to ensure users have a good experience using your web application.\n\nBuilding a date picker in React is more difficult than it looks. Even a simple calendar that lets users choose a date is fairly difficult to build from scratch. Task gets especially difficult when you want to include advanced features like selecting a range of dates.\n\nFortunately, the React community has come up with various libraries that provide easy-to-use, customizable, and consistent date pickers for your projects.\n\nIn this article, we’ll show you how to implement a date picker using the ‘react-datepicker’ library and how to customize the date picker’s appearance and functionality for your use case.\n\nis a lightweight library with a lot of features.\n\nTo build a simple React date picker, all you need to do is import the custom component and set two props. Advanced features require only a little more time.\n\nIn this article, we’ll use react-datepicker in a live environment CodeSandbox.\n\nYou can use npm to install the package in an existing project:\n\nOnce installed, import the custom DatePicker component in the file where you want to use it.\n\nYou also need to import CSS styles to display elements in all their beauty.\n\nDatePicker is a controlled component. In other words, the selected date is stored in the state and the date picker gets its value from the state. So we need to initialize the state.\n\nIn class components, we initialize a state object and use the setState() method to update it.\n\nIn functional components, we have the useState() hook that creates a state variable and the function to update it. In this case, a state variable will hold the selected date.\n\nThe react-datepicker library exports a custom component by default. When you import it, you can choose any name you want. In this case, we named it DatePicker.\n\nEvery DatePicker component must have at least two props to work:\n• selected - set to the selected date, stored in the state. It is similar to value prop on elements.\n• onChange - set to a callback function with one argument, which stands for the date selected by the user. The function body should call the updater function returned by the useState hook to update the state.\n\nAs simple as that, users can select a date. Try it yourself on CodeSandbox.\n\nIn class components, you set a default date when the state object is initialized.\n\nIn functional components, we can set a default date by passing a date value as an argument to the useState() hook. For example, useState(new Date()) will set it to today (the current date).\n\nSometimes it’s better to have no default date at all. You can add a placeholder text to help users pick the right date. Simply set the placeholderText prop on the custom component.\n\nWhen the user picks a date, the onChange event handler will update the state.\n\nSelecting a range of dates is a very common and useful feature - for booking accommodation, a round-trip, or any other purpose.\n\nBy default, one DatePicker component selects a single date value.\n\nYou can modify the event handler to select a range of dates. The function will accept an array of two values - startDate and endDate and select the dates between them.\n\nSo far we’ve only created one state variable. So our component is not equipped to store two dates. We need to create new startDate and endDate state variables to store the beginning and end of the range of dates. We’ll also create functions to update them.\n\nWe’ll need to change the event handler as well. When users select a range of values, the argument passed to the function won’t be a single value - but an array of two dates.\n\nWe need to destructure the array to get both the start and end of the range. Then we can update their corresponding state variables.\n\nWhen selecting a single date, it was possible to write an inline event handler, like so:\n\nSelecting a range of dates makes handleChange a bit more complex, so it can’t be an inline event handler. You’ll need to define it outside the tsx and reference it as the value of the onChange prop.\n\nNext, we need to add startDate, endDate, and selectsRange props to the custom component.\n\nSet startDate and endDate props to their respective state values. selectsRange is simply a boolean prop.\n\nYou can also use two DatePicker components to select the range. One component will select the start, and another the end.\n\nWe still need to create state variables startDate and endDate.\n\nLet’s say the first component selects a start date. Set the selectsStart prop to specify its purpose. Set selected and startDate props to values from the state, and onChange to a simple handler that updates the startDate state variable.\n\nNext, we need a second DatePicker component with a selectsEnd prop to specify that it selects the end of the range.\n\nThe component should get its values from the state. So selected and endDate props should be set to the endDate state variable. The onChange function should update the endDate state variable.\n\nThe React date picker that selects the end should have a startDate prop as well.\n\nAlso, have the minDate prop set to the start date. This will ensure that users can’t select an end date that comes earlier than the start date.\n\nAllow users to select both date and time by adding the showTimeSelect prop to your DatePicker.\n\nThis could be a useful use case for booking appointments or meetings.\n\nshowTimeSelect will allow users to select time intervals (9:00, 9:30, 10:00, etc). Set the timeIntervals prop to show 15-minute or 5-minute intervals instead.\n\nminTime and maxTime props allow you to disable times before or after a certain time.\n\nFor example, set minTime to 12:30, and maxTime to 19:00. Users will only be able to select times from 12:30 to 7 pm.\n\nSet the dateFormat prop to display both date and time within the field.\n\nIf you want users to enter their own time instead of selecting it, replace the showTimeSelect with the showTimeInput boolean prop.\n\nUse filterDate prop to conditionally disable dates in the calendar. Set its value to a callback function that returns a condition.\n\nUsers will be able to select only dates that meet the condition. Dates that do not meet the condition will be disabled.\n\nFor example, here’s a function that returns false for dates less than (earlier than) today, and true for higher (later) dates.\n\nYou can similarly check if the date is a weekend, a weekday, or a holiday, or disable dates based on any other condition.\n\nFor example, you might want to disable past dates so users can’t select them when booking accommodation or flights.\n\nYou can also use minDate and maxDate props to disable all dates before or after a certain date.\n\nfilterTime prop allows you to conditionally disable time values. For example, disable out-of-office hours.\n\nLet’s see how to implement various other features.\n\nYou can set className to customize the appearance of the custom DatePicker component.\n\nYou can use the calendarClassName prop to customize the appearance of the calendar itself. Increase font size, padding, background color, etc.\n\nSet the highlightDates prop to an array of date values that should be highlighted.\n\nSimply add the isClearable prop to the date picker to display a button to reset the selected date.\n\nUse the locale prop to specify the date locale. For example, use English (British) instead of the default US locale.\n\ndayClassName prop allows you to customize the appearance of each day in the calendar.\n\nYou can pass it a callback function that returns a ternary operator. dayClassName will apply the className only if the day meets a condition.\n\nThis prop allows you to customize the appearance of time selections.\n\nSet the timeClassName prop to a callback function that returns a ternary operator. It will apply the className value if the time meets a condition.\n\nThe value of the dateFormat prop specifies the format of date values.\n\nSet the minimum date, all dates earlier than minDate will be disabled.\n\nSet excludeDates prop to an array of date values that should be excluded. All other dates will be included.\n\nSet includeDates prop to an array of date values that should be included. All other dates will be excluded.\n\nSet the value of the excludeDateIntervals prop to an array of objects with two properties: start and end. The array can have multiple intervals. All dates outside of intervals will be included.\n\nJust like the previous prop, the value of includeDateIntervals should be an array of objects (intervals) with two properties: start and end.\n\nDate intervals specified in the array will be included. All dates outside of these intervals will be disabled.\n\nAdd this boolean prop to disable your datepicker. It works similarly to HTML elements’ disabled attribute.\n\nBy default, the calendar closes when the user selects a date. If you want the calendar to stay open, set the shouldCloseOnSelect prop to true.\n\nSometimes users need to select dates far ahead of time. showMonthDropdown and showYearDropdown props allow users to select dates from specific months or years in the future.\n\nAllow users to pick months and years instead of specific dates.\n\nBy default, a date picker shows a calendar where users can select a date. Use the monthsShown prop to specify the number of months that should display simultaneously. For example, setting monthsShown to 3 will allow users to select dates (or ranges) from 90 days.\n\nI just wanted to share a few thoughts on how to make our date picker implementation accessible for all users. Accessibility is key, and here are a few key things we should bear in mind:\n• Ensure that the date picker is browsable and selectable using a keyboard, which in turn shall include browsing of dates by arrow keys, selection of date by pressing Enter, and closing the date picker by pressing Esc.\n• Proper focus management should be ensured so that the date picker is an active element when open and on closing, the focus should get back to the element which triggers it.\n• Use ARIA attributes like for buttons, on the date picker container, and on content that is dynamically updated.\n• Ensure each date cell contains an that describes the date, for example, \"July 17, 2024\".\n• Make sure the date picker is correctly announced by screen readers, with proper instruction and feedback on interaction.\n• Tested with popular screen readers like JAWS, NVDA, and VoiceOver.\n• Ensure that the date picker can be seen and used properly when in high contrast mode. This is especially of value to a visually impaired user.\n• Test with Windows High Contrast mode and its counterparts in other operating systems.\n• Ensure the presence of enough color contrast between elements such as text and interactive components. Contrast ratio should meet WCAG guidelines, while at the minimum, normal text should have a 4.5:1 contrast ratio.\n• Make use of tools such as the Chrome DevTools Accessibility Pane or contrast checkers to verify online.\n• Ensure that the date picker is usable on every screen size, from the smallest mobile screen to a large tablet. Tap-target sizes and hit areas need to be decently sized.\n• Test on multiple devices and orientations for an acceptable experience.\n• Offer clear error messages and instructions. If a user has made an invalid selection, such as choosing an invalid date, explain to them the reason it's invalid and how to correct the mistake.\n• It may guide users with inline instructions or tooltips about how to select a date.\n\nWith these accessibility features, we can be sure that the date picker accommodates each and every one, regardless of their abilities. So let's go over these points once again, and then let's implement them in our date picker component and test thoroughly.\n\nThere are some key issues in the area of Internationalization (i18n) and Localization (l10n) that I would like to raise as they relate to our date picker implementation. For the date picker, let's customize it for different languages and regions so users all over the world can share a common experience.\n• Be able to translate the date picker to other languages. Use libraries or frameworks that support i18n, such as or .\n• All static text, such as names of the months, names of days, and any textual instructions, should be translatable.\n• Date format depends on locale, e.g., MM/DD/YYYY in the United States, DD/MM/YYYY in Europe. Datepicker should locale user's machine settings.\n• Use a locale-aware library like or for date formatting and parsing.\n• Ensure that numeric values like years are formatted with respect to the locale being used while considering different systems of numerals.\n• Some of the languages that read RTL are Arabic and Hebrew. There should be RTL layout support for date pickers so that a natural user reading and interacting experience can be maintained.\n• Test the date picker within an RTL layout for elements alignment and usability.\n• In other cultures, weekends might not take place on Saturday and Sunday. For instance, in some Middle Eastern countries, the weekend takes place on Friday and Saturday.\n• Shows local holidays and weekends as per the user's locale.\n• If the date picker includes time entry, make sure that it properly supports time zones. Users should see the local time in their time zone.\n• Make use of libraries such as for time zone conversions.\n• Be mindful of cultural differences and sensitivities. Some colors, icons, and symbols have different connotations depending on the culture and the people.\n• Ensure that the user interface of the date picker does not face any of these differences.\n\nThoroughly testing date pickers ensures they work well for all users across different devices, browsers, and scenarios. Here are some best practices and code examples for testing date pickers:\n\nSnapshot tests help ensure the date picker renders correctly and that changes are intentional. When using libraries like , wrap the component in a simple test to capture its initial state.\n\nTesting user interactions, such as opening the calendar, selecting dates, and clearing selections, is crucial. @testing-library/react is useful for simulating these interactions.\n\nEnsuring accessibility means verifying that the date picker can be navigated via keyboard. Users should be able to open it, navigate dates with arrow keys, select a date with Enter, and close it with Esc.\n\nTesting boundary values, such as minimum and maximum selectable dates, prevents users from selecting out-of-range dates.\n\nFor date pickers supporting multiple languages, ensure they display correctly across different locales. This includes checking date format, day names, and month names.\n\nI also wanted to touch on some critical aspects of optimization in performance that we should consider for our date picker, taking care that it runs in the most efficient manner and responds properly to user input. This would greatly improve the user experience—most importantly, for users with low-end devices or slow connections.\n• Load the components and data only when needed, like the date picker component should be loaded when only the user interacts with the input field.\n• Use React's with a wrapper to get component-level code-splitting.\n• Guarantee minimal re-rendering in the date picker component. The implementation takes care of this.\n• Avoid passing a new object or function reference as a prop, it is better to avoid it because it will make re-renders.\n• Keep the state as minimal as possible. Store only values that are required to support the functionality of the date picker.\n• Use the and hooks to memoize functions and values for preventing unnecessary calculations.\n• If the date picker is rich in numbers of items, for example, years or months, use virtualization of visible items. The huge positive impact can be realized in reducing the loading time and scrolling performance at the start.\n• Leverage libraries like or for virtualization.\n• For user input that triggers heavy computation or API calls (e.g., searching for dates or input validation), you'll want to debounce so the operations don't get called too frequently.\n• Implement a debounce function that triggers the search after a predefined period of time in which a user has stopped typing.\n• Code split into small bundles to ensure the load time for the first instance. Use in-built support in React for code-splitting with React.lazy and dynamic imports.\n• Analyze the bundle size with tools like Webpack Bundle Analyzer and optimize the build configuration based on the analysis.\n• Do not add many event listeners; it is expensive in terms of performance. Use event delegation when possible.\n• Batch state updates and handle multiple events within one handler in order to cut on re-renders.\n\nTo make our date picker user-friendly for people around the world, it’s essential to consider internationalization (i18n) and localization (l10n). This helps ensure that users in various regions and languages find the date picker intuitive and easy to use.\n\nAllowing the date picker to be translated into multiple languages makes it more accessible. Libraries like or help manage translations, such as for month names, day names, and any instructional text.\n\nDifferent countries use different date formats (e.g., MM/DD/YYYY in the U.S. vs. DD/MM/YYYY in Europe). Libraries like date-fns or moment.js can format dates based on the user’s region.\n\nFor languages like Arabic and Hebrew that read right-to-left, the date picker should adapt to an RTL layout for a better user experience.\n\nWeekends vary by country (e.g., Friday and Saturday in some Middle Eastern countries). Customize the date picker to highlight weekends or block specific dates based on regional preferences.\n\nFor date pickers that include time selection, support for time zones is essential. Libraries like moment-timezone manage time zone conversions, ensuring users see the correct local time.\n\nDate pickers are sometimes a web application’s most important feature. In this article, we showed how to create basic React date picker using react-datepicker package, implementing advanced features and their possible use cases.\n\nHopefully our article has helped you make best use of the ‘react-datepicker’ package to create datepickers in a short time."
    },
    {
        "link": "https://retool.com/blog/how-to-use-react-datepicker-to-build-better-internal-apps",
        "document": "Since our reps are dealing with orders from customers, all of the data in the table they are viewing will be in the past. If they were to select a date in the future, there would be no data to view, and the rep would be looking at an empty table. Instead of that happening, lets disable all future dates in the calendar so that the rep can’t select them."
    },
    {
        "link": "https://medium.com/@yasiru1999/create-a-custom-date-range-picker-using-react-date-picker-cc65cf0758bf",
        "document": "When it comes to styling in React projects, the Material UI (MUI) library is often the go-to choice for many developers due to its comprehensive and versatile design components. However, there are times when you may need to step outside the bounds of what MUI offers. In my recent project, I faced such a scenario: I needed a date range picker, but unfortunately, the MUI date range picker is a feature restricted to Pro users. This limitation led me to explore alternative solutions.\n\nAfter some research, I decided to integrate the React Date Picker library into my project. While this library is robust and functional, I quickly noticed that its default styling is quite basic and doesn’t align with the polished, modern aesthetic that my project required. This realization set me on a journey of customization and enhancement.\n\nReact Date Picker is a popular and straightforward library that allows developers to implement date pickers with ease. It is well-documented, has a variety of options, and is highly customizable. However, out of the box, its visual appearance might not meet the design standards of more refined projects, particularly those using MUI.\n\nFirst, you need to install the React Date Picker library and its dependencies. Run the following command in your project’s root directory:\n\nCreate a new component inside the directory. Additionally, create a new file within the same directory.\n\nImport the necessary components in your React component."
    },
    {
        "link": "https://wpwebinfotech.com/blog/react-datepicker",
        "document": "Are you building a React application that requires users to input dates? If so, a datepicker is an essential component to consider. Datepickers provide a user-friendly and intuitive way for users to select dates, ensuring data accuracy and consistency.\n\nIn this blog post, we’ll dive into what is the function of date pickers in React and their use case. We’ll also check out the best react libraries developers use to add the datepicker components. Plus, we’ll help you learn how ReactJS development experts implement and customize datepickers with various options. With that said, let’s begin!\n\nA datepicker in React is a user interface component that allows users to select a date or a range of dates from a calendar. It is commonly used in forms and other interactive elements where date selection is required. Datepickers enhance user experience by providing a visual and intuitive way to choose dates, rather than manually typing them in.\n• Calendar View: Displays a calendar interface where users can click on dates to select them.\n• Date Formatting: Allows customization of the date format (e.g., MM/DD/YYYY, DD/MM/YYYY).\n• Range Selection: Datepickers supports selecting a range of dates, which is useful for applications like booking systems.\n• Localization: It supports different languages and date formats to cater to a global audience.\n• Validation: Many datepicker libraries provide validation features to ensure that the selected date falls within a certain range or meets specific criteria.\n• Event Handling: Datepickers can trigger events (such as onChange) when a date is selected. That allows developers to manage application state and update other components accordingly.\n• Customization: Allows developers to customize the appearance and behavior of the date picker to match the application’s design.\n\nThese features of datepicker enhance user experience by making date selection simple and efficient. On the other hand they also enable professional ReactJS developers to implement robust date management on their website.\n\nUsing a datepicker in React offers several advantages that enhance both the user experience and the development process. Here are some compelling reasons to implement a datepicker in your React websites:\n\nA datepicker provides an intuitive interface that allows users to easily navigate and select dates visually. This reduces confusion compared to manually typing dates, which can lead to formatting errors. By presenting dates in a structured format, datepickers reduce the chances of user input errors, enhancing the overall user experience.\n\nUtilizing a datepicker ensures that all date inputs adhere to a standardized format, which is essential for maintaining data integrity. This consistency prevents errors in how dates are handled throughout the website. That makes it easier for developers to manage and process date-related data efficiently.\n\nDatepicker libraries offer customizable features, such as date range selection, the ability to disable specific dates, and options for styling. This flexibility enables developers to build a datepicker that fits specific needs of their site. Plus, these components can integrate with other UI elements like React Hook Form, enhancing overall functionality.\n\nDatepickers come with built-in validation features, such as preventing users from selecting past dates or specific holidays. This dynamic date validation helps ensure that users make valid selections. Developers can further customize the behavior of the datepicker, such as restricting date ranges, allowing for a custom experience.\n\nDatepickers are versatile components used in various applications to simplify date selection. Here are some common use cases for implementing a datepicker:\n• Booking Systems: Datepickers are frequently used in booking systems, such as for hotels and flights, where users need to select arrival and departure dates. This helps ensure that users choose valid and available dates, streamlining the booking process.\n• Appointment Scheduling: In sites that manage appointments (e.g., medical, salon, or business meetings), datepickers allow users to select a date and time easily. This ensures that appointments are booked accurately and helps avoid scheduling conflicts.\n• Form Inputs: Datepickersare commonly used in forms that require date input, such as registration forms, surveys, or feedback forms. They provide a simple way for users to enter dates while maintaining the correct format, reducing errors.\n• Event Planning: Event management websites use datepickers to help users select dates for events and manage RSVPs. That allows users to visualize date availability and plan accordingly.\n• eCommerce Platforms: eCommerce sites often utilize datepickers for selecting delivery dates, for items with specific shipping schedules. This feature allows customers to choose when they would like their orders delivered.\n\nThese use cases highlight the versatility and functionality of datepickers across various types of website, making them a valuable component for improving user experience.\n\nImplementing a Datepicker in a React application is simple with the help of popular libraries offering customizable components. Here’s a step-by-step guide on how to implement a Datepicker in React using the react-datepicker library as an example:\n\nThe first step in implementing a Datepicker in React is to choose a suitable library. There are several options available, such as react-datepicker, Material-UI Datepicker, and Ant Design Datepicker. For this guide, we’ll use react-datepicker due to its flexibility and ease of use.\n\nTo start using a datepicker, you first need a React project. If you don’t have one yet, you can create a new React application using Create React App. Open your terminal and run the following command:\n\nNow, navigate into your project directory:\n\nIn this step, we initialized a new React project, with all necessary configurations to start developing a React website.\n\nTo begin, we need a datepicker component. The react-datepicker library is a popular choice for this task due to its simplicity and ease of use. Start by installing it into your React project using either npm or yarn.\n\nHere, we installed the react-datepicker package into your project. That will allow us to use its pre-built datepicker component in your application.\n\nNext, you need to import the datepicker component along with its associated styles. This ensures that your datepicker appears correctly styled when rendered.\n\nBy importing the necessary components and styles, you set the stage for using the datepicker in your application. This is essential for both functionality and visual appeal.\n\nIn this step, we’ll use React’s state management to store the date selected by the user. Here is how you can do this using the useState hook.\n\nIn this step, we defined a state variable selectedDate that will hold the date chosen by the user. The setSelectedDate function will be used to update this state whenever a new date is picked.\n\nStep 6: Implement the Datepicker in your Component\n\nNow that you have your state set up, you can include the datepicker component within your JSX. Bind the selected and onChange properties to the state variable and the state updater function.\n\nHere, we integrated the datepicker into your component, allowing users to interact with it. The selected prop determines the currently chosen date, while the onChange prop updates the state when the user selects a date.\n\nYou can enhance the datepicker’s functionality by adding optional props. For example, you can disable past dates, restrict date selections to weekdays, or enable time selection.\n\nBy adding these optional props, you enhance the datepicker’s functionality and user experience. This allows for more precise date selection customized to your website’s requirements.\n\nIf you plan to use the datepicker within a form, you’ll want to manage form submissions. Here’s how you can do that:\n\nIn this step, we set up a form submission handler that prevents the default behavior and logs the selected date to the console. It showcases how to use the selected date in practical scenarios, such as saving it or sending it to a server.\n\nWhile the datepicker comes with default styling, you may want to apply your custom CSS to match your application’s design. You can override existing styles or add new classes to style your datepicker component.\n\nThis optional step allows you to customize the appearance of the datepicker to better fit your website’s looks. Custom styling can significantly enhance user experience and visual consistency.\n\nHere’s how your complete component might look after following the above steps:\n\nBy following these steps, we’ve successfully implemented a basic datepicker in your React application. You can customize the datepicker’s appearance, format, and behavior using the library’s specific options. If you are finding it hard to implement or want a complete development solution, consider hiring React developers.\n\nCustomizing datepickers in React allows you to customize their appearance and behavior to match your website’s specific requirements. Here are some common customization options:\n\nCustomizing the date format is a common requirement. By default, most datepickers follow a standard format, but you can specify your own using the dateFormat prop.\n\nThis ensures that the date appears in the format your application requires, whether it’s a local format or something standardized.\n\nYou might need to restrict the dates a user can select. This can be done with the minDate and maxDate props, which set boundaries for date selection.\n\nLimiting the date range is useful for websites like booking systems where users should only select future dates within a certain period.\n\nIn some scenarios, you may want to disable certain days of the week, like weekends or holidays. This can be achieved using the filterDate prop, which provides a callback function to disable dates conditionally.\n\nDisabling specific days is useful in scheduling websites where users should only select weekdays or certain working hours.\n\nCustomizing the appearance of the datepicker can be done by overriding the default CSS styles. You can apply custom classes to the datepicker component using the className prop and then style them in your CSS.\n\nStyling customization is crucial for aligning the datepicker’s design with the overall look and feel of your website.\n\nIf you want more control over the input field (for example, adding icons), you can use the customInput prop to provide your own input component.\n\nThis level of customization allows for a more flexible and personalized user interface, such as embedding the datepicker within a button.\n\nThese were some of the many customization you can have on your datepicker component. Customizing datepickers in React allows you to control both their appearance and functionality. If you want a site that is highly customized and responsive I would recommend you to get in touch with our ReactJS development company.\n\nWhen implementing a datepicker in React, developers often rely on third-party libraries that offer extensive features and customization options. These libraries simplify the process and provide a polished user experience. Below are some of the most popular datepicker libraries for React:\n\nIt is one of the most widely used libraries for adding datepickers to React projects. It’s highly customizable, supports time selection, and allows features like date ranges and localization. The library is easy to use and integrates well with React.\n\nReact day picker is another powerful option for creating interactive calendars and date pickers. It’s highly flexible, supports single and multiple date selection, and provides rich customization options like custom day rendering and keyboard navigation.\n\nFor those using Material-UI as their design system, Material-UI Pickers is the go-to choice. It integrates seamlessly with Material-UI’s look and feel, offering date and time pickers that follow Google’s Material Design guidelines.\n• Theming options to match the overall Material-UI theme\n\nReact dates is a highly customizable datepicker library created by Airbnb. It offers a flexible, modern interface and is especially useful for applications that require a high degree of customization or complex date range selections.\n\nIf you’re using Ant Design for your UI framework, Ant Design’s DatePicker is a great built-in component that provides a simple yet powerful way to select dates. It follows the Ant Design system and offers additional features like date ranges, time selection, and month or year selection.\n\nEach of these React datepicker libraries offers unique features. You can choose the one that aligns with your project’s specific requirements. To make the ideal choice you can compare features like time selection, date ranges, or calendar views, and more.\n\nDatepickers are a valuable tool for enhancing user experience and improving data accuracy in React applications. By understanding the various datepicker libraries available you can choose the best one that aligns with your requirements.\n\nOnce you have chosen the implementation is simple, firstly install the library and then import the required components. After that you will be able to implement the datepicker on various types of sites like forms or booking platforms.\n\nIf you are looking to customize datepicker further or want to build a unique and dynamic experience, hire ReactJS developers."
    }
]