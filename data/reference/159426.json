[
    {
        "link": "https://mongodb.com/docs/manual/installation",
        "document": "MongoDB is available in two server editions: Community and Enterprise.\n\nThis section of the manual contains information on installing MongoDB.\n• None For instructions on upgrading your current deployment to MongoDB 8.0, see 8.0 Upgrade Procedures .\n• None For instructions on upgrading to the latest patch release for your current version, see Upgrade to the Latest Self-Managed Patch Release of MongoDB .\n• None For documentation of , , and all other tools distributed with MongoDB, see MongoDB Package Components ."
    },
    {
        "link": "https://mongodb.com/docs/manual/administration/install-community",
        "document": "Learn more about who we are"
    },
    {
        "link": "https://mongodb.com/docs/manual/tutorial/install-mongodb-on-windows",
        "document": "Use this tutorial to install MongoDB 8.0 Community Edition on Windows using the default installation wizard. This tutorial installs MongoDB 8.0 Community Edition. To install a different version of MongoDB Community , use the version drop-down menu in the upper-left corner of this page to select the documentation for that version. This tutorial installs MongoDB on Windows using the default MSI installation wizard. You can also install MongoDB on Windows by these other methods:\n\nFollow these steps to install MongoDB Community Edition using the MongoDB Installer wizard. The installation process installs both the MongoDB binaries as well as the default configuration file . Download the MongoDB Community installer from the following link:\n• None In the Version dropdown, select the version of MongoDB to download. For example, from the Windows Explorer/File Explorer:\n• None Go to the directory where you downloaded the MongoDB installer ( file). By default, this is your directory. The wizard steps you through the installation of MongoDB and MongoDB Compass.\n• None You can choose either the (recommended for most users) or setup type. The setup option installs MongoDB and the MongoDB tools to the default location. The setup option allows you to specify which executables are installed and where.\n• None You can set up MongoDB as a Windows service during the install or just install the binaries. You can configure and start MongoDB as a Windows service during the install, and the MongoDB service is started upon successful installation.\n• None Select one of these options:\n• None This is a Windows user account that is built-in to Windows.\n• None Run the service as a local or domain user\n• None For an existing local user account, specify a period ( ) for the Account Domain and specify the Account Name and the Account Password for the user.\n• None For an existing domain user, specify the Account Domain, Account Name and Account Password for that user.\n• None Service Name. Specify the service name. Default name is . If you already have a service with the specified name, you must choose another name.\n• None Data Directory. Specify the data directory, which corresponds to the . If the directory does not exist, the installer will create the directory and sets the directory access to the service user.\n• None Log Directory. Specify the Log directory, which corresponds to the . If the directory does not exist, the installer will create the directory and sets the directory access to the service user. If you choose not to configure MongoDB as a Windows service, uncheck the Install MongoD as a Service.\n• None Optional. To have the wizard install , select (Default). The installer does not include mongosh. Follow the mongosh installation instructions to download and install the shell separately. If You Installed MongoDB as a Windows Service If you would like to customize the service, you must stop the service. Customize the MongoDB instance by editing the configuration file at . For information about the available configuration options, refer to Self-Managed Configuration File Options . After making changes, start the service again . If You Did Not Install MongoDB as a Windows Service If you only installed the executables and did not install MongoDB as a Windows service, you must manually start the MongoDB instance. See Run MongoDB Community Edition from the Command Interpreter for instructions to start a MongoDB instance.\n\nYou can install and configure MongoDB as a Windows Service during installation. The MongoDB service starts upon successful installation. Configure the MongoDB instance with the configuration file . If you have not already done so, follow the mongosh installation instructions to download and install the MongoDB Shell (mongosh). Be sure to add the path to your binary to your environment variable during installation. Open a new Command Interpreter and enter to connect to MongoDB. For more information on connecting to a using mongosh.exe, such as connecting to a MongoDB instance running on a different host and/or port, see Connect to a Deployment . For information on CRUD (Create, Read, Update, Delete) operations, see: To start/restart the MongoDB service, use the Services console:\n• None From the Services console, locate the MongoDB service.\n• None Right-click on the MongoDB service and click Start. To stop/pause the MongoDB service, use the Services console:\n• None From the Services console, locate the MongoDB service.\n• None Right-click on the MongoDB service and click Stop (or Pause). To remove the MongoDB service, first use the Services console to stop the service. Then open a Windows command prompt/interpreter ( ) as an Administrator, and run the following command:"
    },
    {
        "link": "https://mongodb.com/docs",
        "document": "Welcome to the official MongoDB Documentation. Whether you're a developer, database administrator, or just starting your journey with MongoDB, our documentation provides you with the information and knowledge needed to build applications on the world's most popular modern database."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-install-mongodb-on-windows",
        "document": "Looking to install MongoDB on your Windows machine? This detailed guide will help you install MongoDB on Windows (Windows Server 2022, 2019, and Windows 11) quickly and efficiently. Whether you’re a developer or a beginner, follow this guide for seamless MongoDB installation, including setting up environment variables and running the MongoDB server.\n\nThe user running MongoDB services (mongod, mongos) must have membership in the following groups:\n\nHow to Install MongoDB on Windows Using MSI\n\nTo install MongoDB on Windows, first, download the MongoDB server and then install the MongoDB shell. The Steps below explain the installation process in detail and provide the required resources for the smooth download and install MongoDB.\n\nGo to the MongoDB Download Center to download the MongoDB Community Server.\n\nHere, You can select any version, Windows, and package according to your requirement. For Windows, we need to choose:\n• None When the download is complete open the msi file next button\n• End-User License Agreement and click the next button:\n• complete option to install all the program features. Here, if you can want to install only selected program features and want to select the location of the installation, then use the Custom option:\n• Run service as Network Service use r” and copy the path of the data directory. Click Next\n• None After clicking on the install button installation of MongoDB begins:\n• None Now we go to the location where MongoDB installed in step 5 in your system and copy the bin\n• None Now, to create an environment variable open system properties >> Environment Variable >> System variable >> path >> Edit Environment variable\n• None paste the copied link to your environment system and click Ok\n• None After setting the environment variable, we will run the MongoDB server, i.e. mongod\n• command prompt and run the following command:\n\nWhen you run this command you will get an error i.e. C:/data/db/ not found.\n\nAfter creating these folders. Again open the command prompt and run the following command:\n\nNow, this time the MongoDB server(i.e., mongod) will run successfully.\n\nStarting from MongoDB version 5.0, the traditional MongoDB shell ( ) has been deprecated. The recommended shell for interacting with MongoDB databases is now , which provides improved functionality, better syntax, and full compatibility with the latest MongoDB features.\n• None Now we are going to connect our server (mongod) with the mongo shell. So, keep that mongod window\n• None You are now connected to the MongoDB shell.\n\nPlease do not close the mongod window if you close this window your server will stop working and it will not able to connect with the mongo shell.\n\nNow we can make a new database, collections, and documents in our shell. Use the following command within the mongosh shell to create a new database:\n\nThe use Database_name command makes a new database in the system if it does not exist, if the database exists it uses that database:\n\nThe db.Collection_name command makes a new collection in the gfg database and the insertOne() method inserts the document in the student collection:\n\nHere is Step by Step process on How to Install MongoDB on Windows without Admin Rights –\n\nGet the ZIP version of MongoDB from the official MongoDB website.\n\nExtract the ZIP archive to a location on your computer where you have write permissions, such as your user directory.\n• None Navigate to the extracted MongoDB directory and locate the “ bin\n• None Open a command prompt window and navigate to the “bin” folder within the MongoDB directory\n\nRun the MongoDB server by executing the command with the path to the directory where you want to store MongoDB data files. Make sure to use a location where you have write permissions.\n• None MongoDB should now be running locally on your Windows system without the need for admin rights\n• None You can interact with MongoDB using the MongoDB shell by running the command\n\nBy following these steps, you can install and run MongoDB on Windows without admin rights, allowing you to work with MongoDB databases on your local machine.\n• None Always use the modern command for compatibility with new features.\n\nInstalling MongoDB on Windows is simple and flexible, whether we have administrative rights or not. By following the outlined steps, we can successfully set up the MongoDB server, configure the necessary environment variables, and start working with MongoDB databases using the MongoDB Shell. This guide walks us through both standard installation using MSI and manual setup without admin rights.\n\nBy following these steps, we can start using MongoDB to create and manage databases on our Windows machine. For more in-depth learning, check out our MongoDB Tutorial or MongoDB: An Introduction.\n\nWhat are the system requirements for installing MongoDB on Windows?\n\nCan I install MongoDB on Windows without administrative rights?\n\nHow do I start the MongoDB Shell after installing MongoDB?"
    },
    {
        "link": "https://navicat.com/en/products/navicat-for-mongodb",
        "document": "Accelerate your coding process with Code Completion and Code Snippet, and gain valuable insights into query-database interaction by visualizing the execution plan. You can also visually construct queries using a set of interactive tools, without having to worry about syntax and proper usage of commands.\n\nConstruct aggregation pipeline step-by-step through a clear and responsive UI. You can apply drag and drop to add and rearrange stages to achieve the desired data flow. This visual interface lets you trace the flow of data through each stage. It provides instant feedback and preview of results at different stages of the pipeline.\n\nData Transfer, Data Synchronization and Structure Synchronization help you migrate your data easier and faster for less overhead. Deliver detailed, step-by-step guidelines for transferring data across databases. Compare and synchronize data and structure between databases. Set up and deploy the comparisons in seconds, and get the detailed script to precisely outlines the changes you want to execute.\n\nConvert your databases into graphical representations and build multiple models within a single workspace to illustrate different model objects using Relational, Dimensional, and Data Vault 2.0 methods. Align your model design with the actual database to maintain the integrity of the model and simplify the navigation and comprehension of complex systems.\n\nCreate visual representations of large data sets to unearth patterns, trends and relationships among data, and present your findings in dashboard for sharing. In a dashboard, all charts linked to the same data source are interconnected, allowing any actions performed on the charts to instantly update and reflect your selections.\n\nCreate stunning document for each database element. You can choose from a range of pre-designed templates and personalize them to suit your preferences. Set up automated processes to export the document as PDFs, and share them with stakeholders via email."
    },
    {
        "link": "https://mongodb.com/community/forums/t/guidelines-for-setting-up-a-production-instance/7467",
        "document": "Hello @Ashley_Meadows well come to the community!\n\nIt is great that you want to utilize the strong features of MongoDB. As you mention you have a solid SQL background. To get the most out of an noSQL Setup, you need to change the way of thinking about schema design. Your first goal will no longer be to get the maximal normalized Schema, Denormalization is not bad, the requirement of your queries will drive your design. The story will start to think about a good schema design. In case you move the SQL normalized Data Model 1:1 to MongoDB you will not have much fun or benefit.\n\nSo in a first step I’d suggest to check out if you have a well fitting schema to utilize the MongoDB / noSQL advantages. If this is not the case, please do not worry about DBA issues and setup parameters - most likely you approach would not satisfy you without good data modelling.\n\nThat said, DBA and setup parameter should not be underestimated! As start you can try out a sample DB as free tier in MongoDB Altas. This would move away many DBA issues and you can focus on the data modeling. Please also check out MongoDB Compass. Compass is the GUI for MongoDB. You can visually explore your data, run ad hoc queries, interact with your data with full CRUD functionality, view and optimize your query performance and index suggestions.\n\nUnfortunately I am not aware of a compiled list of DBA best practices (@Stennie_X, @chris, @Doug_Duncan, @Prasad_Saya do you know one this could be of general interest).\n\nYou can find further information on the Transitioning from Relational Databases to MongoDB in the linked blog post. Please note also the links at the bottom of this post, and the referenced migration guide .\n\nSince you are new to MongoDB and noSQL I highly recommend to take some of great and free classes from the MongoDB Univerity:\n\nThis is just a sample which can get you started very well. In case this is going to be a mission critical project\n\n I’d recommend getting Professional Advice to plan a deployment There are many considerations, and an experienced consultant can provide better advice with a more holistic understanding of your requirements. Some decisions affecting scalability (such as shard key selection) are more difficult to course correct once you have a significant amount of production data.\n\nHope this helps to start, while getting familiar and all time after, feel free to ask you questions here - we will try to help."
    },
    {
        "link": "https://navicat.com/en/company/aboutus/blog/1003-relationships-in-mongodb",
        "document": "As the name implies, Relational Databases (RDBMSes) maintain relationships between the tables to organize the data together in meaningful ways. Document databases such as MongoDB are sometimes called \"schema-less\" due to the fact that they don't really enforce relationships like RDBMSes do. However, while document databases don't require the same predefined structure as a relational database, that doesn't mean that they don't support it. In fact, MongoDB allows relationships between documents to be modeled via Embedded and Referenced approaches. In today's blog, we'll give each a try using Navicat for MongoDB.\n\nAs an example, we'll consider the use case of the ACME corporation. They need to store the addresses in such a way as to link them to employees. One employee can have multiple addresses, making this a one-to-many (1:N) relationship. That's no problem, as relationships in MongoDB can be any of one-to-one (1:1), one-to-many (1:N), many-to-one (N:1) or many-to-many (N:N), just as in relational databases.\n\nHere is the document structure of the employees document in Navicat's JSON view:\n\nAnd here are is the addresses document:\n\nUsing the embedded approach, we would embed the addresses document directly inside the employees document. We can easily do that in Navicat for MongoDB as follows:\n• Open the addresses collection in JSON view and copy the last two documents:\n• Switch to the employees collection and edit the first document:\n• Paste the addresses into the employee document that you want to associate them with and enclose them within a \"address\" array element:\n\n \n\n\n\nThis approach maintains all the related data in a single document, which makes it easy to retrieve and maintain. The whole document can now be retrieved in a single query:\n\n\n\nThe drawback to Embedded Relationships is that if the embedded document keeps on growing too much in size, it can negatively impact read/write performance.\n\nUsing this approach, both the employee and address documents would be maintained separately, but the employees document would contain a field that references the address document's id field:\n\nAs shown above, the employee document contains the array field \"address_ids\" which contains ObjectIds of corresponding addresses. Using these ObjectIds, we can query the address documents and get address details from there.\n\nAlthough this approach keeps document sizes to a more manageable size, we now need two queries to fetch address details: one to retrieve the address_ids fields from employees document and another to fetch the addresses from the addresses collection:\n\nIn the next blog, we'll learn how to use MongoDB Referenced Relationships (also referred to as Manual References) and DBRefs in Navicat for MongoDB. You can learn more about it on the product page. You can download the fully functional application and use it FREE for a fourteen day trial period!"
    },
    {
        "link": "https://navicat.com/company/aboutus/blog/3071-getting-started-with-navicat-on-prem-server-part-3",
        "document": "In a recent blog, we learned about Navicat's latest collaboration tool: Navicat On-Prem Server. It's an on-premise solution for hosting a cloud environment where you can securely store Navicat objects internally at your location. Today's blog will cover how to work with projects in Navicat On-Prem Server. Topics covered will include how to create a project, adding members, and how to configure a connection to your database instance(s).\n\nThe first time you launch On-Prem Server, the main window will indicate that you have no projects yet. To add one, click the \"+New\" button and select \"New Project\" from the popup menu:\n\nEnter the project name in the dialog and click \"Create\" to add the new project.\n\nAfter the dialog closes, you should see your new project under \"Projects\" in the main window:\n\nOur new project will now allow us to share queries, code snippets, virtual group information, as well as model and Business Intelligence (BI) workspaces with our team members. Let's add some team members to the project now. There are a couple of ways to do that; the first is to click on the ellipsis (...) to the right of the project name. That will open a submenu with additional commands. The one we want is \"Manage Members\":\n\nClicking it opens a dialog where we can add members.\n\nThe other way to access the dialog is to click on the project name. That will show the project details. There, we can click the \"Manage Members\" icon:\n\nWhen the Collaborate dialog first opens, only the project owner will appear in the list. To add members, click the \"+Add Member\" button at the bottom of the dialog:\n\nThat will show some additional fields to the bottom of the dialog where we can enter the member's name/email and rights. These include:\n\nClick \"Add\" to append the member to the list.\n\nBefore we can share queries, code snippets, virtual group information, or model workspaces and Business Intelligence (BI) workspaces with our team members, we must first create a connection to the database instance.\n\nThe first step for creating a new connection is similar to that of creating a new project. Again, we will click the \"+New\" button, but this time, we will choose the \"New Connection\" command from the popup menu:\n\nThe New Connection dialog will guide us through the process.\n\nThe first step is to select the connection type - i.e. what type of database are we connecting to:\n\nOn the next screen, we can provide the Connection Name, Project, as well as the authentication details:\n\nOnce all of the fields have been populated, we can test the connection by clicking the \"Test Connection\" button. We can then proceed to create the new connection by clicking on \"New\".\n\nOnce the dialog closes, we should see the new connection on the Connections screen:\n\nIn today's blog we learned how to create a project, adding members, and how to configure a connection to your database instance(s) in Navicat On-Prem Server. Now that we've configured the connection to our database instance, next week we'll proceed to establish a connection to the database, and share some Navicat objects with our team members via the project that we created here today."
    },
    {
        "link": "https://stackoverflow.com/questions/17998101/mongodb-synchronize-development-and-production-databases",
        "document": "We have a dev server which contains a collection of Objects. The actual accumulation of these objects is an ongoing process, which runs a whole process of labelling, verification, etc. on this local dev server. Once these objects are production ready, they are added to the Production DB, which will from that moment, use them in its calculations.\n\nI'm looking for a way to simply add the delta (new objects) into the production DB, while retaining all the other collections, and older objects in the same collection as is. Until now, we've used MySql, so this process simply involved running DB structure and data synchronization (we used Navicat for that). We're now moving to MongoDB, so this process is a bit more tricky.\n\nI've looked into this, and I think the following solutions do not fit my needs:\n• Dumping the dev DB and loading it in the Production DB using then\n• Running - actually replaces the production db with a copy of the dev DB.\n\nBoth solutions are problematic, because they actually replace the Production DB, when all I want to do is update objects in an existing collection. Also, going Dev => Production does not fit the Master-Slave topology.\n\nThe best thing I could think of is to:\n• Copy the dev DB into a \"dev\" DB on the production instance.\n• Copy the collection from this dev DB to the actual production DB, and add a predicate that I will only add objects that are non-existent in the production DB, similar to this solution.\n\nI was wondering if anyone has a better solution?\n\nIf not, does anyone have a script that could perform this?"
    },
    {
        "link": "https://mongodb.com/docs/manual/reference/program/mongod",
        "document": "MongoDB disables support for TLS 1.0 encryption on systems where TLS 1.1+ is available.\n\nThis document provides a complete overview of all command line options for mongod . These command line options are primarily useful for testing: In common operation, use the configuration file options to control the behavior of your database.\n\nmongod is the primary daemon process for the MongoDB system. It handles data requests, manages data access, and performs background management operations.\n\nMongoDB Community : The source-available, free-to-use, and self-managed version of MongoDB\n\nMongoDB Atlas manages the mongod for all MongoDB Atlas deployments.\n\nMongoDB Atlas : The fully managed service for MongoDB deployments in the cloud\n\nDeployments hosted in the following environments use mongod :\n\nmongod includes a Full Time Diagnostic Data Capture mechanism to assist MongoDB engineers with troubleshooting deployments. If this thread fails, it terminates the originating process. To avoid the most common failures, confirm that the user running the process has permissions to create the FTDC diagnostic.data directory. For mongod the directory is within storage.dbPath . For mongos it is parallel to systemLog.path .\n\nEnables encryption for the WiredTiger storage engine. This option must be enabled in order to pass in encryption keys and configurations. Available in MongoDB Enterprise only. The cipher mode to use for encryption at rest: MongoDB Enterprise on Windows no longer supports as a block cipher for encryption at rest. This usage is only supported on Linux. Available in MongoDB Enterprise only. The path to the local keyfile when managing keys via process other than KMIP. Only set when managing keys via process other than KMIP. If data is already encrypted using KMIP, MongoDB throws an error. The keyfile can contain only a single key. The key is either a 16 or 32 character string. Available in MongoDB Enterprise only. Unique KMIP identifier for an existing key within the KMIP server. Include to use the key associated with the identifier as the system key. You can only use the setting the first time you enable encryption for the instance. Requires . If unspecified, MongoDB requests that the KMIP server create a new key to utilize as the system key. If the KMIP server cannot locate a key with the specified identifier or the data is already encrypted with a key, MongoDB throws an error Available in MongoDB Enterprise only. If true, rotate the master key and re-encrypt the internal keystore. Available in MongoDB Enterprise only. Hostname or IP address of the KMIP server to connect to. Requires . You can specify multiple KMIP servers as a comma-separated list, for example: . On startup, the attempts to establish a connection to each server in the order listed, and selects the first server to which it can successfully establish a connection. KMIP server selection occurs only at startup. When connecting to a KMIP server, the verifies that the specified matches the Subject Alternative Name (or, if is not present, the Common Name ) in the certificate presented by the KMIP server. If is present, does not match against the . If the hostname does not match the (or ), the fails to connect. Starting in MongoDB 4.2, when performing comparison of SAN, MongoDB supports comparison of DNS names or IP addresses. In previous versions, MongoDB only supports comparisons of DNS names. Available in MongoDB Enterprise only. Port number to use to communicate with the KMIP server. Requires . Requires . If specifying multiple KMIP servers with , the uses the port specified with for all provided KMIP servers. Available in MongoDB Enterprise only. How many times to retry the initial connection to the KMIP server. Use together with to control how long the waits for a response between each retry. Available in MongoDB Enterprise only. Timeout in milliseconds to wait for a response from the KMIP server. If the setting is specified, the waits for the specified interval between retries. Value must be or greater. Available in MongoDB Enterprise only. New in version 5.0: Available on Windows and macOS as an alternative to . and options are mutually exclusive. You can only specify one. Specifies a certificate property in order to select a matching certificate from the operating system's certificate store to authenticate MongoDB to the KMIP server. accepts an argument of the format where the property can be one of the following: Subject name or common name on certificate A sequence of bytes, expressed as hexadecimal, used to identify a public key by its SHA-1 digest. The is sometimes referred to as a . Available in MongoDB Enterprise only. Path to the file used to authenticate MongoDB to the KMIP server. The specified file must contain both the TLS/SSL certificate and key. To use this option, you must also specify the option. Enabling encryption using a KMIP server on Windows fails when using and the KMIP server enforces TLS 1.2. To enable encryption at rest with KMIP on Windows, you must:\n• None Import the client certificate into the Windows Certificate Store. On macOS or Windows, you can use a certificate from the operating system's secure store instead of a PEM key file. See . Available in MongoDB Enterprise only. The password to decrypt the Private Key of the Client Certificate that connects to the KMIP server. This option authenticates MongoDB to the KMIP server and requires that you provide a . Available in MongoDB Enterprise only. Path to CA File. Used for validating secure client connection to KMIP server. On macOS or Windows, you can use a certificate from the operating system's secure store instead of a PEM key file. See . When using the secure store, you do not need to, but can, also specify the . Activates all newly created KMIP keys upon creation and then periodically checks those keys are in an active state. When is and you have existing keys on a KMIP server, the key must be activated first or the node fails to start. If the key being used by the mongod transitions into a non-active state, the node shuts down unless is false. To ensure you have an active key, rotate the KMIP master key by using . Frequency in seconds at which polls the KMIP server for active keys. To disable disable polling, set the value to . New in version 7.0: (and 6.0.6) When , uses KMIP protocol version 1.0 or 1.1 instead of the default version. The default KMIP protocol is version 1.2. To use audit log encryption with KMIP version 1.0 or 1.1, you must specify at startup. Roll over the encrypted storage engine database keys configured with cipher. When instance is started with this option, the instance rotates the keys and exits. Available in MongoDB Enterprise only."
    },
    {
        "link": "https://mongodb.com/docs/manual/reference/parameters",
        "document": "Starting in MongoDB 8.0, LDAP authentication and authorization is deprecated. LDAP is available and will continue to operate without changes throughout the lifetime of MongoDB 8. LDAP will be removed in a future major release.\n\nthe --setParameter command-line option for mongod and mongos :\n\nMongoDB provides a number of configuration options that you can set using:"
    },
    {
        "link": "https://stackoverflow.com/questions/21448268/how-to-set-mongod-dbpath",
        "document": "very new to mongodb and databases in general. whenever i run i receive this error message: ​​​\n\nwhen i manually set my mongo dpath to (as should be the default on installation) and keep it running in terminal everything runs fine. but once i close it, everything breaks again. my question is:\n• why is my dbpath set to ?\n• how do i fix this error so mongo works on my machine?\n\ni'm assuming i either need to permanently set the dbpath to or reconfigure something so it works with the dbpath as\n\ni fairly new to unix commands as well so not entirely sure how to fix this error.\n\nthank you for any suggestions!\n\nso, digging through the mongodb documentation i read this:\n\n\"Unless specified, mongod will look for data files in the default directory. (Windows systems use the \\data\\db directory.) If you installed using a package management system. Check the file provided by your packages to see the configuration of the .\"\n\nwhen i took a look at the files within there is no file... however, i do see ... so if i understand this correctly, i should create a file called and set the dbpath to .\n\ndo i need to delete the stuff within as well?\n\ni think this has something to do with how my PATH are setup... could someone explain to me how to fix this in unix so i won't have this problem?"
    },
    {
        "link": "https://mongodb.com/docs/manual/reference/configuration-options",
        "document": "The following page describes the configuration options available in MongoDB 8.0. For configuration file options for other versions of MongoDB, see the appropriate version of the MongoDB Manual.\n\nIf you're using MongoDB Atlas to manage your MongoDB deployments in the cloud, you don't need to create a configuration file. To learn how to configure settings for your MongoDB Atlas deployment, see Configure Additional Settings .\n\nIn addition to using the configuration file options, the default configuration for the MongoDB binaries also uses the operating system environment variables.\n\nFor complete documentation, see Externally Sourced Configuration File Values for Self-Managed Deployments .\n\nIf the configuration file includes an expansion directive and you start the mongod / mongos without specifying that directive in the --configExpand option, the mongod / mongos fails to start.\n\nIf you are using expansion directives in the configuration file, you must include the --configExpand option when starting the mongod or mongos . For example:\n\nIf you installed from a package and have started MongoDB using your system's init script , you are already using a configuration file.\n\nYou can also use the -f alias to specify the configuration file, as in the following:\n\nTo configure mongod or mongos using a config file, specify the config file with the --config option or the -f option, as in the following examples:\n\nFor complete documentation, see Externally Sourced Configuration File Values for Self-Managed Deployments .\n\nIf the configuration file includes the __exec expansion, on Linux/macOS, the write access to the configuration file must be limited to the user running the mongod / mongos process only.\n\nAllows users to specify a shell or terminal command as the external source for configuration file options or the full configuration file.\n\nIf the configuration file includes the __rest expansion, on Linux/macOS, the read access to the configuration file must be limited to the user running the mongod / mongos process only.\n\nAllows users to specify a REST endpoint as the external source for configuration file options or the full configuration file.\n\nThe following expansion directives are available:\n\nMongoDB supports using expansion directives in configuration files to load externally sourced values. Expansion directives can load values for specific configuration file options or load the entire configuration file.\n\nThe Linux package init scripts included in the official MongoDB packages depend on specific values for systemLog.path , storage.dbPath , and processManagement.fork or MONGODB_CONFIG_OVERRIDE_NOFORK system environment variable. If you modify these settings in the default configuration file, mongod may not start.\n\nYAML does not support tab characters for indentation: use spaces instead.\n\nThe following sample configuration file contains several mongod settings that you may adapt to your local configuration:\n\nIf you installed MongoDB through a downloaded TGZ or ZIP file, you must create your own configuration file. The basic example configuration is a good place to start.\n\nIf you installed MongoDB with a package manager such as yum or apt on Linux or brew on macOS, or with the MSI installer on Windows, a default configuration file has been provided as part of your installation:\n\nUsing a configuration file makes managing mongod and mongos options easier, especially for large-scale deployments. You can also add comments to the configuration file to explain the server's settings.\n\nThe default log message verbosity level for components. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. To use a different verbosity level for a named component, use the component's verbosity setting. For example, use the to set the verbosity level specifically for components. See the settings for specific component verbosity settings. For various ways to set the log verbosity level, see Configure Log Verbosity Levels . Run or in a quiet mode that attempts to limit the amount of output. is not recommended for production systems as it may make tracking problems during particular connections much more difficult. Print verbose information for debugging. Use for additional logging for support-related troubleshooting. The facility level used when logging messages to syslog. The value you specify must be supported by your operating system's implementation of syslog. To use this option, you must set to . The path of the log file to which or should send all diagnostic logging information, rather than the standard output or the host's syslog. MongoDB creates the log file at the specified path. The Linux package init scripts do not expect to change from the defaults. If you use the Linux packages and change , you must use your own init scripts and disable the built-in scripts. When , or appends new entries to the end of the existing log file when the instance restarts. Without this option, or backs up the existing log and create a new file. Determines the behavior for the command when rotating the server log and/or the audit log. Specify either or :\n• None closes and reopens the log file following the typical Linux/Unix log rotate behavior. Use when using the Linux/Unix logrotate utility to avoid log loss. If you specify , you must also set to . The destination to which MongoDB sends all log output. Specify either or . If you specify , you must also specify . If you do not specify , MongoDB sends all log output to standard output. The daemon generates timestamps when it logs a message, not when MongoDB issues the message. This can lead to misleading timestamps for log entries, especially when the system is under heavy load. We recommend using the option for production systems to ensure accurate timestamps. The time format for timestamps in log messages. Specify one of the following values: Displays timestamps in Coordinated Universal Time (UTC) in the ISO-8601 format. For example, for New York at the start of the Epoch: Displays timestamps in local time in the ISO-8601 format. For example, for New York at the start of the Epoch: no longer supports . An example of formatted date is: . Starting in version 4.2, MongoDB includes the Debug verbosity level (1-5) in the log messages. For example, if the verbosity level is 2, MongoDB logs . In previous versions, MongoDB log messages only specified for Debug level. The log message verbosity level for components related to access control. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to commands. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to control operations. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to diagnostic data collection operations. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to geospatial parsing operations. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to indexing operations. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to networking operations. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to query operations. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to invocations of . See components. The verbosity level can range from to :\n• None is the default log verbosity level, and only includes informational messages. No calls are logged at this level.\n• None to increases the verbosity level to include calls where is . Any HMAC keys are redacted.\n• None to increases the verbosity level to include calls where is , and the corresponding results. Each result is its own entry and there is a final entry with the string . The log message verbosity level for components related to replication. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to election. See components. If is unset, level also applies to election components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to heartbeats. See components. If is unset, level also applies to heartbeats components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to initialSync. See components. If is unset, level also applies to initialSync components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to rollback. See components. If is unset, level also applies to rollback components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to sharding. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to storage. See components. If is unset, level also applies to journaling components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to journaling. See components. If is unset, the journaling components have the same verbosity level as the parent storage components: i.e. either the level if set or the default verbosity level. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to recovery. See components. If is unset, level also applies to recovery components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to backup operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to checkpoint operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to compaction operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to eviction operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to history store operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to recovery operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to rollback to stable (RTS) operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to salvage operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to timestamps used by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to transaction operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to verification operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity for components related to log write operations performed by the WiredTiger storage engine. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to transaction. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages. The log message verbosity level for components related to write operations. See components. The verbosity level can range from to :\n• None is the MongoDB's default log verbosity level, to include Informational messages.\n• None to increases the verbosity level to include Debug messages."
    },
    {
        "link": "https://stackoverflow.com/questions/10805782/how-to-run-mongo-db-as-service-using-non-default-dbpath",
        "document": "This doesn't really have anything to do with a \"service\" it's down to the (MongoDB's process name) parameters to use a other than\n\nTo find out what paramters are available to you can you simplely run ...\n\nAnd you'll get a list of helpful parameters, there are also extensive docs explaining the various differant parameters you can use when starting up mongod ...\n\nA bit from the docs on your issue ...\n\nDefault Data Directory, Default Port To start Mongo in default mode, where data will be stored in the /data/db directory (or c:\\data\\db on Windows), and listening on port 27017, just type To specify a directory for Mongo to store files, use the --dbpath option: Note that you must create the directory and set its permissions appropriately ahead of time -- Mongo will not create the directory if it doesn't exist. You can specify a different port for Mongo to listen on for connections from clients using the --port option This is useful if you want to run more than one instance of Mongo on a machine (e.g., for running a master-slave pair). Note: these options are only available in MongoDB version 1.1 and later. This will fork the Mongo server and redirect its output to a logfile. As with --dbpath, you must create the log path yourself, Mongo will not create parent directories for you."
    }
]