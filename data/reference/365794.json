[
    {
        "link": "https://help.sap.com/doc/saphelp_nw73ehp1/7.31.19/en-US/9f/db98ef35c111d1829f0000e829fbfe/content.htm",
        "document": "Before programming a new function or creating a new function module, you should look in the Function Builder to see whether there is an existing function module that already performs the same task.\n\nFor more information about this, refer to Finding Function Modules in the ABAP Workbench documentation. For example, you might look for function modules that process strings by entering *STRING*as a search criterion in the Repository Information System. This is an extract from the list of function modules found:\n\nThe title CSTR is the function group. Therefore, there is a function group SAPLCSTR that contains these function modules. If you select a function module, you can display its attributes in the Function Builder.\n• Documentation The documentation describes the purpose of the function module, lists the parameters for passing data to and from the module, and the exceptions. It tells you the input and output parameters of the function module, and which errors it handles.\n• Interface parameters and exceptions This section provides further information about the interface parameters and exceptions, and how to use the function module. For further information, refer to Displaying Information about Interface Parameters in the ABAP Workbench documentation. Function modules can have the following interface parameters:\n\nIMPORTparameters. These must be supplied with data when you call the function module, unless they are flagged as optional. You cannot change them in the function module.\n\nEXPORTparameters. These pass data from the function module back to the calling program. EXPORT parameters are always optional. You do not have to receive them in your program.\n\nCHANGING parameters. These must be supplied with data when you call the function module, unless they are flagged as optional. They can be changed in the function module. The changed values are then returned to the calling program.\n\nTables parameters. You use these to pass internal tables. They are treated like CHANGING parameters. However, you can also pass internal tables with other parameters if you specify the parameter type appropriately.\n\nThe interface parameters can be typed. You can do so either by referring to ABAP Dictionary types or elementary ABAP types. When you call a function module, you must ensure that the actual parameter and the interface parameters are compatible.\n\nInterface parameters are, by default, passed by value. However, they can also be passed by reference. Tables parameters can only be passed by reference. You can assign default values to optional importing and CHANGING parameters. If an optional parameter is not passed in a function module call, it either has an initial value, or is set to the default value.\n\nExceptions are used to handle errors that occur in function modules. The calling program checks whether any errors have occurred and then takes action accordingly."
    },
    {
        "link": "https://help.sap.com/doc/saphelp_nw73ehp1/7.31.19/en-US/d1/801ea7454211d189710000e8322d00/content.htm",
        "document": "The main features of function modules are:\n• They possess a fixed interface for data exchange. This makes it easier for you to pass input and output parameters to and from the function module. For example, you can assign default values to the input parameters. The interface also supports exception handling. This allows you to catch errors and pass them back to the calling program for handling.\n• You call a function module by name (which must be unique) in a CALL FUNCTION statement.\n\nFunction groups (also called function pools) are ABAP programs of a special type. They are the only program type that can contain function modules. Function modules are, in turn, procedures with public interface and are designed to be used by other programs. Function groups can contain global data declarations and subroutines that are available to all function modules in the group. In terms of object-oriented programming, a function group resembles a class and the function modules are its public static methods. Just like executable programs and module pools, function groups can also contain dynpros as their components, which is not possible in class pools. For that reason, you need to use function groups if you want to work with classical dynpros. The following figure illustrates the organization of function modules within a function group:\n\nFor each function group , the system generates a main program called SAPL . The main program contains INCLUDE statements for the following programs:\n• L TOP: The first include program; contains the global data for the function group.\n• L Uxx: These includes contain the function modules. The numbering xx indicates the sequential order in which the function modules were created. For example, L U01 and L U02 contain the first two function modules in the function group.\n• L F01, L F02... L Fxx: You can use these includes to write subroutines (forms) that can be called as internal forms by all function modules in the group. These include programs are generated by the Function Builder and may not be changed.\n\nThe naming convention for includes is the following (xx indicates a two-digit number):\n\nIn the top include, you can add include programs with the suffix \"Dxx\" for the declaration parts of local classes."
    },
    {
        "link": "https://community.sap.com/t5/-/-/m-p/3489134",
        "document": "APPL_LOG_DELETE With this function module you delete logs in the database according to specified selection conditions\n\nAPPL_LOG_DISPLAY With this function module you can analyze logs in the database.\n\nAPPL_LOG_DISPLAY_INTERN With this function module you can analyze logs in local memory, e.g. when you have only collected log records at runtime and do not want to write to the database.\n\nAPPL_LOG_INIT This function module checks whether the specified object or sub-object exists and deletes all existing associated data in local memory.\n\nAPPL_LOG_READ_DB With this function module you read the log data in the database for an object or sub-object according to specified selection conditions.\n\nAPPL_LOG_READ_INTERN With this function module you read all log data whose log class has at least the specified value, from local memory, for the specified object or sub-object.\n\nAPPL_LOG_SET_OBJECT With this function module, you create a new object or sub-object for writing in local memory. With a flag you can control whether the APPL_LOG_WRITE_... messages are written in local memory or are output on the screen.\n\nAPPL_LOG_WRITE_DB With this function module you write all data for the specified object or sub-object in local memory to the database. If the log for the object or sub-object in question is new, the log number is returned to the calling program.\n\nAPPL_LOG_WRITE_HEADER With this function module, you write the log header data in local memory.\n\nAPPL_LOG_WRITE_LOG_PARAMETERS With this function module, you write the name of the log parameters and the associated values for the specified object or sub-object in local memory. If this function module is called repeatedly for the same object or sub-object, the existing parameters are updated accordingly. If you do not specify an object or sub-object with the call, the most recently used is assumed.\n\nAPPL_LOG_WRITE_MESSAGE_PARAMS With this function module you write a single message, with parameters, in local memory. Otherwise the function module works like APPL_LOG_WRITE_SINGLE_MESSAGE.\n\nAPPL_LOG_WRITE_MESSAGES With this function module you write one or more messages, without parameters, in local memory.\n\nAPPL_LOG_WRITE_SINGLE_MESSAGE With this function module you write a single message, without parameters, in local memory. If no header entry has yet been written for the object or sub-object, it is created. If you do not specify an object or sub-object with the call, the most recently used is assumed.\n\nARFC_GET_TID will return the IP address of the terminal in hex.\n\nBAL_DSP_LOG_PARAMETERS Either output extended long text or call a callback routine (based on the data in BAL_S_LOG-PARAMS)\n\nBAL_DSP_MSG_PARAMETERS Either output extended long text or call a callback routine (based on the data in BAL_S_MSG-PARAMS)\n\nBAL_DSP_MSG_TECHNICAL_DATA Output technical data of a message such as work area, error number, etc.\n\nBAL_LOG_DELETE Delete log (from database also at Save)\n\nBAL_OBJECT_SUBOBJECT Check whether object and subobject exist and the combination is allowed\n\nCHANGEDOCUMENT_READ_HEADERS Get the change document header for a sales document, and put the results in an internal table.\n\nLOOP AT lt_cdhdr WHERE udate IN s_aedat.\n\nCHANGEDOCUMENT_READ_POSITIONS Get the details of a change document, and store them in an internal table. This will tell you whether a field was changed, deleted, or updated.\n\nLOOP AT lt_cdhdr WHERE udate IN s_aedat.\n\nCLAF_CLASSIFICATION_OF_OBJECTS Return all of the characteristics for a material\n\nCLOI_PUT_SIGN_IN_FRONT Move the negative sign from the left hand side of a number, to the right hand side of the number. Note that The result will be left justified (like all character fields), not right justifed as numbers normally are.\n\nCLPB_EXPORT Export a text table to the clipboard (on presentation server)\n\nCLPB_IMPORT Import a Text Table from the Clipboard (on presentation server)\n\nCONVERSION_EXIT_ALPHA_INPUT converts any number into a string fill with zeroes, with the number at the extreme right\n\nCONVERSION_EXIT_ALPHA_OUTPUT converts any number with zeroes right into a simple integer\n\nDATE_CHECK_PLAUSIBILITY Check to see if a date is in a valid format for SAP. Works well when validating dates being passed in from other systems.\n\nDATE_COMPUTE_DAY Returns a number indicating what day of the week the date falls on. Monday is returned as a 1, Tuesday as 2, etc.\n\nDATE_GET_WEEK will return the week that a date is in.\n\nDAY_ATTRIBUTES_GET Return useful information about a day. Will tell you the day of the week as a word (Tuesday), the day of the week (2 would be Tuedsay), whether the day is a holiday, and more.(provided by Francois Henrotte)\n\nDYNP_VALUES_READ Read the values from a dynpro. This function can be used to read the values from a report's selection screen too (Another example).\n\nDYNP_VALUES_UPDATE Similar to DYNP_VALUES_READ, this function will allow the updating of fields on a dynpro. Very useful when you want to change a field based on the value entered for another field.\n\nENQUE_SLEEP Wait a specified period of time before continuing processing.\n\nENQUEUE_ESFUNCTION Lock an abap program so that it cannot be executed.\n\nSet the parameters as follows:\n\nPlease note that you should not use SY-REPID to pass your report name to the function. The value of SY-REPID will change as it is being passed to the function module, and will no longer hold the value of the calling report.\n\nEPS_GET_DIRECTORY_LISTING return a list of filenames from a local or network drive\n\nEPS_GET_FILE_ATTRIBUTES Pass in a filename and a path, and will return attributes for the file\n\nF4_DATE displays a calendar in a popup window and allows user to choose a date, or it can be displayed read only.\n\nF4_IF_FIELD_VALUE_REQUEST Use values from a DDIC table to provide a list of possible values. TABNAME and FIELDNAME are required fields, and when MULTIPLE_CHOICE is selected, more than one value can be returned.\n\nF4IF_INT_TABLE_VALUE_REQUEST F4 help that returns the values selected in an internal table. Very handy when programming your very own F4 help for a field.\n\nF4IF_SHLP_EXIT_EXAMPLE documents the different reasons to use a search help exit, and shows how it is done.\n\nF4IP_INT_TABLE_VALUE_REQUEST This function does not exist in 4.6 and above. Use F4IF_INT_TABLE_VALUE_REQUEST instead.\n\nFILENAME_GET popup to get a filename from a user, returns blank filename if user selects cancel\n\nFORMAT_MESSAGE Takes a message id and number, and puts it into a variable. Works better than WRITE_MESSAGE, since some messages use $ as a place holder, and WRITE_MESSAGE does not accommadate that, it only replaces the ampersands (&) in the message.\n\nFTP_CONNECT Open a connection (and log in) to an FTP server\n\nFTP_DISCONNECT Close the connection (and log off) the FTP server\n\nFU CSAP_MAT_BOM_READ You can use this function module to display simple material BOMs. You cannot display BOM groups (for example, all variants of a variant BOM). as in transaction CS03. Current restrictions: You cannot display long texts. You cannot display sub-items. You cannot display classification data of BOM items for batches. You can only display one alternative or variant. You cannot enter an alternative for module CSAP_MAT_BOM_READ, so you always see alternative 01. The following example came from a posting on the SAP-R3-L mailing list.\n\nFunction Group GRAP is now obsolete. SAP recommends using functions in function group SFES instead. Below is an overview of the changes.\n\nGET_GLOBAL_SYMBOLS Returns a list of all tables, select options, texts, etc for a program. Even includes the text definitions for the selection screen\n\nGET_INCLUDETAB Returns a list of all INCLUDES in a program\n\nGET_JOB_RUNTIME_INFO Get the current job number from a program. Also returns other useful info about the current job.\n\nGUI_DOWNLOAD Replaces WS_DOWNLOAD. Download table from the app server to presentation server\n\nGUI_UPLOAD Replaces WS_UPLOAD. Upoad file from presentation server to the app server\n\nHELP_START Display help for a field. Useful for doing AT SELECTION SCREEN ON VALUE REQUEST for those fields that do not provide F4 help at the DDIC level.\n\nHELP_VALUES_GET_WITH_TABLE Show a list of possible values for F4 popup help on selection screens. This function module pops up a screen that is just like all the other F4 helps, so it looks like the rest of the SAP system. Very useful for providing dropdowns on fields that do not have them predefined.\n\nHOLIDAY_CHECK_AND_GET_INFO Useful for determining whether or not a date is a holiday. Give the function a date, and a holiday calendar, and you can determine if the date is a holiday by checking the parameter HOLIDAY_FOUND.\n\nwrite: / ld_date, 'is not a holiday, or there was an error calling the function'.\n\nHOLIDAY_GET Provides a table of all the holidays based upon a Factory Calendar &/ Holiday Calendar.\n\nHR_DISPLAY_BASIC_LIST is an HR function, but can be used for any data. You pass it data, and column headers, and it provides a table control with the ability to manipulate the data, and send it to Word or Excel. Also see the additional documentation here.\n\nHR_GET_LEAVE_DATA Get all leave information (includes leave entitlement, used holidays/paid out holidays)\n\nHR_IE_NUM_PRSI_WEEKS Return the number of weeks between two dates.\n\nHR_PAYROLL_PERIODS_GET Get the payroll period for a particular date. (provided by Francois Henrotte)\n\nHR_TIME_RESULTS_GET Get the time results for a payroll period. (provided by Francois Henrotte)\n\nK_WERKS_OF_BUKRS_FIND Return a list of all plants for a given company code.\n\nLIST_FROM_MEMORY Retrieves the output of a report from memory when the report was executed using SUBMIT... EXPORTING LIST TO MEMORY. See also WRITE_LIST.\n\nLIST_TO_ASCII convert an ABAP report (displayed on screen) from OTF to ASCII format\n\nMBEW_EXTEND Get the stock position for the previous month. This displays the same info that you see in MM03.\n\nMONTH_NAMES_GET It returns all the month and names in repective language.\n\nMONTH_PLUS_DETERMINE Add or subtract months from a date. To subtract a month, enter a negative value for the 'months' parameter.\n\nmonths = -5 \" Negative to subtract from old date, positive to add\n\nOTF_CONVERT wraps several other function modules. Will convert OTF to ASCII or PDF\n\nPOPUP_TO_CONFIRM_LOSS_OF_DATA Create a dialog box in which you make a question whether the user wishes to perform a processing step with loss of data.\n\nPOPUP_TO_CONFIRM_STEP Create a dialog box in which you make a question whether the user wishes to perform the step.\n\nPOPUP_TO_CONFIRM_WITH_MESSAGE Create a dialog box in which you inform the user about a specific decision point during an action.\n\nPOPUP_TO_CONFIRM_WITH_VALUE Create a dialog box in which you make a question whether the user wishes to perform a processing step with a particular object.\n\nPOPUP_TO_DECIDE Provide user with several choices as radio buttons\n\nPOPUP_TO_DECIDE_WITH_MESSAGE Create a dialog box in which you inform the user about a specific decision point via a diagnosis text.\n\nPOPUP_TO_DISPLAY_TEXT Create a dialog box in which you display a two line message\n\nPOPUP_WITH_TABLE_DISPLAY Provide a display of a table for user to select one, with the value of the table line returned when selected.\n\nPRICING Return pricing conditions in an internal table. Use structure TCOMK for parameter COMM_HEAD_1, and structure TCOMP for parameter COMM_ITEM_1, and set CALCULATION_TYPE to B. The pricing conditions will be returned in XOMV. You must fill TCOMP, and TCOMK with the appropriate values before callling the function in order for it to work.\n\nPROFILE_GET Read an Entry in an INI File on the frontend\n\nPROFILE_SET Write an Entry in an INI File on the frontend\n\nREGISTRY_GET Read an Entry from the Registry\n\nREGISTRY_SET Set an entry in the Registry\n\nRFC_ABAP_INSTALL_AND_RUN Runs an ABAP program that is stored in the table PROGRAM when the MODE = 'F'. Table WRITES contains the ouput of the program. Allows you to run a program without having the source code in the target system.\n\nRH_GET_DATE_DAYNAME return the day based on the date provied\n\nRH_START_EXCEL_WITH_DATA starts Excel with the contents of an internal table. This function finds Excel in the desktop registry. It also uses a local PC working directory to save the file (that's what the 'W' value for data path flag does). Very transparent to user!\n\nRHP0_POPUP_F4_SEARK is a matchcode for any type of HR Planning object, including the possibility to fill the field that you want\n\nUnfortunately, the use of table BASE_OBJIDS is disabled, so you can't specify\n\na root for the hierarchy you display\n\nRKD_WORD_WRAP Convert a long string or phrase into several lines.\n\nRPY_TRANSACTION_READ Given a transaction, return the program and screen or given a program and screen, return the transactions that use the program and screen.\n\nRS_COVERPAGE_SELECTIONS Returns an internal table that contains a formatted list of all the selection parameters entered for a report. Table is ready to print out.\n\nRS_REFRESH_FROM_SELECTOPTIONS Get the current contents of selection screen\n\nRS_VARIANT_CONTENTS Returns the contents of the specified variant in a table.\n\nRSPO_DOWNLOAD_SPOOLJOB Download the spool from a program to a file. Requires spool number.\n\nRSPO_RETURN_ABAP_SPOOLJOB Fetch printer spool according to the spool number informed.\n\nRZL_READ_DIR If the server name is left blank, it reads a directory from local presentation server, otherwise it reads the directory of the remote server\n\nRZL_READ_FILE Read a file from the presentation server if no server name is given, or read file from remote server. Very useful to avoid authority checks that occur doing an OPEN DATASET. This function using a SAP C program to read the data.\n\nRZL_SLEEP Hang the current application from 1 to 5 seconds.\n\nRZL_WRITE_FILE_LOCAL Saves table to the presentation server (not PC). Does not use OPEN DATASET, so it does not suffer from authority checks!\n\nSAPGUI_PROGRESS_INDICATOR Display a progress bar on the SAP GUI, and give the user some idea of what is happening\n\nSCROLLING_IN_TABLE If you are coding a module pool and using a table control, you can use this function SCROLLING_IN_TABLE to handle any scrolling. (provided by Paul Kjaer)\n\nSD_DATETIME_DIFFERENCE Give the difference in Days and Time for 2 dates\n\nSO_NEW_DOCUMENT_ATT_SEND_API1 Send a document as part of an email. The documentation is better than normal for this function, so please read it.\n\nSO_SPOOL_READ Fetch printer spool according to the spool number informed. See also RSPO_RETURN_ABAP_SPOOLJOB\n\nSWD_HELP_F4_ORG_OBJECTS HR Matchcode tailored for organizational units. Includes a button so that you can browse the hierarchy too.\n\nSXPG_CALL_SYSTEM you can check the user's authorization for the specified command and run the command. The command runs on the host system on which the function module is executed. The function module is RFC capable. It can therefore be run on the host system at which a user happens to be active or on another designated host system at which an R/3 server is active.\n\nSXPG_COMMAND_CHECK Check whether the user is authorized to execute the specified command on the target host system with the specified arguments.\n\nSXPG_COMMAND_DEFINITION_GET Read the definition of a single external OS command from the R/3 System's database.\n\nSXPG_COMMAND_EXECUTE Check a user's authorization to use a command, as in SXPG_COMMAND_CHECK. If the authorization check is successful, then execute the command on the target host system.\n\nTH_REMOTE_TRANSACTION Run a transaction on a remote server. Optionally provide BDC data to be used in the transaction\n\nTH_USER_INFO Give information about the current user (sessions, workstation logged in from, etc)\n\nTH_USER_LIST Show which users are logged into an app server\n\nTMP_GUI_DIRECTORY_LIST_FILES Retrieve all of the files and subdirectories on the Presentation Server (PC) for a given directory.\n\nWhen a value other than * or . is used for the filter, you will not get any directories, unless they match your wildcard filter. For example, if you entered *.png, then only files and directories that end in png will be returned by the function.\n\nUNIT_CONVERSION_SIMPLE convert weights from one UOM to another.\n\nUPLOAD_FILES Will load one or more files from app or presentation server\n\nWEEK_GET_FIRST_DAY For a given week (YYYYMM format), this function returns the date of the Monday of that week.\n\nWRITE_LIST Useful for writing out the list contents that result from the function LIST_FROM_MEMORY.\n\nWS_DOWNLOAD Save Internal Table as File on the Presentation Server\n\nWS_MSG Create a dialog box in which you display an one line message\n\nWS_UPLOAD Load Files from the Presentation Server to Internal ABAP Tables\n\nWS_VOLUME_GET Get the label from a frontend device.\n\nWWW_LIST_TO_HTML After running a report, call this function to convert the list output to HTML.\n\nPlzz reward if it is useful"
    },
    {
        "link": "https://help.sap.com/doc/7c0dc3673ea54d5c97c34f87e2d87c55/Cloud/en-US/abap_dev_user_guide_EN.pdf",
        "document": ""
    },
    {
        "link": "https://community.sap.com/t5/application-development-discussions/creating-function-modules/td-p/2249180",
        "document": "Function Modules are Global ABAP programs created by SAP for reusable purpose.they have IMPORT,EXPORT and TABLE parameters, and EXCEPTIONS to through when error occurs.\n\nYou can create them from TCode SE37.\n\nGo through the following doc:\n\nFunction modules are cross-program, reusable procedures that are organized into function groups, and whose functions are implemented between the statements FUNCTION and ENDFUNCTION. Function modules and their interfaces are created in the Function Builder.\n\nThe parameter interface of a function module is defined in the Function Builder. It includes the definition of interface parameters and the specification of exceptions that can be triggered by a function module. The Function Builder automatically generates comment lines below the FUNCTION statement in the source code of the function module, which represent the interface of the function module with the following syntax:\n\nThe syntax and semantics of IMPORTING, EXPORTING, CHANGING, RAISING, and EXCEPTIONS mainly correspond to the definition of method interfaces with [CLASS-]METHODS. The additional option of defining table parameters using TABLES is obsolete.\n\nThe interface parameters are defined on the relevant tab pages in the Function Builder.\n\nIMPORTING parameters are input parameters. When the function module is called, a suitable actual parameter must be specified for every non-optional input parameter. The content of the actual parameter is passed to the input parameter when the call is made. The content of an input parameter for which 'pass by reference' is defined cannot be changed in the function module.\n\nEXPORTING parameters are output parameters. When the function module is called, a suitable actual parameter can be specified for every output parameter. The content of an output parameter that is defined for 'pass by value' is transferred to the actual parameter if the function module is completed without errors. An output parameter that is defined for pass by reference is not initialized when the function module is called.\n\nCHANGING parameters are input and output parameters. When the function module is called, a suitable actual parameter must be specified for every non-optional input or output parameter. When the function module is called, the content of the actual parameter is passed to the input/output parameter, and when the function module is completed, the content of the input/output parameter is passed to the actual parameter.\n\nTABLES parameters are table parameters. Table parameters are obsolete CHANGING parameters that are typed as standard tables with a header line. If an internal table without a header line or a table body is passed as an actual parameter to a formal parameter of this type, an empty local header line is generated in the function module. If an internal table with a header line is used as an actual parameter, both the table body and the header line are passed to the function module. Pass by value is not possible in formal parameters defined using TABLES. Formal parameters defined with TABLES can be replaced by formal parameters defined with CHANGING. A local work area can be created for the internal table in the function module by using the addition LIKE LINE OF itab of the DATA statement.\n\nThe exception of a function module are defined on the Exceptions tab page in the Function Builder. Here you can select exception classes to define whether class-based exceptions are declared or non-class-based exception are defined. Class-based exceptions are represented in the above syntax by RAISING, and non-class-based exceptions are represented by EXCEPTIONS.\n\nThe addition RAISING is used to declare class-based exceptions that can be propagated from the function module to the caller. Exceptions in the categories CX_STATIC_CHECK and CX_DYNAMIC_CHECK must be explicitly declared, otherwise a propagation can lead to an interface violation. A violation of the interface leads to the treatable exception CX_SY_NO_HANDLER. Exceptions of the category CX_NO_CHECK are implicitly always declared. The declaration of exceptions of the category CX_STATIC_CHECK is statically checked in the syntax check. For exceptions of the category CX_DYNAMIC_CHECK, the check is not performed until runtime. In a function module in which class-based exceptions are declared with the RAISING addition, the statement CATCH SYSTEM-EXCEPTIONS cannot be used. Instead, the relevant treatable exceptions should be handled in a TRY control structure.\n\nThe addition EXCEPTIONS is used to define a list of non-class-based exceptions that can be triggered in the function module using the statements RAISE or MESSAGE RAISING. Exceptions defined in this way - as with formal parameters - are bound to the function module and cannot be propagated. If an exception of this type is triggered in a function module, and no return value has been assigned to it with the homonymous addition EXCEPTIONS of the CALL FUNCTION statement when the call was made, this leads to a runtime error.\n\nFor new developments after release 6.10, SAP recommends that you work with class-based exceptions that are independent of the function module.\n\nRFC is a technology which is used to access a functions (Modules) from\n\nIf a function module is set as remote enabled which can be access from\n\nthe remote system via RFC.Eg: U can access the Remote enabled function modules in ur VB,Webdynpro,Java,Visual composer program.\n\nA function module can be set as remote enabled by SE37->Go to ur FM->click the option Button \"remote enabled\".\n\nBut Normal function modules can not accessd from the remote system.\n\nGood Example for RFC enabled function module is : BAPI(Business Application Programming Interface)\n\nNote: All BAPIs are Remote enabled but not all remote enabled function modules are BAPI.\n\n--> Write the Corresponding FM name --> Hit Enter\n\n2)The appropriate import ,export Parameters will be displayed in ur editor\n\nSee the following links:"
    },
    {
        "link": "https://help.sap.com/doc/saphelp_ewm900/9.0/en-US/fc/eb3138358411d1829f0000e829fbfe/content.htm",
        "document": "ABAP Dictionary allows you to define global data types. You can use the TYPE addition of an appropriate ABAP statement to refer to these data types in any ABAP program.\n\nThese data types are defined using the d ictionary in ABAP Workbench. The following input fields are relevant to data types:\n\nThere are three groups on the initial screen:\n\nOne of the most important tasks of ABAP Dictionary is to administer database tables in the central database of the SAP system.. The dictionary contains meta-descriptions of the database tables, and uses these to create the physical tables in the database. A view is a \"virtual table\" containing fields from one or more tables.\n\nIn the description of a database table, the table rows consist of single fields or columns. An elementary data type must be assigned to each column. The elementary types in ABAP Dictionary are data elements. Like data objects in ABAP programs, database tables and views have data types as attributes. A row of a database table or view has the data type of a flat structure, which consists of individual data elements.\n\nIn ABAP programs, you can use the TYPE addition with the data type of a database table or view. You may refer to the whole structure or to individual components:\n\nrefers to the complex data type of the structure,\n\nrefers to the elementary data type of component comp.\n\nIf you define a complex data type type as a structure using\n\nthe components of the data type type inherit the names of the components of the database table or view, and can be addressed in the program using type-comp.\n\nTo ensure compatibility with previous releases, you can still use the LIKE addition to refer to database tables or views, except within classes. The reason for this is that in earlier releases, the physical presence of the database tables as objects was emphasized, even though the dictionary only contains meta-descriptions and data types.\n\nDefining program-local data types by referring to database tables and views is one of the essential techniques for processing data from database tables in ABAP. Data objects that you define in this way always have the right type to contain data from the corresponding database table. ABAP Open SQL allows you to read a single field, a range of fields, or an entire database table or view into an internal table.\n\nSELECT SINGLE cityfrom FROM spfli\n\n INTO wa_city\n\n WHERE carrid = 'LH' AND connid = '400'.\n\nThis example defines an elementary data type citythat refers to a single field of the database table SPFLI and an internal table spfli_type, whose row type is the same as the structure of the database table. The SELECTstatement in Open SQL reads data from the database into the corresponding data objects.\n\nData types are the actual type definitions in ABAP Dictionary. They allow you to define elementary types, reference types, and complex types that are visible globally in the system. The data types of database tables are a subset of all possible types, namely flat structures. Global object types (classes and interfaces) are not stored in ABAP Dictionary, but in the class library. You create them using Class Builder.\n\nFor a detailed description of data types and their definitions, refer to the Types section of the ABAP Dictionary documentation. The following descriptions mention the types only briefly, along with how you can refer to them from ABAP programs.\n\nData elements in ABAP Dictionary describe individual fields. They are the smallest indivisible units of the complex types described below, and are used to specify the types of columns in the database. Data elements can be elementary types or reference types.\n\nElementary types are part of the dual-level domain concept for fields in ABAP Dictionary. The elementary type has semantic attributes, such as texts, value tables, and documentation, and has a data type. There are two different ways to specify a data type:\n\nYou can assign a predefined ABAP Dictionary type and a number of characters to an elementary type. ABAP Dictionary has considerably more predefined types than the ABAP programming language. The number of characters here is not the field length in bytes, but the number of valid characters excluding formatting characters. The data types are different because the predefined data types in ABAP Dictionary have to be compatible with the external data types of the database tables supported by SAP Web AS ABAP.\n\nWhen you refer to data types from ABAP Dictionary in an ABAP program, the predefined dictionary types are converted to ABAP types as follows:\n\n(\"max\" in LCHR and LRAW is the value of a preceding INT2 field. The \"internal\" length of a LANG field is in the dictionary; the \"external\" length refers to the display on the screen.\n\nThe technical attributes are inherited from a domain. Domains are standalone repository objects in ABAP Dictionary. They can specify the technical attributes of a data element. One domain can be used by any number of data elements. When you create a domain, you must specify a dictionary data type (see above table) and the number of characters.\n\nReference types describe single fields that can contain references to global classes and interfaces from the ABAP class library.\n\nIn an ABAP program, you can use the TYPE addition to refer directly to a data element. The predefined dictionary data types of the domain are then converted into the corresponding ABAP types.\n\nIf you define a local data type in a program by referring to a data element as follows:\n\nthe semantic attributes of the data element are inherited and are used, for example, when you display a data object with type dtypeon the screen. Since all data types in ABAP Dictionary are based on data elements, they all contain the corresponding semantic attributes.\n\nThis example defines a local type companythat refers to the data element S_CARR_ID. The data element is associated with the identically named domain S_CARR_ID. The domain defines the technical attributes as data type CHARwith length 3. The local data type COMPANY in the program therefore has the ABAP type c(3). COMPANYalso adopts the semantic attributes of the data element. In the above example, we declare a data object wa_company with this type and display it on a list. If the user chooses F1 help for the output field, the help text stored in ABAP Dictionary appears in a dialog box.\n\nA structure is a sequence of any other data types from ABAP Dictionary, that is, data elements, structures, table types, or database tables. When you create a structure in ABAP Dictionary, each component must have a name and a data type.\n\nIn an ABAP program, you can use the TYPE addition to refer directly to a structure.\n\nIf you define a local data type in a program by referring to a structure as follows:\n\nthe construction blueprint of the structure is used to create a local structure dtype in the program. The predefined dictionary data types of the domains used by the data elements in the structure are converted into the corresponding ABAP types. The semantic attributes of the data elements are used for the corresponding components of the structure in the program. The components of the local structure dtypehave the same names as those of the structure in ABAP Dictionary.\n\nTo ensure compatibility with previous releases, it is still possible to use the LIKE addition in an ABAP program to refer to a structure in ABAP Dictionary (except in classes).\n\nSuppose the structure STRUCT is defined as follows in ABAP Dictionary:\n\nThe types CHAR01 to CHAR10 are data elements with corresponding domains. We can refer to this structure in ABAP:\n\nThis program creates a local structure in the program, struct_type, and a corresponding data object wa. We can address the components using the component names from the original structure.\n\nTable types are construction blueprints for internal tables that are stored in ABAP Dictionary. When you create a table type in ABAP Dictionary, you specify the row type, access type, and key. The row type can be any data type from ABAP Dictionary, that is, a data element, a structure, a table type, or the type of a database table. You can also enter a predefined dictionary type directly as the row type, in the same way that you can with a domain.\n\nIn an ABAP program, you can use the TYPE addition to refer directly to a table type.\n\nIf you define a local data type in a program by referring to a table type as follows:\n\nthe construction blueprint of the table type is used to create a local internal table dtype in the program. The predefined dictionary data types of the domains used by the data elements in the structure are converted into the corresponding ABAP types. The semantic attributes of the data elements are used for the corresponding components of the internal table in the program.\n\nSuppose the table type STRUCT_TABLE is defined in the dictionary with the row type STRUCT from the previous example. We can refer to the table type in ABAP:\n\nThis program defines an internal table type table_type . From it, we define data objects table_wa and, consequently, line_wa. line_wacorresponds to the row type of the table type in the dictionary, and is therefore compatible with the structure STRUCT\n\nBefore Release 4.5A, it was not possible to define standalone types in ABAP Dictionary to which you could refer using a TYPEaddition in an ABAP program. It was only possible to refer to flat structures. Structures in programs corresponded to the structures of database tables or structures in ABAP Dictionary. In ABAP programs, you could only refer to database tables and structures in ABAP Dictionary using LIKE. It was, however, possible to refer to individual components of the dictionary type. Complex local data types such as internal tables or deep structures had no equivalent in ABAP Dictionary. The solution to this from Release 3.0 onwards was to use type groups. Type groups were based on the include technique, and allowed you to store any type definitions globally in the dictionary by defining them using TYPES statements.\n\nThe definition of a type group is a fragment of ABAP code which you enter in ABAP Editor. The first statement for the type group poolis always:\n\nAfter that, you define data types using the statement TYPES. It is also possible to define global constants using the CONSTANTS statement. All the names of these data types and constants must begin with the name of the type group and an underscore: pool_\n\nIn an ABAP program, you must declare a type group as follows before you can use it:\n\nThis statement allows you to use all the data types and constants defined in the type group pool in your program. You can use multiple type groups in the same program.\n\nFrom Release 6.40, you can also define data types and constants in the public visibility section of global classes, which makes type groups completely replaceable.\n\nThe type group HKTST is created as follows in ABAP Dictionary:\n\nTYPES: BEGIN OF hktst_typ1,\n\n col1(10) TYPE c,\n\n col2 TYPE i,\n\n END OF hktst_typ1.\n\nThis type group defines two data types HKTST_TYP1 and HKTST_TYP2, as well as a constant HKTST_ELEVEN with the value 11.\n\nAny ABAP program can use this definition with the TYPE-POOLS statement:\n\nThe data types defined in the type group are used to declare data objects with the DATA statement and the value of the constant is, as the output shows, known in the program."
    },
    {
        "link": "https://community.sap.com/t5/crm-and-cx-q-a/database-view/qaq-p/1253582",
        "document": "YES WE CANUSE THE POOLED AND CLUSTER TABLE IN THE CREATION OF VIEW\n\nTable pools (pools) and table clusters (clusters) are special table types in the ABAP Dictionary. The data from several different tables can be stored together in a table pool or table cluster. Tables assigned to a table pool or table cluster are referred to as pooled tables or cluster tables.\n\nA table pool or table cluster should be used exclusively for storing internal control information (screen sequences, program parameters, temporary data, continuous texts such as documentation). Data of commercial relevance is usually stored in transparent tables.\n\nSeveral logical data records from different cluster tables can be stored together in one physical record in a table cluster.\n\nDifferent tables which are not linked to each other with a common key can be combined into a Table Pool. The tables contained within this pool are called Pooled Tables. A table pool is stored in the database a simple table. The table's data sets contain, in separate fields, the actual key for the data set to be stored, the name of the pooled table and the contents of the data set to be stored.\n\nUsing this schema, several logical tables are combined into a single real database table. Although the data structure of each set is lost during the write to the table pool, it is restored during the read by the ABAP/4 Data Dictionary. The ABAP/4 Data Dictionary utilizes its meta-data to accomplish this.\n\nSince information must be prepared (defined) within the ABAP/4 Data Dictionary when it is read or written to (or accessed), this process itself defines these as not transparent tables.\n\nOccasionally, several tables may be linked by a common key. The ABAP/4 Data Dictionary can also combine these tables into a single table. Each data set of the real table within the database contains a key and in a single data field, several data sets of the subsequent table for this key.\n\nAs mentioned above, these table types require special data handling, therefore they are not transparent tables.\n\nNote: Both Pooled and Cluster Tables are stored as tables within the database. Only the structures of the two table types which represent a single logical view of the data are defined within the ABAP/4 Data Dictionary. The data is actually stored in bulk storage in a different structure. These tables are commonly loaded into memory (i.e., 'buffered') due to the fact they are typically used for storing internal control information and other types of data with little or no external (business) relevance.\n\nThere are four separate, types of views:\n\n- defined just as a table is defined within the database\n\n- one or more related tables may be used\n\n- only transparent tables may be used\n\n- accessed only from within SAP Help\n\n- only 1:1 and 1:C relationships are possible\n\n- allows suppression of some fields within transparent table displays\n\nA view is like a table but lacking content  it is a virtual table. A view is a definition based upon the relationship between one or several tables using the permitted relational database operations (i.e., select, join or projections). Using a view permits restricting or limiting the access to information by areas, employees, plants, etc. It permits authorized users a 'snap-shot' of the data within their functional area (finance (FI) or production planning (PP)).\n\nA view reduces the need to create new tables with only the specific data for each application ( FI , SD , PP, etc.). A view reduces redundancy of tables (which are costly to maintain) and is a preferred method for relating specific modules of business applications which may be logically separated.\n\nMany views are generated automatically. The names of many of the views delivered with R/3 begin with the letter V and usually contain the name of the primary table, such as VZZB."
    },
    {
        "link": "https://medium.com/@richa.solanki18/a-brief-introduction-to-abap-data-dictionary-fca97eba44cf",
        "document": "In the previous article on SAP ABAP, we studied the fundamentals of SAP ABAP.\n\nWith my second blog series, I am trying to put together the most crucial term, called the Data Dictionary in SAP ABAP.\n\nABAP Data Dictionary (DDIC) is the central repository for data definition in SAP systems. In the data dictionary, you can create and maintain objects that are related to the database.\n\nAnything you see in SE11, including tables, data elements, domains, search helps, views, structures, table types, lock objects are all DDIC objects. Below is the screenshot of SE11.\n\nNow let’s understand each object in general.\n• Database tables: Database tables are made up of rows and columns. Database tables are the collection of fields that have technical attributes as well as the semantic description. The custom tables (by user) should start with the naming convention as ‘Z’ or ‘Y.’ All the standard tables (by SAP) start with other names except Z or Y.\n• View: A view is a virtual table, which does not have any physical existence. It is created by combining the data of one or more tables. A view does not occupy any storage space.\n• Table type: A table type is a global reusable object, ie, we declare in SE11 Tcode, which is used to define the structures and functional attributes of an internal table in ABAP. To learn more about the internal table, navigate to ‘Part 3’.\n• Type Group: To encapsulate similar type pools in one group, we make type group. The inbuilt type pools provided by SAP are SLIS, SAP.\n• Domain: Domain describes the technical attributes such as data types and lengths of a table field.\n• Data element: Data element in sap ABAP gives the semantic description of fields such as field labels and documentation. It describes how the field can be displayed to the end-user.\n• Search Help: To enable the list of entries for one field or many fields, we use the search help option. The function key for search help is F4.\n• Lock Objects: To control the parallel access for the same data by multiple users, we make use of the lock objects. Lock objects in the data dictionary (DDIC) start with ‘E.’\n\nAs discussed earlier, SAP ABAP tables are a collection of fields that are in the format of rows and columns. Every field is made up of a data element and a domain.\n\nWhile declaring fields in the database table, all the primary keys should come together in the beginning.\n\nThe standard database tables provided by SAP are as follows:\n\nFurther, the types of table in SAP ABAP are as follows:\n\nTransparent tables: It has a one-to-one relationship. This type of table is used to store application data.\n\nPool tables: It has a many-to-one relationship. Many pool tables are clubbed and stored in a single table in a database. This type of table is used to store control data.\n\nCluster tables: It has a many-to-one relationship. Many cluster tables are clubbed and stored in a single table in a database.\n\nThe following are the steps for creating the custom tables.\n• Once the screen gets loaded, select the ‘database table’ radio button and provide the name for the table. Remember, the naming convention should start from ‘Z’ or ‘Y’ to indicate its the custom table.\n• Further, click on the Create button and enter the short description. Choose the delivery class as ‘A.’ Also, choose the ‘Display/Maintenance allowed’ from the dropdown.\n• The delivery class in SAP ABAP determines whether the data of the table can be transported or not. Types of the delivery class are as follows:\n• C -Customer table, maintenance only by the customer, no SAP imports.\n• Navigate to the ‘Fields’ tab to enter the fields of the table. Now there are two options to provide data types to each field, mainly by data element or by predefined data type.\n• Below is the method via the ‘data element.’\n• Field: List all the fields which are required for the table. Primary keys should come at the start.\n• Key: Tick the checkbox for the fields which are primary.\n• Data element: All the data elements will start with ‘Z’ as the naming convention.\n• Further, double click on every data element to provide a short description along with the domain name. The naming convention of the domain should start from ‘Z.’\n• As discussed, the data element in sap ABAP provides the semantic description of the fields. Hence one should always provide the field label. Hence navigate to the field label tab and provide 4 types of lengths:\n• Navigate again to the data type tab and double click on the domain which you provided. Provide a short description and data type of the particular field.\n• The domain also provides the option of the value range, which acts as the dropdown list for the particular field. Provide the ranges and click on save and hit the activate button.\n• Also, save and activate the data element. Repeat this procedure for every individual field by providing data elements, field labels, domains.\n• Now click on the ‘Technical settings’ button or hit ‘Ctrl+shift+F9’. Here, we provide the data class and size category.\n• Data class: This is the physical area in the database where all the data of the table are stored. With the help of the data class, SAP segregates and organizes the tables according to their types of data. It keeps all the master data together, all transaction data together, all user data, and all organization data together. This increases system performance. Following are the types of data class:\n• APPL2 -Organization data (Customizing data that is defined when the system is installed and seldomly changed.\n• Size category: This determines the expected size required for the table. The default size for type ‘0’ is 8 KB.\n• Save, activate, and hit on the ‘No’ button.\n• We are done with the creation of a table. Now to create entries in a table, navigate to Utilities > Table contents > Create entires.\n• Fill the entires one by one and hit the save button.\n• Once all the entries are created, go back and hit the Contents button (Ctrl+shift+F10) and click on the execute icon (F8).\n\nAs discussed earlier, views are virtual tables. There are four types of ABAP views.\n• Database views: This type of view creates a join between two or more tables based on common fields. Moreover, Database Views are only meant for reading purposes.\n• Projection views: This type of view does not join any tables. It simply uses one table and shows the output to the user. This view is meant for both reading and writing purposes.\n• Maintenance views: This view is the same as the Database view. Maintenance views generate the screen runtime for maintaining and displaying records.\n• Help views: This is a special view for use in search helps (F4).\n• Navigate to SE11 transaction. Choose the radio button which says ‘View.’ Give a suitable name for the same. Ensure the naming convention should start from ‘Z’ or ‘Y.’ Once done, click on the create button.\n• You will get the screen which has various types of views. Here we will go for the ‘Database View.’\n• Give a short description. Next, provide the name of the master table (KNA1), click on the relationship button, and select the dependent table (VBAK). Once we select two tables, we get the join condition automatically. Here the join condition is on fields ‘Mandt’ and ‘Kunnr.’\n• Further, navigate to View Fields tab and mention the fields which you want to display to the user from both the tables. In our example, the two tables are KNA1 and VBAK.\n• Save and hit the activate icon (Ctrl +F3). Navigate to the Utilities tab located on the menu bar and click on the contents option. The below screen gets displayed.\n• The below output displays the entries for the fields ‘Customer’ and ‘Name.’ There is no entry for the fields ‘City’ and ‘Sales document.’\n• Enter the short description and provide the base table. Here we are using the ‘KNA1’ table in our Projection view example. Click on the ‘Table fields’ button and provide the fields which you want to display to the user.\n• Further, click on the maintenance view and ensure the selected radio-button is read and change.\n• Save and activate and hit the utilities from the menu bar to view the contents.\n• Provide a short description. Enter the base table as KNB1 and click on the ‘relationship’ button.\n• Select the suitable checkbox and click on the ‘copy’ button. Save and hit the activate icon.\n• Further, go to the Utilities tab > table maintenance generator.\n• Click on the ‘create’ icon, which is located to the extreme left besides ‘Find SCR. Number’\n• Further, go back and select utilities > contents. The last step is to select the ‘maintain’ button.\n• Following is the segregation of global data types on navigating to SE11.\n\nSince we have already seen the creation of a data element previously, here we will concentrate on the creation of a structure.\n• Click on the ‘data-type’ radio button. Provide the appropriate name. Hit the ‘Create’ button.\n• Once the screen gets loaded, we have three options to go for. We will select the ‘Structure’ radio button.\n• Provide a short description and type the fields which you want to use in the structure. Here I have used built-in data types for the fields ‘EMP_NAME’, ‘EMP_NO,’ and ‘LOCATION.’\n• Now, we will consume this structure in our report. So navigate to SE38 and copy-paste the below snippet.\n• Let’s use the existing structure. Here, I have added the field ‘EMP_ADDRESS’.\n• Double click on the data element (ZRDS_ADDRESS) and add the fields. Save, check, and activate.\n• Once adding all the fields of nested structures, you will be able to see the icon.\n• Now, we will consume this structure in our report. So navigate to SE38 and copy-paste the below snippet.\n\nIn a type group, we can declare all the local data types and constants that can be consumed in different programs.\n\nRather than writing local types, one prefers making the type groups that consolidate all local types.\n• ABAP type groups can be created by navigating to SE11 transaction and enabling the type group radio button.\n• Enter the short description. Save and copy-paste the below code snippet.\n• Further, we will consume this type group in our SE38 report.\n\nThere are two types of search helps:\n• Elementary search help: Based on one single field, we can populate the data for the rest of the fields if the table.\n• Collective search help: This collects several elementary search helps. Hence, Collective search help provides an alternative search path for a particular field.\n\nListed below are the steps to create Elementary search help.\n• Enable the search help radio button and provide the appropriate name. Click on the ‘create’ button.\n• Once the screen gets loaded, we will get 2 options. Here go for the elementary search help.\n• Give a short description. Enter the table name in the selection method. Here I have used the table (ZRDS_EMPLOYEE), which was created earlier. Further, change the option of dialog type to ‘display values immediately.’ Entering the hotkey is optional.\n• Next, enter the fields on which we want to populate the search help (Hit F4 to get the list of fields). Here I have used all fields of the table (ZRDS_EMPLOYEE).\n• Provide ‘LPos’ (List position) and ‘SPos’ (Screen position) between 0 to 7.\n• Save, activate the search help, and go back to the database table on which we have implemented search help.\n• Select the field on which you want a search help. Here, I have done search help on EMPLOYEE_ID. Hit the search button. Enter the Search help name which you created prior.\n• Hit the ‘Create Proposal’ button and click on the ‘Copy’ button, which is located at the extreme bottom.\n• Once the search help is implemented successfully, the below message will popup.\n• Further, navigate to contents and press F4 on the EMPLOYEE_ID field to get the list of data. This is the final output.\n\nBelow are the steps to create Collective search help.\n• Enable the search help radio button and provide the appropriate name. Click on the ‘create’ button. Choose the Collective Search Help radio button.\n• For Collective Search Help, we need to create more than 1 elementary search help. Here I have already created two Elementary search helps.\n• To start with, navigate to Included Search helps tab. Mention all the Elementary search helps.\n• Save it and navigate to the ‘Definition’ tab.\n• Enter any single field from both the elementary search helps and navigate again to ‘Included Search help.’ Select the first search help and click on the parameter assignment. Hit yes and copy.\n• Repeat the same for the second search help.\n• Save and hit the activate icon and execute it the same way as elementary search help.\n\nLock object in SAP ABAP is the feature used to control access of the same data to multiple users.\n\nLock objects are of three types.\n• Read lock: All of them can only read the data.\n• Write lock: Only one user can write while the rest can read.\n• Exclusive but not cumulative: Only one lock can be requested by a transaction. All the other requests are rejected.\n\nBelow are the steps to create Lock Objects.\n• Navigate to transaction SE11 and enable the lock object radio button. Provide an appropriate name. Ensure you follow the naming convention by starting with the letter ‘E.’\n• Further, provide a short description and enter the table name. Here I have used the table (ZRDS_EMPLOYEE), which was created prior. Apply the lock mode as write.\n• Navigate to the ‘Lock parameter’ tab, and you will get the display of only primary keys.\n• Further, save and press F3. Once the lock objects are activated, by default, two function modules are created.\n• To watch the function modules, click on the GoTo tab from the menu bar and click on lock modules.\n\nI hope the above explanation gives the individual a brief knowledge of the Data Dictionary in SAP ABAP."
    },
    {
        "link": "https://techtarget.com/searchsap/feature/Working-with-ABAP-date-and-time-data-types",
        "document": "ABAP provides two built-in types to work with dates and times: the D (date) data type and the T (time) data type. Both of these types are fixed-length character types that have the form YYYYMMDD and HHMMSS, respectively. In addition to these built-in types, the ABAP Dictionary types TIMESTAMP and TIMESTAMPL are being used more and more in many standard application tables, and so on, to store a timestamp in the UTC format.1 Table 2.2 shows the basic date and time types available in ABAP. For more information on this title In this SAP Press book chapter excerpt, you'll find an introduction to SAP ABAP date and time data types. This excerpt from ABAP Cookbook: Programming Recipes for Everyday Solutions by James Wood is reprinted here with permission from SAP Press, copyright 2010. Download a PDF of this chapter. The term “UTC” is an abbreviation for “Consolidated Universal Time,” which is a time standard based on the International Atomic Time standard. UTC is roughly equivalent to the Greenwich Mean Time standard (or GMT) which refers to the mean solar time at the Royal Observatory in Greenwich, London. Collectively, these standards define a global time standard that can be used to convert a given time to local time, and vice versa. A built-in fixed-length date type of the form YYYYMMDD. For example, the value 20100913 represents the date September 13, 2010. A built-in fixed-length time type of the form HHMMSS. For example, the value 102305 represents the time 10:23:05 AM. An ABAP Dictionary type used to represent short timestamps in the form YYYYMMDDhhmmss. For example, the value 20100913102305 represents the date September 13, 2010 at 10:23:05 AM. An ABAP Dictionary type used to represent long timestamps in the form YYYYMMDDhhmmssmmmuuun. The additional digits mmmuuun represent fractions of a second.\n\nWhen you're working with dates, you often need to perform various calculations to compute the difference between two dates, make comparisons, or determine a valid date range. As we mentioned in Section 2.2.1, Understanding ABAP Date and Time Types, the built-in date and time types in ABAP are character types, not numeric types. Nevertheless, the ABAP runtime environment allows you to perform basic numeric operations on these types by implicitly converting them to numeric types behind the scenes. The code excerpt shown in Listing 2.3 demonstrates how these calculations work. Initially, the variable lv_date is assigned the value of the current system date (e.g., the system field SY-DATUM). Next, we increment that date value by 30. In terms of a date calculation in ABAP, this implies that we're increasing the day component of the date object by 30 days. Here, note that the ABAP runtime environment is smart enough to roll over the date value whenever it reaches the end of a month, and so on. In other words, you can rely on the system to ensure that you don't calculate an invalid date value (e.g., 01/43/2011). Time calculations in ABAP work very similarly to the date calculations shown in Listing 2.3. With time calculations, the computation is based upon the seconds component of the time object. The code in Listing 2.4 shows how we can increment the current system time by 90 seconds using basic time arithmetic. DATA: lv_time TYPE t. lv_time = sy-uzeit. WRITE /(60) lv_time USING EDIT MASK 'The current time is __:__:__'. lv_time = lv_time + 90. WRITE /(60) lv_time USING EDIT MASK 'A minute and a half from now it will be __:__:__'. In addition to typical numeric calculations, you also have the option of working with date/time fields using normal character-based semantics. For instance, you can use the offset/length functionality to initialize date or time components. The code excerpt in Listing 2.5 demonstrates how you can adjust the date 02/13/2003 to 01/13/2003 using offset/length semantics.\n\nIf you've been working with some of the newer releases of the products in the SAP Business Suite, you may have encountered certain applications that use the TIMESTAMP or TIMESTAMPL data types to store time-sensitive data. As you can see in Table 2.2, these ABAP Dictionary types store timestamps with varying degrees of accuracy. Interestingly, though these types aren't built-in types like D or T, ABAP does provide some native support for them in the form of a couple of built-in statements. In addition, SAP also provides a system class called CL_ABAP_TSTMP, which can be used to simplify the process of working with timestamps. We investigate these features in the following subsections. \\You can retrieve the current system time and store it in a timestamp variable using the GET TIME STAMP statement whose syntax is demonstrated in Listing 2.6. The GET TIME STAMP statement stores the timestamp in a shorthand or longhand format depending upon the type of the timestamp data object used after the FIELD addition. The timestamp value is encoded using the UTC standard. Listing 2.6 Using the GET TIME STAMP Statement Looking at the code excerpt in Listing 2.6, you can see that we're displaying the timestamp using the TIME ZONE addition of the WRITE statement. This addition formats the output of the timestamp according to the rules for the time zone specified. In Listing 2.6, we used the system field SY-ZONLO to display the local time zone configured in the user's preferences. However, we could have just as easily used a data object of type TIMEZONE, or even a hard-coded literal such as 'CST'. For a complete list of time zones configured in the system, have a look at the contents of ABAP Dictionary Table TTZZ.\n\nYou can convert a timestamp to a date/time data object and vice versa using the CONVERT statement in ABAP. Listing 2.7 shows the syntax used to convert a timestamp into data objects of type D and T. The TIME ZONE addition adjusts the UTC date/time value within the timestamp in accordance with a particular time zone. Additionally, the optional DAYLIGHT SAVING TIME addition can be used to determine whether or not the timestamp value happens to coincide with daylight savings time. If it does, the lv_dst variable has the value 'X'; otherwise, it's blank. This feature can be helpful in differentiating between timestamp values that lie within the transitional period between summer time and winter time.2 Listing 2.8 shows how the CONVERT TIME STAMP statement is used to convert the current system timestamp to date/time data objects using the local time zone. TYPE-POOLS: abap. DATA: lv_tstamp TYPE timestamp, lv_date TYPE d, lv_time TYPE t, lv_dst TYPE abap_bool. GET TIME STAMP FIELD lv_tstamp. CONVERT TIME STAMP lv_tstamp TIME ZONE sy-zonlo INTO DATE lv_date TIME lv_time DAYLIGHT SAVING TIME lv_dst. WRITE: / 'Today's date is: ', lv_date MM/DD/YYYY. WRITE: /(60) lv_time USING EDIT MASK 'The current time is: __:__:__'. IF lv_dst EQ abap_true. WRITE: / 'In daylight savings time...'. ELSE. WRITE: / 'Not in daylight savings time...'. ENDIF. For a complete list of daylight savings time rules, have a look at the contents of the ABAP Dictionary table TTZDV. To create a timestamp using a date/time object, you can use the syntax variant of the CONVERT statement shown in Listing 2.9. The date/time values are qualified using the TIME ZONE addition so that the appropriate offsets can be applied as the UTC timestamp is generated. The code excerpt in Listing 2.10 shows how the CONVERT DATE statement can be used to generate a timestamp object from a date/time object.\n\nUnlike the native D and T types, the ABAP runtime environment doesn't have built-in functionality to perform calculations on timestamps (e.g., add or subtract, etc.). Instead, SAP provides a system class called CL_ABAP_TSTMP for this purpose. Figure 2.4 contains a UML class diagram that shows the publicly available methods provided in this class. As you would expect, there are various forms of ADD() and SUBTRACT() methods to perform timestamp calculations. In addition, a series of conversion methods (e.g., SYSTEMTSTMP_SYST2LOC(), etc.) can be used to convert a timestamp to various time zones, a Boolean method called ISDOUBLEINTERVAL() can be used to determine if a timestamp is in daylight savings time, and a couple of methods can be used to normalize a timestamp. Here, normalization implies that an invalid time value such as 10:30:60 would be adjusted to the value 10:31:00. In UML class diagram notation, methods that are underlined are defined as class methods. Class methods can be invoked without first creating an instance of the class in which they are defined, as evidenced in the code excerpt shown in Listing 2.11. Here, we're using the class method ADD() to add 75 seconds to the current system time. DATA: lv_tstamp TYPE timestamp, lv_date TYPE d, lv_time TYPE t. GET TIME STAMP FIELD lv_tstamp. WRITE: / 'Time Stamp Value:', lv_tstamp TIME ZONE sy-zonlo. TRY. CALL METHOD cl_abap_tstmp=>add EXPORTING tstmp = lv_tstamp secs = 75 RECEIVING r_tstmp = lv_tstamp. CATCH CX_PARAMETER_INVALID_RANGE. CATCH CX_PARAMETER_INVALID_TYPE. ENDTRY. WRITE: / 'Time Stamp Value:', lv_tstamp TIME ZONE sy-zonlo. The call signatures of most of the other methods in class CL_ABAP_TSTMP are similar to the ADD() method demonstrated in Listing 2.11. For more details concerning the functionality of particular methods in this class, see the class/method documentation for this class in the Class Builder (Transaction SE24).\n\nSo far, our discussion on dates has focused on raw calculations and conversions. However, many typical use cases in the business world require that we look at dates from a semantic point of view. For example, you might ask whether or not the date 1/13/2010 is a working day, or whether 4/4/2010 is a holiday. The answers to these kinds of questions require the use of a calendar. Fortunately, SAP provides a very robust set of calendaring features straight out of the box with SAP NetWeaver AS ABAP. The SAP Calendar is maintained in a client-specific manner inside the SAP Customizing implementation guide (Transaction SPRO ). Depending on how your system is set up, you might have a project-specific implementation guide. However, for the purposes of this discussion, we assume that you're using the default SAP Reference Implementation Guide (IMG). You can access this guide by clicking on the button labeled SAP Reference IMG on the initial screen of Transaction SPRO (see Figure 2.5). Inside the SAP Reference IMG, you can find the SAP Calendar under the navigation path SAP NetWeaver\n• General Settings\n• Maintain Calendar (see Figure 2.6). Figure 2.6 Navigating to the SAP Calendar in the IMG Figure 2.7 shows the main menu of the SAP Calendar transaction . From here, you can configure subobjects such as public holidays, holiday calendars, and factory calendars. By default, an SAP NetWeaver system comes preconfigured with some typical settings in these subareas. However, you're also free to create customized holidays and calendars as needed. Figure 2.7 Maintaining the SAP Calendar in the IMG After the SAP Calendar is confi gured properly, you can use this data to perform various types of calculations. Table 2.3 shows some useful function modules that leverage this data to determine whether or not a given date is a working day, holiday, and so on. You can fi nd out more information about these function modules in the documentation provided for each module in the Function Builder (Transaction SE37). Computes the day of the week for a given date. Day values are calculated as 1 (Monday), 2 (Tuesday), and so on. Computes the day of the week just like DATE_ COMPUTE_DAY; also returns the day value as text (e.g., TUESDAY, etc.). Calculates the factory date value for a given date. Also provides an indicator that confirms whether or not the given date is considered a working day according to the selected factory calendar. Determines the week of the year for the given date. For example, the date 9/13/2010 would be the 37th week of the year 2010. Tests to determine whether or not a given date is a holiday based on the configured holiday calendar. Calculates the first day of a given week."
    },
    {
        "link": "https://stackoverflow.com/questions/3710705/how-to-search-for-available-rfc-function-modules-and-tables",
        "document": "I've got to admit that I'm not an expert on SAP R/3 programming, so this is more of a basic question on that matter.\n\nIs there any way to get a list of accessible RFC modules and/or tables on a SAP system?\n\nOn many examples on the internet I've found one RFC module that seems to be available on every SAP system (\"SD_RFC_CUSTOMER_GET\") and I wonder if there are any more of these standard RFC modules that I can use. I can easily query the SAP system for all SAP-Queries that are available but I just cannot find a way to do this with RFC modules or tables. I cannot even find a list of these RFC modules after searching on Google for hours...\n\nso am I missing something or is this just impossible?\n\nThanks for any help in advance."
    }
]