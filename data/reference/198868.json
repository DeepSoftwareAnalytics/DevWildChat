[
    {
        "link": "https://knowledgecenter.zuora.com/Zuora_Platform/Integration/Integration_Hub/Zuora_360__and_Zuora_360/Z_Zuora_360_Introduction/Sync_Field_Mapping_of_Account_and_Related_Objects",
        "document": "This article shows how the Zuora account and related objects and their fields are mapped and synchronized to Salesforce objects and fields in Zuora 360. Each sync objects pair is marked as <Zuora object> : <Salesforce object>.\n\nAny Zuora field marked as \"internal\" is a field that is not exposed in the Zuora SOAP API. However, these internal fields are synchronized between Zuora and Salesforce in Zuora 360.\n\nThe descriptions of the \"internal\" sync fields are provided in this article. For the descriptions of the standard fields, refer to SOAP API Object Reference.\n\nThis unique key is used to determine whether to create a new account or update an existing account. Note that this field is not available in Z360 V5.2 but only in Z360 V5.15 To create features in the product catalog and use them in subscriptions and Zuora Quotes, you need to enable the following:\n• The Entitlements setting in your tenant.\n\n Access to the Entitlements feature requires a specific edition of Zuora. See Zuora Editions for details.\n• The Enable Feature Specification in Product and Subscriptions setting in the Billing Settings. The Payment object holds all of the information about an individual payment, including the payment amount, and the invoices that the payment is applied to. The username of the user identified by CreatedById The date when the object was created in Zuora system. The latest version of the connector, Zuora connectors for Salesforce CRM, no longer supports these fields. Please refer to the below tables: The username of the user identified by UpdatedById An Invoice Payment is a mechanism to tie a payment to an invoice and indicate how much of the payment to apply to the invoice. The Zuora__PaymentInvoice__c object has a master-detail relationship to the Payment object and a lookup relationship to the Invoice object. The Refund object holds all of the information about each Refund processed in Zuora, including refund amount, refund type, refund date, refund number, and additional information about the refund. This object was added in Zuora 360 version 2.5. Use this optional field as a note. The username of the user identified by CreatedById Date and Time when the refund is created. The message returned from the payment gateway for a given refund. This is gateway dependent. This contains the payment reference in the case where a refund is associated with one payment and invoice. A valid payment method ID, indicating the method being used to make the refund. The reason code specified in Zuora. The date of the refund. The date of this refund cannot be before the payment date. The date and time when the refund was issued. Specifies whether the refund is a refund payment or a credit balance. The possible values are Payment and CreditBalance. The user name of the user identified by UpdatedById. The Zuora__RefundInvoicePayment__c object represents the relationship object between Refund and InvoicePayment. A refund can be associated with multiple payments for invoices, and multiple refunds can be made for one payment for invoices. This relation is left empty for credit balance refunds. This object was added in Zuora 360 version 2.5. The master detail relation to the Refund object. The amount of the refund that was applied to this invoice payment referenced in this object. The Zuora__PaymentMethod__c object was added in Zuora 360 version 2.5."
    },
    {
        "link": "https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql_select_examples.htm",
        "document": ""
    },
    {
        "link": "https://knowledgecenter.zuora.com/Zuora_CPQ/CPQ_X/5_Document_Generation_with_S-Docs/S-Docs_Sample_Template_Code_Library",
        "document": "The S-Docs sample template codes provide a comprehensive collection of code snippets and examples that can be used to customize and enhance your S-Docs templates. By leveraging the S-Docs template codes, you can expedite the template customization process and achieve greater flexibility in tailoring your templates to specific needs.\n\nHere are some sample templates to get you started. These templates are designed to provide you with a foundation to kick-start your customization process. By utilizing these sample templates, you can save time and effort in designing and structuring your documents.\n\nBelow are sample template codes for both Ramp and Non-ramp templates that you can use as a reference when creating new quotes: Make sure the namespace and fields are configured to suit your needs. <br /> <br /> <style type=\"text/css\">.textBold {margin:0cm;font-size:12px;font-family:arial unicode ms,sans-serif;font-weight: bold;} .textDetail {margin:0cm;font-size:12px;font-family:arial unicode ms,sans-serif;} table.table439 {border-collapse: collapse; margin: 25px 0; font-size: 0.9em; font-family: sans-serif; box-shadow: 0 0 20px rgba(0, 0, 0, 0.15); width:100% } .table439header {background-color: #009879; color: #ffffff; text-align: left; } .table439header1 {background-color: #1e6e60; color: #ffffff; text-align: left; } .table439footer {border-bottom: 2px solid #009879;} .table439RowEven{background-color: #f3f3f3;} .table439RowOdd{border-bottom: 1px solid #dddddd; } .table439 thead th { background-color: #009879; color: #ffffff; text-align: left; } .table439 th, .table439 td { padding: 12px 15px; } </style> <!-- ******************** START RELATED LIST SECTION UNIQUEID:685********************--> <table border=\"0\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 100%;\"> <tbody> <tr> <td style=\"width: 50%;\"> <p><span class=\"textBold\">Quote Number: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__number__c}}</span><br /> <span class=\"textBold\">Name: </span><span class=\"textDetail\">{{!zqu__Quote__c.name}}</span><br /> <span class=\"textBold\">Valid Until: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__ValidUntil__c}}</span></p> </td> <td style=\"width: 50%;\"> <p style=\"text-align: right;\"><span><span class=\"textBold\">Organization Name:</span> </span><span class=\"textDetail\">{{!UserOrganizationName}}</span><br /> <span class=\"textBold\">Tel: </span><span class=\"textDetail\">{{!UserPhone}}</span><br /> <span class=\"textBold\">Fax: </span><span class=\"textDetail\">{{!UserFax}}</span></p> </td> </tr> </tbody> </table> <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 100%;\"> <tbody> <tr> <td style=\"width: 50%;\"> <p><span class=\"textBold\">Bill To</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__Account__r.name}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__BillToContact__r.firstname}} {{!zqu__Quote__c.zqu__BillToContact__r.LastName}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__BillToContact__r.City}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__BillToContact__r.State}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__BillToContact__r.PostalCode}}</span></p> </td> <td style=\"width: 50%;\"> <p><span class=\"textBold\">Sold To</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__Account__r.name}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__SoldToContact__r.firstname}} {{!zqu__Quote__c.zqu__SoldToContact__r.LastName}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__SoldToContact__r.City}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__SoldToContact__r.State}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__SoldToContact__r.PostalCode}}</span></p> </td> </tr> <tr> <td style=\"width: 50%;\"> <p><span class=\"textBold\">Start Date: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__StartDate__c}}</span><br /> <span class=\"textBold\">Initial Term: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__InitialTerm__c}}</span><br /> <span class=\"textBold\">Renewal Term: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__RenewalTerm__c}}</span><br /> <span class=\"textBold\">Auto Renew: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__AutoRenew__c}}</span></p> </td> <td style=\"width: 50%;\"> <p><span class=\"textBold\">Billing Method: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__BillingMethod__c}}</span><br /> <span class=\"textBold\">Payment Method: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__PaymentMethod__c}}</span><br /> <span class=\"textBold\">Payment Term: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__PaymentTerm__c}}</span><br /> <span class=\"textBold\">Currency: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__Currency__c}}</span></p> </td> </tr> </tbody> </table> <br /> <br /> <!-- ******************** END RELATED LIST SECTION UNIQUEID:439********************--><br /> ### RELATED LIST No: 981 ### <table class=\"table439\"> <tbody> <tr> <th class=\"table439header\">CHARGE</th> <th class=\"table439header\">MRR</th> <th class=\"table439header\">TCV</th> <th class=\"table439header\">DMRR</th> <th class=\"table439header\">DTCV</th> <th class=\"table439header\">DISCOUNT</th> <th class=\"table439header\">TAX</th> <th class=\"table439header\">SUBTOTAL</th> <th class=\"table439header\">TOTAL</th> </tr> </tbody> <tbody style=\"page-break-inside: avoid !important; page-break-before: auto !important;\"><!--{{! <lineitems> <class>table439</class> <listname>zqu__quotechargedetails__r</listname> <column>name</column> <column>zqu__mrr__c</column> <column>zqu__tcv__c</column> <column>zqu__deltamrr__c</column> <column>zqu__deltatcv__c</column> <column>zqu__billingdiscount__c</column> <column>zqu__billingtax__c</column> <column>zqu__billingsubtotal__c</column> <column>zqu__billingtotal__c</column> </lineitems> }}--> </tbody> </table> <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"table439\" style=\"width: 100%;\"> <tbody> <tr> <td class=\"table439header1\" colspan=\"5\">Rate Plan Charge</td> </tr> <tr> <th class=\"table439header\">RATE PLAN</th> <th class=\"table439header\">CHARGE</th> <th class=\"table439header\">QUANTITY</th> <th class=\"table439header\">EFFECTIVE PRICE</th> <th class=\"table439header\">TOTAL</th> </tr> <!--{{! <LineItemsSOQL> <class>table439</class> <ListName>zqu__QuoteRatePlanCharge__c</ListName> <soql>select id,zqu__QuoteRatePlan__r.Name,Name,zqu__Quantity__c, zqu__EffectivePrice__c, zqu__Total__c ,(select id,zqu__StartingUnit__c,zqu__EndingUnit__c,zqu__Price__c from zqu__Quote_RatePlan_Charge_Tier__r) from zqu__QuoteRatePlanCharge__c where zqu__QuoteRatePlan__r.zqu__Quote__c ='{{!ObjectID15}}'</soql> <column>zqu__QuoteRatePlan__r.Name</column> <column>Name</column> <column format-number=\"#,###.##\">zqu__Quantity__c</column> <column format-number=\"#,###.##\">zqu__EffectivePrice__c</column> <column format-number=\"#,###.##\">zqu__Total__c</column> </LineItemsSOQL> }}--> <tr> <td class=\"table439\" colspan=\"4\" style=\"text-align: right;\">Subtotal:</td> <td class=\"table439\">{{!zqu__Quote__c.zqu__Previewed_SubTotal__c}}</td> </tr> <tr> <td class=\"table439\" colspan=\"4\" style=\"text-align: right;\">Discount:</td> <td class=\"table439\">{{!zqu__Quote__c.zqu__Previewed_Discount__c}}</td> </tr> <tr> <td class=\"table439\" colspan=\"4\" style=\"text-align: right;\">Tax:</td> <td class=\"table439\">{{!zqu__Quote__c.zqu__Previewed_Tax__c}}</td> </tr> <tr> <td class=\"table439\" colspan=\"4\" style=\"text-align: right;\">TOTAL:</td> <td class=\"table981col0\">{{!zqu__Quote__c.zqu__Previewed_Total__c}}</td> </tr> </tbody> </table> <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"table439\" style=\"width: 100%;\"> <tbody> <tr> <td class=\"table439header1\" colspan=\"6\">TIER DETAILS</td> </tr> <tr> <th class=\"table439header\">RATE PLAN</th> <th class=\"table439header\">TIER</th> <th class=\"table439header\">START UNIT</th> <th class=\"table439header\">END UNIT</th> <th class=\"table439header\">DISCOUNT</th> <th class=\"table439header\">EFFECTIVE PRICE</th> </tr> <!--{{! <LineItemsSOQL> <class>table439</class> <ListName>zqu__QuoteCharge_Tier__c</ListName> <soql>select id,zqu__QuoteRatePlanCharge__r.Name,zqu__Tier__c, zqu__StartingUnit__c, zqu__EndingUnit__c, zqu__Effective_Price__c, zqu__Discount__c from zqu__QuoteCharge_Tier__c where zqu__QuoteRatePlanCharge__r.zqu__QuoteRatePlan__r.zqu__Quote__c ='{{!ObjectID15}}'</soql> <column>zqu__QuoteRatePlanCharge__r.Name</column> <column>zqu__Tier__c</column> <column format-number=\"#,###.##\">zqu__StartingUnit__c</column> <column format-number=\"#,###.##\">zqu__EndingUnit__c</column> <column format-number=\"#,###.##\">zqu__Discount__c</column> <column format-number=\"#,###.##\">zqu__Effective_Price__c</column> </LineItemsSOQL> }}--> </tbody> </table> <br /> <!-- ******************** START RELATED LIST SECTION UNIQUEID:740********************--><br /> ### RELATED LIST No: 740 ### <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"table439\" style=\"width: 100%;\"> <tbody> <tr> <td class=\"table439header1\" colspan=\"6\">Quote Line Items</td> </tr> <tr> <th class=\"table439header\">Name</th> <th class=\"table439header\">Quantity</th> <th class=\"table439header\">Amount per Unit</th> <th class=\"table439header\">Item Type</th> <th class=\"table439header\">Item State</th> <th class=\"table439header\">Charge Subtotal</th> </tr> <!--{{! <lineitems> <class>table439</class> <listname>zqu__quoteorderlineitems__r</listname> <column>name</column> <column>zqu__quantity__c</column> <column>zqu__chargeamountperunit__c</column> <column>zqu__itemtype__c</column> <column>zqu__itemstate__c</column> <column>zqu__subtotal__c</column> </lineitems> }}--> <tr> <td class=\"table439\" colspan=\"5\" style=\"text-align: right;\">Quote Line Item Subtotal:</td> <td class=\"table439\">{{!zqu__Quote__c.zqu__Qli_Subtotal__c}}</td> </tr> <tr> <td class=\"table439\" colspan=\"5\" style=\"text-align: right;\">Quote Line Item Tax:</td> <td class=\"table439\">{{!zqu__Quote__c.zqu__Qli_Tax__c}}</td> </tr> <tr> <td class=\"table439\" colspan=\"5\" style=\"text-align: right;\">Quote Line Item Total:</td> <td class=\"table439\">{{!zqu__Quote__c.zqu__Qli_Total__c}}</td> </tr> <tr> <td class=\"table439\" colspan=\"5\" style=\"text-align: right;\">TOTAL:</td> <td class=\"table439\">{{!zqu__Quote__c.zqu__Previewed_Total__c}}</td> </tr> </tbody> </table> <br /> Make sure the namespace and fields are configured to suit your needs. <br /> <br /> <style type=\"text/css\">.textBold {margin:0cm;font-size:12px;font-family:arial unicode ms,sans-serif;font-weight: bold;} .textDetail {margin:0cm;font-size:12px;font-family:arial unicode ms,sans-serif;} table.table439 {border-collapse: collapse; margin: 25px 0; font-size: 0.9em; font-family: sans-serif; box-shadow: 0 0 20px rgba(0, 0, 0, 0.15); width:100% } .table439header {background-color: #009879; color: #FFFFFF; text-align: left; } .table439header1 {background-color: #1E6E60; color: #FFFFFF; text-align: left; } .table439footer {border-bottom: 2px solid #009879;} .table439RowEven{background-color: #F3F3F3;} .table439RowOdd{border-bottom: 1px solid #DDDDDD; } .table439 thead th { background-color: #009879; color: #FFFFFF; text-align: left; } .table439 th, .table439 td { padding: 12px 15px; } .table439footer{ border-top:solid #C1CED9 1px;text-align:right;} </style> <!-- ******************** START RELATED LIST SECTION UNIQUEID:685********************--> <table border=\"0\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 100%;\"> <tbody> <tr> <td style=\"width: 50%;\"> <p><span class=\"textBold\">Quote Number: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__number__c}}</span><br /> <span class=\"textBold\">Name: </span><span class=\"textDetail\">{{!zqu__Quote__c.name}}</span><br /> <span class=\"textBold\">Valid Until: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__ValidUntil__c}}</span></p> </td> <td style=\"width: 50%;\"> <p style=\"text-align: right;\"><span><span class=\"textBold\">Organization Name:</span> </span><span class=\"textDetail\">{{!UserOrganizationName}}</span><br /> <span class=\"textBold\">Tel: </span><span class=\"textDetail\">{{!UserPhone}}</span><br /> <span class=\"textBold\">Fax: </span><span class=\"textDetail\">{{!UserFax}}</span></p> </td> </tr> </tbody> </table> <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 100%;\"> <tbody> <tr> <td style=\"width: 100%;\"> <p><span class=\"textBold\">Bill To</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__Account__r.name}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__BillToContact__r.firstname}} {{!zqu__Quote__c.zqu__BillToContact__r.LastName}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__BillToContact__r.City}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__BillToContact__r.State}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__BillToContact__r.PostalCode}}</span></p> </td> <td style=\"width: 50%;\"> <p><span class=\"textBold\">Sold To</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__Account__r.name}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__SoldToContact__r.firstname}} {{!zqu__Quote__c.zqu__SoldToContact__r.LastName}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__SoldToContact__r.City}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__SoldToContact__r.State}}</span><br /> <span class=\"textDetail\">{{!zqu__Quote__c.zqu__SoldToContact__r.PostalCode}}</span></p> </td> </tr> <tr> <td style=\"width: 50%;\"> <p><span class=\"textBold\">Start Date: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__StartDate__c}}</span><br /> <span class=\"textBold\">Initial Term: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__InitialTerm__c}}</span><br /> <span class=\"textBold\">Renewal Term: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__RenewalTerm__c}}</span><br /> <span class=\"textBold\">Auto Renew: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__AutoRenew__c}}</span></p> </td> <td style=\"width: 50%;\"> <p><span class=\"textBold\">Billing Method: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__BillingMethod__c}}</span><br /> <span class=\"textBold\">Payment Method: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__PaymentMethod__c}}</span><br /> <span class=\"textBold\">Payment Term: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__PaymentTerm__c}}</span><br /> <span class=\"textBold\">Currency: </span><span class=\"textDetail\">{{!zqu__Quote__c.zqu__Currency__c}}</span></p> </td> </tr> </tbody> </table> <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"table439\"> <tbody> <tr> <td class=\"table439header1\" colspan=\"9\">Quote Charge Ramp Intervals Details</td> </tr> <!--{{! <lineitemsSOQL> <class>table439</class> <listname>zqu__quotechargeintervaldetail__c</listname> <column>zqu__QuoteRampInterval__r.name</column> <column>zqu__QuoteRatePlanCharge__r.name</column> <column format-number=\"#,###.##\">zqu__DeltaMRR__c</column> <column format-number=\"#,###.##\">zqu__DeltaTCB__c</column> <column >zqu__EndDate__c</column> <column format-number=\"#,###.##\">zqu__MRR__c</column> <column format-number=\"#,###.##\">zqu__TCB__c</column> <column >zqu__ProductRatePlanCharge__r.Name</column> <column >zqu__StartDate__c</column> <where>zqu__QuoteRatePlanCharge__r.zqu__QuoteRatePlan__r.zqu__Quote__c = '{{!ObjectID15}}'</where> <groupbyheader position=\"after-group\">QuoteRampInterval,QuoteRatePlancharge,DeltaMRR,DeltaTCB,EndDate,MRR,TCB,ProductRatePlanCharge,StartDate</groupbyheader> <groupby type=\"onetable\">zqu__QuoteRampInterval__r.name</groupby> <groupbysum position=\"footer\" format-number=\"#,###.##\" prefix=\"Subtotal $\">zqu__QuoteRatePlanCharge__r.zqu__Total__c</groupbysum> <orderby>zqu__QuoteRampInterval__r.name</orderby> </lineitemsSOQL> }}--> <tr> <td colspan=\"4\"> </td> </tr> </tbody> </table> <br /> <!-- ******************** START RELATED LIST SECTION UNIQUEID:41********************--><br /> ###RELATED LIST No: 41### <table class=\"table439\"> <tbody> <tr> <th class=\"table439header\">name</th> <th class=\"table439header\">name</th> <th class=\"table439header\">deltamrr</th> <th class=\"table439header\">deltatcb</th> <th class=\"table439header\">enddate</th> <th class=\"table439header\">mrr</th> <th class=\"table439header\">tcb</th> <th class=\"table439header\">productrateplanchargename</th> <th class=\"table439header\">startdate</th> </tr> </tbody> <tbody style=\"page-break-inside: avoid !important; page-break-before: auto !important;\"><!--{{! <lineitems> <class>table439</class> <listname>zqu__quotechargeintervaldetails__r</listname> <column>zqu__QuoteRampInterval__r.name</column> <column>zqu__QuoteRatePlanCharge__r.name</column> <column>zqu__deltamrr__c</column> <column>zqu__deltatcb__c</column> <column>zqu__enddate__c</column> <column>zqu__mrr__c</column> <column>zqu__tcb__c</column> <column>zqu__ProductRatePlanCharge__r.zqu__productrateplanchargename__c</column> <column>zqu__startdate__c</column> <where>zqu__QuoteRatePlanCharge__r.zqu__QuoteRatePlan__r.zqu__Quote__c = '{{!ObjectID15}}'</where> <orderby>zqu__QuoteRampInterval__r.name</orderby> </lineitems> }}--> </tbody> </table> <br /> <!-- ******************** END RELATED LIST SECTION UNIQUEID:41********************--> <!-- ******************** END RELATED LIST SECTION UNIQUEID:731********************--> <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"table439\" style=\"width: 100%;\"> <tbody> <tr> <td class=\"table439header1\" colspan=\"5\">Rate Plan Charge</td> </tr> <tr> <th class=\"table439header\">RATE PLAN</th> <th class=\"table439header\">CHARGE</th> <th class=\"table439header\">QUANTITY</th> <th class=\"table439header\">EFFECTIVE PRICE</th> <th class=\"table439header\">TOTAL</th> </tr> <!--{{! <LineItemsSOQL> <class>table439</class> <ListName>QuoteRatePlanCharge__c</ListName> <soql>select id,zqu__QuoteRatePlan__r.Name,Name,zqu__Quantity__c, zqu__EffectivePrice__c, zqu__Total__c ,(select id,zqu__StartingUnit__c,zqu__EndingUnit__c,zqu__Price__c from zqu__Quote_RatePlan_Charge_Tier__r) from zqu__QuoteRatePlanCharge__c where zqu__QuoteRatePlan__r.zqu__Quote__c ='{{!ObjectID15}}'</soql> <column>zqu__QuoteRatePlan__r.Name</column> <column>Name</column> <column format-number=\"#,###.##\">zqu__Quantity__c</column> <column format-number=\"#,###.##\">zqu__EffectivePrice__c</column> <column format-number=\"#,###.##\">zqu__Total__c</column> </LineItemsSOQL> }}--> <tr> <td class=\"table439\" colspan=\"4\" style=\"text-align: right;\">Subtotal:</td> <td class=\"table439\">{{!zqu__Quote__c.zqu__Previewed_SubTotal__c}}</td> </tr> <tr> <td class=\"table439\" colspan=\"4\" style=\"text-align: right;\">Discount:</td> <td class=\"table439\">{{!zqu__Quote__c.zqu__Previewed_Discount__c}}</td> </tr> <tr> <td class=\"table439\" colspan=\"4\" style=\"text-align: right;\">Tax:</td> <td class=\"table439\">{{!zqu__Quote__c.zqu__Previewed_Tax__c}}</td> </tr> <tr> <td class=\"table439\" colspan=\"4\" style=\"text-align: right;\">TOTAL:</td> <td class=\"table981col0\">{{!zqu__Quote__c.zqu__Previewed_Total__c}}</td> </tr> </tbody> </table> <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"table439\" style=\"width: 100%;\"> <tbody> <tr> <td class=\"table439header1\" colspan=\"6\">TIER DETAILS</td> </tr> <tr> <th class=\"table439header\">RATE PLAN</th> <th class=\"table439header\">TIER</th> <th class=\"table439header\">START UNIT</th> <th class=\"table439header\">END UNIT</th> <th class=\"table439header\">DISCOUNT</th> <th class=\"table439header\">EFFECTIVE PRICE</th> </tr> <!--{{! <LineItemsSOQL> <class>table439</class> <ListName>QuoteCharge_Tier__c</ListName> <soql>select id,zqu__QuoteRatePlanCharge__r.Name,zqu__Tier__c, zqu__StartingUnit__c, zqu__EndingUnit__c, zqu__Effective_Price__c, zqu__Discount__c from zqu__QuoteCharge_Tier__c where zqu__QuoteRatePlanCharge__r.zqu__QuoteRatePlan__r.zqu__Quote__c ='{{!ObjectID15}}'</soql> <column>zqu__QuoteRatePlanCharge__r.Name</column> <column>zqu__Tier__c</column> <column format-number=\"#,###.##\">zqu__StartingUnit__c</column> <column format-number=\"#,###.##\">zqu__EndingUnit__c</column> <column format-number=\"#,###.##\">zqu__Discount__c</column> <column format-number=\"#,###.##\">zqu__Effective_Price__c</column> </LineItemsSOQL> }}--> </tbody> </table> S-Docs provides four levels of nesting render statements. This allows you to place conditions within other conditions. You can use nested render statements to achieve compound logic. Wrap Japanese text to the next line Long lines of text that do not have breakpoints, like spaces or dashes, such as long URLs, can not be wrapped by the PDF rendering service and may flow outside the page. You can fix this by adding the following code in the Template Body section: Thebreakeverynchars attribute adds a line break after a specified number of characters. Following is a sample code that uses breakeverynchars attribute:\n\n Word breaks should be inserted between any two characters (excluding Chinese/Japanese/Korean text) using CSS in the HTML template to prevent overflow. Following is the sample code: By default, when the number field has a negative value, it displays the value inside (). For example, If the value is -10, it will show (10). This can be fixed by setting the number format in the column. Following is an example:\n\n \n\n \n\n or\n\n Load conditional value based on SOQL column value A comma-delimited list of render conditions and output values will allow you to conditionally render values in your related list columns.\n• This feature is only supported with <lineitemsSOQL> statements\n• You must use <soql>...</soql> tags and include any field specified in your subsitute=\"...\" attributes in your SOQL query\n• Any tags inside of the column render (e.g. <span>) will need to have the <> characters escaped (lt#, gt#)\n• You should not specify a field between the <column></column> tags. Doing this may cause issues\n• You can use RECORD.Field_Name to use related list record data fields within the render=\"...\" attribute You can also use nested render statements: Multiple IF conditions based on SOQL column value Multiple if condition based on SOQL column value is not supported in S-Docs. Following is a workaround to overcome this limitation:\n• Create a parent template and add the following component template so that multiple if conditions can be used in the component template using column value from the parent template.\n• Add the following to the component template: <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 500px;\"> <tbody> <tr> <td style=\"width: 150px;\">{{!QuoteRatePlanCharge.name}}</td> <td style=\"width: 150px;\"> <pre> <!--RENDER='{{!QuoteRatePlanCharge.name}}'== 'New Component' --> Condition one true <!--ENDRENDER--> <!--RENDER='{{!QuoteRatePlanCharge.zqu__QuoteRatePlan__r.name}}'== 'second pp' --> Condition two true <!--ENDRENDER--> <!--RENDER='{{!QuoteRatePlanCharge.zqu__QuoteRatePlan__r.name}}'== 'second pp' && '{{!QuoteRatePlanCharge.name}}'== 'New Component' --> Both condition true <!--ENDRENDER--> </pre> </td> <td style=\"width: 150px;\">{{!QuoteRatePlanCharge.zqu__quantity__c #,###}}</td> <td style=\"width: 150px;\">{{!QuoteRatePlanCharge.zqu__effectiveprice__c #,###}}</td> </tr> </tbody> </table> Align the column with the table header When you create a table in the parent template and fetch data using the component template, the columns are not aligned. Following is the workaround to align the columns with the table header.\n• Add a column ‘rownum’ like “<column componentMergeField=\"true\">rownum</column>” in the parent template.\n• Add the following logic to skip the table in the component template so that the rest of the columns can align with the parent template header. Following is an example code for the parent template: Following is an example code for the component template: <!--RENDER='{{!prefix2.rownum}}'== '0' --> <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"width: 100%;\"><!-- ENDRENDER--> <tbody> <tr> <td style=\"font-size: 14px;text-align: center;padding: 2px 2px;white-space: normal;word-wrap:break-word;font-weight: normal;\">{{!prefix2.zqu__QuoteRampInterval__r.name}}</td> <td style=\"font-size: 14px;text-align: center;padding: 2px 2px;white-space: normal;word-wrap:break-word;font-weight: normal;\"> <pre> <!--RENDER='{{!prefix2.zqu__QuoteRatePlanCharge__r.name}}'!= 'New Component' --> Condition one true <!--ENDRENDER--> <!--RENDER='{{!prefix2.zqu__QuoteRatePlanCharge__r.name}}'== 'second pp' --> Condition two true <!--ENDRENDER--> <!--RENDER='{{!prefix2.zqu__QuoteRatePlanCharge__r.name}}'== 'second pp' && '{{!prefix2.zqu__QuoteRatePlanCharge__r.name}}'== 'New Component' --> Both condition true <!--ENDRENDER--> </pre> </td> <td style=\"font-size: 14px;text-align: center;padding: 2px 2px;white-space: normal;word-wrap:break-word;font-weight: normal;\">{{!prefix2.zqu__QuoteRatePlanCharge__r.name}}</td> <td style=\"font-size: 14px;text-align: center;padding: 2px 2px;white-space: normal;word-wrap:break-word;font-weight: normal;\">{{!prefix2.zqu__TCB__c}}</td> </tr> </tbody> <!--RENDER='{{!prefix2.rownum}}'== '0' --> </table> <!--ENDRENDER-->"
    },
    {
        "link": "https://salesforce.stackexchange.com/questions/236197/how-to-query-many-master-lookup-relationship",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://salesforceben.com/admins-guide-to-salesforce-soql",
        "document": "There are multiple ways to retrieve Salesforce information, varying in complexity and general use. While searching for records one by one, building a simple Salesforce report, or even navigating through Setup to check a permission set’s field access, are all tasks that Salesforce Admins are familiar with. SOQL (Salesforce Object Query Language) is here to make everyone’s life several times easier.\n\nLet’s dive deep into a few uses of SOQL and how you can ultimately leverage it to optimize daily activities as a Salesforce Admin or Consultant.\n\nFirst of all, what exactly is SOQL? The term stands for Salesforce Object Query Language, and it is a way in which you can quickly retrieve information from Salesforce. In this context, information refers to Salesforce data, such as records and their field values.\n\nWhile Salesforce Developers will mainly use queries within their Apex classes, SOQL can help Salesforce Admins with day-to-day tasks in a similar way to reports, but without the need to select the right report type, double-check if the needed fields are there, or create a custom report type. SOQL queries do not replace Salesforce reports by any means, especially when it comes to what users need to see. It is definitely up to you to choose when a sharable report makes more sense than running a query to get to the data you need.\n\nYou can choose where to work with SOQL, as while it’s the same functionality being used, there are several tools to choose from depending on the experience you prefer. Let’s go through the most popular ones you might have already heard about:\n• Firstly, the native Developer Console Query Editor can be a quick option. You simply have to click the Setup wheel, and it will open in a new window, which you can close when done. As you execute your queries, the last ten of them will be visible in the panel on the right side, while any errors will be displayed below the query.\n• Another well-known option is to use Workbench. While this is not an official Salesforce tool, it is already a step up in the experience department. It offers the option to simply select the object you’d like to query from a drop-down, continue by selecting one or multiple fields, then sorting and filtering – all without having to write anything. Additionally, you don’t have to worry about how to export the results, as there are a few viewing options available, including Bulk CSV, which allows you to download a file with all your data.\n• Perhaps the option that quite a few Salesforce professionals prefer nowadays is the Salesforce Inspector Reloaded Chrome extension. Evolved from the OG Salesforce Inspector, which you most likely already know and love, Inspector Reloaded offers new functionality and is actively maintained. Through the Data Export option, which opens up the query editor, this extension makes it easy for anyone to build and execute SOQL, with readily available templates, automatic suggestions of field names and objects, and the option to quickly delete records if that’s what you’re looking for – just to name a few.\n\nBefore getting started, what you need to know is that a query is composed of two or three elements:\n• The clause (optional). Once again, similar to a Salesforce report, you would ideally use the clause to add filters, so you don’t retrieve all the records unless you deliberately want to.\n\nA simple SOQL query would look something like this:\n\nIf we use the same example with the Account fields and filter on BillingCountry, the results will be in the format of a table, with the fields you choose to add after the statement as the columns.\n\nQueries are by no means limited to standard objects, so feel free to experiment with custom objects as well! Make sure to choose the tool that makes the most sense for you when using SOQL. In this article, I will be executing the queries in the Salesforce Inspector Reloaded Chrome extension.\n\nIf you also choose to continue with Inspector Reloaded, you will surely notice that if you access the Data Export button to reach the query editor from any Salesforce record, the editor will already contain a basic query filtered by the record Id from the page you were on. As you continue working with SOQL, this feature will surely come in handy and save you a bit of time in certain scenarios.\n\nNote: is just one of the available optional clauses you can leverage. If you’d like to find out more about the others, how they can be used, and what limits to consider, check out the article linked below.\n\nNow that we’ve covered the basics, let’s dive into a few common use cases where SOQL queries are sure to become your best friend.\n\nUse SOQL to Avoid Wait Time on Reports\n\nChances are that one of the reasons you, as a Salesforce professional, will resort to using SOQL is the speed at which you can get to the data you’re looking for. While Salesforce reports are great and have their specific use cases, sometimes waiting several minutes for the results to load may be less than ideal.\n\nField History Tracking is a well-known functionality in Salesforce that allows you to flag up to 20 individual fields per object (with a few considerations). This feature allows you to track who changed these fields, when they were changed, and what were the values. While the changes are available in a related list on records, chances are you will run a report rather than manually check records. The thing is that these reports may have a lot of data and are notoriously slow to load.\n\nSOQL can speed this up with a simple query, but of course, from a performance perspective, it is recommended to filter these query results as well. In this example, I wanted to see how and if the Industry field was changed on the accounts. Additional fields, depending on the scenario at hand, can be added, such as CreatedById and CreatedDate to get the most out of your results.\n\nAdditional filters should always be considered if you’re expecting a large number of rows, and history tables are well known for having a lot of information since changes happen every day.\n\nDate filters and date literals can be especially useful and easy to use in this scenario, especially if you know that a change was mistakenly made earlier today, for example. Also, notice the formatting difference in comparison to the first screenshot. Similar to formulas, organizing your query in an easy-to-read manner can make a huge difference.\n\nRelationship queries are a game changer when it comes to using SOQL to retrieve data, as they allow you to easily tap into fields or information that is on other records related to the object you’re querying on.\n\nIf your organization uses leads, chances are you have some sort of lead-to-account matching process in place based on different criteria. The easiest out of the relationship queries is the child-to-parent one, as you can use the relationship name, followed by a dot, and the name of the field from the related parent record.\n\nIn this situation, the Relationship field is also a custom one, so we will add the suffix before the dot to obtain the name of the account that the lead was matched to. Once again, don’t forget about the filters, and note that even in the clause, the child-to-parent relationship can be used to narrow down the results based on account information.\n\nRemember that the suffix has to be appended after the relationship name, as not doing so will result in an error. Luckily, the error in this situation clearly points to the incorrect relationship reference, so after checking either the suffix or relationship name, you should be good to go.\n\nIt is also possible to query records the other way around – through the use of a parent-to-child relationship query. This option is quite different as subqueries are being used alongside the child relationship name you defined, if you’re using custom relationship fields, as we do in this scenario with the lead-to-account matching.\n\nFor this type of query, I prefer using Workbench instead of Inspector Reloaded, given the table-like view in which the query results are generated. This makes it much easier to understand, especially in the beginning. The goal is to retrieve leads matched to an account whose name contains the word “Pyramid”. The clause can easily be used for strings, and as you might have guessed, it is the equivalent of a “Contains” filter in a report. With the help of this query, what could have taken a few minutes and a custom report type became a matter of seconds.\n\nSimilarly to the above example for leads, you can apply the same logic for both standard or custom objects across your organization, such as retrieving opportunities and quotes related to an account or perhaps contacts that have a certain role. Depending on your use case, one of the two types of relationship queries is sure to be of help.\n\nAnother way to enhance how you get information with SOQL is the keyword. This is meant for situations when you don’t know the name of the fields to be selected for the records, offering a great way to explore the org without having to click through every single object in Setup.\n\nThe available options for this keyword are , which retrieves all fields for the selected records, , which can be used to include custom fields only (both have to also include a limit of 200 rows), and which includes all standard fields. Depending on which one you decide to use, you can also combine it with other fields declared individually, but make sure that there is no overlap.\n\nIn the example below, we retrieved the Account name and up to 200 of the custom fields from the Account object.\n\nA quick way to get past the 200 limit that FIELDS (All) and FIELDS (Custom) impose, is to leverage the built-in Salesforce Inspector Reloaded functionality, which automatically pulls in the query editor for all standard or custom fields. For example, if you type the query below, and use the control + spacebar keyboard shortcut while your cursor is between SELECT and FROM, all fields will be added to your query automatically. Alternatively, you can also type __c and use the shortcut if you’re only looking for the custom fields.\n\nIt may come as no surprise that while SOQL is great for retrieving data from the objects your users work with, it can also be used to surface key information, which all Salesforce Admins should be aware of – especially when it comes to field permissions.\n\nWhile Salesforce has made significant improvement when it comes to seeing the permissions included in a permission set or the field permissions of a given user through the View Summary buttons, one question remains: if a user has multiple permission sets assigned, how do you know exactly which one contains read or write access to each field?\n\nBy querying the FieldPermissions standard object, you can quickly find out exactly from which permission set the permissions originate. Even though Salesforce has delayed the ‘full’ transition to permission sets, if you have started migrating to a base profile and tailored permission sets model, chances are that this question will come up quite often. The below query is sure to save a significant amount of time.\n\nAdditionally, the results include both permission sets and permission set groups, in case you would like to cross-check against the assignments since some users may have the permission set directly assigned while others may have a group containing the permission set which had the edit permissions for the field.\n\nIf your org has multiple currencies enabled and you’re ever in need of converting any currency field to the running user’s currency, look no further than the function! Even though it is a very specific use case, knowing about this function may come in handy for third-party integrations or even situations in which you need to quickly obtain the converted amounts to answer a question.\n\nNote: Trying this query before enabling multiple currencies will result in an error, so make sure that you already have the functionality enabled alongside the different conversion rates.\n\nUsing SOQL to simply retrieve data is awesome and, by far, quicker than using reports through the UI, but the output doesn’t always have to be simply raw data, which you can further manipulate in Excel or other tools. Most importantly, you don’t have to lose functionality just because you opt for SOQL to access record information.\n\nSome of the simplest optional clauses you will quickly get accustomed to are and . In a scenario where you would like to get only a few records and order them based on a date field, these clauses come into play. In this example, we want to retrieve the last five leads created in the org that have not yet been converted, order them by their creation date in a descending manner, and limit the number of results to display only five records.\n\nWhile sorting in reports may or may not be used, more often than not, Salesforce reports contain at least one grouping to easily read the information. The optional clause can help you group your results in an organized manner by a field’s value, while the aggregate function returns the number of records that have a value in the field of your choice. Generally, the Id is used for the count as all Salesforce records will surely have a unique Id. The query below is to return the total number of leads which match the filters grouped by their status.\n\nAs you’ll notice in the results below, such queries can also help you quickly check that the data is correct, as ideally, there shouldn’t be any closed-converted leads where is false, right?\n\nAlternatively, If you also need a grant total row, as well as multiple subtotals, SOQL has you covered! is another optional clause that you can use instead of to obtain even more information when reviewing the output of your query, especially where the grouping is done by multiple fields, and subtotals would be nice to have.\n\nWhile this is not a use case per se, whether you’ve been working with SOQL queries for a while or you’re just getting started, you might not want to rely on a notepad to store the ones you frequently use. While over time, you will know the syntax by heart, with new fields and objects constantly being created in your org, there is no need to remember them all when Salesforce Inspector Reloaded exists.\n\nWhen using the Data Export feature from this Chrome extension, not only can you write your queries from scratch and get object and field suggestions as you type, but you can also just as easily save any query that you write so you don’t have to write it again next time.\n\nFor example, if you’re using Sales Territories in your org, accessing them can be quite cumbersome. By saving the query below, you can rapidly just replace the territory name with the one you’re looking for and click on the Id to open it in Salesforce. While this is one of the simpler examples, it’s definitely one to save quite a bit of time.\n\nFinally, if you haven’t already started with SOQL, there’s no time like now! Our dedicated Introduction to the SOQL course includes everything you might need: instructor-led videos, multiple examples and exercises, as well as all the considerations and best practices you should be aware of.\n\nWith the ability to access Salesforce data lightning-fast, easily filter and group records across different objects and scenarios, this skill is sure to future-proof your toolkit."
    },
    {
        "link": "https://trailhead.salesforce.com/trailblazer-community/feed/0D54V00007T42VASAZ",
        "document": ""
    },
    {
        "link": "https://knowledgecenter.zuora.com/Zuora_Platform/Data/Data_Query/BA_SQL_Queries_in_Data_Query",
        "document": ""
    },
    {
        "link": "https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql_relationships_query_using.htm",
        "document": ""
    },
    {
        "link": "https://grazitti.com/blog/optimize-custom-codes-with-soql-queries",
        "document": "You must be familiar with basic SQL, a database programming language used to retrieve data from database.Working with SOQL is not much different. Salesforce’s official object query language lets you access records in your Salesforce database with simple and powerful query strings. These query strings can be used in:\n\n[/vc_column_text][vc_column_text]SOQL uses the SELECT statement combined with filtering statements to retrieve results from databases. As a case insensitive language, it allows you write queries in Uppercase, Lowercase or both.\n\nWHERE filter statement(s) and (optionally) order the results\n\nSome of the latest features in SOQL:\n\nHere is the list of new SOQL features introduced by Salesforce in the past one year:\n\nYou can use USING SCOPE clause to return records within a specified scope. It provides query filtering that lets you limit results with filterScope.\n\nIn this case ‘Mine’ will return everything that the logged in user owns. Other values that can be used in place of ‘Mine’ are Everything, Queue, Delegated, MyTerritory, MyTeamTerritory or Team.\n\nYou can use location and distance variables in binding expression that lets you reference Apex variables in SOQL and SOSL queries preceded by a colon(:).\n\nTo have a better understanding of the GeoLocation field, click here.\n\nLet’s try to find all the accounts whose head offices are located within 5 miles of my current location. To achieve this, use your current location’s latitude and longitude as apex bind variable in SOQL query.\n\nIn my account object, create one custom field of type Geolocation with the name “Office Location” (API Name: Office_Location__c).\n\nThe “DISTANCE” and “GEOLOCATION” function works as given below:\n\nYou can submit Apex jobs by performing SOQL queries on AsyncApexJob by filtering on the job ID that System.enqueueJob method returns.\n\nYou can use nested semi-joins for the TopicAssignment object to allow queries on Knowledge articles assigned to specific topics.\n\nSELECT parentId FROM KnowledgeArticleViewStat WHERE parentId in (SELECT KnowledgeArticleId FROM KnowledgeArticleVersion WHERE publishStatus = ‘Online’ AND language = ‘en_US’ AND Id in (select EntityId from TopicAssignment where\n\nYou can include COUNT() in SOQL queries for external objects:\n• By including total row count that’s determined after any $filter system query options\n\nFor more details about $inlinecount and $filter check this link\n\n6. Indexed Column added to lists of fields in Setup\n\nYou can add Indexed Column in Setup to indicate indexed field in the database.\n\nFilter conditions in reports, list views, and SOQL queries target indexed fields for better response time.\n\n7. Speed up queries with the Query Plan Tool\n\nYou can speed up SOQL queries with the Query Plan Tool available in the developer console.\n\nTo use the tool you can enter your query and click the Query Plan button in the Query Editor. The Query Plan window displays all query operations and the cost of each.\n\nSOQL is a tool that lets you access records in your Salesforce database. Here’s a list of benefits that Salesforce Object Query Language provides:\n• Accessing records that aren’t available in trigger\n\nSOQL does not allow you to:\n• run query for more than 120 seconds\n\nWant to implement these features?\n\nSalesforce, Salesforce Object Query Language,Service Cloud, Sales Cloud, Marketing Cloud, Community Cloud, Analytics Cloud, Wave, SFDC, Salesforce Communities, etc. are all trademarks of Salesforce.com Inc."
    },
    {
        "link": "https://help.salesforce.com/s/articleView?id=sf.c360_a_calculated_insights_nested_sql_functions.htm&language=en_US&type=5",
        "document": ""
    }
]