[
    {
        "link": "https://cesium.com/learn/ion-sdk/ref-doc/ScreenSpaceEventHandler.html",
        "document": "The amount of time, in milliseconds, that mouse events will be disabled after receiving any touch events, such that any emulated mouse events will be ignored.\n\nThe amount of time, in milliseconds, before a touch on the screen becomes a touch and hold.\n\n\n\n\n\n Once an object is destroyed, it should not be used; calling any function other than will result in a ) to the object as done in the example. Removes listeners held by this object.Once an object is destroyed, it should not be used; calling any function other thanwill result in a exception. Therefore, assign the return value () to the object as done in the example.\n• : This object was destroyed, i.e., destroy() was called. : This object was destroyed, i.e., destroy() was called.\n\nReturns the function to be executed on an input event.\n\nThe function to be executed on an input event.\n\nif this object was destroyed; otherwise, .\n\nRemoves the function to be executed on an input event.\n\nSet a function to be executed on an input event.\n\nAn Event that starts at one position and ends at another.\n\nAn Event that occurs at a single position on screen.\n\nAn Event that occurs at a two positions on screen.\n\nAn Event that starts at a two positions on screen and moves to two other positions."
    },
    {
        "link": "https://cesium.com/downloads/cesiumjs/releases/1.18/Build/Documentation/ScreenSpaceEventHandler.html",
        "document": "Handles user input events. Custom functions can be added to be executed on when the user enters input.\n\n\n\n\n\n Once an object is destroyed, it should not be used; calling any function other than will result in a ) to the object as done in the example. Removes listeners held by this object.Once an object is destroyed, it should not be used; calling any function other thanwill result in a exception. Therefore, assign the return value () to the object as done in the example.\n• : This object was destroyed, i.e., destroy() was called. : This object was destroyed, i.e., destroy() was called.\n\nReturns the function to be executed on an input event. A KeyboardEventModifier key that is held when a event occurs.\n\n\n\n\n\n If this object was destroyed, it should not be used; calling any function other than will result in a Returns true if this object was destroyed; otherwise, false.If this object was destroyed, it should not be used; calling any function other thanwill result in a exception. if this object was destroyed; otherwise, .\n\nRemoves the function to be executed on an input event. A KeyboardEventModifier key that is held when a event occurs.\n\nSet a function to be executed on an input event. Function to be executed when the input event occurs. A KeyboardEventModifier key that is held when a event occurs."
    },
    {
        "link": "http://osgl.grf.bg.ac.rs/cesium/Build/Documentation/ScreenSpaceEventHandler.html",
        "document": "Handles user input events. Custom functions can be added to be executed on when the user enters input. The element to add events to.\n\nThe amount of time, in milliseconds, that mouse events will be disabled after receiving any touch events, such that any emulated mouse events will be ignored.\n\n\n\n\n\n Once an object is destroyed, it should not be used; calling any function other than will result in a ) to the object as done in the example. Removes listeners held by this object.Once an object is destroyed, it should not be used; calling any function other thanwill result in a exception. Therefore, assign the return value () to the object as done in the example.\n• : This object was destroyed, i.e., destroy() was called. : This object was destroyed, i.e., destroy() was called. Returns the function to be executed on an input event. A KeyboardEventModifier key that is held when a event occurs. \n\n\n\n If this object was destroyed, it should not be used; calling any function other than will result in a Returns true if this object was destroyed; otherwise, false.If this object was destroyed, it should not be used; calling any function other thanwill result in a exception. if this object was destroyed; otherwise, . Removes the function to be executed on an input event. A KeyboardEventModifier key that is held when a event occurs. Set a function to be executed on an input event. Function to be executed when the input event occurs. A KeyboardEventModifier key that is held when a event occurs."
    },
    {
        "link": "https://resium.reearth.io/components/ScreenSpaceEventHandler",
        "document": "can change event callbacks for mouse or touch interactions on the Viewer or CesiumWidget. components can be its children.\n\nScreenSpaceEventHandler can be mounted insideViewer or CesiumWidget components. ScreenSpaceEventHandler components with useDefault prop can not be mounted more than once for each Viewer or CesiumWidget."
    },
    {
        "link": "https://github.com/Gaia3D/magojs-cesium/blob/main/CHANGES.md",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://cesium.com/learn/ion-sdk/ref-doc/PostProcessStageLibrary.html",
        "document": "This stage has one uniform value, gradations , which scales the luminance of each pixel.\n\nCreates a post-process stage that renders the input texture with black and white gradations.\n\nA post-process stage that renders the input texture with black and white gradations.\n\nCreates a post-process stage that applies a Gaussian blur to the input texture. This stage is usually applied in conjunction with another stage.\n\nThis stage has the following uniforms: , , and .\n\nand are used to compute the weights of a Gaussian filter. The equation is . The default value for is . The default value for is . is the distance to the next texel. The default is ."
    },
    {
        "link": "https://cesium.com/downloads/cesiumjs/releases/1.47/Build/Documentation/PostProcessStageLibrary.html",
        "document": "This stage has one uniform value, gradations , which scales the luminance of each pixel.\n\nCreates a post-process stage that renders the input texture with black and white gradations.\n\nA post-process stage that renders the input texture with black and white gradations.\n\nCreates a post-process stage that applies a Gaussian blur to the input texture. This stage is usually applied in conjunction with another stage.\n\nThis stage has the following uniforms: , , and .\n\nand are used to compute the weights of a Gaussian filter. The equation is . The default value for is . The default value for is . is the distance to the next texel. The default is ."
    },
    {
        "link": "http://zgeo.work/cesiumTx/Documentation/PostProcessStageLibrary.html",
        "document": "This stage has one uniform value, gradations , which scales the luminance of each pixel.\n\nCreates a post-process stage that renders the input texture with black and white gradations.\n\nA post-process stage that renders the input texture with black and white gradations.\n\nCreates a post-process stage that applies a Gaussian blur to the input texture. This stage is usually applied in conjunction with another stage.\n\nThis stage has the following uniforms: , , and .\n\nand are used to compute the weights of a Gaussian filter. The equation is . The default value for is . The default value for is . is the distance to the next texel. The default is ."
    },
    {
        "link": "https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance",
        "document": "By default, Cesium renders new frames as a game engine does: regularly, at the target frame rate. While this works well for Cesium apps with dynamic data or that constantly stream data for new views, many Cesium apps can benefit from rendering less frequently. Rendering a new frame uses CPU resources and is often not necessary if your app is idle. Improved performance with explicit rendering means you can run Cesium apps without worries of kicking your laptop fan into high gear or draining battery life on mobile devices.\n\nStarting with Cesium 1.42, a new opt-in explicit rendering mode allows the developer to precisely control the rendering in Cesium based on the needs of the application. When enabled, a new frame will be rendered only in the following scenarios:\n• The camera changes, either with user input or with the Cesium API.\n• The simulation time advances beyond a specified threshold.\n• Loading in terrain, imagery, 3D Tiles, or data sources, including each individual tile load. At a lower level, this is triggered when a web request is resolved via a URI or blob, or an asynchronous process returns from a web worker.\n• A frame is explicitly rendered with the Cesium API.\n\nThis covers a lot of the bread and butter functionality that Cesium is commonly used for, such as loading in terrain, imagery, and data like 3D Tiles. For more fine-tuned changes to the scene, instead of watching for every update that might require a render, this is left up to the application. If the app makes changes to the scene or its contents through the Cesium API in a way that is not covered by one of the above cases, for example, using the Entity or Primitive API, then explicitly request a new render frame.\n\nWhen explicit rendering mode is enabled and changes are made to the scene, rendering occurs as normal at the target frame rate. However, when Cesium is idle, CPU usage is greatly reduced. For instance, using Chrome developer tools, CPU usage in an idle Cesium scene averaged 25.1%, but after enabling the performance improvement, it now averages 3.0%. This was measured on a laptop with an Intel i7 processor, running in Google Chrome."
    },
    {
        "link": "https://community.cesium.com/t/optimizing-cesium-tile-display-performance/11194",
        "document": "mbtiles utility, renderer, and storage backend for tilelive - GitHub - mapbox/node-mbtiles: mbtiles utility, renderer, and storage backend for tilelive"
    },
    {
        "link": "https://mdpi.com/2076-3417/15/2/801",
        "document": "4,5,8,9, With the construction of smart cities, 3D GIS technology has undergone rapid development [ 1 ], leading to the emergence of many excellent 3D GIS engines in the industry. Cesium is a fully open-source 3D GIS engine for Earth and image visualization, officially released in August 2014 [ 2 ]. It is a relatively young WebGL-based library for visualizing spatial information, supporting 3D, 2.5D, and 2D display formats with full capabilities for visualizing Earth surface images and terrain. Complete open-source support, comprehensive official case study tutorials, and a straightforward development methodology have made Cesium a popular spatial information visualization platform in just a few years. It has achieved remarkable success in important fields such as urban planning, digital cities, and urban transportation [ 3 6 ]. However, Cesium engine still faces the challenges of many rendering parameters, type differences, and long rendering time when rendering 3DTiles model data [ 7 10 ]. In recent years, many scholars have begun to study the 3DTiles model rendering parameters provided by Cesium. According to the idea of optimizing the rendering parameters of Cesium 3DTiles, the existing studies can be classified into two categories: increasing the maximum screen space error and optimizing the 3DTiles rendering strategy. Wang Hengwei [ 11 ] and He Chengwei [ 12 ] et al. successfully shortened the rendering time of the 3DTiles model by increasing the maximum screen space error, but the increase in the maximum screen space error reduced the rendering time of the 3DTiles model. However, increasing the maximum screen space error reduces the rendering quality of the model. Therefore, many scholars have chosen to reduce the rendering time by tuning the parameters to optimize the rendering strategy of 3DTiles. Huang Xinran et al. manually optimized three rendering parameters and summarized a progressive loading on demand strategy to realize the fast rendering of the overall scene of the 3DTiles model [ 13 ]. Zhuorong Song et al. illustrated that when Cesium renders the 3DTiles model, it can jump traverse the tiles with a screen error that is smaller than the base screen space error until it finds the tile with a screen error that is smaller than the maximum screen space error. They pointed out that the value of base screen space error can be adjusted according to the 3DTiles model, which can effectively reduce the amount of data and rendering time [ 14 ]. Both parameter optimization methods use manual tuning, but the manual tuning method is time-consuming and labor-intensive, and the optimization results are less accurate. Additionally, all current studies have only tuned a limited set of parameters and failed to account for the synergistic effects between them, and the optimization process overlooks the differences between parameter types. In this paper, in order to find the optimal values of rendering parameters of 3DTiles model provided by Cesium, which is faced with the problems of many rendering parameters, both continuous and discrete variables, as well as the existence of constraints on the values and conditions of the parameters, we proposed a multi-strategy probabilistic discrete differential evolution algorithm (MSPDDE). This algorithm adopts multiple mutation strategies to make full use of the advantages of various mutation strategies, taking into account the quality of the solution and convergence speed and reducing the probability of the algorithm falling into local optimality due to the large number of rendering parameters. At the same time, the MSPDDE algorithm adopts a probabilistic discretization strategy to deal with the illegal discrete parameter values of the mutated individuals so that the algorithm has the ability to deal with mixed-variable optimization problems. Experimentally verified in three different sizes of 3DTiles model cases, the rendering time of 3DTiles model using the optimal parameter configuration found by the MSPDDE algorithm is significantly lower than the default parameter configuration of Cesium and experimentally proved that the mutation strategies pool and probabilistic discretization strategy of the MSPDDE algorithm can help the algorithm to find the optimal values of rendering parameters effectively.\n\nCesium provides a total of 21 rendering parameters for 3DTiles model [ 15 ]; in order to ensure that the rendering quality of the 3DTiles model remains unchanged, this paper will set the parameter “maximumScreenSpaceError” to a fixed value of 16 [ 16 ], so there are 20 rendering parameters to be optimized, including 10 discrete variable parameters and 10 continuous variable parameters, which have value and condition constraints, and all the rendering parameters to be optimized are described in Table 1 . Therefore, this parameter optimization problem is defined as a mixed-variable optimization problem with constraints. In this paper, the short rendering time of the 3DTiles model is the goal, and the following is the description of this optimization problem. can be expressed as a 20-dimensional vector ( 1, 2, , 20) containing 20 variables. where represents the jth-dimension vector of the solution, i.e., the value of the jth parameter to be optimized; and represents the upper and lower bounds of the jth-dimension vector, respectively. Definition 1 (form of solution): The optimization problem has 20 parameters to be optimized, and each parameter can take a certain range of real or integer values; then, its solutioncan be expressed as a 20-dimensional vector (1,2,20) containing 20 variables.whererepresents the jth-dimension vector of the solution, i.e., the value of the jth parameter to be optimized;andrepresents the upper and lower bounds of the jth-dimension vector, respectively. where represents the jth-dimension vector of the solution, i.e., the value of the jth parameter to be optimized; and represents the upper and lower bounds of the jth-dimension vector, respectively; → represents that is valid only if is true. Definition 2 (variable constraints): Variables are mainly subject to two kinds of constraints, value and condition; each variable has a range of values, and some variables have the condition constraint that variable A is true for variable B to take effect [ 15 ]. The constraint equations are as follows:whererepresents the jth-dimension vector of the solution, i.e., the value of the jth parameter to be optimized;andrepresents the upper and lower bounds of the jth-dimension vector, respectively;represents thatis valid only ifis true. denotes the rendering time of the 3DTiles model under solution . The optimization objective function can be established as shown in Equation (3): where is the current solution; is the 3DTiles model rendering time under the current solution; short rendering time is the optimization objective, i.e., the smaller the , the closer the currently obtained solution is to the optimal solution. Definition 3 (rendering time): Definitiondenotes the rendering time of the 3DTiles model under solution. The optimization objective function can be established as shown in Equation (3):whereis the current solution;is the 3DTiles model rendering time under the current solution; short rendering time is the optimization objective, i.e., the smaller the, the closer the currently obtained solution is to the optimal solution. of this optimization problem, the higher the fitness; the fitness function can be established as shown in Equation (4): where is the current solution; is the 3DTiles model rendering time under the current solution; is the fitness value of the current solution . Definition 4 (fitness function): The smaller the objective function valueof this optimization problem, the higher the fitness; the fitness function can be established as shown in Equation (4):whereis the current solution;is the 3DTiles model rendering time under the current solution;is the fitness value of the current solution\n\nIn order to solve the 3DTiles model rendering parameter optimization problem, this paper proposed the MSPDDE algorithm. This section focuses on the main operations and the overall flow of the MSPDDE algorithm. Differential Evolution (DE) was proposed by Storn and Price in 1997 [ 17 ]. DE is a stochastic and population-based heuristic search algorithm that simulates the biological evolutionary process to finally obtain the best individuals by the full utilization of individual differences and iterative evolution [ 18 ]. The MSPDDE algorithm is based on the idea of DE algorithms. The framework of MSPDDE algorithm is shown in Figure 1 , which mainly contains seven operations of initializing population, fitness assessment, mutation, discretization, crossover, selection, and judgment termination. Among them, the MSPDDE algorithm differs from the DE algorithm in the following two aspects: firstly, the mutation operation uses the mutation strategy pool, and secondly, a new probabilistic discretization operation is added after the mutation operation. In the following, the five steps of initializing the population, fitness evaluation, crossover, selection, and judgment termination are mainly introduced, and the mutation and discretization operations will be described in detail in the next two sections of this chapter. -dimensional vectors [ -dimensional vector is an individual and a solution to the problem. The MSPDDE algorithm initializes the population of individuals real-valued encoding can be defined as in Equation (5), and integer-valued encoding and Boolean encoding can be defined as in Equation (6), where Boolean encoding 1 stands for true and 0 stands for false. where is the jth dimensional vector of the ith individual of the population of generation 0; and denote the upper and lower bounds of the jth dimensional vector, respectively; [0,1] is to return a random number between 0 and 1; express a rounding function; indicates population size. Initialize Population. The general population consists of-dimensional vectors [ 19 ], and each-dimensional vectoris an individual and a solution to the problem. The MSPDDE algorithm initializes the population of individuals real-valued encoding can be defined as in Equation (5), and integer-valued encoding and Boolean encoding can be defined as in Equation (6), where Boolean encoding 1 stands for true and 0 stands for false.whereis the jth dimensional vector of the ith individualof the population of generation 0;anddenote the upper and lower bounds of the jth dimensional vector, respectively;[0,1] is to return a random number between 0 and 1;express a rounding function;indicates population size. Fitness Evaluation. The fitness evaluation is mainly to provide a screening basis for the selection operation. Mainly, each individual is encoded and decoded into a rendering parameter value to be input into the Cesium engine, which determines whether the parameter value conforms to the constraint equation in Equation (2). If the individual satisfies the constraints, the 3DTiles model is rendered using that individual, and the rendering time is returned at the end of the rendering. If the individual does not satisfy the constraints or the rendering fails, the absolutely large number is returned. The fitness of each individual can then be obtained according to Equation (4). where is the jth dimensional vector of the ith test individual; is the jth dimensional vector of the ith variant individual; is the jth dimensional vector of the ith target individual; [0,1] is to return a random number between 0 and 1; is crossover probability; is a random integer between 1 and 20. Crossover. The main purpose of the crossover operation is to maintain the diversity of the population by generating test individuals by recombining the target individuals with the variant individuals through crossover recombination [ 20 ], and the MSPDDE algorithm uses a binomial crossover strategy as shown in Equation (7):whereis the jth dimensional vector of the ith test individual;is the jth dimensional vector of the ith variant individual;is the jth dimensional vector of the ith target individual;[0,1] is to return a random number between 0 and 1;is crossover probability;is a random integer between 1 and 20. where represents the ith target individual of the kth generation; represents the ith experimental individual of the kth generation; represents the fitness value of individual . Selection. In order to ensure that the population size remains constant in the offspring, the individuals within the population need to be selected. The MSPDDE algorithm adopts the idea of greedy strategy and selects the one with high fitness between the test individuals and the target individuals as the next generation of individuals as shown in Equation (8):whererepresents the ith target individual of the kth generation;represents the ith experimental individual of the kth generation;represents the fitness value of individual Judgment Termination. It is judged whether the difference in the rendering time (RT) of the best individual of five consecutive generations of the population is within 3% or whether the maximum number of iterations has been reached; if yes, then the best individual of the current population and its rendering time are output; if no, the above steps are repeated. but are prone to fall into local optimality [23,24, The mutation operation is mainly used to generate new individuals [ 21 ], and the four commonly used mutation strategies are DE/rand/1, DE/rand/2, DE/best/1, and DE/best/2, as shown in Equation (9). DE/rand/1 and DE/rand/2 are able to better search for the optimum in the whole search space, but the convergence speed is slower, and DE/best/1 and DE/best/2 are able to converge quickly due to the orientation ofbut are prone to fall into local optimality [ 22 25 ]. to generate a mutated individual [26, where is the ith mutant individual; , , , and are different target individuals in the population; is the best individual in the current population; is mutation scaling factor; is the jth dimensional vector of the ith variant individual; [0,1] is a random number between 0 and 1; and denote the upper and lower bounds of the jth dimensional vector, respectively. In this paper, when the feasible solutions of parameter optimization problems have more dimensions and are not continuous, it is difficult to take into account both global search and convergence speed. In order to reduce the probability of the algorithm falling into local optimality and to accelerate the convergence speed, MSPDDE utilizes four mutation strategies to construct a pool of mutation strategies. The mutation operation of MSPDDE is divided into two steps: the first step randomly selects a mutation strategy from the pool of mutation strategies to mutate each target individualto generate a mutated individual 27 ]; the second step performs an out-of-bounds check on the mutated individuals, and the second step checks the mutated individuals for out-of-bounds [ 28 ]. If the boundary is violated, then repair according to Equation (10).whereis the ith mutant individual;, andare different target individuals in the population;is the best individual in the current population;is mutation scaling factor;is the jth dimensional vector of the ith variant individual;[0,1] is a random number between 0 and 1;anddenote the upper and lower bounds of the jth dimensional vector, respectively. of the discrete individual generated by the discretization operation is as follows: where is the jth dimensional vector of the ith variant individual; [0,1] is to return a random number between 0 and 1; and are the kth and k + 1st elements in the available discrete set for the jth dimensional vector arranged from smallest to largest, respectively; and is between and . After the mutation operation, the discrete variable values of the mutated individuals may be illegal floating-point numbers within the boundaries, so they need to be discretized and repaired to legal integer values [ 29 ]. The MSPDDE algorithm uses a probabilistic discretization strategy. For example, the repair method for the jth dimension vectorof the discrete individualgenerated by the discretization operation is as follows:whereis the jth dimensional vector of the ith variant individual;[0,1] is to return a random number between 0 and 1;andare the kth and k + 1st elements in the available discrete set for the jth dimensional vector arranged from smallest to largest, respectively; andis betweenand As can be seen from Equation (11), the discretization method of MSPDDE transforms the distance from to both and into the probability of repairing to both: the closer the distance to one of them, the higher the probability of repairing to that value, but there is still a (1 − ) probability of repairing to the other value, which retains the information about the magnitude of the values before repairing and helps to maintain the diversity of the population.\n\nIn order to verify the effectiveness of the MSPDDE algorithm in this paper, the following firstly gives the information about the experimental environment and parameter settings, then introduces the experimental cases and experimental statistical methods, and finally evaluates the performance of the MSPDDE algorithm and conducts ablation experiments for the pool of mutation strategies and probabilistic discretization strategy. The information of the experimental environment used in the experiments of this paper is as follows: Huawei cloud server gillpen general purpose computing enhanced kc1.4 × large.2, Tencent 16-core CPU|32 GB RAM cloud server, and CesiumJS 1.103. The algorithm parameter settings are shown in Table 2 Vegetation and urban 3DTiles models are more complex in texture and material, and their huge data volume leads to low loading efficiency in visualization platforms, and even lags and crashes always occur in the loading process, so it is especially important to shorten their rendering time [ 30 ]. Therefore, this paper chose three 3DTiles models of Huxi Village in Anxi County, Quanzhou City, Fujian Province, Qishan Park in Yongtai County, Fuzhou City, Fujian Province, and Huludao City, Liaoning Province, as experimental cases. The main source of the data is the inclined photogrammetry, and the raw data are in OSGB format, which are processed into 3DTiles models using the Cesiumlab tool. The specifics of three cases are shown in Table 3 and Figure 2 In this paper, the rendering time (RT) of 3DTiles model is selected as the evaluation indicator, and the smaller the RT is, the closer the rendering parameters are to the optimization. The Mann–Whitney U test is used to statistically analyze the experimental data, and the Mann–Whitney U test is able to determine whether there is a significant difference between the RT under the two groups of parameter configurations, and its confidence level α is set at 0.05 [ 31 32 ]. In order to verify the optimization effect of the MSPDDE algorithm, this subsection sets the MSPDDE algorithm parameters as described above and runs the algorithm 10 times for each case. At the same time, each case is rendered 10 times using Cesium’s default rendering parameter configuration and progressive loading on demand (PLOD) rendering parameter configuration. The rendering time results of the three case models under the optimal rendering parameter configurations found by the MSPDDE algorithm, Cesium’s default parameter configuration and progressive loading on demand (PLOD) parameter configuration are shown in Table 4 and Table 5 and Figure 3 In all three cases, the rendering time of the MSPDDE algorithm is smaller than that of the progressive loading on demand and Cesium default parameter configurations, and the -value of the Mann–Whitney U test for the rendering time results for MSPDDE and the other two parameter configurations is less than 0.05. This can be seen that the MSPDDE algorithm’s optimization results are significantly better than progressive loading on demand and Cesium’s default parameter configuration. As an important application pillar of the smart city, the park undertakes the typical demonstration task of the smart city construction, so the park-type 3DTiles model is most widely used, so in this section, the case of Qishan Park is selected for the ablation experiments to illustrate the effect of the mutation strategies pool and the probabilistic discretization strategy in the practical application. In order to verify the effectiveness of the mutation strategies pool in rendering parameter optimization, this subsection is based on the traditional DE algorithm and uses five mutation strategies, DE/rand/1, DE/rand/2, DE/best/1, DE/best/2, and the mutation strategy pool, respectively, and each of them is run independently for 10 times. The results of the ablation of the five mutation strategies are shown in Table 6 and Table 7 and Figure 4 From the experimental results, it can be seen that the different mutation strategies affect the effect of the optimization search, using the mutation strategies pool can obtain smaller rendering time (RT) compared with other mutation strategies, and the -value of the Mann–Whitney U test of the RT obtained by the mutation strategies pool and other mutation strategies are lower than 0.05, which indicates that the mutation strategies pool is significantly better than other mutation strategies in finding the optimal values of rendering parameters of the 3DTiles model. The DE algorithm is mostly used for solving continuous optimization problems, and a common method for dealing with discrete variables is the rounding method, where the main idea is to keep the algorithm searching in the real number domain, but rounding down the values of the real variables before solving for the values of the corresponding objective function of the individual [ 33 ]. In order to verify the effectiveness of the probabilistic discretization strategy, this subsection applies the rounding discretization strategy and the probabilistic discretization strategy to the traditional DE algorithm, respectively. The experimental results are shown in the Table 8 and Figure 5 The rendering time (RT) obtained by the probabilistic discretization strategy is 11.36% lower than the rounding discretization strategy, and the -value of the RT obtained by the two discretization strategies is 4.9537 × 10−4 lower than 0.05, which indicates that the use of the probabilistic discretization strategy is better able to find the optimal values of the rendering parameters of the 3DTiles model.\n\nIn this paper, we proposed MSPDDE, a differential evolution algorithm suitable for finding the optimal values of the rendering parameters of the 3DTiles model. The MSPDDE algorithm increases the search space and improves the convergence speed by constructing a pool of mutation strategies using multiple mutation strategies and, at the same time, handles the discrete variables in a probabilistic discretization strategy so that the algorithm has the capability of solving the constrained mixed-variable optimization problem and can thus accomplish the optimization of rendering parameters for 3DTiles models. This article mainly conducted two experiments: performance evaluation and ablation experiments. The experimental conclusions are as follows: The effectiveness of the MSPDDE algorithm is evaluated by comparing the rendering times of three parameter configurations: the optimization results of the MSPDDE algorithm, the progressive loading on demand strategy parameter configuration, and the default parameter configuration of Cesium. The results show that the average reduction in the rendering time for the three cases using the MSPDDE algorithm’s optimization results is 28.84%, 27.89%, and 13.32%. This suggests that the MSPDDE algorithm can be used as an effective method for optimization of rendering parameters for 3DTiles models. The results of the mutation strategy ablation experiments show that the mutation strategy pool significantly outperforms other mutation strategies in finding the optimal values of the rendering parameters of the 3DTiles model. The reason is that the mutation strategies pool fully utilizes the advantages of DE/rand/k, DE/best/k (k = 1,2), which speeds up the convergence while guaranteeing the global search ability and reducing the probability of falling into local optimality. The results of the discrete strategy ablation experiments show that the rendering time achieved by the probabilistic discretization strategy is 11.36% lower than that of the rounding discretization strategy, which is explained by the fact that probabilistic discretization avoids the repair of illegal values of multiple mutant individuals to the same value, which prevents the mutation operation of the next generation from being blocked and the evolution stopping. The MSPDDE algorithm enables the automated optimization of Cesium 3DTiles rendering parameters. Compared to the manual tuning approach used in current studies, it significantly reduces optimization costs, minimizes the risk of falling into local optimality, and enhances the accuracy of the optimization results. However, the research methodology proposed in this paper also has some shortcomings. Firstly, the MSPDDE algorithm requires using Cesium to render the 3DTiles model for each fitness evaluation, which increases the time and resource consumption during the optimization process. To address this, future research could employ machine learning [ 34 ] or statistical models [ 35 ] to simulate the results of 3DTiles rendering. Secondly, most of the Cesium 3DTile rendering parameters have certain synergistic effects and mutual constraints, so all the parameters are optimized in this paper, which leads to the high dimensionality of the optimization problem in this paper. To solve this problem, the importance of parameters for rendering can be explored in the future. Isolating unimportant rendering parameters reduces the dimensionality of the problem while ensuring that inter-parameter collaboration work and inter-parameter constraints are satisfied.\n\nIn this paper, we proposed a multi-strategy probabilistic discrete differential evolution algorithm (MSPDDE) to optimize the rendering parameters of Cesium 3DTiles. By using a pool of mutation strategies to balance the quality of the understanding and the speed of convergence, the probability of the algorithm falling into local optimality due to the high number of rendering parameters is reduced. In addition, the MSPDDE algorithm uses probabilistic discretization strategy to deal with discrete variables in the parameters. Therefore, the MSPDDE algorithm can effectively determine the optimal values for Cesium 3DTiles rendering parameters and achieve automated optimization of these parameters, which solves the current problem of high cost and low accuracy of manually tuning the rendering parameters. Furthermore, in the development of “Smart Cities”, the application of 3DTiles models is becoming increasingly widespread, and the lag issues encountered when rendering these models with the Cesium engine are becoming more apparent. The MSPDDE algorithm effectively determines the optimal rendering parameters for Cesium 3DTiles, addressing the lag problem. This not only provides valuable insights for research on Cesium 3DTiles rendering optimization but also plays a significant role in promoting the adoption of 3DTiles models while advancing 3D visualization technology."
    },
    {
        "link": "https://stackoverflow.com/questions/59008197/optimizing-cesium-tile-display-performance",
        "document": "for an interactive project I have created a Cesium viewer instance with two TileMapServiceImageryProvider intances which get their content from a fast local ssd. Howerver, the display performance when zooming in or out is not very smooth. It sometimes takes more then a second to display the new content. I already turned the requestRenderMode on to increase performance of the whole project but I could ot find any way to speed up tile loading / rendering. Is there a way to optimize Cesiums tile-handling? Is caching an issue maybe?\n\nThanks so much."
    },
    {
        "link": "https://researchgate.net/publication/388058311_Optimization_of_Rendering_Parameters_of_Cesium_3DTiles_Model_Based_on_Differential_Evolution_Algorithm",
        "document": "This article is an open access article distributed under the terms and Abstract: Cesium is an open-source 3D virtual earth engine based on W ebGL and one of the most widely used 3D GIS engines. The 3DTiles rendering parameters in Cesium improve making simultaneous optimization challenging. In this paper, we proposed a multi-strategy values of the rendering parameters of Cesium 3DTiles model, which incr eases the search space and improves the convergence speed by introducing multiple mutation strategies. These strategies effectively reduce the probability of falling into local optimality due to too many parameters and deal with discrete variables in the rendering parameters by applying a probabilistic discretization strategy to the discrete variables so that MSPDDE is able to ﬁnd all the rendering parameter optima of Cesium 3DT iles. Under three different sizes of 3DTiles model cases, the rendering model time using the optimal parameter conﬁgurations found by the algorithm is reduced by 28.84%, 27.89%, and 13.32%, respectively , compared with the default parameter conﬁgurations of Cesium, which shortens the time of rendering With the construction of smart cities, 3D GIS technology has under gone rapid devel- ], leading to the emergence of many excellent 3D GIS engines in the industry . Cesium is a fully open-source 3D GIS engine for Earth and image visualization, ofﬁcially ]. It is a relatively young WebGL-based library for visualizing spatial information, supporting 3D, 2.5D, and 2D display formats with full capabilities for made Cesium a popular spatial information visualization platform in just a few years. It has achieved remarkable success in important ﬁelds such as urban planning, digital cities, ]. However, Cesium engine still faces the challenges of many In recent years, many scholars have begun to study the 3DTiles model rendering parameters provided by Cesium. According to the idea of optimizing the rendering\n\nparameters of Cesium 3DTiles, the existing studies can be classiﬁed into two categories: increasing the maximum screen space error and optimizing the 3DT iles rendering strategy . time of the 3DTiles model by increasing the maximum scr een space error, but the incr ease in the maximum screen space error reduced the rendering time of the 3DTiles model. However, incr easing the maximum screen space error reduces the rendering quality of the model. Therefore, many scholars have chosen to reduce the rendering time by tuning the parameters to optimize the rendering strategy of 3DTiles. Huang Xinran et al. manually optimized three rendering parameters and summarized a progressive loading on demand strategy to realize the fast rendering of the overall scene of the 3DT iles model [ Song et al. illustrated that when Cesium renders the 3DTiles model, it can jump traverse the tiles with a screen error that is smaller than the base screen space error until it ﬁnds the tile with a screen error that is smaller than the maximum screen space error . They pointed out that the value of base screen space error can be adjusted according to the 3DT iles model, which can effectively reduce the amount of data and rendering time [ parameter optimization methods use manual tuning, but the manual tuning method is time- consuming and labor-intensive, and the optimization results are less accurate. Additionally , all current studies have only tuned a limited set of parameters and failed to account for the synergistic effects between them, and the optimization process overlooks the differ ences In this paper, in or der to ﬁnd the optimal values of rendering parameters of 3DTiles model provided by Cesium, which is faced with the problems of many rendering parame- ters, both continuous and discrete variables, as well as the existence of constraints on the values and conditions of the parameters, we proposed a multi-strategy probabilistic dis- strategies to make full use of the advantages of various mutation strategies, taking into ac- count the quality of the solution and convergence speed and reducing the probability of the algorithm falling into local optimality due to the large number of rendering parameters. At the same time, the MSPDDE algorithm adopts a probabilistic discretization strategy to deal with the illegal discrete parameter values of the mutated individuals so that the algorithm has the ability to deal with mixed-variable optimization problems. Experimentally veriﬁed in three different sizes of 3DT iles model cases, the rendering time of 3DTiles model using the optimal parameter conﬁguration found by the MSPDDE algorithm is signiﬁcantly lower than the default parameter conﬁguration of Cesium and experimentally proved that the mutation strategies pool and probabilistic discretization strategy of the MSPDDE algorithm can help the algorithm to ﬁnd the optimal values of rendering parameters effectively . Cesium provides a total of 21 rendering parameters for 3DT iles model [ ensure that the rendering quality of the 3DT iles model remains unchanged, this paper will set the parameter “maximumScreenSpaceError” to a ﬁxed value of 16 [ rendering parameters to be optimized, including 10 discrete variable parameters and 10 continuous variable parameters, which have value and condition constraints, and all the rendering parameters to be optimized are described in T able optimization problem is deﬁned as a mixed-variable optimization problem with constraints. In this paper, the short r endering time of the 3DTiles model is the goal, and the following is the description of this optimization problem.\n\nV egetation and urban 3DTiles models are mor e complex in texture and material, and their huge data volume leads to low loading efﬁciency in visualization platforms, and even lags and crashes always occur in the loading process, so it is especially important to shorten ]. Therefore, this paper chose three 3DTiles models of Huxi V illage City , Fujian Province, and Huludao City , Liaoning Province, as experimental cases. The main source of the data is the inclined photogrammetry , and the raw data are in OSGB format, which are processed into 3DT iles models using the Cesiumlab tool. The speciﬁcs of three cases are shown in T able and Figure . V egetation predominates, with a few buildings, terrain, etc. g time results of the three case models In this paper, the r endering time (RT) of 3DTiles model is selected as the evaluation indicator, and the smaller the R T is, the closer the rendering parameters are to the opti- mization. The Mann–Whitney U test is used to statistically analyze the experimental data, and the Mann–Whitney U test is able to determine whether there is a signiﬁcant difference between the RT under the two groups of parameter conﬁgurations, and its conﬁdence level In order to verify the optimization effect of the MSPDDE algorithm, this subsection sets the MSPDDE algorithm parameters as described above and runs the algorithm for each case. At the same time, each case is rendered 10 times using Cesium’s default parameter conﬁguration. The rendering time results of the three case models under the conﬁguration are shown in T ables and and Figure .\n\nT able 4. The rendering time results of each case under three parameter conﬁgurations. T able 5. The -value of the Mann–Whitney U test for the rendering time results for MSPDDE and the other two parameter conﬁgurations in each case. for the rendering time results for MS ndering time of the Qishan co Figure 3. Box plots of rendering time for each case under the three parameter conﬁgurations. In all three cases, the rendering time of the MSPDDE algorithm is smaller than that of the progressive loading on demand and Cesium default parameter conﬁgurations, and the -value of the Mann–Whitney U test for the rendering time results for MSPDDE and the other two parameter conﬁgurations is less than 0.05. This can be seen that the MSPDDE algorithm’s optimization results are signiﬁcantly better than progressive loading As an important application pillar of the smart city , the park undertakes the typical demonstration task of the smart city construction, so the park-type 3DTiles model is most widely used, so in this section, the case of Qishan Park is selected for the ablation experiments to illustrate the effect of the mutation strategies pool and the probabilistic In order to verify the effectiveness of the mutation strategies pool in rendering param- eter optimization, this subsection is based on the traditional DE algorithm and uses ﬁve strategy pool, respectively , and each of them is run independently for 10 times. The results of the ablation of the ﬁve mutation strategies are shown in T ables and and Figure .\n\nT able 6. The rendering time of the Qishan community case under the optimization results of various T able 7. The -value of the Mann–Whitney U test of the mutation strategy pool and the other four Figure 4. Box plot of r endering time for Qishan Park case under optimization results of various From the experimental results, it can be seen that the different mutation strategies affect the effect of the optimization search, using the mutation strategies pool can obtain smaller rendering time (RT) compared with other mutation strategies, and the -value of the Mann–Whitney U test of the RT obtained by the mutation strategies pool and other mutation strategies are lower than 0.05, which indicates that the mutation strategies pool is signiﬁcantly better than other mutation strategies in ﬁnding the optimal values of rendering The DE algorithm is mostly used for solving continuous optimization problems, and a common method for dealing with discrete variables is the rounding method, where the main idea is to keep the algorithm searching in the real number domain, but rounding down the values of the real variables before solving for the values of the corresponding objective ]. In order to verify the effectiveness of the probabilistic discretization strategy , this subsection applies the rounding discretization strategy and the probabilistic discretization strategy to the traditional DE algorithm, respectively . The experimental results are shown in the T able and Figure .\n\nT able 8. The rend ering t ime of Qi shan Pa rk case u nder t he opti mizati on res ults of Figure 5. Box plots of rendering time for Qishan Park cases under two discrete strategies optimization The rendering time (RT) obtained by the pr obabilistic discretization strategy is 11.36% lower than the rounding discretization strategy , and the -value of the RT obtained by the lower than 0.05, which indicates that the use of the probabilistic discretization strategy is better able to ﬁnd the optimal values of the In this paper, we pr oposed MSPDDE, a differential evolution algorithm suitable for ﬁnding the optimal values of the rendering parameters of the 3DT iles model. The MSPDDE algorithm increases the search space and improves the convergence speed by constructing a pool of mutation strategies using multiple mutation strategies and, at the same time, handles the discrete variables in a probabilistic discretization strategy so that the algorithm has the capability of solving the constrained mixed-variable optimization problem and can thus accomplish the optimization of rendering parameters for 3DT iles models. This article mainly conducted two experiments: performance evaluation and ablation experiments. The experimental conclusions are as follows: The effectiveness of the MSPDDE algorithm is evaluated by comparing the rendering times of three parameter conﬁgurations: the optimization results of the MSPDDE algorithm, the progressive loading on demand strategy parameter conﬁguration, and the default parameter conﬁguration of Cesium. The results show that the average reduction in the rendering time for the three cases using the MSPDDE algorithm’s optimization results is 28.84%, 27.89%, and 13.32%. This suggests that the MSPDDE algorithm can be used as an effective method for optimization of rendering parameters The results of the mutation strategy ablation experiments show that the mutation strategy pool signiﬁcantly outperforms other mutation strategies in ﬁnding the op- timal values of the rendering parameters of the 3DTiles model. The reason is that the mutation strategies pool fully utilizes the advantages of DE/rand/k, DE/best/k ), which speeds up the convergence while guaranteeing the global search ability and reducing the probability of falling into local optimality . The results of the discrete strategy ablation experiments show that the rendering time achieved by the probabilistic discretization strategy is 11.36% lower than that of\n\nthe rounding discretization strategy , which is explained by the fact that probabilistic discretization avoids the repair of illegal values of multiple mutant individuals to the same value, which prevents the mutation operation of the next generation from being The MSPDDE algorithm enables the automated optimization of Cesium 3DTiles ren- dering parameters. Compared to the manual tuning approach used in current studies, it signiﬁcantly reduces optimization costs, minimizes the risk of falling into local optimality , and enhances the accuracy of the optimization results. However, the research methodology proposed in this paper also has some shortcomings. Firstly, the MSPDDE algorithm requires using Cesium to render the 3DTiles model for each ﬁtness evaluation, which incr eases the time and resource consumption during the optimization process. T o address this, future results of 3DTiles r endering. Secondly, most of the Cesium 3DT ile rendering parameters have certain synergistic effects and mutual constraints, so all the parameters are optimized in this paper, which leads to the high dimensionality of the optimization pr oblem in this paper. T o solve this problem, the importance of parameters for rendering can be explored in the future. Isolating unimportant rendering parameters reduces the dimensionality of the problem while ensuring that inter-parameter collaboration work and inter-parameter In this paper, we pr oposed a multi-strategy probabilistic discrete differential evolution algorithm (MSPDDE) to optimize the rendering parameters of Cesium 3DTiles. By using a pool of mutation strategies to balance the quality of the understanding and the speed of convergence, the probability of the algorithm falling into local optimality due to the high number of rendering parameters is reduced. In addition, the MSPDDE algorithm uses probabilistic discretization strategy to deal with discrete variables in the parameters. Therefore, the MSPDDE algorithm can effectively determine the optimal values for Cesium 3DTiles rendering parameters and achieve automated optimization of these parameters, which solves the current problem of high cost and low accuracy of manually tuning the Furthermore, in the development of “Smart Cities”, the application of 3DT iles models is becoming increasingly widespread, and the lag issues encountered when rendering these models with the Cesium engine are becoming more apparent. The MSPDDE algorithm the lag problem. This not only provides valuable insights for research on Cesium 3DTiles rendering optimization but also plays a signiﬁcant role in promoting the adoption of D.Z., Y .W., T .Z. and C.G.; Supervision, D.Z. and Y .N.; Software, D.Z. and T .Z.; Validation, D.Z., Y .W., Y .N., T.Z. and C.G.; Investigation, D.Z., T .Z. and Y .N.; Resources, Y .W. and Y .N.; Writing—original draft, D.Z.; Writing—r eview and editing, D.Z., Y.W . and Y .N. All authors have read and agreed to the Funding: This research was funded by Dr . Yong Wu. And the APC was funded by Dr. Y ong Wu. Data Availability Statement: The data presented in this study are available upon request from the Conﬂicts of Interest: The authors declare no conﬂicts of interest."
    }
]