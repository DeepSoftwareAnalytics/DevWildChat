[
    {
        "link": "https://poi.apache.org",
        "document": "The Apache POI team is pleased to announce the release of 5.4.0. Several dependencies were updated to their latest versions to pick up security fixes and other improvements.\n\nA summary of changes is available in the Release Notes. A full list of changes is available in the change log. People interested should also follow the dev list to track progress.\n\nSee the downloads page for more details.\n\nWhile testing a potential Apache POI 5.4.0 release, we discovered a serious bug in log4j-api 2.24.1. This leads to NullPointerExceptions when you use a version of log4j-core that is not of the exact same version (2.24.1). We recommend that users avoid log4j 2.24.1 and use the latest 2.24.x version where this issue is fixed again.\n\nXMLBeans release 5.2.2 had the problematic log4j-api 2.24.1 dependency and thus can lead to such issues if used in some other context. In the meantime a version 5.3.0 of XmlBeans was released which avoids this issue.\n\nPlease direct any queries to the Log4j Team. The main issue is Issue 3143.\n\n4 March 2022 - CVE-2022-26336 - A carefully crafted TNEF file can cause an out of memory exception in Apache POI poi-scratchpad versions prior to 5.2.0\n\nDescription:\n\n A shortcoming in the HMEF package of poi-scratchpad (Apache POI) allows an attacker to cause an Out of Memory exception. This package is used to read TNEF files (Microsoft Outlook and Microsoft Exchange Server). If an application uses poi-scratchpad to parse TNEF files and the application allows untrusted users to supply them, then a carefully crafted file can cause an Out of Memory exception.\n\nMitigation:\n\n Affected users are advised to update to poi-scratchpad 5.2.1 or above which fixes this vulnerability. It is recommended that you use the same versions of all POI jars.\n\nThe Apache POI PMC has evaluated the security vulnerabilities reported for Apache Log4j.\n\nPOI 5.1.0 and XMLBeans 5.0.2 only have dependencies on log4j-api 2.14.1. The security vulnerabilities are not in log4j-api - they are in log4j-core.\n\nIf any POI or XMLBeans user uses log4j-core to control their logging of their application, we strongly recommend that they upgrade all their log4j dependencies to the latest version (currently v2.20.0) - including log4j-api.\n\nDescription:\n\n When parsing XML files using XMLBeans 2.6.0 or below, the underlying parser created by XMLBeans could be susceptible to XML External Entity (XXE) attacks.\n\nThis issue was fixed a few years ago but on review, we decided we should have a CVE to raise awareness of the issue.\n\nMitigation:\n\n Affected users are advised to update to Apache XMLBeans 3.0.0 or above which fixes this vulnerability. XMLBeans 4.0.0 or above is preferable.\n\nDescription:\n\n When using the tool XSSFExportToXml to convert user-provided Microsoft Excel documents, a specially crafted document can allow an attacker to read files from the local filesystem or from internal network resources via XML External Entity (XXE) Processing.\n\nMitigation:\n\n Apache POI 4.1.0 and before: users who do not use the tool XSSFExportToXml are not affected. Affected users are advised to update to Apache POI 4.1.1 which fixes this vulnerability.\n\nCredit: This issue was discovered by Artem Smotrakov from SAP\n\nThe Apache POI team is pleased to announce the release of XMLBeans 3.1.0. Featured are a handful of bug fixes.\n\nThe Apache POI project has unretired the XMLBeans codebase and is maintaining it as a sub-project, due to its importance in the poi-ooxml codebase.\n\nA summary of changes is available in the Release Notes. People interested should also follow the POI dev list to track progress.\n\nThe XMLBeans JIRA project has been reopened and feel free to open issues.\n\nWe did some work to verify that compilation with Java 11 is working and that all unit-tests pass.\n\nSee the details in the FAQ entry."
    },
    {
        "link": "https://howtodoinjava.com/java/library/readingwriting-excel-files-in-java-poi-tutorial",
        "document": "Learn to read excel, write excel, evaluate formula cells and apply custom formatting to the generated excel files using Apache POI library with examples.\n\nIf we are building software for the HR or Finance domain, there is usually a requirement for generating excel reports across management levels. Apart from reports, we can also expect some input data for the applications coming in the form of excel sheets and the application is expected to support this requirement.\n\nApache POI is a well-trusted library among many other open-source libraries to handle such usecases involving excel files. Please note that, in addition, we can read and write MS Word and MS PowerPoint files also using the Apache POI library.\n\nThis Apache POI tutorial will discuss some everyday excel operations in real-life applications.\n\nIf we are working on a maven project, we can include the Apache POI dependencies in file using this:\n• None Apache POI main classes usually start with either HSSF, XSSF or SXSSF.\n• HSSF – is the POI Project’s pure Java implementation of the Excel 97(-2007) file format. e.g., HSSFWorkbook, HSSFSheet.\n• XSSF – is the POI Project’s pure Java implementation of the Excel 2007 OOXML (.xlsx) file format. e.g., XSSFWorkbook, XSSFSheet.\n• SXSSF (since 3.8-beta3) – is an API-compatible streaming extension of XSSF to be used when huge spreadsheets have to be produced and heap space is limited. e.g., SXSSFWorkbook, SXSSFSheet. SXSSF achieves its low memory footprint by limiting access to the rows within a sliding window, while XSSF gives access to all rows in the document.\n• None Apart from the above classes, Row and Cell interact with a particular row and a particular cell in an excel sheet.\n• None A wide range of classes like CellStyle, BuiltinFormats, ComparisonOperator, ConditionalFormattingRule, FontFormatting, IndexedColors, PatternFormatting, SheetConditionalFormatting etc. are used when you have to add formatting to a sheet, primarily based on some rules.\n• None Another helpful class FormulaEvaluator is used to evaluate the formula cells in an excel sheet.\n\nI am taking this example first so we can reuse the excel sheet created by this code in further examples.\n\nWriting excel using POI is very simple and involves the following steps:\n• Repeat steps 3 and 4 to write more data\n\nIt seems very simple, right? Let’s have a look at the code doing these steps.\n\nJava program to write an excel file using Apache POI library.\n\nReading an excel file using POI is also very simple if we divide this into steps.\n• Get to the desired sheet\n• Iterate over all cells in a row\n• Repeat steps 3 and 4 until all data is read\n\nLet’s see all the above steps in the code. I am writing the code to read the excel file created in the above example. It will read all the column names and the values in it – cell by cell.\n\nJava program to read an excel file using Apache POI library.\n\nWhen working on complex excel sheets, we encounter many cells with formulas to calculate their values. These are formula cells. Apache POI also has excellent support for adding formula cells and evaluating already present formula cells.\n\nLet’s see one example of how to add formula cells in excel?\n\nThe sheet has four cells in a row and the fourth one in the multiplication of all the previous 3 rows. So the formula will be: A2*B2*C2 (in the second row)\n\nJava program to add formulas in an excel file using Apache POI library.\n\nSimilarly, we want to read a file with formula cells and use the following logic to evaluate formula cells.\n\nJava program to evaluate formulas in an excel file using Apache POI library.\n\nSo far we have seen examples of reading/writing and excel files using Apache POI. But, when creating a report in an excel file, it is essential to add formatting on cells that fit into any pre-determined criteria.\n\nThis formatting can be a different coloring based on a specific value range, expiry date limit etc.\n\nIn the below examples, we are taking a couple of such cell formatting examples for various purposes.\n\nThis code will color any cell in a range whose value is between a configured range. [e.g., between 50 and 70]\n\nHighlight all cells which have duplicate values in observed cells.\n\nA simple code to color each alternate row in a different color.\n\n6.4. Color amounts that are going to expire in the next 30 days\n\nA handy code for financial projects which keeps track of deadlines.\n\nI am ending this apache poi tutorial here to keep the post within a limit.\n\nIn this tutorial, we learned to read excel, write excel, set and evaluate formula cells, and format the cells with color codings using the Apache POI library."
    },
    {
        "link": "https://poi.apache.org/components/spreadsheet/quick-guide.html",
        "document": "As of version 3.8, POI has slightly different syntax to work with data validations with .xls and .xlsx formats. Check the value a user enters into a cell against one or more predefined value(s). The following code will limit the value the user can enter into cell A1 to one of three integer values, 10, 20 or 30. This code will do the same but offer the user a drop down list to select a value from. To create a message box that will be shown to the user if the value they enter is invalid. Replace 'Box Title' with the text you wish to display in the message box's title bar and 'Message Text' with the text of your error message. To create a prompt that the user will see when the cell containing the data validation receives focus The text encapsulated in the first parameter passed to the createPromptBox() method will appear emboldened and as a title to the prompt whilst the second will be displayed as the text of the message. The createExplicitListConstraint() method can be passed and array of String(s) containing interger, floating point, dates or text values. To obtain a validation that would check the value entered was, for example, an integer between 10 and 100, use the DVConstraint.createNumericConstraint(int, int, String, String) factory method. Look at the javadoc for the other validation and operator types; also note that not all validation types are supported for this method. The values passed to the two String parameters can be formulas; the '=' symbol is used to denote a formula It is not possible to create a drop down list if the createNumericConstraint() method is called, the setSuppressDropDownArrow(false) method call will simply be ignored. Date and time constraints can be created by calling the createDateConstraint(int, String, String, String) or the createTimeConstraint(int, String, String). Both are very similar to the above and are explained in the javadoc. The contents of specific cells can be used to provide the values for the data validation and the DVConstraint.createFormulaListConstraint(String) method supports this. To specify that the values come from a contiguous range of cells do either of the following: and in both cases the user will be able to select from a drop down list containing the values from cells A1, A2 and A3. The data does not have to be as the data validation. To select the data from a different sheet however, the sheet must be given a name when created and that name should be used in the formula. So assuming the existence of a sheet named 'Data Sheet' this will work: Data validations work similarly when you are creating an xml based, SpreadsheetML, workbook file; but there are differences. Explicit casts are required, for example, in a few places as much of the support for data validations in the xssf stream was built into the unifying ss stream, of which more later. Other differences are noted with comments in the code. Check the value the user enters into a cell against one or more predefined value(s). // Here the boolean value false is passed to the setSuppressDropDownArrow() // method. In the hssf.usermodel examples above, the value passed to this // Note this extra method call. If this method call is omitted, or if the // boolean value false is passed, then Excel will not validate the value the This code will do the same but offer the user a drop down list to select a value from. Note that the call to the setSuppressDropDowmArrow() method can either be simply excluded or replaced with: These both exactly mirror the hssf.usermodel so please refer to the 'Messages On Error:' and 'Prompts:' sections above. To obtain a validation that would check the value entered was, for example, an integer between 10 and 100, use the XSSFDataValidationHelper(s) createNumericConstraint(int, int, String, String) factory method. The values passed to the final two String parameters can be formulas; the '=' symbol is used to denote a formula. Thus, the following would create a validation the allows values only if they fall between the results of summing two cell ranges It is not possible to create a drop down list if the createNumericConstraint() method is called, the setSuppressDropDownArrow(true) method call will simply be ignored. Please check the javadoc for other constraint types as examples for those will not be included here. There are, for example, methods defined on the XSSFDataValidationHelper class allowing you to create the following types of constraint; date, time, decimal, integer, numeric, formula, text length and custom constraints. One other type of constraint not mentioned above is the formula list constraint. It allows you to create a validation that takes it value(s) from a range of cells. This code would create a validation that took it's values from cells in the range A1 to F1. The usefulness of this technique can be extended if you use named ranges like this; OpenOffice Calc has slightly different rules with regard to the scope of names. Excel supports both Workbook and Sheet scope for a name but Calc does not, it seems only to support Sheet scope for a name. Thus it is often best to fully qualify the name for the region or area something like this; This does open a further, interesting opportunity however and that is to place all of the data for the validation(s) into named ranges of cells on a hidden sheet within the workbook. These ranges can then be explicitly identified in the setRefersToFormula() method argument. The classes within the ss.usermodel package allow developers to create code that can be used to generate both binary (.xls) and SpreadsheetML (.xlsx) workbooks. The techniques used to create data validations share much in common with the xssf.usermodel examples above. As a result just one or two examples will be presented here. Check the value the user enters into a cell against one or more predefined value(s). Workbook workbook = new XSSFWorkbook(); // or new HSSFWorkbook // Note the check on the actual type of the DataValidation object. // If it is an instance of the XSSFDataValidation class then the // boolean value 'false' must be passed to the setSuppressDropDownArrow() // method and an explicit call made to the setShowErrorBox() method. // If the Datavalidation contains an instance of the HSSFDataValidation // class then 'true' should be passed to the setSuppressDropDownArrow() // method and the call to setShowErrorBox() is not necessary. This code will do the same but offer the user a drop down list to select a value from. Workbook workbook = new XSSFWorkbook(); // or new HSSFWorkbook // Note the check on the actual type of the DataValidation object. // If it is an instance of the XSSFDataValidation class then the // boolean value 'false' must be passed to the setSuppressDropDownArrow() // method and an explicit call made to the setShowErrorBox() method. // If the Datavalidation contains an instance of the HSSFDataValidation // class then 'true' should be passed to the setSuppressDropDownArrow() // method and the call to setShowErrorBox() is not necessary. These both exactly mirror the hssf.usermodel so please refer to the 'Messages On Error:' and 'Prompts:' sections above. As the differences between the ss.usermodel and xssf.usermodel examples are small - restricted largely to the way the DataValidationHelper is obtained, the lack of any need to explicitly cast data types and the small difference in behaviour between the hssf and xssf interpretation of the setSuppressDropDowmArrow() method, no further examples will be included in this section. In some cases, it may be necessary to present to the user a sheet which contains more than one drop down list. Further, the choice the user makes in one drop down list may affect the options that are presented to them in the second or subsequent drop down lists. One technique that may be used to implement this behaviour will now be explained. There are two keys to the technique; one is to use named areas or regions of cells to hold the data for the drop down lists, the second is to use the INDIRECT() function to convert between the name and the actual addresses of the cells. In the example section there is a complete working example- called LinkedDropDownLists.java - that demonstrates how to create linked or dependent drop down lists. Only the more relevant points are explained here. To create two drop down lists where the options shown in the second depend upon the selection made in the first, begin by creating a named region of cells to hold all of the data for populating the first drop down list. Next, create a data validation that will look to this named area for its data, something like this; Note that the name of the area - in the example above it is 'CHOICES' - is simply passed to the createFormulaListConstraint() method. This is sufficient to cause Excel to populate the drop down list with data from that named region. Next, for each of the options the user could select in the first drop down list, create a matching named region of cells. The name of that region should match the text the user could select in the first drop down list. Note, in the example, all upper case letters are used in the names of the regions of cells. Now, very similar code can be used to create a second, linked, drop down list; The key here is in the following Excel function - INDIRECT(UPPER($A$1)) - which is used to populate the second, linked, drop down list. Working from the inner-most pair of brackets, it instructs Excel to look at the contents of cell A1, to convert what it reads there into upper case – as upper case letters are used in the names of each region - and then convert this name into the addresses of those cells that contain the data to populate another drop down list.\n\nUsing Excel, it is possible to hide a row on a worksheet by selecting that row (or rows), right clicking once on the right hand mouse button and selecting 'Hide' from the pop-up menu that appears. To emulate this using POI, simply call the setZeroHeight() method on an instance of either XSSFRow or HSSFRow (the method is defined on the ss.usermodel.Row interface that both classes implement), like this: Workbook workbook = new XSSFWorkbook(); // OR new HSSFWorkbook() If the file were saved away to disc now, then the first row on the first sheet would not be visible. Using Excel, it is possible to unhide previously hidden rows by selecting the row above and the row below the one that is hidden and then pressing and holding down the Ctrl key, the Shift and the pressing the number 9 before releasing them all. To emulate this behaviour using POI do something like this: If the file were saved away to disc now, any previously hidden rows on the first sheet of the workbook would now be visible. The example illustrates two features. Firstly, that it is possible to unhide a row simply by calling the setZeroHeight() method and passing the boolean value 'false'. Secondly, it illustrates how to test whether a row is hidden or not. Simply call the getZeroHeight() method and it will return 'true' if the row is hidden, 'false' otherwise.\n\nIn Excel, you can apply a set of borders on an entire workbook region at the press of a button. The PropertyTemplate object simulates this with methods and constants defined to allow drawing top, bottom, left, right, horizontal, vertical, inside, outside, or all borders around a range of cells. Additional methods allow for applying colors to the borders. It works like this: you create a PropertyTemplate object which is a container for the borders you wish to apply to a sheet. Then you add borders and colors to the PropertyTemplate, and finally apply it to whichever sheets you need that set of borders on. You can create multiple PropertyTemplate objects and apply them to a single sheet, or you can apply the same PropertyTemplate object to multiple sheets. It is just like a preprinted form. Defines the look of the border, is it thick or thin, solid or dashed, single or double. This enum replaces the CellStyle.BORDER_XXXXX constants which have been deprecated. The PropertyTemplate will not support the older style BORDER_XXXXX constants. A special value of BorderStyle.NONE will remove the border from a Cell once it is applied. Describes the portion of the region that the BorderStyle will apply to. For example, TOP, BOTTOM, INSIDE, or OUTSIDE. A special value of BorderExtent.NONE will remove the border from the PropertyTemplate. When the template is applied, no change will be made to a cell border where no border properties exist in the PropertyTemplate. // #1) these borders will all be medium in default color // #2) these cells will have medium outside borders and thin inside borders // #3) these cells will all be medium weight with different colors for the // outside, inside horizontal, and inside vertical borders. The center // cell will have no borders. NOTE: The last pt.drawBorders() call removes the borders from the range by using BorderStyle.NONE. Like setCellStyleProperties, the applyBorders method merges the properties of a cell style, so existing borders are changed only if they are replaced by something else, or removed only if they are replaced by BorderStyle.NONE. To remove a color from a border, use IndexedColor.AUTOMATIC.getIndex(). Additionally, to remove a border or color from the PropertyTemplate object, use BorderExtent.NONE. This does not work with diagonal borders yet."
    },
    {
        "link": "https://poi.apache.org/apidocs/dev/org/apache/poi/ss/usermodel/Workbook.html",
        "document": "Retrieves the reference for the printarea of the specified sheet, the sheet name is appended to the reference even if it was not specified."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-read-data-from-password-protected-excel-using-java-and-apache-poi",
        "document": "How to Read Data from Password Protected Excel using Java and Apache POI?\n\nApache POI is an open-source java library to create and manipulate various file formats based on Microsoft Office. Using POI, one should be able to perform create, modify and display/read operations on the following file formats. For Example, Java doesn’t provide built-in support for working with excel files, so we need to look for open-source APIs for the job. In this article, we are going to discuss how to read the data from the password-protected Excel sheet using the Apache POI. For any protected Excel file, we needed to automate it and ask for the password, in the beginning, to handle us using the Apache POI.\n• Create the maven project in the Eclipse.\n• Add the Apache POI and poi-ooxml dependency in the POM.xml file\n\nLet us have an Excel file that is protected by the password “geeks”. It has the following data in it.\n\nWe have to open the protected file and read the data in the file using Apache POI. For opening protected file Apache POI provides the following method “workbookfactory“:\n\nProgram for reading data from Password protected Excel using Java and Apache POI\n• Open the Excel file in the input stream and store the Password as a string.\n• Apache POI provides the method workbookfactory for opening the protected files, in this method we are passing the file and password.\n• Now read the cell data using Iterator.\n• Print the data in the console based on the data type using a switch case.\n\nAfter we run the code, we get all the cell values in the console as mentioned below."
    },
    {
        "link": "https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/2.13.3/com/fasterxml/jackson/databind/ObjectMapper.html",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/72373968/how-to-convert-a-java-object-into-a-json",
        "document": "I have a code where I need to compare an email(string) coming from the frontend to the ones storaged in my ddbb. The thing is that the ones storaged are email objects with differents fields as verified and createdBy let say. So what I need to check is only the email of this object is equal to the upcoming email from the frontend.\n\nThis will be the object:\n\nand then I want to compare it with a string email = \"[email protected]\" Maybe Json.stringfy?"
    },
    {
        "link": "https://javadoc.io/static/com.fasterxml.jackson.core/jackson-databind/2.13.3/index.html?com/fasterxml/jackson/databind/JsonDeserializer.html",
        "document": "JavaScript is disabled on your browser.\n\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. Link to Non-frame version."
    },
    {
        "link": "https://stackoverflow.com/questions/2525042/how-to-convert-a-json-string-to-a-mapstring-string-with-jackson-json",
        "document": "I'm trying to do something like this but it doesn't work:\n\nBut the IDE says:\n\nWhat's the right way to do this? I'm only using Jackson because that's what is already available in the project, is there a native Java way of converting to/from JSON?\n\nIn PHP I would simply and I'd get back an array. I need basically the same thing here."
    },
    {
        "link": "https://reflectoring.io/jackson",
        "document": "Most of the web today exchanges data in JSON format. Web servers, web and mobile applications, even IoT devices all talk with each other using JSON. Therefore, an easy and flexible way of handling JSON is essential for any software to survive in today’s world.\n\nThis article is accompanied by a working code example on GitHub\n\nJSON stands for “JavaScript Object Notation”, it’s a text-based format for representing structured data based on JavaScript object syntax. Its dynamic and simple format made it extremely popular. In its essence, it follows a key-value map model allowing nested objects and arrays:\n\nJackson is mainly known as a library that converts JSON strings and Plain Old Java Objects (POJOs). It also supports many other data formats such as CSV, YML, and XML.\n\nJackson is preferred by many people because of its maturity (13 years old) and its excellent integration with popular frameworks, such as Spring. Moreover, it’s an open-source project that is actively developed and maintained by a wide community.\n\nUnder the hood, Jackson has three core packages Streaming, Databind, and Annotations. With those, Jackson offers us three ways to handle JSON-POJO conversion:\n\nIt’s the fastest approach of the three and the one with the least overhead. It reads and writes JSON content as discrete events. The API provides a JsonParser that reads JSON into POJOs and a JsonGenerator that writes POJOs into JSON.\n\nThe Tree Model creates an in-memory tree representation of the JSON document. An ObjectMapper is responsible for building a tree of JsonNode nodes. It is the most flexible approach as it allows us to traverse the node tree when the JSON document doesn’t map well to a POJO.\n\nIt allows us to do conversion between POJOs and JSON documents using property accessors or using annotations. It offers two types of binding:\n• Simple Data Binding which converts JSON to and from Java Maps, Lists, Strings, Numbers, Booleans, and null objects.\n• Full Data Binding which Converts JSON to and from any Java class.\n\nis the most commonly used part of the Jackson library as it’s the easiest way to convert between POJOs and JSON. It lives in .\n\nThe method is used to parse (deserialize) JSON from a String, Stream, or File into POJOs.\n\nOn the other hand, the method is used to turn POJOs into JSON (serialize).\n\nThe way works to figure out which JSON field maps to which POJO field is by matching the names of the JSON fields to the names of the getter and setter methods in the POJO.\n\nThat is done by removing the “get” and “set” parts of the names of the getter and setter methods and converting the first character of the remaining method name to lowercase.\n\nFor example, say we have a JSON field called , ObjectMapper will match it with the getter and the setter in the POJO.\n\nis configurable and we can customize it to our needs either directly from the instance or by using Jackson annotations as we will see later.\n\nBefore we start looking at code, we need to add Jackson Maven dependency which in turn transitively adds and\n\nWe are also using Lombok to handle the boilerplate code for getters, setters, and constructors.\n\nLet’s go through Jackson’s most important use-cases with code examples.\n\nWe should see this as output:\n\nNow, Let’s see convert a JSON string to an Employee object using the .\n\nThe ObjectMapper also offers a rich API to read JSON from different sources into different formats, let’s check the most important ones.\n\nThis is done using the method.\n\nSometimes the JSON document isn’t an object, but a list of objects. Let’s see how we can read that.\n\nWe can choose to parse the JSON to a Java , which is very convenient if we don’t know what to expect from the JSON file we are trying to parse. will turn the name of each variable in the JSON to a Map key and the value of that variable to the value of that key.\n\nSometimes the JSON we expect might have some extra fields that are not defined in our POJO. The default behavior for Jackson is to throw a exception in such cases. We can, however, tell Jackson not to stress out about unknown fields and simply ignore them. This is done by configuring ObjectMapper’s to false.\n\nDate conversions can be tricky as they can be represented with many formats and levels of specification (seconds, milliseconds, etc..).\n\nBefore talking about Jackson and Date conversion, we need to talk about the new Date API provided by Java 8. It was introduced to address the shortcomings of the older and . We are mainly interested in using the class which offers a powerful way to express date and time.\n\nTo do that, we need to add an extra module to Jackson so that it can handle .\n\nThen we need to tell the to look for and register the new module we’ve just added.\n\nThe default behavior for Jackson then is to show the date as So, the output would be\n\nWe can, however, tell Jackson what format we want the date to be. This can be done using the annotation\n\nWe can use the same configuration above to read a JSON field into a date.\n\nAnnotations in Jackson play a major role in customizing how the JSON/POJO conversion process takes place. We have seen an example of it with the date conversion where we used the annotation. Annotations mainly affect how the data is read, written or even both. Let’s explore some of those annotations based on their categories.\n\nThey affect how Jackson converts JSON into POJOs.\n\nThis is useful when we want to match a field in the JSON string to a field in the POJO where their names don’t match.\n\nThis annotation is useful for cases where the JSON contains some fields that are not declared in the POJO. It is used with a setter method that is called for every unrecognized field.\n\nThey affect how Jackson converts POJOs into JSON.\n\nThis is useful when we want to map a POJOs field to a JSON field using a different name. For example, say we have this Cat class with the field , but we want its JSON name to be .\n\nThis annotation allows us to treat a Map object as a source of JSON properties. Say we have this map as a field in the Cat class\n\nThen this will output\n\nThose annotations affect both reading and writing a JSON.\n\nThe annotated filed is ignored while both writing and reading JSON.\n\nThis will print out\n\nThe same applies to reading into a POJO as well.\n\nSay we have this file:\n\nJackson has many more useful annotations that give us more control over the serialization/deserialization process. The full list of them can be found on Jackson’s Github repository.\n• Jackson is one of the most powerful and popular libraries for JSON processing in Java.\n• Jackson consists of three main modules Streaming API, Tree Model, and Data Binding.\n• Jackson provides an ObjectMapper which is highly configurable to suit our needs through setting its properties and also using annotations.\n\nYou can find all the example code in the GitHub repo."
    }
]