[
    {
        "link": "https://docs.python.org/3/tutorial/inputoutput.html",
        "document": "There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.\n\nSo far we’ve encountered two ways of writing values: expression statements and the function. (A third way is using the method of file objects; the standard output file can be referenced as . See the Library Reference for more information on this.) Often you’ll want more control over the formatting of your output than simply printing space-separated values. There are several ways to format output.\n• None To use formatted string literals, begin a string with or before the opening quotation mark or triple quotation mark. Inside this string, you can write a Python expression between and characters that can refer to variables or literal values.\n• None The method of strings requires more manual effort. You’ll still use and to mark where a variable will be substituted and can provide detailed formatting directives, but you’ll also need to provide the information to be formatted. In the following code block there are two examples of how to format variables: Notice how the are padded with spaces and a negative sign only for negative numbers. The example also prints multiplied by 100, with 2 decimal places and followed by a percent sign (see Format Specification Mini-Language for details).\n• None Finally, you can do all the string handling yourself by using string slicing and concatenation operations to create any layout you can imagine. The string type has some methods that perform useful operations for padding strings to a given column width. When you don’t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the or functions. The function is meant to return representations of values which are fairly human-readable, while is meant to generate representations which can be read by the interpreter (or will force a if there is no equivalent syntax). For objects which don’t have a particular representation for human consumption, will return the same value as . Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function. Strings, in particular, have two distinct representations. The value of x is 32.5, and y is 40000... # The repr() of a string adds string quotes and backslashes: # The argument to repr() may be any Python object: The module contains a class that offers yet another way to substitute values into strings, using placeholders like and replacing them with values from a dictionary, but offers much less control of the formatting. Formatted string literals (also called f-strings for short) let you include the value of Python expressions inside a string by prefixing the string with or and writing expressions as . An optional format specifier can follow the expression. This allows greater control over how the value is formatted. The following example rounds pi to three places after the decimal: 'The value of pi is approximately The value of pi is approximately 3.142. Passing an integer after the will cause that field to be a minimum number of characters wide. This is useful for making columns line up. Other modifiers can be used to convert the value before it is formatted. applies , applies , and applies : 'My hovercraft is full of My hovercraft is full of eels. 'My hovercraft is full of My hovercraft is full of 'eels'. The specifier can be used to expand an expression to the text of the expression, an equal sign, then the representation of the evaluated expression: See self-documenting expressions for more information on the specifier. For a reference on these format specifications, see the reference guide for the Format Specification Mini-Language. Basic usage of the method looks like this: We are the knights who say \"Ni!\" The brackets and characters within them (called format fields) are replaced with the objects passed into the method. A number in the brackets can be used to refer to the position of the object passed into the method. If keyword arguments are used in the method, their values are referred to by using the name of the argument. Positional and keyword arguments can be arbitrarily combined: The story of Bill, Manfred, and Georg. If you have a really long format string that you don’t want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position. This can be done by simply passing the dict and using square brackets to access the keys. This could also be done by passing the dictionary as keyword arguments with the notation. This is particularly useful in combination with the built-in function , which returns a dictionary containing all local variables: __name__: __main__; __doc__: None; __package__: None; __loader__: ... As an example, the following lines produce a tidily aligned set of columns giving integers and their squares and cubes: For a complete overview of string formatting with , see Format String Syntax. Here’s the same table of squares and cubes, formatted manually: # Note use of 'end' on previous line The method of string objects right-justifies a string in a field of a given width by padding it with spaces on the left. There are similar methods and . These methods do not write anything, they just return a new string. If the input string is too long, they don’t truncate it, but return it unchanged; this will mess up your column lay-out but that’s usually better than the alternative, which would be lying about a value. (If you really want truncation you can always add a slice operation, as in .) There is another method, , which pads a numeric string on the left with zeros. It understands about plus and minus signs: The % operator (modulo) can also be used for string formatting. Given (where format is a string), conversion specifications in format are replaced with zero or more elements of values. This operation is commonly known as string interpolation. For example: 'The value of pi is approximately The value of pi is approximately 3.142. More information can be found in the printf-style String Formatting section.\n\nreturns a file object, and is most commonly used with two positional arguments and one keyword argument: The first argument is a string containing the filename. The second argument is another string containing a few characters describing the way in which the file will be used. mode can be when the file will only be read, for only writing (an existing file with the same name will be erased), and opens the file for appending; any data written to the file is automatically added to the end. opens the file for both reading and writing. The mode argument is optional; will be assumed if it’s omitted. Normally, files are opened in text mode, that means, you read and write strings from and to the file, which are encoded in a specific encoding. If encoding is not specified, the default is platform dependent (see ). Because UTF-8 is the modern de-facto standard, is recommended unless you know that you need to use a different encoding. Appending a to the mode opens the file in binary mode. Binary mode data is read and written as objects. You can not specify encoding when opening file in binary mode. In text mode, the default when reading is to convert platform-specific line endings ( on Unix, on Windows) to just . When writing in text mode, the default is to convert occurrences of back to platform-specific line endings. This behind-the-scenes modification to file data is fine for text files, but will corrupt binary data like that in or files. Be very careful to use binary mode when reading and writing such files. It is good practice to use the keyword when dealing with file objects. The advantage is that the file is properly closed after its suite finishes, even if an exception is raised at some point. Using is also much shorter than writing equivalent - blocks: # We can check that the file has been automatically closed. If you’re not using the keyword, then you should call to close the file and immediately free up any system resources used by it. Calling without using the keyword or calling might result in the arguments of not being completely written to the disk, even if the program exits successfully. After a file object is closed, either by a statement or by calling , attempts to use the file object will automatically fail. The rest of the examples in this section will assume that a file object called has already been created. To read a file’s contents, call , which reads some quantity of data and returns it as a string (in text mode) or bytes object (in binary mode). size is an optional numeric argument. When size is omitted or negative, the entire contents of the file will be read and returned; it’s your problem if the file is twice as large as your machine’s memory. Otherwise, at most size characters (in text mode) or size bytes (in binary mode) are read and returned. If the end of the file has been reached, will return an empty string ( ). 'This is the entire file.\n\n' reads a single line from the file; a newline character ( ) is left at the end of the string, and is only omitted on the last line of the file if the file doesn’t end in a newline. This makes the return value unambiguous; if returns an empty string, the end of the file has been reached, while a blank line is represented by , a string containing only a single newline. 'This is the first line of the file.\n\n' 'Second line of the file\n\n' For reading lines from a file, you can loop over the file object. This is memory efficient, fast, and leads to simple code: This is the first line of the file. If you want to read all the lines of a file in a list you can also use or . writes the contents of string to the file, returning the number of characters written. Other types of objects need to be converted – either to a string (in text mode) or a bytes object (in binary mode) – before writing them: returns an integer giving the file object’s current position in the file represented as number of bytes from the beginning of the file when in binary mode and an opaque number when in text mode. To change the file object’s position, use . The position is computed from adding offset to a reference point; the reference point is selected by the whence argument. A whence value of 0 measures from the beginning of the file, 1 uses the current file position, and 2 uses the end of the file as the reference point. whence can be omitted and defaults to 0, using the beginning of the file as the reference point. # Go to the 6th byte in the file # Go to the 3rd byte before the end In text files (those opened without a in the mode string), only seeks relative to the beginning of the file are allowed (the exception being seeking to the very file end with ) and the only valid offset values are those returned from the , or zero. Any other offset value produces undefined behaviour. File objects have some additional methods, such as and which are less frequently used; consult the Library Reference for a complete guide to file objects. Strings can easily be written to and read from a file. Numbers take a bit more effort, since the method only returns strings, which will have to be passed to a function like , which takes a string like and returns its numeric value 123. When you want to save more complex data types like nested lists and dictionaries, parsing and serializing by hand becomes complicated. Rather than having users constantly writing and debugging code to save complicated data types to files, Python allows you to use the popular data interchange format called JSON (JavaScript Object Notation). The standard module called can take Python data hierarchies, and convert them to string representations; this process is called serializing. Reconstructing the data from the string representation is called deserializing. Between serializing and deserializing, the string representing the object may have been stored in a file or data, or sent over a network connection to some distant machine. The JSON format is commonly used by modern applications to allow for data exchange. Many programmers are already familiar with it, which makes it a good choice for interoperability. If you have an object , you can view its JSON string representation with a simple line of code: Another variant of the function, called , simply serializes the object to a text file. So if is a text file object opened for writing, we can do this: To decode the object again, if is a binary file or text file object which has been opened for reading: JSON files must be encoded in UTF-8. Use when opening JSON file as a text file for both of reading and writing. This simple serialization technique can handle lists and dictionaries, but serializing arbitrary class instances in JSON requires a bit of extra effort. The reference for the module contains an explanation of this. Contrary to JSON, pickle is a protocol which allows the serialization of arbitrarily complex Python objects. As such, it is specific to Python and cannot be used to communicate with applications written in other languages. It is also insecure by default: deserializing pickle data coming from an untrusted source can execute arbitrary code, if the data was crafted by a skilled attacker."
    },
    {
        "link": "https://docs.python.org/3/library/functions.html",
        "document": "The Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order.\n\nOpen file and return a corresponding file object. If the file cannot be opened, an is raised. See Reading and Writing Files for more examples of how to use this function. file is a path-like object giving the pathname (absolute or relative to the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given, it is closed when the returned I/O object is closed unless closefd is set to .) mode is an optional string that specifies the mode in which the file is opened. It defaults to which means open for reading in text mode. Other common values are for writing (truncating the file if it already exists), for exclusive creation, and for appending (which on some Unix systems, means that all writes append to the end of the file regardless of the current seek position). In text mode, if encoding is not specified the encoding used is platform-dependent: is called to get the current locale encoding. (For reading and writing raw bytes use binary mode and leave encoding unspecified.) The available modes are: open for writing, truncating the file first open for exclusive creation, failing if the file already exists open for writing, appending to the end of file if it exists The default mode is (open for reading text, a synonym of ). Modes and open and truncate the file. Modes and open the file with no truncation. As mentioned in the Overview, Python distinguishes between binary and text I/O. Files opened in binary mode (including in the mode argument) return contents as objects without any decoding. In text mode (the default, or when is included in the mode argument), the contents of the file are returned as , the bytes having been first decoded using a platform-dependent encoding or using the specified encoding if given. Python doesn’t depend on the underlying operating system’s notion of text files; all the processing is done by Python itself, and is therefore platform-independent. buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable when writing in text mode), and an integer > 1 to indicate the size in bytes of a fixed-size chunk buffer. Note that specifying a buffer size this way applies for binary buffered I/O, but (i.e., files opened with ) would have another buffering. To disable buffering in , consider using the flag for . When no buffering argument is given, the default buffering policy works as follows:\n• None Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device’s “block size” and falling back on . On many systems, the buffer will typically be 4096 or 8192 bytes long.\n• None “Interactive” text files (files for which returns ) use line buffering. Other text files use the policy described above for binary files. encoding is the name of the encoding used to decode or encode the file. This should only be used in text mode. The default encoding is platform dependent (whatever returns), but any text encoding supported by Python can be used. See the module for the list of supported encodings. errors is an optional string that specifies how encoding and decoding errors are to be handled—this cannot be used in binary mode. A variety of standard error handlers are available (listed under Error Handlers), though any error handling name that has been registered with is also valid. The standard names include:\n• None to raise a exception if there is an encoding error. The default value of has the same effect.\n• None ignores errors. Note that ignoring encoding errors can lead to data loss.\n• None causes a replacement marker (such as ) to be inserted where there is malformed data.\n• None will represent any incorrect bytes as low surrogate code units ranging from U+DC80 to U+DCFF. These surrogate code units will then be turned back into the same bytes when the error handler is used when writing data. This is useful for processing files in an unknown encoding.\n• None is only supported when writing to a file. Characters not supported by the encoding are replaced with the appropriate XML character reference .\n• None (also only supported when writing) replaces unsupported characters with escape sequences. newline determines how to parse newline characters from the stream. It can be , , , , and . It works as follows:\n• None When reading input from the stream, if newline is , universal newlines mode is enabled. Lines in the input can end in , , or , and these are translated into before being returned to the caller. If it is , universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.\n• None When writing output to the stream, if newline is , any characters written are translated to the system default line separator, . If newline is or , no translation takes place. If newline is any of the other legal values, any characters written are translated to the given string. If closefd is and a file descriptor rather than a filename was given, the underlying file descriptor will be kept open when the file is closed. If a filename is given closefd must be (the default); otherwise, an error will be raised. A custom opener can be used by passing a callable as opener. The underlying file descriptor for the file object is then obtained by calling opener with (file, flags). opener must return an open file descriptor (passing as opener results in functionality similar to passing ). The following example uses the dir_fd parameter of the function to open a file relative to a given directory: 'This will be written to somedir/spamspam.txt' The type of file object returned by the function depends on the mode. When is used to open a file in a text mode ( , , , , etc.), it returns a subclass of (specifically ). When used to open a file in a binary mode with buffering, the returned class is a subclass of . The exact class varies: in read binary mode, it returns an ; in write binary and append binary modes, it returns an , and in read/write mode, it returns an . When buffering is disabled, the raw stream, a subclass of , , is returned. See also the file handling modules, such as , (where is declared), , , , and . The and arguments may have been modified or inferred from the original call.\n• None used to be raised, it is now an alias of .\n• None is now raised if the file opened in exclusive creation mode ( ) already exists.\n• None The file is now non-inheritable.\n• None If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an exception (see PEP 475 for the rationale).\n• None On Windows, opening a console buffer may return a subclass of other than . Changed in version 3.11: The mode has been removed.\n\nReturn a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class. The object_or_type determines the method resolution order to be searched. The search starts from the class right after the type. For example, if of object_or_type is and the value of type is , then searches . The attribute of the class corresponding to object_or_type lists the method resolution search order used by both and . The attribute is dynamic and can change whenever the inheritance hierarchy is updated. If the second argument is omitted, the super object returned is unbound. If the second argument is an object, must be true. If the second argument is a type, must be true (this is useful for classmethods). When called directly within an ordinary method of a class, both arguments may be omitted (“zero-argument ”). In this case, type will be the enclosing class, and obj will be the first argument of the immediately enclosing function (typically ). (This means that zero-argument will not work as expected within nested functions, including generator expressions, which implicitly create nested functions.) There are two typical use cases for super. In a class hierarchy with single inheritance, super can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable. This use closely parallels the use of super in other programming languages. The second use case is to support cooperative multiple inheritance in a dynamic execution environment. This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance. This makes it possible to implement “diamond diagrams” where multiple base classes implement the same method. Good design dictates that such implementations have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime). For both use cases, a typical superclass call looks like this: # This does the same thing as: In addition to method lookups, also works for attribute lookups. One possible use case for this is calling descriptors in a parent or sibling class. Note that is implemented as part of the binding process for explicit dotted attribute lookups such as . It does so by implementing its own method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, is undefined for implicit lookups using statements or operators such as . Also note that, aside from the zero argument form, is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods. For practical suggestions on how to design cooperative classes using , see guide to using super()."
    },
    {
        "link": "https://realpython.com/python-print",
        "document": "If you’re like most Python users, including me, then you probably started your Python journey by learning about . It helped you write your very own one-liner. You can use it to display formatted messages onto the screen and perhaps find some bugs. But if you think that’s all there is to know about Python’s function, then you’re missing out on a lot!\n\nKeep reading to take full advantage of this seemingly boring and unappreciated little function. This tutorial will get you up to speed with using Python effectively. However, prepare for a deep dive as you go through the sections. You may be surprised how much has to offer!\n\nBy the end of this tutorial, you’ll know how to:\n\nIf you’re a complete beginner, then you’ll benefit most from reading the first part of this tutorial, which illustrates the essentials of printing in Python. Otherwise, feel free to skip that part and jump around as you see fit.\n\nLet’s jump in by looking at a few real-life examples of printing in Python. By the end of this section, you’ll know every possible way of calling . Or, in programmer lingo, you’d say you’ll be familiar with the function signature. The simplest example of using Python requires just a few keystrokes: You don’t pass any arguments, but you still need to put empty parentheses at the end, which tell Python to actually execute the function rather than just refer to it by name. This will produce an invisible newline character, which in turn will cause a blank line to appear on your screen. You can call multiple times like this to add vertical space. It’s just as if you were hitting on your keyboard in a word processor. A newline character is a special control character used to indicate the end of a line (EOL). It usually doesn’t have a visible representation on the screen, but some text editors can display such non-printable characters with little graphics. The word “character” is somewhat of a misnomer in this case, because a newline is often more than one character long. For example, the Windows operating system, as well as the HTTP protocol, represent newlines with a pair of characters. Sometimes you need to take those differences into account to design truly portable programs. To find out what constitutes a newline in your operating system, use Python’s built-in module. This will immediately tell you that Windows and DOS represent the newline as a sequence of followed by : On Unix, Linux, and recent versions of macOS, it’s a single character: The classic Mac OS X, however, sticks to its own “think different” philosophy by choosing yet another representation: Notice how these characters appear in string literals. They use special syntax with a preceding backslash ( ) to denote the start of an escape character sequence. Such sequences allow for representing control characters, which would be otherwise invisible on screen. Most programming languages come with a predefined set of escape sequences for special characters such as these:\n• : newline, also known as line feed (LF) The last two are reminiscent of mechanical typewriters, which required two separate commands to insert a newline. The first command would move the carriage back to the beginning of the current line, while the second one would advance the roll to the next line. By comparing the corresponding ASCII character codes, you’ll see that putting a backslash in front of a character changes its meaning completely. However, not all characters allow for this–only the special ones. To compare ASCII character codes, you may want to use the built-in function: Keep in mind that, in order to form a correct escape sequence, there must be no space between the backslash character and a letter! As you just saw, calling without arguments results in a blank line, which is a line comprised solely of the newline character. Don’t confuse this with an empty line, which doesn’t contain any characters at all, not even the newline! You can use Python’s string literals to visualize these two: The first one is one character long, whereas the second one has no content. Note: To remove the newline character from a string in Python, use its method, like this: This strips any trailing whitespace from the right edge of the string of characters. In a more common scenario, you’d want to communicate some message to the end user. There are a few ways to achieve this. First, you may pass a string literal directly to : 'Please wait while the program is loading...' This will print the message verbatim onto the screen. String literals in Python can be enclosed either in single quotes ( ) or double quotes ( ). According to the official PEP 8 style guide, you should just pick one and keep using it consistently. There’s no difference, unless you need to nest one in another. For example, you can’t use double quotes for the literal and also include double quotes inside of it, because that’s ambiguous for the Python interpreter: What you want to do is enclose the text, which contains double quotes, within single quotes: The same trick would work the other way around: Alternatively, you could use escape character sequences mentioned earlier, to make Python treat those internal double quotes literally as part of the string literal: Escaping is fine and dandy, but it can sometimes get in the way. Specifically, when you need your string to contain relatively many backslash characters in literal form. One classic example is a file path on Windows: Notice how each backslash character needs to be escaped with yet another backslash. This is even more prominent with regular expressions, which quickly get convoluted due to the heavy use of special characters: Fortunately, you can turn off character escaping entirely with the help of raw-string literals. Simply prepend an or before the opening quote, and now you end up with this: That’s much better, isn’t it? There are a few more prefixes that give special meaning to string literals in Python, but you won’t get into them here. Lastly, you can define multi-line string literals by enclosing them between or , which are often used as docstrings. To prevent an initial newline, simply put the text right after the opening : You can also use a backslash to get rid of the newline: To remove indentation from a multi-line string, you might take advantage of the built-in module: This will take care of unindenting paragraphs for you. There are also a few other useful functions in for text alignment you’d find in a word processor. Secondly, you could extract that message into its own variable with a meaningful name to enhance readability and promote code reuse: 'Please wait while the program is loading...' Lastly, you could pass an expression, like string concatenation, to be evaluated before printing the result: Hello, jdoe! How are you? In fact, there are a dozen ways to format messages in Python. I highly encourage you to take a look at f-strings, introduced in Python 3.6, because they offer the most concise syntax of them all: Moreover, f-strings will prevent you from making a common mistake, which is forgetting to type cast concatenated operands. Python is a strongly typed language, which means it won’t allow you to do this: File , line , in : can only concatenate str (not \"int\") to str That’s wrong because adding numbers to strings doesn’t make sense. You need to explicitly convert the number to string first, in order to join them together: Unless you handle such errors yourself, the Python interpreter will let you know about a problem by showing a traceback. Note: is a global built-in function that converts an object into its string representation. You can call it directly on any object, for example, a number: Built-in data types have a predefined string representation out of the box, but later in this article, you’ll find out how to provide one for your custom classes. As with any function, it doesn’t matter whether you pass a literal, a variable, or an expression. Unlike many other functions, however, will accept anything regardless of its type. So far, you only looked at the string, but how about other data types? Let’s try literals of different built-in types and see what comes out: Watch out for the constant, though. Despite being used to indicate an absence of a value, it will show up as rather than an empty string: How does know how to work with all these different types? Well, the short answer is that it doesn’t. It implicitly calls behind the scenes to type cast any object into a string. Afterward, it treats strings in a uniform way. Later in this tutorial, you’ll learn how to use this mechanism for printing custom data types such as your classes. Okay, you’re now able to call with a single argument or without any arguments. You know how to print fixed or formatted messages onto the screen. The next subsection will expand on message formatting a little bit. To achieve the same result in the previous language generation, you’d normally want to drop the parentheses enclosing the text: That’s because wasn’t a function back then, as you’ll see in the next section. Note, however, that in some cases parentheses in Python are redundant. It wouldn’t harm to include them as they’d just get ignored. Does that mean you should be using the statement as if it were a function? Absolutely not! For example, parentheses enclosing a single expression or a literal are optional. Both instructions produce the same result in Python 2: Round brackets are actually part of the expression rather than the statement. If your expression happens to contain only one item, then it’s as if you didn’t include the brackets at all. On the other hand, putting parentheses around multiple items forms a tuple: This is a known source of confusion. In fact, you’d also get a tuple by appending a trailing comma to the only item surrounded by parentheses: The bottom line is that you shouldn’t call with brackets in Python 2. Although, to be completely accurate, you can work around this with the help of a import, which you’ll read more about in the relevant section. You saw called without any arguments to produce a blank line and then called with a single argument to display either a fixed or a formatted message. However, it turns out that this function can accept any number of positional arguments, including zero, one, or more arguments. That’s very handy in a common case of message formatting, where you’d want to join a few elements together. Arguments can be passed to a function in one of several ways. One way is by explicitly naming the arguments when you’re calling the function, like this: Since arguments can be uniquely identified by name, their order doesn’t matter. Swapping them out will still give the same result: Conversely, arguments passed without names are identified by their position. That’s why positional arguments need to follow strictly the order imposed by the function signature: allows an arbitrary number of positional arguments thanks to the parameter. Let’s have a look at this example: My name is jdoe and I am 42 concatenated all four arguments passed to it, and it inserted a single space between them so that you didn’t end up with a squashed message like . Notice that it also took care of proper type casting by implicitly calling on each argument before joining them together. If you recall from the previous subsection, a naïve concatenation may easily result in an error due to incompatible types: File , line , in : can only concatenate str (not \"int\") to str Apart from accepting a variable number of positional arguments, defines four named or keyword arguments, which are optional since they all have default values. You can view their brief documentation by calling from the interactive interpreter. Let’s focus on just for now. It stands for separator and is assigned a single space ( ) by default. It determines the value to join elements with. It has to be either a string or , but the latter has the same effect as the default space: If you wanted to suppress the separator completely, you’d have to pass an empty string ( ) instead: You may want to join its arguments as separate lines. In that case, simply pass the escaped newline character described earlier: A more useful example of the parameter would be printing something like file paths: Remember that the separator comes between the elements, not around them, so you need to account for that in one way or another: Specifically, you can insert a slash character ( ) into the first positional argument, or use an empty string as the first argument to enforce the leading slash. Note: Be careful about joining elements of a list or tuple. Doing it manually will result in a well-known if at least one of the elements isn’t a string: It’s safer to just unpack the sequence with the star operator ( ) and let handle type casting: Unpacking is effectively the same as calling with individual elements of the list. One more interesting example could be exporting data to a comma-separated values (CSV) format: This wouldn’t handle edge cases such as escaping commas correctly, but for simple use cases, it should do. The line above would show up in your terminal window. In order to save it to a file, you’d have to redirect the output. Later in this section, you’ll see how to use to write text to files straight from Python. Finally, the parameter isn’t constrained to a single character only. You can join elements with strings of any length: In the upcoming subsections, you’ll explore the remaining keyword arguments of the function. To print multiple elements in Python 2, you must drop the parentheses around them, just like before: My name is jdoe and I am 42 If you kept them, on the other hand, you’d be passing a single tuple element to the statement: Moreover, there’s no way of altering the default separator of joined elements in Python 2, so one workaround is to use string interpolation like so: My name is jdoe and I am 42 That was the default way of formatting strings until the method got backported from Python 3. Sometimes you don’t want to end your message with a trailing newline so that subsequent calls to will continue on the same line. Classic examples include updating the progress of a long-running operation or prompting the user for input. In the latter case, you want the user to type in the answer on the same line: Are you sure you want to do this? [y/n] y Many programming languages expose functions similar to through their standard libraries, but they let you decide whether to add a newline or not. For example, in Java and C#, you have two distinct functions, while other languages require you to explicitly append at the end of a string literal. Here are a few examples of syntax in such languages: In contrast, Python’s function always adds without asking, because that’s what you want in most cases. To disable it, you can take advantage of yet another keyword argument, , which dictates what to end the line with. In terms of semantics, the parameter is almost identical to the one that you saw earlier:\n• It must be a string or .\n• It can be arbitrarily long.\n• It has a default value of .\n• If equal to , it’ll have the same effect as the default value.\n• If equal to an empty string ( ), it’ll suppress the newline. Now you understand what’s happening under the hood when you’re calling without arguments. Since you don’t provide any positional arguments to the function, there’s nothing to be joined, and so the default separator isn’t used at all. However, the default value of still applies, and a blank line shows up. Note: You may be wondering why the parameter has a fixed default value rather than whatever makes sense on your operating system. Well, you don’t have to worry about newline representation across different operating systems when printing, because will handle the conversion automatically. Just remember to always use the escape sequence in string literals. This is currently the most portable way of printing a newline character in Python: If you were to try to forcefully print a Windows-specific newline character on a Linux machine, for example, you’d end up with broken output: On the flip side, when you open a file for reading with , you don’t need to care about newline representation either. The function will translate any system-specific newline it encounters into a universal . At the same time, you have control over how the newlines should be treated both on input and output if you really need that. To disable the newline, you must specify an empty string through the keyword argument: Even though these are two separate calls, which can execute a long time apart, you’ll eventually see only one line. First, it’ll look like this: However, after the second call to , the same line will appear on the screen as: As with , you can use to join individual pieces into a big blob of text with a custom separator. Instead of joining multiple arguments, however, it’ll append text from each function call to the same line: These three instructions will output a single line of text: The first sentence. The second sentence. The last sentence. You can mix the two keyword arguments: Not only do you get a single line of text, but all items are separated with a comma: There’s nothing to stop you from using the newline character with some extra padding around it: It would print out the following piece of text: As you can see, the keyword argument will accept arbitrary strings. Note: Looping over lines in a text file preserves their own newline characters, which combined with the function’s default behavior will result in a redundant newline character: There are two newlines after each line of text. You want to strip one of the them, as shown earlier in this article, before printing the line: Alternatively, you can keep the newline in the content but suppress the one appended by automatically. You’d use the keyword argument to do that: By ending a line with an empty string, you effectively disable one of the newlines. You’re getting more acquainted with printing in Python, but there’s still a lot of useful information ahead. In the upcoming subsection, you’ll learn how to intercept and redirect the function’s output. Preventing a line break in Python 2 requires that you append a trailing comma to the expression: However, that’s not ideal because it also adds an unwanted space, which would translate to instead of in Python 3. You can test this with the following code snippet: Notice there’s a space between the words and : BEFORE hello AFTER In order to get the expected result, you’d need to use one of the tricks explained later, which is either importing the function from or falling back to the module: This will print the correct output without extra space: While using the module gives you control over what gets printed to the standard output, the code becomes a little bit more cluttered. Believe it or not, doesn’t know how to turn messages into text on your screen, and frankly it doesn’t need to. That’s a job for lower-level layers of code, which understand bytes and know how to push them around. is an abstraction over these layers, providing a convenient interface that merely delegates the actual printing to a stream or file-like object. A stream can be any file on your disk, a network socket, or perhaps an in-memory buffer. In addition to this, there are three standard streams provided by the operating system: Standard output is what you see in the terminal when you run various command-line programs including your own Python scripts: cat hello.py print('This will appear on stdout') python hello.py This will appear on stdout Unless otherwise instructed, will default to writing to standard output. However, you can tell your operating system to temporarily swap out for a file stream, so that any output ends up in that file rather than the screen: python hello.py > file.txt cat file.txt This will appear on stdout The standard error is similar to in that it also shows up on the screen. Nonetheless, it’s a separate stream, whose purpose is to log error messages for diagnostics. By redirecting one or both of them, you can keep things clean. Note: To redirect , you need to know about file descriptors, also known as file handles. They’re arbitrary, albeit constant, numbers associated with standard streams. Below, you’ll find a summary of the file descriptors for a family of POSIX-compliant operating systems: Knowing those descriptors allows you to redirect one or more streams at a time: Redirect and to the same file Note that is the same as . Some programs use different coloring to distinguish between messages printed to and : While both and are write-only, is read-only. You can think of standard input as your keyboard, but just like with the other two, you can swap out for a file to read data from. In Python, you can access all standard streams through the built-in module: As you can see, these predefined values resemble file-like objects with and attributes as well as and methods among many others. By default, is bound to through its argument, but you can change that. Use that keyword argument to indicate a file that was open in write or append mode, so that messages go straight to it: This will make your code immune to stream redirection at the operating system level, which might or might not be desired. For more information on working with files in Python, you can check out Reading and Writing Files in Python (Guide). Note: Don’t try using for writing binary data as it’s only well suited for text. If you wanted to write raw bytes on the standard output, then this will fail too because is a character stream: File , line , in : write() argument must be str, not bytes You must dig deeper to get a handle of the underlying byte stream instead: This prints an uppercase letter and a newline character, which correspond to decimal values of 65 and 10 in ASCII. However, they’re encoded using hexadecimal notation in the bytes literal. Note that has no control over character encoding. It’s the stream’s responsibility to encode received Unicode strings into bytes correctly. In most cases, you won’t set the encoding yourself, because the default UTF-8 is what you want. If you really need to, perhaps for legacy systems, you can use the argument of : Instead of a real file existing somewhere in your file system, you can provide a fake one, which would reside in your computer’s memory. You’ll use this technique later for mocking in unit tests: If you got to this point, then you’re left with only one keyword argument in , which you’ll see in the next subsection. It’s probably the least used of them all. Nevertheless, there are times when it’s absolutely necessary. There’s a special syntax in Python 2 for replacing the default with a custom file in the statement: Because strings and bytes are represented with the same type in Python 2, the statement can handle binary data just fine: Although, there’s a problem with character encoding. The function in Python 2 lacks the parameter, which would often result in the dreadful : Notice how non-Latin characters must be escaped in both Unicode and string literals to avoid a syntax error. Take a look at this example: Alternatively, you could specify source code encoding according to PEP 263 at the top of the file, but that wasn’t the best practice due to portability issues: Your best bet is to encode the Unicode string just before printing it. You can do this manually: However, a more convenient option is to use the built-in module: It’ll take care of making appropriate conversions when you need to read or write files. In the previous subsection, you learned that delegates printing to a file-like object such as . Some streams, however, buffer certain I/O operations to enhance performance, which can get in the way. Let’s take a look at an example. Imagine you were writing a countdown timer, which should append the remaining time to the same line every second: Your first attempt may look something like this: As long as the variable is greater than zero, the code keeps appending text without a trailing newline and then goes to sleep for one second. Finally, when the countdown is finished, it prints and terminates the line. Unexpectedly, instead of counting down every second, the program idles wastefully for three seconds, and then suddenly prints the entire line at once: That’s because the operating system buffers subsequent writes to the standard output in this case. You need to know that there are three kinds of streams with respect to buffering: Unbuffered is self-explanatory, that is, no buffering is taking place, and all writes have immediate effect. A line-buffered stream waits before firing any I/O calls until a line break appears somewhere in the buffer, whereas a block-buffered one simply allows the buffer to fill up to a certain size regardless of its content. Standard output is both line-buffered and block-buffered, depending on which event comes first. Buffering helps to reduce the number of expensive I/O calls. Think about sending messages over a high-latency network, for example. When you connect to a remote server to execute commands over the SSH protocol, each of your keystrokes may actually produce an individual data packet, which is orders of magnitude bigger than its payload. What an overhead! It would make sense to wait until at least a few characters are typed and then send them together. That’s where buffering steps in. On the other hand, buffering can sometimes have undesired effects as you just saw with the countdown example. To fix it, you can simply tell to forcefully flush the stream without waiting for a newline character in the buffer using its flag: That’s all. Your countdown should work as expected now, but don’t take my word for it. Go ahead and test it to see the difference. Congratulations! At this point, you’ve seen examples of calling that cover all of its parameters. You know their purpose and when to use them. Understanding the signature is only the beginning, however. In the upcoming sections, you’ll see why. There isn’t an easy way to flush the stream in Python 2, because the statement doesn’t allow for it by itself. You need to get a handle of its lower-level layer, which is the standard output, and call it directly: Alternatively, you could disable buffering of the standard streams either by providing the flag to the Python interpreter or by setting up the environment variable: Note that was backported to Python 2 and made available through the module. Unfortunately, it doesn’t come with the parameter: Help on built-in function print in module __builtin__: What you’re seeing here is a docstring of the function. You can display docstrings of various objects in Python using the built-in function. Up until now, you only dealt with built-in data types such as strings and numbers, but you’ll often want to print your own abstract data types. Let’s have a look at different ways of defining them. For simple objects without any logic, whose purpose is to carry data, you’ll typically take advantage of , which is available in the standard library. Named tuples have a neat textual representation out of the box: That’s great as long as holding data is enough, but in order to add behaviors to the type, you’ll eventually need to define a class. Take a look at this example: If you now create an instance of the class and try to print it, you’ll get this bizarre output, which is quite different from the equivalent : It’s the default representation of objects, which comprises their address in memory, the corresponding class name and a module in which they were defined. You’ll fix that in a bit, but just for the record, as a quick workaround you could combine and a custom class through inheritance: Your class has just become a specialized kind of with two attributes, which you can customize. Note: In Python 3, the statement can be replaced with the ellipsis ( ) literal to indicate a placeholder: This prevents the interpreter from raising due to missing indented block of code. That’s better than a plain , because not only do you get printing right for free, but you can also add custom methods and properties to the class. However, it solves one problem while introducing another. Remember that tuples, including named tuples, are immutable in Python, so they can’t change their values once created. It’s true that designing immutable data types is desirable, but in many cases, you’ll want them to allow for change, so you’re back with regular classes again. Note: Following other languages and frameworks, Python 3.7 introduced data classes, which you can think of as mutable tuples. This way, you get the best of both worlds: The syntax for variable annotations, which is required to specify class fields with their corresponding types, was defined in Python 3.6. From earlier subsections, you already know that implicitly calls the built-in function to convert its positional arguments into strings. Indeed, calling manually against an instance of the regular class yields the same result as printing it: , in turn, looks for one of two magic methods within the class body, which you typically implement. If it doesn’t find one, then it falls back to the ugly default representation. Those magic methods are, in order of search: The first one is recommended to return a short, human-readable text, which includes information from the most relevant attributes. After all, you don’t want to expose sensitive data, such as user passwords, when printing objects. However, the other one should provide complete information about an object, to allow for restoring its state from a string. Ideally, it should return valid Python code, so that you can pass it directly to : Notice the use of another built-in function, , which always tries to call in an object, but falls back to the default representation if it doesn’t find that method. Note: Even though itself uses for type casting, some compound data types delegate that call to on their members. This happens to lists and tuples, for example. Consider this class with both magic methods, which return alternative string representations of the same object: If you print a single object of the class, then you won’t see the password, because will call , which eventually will invoke : However, if you put the same variable inside a list by wrapping it in square brackets, then the password will become clearly visible: That’s because sequences, such as lists and tuples, implement their method so that all of their elements are first converted with . Python gives you a lot of freedom when it comes to defining your own data types if none of the built-in ones meet your needs. Some of them, such as named tuples and data classes, offer string representations that look good without requiring any work on your part. Still, for the most flexibility, you’ll have to define a class and override its magic methods described above. The semantics of and didn’t change since Python 2, but you must remember that strings were nothing more than glorified byte arrays back then. To convert your objects into proper Unicode, which was a separate data type, you’d have to provide yet another magic method: . Here’s an example of the same class in Python 2: As you can see, this implementation delegates some work to avoid duplication by calling the built-in function on itself. Both and methods must return strings, so they encode Unicode characters into specific byte representations called character sets. UTF-8 is the most widespread and safest encoding, while is a special constant to express funky characters, such as , as escape sequences in plain ASCII, such as . The statement is looking for the magic method in the class, so the chosen charset must correspond to the one used by the terminal. For example, default encoding in DOS and Windows is CP 852 rather than UTF-8, so running this can result in a or even garbled output: However, if you ran the same code on a system with UTF-8 encoding, then you’d get the proper spelling of a popular Russian name: It’s recommended to convert strings to Unicode as early as possible, for example, when you’re reading data from a file, and use it consistently everywhere in your code. At the same time, you should encode Unicode back to the chosen character set right before presenting it to the user. It seems as if you have more control over string representation of objects in Python 2 because there’s no magic method in Python 3 anymore. You may be asking yourself if it’s possible to convert an object to its byte string representation rather than a Unicode string in Python 3. It’s possible, with a special method that does just that: Using the built-in function on an instance delegates the call to its method defined in the corresponding class.\n\nYou know how to use quite well at this point, but knowing what it is will allow you to use it even more effectively and consciously. After reading this section, you’ll understand how printing in Python has improved over the years. You’ve seen that is a function in Python 3. More specifically, it’s a built-in function, which means that you don’t need to import it from anywhere: It’s always available in the global namespace so that you can call it directly, but you can also access it through a module from the standard library: This way, you can avoid name collisions with custom functions. Let’s say you wanted to redefine so that it doesn’t append a trailing newline. At the same time, you wanted to rename the original function to something like : Now you have two separate printing functions just like in the Java programming language. You’ll define custom functions in the mocking section later as well. Also, note that you wouldn’t be able to overwrite in the first place if it wasn’t a function. On the other hand, isn’t a function in the mathematical sense, because it doesn’t return any meaningful value other than the implicit : Such functions are, in fact, procedures or subroutines that you call to achieve some kind of side-effect, which ultimately is a change of a global state. In the case of , that side-effect is showing a message on the standard output or writing to a file. Because is a function, it has a well-defined signature with known attributes. You can quickly find its documentation using the editor of your choice, without having to remember some weird syntax for performing a certain task. Besides, functions are easier to extend. Adding a new feature to a function is as easy as adding another keyword argument, whereas changing the language to support that new feature is much more cumbersome. Think of stream redirection or buffer flushing, for example. Another benefit of being a function is composability. Functions are so-called first-class objects or first-class citizens in Python, which is a fancy way of saying they’re values just like strings or numbers. This way, you can assign a function to a variable, pass it to another function, or even return one from another. isn’t different in this regard. For instance, you can take advantage of it for dependency injection: Here, the parameter lets you inject a callback function, which defaults to but can be any callable. In this example, printing is completely disabled by substituting with a dummy function that does nothing. Note: A dependency is any piece of code required by another bit of code. Dependency injection is a technique used in code design to make it more testable, reusable, and open for extension. You can achieve it by referring to dependencies indirectly through abstract interfaces and by providing them in a push rather than pull fashion. There’s a funny explanation of dependency injection circulating on the Internet: When you go and get things out of the refrigerator for yourself, you can cause problems. You might leave the door open, you might get something Mommy or Daddy doesn’t want you to have. You might even be looking for something we don’t even have or which has expired. What you should be doing is stating a need, “I need something to drink with lunch,” and then we will make sure you have something when you sit down to eat. Composition allows you to combine a few functions into a new one of the same kind. Let’s see this in action by specifying a custom function that prints to the standard error stream and prefixes all messages with a given log level: This custom function uses partial functions to achieve the desired effect. It’s an advanced concept borrowed from the functional programming paradigm, so you don’t need to go too deep into that topic for now. However, if you’re interested in this topic, I recommend taking a look at the module. Unlike statements, functions are values. That means you can mix them with expressions, in particular, lambda expressions. Instead of defining a full-blown function to replace with, you can make an anonymous lambda expression that calls it: However, because a lambda expression is defined in place, there’s no way of referring to it elsewhere in the code. Note: In Python, you can’t put statements, such as assignments, conditional statements, loops, and so on, in an anonymous lambda function. It has to be a single expression! Another kind of expression is a ternary conditional expression: Python has both conditional statements and conditional expressions. The latter is evaluated to a single value that can be assigned to a variable or passed to a function. In the example above, you’re interested in the side-effect rather than the value, which evaluates to , so you simply ignore it. As you can see, functions allow for an elegant and extensible solution, which is consistent with the rest of the language. In the next subsection, you’ll discover how not having as a function caused a lot of headaches. A statement is an instruction that may evoke a side-effect when executed but never evaluates to a value. In other words, you wouldn’t be able to print a statement or assign it to a variable like this: Here are a few more examples of statements in Python: Note: Python 3.8 brings a controversial walrus operator ( ), which is an assignment expression. With it, you can evaluate an expression and assign the result to a variable at the same time, even within another expression! Take a look at this example, which calls an expensive function once and then reuses the result for further computation: This is useful for simplifying the code without losing its efficiency. Typically, performant code tends to be more verbose: The controversy behind this new piece of syntax caused a lot of argument. An abundance of negative comments and heated debates eventually led Guido van Rossum to step down from the Benevolent Dictator For Life or BDFL position. Statements are usually comprised of reserved keywords such as , , or that have fixed meaning in the language. You can’t use them to name your variables or other symbols. That’s why redefining or mocking the statement isn’t possible in Python 2. You’re stuck with what you get. Furthermore, you can’t print from anonymous functions, because statements aren’t accepted in lambda expressions: The syntax of the statement is ambiguous. Sometimes you can add parentheses around the message, and they’re completely optional: At other times they change how the message is printed: String concatenation can raise a due to incompatible types, which you have to handle manually, for example: Compare this with similar code in Python 3, which leverages sequence unpacking: There aren’t any keyword arguments for common tasks such as flushing the buffer or stream redirection. You need to remember the quirky syntax instead. Even the built-in function isn’t that helpful with regards to the statement: Trailing newline removal doesn’t work quite right, because it adds an unwanted space. You can’t compose multiple statements together, and, on top of that, you have to be extra diligent about character encoding. The list of problems goes on and on. If you’re curious, you can jump back to the previous section and look for more detailed explanations of the syntax in Python 2. However, you can mitigate some of those problems with a much simpler approach. It turns out the function was backported to ease the migration to Python 3. You can import it from a special module, which exposes a selection of language features released in later Python versions. Note: You may import future functions as well as baked-in language constructs such as the statement. To find out exactly what features are available to you, inspect the module: You could also call , but that would show a lot of uninteresting internal details of the module. To enable the function in Python 2, you need to add this import statement at the beginning of your source code: From now on the statement is no longer available, but you have the function at your disposal. Note that it isn’t the same function like the one in Python 3, because it’s missing the keyword argument, but the rest of the arguments are the same. Other than that, it doesn’t spare you from managing character encodings properly. Here’s an example of calling the function in Python 2: You now have an idea of how printing in Python evolved and, most importantly, understand why these backward-incompatible changes were necessary. Knowing this will surely help you become a better Python programmer.\n\nIf you thought that printing was only about lighting pixels up on the screen, then technically you’d be right. However, there are ways to make it look cool. In this section, you’ll find out how to format complex data structures, add colors and other decorations, build interfaces, use animation, and even play sounds with text! Computer languages allow you to represent data as well as executable code in a structured way. Unlike Python, however, most languages give you a lot of freedom in using whitespace and formatting. This can be useful, for example in compression, but it sometimes leads to less readable code. Pretty-printing is about making a piece of data or code look more appealing to the human eye so that it can be understood more easily. This is done by indenting certain lines, inserting newlines, reordering elements, and so forth. Python comes with the module in its standard library, which will help you in pretty-printing large data structures that don’t fit on a single line. Because it prints in a more human-friendly way, many popular REPL tools, including JupyterLab and IPython, use it by default in place of the regular function. Note: To toggle pretty printing in IPython, issue the following command: Pretty printing has been turned OFF Pretty printing has been turned ON This is an example of Magic in IPython. There are a lot of built-in commands that start with a percent sign ( ), but you can find more on PyPI, or even create your own. If you don’t care about not having access to the original function, then you can replace it with in your code using import renaming: Personally, I like to have both functions at my fingertips, so I’d rather use something like as a short alias: At first glance, there’s hardly any difference between the two functions, and in some cases there’s virtually none: 'hello' # Did you spot the difference? That’s because calls instead of the usual for type casting, so that you may evaluate its output as Python code if you want to. The differences become apparent as you start feeding it more complex data structures: The function applies reasonable formatting to improve readability, but you can customize it even further with a couple of parameters. For example, you may limit a deeply nested hierarchy by showing an ellipsis below a given level: The ordinary also uses ellipses but for displaying recursive data structures, which form a cycle, to avoid stack overflow error: However, is more explicit about it by including the unique identity of a self-referencing object: The last element in the list is the same object as the entire list. Note: Recursive or very large data sets can be dealt with using the module as well: This module supports most of the built-in types and is used by the Python debugger. automatically sorts dictionary keys for you before printing, which allows for consistent comparison. When you’re comparing strings, you often don’t care about a particular order of serialized attributes. Anyways, it’s always best to compare actual dictionaries before serialization. Dictionaries often represent JSON data, which is widely used on the Internet. To correctly serialize a dictionary into a valid JSON-formatted string, you can take advantage of the module. It too has pretty-printing capabilities: Notice, however, that you need to handle printing yourself, because it’s not something you’d typically want to do. Similarly, the module has an additional function that returns a string, in case you had to do something other than printing it. Surprisingly, the signature of is nothing like the function’s one. You can’t even pass more than one positional argument, which shows how much it focuses on printing data structures. As personal computers got more sophisticated, they had better graphics and could display more colors. However, different vendors had their own idea about the API design for controlling it. That changed a few decades ago when people at the American National Standards Institute decided to unify it by defining ANSI escape codes. Most of today’s terminal emulators support this standard to some degree. Until recently, the Windows operating system was a notable exception. Therefore, if you want the best portability, use the library in Python. It translates ANSI codes to their appropriate counterparts in Windows while keeping them intact in other operating systems. To check if your terminal understands a subset of the ANSI escape sequences, for example, related to colors, you can try using the following command: My default terminal on Linux says it can display 256 distinct colors, while xterm gives me only 8. The command would return a negative number if colors were unsupported. ANSI escape sequences are like a markup language for the terminal. In HTML you work with tags, such as or , to change how elements look in the document. These tags are mixed with your content, but they’re not visible themselves. Similarly, escape codes won’t show up in the terminal as long as it recognizes them. Otherwise, they’ll appear in the literal form as if you were viewing the source of a website. As its name implies, a sequence must begin with the non-printable character, whose ASCII value is 27, sometimes denoted as in hexadecimal or in octal. You may use Python number literals to quickly verify it’s indeed the same number: Additionally, you can obtain it with the escape sequence in the shell: The most common ANSI escape sequences take the following form: one or more numbers separated with The numeric code can be one or more numbers separated with a semicolon, while the character code is just one letter. Their specific meaning is defined by the ANSI standard. For example, to reset all formatting, you would type one of the following commands, which use the code zero and the letter : At the other end of the spectrum, you have compound code values. To set foreground and background with RGB channels, given that your terminal supports 24-bit depth, you could provide multiple numbers: It’s not just text color that you can set with the ANSI escape codes. You can, for example, clear and scroll the terminal window, change its background, move the cursor around, make the text blink or decorate it with an underline. In Python, you’d probably write a helper function to allow for wrapping arbitrary codes into a sequence: This would make the word appear in red, bold, and underlined font: However, there are higher-level abstractions over ANSI escape codes, such as the mentioned library, as well as tools for building user interfaces in the console. While playing with ANSI escape codes is undeniably a ton of fun, in the real world you’d rather have more abstract building blocks to put together a user interface. There are a few libraries that provide such a high level of control over the terminal, but seems to be the most popular choice. Note: To use the library in Windows, you need to install a third-party package: That’s because isn’t available in the standard library of the Python distribution for Windows. Primarily, it allows you to think in terms of independent graphical widgets instead of a blob of text. Besides, you get a lot of freedom in expressing your inner artist, because it’s really like painting a blank canvas. The library hides the complexities of having to deal with different terminals. Other than that, it has great support for keyboard events, which might be useful for writing video games. First, you need to import the module. Since it modifies the state of a running terminal, it’s important to handle errors and gracefully restore the previous state. You can do this manually, but the library comes with a convenient wrapper for your main function: Note, the function must accept a reference to the screen object, also known as , that you’ll use later for additional setup. If you run this program now, you won’t see any effects, because it terminates immediately. However, you can add a small delay to have a sneak peek: This time the screen went completely blank for a second, but the cursor was still blinking. To hide it, just call one of the configuration functions defined in the module: Let’s define the snake as a list of points in screen coordinates: The head of the snake is always the first element in the list, whereas the tail is the last one. The initial shape of the snake is horizontal, starting from the top-left corner of the screen and facing to the right. While its y-coordinate stays at zero, its x-coordinate decreases from head to tail. To draw the snake, you’ll start with the head and then follow with the remaining segments. Each segment carries coordinates, so you can unpack them: Again, if you run this code now, it won’t display anything, because you must explicitly refresh the screen afterward: You want to move the snake in one of four directions, which can be defined as vectors. Eventually, the direction will change in response to an arrow keystroke, so you may hook it up to the library’s key codes: How does a snake move? It turns out that only its head really moves to a new location, while all other segments shift towards it. In each step, almost all segments remain the same, except for the head and the tail. Assuming the snake isn’t growing, you can remove the tail and insert a new head at the beginning of the list: To get the new coordinates of the head, you need to add the direction vector to it. However, adding tuples in Python results in a bigger tuple instead of the algebraic sum of the corresponding vector components. One way to fix this is by using the built-in , , and functions. The direction will change on a keystroke, so you need to call to obtain the pressed key code. However, if the pressed key doesn’t correspond to the arrow keys defined earlier as dictionary keys, the direction won’t change: By default, however, is a blocking call that would prevent the snake from moving unless there was a keystroke. Therefore, you need to make the call non-blocking by adding yet another configuration: You’re almost done, but there’s just one last thing left. If you now loop this code, the snake will appear to be growing instead of moving. That’s because you have to erase the screen explicitly before each iteration. Finally, this is all you need to play the snake game in Python: This is merely scratching the surface of the possibilities that the module opens up. You may use it for game development like this or more business-oriented applications. Living It Up With Cool Animations Not only can animations make the user interface more appealing to the eye, but they also improve the overall user experience. When you provide early feedback to the user, for example, they’ll know if your program’s still working or if it’s time to kill it. To animate text in the terminal, you have to be able to freely move the cursor around. You can do this with one of the tools mentioned previously, that is ANSI escape codes or the library. However, I’d like to show you an even simpler way. If the animation can be constrained to a single line of text, then you might be interested in two special escape character sequences: The first one moves the cursor to the beginning of the line, whereas the second one moves it only one character to the left. They both work in a non-destructive way without overwriting text that’s already been written. Let’s take a look at a few examples. You’ll often want to display some kind of a spinning wheel to indicate a work in progress without knowing exactly how much time’s left to finish: Many command line tools use this trick while downloading data over the network. You can make a really simple stop motion animation from a sequence of characters that will cycle in a round-robin fashion: The loop gets the next character to print, then moves the cursor to the beginning of the line, and overwrites whatever there was before without adding a newline. You don’t want extra space between positional arguments, so separator argument must be blank. Also, notice the use of Python’s raw strings due to backslash characters present in the literal. When you know the remaining time or task completion percentage, then you’re able to show an animated progress bar: First, you need to calculate how many hashtags to display and how many blank spaces to insert. Next, you erase the line and build the bar from scratch: As before, each request for update repaints the entire line. Note: There’s a feature-rich library, along with a few other similar tools, that can show progress in a much more comprehensive way. If you’re old enough to remember computers with a PC speaker, then you must also remember their distinctive beep sound, often used to indicate hardware problems. They could barely make any more noises than that, yet video games seemed so much better with it. Today you can still take advantage of this small loudspeaker, but chances are your laptop didn’t come with one. In such a case, you can enable terminal bell emulation in your shell, so that a system warning sound is played instead. Go ahead and type this command to see if your terminal can play a sound: This would normally print text, but the flag enables the interpretation of backslash escapes. As you can see, there’s a dedicated escape sequence , which stands for “alert”, that outputs a special bell character. Some terminals make a sound whenever they see it. Similarly, you can print this character in Python. Perhaps in a loop to form some kind of melody. While it’s only a single note, you can still vary the length of pauses between consecutive instances. That seems like a perfect toy for Morse code playback! The rules are the following:\n• Letters are encoded with a sequence of dot (·) and dash (–) symbols.\n• A dot is one unit of time.\n• A dash is three units of time.\n• Individual symbols in a letter are spaced one unit of time apart.\n• Symbols of two adjacent letters are spaced three units of time apart.\n• Symbols of two adjacent words are spaced seven units of time apart. According to those rules, you could be “printing” an SOS signal indefinitely in the following way: In Python, you can implement it in merely ten lines of code: Maybe you could even take it one step further and make a command line tool for translating text into Morse code? Either way, I hope you’re having fun with this!\n\nNowadays, it’s expected that you ship code that meets high quality standards. If you aspire to become a professional, you must learn how to test your code. Software testing is especially important in dynamically typed languages, such as Python, which don’t have a compiler to warn you about obvious mistakes. Defects can make their way to the production environment and remain dormant for a long time, until that one day when a branch of code finally gets executed. Sure, you have linters, type checkers, and other tools for static code analysis to assist you. But they won’t tell you whether your program does what it’s supposed to do on the business level. So, should you be testing ? No. After all, it’s a built-in function that must have already gone through a comprehensive suite of tests. What you want to test, though, is whether your code is calling at the right time with the expected parameters. That’s known as a behavior. You can test behaviors by mocking real objects or functions. In this case, you want to mock to record and verify its invocations. Note: You might have heard the terms: dummy, fake, stub, spy, or mock used interchangeably. Some people make a distinction between them, while others don’t. Martin Fowler explains their differences in a short glossary and collectively calls them test doubles. Mocking in Python can be done twofold. First, you can take the traditional path of statically-typed languages by employing dependency injection. This may sometimes require you to change the code under test, which isn’t always possible if the code is defined in an external library: This is the same example I used in an earlier section to talk about function composition. It basically allows for substituting with a custom function of the same interface. To check if it prints the right message, you have to intercept it by injecting a mocked function: Calling this mock makes it save the last message in an attribute, which you can inspect later, for example in an statement. In a slightly alternative solution, instead of replacing the entire function with a custom wrapper, you could redirect the standard output to an in-memory file-like stream of characters: This time the function explicitly calls , but it exposes its parameter to the outside world. However, a more Pythonic way of mocking objects takes advantage of the built-in module, which uses a technique called monkey patching. This derogatory name stems from it being a “dirty hack” that you can easily shoot yourself in the foot with. It’s less elegant than dependency injection but definitely quick and convenient. Note: The module got absorbed by the standard library in Python 3, but before that, it was a third-party package. You had to install it separately: Other than that, you referred to it as , whereas in Python 3 it’s part of the unit testing module, so you must import from . What monkey patching does is alter implementation dynamically at runtime. Such a change is visible globally, so it may have unwanted consequences. In practice, however, patching only affects the code for the duration of test execution. To mock in a test case, you’ll typically use the decorator and specify a target for patching by referring to it with a fully qualified name, that is including the module name: This will automatically create the mock for you and inject it to the test function. However, you need to declare that your test function accepts a mock now. The underlying mock object has lots of useful methods and attributes for verifying behavior. Did you notice anything peculiar about that code snippet? Despite injecting a mock to the function, you’re not calling it directly, although you could. That injected mock is only used to make assertions afterward and maybe to prepare the context before running the test. In real life, mocking helps to isolate the code under test by removing dependencies such as a database connection. You rarely call mocks in a test, because that doesn’t make much sense. Rather, it’s other pieces of code that call your mock indirectly without knowing it. The code under test is a function that prints a greeting. Even though it’s a fairly simple function, you can’t test it easily because it doesn’t return a value. It has a side-effect. To eliminate that side-effect, you need to mock the dependency out. Patching lets you avoid making changes to the original function, which can remain agnostic about . It thinks it’s calling , but in reality, it’s calling a mock you’re in total control of. There are many reasons for testing software. One of them is looking for bugs. When you write tests, you often want to get rid of the function, for example, by mocking it away. Paradoxically, however, that same function can help you find bugs during a related process of debugging you’ll read about in the next section. You can’t monkey patch the statement in Python 2, nor can you inject it as a dependency. However, you have a few other options:\n• Patch the standard output defined in the module. Let’s examine them one by one. Stream redirection is almost identical to the example you saw earlier: There are only two differences. First, the syntax for stream redirection uses chevron ( ) instead of the argument. The other difference is where is defined. You can import it from a similarly named module, or for a faster implementation. Patching the standard output from the module is exactly what it sounds like, but you need to be aware of a few gotchas: First of all, remember to install the module as it wasn’t available in the standard library in Python 2. Secondly, the statement calls the underlying method on the mocked object instead of calling the object itself. That’s why you’ll run assertions against . Finally, a single statement doesn’t always correspond to a single call to . In fact, you’ll see the newline character written separately. The last option you have is importing from and patching it: Again, it’s nearly identical to Python 3, but the function is defined in the module rather than .\n\nIn this section, you’ll take a look at the available tools for debugging in Python, starting from a humble function, through the module, to a fully fledged debugger. After reading it, you’ll be able to make an educated decision about which of them is the most suitable in a given situation. Note: Debugging is the process of looking for the root causes of bugs or defects in software after they’ve been discovered, as well as taking steps to fix them. The term bug has an amusing story about the origin of its name. Also known as print debugging or caveman debugging, it’s the most basic form of debugging. While a little bit old-fashioned, it’s still powerful and has its uses. The idea is to follow the path of program execution until it stops abruptly, or gives incorrect results, to identify the exact instruction with a problem. You do that by inserting print statements with words that stand out in carefully chosen places. Take a look at this example, which manifests a rounding error: As you can see, the function doesn’t return the expected value of , but now you know it’s because the sum is a little off. Tracing the state of variables at different steps of the algorithm can give you a hint where the issue is. In this case, the problem lies in how floating point numbers are represented in computer memory. Remember that numbers are stored in binary form. Decimal value of turns out to have an infinite binary representation, which gets rounded. For more information on rounding numbers in Python, you can check out How to Round Numbers in Python. This method is simple and intuitive and will work in pretty much every programming language out there. Not to mention, it’s a great exercise in the learning process. On the other hand, once you master more advanced techniques, it’s hard to go back, because they allow you to find bugs much quicker. Tracing is a laborious manual process, which can let even more errors slip through. The build and deploy cycle takes time. Afterward, you need to remember to meticulously remove all the calls you made without accidentally touching the genuine ones. Besides, it requires you to make changes in the code, which isn’t always possible. Maybe you’re debugging an application running in a remote web server or want to diagnose a problem in a post-mortem fashion. Sometimes you simply don’t have access to the standard output. Let’s pretend for a minute that you’re running an e-commerce website. One day, an angry customer makes a phone call complaining about a failed transaction and saying he lost his money. He claims to have tried purchasing a few items, but in the end, there was some cryptic error that prevented him from finishing that order. Yet, when he checked his bank account, the money was gone. You apologize sincerely and make a refund, but also don’t want this to happen again in the future. How do you debug that? If only you had some trace of what happened, ideally in the form of a chronological list of events with their context. Whenever you find yourself doing print debugging, consider turning it into permanent log messages. This may help in situations like this, when you need to analyze a problem after it happened, in an environment that you don’t have access to. There are sophisticated tools for log aggregation and searching, but at the most basic level, you can think of logs as text files. Each line conveys detailed information about an event in your system. Usually, it won’t contain personally identifying information, though, in some cases, it may be mandated by law. As you can see, it has a structured form. Apart from a descriptive message, there are a few customizable fields, which provide the context of an event. Here, you have the exact date and time, the log level, the logger name, and the thread name. Log levels allow you to filter messages quickly to reduce noise. If you’re looking for an error, you don’t want to see all the warnings or debug messages, for example. It’s trivial to disable or enable messages at certain log levels through the configuration, without even touching the code. With logging, you can keep your debug messages separate from the standard output. All the log messages go to the standard error stream by default, which can conveniently show up in different colors. However, you can redirect log messages to separate files, even for individual modules! Quite commonly, misconfigured logging can lead to running out of space on the server’s disk. To prevent that, you may set up log rotation, which will keep the log files for a specified duration, such as one week, or once they hit a certain size. Nevertheless, it’s always a good practice to archive older logs. Some regulations enforce that customer data be kept for as long as five years! Compared to other programming languages, logging in Python is simpler, because the module is bundled with the standard library. You just import and configure it in as little as two lines of code: You can call functions defined at the module level, which are hooked to the root logger, but more the common practice is to obtain a dedicated logger for each of your source files: The advantage of using custom loggers is more fine-grain control. They’re usually named after the module they were defined in through the variable. Note: There’s a somewhat related module in Python, which can also log messages to the standard error stream. However, it has a narrower spectrum of applications, mostly in library code, whereas client applications should use the module. That said, you can make them work together by calling . One last reason to switch from the function to logging is thread safety. In the upcoming section, you’ll see that the former doesn’t play well with multiple threads of execution. The truth is that neither tracing nor logging can be considered real debugging. To do actual debugging, you need a debugger tool, which allows you to do the following: A crude debugger that runs in the terminal, unsurprisingly named for “The Python Debugger,” is distributed as part of the standard library. This makes it always available, so it may be your only choice for performing remote debugging. Perhaps that’s a good reason to get familiar with it. However, it doesn’t come with a graphical interface, so using may be a bit tricky. If you can’t edit the code, you have to run it as a module and pass your script’s location: Otherwise, you can set up a breakpoint directly in the code, which will pause the execution of your script and drop you into the debugger. The old way of doing this required two steps: This shows up an interactive prompt, which might look intimidating at first. However, you can still type native Python at this point to examine or modify the state of local variables. Apart from that, there’s really only a handful of debugger-specific commands that you want to use for stepping through the code. Note: It’s customary to put the two instructions for spinning up a debugger on a single line. This requires the use of a semicolon, which is rarely found in Python programs: While certainly not Pythonic, it stands out as a reminder to remove it after you’re done with debugging. Since Python 3.7, you can also call the built-in function, which does the same thing, but in a more compact way and with some additional bells and whistles: You’re probably going to use a visual debugger integrated with a code editor for the most part. PyCharm has an excellent debugger, which boasts high performance, but you’ll find plenty of alternative IDEs with debuggers, both paid and free of charge. Debugging isn’t the proverbial silver bullet. Sometimes logging or tracing will be a better solution. For example, defects that are hard to reproduce, such as race conditions, often result from temporal coupling. When you stop at a breakpoint, that little pause in program execution may mask the problem. It’s kind of like the Heisenberg principle: you can’t measure and observe a bug at the same time. These methods aren’t mutually exclusive. They complement each other.\n\nI briefly touched upon the thread safety issue before, recommending over the function. If you’re still reading this, then you must be comfortable with the concept of threads. Thread safety means that a piece of code can be safely shared between multiple threads of execution. The simplest strategy for ensuring thread-safety is by sharing immutable objects only. If threads can’t modify an object’s state, then there’s no risk of breaking its consistency. Another method takes advantage of local memory, which makes each thread receive its own copy of the same object. That way, other threads can’t see the changes made to it in the current thread. But that doesn’t solve the problem, does it? You often want your threads to cooperate by being able to mutate a shared resource. The most common way of synchronizing concurrent access to such a resource is by locking it. This gives exclusive write access to one or sometimes a few threads at a time. However, locking is expensive and reduces concurrent throughput, so other means for controlling access have been invented, such as atomic variables or the compare-and-swap algorithm. Printing isn’t thread-safe in Python. The function holds a reference to the standard output, which is a shared global variable. In theory, because there’s no locking, a context switch could happen during a call to , intertwining bits of text from multiple calls. Note: A context switch means that one thread halts its execution, either voluntarily or not, so that another one can take over. This might happen at any moment, even in the middle of a function call. In practice, however, that doesn’t happen. No matter how hard you try, writing to the standard output seems to be atomic. The only problem that you may sometimes observe is with messed up line breaks: To simulate this, you can increase the likelihood of a context switch by making the underlying method go to sleep for a random amount of time. How? By mocking it, which you already know about from an earlier section: First, you need to store the original method in a variable, which you’ll delegate to later. Then you provide your fake implementation, which will take up to one second to execute. Each thread will make a few calls with its name and a letter: A, B, and C. If you read the mocking section before, then you may already have an idea of why printing misbehaves like that. Nonetheless, to make it crystal clear, you can capture values fed into your function. You’ll notice that you get a slightly different sequence each time: Even though itself is an atomic operation, a single call to the function can yield more than one write. For example, line breaks are written separately from the rest of the text, and context switching takes place between those writes. Note: The atomic nature of the standard output in Python is a byproduct of the Global Interpreter Lock, which applies locking around bytecode instructions. Be aware, however, that many interpreter flavors don’t have the GIL, where multi-threaded printing requires explicit locking. You can make the newline character become an integral part of the message by handling it manually: This will fix the output: [Thread-2 A] [Thread-1 A] [Thread-3 A] [Thread-1 B] [Thread-3 B] [Thread-2 B] [Thread-1 C] [Thread-2 C] [Thread-3 C] Notice, however, that the function still keeps making a separate call for the empty suffix, which translates to useless instruction: A truly thread-safe version of the function could look like this: You can put that function in a module and import it elsewhere: Now, despite making two writes per each request, only one thread is allowed to interact with the stream, while the rest must wait: I added comments to indicate how the lock is limiting access to the shared resource. Note: Even in single-threaded code, you might get caught up in a similar situation. Specifically, when you’re printing to the standard output and the standard error streams at the same time. Unless you redirect one or both of them to separate files, they’ll both share a single terminal window. Conversely, the module is thread-safe by design, which is reflected by its ability to display thread names in the formatted message: It’s another reason why you might not want to use the function all the time."
    },
    {
        "link": "https://docs.python.org/3/whatsnew/3.0.html",
        "document": "This article explains the new features in Python 3.0, compared to 2.6. Python 3.0, also known as “Python 3000” or “Py3K”, is the first ever intentionally backwards incompatible Python release. Python 3.0 was released on December 3, 2008. There are more changes than in a typical release, and more that are important for all Python users. Nevertheless, after digesting the changes, you’ll find that Python really hasn’t changed all that much – by and large, we’re mostly fixing well-known annoyances and warts, and removing a lot of old cruft.\n\nThis article doesn’t attempt to provide a complete specification of all new features, but instead tries to give a convenient overview. For full details, you should refer to the documentation for Python 3.0, and/or the many PEPs referenced in the text. If you want to understand the complete implementation and design rationale for a particular feature, PEPs usually have more details than the regular documentation; but note that PEPs usually are not kept up-to-date once a feature has been fully implemented.\n\nDue to time constraints this document is not as complete as it should have been. As always for a new release, the file in the source distribution contains a wealth of detailed information about every small thing that was changed.\n\nThis section lists those few changes that are most likely to trip you up if you’re used to Python 2.5. The statement has been replaced with a function, with keyword arguments to replace most of the special syntax of the old statement (PEP 3105). Examples: # You must call the function! # Not the same as print(x, y)! You can also customize the separator between items, e.g.:\n• None The function doesn’t support the “softspace” feature of the old statement. For example, in Python 2.x, would write ; but in Python 3.0, writes .\n• None Initially, you’ll be finding yourself typing the old a lot in interactive mode. Time to retrain your fingers to type instead!\n• None When using the source-to-source conversion tool, all statements are automatically converted to function calls, so this is mostly a non-issue for larger projects. Views And Iterators Instead Of Lists¶\n• None methods , and return “views” instead of lists. For example, this no longer works: . Use instead (this works in Python 2.5 too and is just as efficient).\n• None Also, the , and methods are no longer supported.\n• None and return iterators. If you really need a list and the input sequences are all of equal length, a quick fix is to wrap in , e.g. , but a better fix is often to use a list comprehension (especially when the original code uses ), or rewriting the code so it doesn’t need a list at all. Particularly tricky is invoked for the side effects of the function; the correct transformation is to use a regular loop (since creating a list would just be wasteful). If the input sequences are not of equal length, will stop at the termination of the shortest of the sequences. For full compatibility with from Python 2.x, also wrap the sequences in , e.g. becomes .\n• None now behaves like used to behave, except it works with values of arbitrary size. The latter no longer exists. Python 3.0 has simplified the rules for ordering comparisons:\n• None The ordering comparison operators ( , , , ) raise a TypeError exception when the operands don’t have a meaningful natural ordering. Thus, expressions like , or are no longer valid, and e.g. raises instead of returning . A corollary is that sorting a heterogeneous list no longer makes sense – all the elements must be comparable to each other. Note that this does not apply to the and operators: objects of different incomparable types always compare unequal to each other.\n• None and no longer accept the cmp argument providing a comparison function. Use the key argument instead. N.B. the key and reverse arguments are now “keyword-only”.\n• None The function should be treated as gone, and the special method is no longer supported. Use for sorting, with , and other rich comparisons as needed. (If you really need the functionality, you could use the expression as the equivalent for .)\n• None PEP 237: Essentially, renamed to . That is, there is only one built-in integral type, named ; but it behaves mostly like the old type.\n• None PEP 238: An expression like returns a float. Use to get the truncating behavior. (The latter syntax has existed for years, at least since Python 2.2.)\n• None The constant was removed, since there is no longer a limit to the value of integers. However, can be used as an integer larger than any practical list or string index. It conforms to the implementation’s “natural” integer size and is typically the same as in previous releases on the same platform (assuming the same build options).\n• None The of a long integer doesn’t include the trailing anymore, so code that unconditionally strips that character will chop off the last digit instead. (Use instead.)\n• None Octal literals are no longer of the form ; use instead. Text Vs. Data Instead Of Unicode Vs. 8-bit¶ Everything you thought you knew about binary data and Unicode has changed.\n• None Python 3.0 uses the concepts of text and (binary) data instead of Unicode strings and 8-bit strings. All text is Unicode; however encoded Unicode is represented as binary data. The type used to hold text is , the type used to hold data is . The biggest difference with the 2.x situation is that any attempt to mix text and data in Python 3.0 raises , whereas if you were to mix Unicode and 8-bit strings in Python 2.x, it would work if the 8-bit string happened to contain only 7-bit (ASCII) bytes, but you would get if it contained non-ASCII values. This value-specific behavior has caused numerous sad faces over the years.\n• None As a consequence of this change in philosophy, pretty much all code that uses Unicode, encodings or binary data most likely has to change. The change is for the better, as in the 2.x world there were numerous bugs having to do with mixing encoded and unencoded text. To be prepared in Python 2.x, start using for all unencoded text, and for binary or encoded data only. Then the tool will do most of the work for you.\n• None You can no longer use literals for Unicode text. However, you must use literals for binary data.\n• None As the and types cannot be mixed, you must always explicitly convert between them. Use to go from to , and to go from to . You can also use and , respectively.\n• None Like , the type is immutable. There is a separate mutable type to hold buffered binary data, . Nearly all APIs that accept also accept . The mutable API is based on .\n• None All backslashes in raw string literals are interpreted literally. This means that and escapes in raw strings are not treated specially. For example, is a string of 6 characters in Python 3.0, whereas in 2.6, was the single “euro” character. (Of course, this change only affects raw string literals; the euro character is in Python 3.0.)\n• None The built-in abstract type was removed. Use instead. The and types don’t have functionality enough in common to warrant a shared base class. The tool (see below) replaces every occurrence of with .\n• None Files opened as text files (still the default mode for ) always use an encoding to map between strings (in memory) and bytes (on disk). Binary files (opened with a in the mode argument) always use bytes in memory. This means that if a file is opened using an incorrect mode or encoding, I/O will likely fail loudly, instead of silently producing incorrect data. It also means that even Unix users will have to specify the correct mode (text or binary) when opening a file. There is a platform-dependent default encoding, which on Unixy platforms can be set with the environment variable (and sometimes also with some other platform-specific locale-related environment variables). In many cases, but not all, the system default is UTF-8; you should never count on this default. Any application reading or writing more than pure ASCII text should probably have a way to override the encoding. There is no longer any need for using the encoding-aware streams in the module.\n• None The initial values of , and are now unicode-only text files (i.e., they are instances of ). To read and write bytes data with these streams, you need to use their attribute.\n• None Filenames are passed to and returned from APIs as (Unicode) strings. This can present platform-specific problems because on some platforms filenames are arbitrary byte strings. (On the other hand, on Windows filenames are natively stored as Unicode.) As a work-around, most APIs (e.g. and many functions in the module) that take filenames accept objects as well as strings, and a few APIs have a way to ask for a return value. Thus, returns a list of instances if the argument is a instance, and returns the current working directory as a instance. Note that when returns a list of strings, filenames that cannot be decoded properly are omitted rather than raising .\n• None Some system APIs like and can also present problems when the bytes made available by the system is not interpretable using the default encoding. Setting the variable and rerunning the program is probably the best approach.\n• None PEP 3138: The of a string no longer escapes non-ASCII characters. It still escapes control characters and code points with non-printable status in the Unicode standard, however.\n• None PEP 3120: The default source encoding is now UTF-8.\n• None PEP 3131: Non-ASCII letters are now allowed in identifiers. (However, the standard library remains ASCII-only with the exception of contributor names in comments.)\n• None The and modules are gone. Instead, import the module and use or for text and data respectively.\n• None See also the Unicode HOWTO, which was updated for Python 3.0.\n\nThis section gives a brief overview of every syntactic change in Python 3.0.\n• None PEP 3107: Function argument and return value annotations. This provides a standardized way of annotating a function’s parameters and return value. There are no semantics attached to such annotations except that they can be introspected at runtime using the attribute. The intent is to encourage experimentation through metaclasses, decorators or frameworks.\n• None PEP 3102: Keyword-only arguments. Named parameters occurring after in the parameter list must be specified using keyword syntax in the call. You can also use a bare in the parameter list to indicate that you don’t accept a variable-length argument list, but you do have keyword-only arguments.\n• None Keyword arguments are allowed after the list of base classes in a class definition. This is used by the new convention for specifying a metaclass (see next section), but can be used for other purposes as well, as long as the metaclass supports it.\n• None PEP 3104: statement. Using you can now assign directly to a variable in an outer (but non-global) scope. is a new reserved word.\n• None PEP 3132: Extended Iterable Unpacking. You can now write things like . And even . The object is always a (possibly empty) list; the right-hand side may be any iterable. Example: This sets a to , b to , and rest to .\n• None Dictionary comprehensions: means the same thing as but is more flexible. (This is PEP 274 vindicated. :-)\n• None Set literals, e.g. . Note that is an empty dictionary; use for an empty set. Set comprehensions are also supported; e.g., means the same thing as but is more flexible.\n• None New octal literals, e.g. (already in 2.6). The old octal literals ( ) are gone.\n• None New binary literals, e.g. (already in 2.6), and there is a new corresponding built-in function, .\n• None Bytes literals are introduced with a leading or , and there is a new corresponding built-in function, .\n• None PEP 3109 and PEP 3134: new statement syntax: . See below.\n• None and are now reserved words. (Since 2.6, actually.)\n• None , , and are reserved words. (2.6 partially enforced the restrictions on already.)\n• None Change from exc, var to exc var. See PEP 3110.\n• None PEP 3115: New Metaclass Syntax. Instead of: The module-global variable is no longer supported. (It was a crutch to make it easier to default to new-style classes without deriving every class from .)\n• None List comprehensions no longer support the syntactic form . Use instead. Also note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a constructor, and in particular the loop control variables are no longer leaked into the surrounding scope.\n• None The ellipsis ( ) can be used as an atomic expression anywhere. (Previously it was only allowed in slices.) Also, it must now be spelled as . (Previously it could also be spelled as , by a mere accident of the grammar.)\n• None PEP 3113: Tuple parameter unpacking removed. You can no longer write . Use instead.\n• None Removed keyword: is no longer a keyword; it remains as a function. (Fortunately the function syntax was also accepted in 2.x.) Also note that no longer takes a stream argument; instead of you can use .\n• None The module syntax is only allowed at the module level, no longer inside functions.\n• None The only acceptable syntax for relative imports is . All forms not starting with are interpreted as absolute imports. (PEP 328)\n\nDue to time constraints, this document does not exhaustively cover the very extensive changes to the standard library. PEP 3108 is the reference for the major changes to the library. Here’s a capsule review:\n• None Many old modules were removed. Some, like (no longer used) and (replaced by ), were already deprecated by PEP 4. Others were removed as a result of the removal of support for various platforms such as Irix, BeOS and Mac OS 9 (see PEP 11). Some modules were also selected for removal in Python 3.0 due to lack of use or because a better replacement exists. See PEP 3108 for an exhaustive list.\n• None The package was removed because its presence in the core standard library has proved over time to be a particular burden for the core developers due to testing instability and Berkeley DB’s release schedule. However, the package is alive and well, externally maintained at https://www.jcea.es/programacion/pybsddb.htm.\n• None Some modules were renamed because their old name disobeyed PEP 8, or for various other reasons. Here’s the list:\n• None A common pattern in Python 2.x is to have one version of a module implemented in pure Python, with an optional accelerated version implemented as a C extension; for example, and . This places the burden of importing the accelerated version and falling back on the pure Python version on each user of these modules. In Python 3.0, the accelerated versions are considered implementation details of the pure Python versions. Users should always import the standard version, which attempts to import the accelerated version and falls back to the pure Python version. The / pair received this treatment. The module is on the list for 3.1. The module has been turned into a class in the module.\n• None Some related modules have been grouped into packages, and usually the submodule names have been simplified. The resulting new packages are:\n• None (all -related modules except ). The target audience of doesn’t really care about . Also note that as of Python 2.6, the functionality of has been greatly enhanced. Some other changes to standard library modules, not covered by PEP 3108:\n• None Cleanup of the module: removed , , , , . (Note that etc. remain.)\n• None Cleanup of the type: the and methods are gone; use and instead. Also, the typecode for array is gone – use either for bytes or for Unicode characters.\n• None Cleanup of the module: removed and .\n• None Cleanup of the module: and are gone; use and instead.\n• None Cleanup of the module: removed the API.\n• None The functions , and have been removed in favor of the module.\n• None The module has been changed to work with bytes. The main entry point is now , instead of generate_tokens.\n• None and its friends ( and ) are gone. Use etc. instead. (The reason for the removal is that and friends had locale-specific behavior, which is a bad idea for such attractively named global “constants”.)\n• None Renamed module to (removing the underscores, adding an ‘s’). The variable found in most global namespaces is unchanged. To modify a builtin, you should use , not !\n\nThe APIs for raising and catching exception have been cleaned up and new powerful features added:\n• None PEP 352: All exceptions must be derived (directly or indirectly) from . This is the root of the exception hierarchy. This is not new as a recommendation, but the requirement to inherit from is new. (Python 2.6 still allowed classic classes to be raised, and placed no restriction on what you can catch.) As a consequence, string exceptions are finally truly and utterly dead.\n• None Almost all exceptions should actually derive from ; should only be used as a base class for exceptions that should only be handled at the top level, such as or . The recommended idiom for handling all exceptions except for this latter category is to use .\n• None Exceptions no longer behave as sequences. Use the attribute instead.\n• None PEP 3109: Raising exceptions. You must now use instead of . Additionally, you can no longer explicitly specify a traceback; instead, if you have to do this, you can assign directly to the attribute (see below).\n• None PEP 3110: Catching exceptions. You must now use instead of . Moreover, the variable is explicitly deleted when the block is left.\n• None PEP 3134: Exception chaining. There are two cases: implicit chaining and explicit chaining. Implicit chaining happens when an exception is raised in an or handler block. This usually happens due to a bug in the handler block; we call this a secondary exception. In this case, the original exception (that was being handled) is saved as the attribute of the secondary exception. Explicit chaining is invoked with this syntax:\n• None PEP 3134: Exception objects now store their traceback as the attribute. This means that an exception object now contains all the information pertaining to an exception, and there are fewer reasons to use (though the latter is not removed).\n• None A few exception messages are improved when Windows fails to load an extension module. For example, is now . Strings now deal with non-English locales.\n\nFor porting existing Python 2.5 or 2.6 source code to Python 3.0, the best strategy is the following:\n• None Port to Python 2.6. This should be no more work than the average port from Python 2.x to Python 2.(x+1). Make sure all your tests pass.\n• None (Still using 2.6:) Turn on the command line switch. This enables warnings about features that will be removed (or change) in 3.0. Run your test suite again, and fix code that you get warnings about until there are no warnings left, and all your tests still pass.\n• None Run the source-to-source translator over your source code tree. Run the result of the translation under Python 3.0. Manually fix up any remaining issues, fixing problems until all tests pass again. It is not recommended to try to write source code that runs unchanged under both Python 2.6 and 3.0; you’d have to use a very contorted coding style, e.g. avoiding statements, metaclasses, and much more. If you are maintaining a library that needs to support both Python 2.6 and Python 3.0, the best approach is to modify step 3 above by editing the 2.6 version of the source code and running the translator again, rather than editing the 3.0 version of the source code. For porting C extensions to Python 3.0, please see Porting Extension Modules to Python 3."
    },
    {
        "link": "https://python-reference.readthedocs.io/en/latest/docs/functions/print.html",
        "document": "All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep and followed by end. Both sep and end must be strings; they can also be None, which means to use the default values. If no objects are given, print() will just write end.\n\nThe file argument must be an object with a write(string) method; if it is not present or None, sys.stdout will be used. Output buffering is determined by file. Use file.flush() to ensure, for instance, immediate appearance on a screen."
    },
    {
        "link": "https://datacamp.com/tutorial/python-hello-world-a-beginners-guide-to-programming",
        "document": "The first step in learning any programming language is often to print \"Hello World!\" This tradition helps you understand the language's basic syntax and structure. In Python, this is done using the function.\n\nThe function is one of the most frequently used functions in Python. It outputs text. Let's see it in action:\n\nWhen you run this line of code, Python will output:\n\nWhile running Python code in an IDE is convenient, you can also create a script file and run it. This is useful for saving and running larger programs. Here’s how you can do it:\n\n1. Open a text editor (like Notepad on Windows or TextEdit on MacOS).\n\n3. Save the file with a extension, for example, .\n\n4. Open your command line interface (CLI) or terminal. On Windows computers, press the Windows key, type \"Command Prompt,\" and hit Enter. This will open the Command Prompt (CLI). For macOS, press Command + Space, type \"Terminal,\" and hit Enter. This will open the Terminal application.\n\n5. In the command line, use the command (short for \"change directory\") to navigate to the folder where you saved your file. For example, if you saved your file on the Desktop, you would type:\n\nCongratulations! You've just run your first Python script.\n\nOne of the beauties of Python, and programming in general, is the ability to create systems that automate tasks. Functions are the building blocks of these systems in Python. A function is a reusable block of code that performs a specific task.\n\nLet's create a function that takes a person's name as an argument and prints a personalized greeting.\n• is a keyword that tells Python we are defining a function.\n• is the name of our function.\n• inside the parentheses is a parameter—a variable that the function can receive as input.\n• is the function's action. Here, we use commas to separate between the different elements of the print statement.\n\nFor more on functions, check out this interactive course on Writing Functions in Python from scratch, where you’ll build Python functions right in the browser!\n\nLearning Python is an exciting journey that opens up many possibilities in the programming world. Here are some steps and resources to help you get started:\n• Start with the basics: Learn the basic syntax and structure of Python. Understand variables, data types, and simple operations.\n• Practice coding: The best way to learn programming is by doing. Write small programs, experiment with different functions, and try to solve simple problems.\n• Use online resources: There are numerous free and paid resources available online. Check out DataCamp’s Python curriculum for more!\n• Read Python documentation: Familiarize yourself with the official Python documentation. It’s a comprehensive resource for understanding Python's capabilities and features.\n• Join a community: Engage with other learners and experienced developers. Communities like Stack Overflow, Reddit’s r/learnpython, and Python Discord servers are great places to ask questions, share knowledge, and get support.\n• Build projects: Apply what you've learned by working on small projects. This could be anything from a simple calculator to a web scraper. Projects help solidify your knowledge and provide practical experience.\n• Explore advanced topics: Once you're comfortable with the basics, explore more advanced topics like object-oriented programming, web development with frameworks like Django or Flask, and data analysis with libraries like Pandas and NumPy.\n\nFor more detailed guidance, read our comprehensive guide on how to learn Python from scratch.\n\nNow that you've written your first Python program and created a function, you’ve taken the first step to mastering this powerful language. Keep experimenting with Python, try out new ideas, and don't hesitate to explore more advanced topics as you grow more comfortable."
    },
    {
        "link": "https://programiz.com/python-programming/examples/hello-world",
        "document": "In this program, we have used the built-in print() function to print the string on our screen.\n\nBy the way, a string is a sequence of characters. In Python, strings are enclosed inside single quotes, double quotes, or triple quotes."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-write-your-first-python-3-program",
        "document": "The “Hello, World!” program is a classic and time-honored tradition in computer programming. Serving as a simple and complete first program for beginners, as well as a good program to test systems and programming environments, “Hello, World!” illustrates the basic syntax of programming languages.\n\nThis tutorial will walk you through writing a “Hello, World” program in Python 3.\n\nYou should have Python 3 installed and a programming environment set up on your computer or server. If you don’t have a programming environment set up, you can refer to the installation and setup guides for a local programming environment or for a programming environment on your server appropriate for your operating system (Ubuntu, CentOS, Debian, etc.)\n\nTo write the “Hello, World!” program, let’s open up a command-line text editor such as nano and create a new file:\n\nOnce the text file opens up in the terminal window we’ll type out our program:\n\nLet’s break down the different components of the code.\n\nis a function that tells the computer to perform an action. We know it is a function because it uses parentheses. tells Python to display or output whatever we put in the parentheses. By default, this will output to the current terminal window.\n\nSome functions, like the function, are built-in functions included in Python by default. These built-in functions are always available for us to use in programs that we create. We can also define our own functions that we construct ourselves through other elements.\n\nInside the parentheses of the function is a sequence of characters — — that is enclosed in quotation marks. Any characters that are inside of quotation marks are called a string.\n\nOnce we are done writing our program, we can exit nano by typing the and keys, and when prompted to save the file press .\n\nOnce you exit out of nano you’ll return to your shell.\n\nWith our “Hello, World!” program written, we are ready to run the program. We’ll use the command along with the name of our program file. Let’s run the program:\n\nThe hello.py program that you created will cause your terminal to produce the following output:\n\nLet’s go over what the program did in more detail.\n\nPython executed the line by calling the function. The string value of was passed to the function.\n\nIn this example, the string is also called an argument since it is a value that is passed to a function.\n\nThe quotes that are on either side of were not printed to the screen because they are used to tell Python that they contain a string. The quotation marks delineate where the string begins and ends.\n\nSince the program ran, you can now confirm that Python 3 is properly installed and that the program is syntactically correct.\n\nCongratulations! You have written the “Hello, World!” program in Python 3.\n\nFrom here, you can continue to work with the function by writing your own strings to display, and can also create new program files.\n\nKeep learning about programming in Python by reading our full tutorial series How To Code in Python 3."
    },
    {
        "link": "https://freecodecamp.org/news/hello-world-programming-tutorial-for-python",
        "document": "Hi! if you are reading this article, then you are probably starting to dive into the amazing world of programming and computer science. That's great.\n\nIn this article, you will learn:\n• How to write your first program in Python.\n• How to save your code in a Python file.\n• How to run your code.\n\nWriting this program when you are starting to learn how to code is a tradition in the developer community.\n\nEnjoy this moment because it will definitely be part of your memories in the coming months and years when you remember your first steps.\n\n🔸 \"Hello, World!\" in the Python Shell\n\nDuring this article, we will work with IDLE (Python’s Integrated Development and Learning Environment), which is automatically installed when you install Python. This is where you will write and run your Python code.\n\nThe first thing that you need to do is to open IDLE. You will immediately see the screen shown below.\n\nThis is called the Python shell (interactive interpreter). It is an interactive window where you can enter lines or blocks of code and run them immediately to see their effect and output.\n\n💡 Tip: By default, you will see a smaller font size. You can customize this in \"Options > Configure IDLE\".\n\nYou need to tell the program that you want to display a specific message by writing the appropriate line of code.\n\nIn Python, we use to do this:\n• Then, within parentheses, we write the message or value that we want to display.\n\n💡 Tip: The message is surrounded by double quotation marks because it is represented as a , a data type that is used to represent sequences of characters in your code (for example, text).\n\nYou will see the following output if you write this line of code in the Python shell and press enter:\n\n💡 Tip: You will notice that the color of the message inside changes to green when you add the last quotation mark.\n\nThis occurs because IDLE assigns different colors to the different types of elements that you can write in your code (notice that is displayed in purple). This is called \"syntax highlighting\".\n\nGreat! You just wrote your first program in Python.\n\nIf you want to save it in order to run it later (or just to keep it as a nice memory of your first Python program!), you will need to create a Python file, so let's see how you can do that.\n\nTo create a Python file in IDLE, you need to:\n• Click on in the toolbar.\n\n💡 Tips: You can also use the keyboard shortcut .\n\nAfter you click on , you will immediately see a new file where you can write your code:\n\nIn the new file, write this line of code to print :\n\n💡 Tip: The thick vertical black line shows where the cursor is currently at.\n\nSave the new file by clicking on File > Save or by using the keyboard shortcut . You will need to write a name for your file and choose where you want to save it.\n\nAfter saving the file, you will see something very similar to this in the folder that you selected:\n\n💡 Tips: By default, line numbers will not be displayed in the file. If you would like to display them (like in the images above) go to Options > Configure IDLE > General > Check the \"Show line numbers in new windows\" box.\n\nNow you can run your file by clicking on Run > Run Module:\n\nA new window will be opened and you should see the output of your program in blue:\n\nNow your program is safely stored in a Python file and you can run it whenever you need to.\n\nYou can customize your program to make it unique. You just need to edit the Python file and change the string.\n\nFor example, you can add your name after :\n\nIf you run the file, you will see the string displayed in the Python shell:\n\nAwesome work. You just wrote your first Python program.\n\nProgramming and Computer Science will be key for the future of humanity. By learning how to code, you can shape that future.\n\nYou'll create amazing new products and platforms, and help take us one step further towards a world where technology will be part of every single aspect of our daily lives.\n\nTo learn more about the coding uses of Python, you might like to read my article \"What is Python Used For? 10+ Coding Uses for the Python Programming Language\"\n\nI really hope that you liked my article and found it helpful. Follow me on Twitter @EstefaniaCassN and check out my online courses. ⭐️"
    },
    {
        "link": "https://geeksforgeeks.org/python-program-to-print-hello-world",
        "document": "When we are just starting out with Python, one of the first programs we’ll learn is the classic “Hello, World!” program. It’s a simple program that displays the message “Hello, World!” on the screen.\n\nHow does this work:\n• print() in Python that tells the program to display something on the screen. We need to add the string in parenthesis of print() function that we are displaying on the screen.\n• “Hello, World!” is a string text that you want to display. are always enclosed in quotation marks.\n\nThere are two more ways to print the same string “Hello World” :\n\nBoth the above methods work same as the first method that is the double quotes method.\n\nTry it Yourself:\n\nTry printing your name following the same steps as given above. Use all the three methods to print your name.\n\n\n\nLooking to start your programming journey or elevate your Python expertise? Boot.dev’s Complete Python Course offers dynamic, project-driven approach to mastering Python. Perfect for aspiring developers or anyone looking to level up their Python skills. Take the leap into a future-ready career-enroll today and code with confidence!"
    }
]