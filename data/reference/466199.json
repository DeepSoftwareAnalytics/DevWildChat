[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/content",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nThe CSS property replaces content with a generated value. It can be used to define what is rendered inside an element or pseudo-element. For elements, the property specifies whether the element renders normally ( or ) or is replaced with an image (and associated \"alt\" text). For pseudo-elements and margin boxes, defines the content as images, text, both, or none, which determines whether the element renders at all. Objects inserted using the property are anonymous replaced elements.\n• One of two keywords — or .\n• when replacing a DOM node. is always an .\n• A when replacing pseudo-elements and margin boxes. A is a list of one or more anonymous inline boxes appearing in the order specified. Each item is of type , , , , , or .\n• An optional alternative text value of a or , preceded by a slash ( ). The keywords and data types mentioned above are described in more detail below: When applied to a pseudo-element, the pseudo-element is not generated. When applied to an element, the value has no effect. The default value. Computes to for the and pseudo-elements. For other pseudo-elements, the content will be the initial (or normal) content expected for that , , or . For regular elements or page margin boxes, this computes to the element's descendants. A sequence of characters enclosed in matching single or double quotes. Multiple string values will be concatenated (there is no concatenation operator in CSS). An , representing an image to display. This can be equal to a , , or data type, or a part of the webpage itself, defined by the function. The value is a CSS counter, generally a number produced by computations defined by and properties. It can be displayed using either the or function. The function has two forms: 'counter(name)' or 'counter(name, style)'. The generated text is the value of the innermost counter of the given name in scope at the given pseudo-element. It is formatted in the specified ( by default). The function also has two forms: 'counters(name, string)' or 'counters(name, string, style)'. The generated text is the value of all counters with the given name in scope at the given pseudo-element, from outermost to innermost, separated by the specified string. The counters are rendered in the indicated ( by default). These values are replaced by the appropriate string from the property. Introduces no content, but increments (decrements) the level of nesting for quotes. The data type includes three target functions, , , and that create cross-references obtained from the target end of a link. See Formal syntax. The data type includes a leader function: . This function accepts the keyword values , , or (equal to , , and , respectively), or a as a parameter. When supported and used as a value for , the leader-type provided will be inserted as a repeating pattern, visually connecting content across a horizontal line. The CSS function retrieves the value of an attribute of the selected element, or the pseudo-element's originating element. The value of the element's attribute is an unparsed string representing the attribute name. If there is no attribute , an empty string is returned. The case sensitivity of the attribute name parameter depends on the document language. Alternative text may be specified for an image or any items, by appending a forward slash and then a string of text or a counter. The alternative text is intended for speech output by screen-readers, but may also be displayed in some browsers. Note that if the browser does not support alternative text, the declaration will be considered invalid and will be ignored. The or data types specify the \"alt text\" for the element.\n\nThis example inserts differently colored quotation marks around quotes. <p> According to Sir Tim Berners-Lee, <q cite=\"http://www.w3.org/People/Berners-Lee/FAQ.html#Internet\"> I was lucky enough to invent the Web at the time when the Internet already existed - and had for a decade and a half. </q> We must understand that there is nothing fundamentally wrong with building on the contributions of others. </p> <p lang=\"fr-fr\"> Mais c'est Magritte qui a dit, <q lang=\"fr-fr\"> Ceci n'est pas une pipe. </q>. </p> Note the type of quotes generated is based on the language. Browsers add open- and close-quotes before and after elements by default, so the quotes in this example would appear without them being explicitly set. They could have been turned off by setting the respective property values to and , or by setting them both to . They can also be turned off by setting the property to instead.\n\nThis example combines a counter sandwiched between two s prepended to all list items, creating a more detailed marker for list items ( ) within unordered lists ( ). The generated content on each list item's marker adds the text \"item \" as a prefix, including a space to separate the prefix from the counter, which is followed by \": \", a colon and an additional space. The function defines a numeric counter, in which the numbers of nested ordered lists have their numbers separated with a period ( ) in most browsers.\n\nThis example inserts an image before all links. Two values are provided. The later value includes an image with alternative text that a screen reader can output as speech. If a browser does not support alternative text, this declaration will be considered invalid, with the previous value displaying. This fallback content list includes an image and the message \" - alt text is not supported - \". The CSS to show the image and set the alternative text is shown below. This also sets the font and color for the content. This will be used on browsers that display the alternative text and in browsers that don't support alternative text and show the fallback value. a::before { /* fallback content */ content: url(\"https://mozorg.cdn.mozilla.net/media/img/favicon.ico\") \" - alt text is not supported - \"; /* content with alternative text */ content: url(\"https://mozorg.cdn.mozilla.net/media/img/favicon.ico\") / \" MOZILLA: \"; font: x-small Arial, sans-serif; color: gray; } Note: If the alternative text syntax is supported, the value will be exposed in the browser's accessibility tree. Refer to the See also section for browser-specific accessibility panels. If using a screen reader, it should speak the word \"MOZILLA\" when it reaches the image. If supported (if the \"alt text is not supported\" is not showing), you can select the pseudo-element with your developer tools selection tool, and view the accessible name in the accessibility panel. In browsers that don't support the alternative text syntax the whole declaration containing the alt text is invalid. In this case, the previous value will be used, showing the image and \"alt text is not supported\" text.\n\nThis example replaces a regular element! The element's contents are replaced with an SVG using the type. Pseudo-elements aren't rendered on replaced elements. As this element is replaced, any matching or are not generated or applied. To demonstrate this, we include an declaration block, attempting to add the as generated content. This pseudo-element will not be generated as the element is replaced. #replaced { content: url(\"mdn.svg\"); } /* will not show if element replacement is supported */ div::after { content: \" (\" attr(id) \")\"; } When generating content on regular elements (rather than just on pseudo-elements), the entire element is replaced. This means that and pseudo-elements are not generated."
    },
    {
        "link": "https://stackoverflow.com/questions/19255296/is-there-a-way-to-use-svg-as-content-in-a-pseudo-element-before-or-after",
        "document": "I would like to use to place SVG images before some selected elements: Above code just displays the plaintext.\n\n I checked the spec and there seem to be some restrictions on what can be. CSS property solution is preferable."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_counter_styles/Using_CSS_counters",
        "document": "CSS counters let you adjust the appearance of content based on its location in a document. For example, you can use counters to automatically number the headings on a webpage or to change the numbering on ordered lists. Counters are, in essence, variables maintained by CSS whose values may be incremented or decremented by CSS rules that track how many times they're used. The following things affect the counter values on an element:\n• Counters are inherited from the parent element or received from a previous sibling.\n• New counters are instantiated using property.\n• Counters are directly set to a value using the property. You can define your own named counters, and you can also manipulate the counter that is created by default for all ordered lists.\n\nTo use a counter it must first be initialized to a value with the property. The counter's value can be increased or decreased using the property and can be directly set to a specific value using the property. The current value of a counter is displayed using the or function, typically within a pseudo-element property. Counters can only be set, reset, or incremented in elements that generate boxes. For example, if an element is set to then any counter operation on that element will be ignored. The properties of counters can be scoped to specific elements using style containment which is described in more detail in the property.\n\nTo use a CSS counter, it must first be initialized to a value with the property. The property can also be used to change the counter value to any specific number. Below we initialize a counter named to the default value (0). You can also initialize multiple counters, optionally specifying an initial value for each. Below we initialize the and counters to the default value, and the counter to 3. Once initialized, a counter's value can be increased or decreased using . For example, the following declaration would increment the counter by one on every tag. h3::before { counter-increment: section; /* Increment the value of section counter by 1 */ } You can specify the increment or decrement amount after the counter name. It can be a positive or negative number, but defaults to if no integer is provided. Apart from being incremented or decremented, counters can also be explicitly set to a value using the property. The counter's name must not be , , or ; otherwise the declaration is ignored.\n\nThe value of a counter can be displayed using either the or function in a property. For example, the following declaration uses to prefix each heading with the text , where is the value of the count in decimal (the default display style): h3::before { counter-increment: section; /* Increment the value of section counter by 1 */ content: \"Section \" counter(section) \": \"; /* Display counter value in default style (decimal) */ } The function is used when the numbering of nesting levels does not include the context of parent levels. For example, here each nested level restarts from one: 1 One 1 Nested one 2 Nested two 2 Two 1 Nested one 2 Nested two 3 Nested three 3 Three The function is used when the count for nested levels must include the count from parent levels. For example, you might use this to lay out sections as shown: 1 One 1.1 Nested one 1.2 Nested two 2 Two 2.1 Nested one 2.2 Nested two 2.3 Nested three 3 Three The function has two forms: and . The generated text is the value of the innermost counter of the given name in scope at the pseudo-element. The function also has two forms: and . The generated text is the value of all counters with the given name in scope at the given pseudo-element, from outermost to innermost, separated by the specified string ( ). The counter is rendered in the specified for both methods ( by default). You can use any of the values or your own custom styles. Examples showing the use of and are given below in the basic example and Example of a nested counter, respectively.\n\nA reversed counter is one that is intended to count down (decrement) rather than up (increment). Reversed counters are created using the function notation when naming the counter in . Reversed counters have a default initial value equal to the number of elements (unlike normal counters, which have a default value of 0). This makes it easy to implement a counter that counts from the number of elements down to one. For example, to create a reversed counter named with a default initial value, you would use the following syntax: You can of course specify any initial value that you like. The counter value is decreased by specifying a negative value for . Note: You can also use to decrement a non-reversed counter. The main benefit of using a reversed counter is the default initial value, and that the counter automatically decrements reversed counters.\n\nEach element or pseudo-element has a set of counters in the scope of that element. Initial counters in the set are received from the element's parent and the preceding sibling. The counter values are received from the last descendent of the previous sibling, the last sibling, or the parent. When an element declares a counter, the counter is nested inside the counter with the same name received from the parent. If the parent doesn't have a counter with the same name then the counter is added to the element's counters set as it is. A counter with the same name received from the previous sibling is removed from the counters set. The function retrieves the innermost counter with the provided name. And the function retrieves the entire counter tree with the given name. In the following example, we are demoing an inherited counter named and a sibling counter named . All the elements display their counters using the function. Note that all the counters have been created using property, and none of the counters have been incremented. /* create 'primary' counter on divs' parent */ section { counter-reset: primary 3; } div::after { content: \" ('primary' counters: \" counters(primary, \"-\", style) \", 'secondary' counters: \" counters(secondary, \"-\", style) \")\"; color: blue; } /* create new 'primary' counter */ .same-primary-name { counter-reset: primary 6; } /* create 'secondary' counter on div 'F' */ .new-secondary-name { counter-reset: secondary 5; } /* override the sibling 'secondary' counter */ .same-secondary-name { counter-reset: secondary 10; } The section element initializes a counter named with value , and all the child s receive the inherited counter. The element 'D' creates a new (value ) counter which gets nested in the counter received from the parent, so the element has two counters named with values and . The element 'F' creates the (value ) counter for the first time, and it passes the counter to the next sibling 'G'. The element 'G' passes the counter to the next element 'H' and so on. Next, the element 'I' creates a new counter with the same name (value ), but it drops the (value ) counter received from the previous sibling 'H' and passes its own counter to 'J'.\n\nThe property updates an existing counter and if no counter with the name exists then a new counter is instantiated. The property always creates a new counter. In the following example, we have two sub-lists inside a parent list. Each list item has been numbered using a counter named 'item'. The first sub-list uses property and the second sub-list uses property to change the 'item' counter. <ul class=\"parent\"> <li>A</li> <li>B</li> <li> C (the counter updated using `counter-set`) <ul class=\"sub-list-one\"> <li>sub-A</li> <li>sub-B</li> </ul> </li> <li>D</li> <li> E (a new counter created using `counter-reset`) <ul class=\"sub-list-two\"> <li>sub-A</li> <li>sub-B</li> <li>sub-C</li> </ul> </li> <li>F</li> <li>G</li> </ul> /* create a new counter for the first time */ .parent { counter-reset: item 0; } /* increment the counter on each list item */ li { counter-increment: item; } /* show numbers on list items */ li::before { content: counter(item) \" \"; } /* change the existing counter value */ .sub-list-one { counter-set: item 10; } /* change the counter value */ .sub-list-two { counter-reset: item 0; } Notice how the first sub-list items start receiving numbers from , and the numbering is continued in the parent list. This is because the property updates the same 'item' counter declared on the element. Then notice how the second sub-list items receive new numbering starting from '1' and the parent list items after it don't carry forward the numbering. This is because the property created a new counter with the same name so the parent list items kept using the old counter."
    },
    {
        "link": "https://stackoverflow.com/questions/40164169/css-variables-custom-properties-in-pseudo-element-content-property",
        "document": "property only allows Strings, and since you are dealign with numbers and CSS cannot cast variables, you are left with the option to create another set of variables (from JS) which will serve as the printed values, and will be of type .\n\nTo set as , it's not enough to cast it to that type using the old casting trick , but is the only way what I know that can output a \"real\" string, out of the already-string value, which kind-of mean a string of a string, since CSS seems to strip the first string-layer."
    },
    {
        "link": "https://css-tricks.com/almanac/properties/c/content",
        "document": "The property in CSS is used in conjunction with the pseudo-elements and . It is used to literally insert content. There are four value types it can have.\n\nThen an element like this:\n\nWould render like this:\n\nIt could also be an empty string, which is commonly seen in things like the clearfix.\n\nMore information about that.\n\nThis is literally an image on the page like would be. It could also be a gradient. Note that you cannot change the dimensions of the image when inserted this way. You could also insert an image by using an empty string for the content, making it in some way, sizing it, and using . That way you could re-size it with .\n\nYou can use values (strings, anyway) that are taken right from attributes in the HTML.\n\nThe function doesn’t have “types” just yet, so you can’t pass a value like (just strings), but someday!\n\nThe spec says that you can use a in the syntax to list alternate text. For example…\n\nPerhaps you could use it like…\n\nContent inserted in this way isn’t really in the DOM, so it has some limitations. For instance, you can’t attach an event directly (only) to pseudo-elements. It is also inconsistent whether or not text inserted in this way is read by screen readers (it usually is these days) or if you can select it (it usually isn’t these days).\n\nFor Opera, only supported in version 7+."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/background-image",
        "document": ""
    },
    {
        "link": "https://css-tricks.com/svg-properties-and-css",
        "document": "There are many Scalable Vector Graphics (SVG), but only certain attributes can be applied as CSS to SVG. Presentation attributes are used to style SVG elements and can be used as CSS properties. Some of these attributes are SVG-only while others are already shared in CSS, such as or .\n\nFor example, to change the color of a element to red, use the property in CSS. The attribute is a presentation attribute, therefore it can be used as a CSS property:\n\nSo, with that, let’s take a deep and thorough dive into all of the SVG elements that are available to us as well as the CSS properties for them. We’ll also look at various styling approaches, including general presentational styles and animations.\n\nWhile presentation attributes can be used as CSS properties to style SVG, what about controlling the coordinates and dimensions of SVG elements using CSS? SVG 2, which is in Candidate Recommendation at the time of this writing, makes it is possible to style and animate these properties. Some styling properties can be specified not only in style sheets and ‘style‘ attributes, but also in presentation attributes. These are attributes whose name matches (or is similar to) a given CSS property and whose value is parsed as a value of that property.” Not only does it mean that SVG properties can be styled using CSS as presentation attributes or in style sheets, but this also can be applied to CSS pseudo-classes such as or . SVG 2 also introduces more presentation attributes that can be used as styling properties. These attributes can be found in SVG 2 specification.\n\nIt is important to note that not every SVG element will support the same CSS properties. Much like how there are CSS properties that can be applied to certain SVG elements, there are specific properties that are supported by certain SVG elements. For example, the or elements support the and properties as coordinates of the center of the shape. The element also supports the and properties as the radius, but the element cannot use these properties. In SVG 2, properties such as and are defined as geometry properties. Geometry properties can be used as CSS properties, just like presentation attributes such as or properties. These CSS properties and the corresponding SVG elements include:\n\nSVG 2 also makes it is possible to position SVG elements using CSS. Let’s begin with drawing a rectangle shape having the following SVG: This will produce a rectangle shape with its coordinates set to 10, 10. With SVG 2, and can be applied as CSS properties: /* This will work with SVG 2 */ rect { x: 10; y: 10; ... } The SVG code would be reduced to this: You can even set the and for the element using CSS like so: That leaves us with just the following for SVG markup: At the time of writing, the following demos will work in Blink (e.g. Chrome and Opera) and WebKit (e.g. Safari) browsers as these browsers support SVG 2 features. Until then, let’s dive into how to override SVG properties using CSS.\n\nThe element can be overridden with CSS to create shape morphing. The SVG paths that morph one into the other must have the same commands and same number of points or else the morphing will not work. Let’s start with drawing a element in the shape of a triangle. Using the property will specify the shape of the element: To get the triangle to morph into a different shape, let’s override the SVG element with the property with CSS: Let’s also add a pseudo-class to the property so when the element is clicked, the shape will morph into a square and change its color. Let’s also add a property to make the shape morphing action appear smooth. Here is the CSS: Want another demo? Here is a cool demo from Chris Coyier demonstrating SVG shape morphing on hover!\n\nAs SVG 1.1 is the current standard, few browsers currently support SVG 2 features. It is not recommended to put these techniques into production yet. SVG 2 implementation is currently at Candidate Recommendation stage, thus support for styling SVG geometry properties with CSS should improve in the future."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/background-size",
        "document": "The CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n\n/* Keyword values */ background-size: cover; background-size: contain; /* One-value syntax */ /* the width of the image (height becomes 'auto') */ background-size: 50%; background-size: 3.2em; background-size: 12px; background-size: auto; /* Two-value syntax */ /* first value: width of the image, second value: height */ background-size: 50% auto; background-size: 3em 25%; background-size: auto 6px; background-size: auto auto; /* Multiple backgrounds */ background-size: auto, auto; /* Not to be confused with `auto auto` */ background-size: 50%, 25%, 25%; background-size: 6px, auto, contain; /* Global values */ background-size: inherit; background-size: initial; background-size: revert; background-size: revert-layer; background-size: unset; The property is specified in one of the following ways:\n• Using the keyword values or .\n• Using a width value only, in which case the height defaults to .\n• Using both a width and a height value, in which case the first sets the width and the second sets the height. Each value can be a , a , or . To specify the size of multiple background images, separate the value for each one with a comma.\n\nScales the image as large as possible within its container without cropping or stretching the image. If the container is larger than the image, this will result in image tiling, unless the property is set to . Scales the image (while preserving its ratio) to the smallest possible size to fill the container (that is: both its height and width completely cover the container), leaving no empty space. If the proportions of the background differ from the element, the image is cropped either vertically or horizontally. Scales the background image in the corresponding direction such that its intrinsic proportions are maintained. Stretches the image in the corresponding dimension to the specified length. Negative values are not allowed. Stretches the image in the corresponding dimension to the specified percentage of the background positioning area. The background positioning area is determined by the value of (by default, the padding box). However, if the background's value is , the positioning area is instead the entire viewport. Negative values are not allowed.\n\nThe computation of values depends on the image's intrinsic dimensions (width and height) and intrinsic proportions (width-to-height ratio). These attributes are as follows:\n• A bitmap image (such as JPG) always has intrinsic dimensions and proportions.\n• A vector image (such as SVG) does not necessarily have intrinsic dimensions. If it has both horizontal and vertical intrinsic dimensions, it also has intrinsic proportions. If it has no dimensions or only one dimension, it may or may not have proportions.\n• CSS s have no intrinsic dimensions or intrinsic proportions.\n• Background images created with the function use the intrinsic dimensions and proportions of the generating element. Note: In Gecko, background images created using the function are currently treated as images with the dimensions of the element, or of the background positioning area if the element is SVG, with the corresponding intrinsic proportion. This is non-standard behavior. Based on the intrinsic dimensions and proportions, the rendered size of the background image is computed as follows:\n• If both components of are specified and are not : The background image is rendered at the specified size.\n• If the is or : While preserving its intrinsic proportions, the image is rendered at the largest size contained within, or covering, the background positioning area. If the image has no intrinsic proportions, then it's rendered at the size of the background positioning area.\n• If the is or :\n• If the image has both horizontal and vertical intrinsic dimensions, it's rendered at that size.\n• If the image has no intrinsic dimensions and has no intrinsic proportions, it's rendered at the size of the background positioning area.\n• If the image has no intrinsic dimensions but has intrinsic proportions, it's rendered as if had been specified instead.\n• If the image has only one intrinsic dimension and has intrinsic proportions, it's rendered at the size corresponding to that one dimension. The other dimension is computed using the specified dimension and the intrinsic proportions.\n• If the image has only one intrinsic dimension but has no intrinsic proportions, it's rendered using the specified dimension and the other dimension of the background positioning area. Note: SVG images have a attribute that defaults to the equivalent of ; an explicit causes to be ignored.\n• If the has one component and one non- component:\n• If the image has intrinsic proportions, it's stretched to the specified dimension. The unspecified dimension is computed using the specified dimension and the intrinsic proportions.\n• If the image has no intrinsic proportions, it's stretched to the specified dimension. The unspecified dimension is computed using the image's corresponding intrinsic dimension, if there is one. If there is no such intrinsic dimension, it becomes the corresponding dimension of the background positioning area. Note: Background sizing for vector images that lack intrinsic dimensions or proportions is not yet fully implemented in all browsers. Be careful about relying on the behavior described above, and test in multiple browsers to be sure the results are acceptable.\n\nLet's consider a large image, a 2982x2808 Firefox logo image. We want to tile four copies of this image into a 300x300-pixel element. To do this, we can use a fixed value of 150 pixels. See Resizing background images for more examples."
    },
    {
        "link": "https://stackoverflow.com/questions/25484779/background-property-browser-compatibility",
        "document": "I am using in one of my websites and it works very well in all browsers. Except Safari, unfortunately in Safari so written css is not recognised. I've already tried to find compatibility but i could not find any. Does anyone know is this supported by Safari?"
    },
    {
        "link": "https://sitepoint.com/css-with-svg",
        "document": "SVG is a lightweight vector image format that’s used to display a variety of graphics on the Web and other environments with support for interactivity and animation. In this article, we’ll explore the various ways to use CSS with SVG, and ways to include SVGs in a web page and manipulate them.\n\nThe Scalable Vector Graphic (SVG) format has been an open standard since 1999, but browser usage became practical in 2011 following the release of Internet Explorer 9. Today, SVG is well supported across all browsers, although more advanced features can vary.\n• SVGs offer scalability and quality preservation at any size, making them ideal for graphics like logos and icons that require resizing without loss of detail.\n• CSS can be used to style and manipulate SVG elements directly in the DOM, allowing for dynamic interactions and styling that can be applied consistently across multiple SVGs.\n• SVG sprites consolidate multiple images into a single file, enhancing performance by reducing HTTP requests, with added benefits of caching and using CSS to manage visual aspects.\n• Advanced SVG usage includes animations and interactivity within standalone files, demonstrating the format’s versatility for both simple and sophisticated web graphics applications.\n\nBitmap image formats such as WebP, PNG, JPG, and GIF define the color of individual pixels. A × PNG image requires 10,000 pixels. Each pixel requires four bytes for red, green, blue and transparency, so the resulting file is 40,000 bytes (plus a little more for metadata). Compression is applied to reduce the file size: PNG and GIF use ZIP-like lossless compression, while JPG is lossy and removes less noticeable details (WebP can use either method).\n\nBitmaps are ideal for photographs and more complex images, but definition is lost as images are enlarged.\n\nSVGs are vector images defined in XML. Points, lines, curves, paths, ellipses, rectangles, text, etc. are drawn on an SVG canvas. For example:\n\nThe defines a co-ordinate space. In this example, an × area starting at position has a yellow circle with a red border and a unit radius drawn in the center:\n\nThese are the benefits of vectors over bitmaps:\n• the SVG above uses fewer than 150 bytes, which is considerably smaller than an equivalent PNG or JPG\n• the image can scale to any size without losing quality\n• SVG code/elements can be generated and manipulated on the server (using any language) or browser (using CSS and JavaScript)\n• in terms of accessibility and SEO, text and drawing elements are machine and human-readable.\n\nSVG images are ideal for logos, charts, icons, and simpler diagrams. Only photographs are generally impractical, although SVGs have been used for lazy-loading placeholders.\n\nIt’s useful to understand the basics of SVG drawing, but you’ll soon want to create more complex shapes with an editor that can generate the code. Options include:\n• Vecteezy (commercial with free plan, online but Blink browsers only)\n• SVG charting libraries, which generally create SVG charts using data passed to JavaScript functions.\n\nEach tool has different strengths, and you’ll get differing results for seemingly identical images. In general, more complex images require more complex software.\n\nThe resulting code can usually be simplified and minimized further using SVGO (plugins are available for most build tools), or Jake Archibold’s SVGOMG interactive tool.\n\nWhen used within an HTML tag or CSS , SVGs act identically to bitmaps:\n\nThe browser will disable any scripts, links, and other interactive features embedded into the SVG file. You can manipulate that SVG using CSS in an identical way to other images using , , etc. The results are often superior to bitmaps because SVGs can be infinitely scaled.\n\nAn SVG can be inlined directly in CSS code as a background image. This can be ideal for smaller, reusable icons and avoids additional HTTP requests. For example:\n\nStandard UTF-8 text encoding (rather than base64) can be used, so it’s easier to edit the SVG image if necessary.\n\nThe process is usually more practical using a tool such as the PostCSS assets plugin.\n\nWhen creating a responsive website, images are often sized to the width of their container or the image itself (whichever is smaller). This is achieved in CSS using:\n\nHowever, an SVG used in an tag may have no implicit dimensions. You might discover the is calculated as zero and the image disappears entirely. To fix the problem, ensure a default and is defined in the tag:\n\nSVGs can be placed directly into HTML markup. The image then becomes part of the DOM and can be manipulated using CSS and JavaScript:\n\nIn this case, or attributes are not necessary because the dimensions can be directly controlled. For example:\n\nHowever, adding the dimensions ensures the SVG is not sized inappropriately when CSS is not applied.\n\nSee the Pen \n\n HTML-Inlined SVG by SitePoint (@SitePoint)\n\n on CodePen.\n\nSVG elements such as paths, circles, rectangles etc. can be targeted by CSS selectors and have the styling modified using standard SVG attributes as CSS properties. For example:\n\nThis overrides any attributes defined within the SVG because the CSS has a higher specificity. SVG CSS styling offers several benefits:\n• attribute-based styling can be removed from the SVG entirely to reduce the page weight\n• CSS styling can be reused across any number of SVGs on any number of pages\n• the whole SVG or individual elements of the image can have CSS effects applied using , , etc.\n\nA single SVG file can contain any number of separate images. For example, this file contains folder icons generated by IcoMoon. Each is contained within a separate container with an ID which can be targeted:\n\nThe SVG file can be referenced as an external, cached resource in an HTML page. For example, here’s how to show the folder icon at :\n\nAnd here’s how to style it with CSS:\n\nThe method has a couple of drawbacks:\n• CSS styling only applies to the element containing the . The here makes every element of the icon the same color.\n\nTo solve these issues, the SVG sprite can be embedded within page HTML then hidden using or similar techniques. An individual icon can be placed by referencing the ID:\n\nSee the Pen \n\n SVG sprites by SitePoint (@SitePoint)\n\n on CodePen.\n\nThis works in all modern browsers including IE9+ and it becomes possible to style individual elements within each icon using CSS.\n\nUnfortunately, the SVG set is no longer cached and must be reproduced on every page where an icon is required. The solution (to this solution!) is to load the SVG using Ajax — which is then cached — and inject it into the page. The IcoMoon download provides a JavaScript library, or you could use SVG for Everybody.\n• masks: altering the visibility of parts of an element\n• clipping: removing segments of an element so a standard regular box becomes any other shape\n• filters: graphical effects such as blurring, brightness, shadows, etc.\n\nThese effects have been ported to the CSS , , and properties. However, it’s still possible to target an SVG selector:\n\nThis references an effect within an HTML-embedded SVG:\n\nIt produces effects such as clipped text with an image or gradient background:\n\nSee the Pen \n\n SVG clipping by SitePoint (@SitePoint)\n\n on CodePen.\n\nFinally, a standalone SVG file can contain text, CSS, JavaScript, bitmap images, and even base64-encoded fonts! Anything outside the realms of XML should be contained within … sections.\n\nConsider the following file. It defines CSS styling with hover effects and a JavaScript animation which changes the between two states:\n\nWhen referenced in an HTML or CSS background, the SVG becomes a static image of the initial state (in essence, the first animation frame):\n\nHowever, open the image in its own browser tab and all the effects will return.\n\nThis could be useful for distributing images, demonstrations, or small documents which require some embedded interactivity.\n\nSVGs offer a wide range of technical possibilities — both within and outside of web pages. It becomes possible to style and animate the whole SVG image or individual drawing elements using CSS and/or JavaScript.\n\nThis article describes ways to manipulate SVG images, but they’re regularly used for smaller visual enhancements, such as:\n\nDespite the age of SVG technology, web developers are still discovering interesting ways to transform boring block-based pages with subtle effects through using CSS and SVG images. Let me know on Twitter if you create any good demonstrations.\n\nWhat is the difference between using SVG in CSS and HTML? SVG, or Scalable Vector Graphics, can be used both in CSS and HTML, but they serve different purposes. In HTML, SVG is used to define vector-based graphics for the web. It uses XML to describe 2D graphics and graphical applications. On the other hand, when SVG is used in CSS, it’s primarily for styling web pages. It can be used to create background images, icons, or even complex animations. The main difference lies in the application – HTML for creating the graphics, and CSS for styling them. How can I animate SVG with CSS? Animating SVG with CSS is similar to animating any other HTML element. You can use keyframes and the animation property in CSS to create smooth, scalable animations. Here’s a simple example of how you can animate an SVG element:\n\n\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nIn this example, the SVG element will continuously spin in a circle. Can I use CSS to change the color of SVG? Yes, you can use CSS to change the color of SVG elements. You can use the fill property in CSS to change the color of the SVG. Here’s an example:\n\n\n\n \n\n \n\n \n\nIn this example, the SVG will be filled with blue color. How can I use SVG as a background image in CSS? You can use SVG as a background image in CSS by using the url() function in the background-image property. Here’s an example:\n\n\n\n \n\n \n\n \n\nIn this example, the SVG file named ‘image.svg’ will be used as the background image. Can I use media queries with SVG? Yes, you can use media queries with SVG to make your SVG graphics responsive. You can adjust the size, position, or even the color of the SVG based on the screen size or other media features. Here’s an example:\n\n\n\n \n\n \n\n \n\n \n\n \n\n \n\nIn this example, the SVG will take up 50% of the width of the screen when the screen size is 600px or less. To make SVG responsive, you can use the viewBox attribute in the SVG element. The viewBox attribute allows you to specify the aspect ratio and coordinate system of the SVG. By using this attribute, the SVG will scale up and down to fit its container while maintaining its aspect ratio. Here’s an example:\n\n\n\n \n\n \n\n \n\nIn this example, the SVG will maintain a 1:1 aspect ratio and will scale to fit its container. Can I use CSS filters on SVG? Yes, you can use CSS filters on SVG. CSS filters provide various visual effects like blur, brightness, contrast, and more. Here’s an example of how you can apply a blur filter to an SVG:\n\n\n\n \n\n \n\n \n\nIn this example, the SVG will have a blur effect. How can I use SVG in CSS pseudo-elements? You can use SVG in CSS pseudo-elements by using the content property and the url() function. Here’s an example:\n\n\n\n \n\n \n\n \n\nIn this example, the SVG file named ‘image.svg’ will be inserted before the content of the element. Can I use SVG in CSS gradients? No, you cannot directly use SVG in CSS gradients. However, you can create gradient effects in SVG itself using the or elements, and then use the SVG as a background image or an image in your CSS. Can I use SVG in CSS transforms? Yes, you can use SVG in CSS transforms. You can apply 2D or 3D transformations to SVG elements such as rotate, scale, skew, or translate. Here’s an example:\n\n\n\n \n\n \n\n \n\nIn this example, the SVG will be rotated 45 degrees clockwise."
    }
]