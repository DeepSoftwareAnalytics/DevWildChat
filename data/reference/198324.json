[
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/Manual/UIE-uxml-element-TextField.html",
        "document": "A TextField lets users input text data into an application. It accepts and displays text input. You can set placeholder text to provide hints or instructions to the user on what to enter. You can also add validation functions to ensure that the entered data meets certain requirements.\n\nNote: To align a TextField with other fields in an InspectorA Unity window that displays information about the currently selected GameObject, asset or project settings, allowing you to inspect and edit the values. More info\n\nSee in Glossary window, simply apply the USS class to it. For more information, refer to .\n\nYou can create a TextField with UI(User Interface) Allows a user to interact with your application. Unity currently supports three UI systems. More info\n\nSee in Glossary Builder, UXML, and C#. The following C# example creates a TextField that allows multiple lines text input:\n\nYou can set a placeholder text for the element. You can also hide the placeholder text on focus.\n\nNote: The placeholder text won’t display if you set a value for the element. To unset a value in UI Builder, right-click the Value field in the element’s Inspector tab and select Unset.\n\nIn C#, use the and the properties through :\n\nTo style the placeholder text, use the USS selector.\n\nInput text is selectable by default. You can customize the selection behaviors such as and .\n\nIn C#, set them through :\n\nYou can also style the selected text using the USS custom property. For example, the following USS sets the color of the selected input text to yellow:\n\nIf you have enabled multiline text on the TextField, you can display a vertical scrollbar for the text input fieldA field that allows the user to input a Text string More info\n\nSee in Glossary.\n\nIn C#, set the property to or :\n\nControl the behavior of the input text\n\nYou can use events to control the behavior of the input text. The following example uses event callback functions to handle navigation and submission events for a text field. The example registers navigation events to the TrickleDown phase before they’re handled by the base class:\n\nThe following UXML example creates a TextField:\n\nThe following C# example illustrates some of the customizable functionalities of the TextField:\n\nTo try this example live in Unity, go to Window > UI Toolkit > Samples.\n\nThis element has the following member attributes:\n\nThis element inherits the following attributes from its base class:\n\nThis element also inherits the following attributes from :\n\nThe following table lists all the C# public property names and their related USS selector.\n\nYou can also use the Matching Selectors section in the Inspector or the UI Toolkit Debugger to see which USS selectors affect the components of the at every level of its hierarchy.\n\nThe following table outlines the custom properties that are available exclusively for the TextField element in USS:"
    },
    {
        "link": "https://docs.unity3d.com/2023.2/Documentation/Manual/UIE-uxml-element-TextField.html",
        "document": "A TextField lets users input text data into an application. It accepts and displays text input. You can set placeholder text to provide hints or instructions to the user on what to enter. You can also add validation functions to ensure that the entered data meets certain requirements.\n\nNote: To align a TextField with other fields in an InspectorA Unity window that displays information about the currently selected GameObject, asset or project settings, allowing you to inspect and edit the values. More info\n\nSee in Glossary window, simply apply the USS class to it. For more information, refer to .\n\nYou can create a TextField with UI(User Interface) Allows a user to interact with your application. Unity currently supports three UI systems. More info\n\nSee in Glossary Builder, UXML, and C#. The following C# example creates a TextField that allows multiple lines text input:\n\nYou can set a placeholder text for the element. You can also hide the placeholder text on focus.\n\nNote: The placeholder text won’t display if you set a value for the element. To unset a value in UI Builder, right-click the Value field in the element’s Inspector tab and select Unset.\n\nIn C#, use the and the properties through :\n\nTo style the placeholder text, use the USS selector.\n\nInput text is selectable by default. You can customize the selection behaviors such as and .\n\nIn C#, set them through :\n\nYou can also style the selected text using the USS custom property. For example, the following USS sets the color of the selected input text to yellow:\n\nIf you have enabled multiline text on the TextField, you can display a vertical scrollbar for the text input fieldA field that allows the user to input a Text string More info\n\nSee in Glossary.\n\nIn C#, set the property to or :\n\nControl the behavior of the input text\n\nYou can use events to control the behavior of the input text. The following example uses event callback functions to handle navigation and submission events for a text field. The example registers navigation events to the TrickleDown phase before they’re handled by the base class:\n\nThe following UXML example creates a TextField:\n\nThe following C# example illustrates some of the customizable functionalities of the TextField:\n\nTo try this example live in Unity, go to Window > UI Toolkit > Samples.\n\nThis element has the following member attributes:\n\nThis element inherits the following attributes from its base class:\n\nThis element also inherits the following attributes from :\n\nThe following table lists all the C# public property names and their related USS selector.\n\nYou can also use the Matching Selectors section in the Inspector or the UI Toolkit Debugger to see which USS selectors affect the components of the at every level of its hierarchy.\n\nThe following table outlines the custom properties that are available exclusively for the TextField element in USS:"
    },
    {
        "link": "https://discussions.unity.com/t/add-native-placeholder-support-for-textfield-in-ui-builder/942161",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/is-there-no-placeholder-text-property-for-textfield/806946",
        "document": ""
    },
    {
        "link": "https://docs.unity.cn/Manual/UIE-uxml-element-TextField.html",
        "document": "A TextField lets users input text data into an application. It accepts and displays text input. You can set placeholder text to provide hints or instructions to the user on what to enter. You can also add validation functions to ensure that the entered data meets certain requirements.\n\nNote: To align a TextField with other fields in an InspectorA Unity window that displays information about the currently selected GameObject, asset or project settings, allowing you to inspect and edit the values. More info\n\nSee in Glossary window, simply apply the USS class to it. For more information, refer to .\n\nYou can create a TextField with UI(User Interface) Allows a user to interact with your application. Unity currently supports three UI systems. More info\n\nSee in Glossary Builder, UXML, and C#. The following C# example creates a TextField that allows multiple lines text input:\n\nInput text is selectable by default. You can customize the selection behaviors such as and .\n\nIn C#, set them through :\n\nYou can also style the selected text using the USS custom property. For example, the following USS sets the color of the selected input text to yellow:\n\nIf you have enabled multiline text on the TextField, you can display a vertical scrollbar for the text input fieldA field that allows the user to input a Text string More info\n\nSee in Glossary.\n\nIn C#, set the property to or :\n\nControl the behavior of the input text\n\nYou can use events to control the behavior of the input text.\n\nFor example, to override the default behaviors for the Enter and Shift + Tab keyboard events in a TextField, register a KeyDownEvent to the TrickleDown phase before they’re handled by the base class:\n\nThe following UXML example creates a TextField:\n\nThe following C# example illustrates some of the customizable functionalities of the TextField:\n\nTo try this example live in Unity, go to Window > UI Toolkit > Samples.\n\nThis element has the following member attributes:\n\nThis element inherits the following attributes from its base class:\n\nThis element also inherits the following attributes from :\n\nThe following table lists all the C# public property names and their related USS selector.\n\nYou can also use the Matching Selectors section in the Inspector or the UI Toolkit Debugger to see which USS selectors affect the components of the at every level of its hierarchy.\n\nThe following table outlines the custom properties that are available exclusively for the TextField element in USS:"
    },
    {
        "link": "https://discussions.unity.com/t/is-there-no-placeholder-text-property-for-textfield/806946",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/Manual/UIE-uxml-element-TextField.html",
        "document": "A TextField lets users input text data into an application. It accepts and displays text input. You can set placeholder text to provide hints or instructions to the user on what to enter. You can also add validation functions to ensure that the entered data meets certain requirements.\n\nNote: To align a TextField with other fields in an InspectorA Unity window that displays information about the currently selected GameObject, asset or project settings, allowing you to inspect and edit the values. More info\n\nSee in Glossary window, simply apply the USS class to it. For more information, refer to .\n\nYou can create a TextField with UI(User Interface) Allows a user to interact with your application. Unity currently supports three UI systems. More info\n\nSee in Glossary Builder, UXML, and C#. The following C# example creates a TextField that allows multiple lines text input:\n\nYou can set a placeholder text for the element. You can also hide the placeholder text on focus.\n\nNote: The placeholder text won’t display if you set a value for the element. To unset a value in UI Builder, right-click the Value field in the element’s Inspector tab and select Unset.\n\nIn C#, use the and the properties through :\n\nTo style the placeholder text, use the USS selector.\n\nInput text is selectable by default. You can customize the selection behaviors such as and .\n\nIn C#, set them through :\n\nYou can also style the selected text using the USS custom property. For example, the following USS sets the color of the selected input text to yellow:\n\nIf you have enabled multiline text on the TextField, you can display a vertical scrollbar for the text input fieldA field that allows the user to input a Text string More info\n\nSee in Glossary.\n\nIn C#, set the property to or :\n\nControl the behavior of the input text\n\nYou can use events to control the behavior of the input text. The following example uses event callback functions to handle navigation and submission events for a text field. The example registers navigation events to the TrickleDown phase before they’re handled by the base class:\n\nThe following UXML example creates a TextField:\n\nThe following C# example illustrates some of the customizable functionalities of the TextField:\n\nTo try this example live in Unity, go to Window > UI Toolkit > Samples.\n\nThis element has the following member attributes:\n\nThis element inherits the following attributes from its base class:\n\nThis element also inherits the following attributes from :\n\nThe following table lists all the C# public property names and their related USS selector.\n\nYou can also use the Matching Selectors section in the Inspector or the UI Toolkit Debugger to see which USS selectors affect the components of the at every level of its hierarchy.\n\nThe following table outlines the custom properties that are available exclusively for the TextField element in USS:"
    },
    {
        "link": "https://stackoverflow.com/questions/29682103/how-to-change-placeholder-text-in-unity-ui-using-script",
        "document": "For my project the default values are calculated base on an external output, these values can be changed using input fields in the new Unity UI. If the values are not changed a grey placeholder should appear after the calculation. I realy can not figure out how to change the placeholder text by script, not even find a solution anywhere. I tried this:\n\nThe script is attached to the given Input Field game object. However to get the written value in the input field I use this line of code:\n\nIt works fine. Did I miss something? Some help would be appreciated, to write here is my last resort. Thank you forward!"
    },
    {
        "link": "https://discussions.unity.com/t/use-placeholder-text-in-customeditor/635940",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/Manual/UIE-USS-WritingStyleSheets.html",
        "document": "Follow these best practices when you write USS to style visual elementsA node of a visual tree that instantiates or derives from the C# class. You can style the look, define the behaviour, and display it on screen as part of the UI. More info\n\nSee in Glossary.\n\nUse USS files instead of inline styles when you can for more efficient memory usage.\n\nInline styles are per element and can cause memory overhead. When you use inline styles in a C# script or a UXML file on many elements, the memory usage becomes high quickly.\n\nAll USS selectors are applied at runtime so the architecture affects initialization performance. USS selectors are applied when an element first appears or when its classes change:\n• The selector is the main culprit for selectors to cause interactivity issues and a re-styling.\n• The performance impact appears under the Update Styling in the Profiler \n\n A window that helps you to optimize your game. It shows how much time is spent in the various areas of your game. For example, it can report the percentage of time spent rendering, animating, or in your game logic. More info .\n\nUsually, it’s not a problem if you have a lot of selectors because each USS file is turned into a lookup table. However, the performance decreases linearly as you add classes to an element. Each class in the list is used to query the lookup table. The complexity is , where:\n• is the number of class on the element\n• is the current number of applicable USS files\n\nThe number of elements in the hierarchy is the main fact that affects performance. Update Styling might be negligible for simple UIs(User Interface) Allows a user to interact with your application. Unity currently supports three UI systems. More info\n\nSee in Glossary but is significant for large UIs that have several thousands of elements. If an element matches a lot of selectors, it causes overhead to merge the styles coming from each rule.\n\nIn general, complex selectors have more impact on performance than simple selectors. Complex selectors depend on the ancestors of an element to match it. When possible, consider the following:\n• If you want to have partial match, use the child selector ( ) instead of the descendant selector ( ).\n• Avoid using universal selector at the end of complex selectors ( ) or the combination of descendant selector with the universal selector ( ). The universal selector tests every potential element against the selector which can impact performance.\n• Avoid using pseudo-class in selectors on elements with many descendants, such as . Mouse movements invalidate the entire hierarchy of elements targeted by an selector.\n\nYou can use the Block Element Modifier(BEM) convention to reduce hierarchical selectors. With BEM, each element receives a class that combines its specific existence inside another element.\n\nBEM stands for Block Element Modifier. BEM is a simple system that helps you write structured, non-ambiguous, easy to maintain selectors. With BEM, you assign classes to elements and then use these classes as the selectors in style sheets.\n\nBEM classes have up to three components:\n• Block name: a block is a meaningful, standalone entity or control. For example, , ,\n• Element name: a part of a block that has no standalone meaning and is semantically tied to its block. Element names are appended to the block name using two underscores. For example, , , or\n• Modifier: a flag that changes the appearance or behavior of a block or element. Append a modifier to a block or element name with two dashes. For example, , , , or .\n\nEach name part may consist of Latin letters, digits, and dashes. Each name part is joined together with either a double underscore or a double dash .\n\nThe following example shows UXML code for a menu:\n\nEach element is equipped with classes that describe its role and appearance, you can write most of your selectors with only one class name:\n\nYou can style elements with a single class name. Sometimes, you might need to use complex selectors. For example, you can use a complex selector when the style of an element depends on the modifier of its block:\n• Avoid specifying long selectors. A long selector could indicate inconsistencies in the graphic design of your UI.\n• Avoid using type names ( , ) or element names ( ) in your BEM selectors.\n\nUI Toolkit adheres to BEM. Each visual element has the necessary class names attached. For example, all have the class. Each instance of , which derives from , has its class list populated with the and classes.\n\nIf you derive a new element from or one of its descendants, following these guidelines to ensure that your element is easy to style using the BEM methodology:\n• Use in the constructor to add the relevant USS classes to your element instances.\n• If your new element instantiates child elements in its constructor, assign the relevant classes to the children. For example, , .\n• If your element supports multiple states or variants, such as small and large, add and remove relevant classes when the element state changes or when the element variant is selected.\n• If you use the element in other projects, consider prefixing your classes to avoid conflicts with existing user class names."
    }
]