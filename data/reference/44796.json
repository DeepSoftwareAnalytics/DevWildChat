[
    {
        "link": "https://docs.jupyter.org",
        "document": "Welcome to the Project Jupyter documentation site. Jupyter is a large umbrella project that covers many different software offerings and tools, including the popular Jupyter Notebook and JupyterLab web-based notebook authoring and editing applications. The Jupyter project and its subprojects all center around providing tools (and standards) for interactive computing with computational notebooks.\n\nüìò Note: Read What is Jupyter? for a detailed look at Jupyter and notebooks. A notebook is a shareable document that combines computer code, plain language descriptions, data, rich visualizations like 3D models, charts, graphs and figures, and interactive controls. A notebook, along with an editor (like JupyterLab), provides a fast interactive environment for prototyping and explaining code, exploring and visualizing data, and sharing ideas with others.\n\nMost people begin with Jupyter by installing an editing application that fits their preferences, like JupyterLab or Jupyter Notebook, and making their first notebook document:\n‚Ä¢ None JupyterLab offers a feature-rich, tabbed multi-notebook editing environment with additional tools like a customizable interface layout and system console\n‚Ä¢ None And more‚Ä¶ read about additional notebook interfaces here! You can also develop your own extensions or applications on top of existing Jupyter software. Check out the subproject sites below for more information."
    },
    {
        "link": "https://jupyter-notebook.readthedocs.io",
        "document": "Welcome to the Jupyter Notebook documentation site. Jupyter Notebook is a simplified notebook authoring application, and is a part of Project Jupyter, a large umbrella project centered around the goal of providing tools (and standards) for interactive computing with computational notebooks.\n\nA computational notebook is a shareable document that combines computer code, plain language descriptions, data, rich visualizations like 3D models, charts, graphs and figures, and interactive controls. A notebook, along with an editor like Jupyter Notebook, provides a fast interactive environment for prototyping and explaining code, exploring and visualizing data, and sharing ideas with others.\n\nJupyter Notebook is a sibling to other notebook authoring applications under the Project Jupyter umbrella, like JupyterLab and Jupyter Desktop. Jupyter Notebook offers a lightweight, simplified experience compared to JupyterLab.\n\nRead more about how to use Jupyter Notebook on this site, in the User Documentation."
    },
    {
        "link": "https://jupyter-notebook.readthedocs.io/en/stable/notebook.html",
        "document": "Jupyter Notebook is a notebook authoring application, under the Project Jupyter umbrella. Built on the power of the computational notebook format, Jupyter Notebook offers fast, interactive new ways to prototype and explain your code, explore and visualize your data, and share your ideas with others. Notebooks extend the console-based approach to interactive computing in a qualitatively new direction, providing a web-based application suitable for capturing the whole computation process: developing, documenting, and executing code, as well as communicating the results. The Jupyter notebook combines two components: A web application: A browser-based editing program for interactive authoring of computational notebooks which provides a fast interactive environment for prototyping and explaining code, exploring and visualizing data, and sharing ideas with others Computational Notebook documents: A shareable document that combines computer code, plain language descriptions, data, rich visualizations like 3D models, charts, mathematics, graphs and figures, and interactive controls See the installation guide on how to install the notebook and its dependencies.\n‚Ä¢ None In-browser editing for code, with automatic syntax highlighting, indentation, and tab completion/introspection.\n‚Ä¢ None The ability to execute code from the browser, with the results of computations attached to the code which generated them.\n‚Ä¢ None Displaying the result of computation using rich media representations, such as HTML, LaTeX, PNG, SVG, etc. For example, publication-quality figures rendered by the [matplotlib] library, can be included inline.\n‚Ä¢ None In-browser editing for rich text using the [Markdown] markup language, which can provide commentary for the code, is not limited to plain text.\n‚Ä¢ None The ability to easily include mathematical notation within markdown cells using LaTeX, and rendered natively by MathJax. Notebook documents contains the inputs and outputs of a interactive session as well as additional text that accompanies the code but is not meant for execution. In this way, notebook files can serve as a complete computational record of a session, interleaving executable code with explanatory text, mathematics, and rich representations of resulting objects. These documents are internally JSON files and are saved with the extension. Since JSON is a plain text format, they can be version-controlled and shared with colleagues. Notebooks may be exported to a range of static formats, including HTML (for example, for blog posts), reStructuredText, LaTeX, PDF, and slide shows, via the [nbconvert] command. Furthermore, any notebook document available from a public URL can be shared via the Jupyter Notebook Viewer <nbviewer>. This service loads the notebook document from the URL and renders it as a static web page. The results may thus be shared with a colleague, or as a public blog post, without other users needing to install the Jupyter notebook themselves. In effect, nbviewer is simply [nbconvert] as a web service, so you can do your own static conversions with nbconvert, without relying on nbviewer. Because you use Jupyter in a web browser, some people are understandably concerned about using it with sensitive data. However, if you followed the standard install instructions, Jupyter is actually running on your own computer. If the URL in the address bar starts with or , it‚Äôs your computer acting as the server. Jupyter doesn‚Äôt send your data anywhere else‚Äîand as it‚Äôs open source, other people can check that we‚Äôre being honest about this. You can also use Jupyter remotely: your company or university might run the server for you, for instance. If you want to work with sensitive data in those cases, talk to your IT or data protection staff about it. We aim to ensure that other pages in your browser or other users on the same computer can‚Äôt access your notebook server. See the security documentation for more about this.\n\nYou can start running a notebook server from the command line using the following command: This will print some information about the notebook server in your console, and open a web browser to the URL of the web application (by default, ). The landing page of the Jupyter notebook web application, the dashboard, shows the notebooks currently available in the notebook directory (by default, the directory from which the notebook server was started). You can create new notebooks from the dashboard with the button, or open existing ones by clicking on their name. You can also drag and drop notebooks and standard Python source code files into the notebook list area. When starting a notebook server from the command line, you can also open a particular notebook directly, bypassing the dashboard, with . The extension is assumed if no extension is given. When you are inside an open notebook, the menu option will open the dashboard in a new browser tab, to allow you to open another notebook from the notebook directory or to create a new notebook. You can start more than one notebook server at the same time, if you want to work on notebooks in different directories. By default the first notebook server starts on port 8888, and later notebook servers search for ports near that one. You can also manually specify the port with the option. A new notebook may be created at any time, either from the dashboard, or using the File ‚Ä£ New menu option from within an active notebook. The new notebook is created within the same directory and will open in a new browser tab. It will also be reflected as a new entry in the notebook list on the dashboard. An open notebook has exactly one interactive session connected to a kernel, which will execute code sent by the user and communicate back results. This kernel remains active if the web browser window is closed, and reopening the same notebook from the dashboard will reconnect the web application to the same kernel. In the dashboard, notebooks with an active kernel have a button next to them, whereas notebooks without an active kernel have a button in its place. Other clients may connect to the same kernel. When each kernel is started, the notebook server prints to the terminal a message like this: This long string is the kernel‚Äôs ID which is sufficient for getting the information necessary to connect to the kernel. If the notebook uses the IPython kernel, you can also see this connection data by running the magic, which will print the same ID information along with other details. You can then, for example, manually start a Qt console connected to the same kernel from the command line, by passing a portion of the ID: Without an ID, will connect to the most recently started kernel. With the IPython kernel, you can also run the magic in the notebook to open a Qt console connected to the same kernel.\n\nWhen you create a new notebook document, you will be presented with the notebook name, a menu bar, a toolbar and an empty code cell. Notebook name: The name displayed at the top of the page, next to the Jupyter logo, reflects the name of the file. Clicking on the notebook name brings up a dialog which allows you to rename it. Thus, renaming a notebook from ‚ÄúUntitled0‚Äù to ‚ÄúMy first notebook‚Äù in the browser, renames the file to . Menu bar: The menu bar presents different options that may be used to manipulate the way the notebook functions. Toolbar: The tool bar gives a quick way of performing the most-used operations within the notebook, by clicking on an icon. Code cell: the default type of cell; read on for an explanation of cells.\n\nThe notebook consists of a sequence of cells. A cell is a multiline text input field, and its contents can be executed by using , or by clicking either the ‚ÄúPlay‚Äù button the toolbar, or Cell, Run in the menu bar. The execution behavior of a cell is determined by the cell‚Äôs type. There are three types of cells: code cells, markdown cells, and raw cells. Every cell starts off being a code cell, but its type can be changed by using a drop-down on the toolbar (which will be ‚ÄúCode‚Äù, initially), or via keyboard shortcuts. For more information on the different things you can do in a notebook, see the collection of examples. A code cell allows you to edit and write new code, with full syntax highlighting and tab completion. The programming language you use depends on the kernel, and the default kernel (IPython) runs Python code. When a code cell is executed, code that it contains is sent to the kernel associated with the notebook. The results that are returned from this computation are then displayed in the notebook as the cell‚Äôs output. The output is not limited to text, with many other possible forms of output are also possible, including figures and HTML tables (as used, for example, in the data analysis package). This is known as IPython‚Äôs rich display capability. You can document the computational process in a literate way, alternating descriptive text with code, using rich text. In IPython this is accomplished by marking up text with the Markdown language. The corresponding cells are called Markdown cells. The Markdown language provides a simple way to perform this text markup, that is, to specify which parts of the text should be emphasized (italics), bold, form lists, etc. If you want to provide structure for your document, you can use markdown headings. Markdown headings consist of 1 to 6 hash # signs followed by a space and the title of your section. The markdown heading will be converted to a clickable link for a section of the notebook. It is also used as a hint when exporting to other document formats, like PDF. When a Markdown cell is executed, the Markdown code is converted into the corresponding formatted rich text. Markdown allows arbitrary HTML code for formatting. Within Markdown cells, you can also include mathematics in a straightforward way, using standard LaTeX notation: for inline mathematics and for displayed mathematics. When the Markdown cell is executed, the LaTeX portions are automatically rendered in the HTML output as equations with high quality typography. This is made possible by MathJax, which supports a large subset of LaTeX functionality Standard mathematics environments defined by LaTeX and AMS-LaTeX (the package) also work, such as , and . New LaTeX macros may be defined using standard methods, such as , by placing them anywhere between math delimiters in a Markdown cell. These definitions are then available throughout the rest of the IPython session. Raw cells provide a place in which you can write output directly. Raw cells are not evaluated by the notebook. When passed through [nbconvert], raw cells arrive in the destination format unmodified. For example, you can type full LaTeX into a raw cell, which will only be rendered by LaTeX after conversion by nbconvert.\n\nThe normal workflow in a notebook is, then, quite similar to a standard IPython session, with the difference that you can edit cells in-place multiple times until you obtain the desired results, rather than having to rerun separate scripts with the magic command. Typically, you will work on a computational problem in pieces, organizing related ideas into cells and moving forward once previous parts work correctly. This is much more convenient for interactive exploration than breaking up a computation into scripts that must be executed together, as was previously necessary, especially if parts of them take a long time to run. To interrupt a calculation which is taking too long, use the Kernel, Interrupt menu option, or the keyboard shortcut. Similarly, to restart the whole computational process, use the Kernel, Restart menu option or shortcut. A notebook may be downloaded as a file or converted to a number of other formats using the menu option File, Download as. [Running Code in the Jupyter Notebook] example notebook All actions in the notebook can be performed with the mouse, but keyboard shortcuts are also available for the most common ones. The essential shortcuts to remember are the following:\n‚Ä¢ None : run cell : Execute the current cell, show any output, and jump to the next cell below. If is invoked on the last cell, it makes a new cell below. This is equivalent to clicking the Cell, Run menu item, or the Play button in the toolbar.\n‚Ä¢ None : Command mode : In command mode, you can navigate around the notebook using keyboard shortcuts.\n‚Ä¢ None : Edit mode : In edit mode, you can edit text in cells. For the full list of available shortcuts, click Help, Keyboard Shortcuts in the notebook menus.\n\nTo prevent untrusted code from executing on users‚Äô behalf when notebooks open, we store a signature of each trusted notebook. The notebook server verifies this signature when a notebook is opened. If no matching signature is found, Javascript and HTML output will not be displayed until they are regenerated by re-executing the cells. Any notebook that you have fully executed yourself will be considered trusted, and its HTML and Javascript output will be displayed on load. If you need to see HTML or Javascript output without re-executing, and you are sure the notebook is not malicious, you can tell Jupyter to trust it at the command-line with: See the security documentation for more details about the trust mechanism."
    },
    {
        "link": "https://docs.jupyter.org/en/stable/install.html",
        "document": "This page contains information and links about installing and using tools across the Jupyter ecosystem. Generally speaking, the documentation of each tool is the place to learn about the best-practices for how to install and use the tool.\n\nJupyterHub is a multi-user hub for interactive computing sessions, made for teams and organizations, and with pluggable authentication and scalability.\n\nThe Jupyter Console is a terminal-based console for interactive computing.\n\nThe Jupyter QtConsole is a Qt application for interactive computing with rich output."
    },
    {
        "link": "https://stackoverflow.com/questions/47642683/how-to-see-documentation-of-inbuilt-functions-on-jupyter-notebook",
        "document": "The documentation comes from the docstring in the Python code.\n\nYou can see it by calling help, and the attribute returns the string.\n\nTaking the built-in as example:"
    },
    {
        "link": "https://reproducible-science-curriculum.github.io/sharing-RR-Jupyter/01-sharing-github",
        "document": "In this lesson we will learn:\n‚Ä¢ How to create a GitHub account and add an initial project repository. A repository is a central location where source code and data is stored and managed\n‚Ä¢ How to add a file to the repository using GitHub‚Äôs web interface\n‚Ä¢ How to visually confirm that files have been added to the repository and preview files using the GitHub interface\n‚Ä¢ The concepts of creating a public repository for the purpose of sharing your research data\n\nGitHub is a development platform where we ‚Äúcan host and review code, manage projects, and build software.‚Äù GitHub hosts source code for 75+ million projects including the package we have been using among many others.\n\n1. Go to the GitHub Homepage\n\nTo use GitHub one needs to register for a (free) account. To register for a GitHub account we need to:\n\nWe should see the the web page below.\n\nNote: If you already have a GitHub account you do NOT need to create a new one. Please skip down to step 3.\n‚Ä¢ Click the gree Sign up for GitHub button.\n\nAn example is shown in the screenshot below.\n\nWe are asked to confirm the email address that we used to sign. Please confirm the email address.\n\nWe have to choose a plan that we would like to use. We will use the personal (default) plan.\n\nWe can select any options we would like (on none).\n‚Ä¢ Click on Start a project as shown below.\n\nAfter creating the new repository, we will be taken to the project homepage (shown below).\n\nIf we click on the GitHub icon at the top of the page, we will go to our GitHub homepage.\n\nOur GitHub homepage will now show the new repository under Your repositories (as shown below).\n\nCongratulations!! We now have a GitHub account and we have created our first repository.\n\n4. Uploading an example file (notebook) to the repository\n\nWe will use GitHub‚Äôs web interface to upload our files to our new repository.\n\nBefore we upload one of our existing files, we will first create a new notebook with a ‚Äúprint(‚Äòhello world‚Äô)‚Äù statement in a single cell.\n\nTo add our new sample notebook to our GitHub repository, we will return to our repository‚Äôs homepage at https://github.com.\n\nAfter commiting the change we should see that there are now two files in the repository: 1) the README and 2) the new sample notebook (as seen in the screenshot below).\n\nWe can actually preview the notebook by clicking on it (shown below). Note that GitHub will automatically render your notebook so that it‚Äôs displayed in the browser. This can be a great way to quickly show other people what you‚Äôve been up to!\n\n5. Upload our previous working notebook to the repository\n\nIn anticipation of our next lesson on sharing notebooks in a dynamic rather than static way, let‚Äôs upload the notebook that we have bene working on. To do this we will repeat many of the steps above.\n\nAfter commiting the change we should see that there are now three files in the repository: 1) the README and 2) the sample notebook and 3) our new data analysis notebook."
    },
    {
        "link": "https://discourse.jupyter.org/t/how-do-you-share-notebooks-best-practices-around-sharing-to-external-stakeholders/3617",
        "document": "examples how to use various popular packages with gw.run network gateway"
    },
    {
        "link": "https://reddit.com/r/IPython/comments/c145fz/what_are_some_easy_ways_to_share_jupyter",
        "document": "Recent graduate from insight data science and just joined the data science team at Uber. Me and two colleagues want to form a small group to share ipython notebooks with each other to keep up our learning curve. One complication is that we need to run on GPUs somtimes and import some packages (tweepy, specifically). We looked at Google Colab, but it's a pain because we have to redo our data setups all the time. Any advice for a newbie?\n\nTLDR; how can i share jupyter notebooks with colleagues"
    },
    {
        "link": "https://mineo.app/blog-page/how-to-share-jupyter-notebooks-a-step-by-step-guide",
        "document": "Jupyter notebooks have become an indispensable tool for data scientists, analysts, and developers working with Python. They offer an interactive environment to write, run, and share code, visualizations, and markdown text. However, sharing these notebooks can be a challenge, especially when you need to maintain the interactive elements, share with non-technical stakeholders, or collaborate with team members. This blog post aims to solve this problem by exploring various methods to share Jupyter notebooks effectively.\n\nWe will delve into four main options: GitHub, Nbviewer, NBConvert, Binder, Google Colab, and MINEO. Each option comes with its own set of features, limitations, and ideal use-cases. We'll provide a detailed introduction, step-by-step guide, and a critical analysis focusing on professional environments for each. So, let's get started.\n\nGitHub, the well-known platform for version control and code sharing, has been around since 2008. It supports rendering Jupyter notebooks natively, making it a straightforward option for sharing your work. While it's primarily used for code, GitHub has evolved to become a hub for collaborative projects involving data science and machine learning.\n‚Ä¢ Push Notebook to Repository: Upload your Jupyter notebook to a GitHub repository.\n‚Ä¢ Set Permissions: Make sure the repository is public if you want to share it openly.\n‚Ä¢ Share URL: Simply share the URL of the notebook within the repository.\n\nGitHub is excellent for version control and tracking changes, but it lacks interactive features. The notebooks are rendered as static HTML pages, so users can't run or modify the code. This makes GitHub less ideal for collaborative data exploration but excellent for code review and versioning.\n\nNbviewer is a free, open-source service that turns a Jupyter notebook into a static web page. Developed as part of the Jupyter project, it has been a go-to solution for many who want a simple way to share notebooks without any setup.\n‚Ä¢ Convert: Paste the URL into Nbviewer to generate a static HTML page.\n\nNbviewer is simple and effective for quick sharing because doesn't require user accounts, making it easy to use. However, like GitHub, it renders notebooks as static web pages. It's not suitable for real-time collaboration or for sharing with someone who may want to interact with the data. Another important caveat if that your notebook must be accessible from internet as this is not desirable in many cases.\n\nBinder is an open-source platform that allows you to turn a GitHub repository into a collection of interactive notebooks. Launched as part of Project Jupyter, it offers a way to share fully interactive Jupyter notebooks without any setup required from the end user.\n‚Ä¢ Repository: Make sure your notebook is in a GitHub repository.\n‚Ä¢ Binder Configuration: Add a requirements.txt or environment.yml file to specify dependencies.\n‚Ä¢ Launch: Go to Binder and enter your repository URL to create the Binder link.\n\nBinder offers the advantage of sharing fully interactive notebooks with minimal setup. It's excellent for educational purposes and public projects. However, it's not suitable for confidential data, and the computational resources are limited.\n\nGoogle Colab is a cloud-based service that allows you to write and execute Python code through Jupyter notebooks. Launched in 2017, Google Colab has emerged as a popular platform for data scientists, analysts, and developers who work with Python and Jupyter notebooks. Its cloud-based environment, real-time collaboration features, and free access to GPUs and TPUs make it an attractive option for many.\n‚Ä¢ Upload to Colab: Import your Jupyter notebook into Google Colab.\n‚Ä¢ Set Sharing Permissions: Click on the 'Share' button and set permissions.\n‚Ä¢ Share Link: Share the generated link for collaborative editing or viewing.\n\nGoogle Colab excels in real-time collaboration and resource availability. However, it requires a Google account, which might not be ideal for all professional settings, especially those concerned with data privacy.\n\nMINEO is a SaaS platform designed to build and deploy data apps based on Python supercharged notebooks. It offers a seamless way to turn your Jupyter notebooks into interactive data applications, designed for professional environments.\n‚Ä¢ Upload to MINEO: Import or create your Jupyter notebook (.ipynb) into the MINEO.\n‚Ä¢ Share the notebook: Open the notebook and press File / Share. You can configure there the options to share the notebook: visibility, access to the code and access to specific individuals, groups or even public access.\n\nMINEO is ideal for creating interactive, shareable data apps. Its focus on data apps makes it highly valuable in professional settings where end-to-end data solutions are needed. However, it some extra features as GPU support are only available in paid plans, which might be a barrier for some teams.\n\nJupyter notebooks can be converted to various formats like PDF, HTML, and slides. This is often done for presentations, documentation, or archiving.\n‚Ä¢ Convert: Use Jupyter's nbconvert utility to convert the notebook.\n‚Ä¢ Distribute: Share the converted file through email, cloud storage, or other means.\n\nConverting notebooks is straightforward and excellent for documentation. However, it's not suitable for collaboration as the notebook becomes static and non-interactive.\n\nSharing Jupyter notebooks effectively depends on your needs. GitHub and Nbviewer are great for static sharing and version control. Google Colab offers real-time collaboration with computational resources. MINEO stands out for its professional-grade features, turning notebooks into deployable data apps.\n\nYour choice should align with your team's needs, whether it's version control, real-time collaboration, or data application development."
    },
    {
        "link": "https://community.dataquest.io/t/sharing-jupyter-notebooks-on-github/486204",
        "document": ""
    }
]