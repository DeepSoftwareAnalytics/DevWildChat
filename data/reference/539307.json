[
    {
        "link": "https://docs.flutter.dev/platform-integration/android/splash-screen",
        "document": "Splash screens (also known as launch screens) provide a simple initial experience while your Android app loads. They set the stage for your application, while allowing time for the app engine to load and your app to initialize.\n\nIn Android, there are two separate screens that you can control: a launch screen shown while your Android app initializes, and a splash screen that displays while the Flutter experience initializes.\n\nAs of Flutter 2.5, the launch and splash screens have been consolidated—Flutter now only implements the Android launch screen, which is displayed until the framework draws the first frame. This launch screen can act as both an Android launch screen and an Android splash screen via customization, and thus, is referred to as both terms. For example of such customization, check out the Android splash screen sample app. If, prior to 2.5, you used to create an app, and you run the app on 2.5 or later, the app might crash. For more info, see the Deprecated Splash Screen API Migration guide.\n\nEvery Android app requires initialization time while the operating system sets up the app's process. Android provides the concept of a launch screen to display a while the app is initializing.\n\nA is an Android graphic. To learn how to add a to your Flutter project in Android Studio, check out Import drawables into your project in the Android developer documentation.\n\nThe default Flutter project template includes a definition of a launch theme and a launch background. You can customize this by editing , where you can define a theme whose is set to the that should be displayed as the launch screen.\n\nIn addition, defines a normal theme to be applied to after the launch screen is gone. The normal theme background only shows for a very brief moment after the splash screen disappears, and during orientation change and restoration. Therefore, it's recommended that the normal theme use a solid background color that looks similar to the primary background color of the Flutter UI.\n\nIn , set the of to the launch theme. Then, add a metadata element to the desired to instruct Flutter to switch from the launch theme to the normal theme at the appropriate time.\n\nThe Android app now displays the desired launch screen while the app initializes.\n\nTo configure your launch screen on Android 12, check out Android Splash Screens.\n\nAs of Android 12, you must use the new splash screen API in your file. Consider creating an alternate resource file for Android 12 and higher. Also make sure that your background image is in line with the icon guidelines; check out Android Splash Screens for more details.\n\nMake sure that is not set in your manifest, and that is not implemented, as these APIs are deprecated. Doing so causes the Android launch screen to fade smoothly into the Flutter when the app is launched and the app might crash.\n\nSome apps might want to continue showing the last frame of the Android launch screen in Flutter. For example, this preserves the illusion of a single frame while additional loading continues in Dart. To achieve this, the following Android APIs might be helpful:\n\nThen, you can reimplement the first frame in Flutter that shows elements of your Android launch screen in the same positions on screen. For an example of this, check out the Android splash screen sample app."
    },
    {
        "link": "https://medium.com/@blup-tool/adding-a-splash-screen-to-flutter-apps-a-step-by-step-guide-adc34ebea7eb",
        "document": "Learn the steps to implement a splash screen in your Flutter app effectively. Improve user experience with a professional launch transition on Android and iOS platforms.\n\nA splash screen is an essential element of mobile apps, providing users with a professional and engaging start-up experience. In Flutter, implementing a splash screen involves configuring platform-specific settings for Android and iOS. Let’s dive into the steps required to effectively set up a splash screen on both platforms.\n• Navigate to the directory in your Flutter project.\n• Create or use existing folders ( , , etc.) for placing your branding images.\n• Ensure you have images for different densities: mdpi, hdpi, xhdpi, xxhdpi, and xxxhdpi.\n• Replace the default white background with your branding image using tags.\n• Ensure that the theme references the correct launch background configuration.\n• Replace default , , etc., with your branding images for different resolutions ( , , , ).\n• Update to include all image scales you've replaced or added.\n• Run your Flutter app on Android and iOS devices or emulators to ensure the splash screen appears correctly.\n• Adjust image placements or configurations as needed to achieve the desired visual effect.\n\nImplementing a splash screen in your Flutter app enhances user experience by providing a polished start-up sequence. By following these platform-specific steps for Android and iOS, you can ensure your app’s splash screen aligns with your brand’s identity while delivering a seamless user onboarding experience."
    },
    {
        "link": "https://stackoverflow.com/questions/71535425/how-to-use-the-flutter-native-splash-screen",
        "document": "You can create native splash screen for both (android, iOS) platform to follow the doc (manually) (https://docs.flutter.dev/development/ui/advanced/splash-screen) but I will recommend you to use plugin cause it will save your time and create less opportunity of mistakes.\n\nCreate a new assets and logos folder in your root project path and place your like this\n\nAdd at in (please replace with the latest version number. Check it)\n\nPaste this below code in your and change the color and image asset path\n\nFinally in your project path terminal, run this command: and it will generate native splash screen for both android and iOS."
    },
    {
        "link": "https://stackoverflow.com/questions/54575622/splash-screen-implementation-in-flutter",
        "document": "I am new to Flutter and I wanted to have splash screen in my app. I used initState() and the navigator. But it didn't work. The app opens the splashscreen appears but after that it does not navigate to the next screen.\n\nHow can I resolve this?\n\nSince I am new to flutter I dont know whether this is the right way to implement splashScreen if there are any other easier ways can you please suggest that also.\n\nThank you in advance."
    },
    {
        "link": "https://medium.com/simform-engineering/splash-master-quick-and-simple-splash-screen-setup-in-flutter-51175a3b80f8",
        "document": "Tired of manually adding splash screens to both Android and iOS every time you start a new flutter project?\n\nRead on to know how Splash Master simplifies splash screen set-up for both platforms — and the extra benefits it brings to your workflow.\n\nWhat problems does Splash Master aim to resolve?\n• If the native splash screen is not implemented, a Flutter app will display a white screen during startup, creating an unpolished and abrupt user experience. Splash Master helps you remove this white screen by seamlessly integrating a visually appealing native splash screen, ensuring your app makes a strong first impression.\n• Splash Master provides a way to set up a transition video, Lottie animation, or any custom widget to display after the native splash screen, creating a smooth continuation from the native splash screen to your Flutter screen.\n\nHow to set up splash_master?\n\nStep-1 As any dependency just add splash_master to your pubspec.yaml file.\n\nStep-2 Add splash_master section in the pubspec.yaml and mention the splash image which you want to show as the splash screen.\n• This command will automatically set up a native splash screen on both Android and iOS platforms.\n\nThat’s it! We implemented a splash screen in just 4 steps.\n• The create command will parse the pubspec.yaml file and find the mentioned splash image. Then it will place it into native asset folders. For Android, it will create a custom drawable and set it as a splash screen in styles.xml. For iOS, it will create a .imageset and set it in the LaunchScreen.storyboard.\n• The function is designed to halt the rendering of new frames, ensuring the current frame remains visible on the screen. But the flutter framework will still produce the frames in the background. This function serves as an ideal entry point for setting up various elements for your app.\n• You can use this function to initialize video playback, Lottie animations, or any other custom widgets you want to display as part of a custom splash screen. In addition, the function is well-suited for initializing critical components of your application, such as SDKs, libraries, or other dependencies required for your app's functionality.\n• If only an image-based splash screen is used, you do not require additional setup or initialization. You can conclude the splash screen process at this point. Simply call the following function to resume the app then proceed to the main application interface.\n• If you want to integrate a video splash screen, you can use the widgets from Splash Master to integrate and display them seamlessly.\n• This automatically plays the video once it loads and it will also navigate to the next screen when the video ends.\n• If you want to set a custom configuration, you can use onSourceLoaded.\n• If you’re using onSourceLoaded or any other custom component for your splash screen, you will need to call once the animation is completed. This ensures that the app transitions from the splash screen to the main app. Without this, the app could remain stuck on the splash screen, as custom animations require a manual trigger for the transition."
    },
    {
        "link": "https://docs.flutter.dev/ui/assets/assets-and-images",
        "document": "Flutter apps can include both code and assets (sometimes called resources). An asset is a file that is bundled and deployed with your app, and is accessible at runtime. Common types of assets include static data (for example, JSON files), configuration files, icons, and images (JPEG, WebP, GIF, animated WebP/GIF, PNG, BMP, and WBMP).\n\nFlutter uses the file, located at the root of your project, to identify assets required by an app.\n\nHere is an example:\n\nTo include all assets under a directory, specify the directory name with the character at the end:\n\nThe subsection of the section specifies files that should be included with the app. Each asset is identified by an explicit path (relative to the file) where the asset file is located. The order in which the assets are declared doesn't matter. The actual directory name used ( in first example or in the above example) doesn't matter.\n\nDuring a build, Flutter places assets into a special archive called the asset bundle that apps read from at runtime.\n\nFlutter supports using a Dart package to transform asset files when building your app. To do this, specify the asset files and transformer package in your pubspec file. To learn how to do this and write your own asset-transforming packages, see Transforming assets at build time.\n\nYour app can access its assets through an object.\n\nThe two main methods on an asset bundle allow you to load a string/text asset ( ) or an image/binary asset ( ) out of the bundle, given a logical key. The logical key maps to the path to the asset specified in the file at build time.\n\nEach Flutter app has a object for easy access to the main asset bundle. It is possible to load assets directly using the global static from .\n\nHowever, it's recommended to obtain the for the current using , rather than the default asset bundle that was built with the app; this approach enables a parent widget to substitute a different at run time, which can be useful for localization or testing scenarios.\n\nTypically, you'll use to indirectly load an asset, for example a JSON file, from the app's runtime .\n\nOutside of a context, or when a handle to an is not available, you can use to directly load such assets. For example:\n\nTo load an image, use the class in a widget's method.\n\nFor example, your app can load the background image from the asset declarations in the previous example:\n\nFlutter can load resolution-appropriate images for the current device pixel ratio.\n\nwill map a logical requested asset onto one that most closely matches the current device pixel ratio.\n\nFor this mapping to work, assets should be arranged according to a particular directory structure:\n\nWhere M and N are numeric identifiers that correspond to the nominal resolution of the images contained within. In other words, they specify the device pixel ratio that the images are intended for.\n\nIn this example, is considered the main asset, while and are considered to be variants.\n\nThe main asset is assumed to correspond to a resolution of 1.0. For example, consider the following asset layout for an image named :\n\nOn devices with a device pixel ratio of 1.8, the asset is chosen. For a device pixel ratio of 2.7, the asset is chosen.\n\nIf the width and height of the rendered image are not specified on the widget, the nominal resolution is used to scale the asset so that it occupies the same amount of screen space as the main asset would have, just with a higher resolution. That is, if is 72px by 72px, then should be 216px by 216px; but they both render into 72px by 72px (in logical pixels), if width and height are not specified.\n\nYou only need to specify the main asset or its parent directory in the section of . Flutter bundles the variants for you. Each entry should correspond to a real file, with the exception of the main asset entry. If the main asset entry doesn't correspond to a real file, then the asset with the lowest resolution is used as the fallback for devices with device pixel ratios below that resolution. The entry should still be included in the manifest, however.\n\nAnything using the default asset bundle inherits resolution awareness when loading images. (If you work with some of the lower level classes, like or , you'll also notice parameters related to scale.)\n\nTo load an image from a package dependency, the argument must be provided to .\n\nFor instance, suppose your application depends on a package called , which has the following directory structure:\n\nTo load the image, use:\n\nAssets used by the package itself should also be fetched using the argument as above.\n\nIf the desired asset is specified in the file of the package, it's bundled automatically with the application. In particular, assets used by the package itself must be specified in its .\n\nA package can also choose to have assets in its folder that are not specified in its file. In this case, for those images to be bundled, the application has to specify which ones to include in its . For instance, a package named could have the following files:\n\nTo include, say, the first image, the of the application should specify it in the section:\n\nThe is implied, so it should not be included in the asset path.\n\nIf you are developing a package, to load an asset within the package, specify it in the of the package:\n\nTo load the image within your package, use:\n\nFlutter assets are readily available to platform code using the on Android and on iOS.\n\nOn Android the assets are available through the API. The lookup key used in, for instance , is obtained from on or on . is available when developing a plugin while would be the choice when developing an app including a platform view.\n\nAs an example, suppose you have specified the following in your pubspec.yaml\n\nThis reflects the following structure in your Flutter app.\n\nTo access from your Java plugin code, do the following:\n\nOn iOS the assets are available through the . The lookup key used in, for instance , is obtained from or on , or or on . is available when developing a plugin while would be the choice when developing an app including a platform view.\n\nAs an example, suppose you have the Flutter setting from above.\n\nTo access from your Objective-C plugin code you would do the following:\n\nTo access from your Swift app you would do the following:\n\nFor a more complete example, see the implementation of the Flutter plugin on pub.dev.\n\nThe plugin on pub.dev wraps up this logic in a convenient category. You fetch an image as follows:\n\nWhen implementing Flutter by adding it to an existing iOS app, you might have images hosted in iOS that you want to use in Flutter. To accomplish that, use the plugin available on pub.dev.\n\nThere are other occasions to work with assets in the platform projects directly. Below are two common cases where assets are used before the Flutter framework is loaded and running.\n\nUpdating a Flutter application's launch icon works the same way as updating launch icons in native Android or iOS applications.\n\nIn your Flutter project's root directory, navigate to . The various bitmap resource folders such as already contain placeholder images named . Replace them with your desired assets respecting the recommended icon size per screen density as indicated by the Android Developer Guide.\n\nIn your Flutter project's root directory, navigate to . The directory already contains placeholder images. Replace them with the appropriately sized images as indicated by their filename as dictated by the Apple Human Interface Guidelines. Keep the original file names.\n\nFlutter also uses native platform mechanisms to draw transitional launch screens to your Flutter app while the Flutter framework loads. This launch screen persists until Flutter renders the first frame of your application.\n\nTo add a launch screen (also known as \"splash screen\") to your Flutter application, navigate to . In , use this layer list drawable XML to customize the look of your launch screen. The existing template provides an example of adding an image to the middle of a white splash screen in commented code. You can uncomment it or use other drawables to achieve the intended effect.\n\nFor more details, see Adding a splash screen to your Android app.\n\nTo add an image to the center of your \"splash screen\", navigate to . In , drop in images named , , . If you use different filenames, update the file in the same directory.\n\nYou can also fully customize your launch screen storyboard in Xcode by opening . Navigate to in the Project Navigator and drop in images by opening or do any customization using the Interface Builder in .\n\nFor more details, see Adding a splash screen to your iOS app."
    },
    {
        "link": "https://pmatatias.medium.com/simple-but-i-didnt-notice-handling-asset-files-in-flutter-484609657b1b",
        "document": "After some debugging and surfing the internet, I finally found the main problem. I don’t manage my assets directory and don’t specify it in my file.\n\nThis is the main issue:\n\nMy mistake was placing all used and unused files in one assets directory. Also, register that folder in file without specifying the files (like in the example above). This means that all files will be compiled as part of the app.\n\nTo prove it, let's do some demo here:\n• I have the Flutter project below. And I just added some random files to my assets folder. The image with the green text name is the unused image. I only use 2 images in my project: and\n• in my file only specifies one folder of assets.\n\nif I check the properties of the directory, it has 6.15MB of total size.\n\nHere I try to run in my terminal. And the result is 13.1MB\n\nCompile and specify the assets.\n\nNo need to delete the file from the asset's directory. All we need to do is, by specifying which one we need to include in the app.\n\nand try to compile again in my terminal: And BOOOOMMMMM…!!!!!\n\nIt's now only 7.4MB, which means it has reduced by about 6MB from the beginning. Now only 2 images are included in the APK bundle."
    },
    {
        "link": "https://docs.flutter.dev/tools/pubspec",
        "document": "Every Flutter project includes a file, often referred to as the pubspec. A basic pubspec is generated when you create a new Flutter project. It's located at the top of the project tree and contains metadata about the project that the Dart and Flutter tooling needs to know. The pubspec is written in YAML, which is human readable, but be aware that white space (tabs v spaces) matters.\n\nThe pubspec file specifies dependencies that the project requires, such as particular packages (and their versions), fonts, or image files. It also specifies other requirements, such as dependencies on developer packages (like testing or mocking packages), or particular constraints on the version of the Flutter SDK.\n\nFields common to both Dart and Flutter projects are described in the pubspec file on dart.dev. This page lists Flutter-specific fields that are only valid for a Flutter project.\n\nWhen you create a new project with the command (or by using the equivalent button in your IDE), it creates a pubspec for a basic Flutter app.\n\nHere is an example of a Flutter project pubspec file. The Flutter only fields are highlighted.\n\nCommon types of assets include static data (for example, JSON files), configuration files, icons, and images (JPEG, WebP, GIF, animated WebP/GIF, PNG, BMP, and WBMP).\n\nBesides listing the images that are included in the app package, an image asset can also refer to one or more resolution-specific \"variants\". For more information, see the resolution aware section of the Assets and images page. For information on adding assets from package dependencies, see the asset images in package dependencies section in the same page.\n\nAs shown in the above example, each entry in the fonts section should have a key with the font family name, and a key with a list specifying the asset and other descriptors for the font.\n\nFor examples of using fonts see the Use a custom font and Export fonts from a package recipes in the Flutter cookbook.\n\nFor more information on packages, plugins, and pubspec files, see the following:\n• What not to commit on dart.dev"
    },
    {
        "link": "https://stackoverflow.com/questions/60304111/how-to-handle-the-images-efficiently-as-assets-in-pubspec-yaml",
        "document": "So I have my project that has 20 folders and each folder has 10 images, I need to animate the images.\n\nGenerally we assign images in flutter like below,\n\nSo Do I have to assign all these images as assets like above? Or is there any way to handle large set of local images in flutter?"
    },
    {
        "link": "https://stackoverflow.com/questions/74316723/how-can-i-add-assets-in-flutter-pubspec-yaml",
        "document": "The assets to specify in the pubspec should be inside the section.\n\nalso example with directories:\n\nTake a fast read to the official docs: https://docs.flutter.dev/development/ui/assets-and-images"
    }
]