[
    {
        "link": "https://stackoverflow.com/questions/13903947/want-help-to-create-a-list-in-as3-flash",
        "document": "I want to create a scrollable list in flash/as3 and the important thing is.... if the user wants to move some list item up or down... he can do that by dragging the item... so when he press and hold on an item... the item will become drag-able and as the user moves it up or down the list, the other items should slide to the empty space. Its the same behavior seen in smartphones....\n\nI'll figure out the creation, data filling, scrolling, and other mouse interaction events.... i just want help with this one behavior....of changing the order of items by dragging them. If only someone can just provide the basic algorithm or any idea how this can be achieved.. it will be enough.\n\nFirst of all... i apologize for not posting any details about the question... (this is my first post to this site) and hence i am adding all the research and what i have done so far.\n• the list is part of a big project hence i cannot share the whole code.\n\nWHAT I HAVE ALREADY DONE :\n• i have created a mask, a container, a scroll bar to scroll the container, items to add into the list, methods to add items, remove items and arrange them according to the order.\n• hence it is a scrallable and working list.\n• the whole thing is in as3 and flash only.\n• i don't know flex and i don't want to use it either.\n\nWHAT I WANT NEXT :\n• i want to change the order of these items by (mouse_down on an item -> drag it up/down -> mouse_up at the position) sequence.\n\nIf anyone wants more details i can share it."
    },
    {
        "link": "https://home.csulb.edu/~arezaei/ETEC570/Action%20script%203.pdf",
        "document": ""
    },
    {
        "link": "https://airsdk.dev/reference/actionscript/3.0/index.html",
        "document": "This document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. \n\n Link to Non-frame version."
    },
    {
        "link": "https://airsdk.dev/reference/actionscript/3.0/flash/system/Capabilities.html",
        "document": "The Capabilities class provides properties that describe the system and runtime that are hosting the application. For example, a mobile phone's screen might be 100 square pixels, black and white, whereas a PC screen might be 1000 square pixels, color. By using the Capabilities class to determine what capabilities the client has, you can provide appropriate content to as many users as possible. When you know the device's capabilities, you can tell the server to send the appropriate SWF files or tell the SWF file to alter its presentation. The Capabilities class provides properties that describe the system and runtime that are hosting HTML (and SWF) content. By using the Capabilities class to determine what capabilities the client has, you can provide appropriate content to as many users as possible. When you know the device's capabilities, you can load appropriate content or use code to alter its presentation. However, some capabilities of Adobe AIR are not listed as properties in the Capabilities class. They are properties of other classes: Do not use or to determine a capability based on the operating system. Basing a capability on the operating system is a bad idea, since it can lead to problems if an application does not consider all potential target operating systems. Instead, use the property corresponding to the capability for which you are testing. You can send capabilities information, which is stored in the property as a URL-encoded string, using the or HTTP method. The following example shows a server string for a computer that has MP3 support and 1600 x 1200 pixel resolution, that is running Windows XP with an input method editor (IME) installed, and does not have support for multichannel audio: The following table lists the properties of the Capabilities class and corresponding server strings. It also lists the server strings for the multichannel audio types. There is also a server string that specifies whether windowless mode is disabled. Windowless mode can be disabled in Flash Player due to incompatibility with the web browser or to a user setting in the mms.cfg file. There is no corresponding Capabilities property. All properties of the Capabilities class are read-only. \n\n\n\navHardwareDisable : Boolean [static][read-only] Specifies whether access to the user's camera and microphone has been administratively prohibited ( ) or allowed ( ). constructor : Object A reference to the class object or constructor function for a given object instance. cpuAddressSize : Number [static][read-only] Specifies whether the Flash Player or AIR application running on the system is 32-bit or 64-bit. hasAccessibility : Boolean [static][read-only] Specifies whether the system supports ( ) or does not support ( ) communication with accessibility aids. hasAudio : Boolean [static][read-only] Specifies whether the system has audio capabilities. hasAudioEncoder : Boolean [static][read-only] Specifies whether the system can ( ) or cannot ( ) encode an audio stream, such as that coming from a microphone. hasEmbeddedVideo : Boolean [static][read-only] Specifies whether the system supports ( ) or does not support ( ) embedded video. hasIME : Boolean [static][read-only] Specifies whether the system does ( ) or does not ( ) have an input method editor (IME) installed. hasMP3 : Boolean [static][read-only] Specifies whether the system does ( ) or does not ( ) have an MP3 decoder. hasPrinting : Boolean [static][read-only] Specifies whether the system does ( ) or does not ( ) support printing. hasScreenBroadcast : Boolean [static][read-only] Specifies whether the system does ( ) or does not ( ) support the development of screen broadcast applications to be run through Flash Media Server. hasScreenPlayback : Boolean [static][read-only] Specifies whether the system does ( ) or does not ( ) support the playback of screen broadcast applications that are being run through Flash Media Server. hasStreamingAudio : Boolean [static][read-only] Specifies whether the system can ( ) or cannot ( ) play streaming audio. hasStreamingVideo : Boolean [static][read-only] Specifies whether the system can ( ) or cannot ( ) play streaming video. hasTLS : Boolean [static][read-only] Specifies whether the system supports native SSL sockets through NetConnection ( ) or does not ( ). hasVideoEncoder : Boolean [static][read-only] Specifies whether the system can ( ) or cannot ( ) encode a video stream, such as that coming from a web camera. isDebugger : Boolean [static][read-only] Specifies whether the system is a special debugging version ( ) or an officially released version ( ). isEmbeddedInAcrobat : Boolean [static][read-only] Specifies whether the Flash runtime is embedded in a PDF file that is open in Acrobat 9.0 or higher ( ) or not ( ). language : String [static][read-only] Specifies the language code of the system on which the content is running. languages : Array [static][read-only] An array of strings that contain information about the user's preferred user interface languages, as set through the operating system. localFileReadDisable : Boolean [static][read-only] Specifies whether read access to the user's hard disk has been administratively prohibited ( ) or allowed ( ). manufacturer : String [static][read-only] Specifies the manufacturer of the running version of Flash Player or the AIR runtime, in the format . maxLevelIDC : String [static][read-only] Retrieves the highest H.264 Level IDC that the client hardware supports. pixelAspectRatio : Number [static][read-only] Specifies the pixel aspect ratio of the screen. prototype : Object [static] A reference to the prototype object of a class or function object. screenDPI : Number [static][read-only] Specifies the dots-per-inch (dpi) resolution of the screen, in pixels. screenResolutionX : Number [static][read-only] Specifies the maximum horizontal resolution of the screen. screenResolutionY : Number [static][read-only] Specifies the maximum vertical resolution of the screen. serverString : String [static][read-only] A URL-encoded string that specifies values for each Capabilities property. touchscreenType : String [static][read-only] Specifies the type of touchscreen supported, if any. version : String [static][read-only] Specifies the Flash Player or Adobe® AIR® platform and version information.\n\n[read-only] Specifies whether access to the user's camera and microphone has been administratively prohibited ( ) or allowed ( ). The server string is . For content in Adobe AIR™, this property applies only to content in security sandboxes other than the application security sandbox. Content in the application security sandbox can always access the user's camera and microphone. \n\n \n\n [read-only] Specifies whether the Flash Player or AIR application running on the system is 32-bit or 64-bit. Returns 32 and 64 for 32-bit and 64-bit code respectively. \n\n \n\n [read-only] Specifies the current CPU architecture. The property can return the following strings: \" \", \" \", \" \", and \" \". The server string is . \n\n \n\n [read-only] Specifies whether the system supports ( ) or does not support ( ) communication with accessibility aids. The server string is . \n\n \n\n [read-only] Specifies whether the system has audio capabilities. This property is always . The server string is . \n\n \n\n [read-only] Specifies whether the system can ( ) or cannot ( ) encode an audio stream, such as that coming from a microphone. The server string is . \n\n \n\n [read-only] Specifies whether the system supports ( ) or does not support ( ) embedded video. The server string is . \n\n \n\n [read-only] Specifies whether the system does ( ) or does not ( ) have an input method editor (IME) installed. The server string is . \n\n \n\n [read-only] Specifies whether the system does ( ) or does not ( ) have an MP3 decoder. The server string is . \n\n \n\n [read-only] Specifies whether the system does ( ) or does not ( ) support printing. The server string is . \n\n \n\n [read-only] Specifies whether the system does ( ) or does not ( ) support the development of screen broadcast applications to be run through Flash Media Server. The server string is . \n\n \n\n [read-only] Specifies whether the system does ( ) or does not ( ) support the playback of screen broadcast applications that are being run through Flash Media Server. The server string is . \n\n \n\n [read-only] Specifies whether the system can ( ) or cannot ( ) play streaming audio. The server string is . \n\n \n\n [read-only] Specifies whether the system can ( ) or cannot ( ) play streaming video. The server string is . \n\n \n\n [read-only] Specifies whether the system supports native SSL sockets through NetConnection ( ) or does not ( ). The server string is . \n\n \n\n [read-only] Specifies whether the system can ( ) or cannot ( ) encode a video stream, such as that coming from a web camera. The server string is . \n\n \n\n [read-only] Specifies whether the system is a special debugging version ( ) or an officially released version ( ). The server string is . This property is set to when running in the debug version of Flash Player or the AIR Debug Launcher (ADL). \n\n \n\n [read-only] Specifies whether the Flash runtime is embedded in a PDF file that is open in Acrobat 9.0 or higher ( ) or not ( ). \n\n \n\n [read-only] Specifies the language code of the system on which the content is running. The language is specified as a lowercase two-letter language code from ISO 639-1. For Chinese, an additional uppercase two-letter country code from ISO 3166 distinguishes between Simplified and Traditional Chinese. The languages codes are based on the English names of the language: for example, specifies Hungarian. On English systems, this property returns only the language code ( ), not the country code. On Microsoft Windows systems, this property returns the user interface (UI) language, which refers to the language used for all menus, dialog boxes, error messages, and help files. The following table lists the possible values: Note: The value of property is limited to the possible values on this list. Because of this limitation, Adobe AIR applications should use the first element in the array to determine the primary user interface language for the system. \n\n \n\n \n\n \n\nIn the following example, the content that is displayed depends on the language of the user's operating system. In the following example, the content that is displayed depends on the language of the user's operating system. The property returns the ISO 639-1 language code (for example, \"en\" for English). The statement checks for the language code and sets the content of the text field to a greeting specific to the language. If the language code is not supported by the example, the default error string is returned. package { import flash.display.Sprite; import flash.text.TextField; import flash.text.TextFieldAutoSize; import flash.system.Capabilities; public class Capabilities_languageExample extends Sprite { public function Capabilities_languageExample() { var myTextField:TextField = new TextField(); myTextField.x = 10; myTextField.y = 10; myTextField.background = true; myTextField.autoSize = TextFieldAutoSize.LEFT; var greetingEnglish:String = \"Hello World\"; var greetingGerman:String = \"Hallo Welt\"; var greetingFrench:String = \"Bonjour Monde\"; var greetingSpanish:String = \"Hola Mundo\"; var lang:String = Capabilities.language; switch (lang) { case \"en\": myTextField.text = greetingEnglish; break; case \"de\": myTextField.text = greetingGerman; break; case \"fr\": myTextField.text = greetingFrench; break; case \"es\": myTextField.text = greetingSpanish; break; default: myTextField.text = \"Sorry your system's language is not supported at this time.\"; } this.addChild(myTextField); } } } [read-only] An array of strings that contain information about the user's preferred user interface languages, as set through the operating system. The strings will contain language tags (and script and region information, where applicable) defined by RFC4646 (http://www.ietf.org/rfc/rfc4646.txt) and will use dashes as a delimiter (for example, or ). Languages are listed in the array in the order of preference, as determined by the operating system settings. Operating systems differ in region information returned in locale strings. One operating system may return , whereas another may return . The first entry in the returned array generally has the same primary language ID as the property. For example, if is set to , then the property is set to . However, if the property is set to (specifying an unknown language), the first element in this array will be different. For this reason, can be more accurate than . \n\n \n\n [read-only] Specifies whether read access to the user's hard disk has been administratively prohibited ( ) or allowed ( ). For content in Adobe AIR, this property applies only to content in security sandboxes other than the application security sandbox. (Content in the application security sandbox can always read from the file system.) If this property is , Flash Player cannot read files (including the first file that Flash Player launches with) from the user's hard disk. If this property is , AIR content outside of the application security sandbox cannot read files from the user's hard disk. For example, attempts to read a file on the user's hard disk using load methods will fail if this property is set to . Reading runtime shared libraries is also blocked if this property is set to , but reading local shared objects is allowed without regard to the value of this property. \n\n \n\n [read-only] Specifies the manufacturer of the running version of Flash Player or the AIR runtime, in the format . The value for could be , , , or another operating system name. The server string is . Do not use to determine a capability based on the operating system if a more specific capability property exists. Basing a capability on the operating system is a bad idea, since it can lead to problems if an application does not consider all potential target operating systems. Instead, use the property corresponding to the capability for which you are testing. For more information, see the Capabilities class description. \n\n \n\n [read-only] Retrieves the highest H.264 Level IDC that the client hardware supports. Media run at this level are guaranteed to run; however, media run at the highest level might not run with the highest quality. This property is useful for servers trying to target a client's capabilities. Using this property, a server can determine the level of video to send to the client. \n\n \n\n [read-only] Specifies the current operating system. The property can return the following strings: (Flash Player attaches the Linux version, such as Do not use to determine a capability based on the operating system if a more specific capability property exists. Basing a capability on the operating system is a bad idea, since it can lead to problems if an application does not consider all potential target operating systems. Instead, use the property corresponding to the capability for which you are testing. For more information, see the Capabilities class description. \n\n \n\n [read-only] Specifies the pixel aspect ratio of the screen. The server string is . \n\n \n\n [read-only] Specifies the type of runtime environment. This property can have one of the following values:\n• for the Flash Player ActiveX control used by Microsoft Internet Explorer\n• for the Adobe AIR runtime (except for SWF content loaded by an HTML page, which has set to )\n• for the Flash Player browser plug-in (and for SWF content loaded by an HTML page in an AIR application) \n\n \n\n [read-only] Specifies the screen color. This property can have the value , (for grayscale), or (for black and white). The server string is . \n\n \n\n [read-only] Specifies the dots-per-inch (dpi) resolution of the screen, in pixels. The server string is . \n\n \n\n [read-only] Specifies the maximum horizontal resolution of the screen. The server string is (which returns both the width and height of the screen). This property does not update with a user's screen resolution and instead only indicates the resolution at the time Flash Player or an Adobe AIR application started. Also, the value only specifies the primary screen. \n\n \n\n [read-only] Specifies the maximum vertical resolution of the screen. The server string is (which returns both the width and height of the screen). This property does not update with a user's screen resolution and instead only indicates the resolution at the time Flash Player or an Adobe AIR application started. Also, the value only specifies the primary screen. \n\n \n\n \n\n \n\nThe following example is a simple test that indicates the current screen resolution and operating system version. When testing this example, click the text field to see the property values: import flash.events.*; import flash.display.*; import flash.system.Capabilities; import flash.text.TextField; var screenInfoTxt:TextField = new TextField(); screenInfoTxt.x = 30; screenInfoTxt.y = 50; screenInfoTxt.width = 300; screenInfoTxt.height = 100; screenInfoTxt.border = true; addChild(screenInfoTxt); addEventListener(MouseEvent.CLICK, getScreenNVersion); function getScreenNVersion(e:MouseEvent):void{ screenInfoTxt.text= \"flash.system.Capabilities.screenResolutionX is : \" + String(flash.system.Capabilities.screenResolutionX) + \"\n\n\" + \"flash.system.Capabilities.screenResolutionY is : \" + String(flash.system.Capabilities.screenResolutionY) + \"\n\n\" + \"flash.system.Capabilities.version is : \" + flash.system.Capabilities.version; } The following example is a simple test that indicates the current screen resolution and operating system version. When testing this example, click the text field to see the property values: [read-only] A URL-encoded string that specifies values for each Capabilities property. The following example shows a URL-encoded string: \n\n \n\n [read-only] Specifies whether the system supports running 32-bit processes. The server string is . \n\n \n\n [read-only] Specifies whether the system supports running 64-bit processes. The server string is . \n\n \n\n [read-only] Specifies the type of touchscreen supported, if any. Values are defined in the flash.system.TouchscreenType class. \n\n \n\n \n\n \n\nThe following example is a simple test that indicates the current type of touch screen. When testing this example, click a text field to see the property values: The following example is a simple test that indicates the current type of touch screen. When testing this example, click a text field to see the property values: [read-only] Specifies the Flash Player or Adobe® AIR® platform and version information. The format of the version number is: platform majorVersion,minorVersion,buildNumber,internalBuildNumber. Possible values for platform are , ` , , and . Here are some examples of version information: WIN 9,0,0,0 // Flash Player 9 for Windows MAC 7,0,25,0 // Flash Player 7 for Macintosh LNX 9,0,115,0 // Flash Player 9 for Linux AND 10,2,150,0 // Flash Player 10 for Android Do not use to determine a capability based on the operating system if a more specific capability property exists. Basing a capability on the operating system is a bad idea, since it can lead to problems if an application does not consider all potential target operating systems. Instead, use the property corresponding to the capability for which you are testing. For more information, see the Capabilities class description. \n\n \n\n \n\n \n\nThe following example is a simple test that indicates the current screen resolution and operating system version. When testing this example, click the text field to see the property values: import flash.events.*; import flash.display.*; import flash.system.Capabilities; import flash.text.TextField; var screenInfoTxt:TextField = new TextField(); screenInfoTxt.x = 30; screenInfoTxt.y = 50; screenInfoTxt.width = 300; screenInfoTxt.height = 100; screenInfoTxt.border = true; addChild(screenInfoTxt); addEventListener(MouseEvent.CLICK, getScreenNVersion); function getScreenNVersion(e:MouseEvent):void{ screenInfoTxt.text= \"flash.system.Capabilities.screenResolutionX is : \" + String(flash.system.Capabilities.screenResolutionX) + \"\n\n\" + \"flash.system.Capabilities.screenResolutionY is : \" + String(flash.system.Capabilities.screenResolutionY) + \"\n\n\" + \"flash.system.Capabilities.version is : \" + flash.system.Capabilities.version; } The following example is a simple test that indicates the current screen resolution and operating system version. When testing this example, click the text field to see the property values: Specifies whether the system supports multichannel audio of a specific type. The class flash.media.AudioDecoder enumerates the possible types. AIR profile support: Multichannel audio is supported only on AIR for TV devices. On all other devices, this method always returns . See AIR Profile Support for more information regarding API support across multiple profiles. When using one of the DTS audio codecs, scenarios exist in which returns but the DTS audio is not played. For example, consider a Blu-ray player with an S/PDIF output, connected to an old amplifier. The old amplifier does not support DTS, but S/PDIF has no protocol to notify the Blu-ray player. If the Blu-ray player sends the DTS stream to the old amplifier, the user hears nothing. Therefore, as a best practice when using DTS, provide a user interface so that the user can indicate if no sound is playing. Then, your application can revert to a different codec. The following table shows the server string for each multichannel audio type: — A String value representing a multichannel audio type. The valid values are the constants defined in flash.media.AudioDecoder. — The Boolean value if the system supports the multichannel audio type passed in the parameter. Otherwise, the return value is . \n\n \n\n . package { import flash.display.Sprite; import flash.system.Capabilities; import flash.text.TextField; import flash.text.TextFieldAutoSize; public class CapabilitiesExample extends Sprite { public function CapabilitiesExample() { showCapabilities(); } private function showCapabilities():void { var tf:TextField = new TextField(); tf.height = 600; tf.width = 400; tf.autoSize = TextFieldAutoSize.LEFT; tf.wordWrap = true; tf.text = \"avHardwareDisable: \" + Capabilities.avHardwareDisable + \"\n\nhasAccessibility: \" + Capabilities.hasAccessibility + \"\n\nhasAudio: \" + Capabilities.hasAudio + \"\n\nhasAudioEncoder: \" + Capabilities.hasAudioEncoder + \"\n\nhasEmbeddedVideo: \" + Capabilities.hasEmbeddedVideo + \"\n\nhasIME: \" + Capabilities.hasIME + \"\n\nhasMP3: \" + Capabilities.hasMP3 + \"\n\nhasPrinting: \" + Capabilities.hasPrinting + \"\n\nhasScreenBroadcast: \" + Capabilities.hasScreenBroadcast + \"\n\nhasScreenPlayback: \" + Capabilities.hasScreenPlayback + \"\n\nhasStreamingAudio: \" + Capabilities.hasStreamingAudio + \"\n\nhasStreamingVideo: \" + Capabilities.hasStreamingVideo + \"\n\nhasTLS: \" + Capabilities.hasTLS + \"\n\nhasVideoEncoder: \" + Capabilities.hasVideoEncoder + \"\n\nisDebugger: \" + Capabilities.isDebugger + \"\n\nisEmbeddedInAcrobat: \" + Capabilities.isEmbeddedInAcrobat + \"\n\nlanguage: \" + Capabilities.language + \"\n\nlocalFileReadDisable: \" + Capabilities.localFileReadDisable + \"\n\nmanufacturer: \" + Capabilities.manufacturer + \"\n\nmaxLevelIDC: \" + Capabilities.maxLevelIDC + \"\n\nos: \" + Capabilities.os + \"\n\npixelAspectRatio: \" + Capabilities.pixelAspectRatio + \"\n\nplayerType: \" + Capabilities.playerType + \"\n\nscreenColor: \" + Capabilities.screenColor + \"\n\nscreenDPI: \" + Capabilities.screenDPI + \"\n\nscreenResolutionX: \" + Capabilities.screenResolutionX + \"\n\nscreenResolutionY: \" + Capabilities.screenResolutionY + \"\n\nserverString: \" + Capabilities.serverString + \"\n\ntouchscreenType: \" + Capabilities.touchscreenType + // The following capabilities are supported only when publishing for AIR. // If you are publishing for AIR, uncomment the following lines. //\"\n\nlanguages: \" + Capabilities.languages + //\"\n\ncpuArchitecture: \" + Capabilities.cpuArchitecture + //\"\n\nsupports32BitProcesses: \" + Capabilities.supports32BitProcesses + //\"\n\nsupports64BitProcesses: \" + Capabilities.supports64BitProcesses + \"\n\nversion: \" + Capabilities.version; addChild(tf); trace(\"avHardwareDisable: \" + Capabilities.avHardwareDisable); trace(\"hasAccessibility: \" + Capabilities.hasAccessibility); trace(\"hasAudio: \" + Capabilities.hasAudio); trace(\"hasAudioEncoder: \" + Capabilities.hasAudioEncoder); trace(\"hasEmbeddedVideo: \" + Capabilities.hasEmbeddedVideo); trace(\"hasIME: \" + Capabilities.hasIME); trace(\"hasMP3: \" + Capabilities.hasMP3); trace(\"hasPrinting: \" + Capabilities.hasPrinting); trace(\"hasScreenBroadcast: \" + Capabilities.hasScreenBroadcast); trace(\"hasScreenPlayback: \" + Capabilities.hasScreenPlayback); trace(\"hasStreamingAudio: \" + Capabilities.hasStreamingAudio); trace(\"hasStreamingVideo: \" + Capabilities.hasStreamingVideo); trace(\"hasTLS: \" + Capabilities.hasTLS); trace(\"hasVideoEncoder: \" + Capabilities.hasVideoEncoder); trace(\"isDebugger: \" + Capabilities.isDebugger); trace(\"isEmbeddedInAcrobat: \" + Capabilities.isEmbeddedInAcrobat); trace(\"language: \" + Capabilities.language); trace(\"localFileReadDisable: \" + Capabilities.localFileReadDisable); trace(\"manufacturer: \" + Capabilities.manufacturer); trace(\"maxLevelIDC: \" + Capabilities.maxLevelIDC); trace(\"os: \" + Capabilities.os); trace(\"pixelAspectRatio: \" + Capabilities.pixelAspectRatio); trace(\"playerType: \" + Capabilities.playerType); trace(\"screenColor: \" + Capabilities.screenColor); trace(\"screenDPI: \" + Capabilities.screenDPI); trace(\"screenResolutionX: \" + Capabilities.screenResolutionX); trace(\"screenResolutionY: \" + Capabilities.screenResolutionY); trace(\"serverString: \" + Capabilities.serverString); trace(\"touchscreenType: \" + Capabilities.touchscreenType); // The following capabilities are supported only when publishing for AIR. // If you are publishing for AIR, uncomment the following lines. //trace(\"cpuArchitecture: \" + Capabilities.cpuArchitecture); //trace(\"languages: \" + Capabilities.languages); //trace(\"supports32BitProcesses: \" + Capabilities.supports32BitProcesses); //trace(\"supports64BitProcesses: \" + Capabilities.supports64BitProcesses); trace(\"version: \" + Capabilities.version); } } } The following example outputs the values found in the flash.system.Capabilities object. First, it outputs the values into a text field. Then, it outputs the values using several calls to"
    },
    {
        "link": "https://isbe.net/CTEDocuments/BMCE-680098.pdf",
        "document": "Every child will make significant academic gains each year, increasing their knowledge, skills, and opportunities so they graduate equipped to pursue a successful future, with the state paying special attention to addressing historic inequities.\n\nAll districts and schools will receive the resources necessary to create safe, healthy, and welcoming learning environments, and will be equipped to meet the unique academic and social and emotional needs of each and every student."
    },
    {
        "link": "https://stackoverflow.com/questions/17623429/actionscript-3-handling-mouse-event-cases",
        "document": "You check and . is the object that originally dispatched the event and is the latest object to dispatch it (generally the object your listener is attached to).\n\nQuick overview of that. Assume obj2 is wrapped by obj1 which is on the stage. Quick hierarchy:\n\nIf you were to trigger an event (that bubbles, that is important as it allows an event to go through its parents until it reaches an event handler. I believe all s do this ) in obj2 and had a listener attached to Stage, obj2 would be the target and Stage would be the currentTarget.\n\nSo how does this work for you? Well, you just need to check what target and currentTarget are to determine where the event started and where it currently is at.\n\nPlug this into Flash and click on the object and release in various locations and take a look at your console (I did test this):\n\nFor the most part, in your stageUp handler, you can check if to determine if it also happened to mySprite.\n\nThere is a caveat here, though. If your Sprite has children, one of those children will be the target. However, if you set , it will not register mouse events on children which means it will behave as it does in the above example."
    },
    {
        "link": "https://stackoverflow.com/questions/9626199/how-to-handle-mouseevent-transparently-in-as3",
        "document": "I have a DisplayObject docked at the top of my interface that displays debug information (frames per second, etc.) and is translucent with an alpha of 60%.\n\nI would like to interact with items under this surface, such that when the mouse rolls over it, it dims to 10% alpha, and mouse events pass through it to the underlying objects.\n\nNormally, I have this debug info panel's mouseEnabled and mouseChildren properties set to false, so objects under it receive mouse events.\n\nThe problem is that in order to hide it when the mouse rolls over it, it needs to have mouseEnabled set to true. However, if mouseEnabled is true, the mouse events are not picked up by objects underneath it.\n\nAs far as I know, I can't selectively enable mouseEvents, so it's either going to receive them all or none of them. That means that I'd have to handle and forward ALL events, if I took that approach.\n\nI really wish the mouseEnabled property had a \"peek\" mode or something, so that it could receive the events if it is on top, but also allow them to pass through to objects underneath."
    },
    {
        "link": "https://edutechwiki.unige.ch/en/ActionScript_3_event_handling_tutorial",
        "document": "Grab the various *.fla files from here:\n\nAccording to the Flash CS3 documentation, retrieved 12:43, 7 September 2007 (MEST):\n\nEvery component broadcasts events when a user interacts with it. When a user clicks a Button, for example, it dispatches a event and when a user selects an item in a List, the List dispatches an event. An event can also occur when something significant happens to a component such as when content finishes loading for a UILoader instance, generating an event. To handle an event, you write ActionScript code that executes when the event occurs.\n\nEvents are detected by some object\n\nUsually, events are broadcasted by an instance of an interactive object, typically a graphic on the screen that is a symbol instance. User interactions are, technically speaking, events generated by Flash objects. You then have to write code that can deal with these events. Firstly you must give a name to each symbol instance, users interact with. Otherwise your AS code can't find them.\n• So before you code anything in ActionScript that deals with events generated by some user interaction with an object, click on this instance, open the parameters window and fill in label parameter.\n\nThis name must be legal:\n• Start the label name with a letter\n• Do not use whitespaces or punctuation characters or dashes\n• Always put AS code into a separate layer, e.g. call it \"Action\"\n• Note: AS2 also would allow you to attach code to instances. You can't do this.\n\nE.g. if you want the user to interact with buttons after the animation loads:\n• Click on frame 1 of the \"Action\" layer\n\nCode will only work within the frames the layer extends to. So if your code is supposed to be valid throughout the animation.\n• Go to the last frame in your timeline\n\nFor each event (user action or something else) you would like to intercept, you must register a so-called event listener function.\n\nThe syntax is the following:\n• Let's say you have a button instance. In the parameters panel you named it hello_button.\n• If you want to tell the button to watch out for user clicks then you have to write something like to register the event with a function (see below).\n• So goto the ActionScript layer and hit F9. Then type:\n\nProgrammers (only): You should be aware that a a component's events inherit from the parent classes. You also can remove a listener with the removeEventListener(). Also the correct explanation is \"Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event\".\n\nLet's recall that when an event happens, Flash will create an object that will be sent to the registered function. This object contains at least the following information:\n\nSince target refers to an object you then can also extract information about the target, e.g. its label (if it has one).\n\nThe event handler function (also called a callback function) will be called by Flash as soon as the event happens. Think a function as a kind of recipe that will do something with a given event. This function that you have to define yourself will receive the following information:\n• A single event object (just described before) that will contain information about the event type and the instance (e.g. the hello_button in our case).\n• In other words, the function will know \"what\" happened and \"where\".\n\nNow you must write some code that deals with it, e.g. moves to playhead in the timeline to another frame.\n• You can register multiple listeners to one instance.\n• You can register the same listener to multiple instances.\n\nAfter you registered an event handling function like\n\nyou then have to define this function. E.g. if we called our function click_handler we get the following template:\n\nevent_object is a parameter name (we came up with) and that will contain a representation of the event and that includes a reference to the instance on which the user clicked, e.g. the 'hello_button in our case.\n\nFrom the Flash button tutorial. When a user clicks on the \"launch_button\", then the launchRocket function is called. It will move the animation to Frame 2 and let it play.\n\nThis is the copy/pasted example from the Flash components tutorial.\n\nWe first register an event handling function with five different buttons.\n\nThe function itself looked like this:\n\nThe function will receive an object that contains information about the event.\n\nLet's now look at the first line. What does it mean ?\n• The function is called clickHandler (we can give it any name we like)\n• The event object it will receive for processing when something happens is associated with event. In more technical terms event is a parameter that you can use as a variable in subsequent code.\n• MouseEvent is the type of the event variable and we should declare this.\n• :void means that the function will not return any information.\n\nNon-programmers: Just insert these last two elements the same way and don't worry.\n\nNote: Flash also allows Flash designers who typically just insert little bits of code to ignore typing, e.g. you just could write:\n\nbut this is considered bad practice, it makes your program less secure.\n\nswitch is a programming statement that is use to organize program flow. In other words, we need to take different action for different user input. Its syntax is the following:\n\nSo event.currentTarget.label means that we ask the event object event its current target (i.e. the button on which the user clicked) and from this its label (i.e. what the user sees). This will allow us to figure out which button was clicked.\n\nAll display objects with which you can interact can produce events: mouse, keyboard, and focus.\n\nHere is a short list of all (most?) events that can be generated by interactive objects with which a user can interact through mouse, keyboard, and the more general concept of focus. It also includes loading/modification events like animation entering a frame or an object being inserted to the stage.\n\nFor (very) technical information, consult in Adope ActionScript 3.0 Language and Components Reference: InteractiveObject (see also its subclasses) and Event (and subpages like MouseEvent)\n\nHere is a list of events and mouse/keyboard/focus event properties:\n\nEach generated event contains different information, but some is inherited by all kinds of events:\n\nThe most interesting property of an event is\n• currentTarget, the object that is actively processing the Event object with an event listener. E.g. the button on which a user clicked. You probably will use this one a lot.\n\nNow let's look at mouse events. Flash defines 10 different types of mouse events (see the event overview table above). Each of these events contains extra information the may be useful. Let's have a look at the click event ojbect (as defined in the Adobe reference manual. This object conatins about 12 different properties that describe the event.\n\nWhat this technical documentation means is that we can extract extra information from the generated event object, e.g.\n• if the user pressed the CTRL or SHIFT key\n• where the target object sits, either relative to the stage or relative to a parent object.\n• Of course, we also can extract the target itself, since a Mouse Click Event is a kind of general Event described above.\n• Introduction to event handling in ActionScript 3.0 by Trevor McCauley, Adobe Developer Connection (good tutorial)\n\nThese are almost impossible to understand for non programmers, but otherwise the documentation at Adobe is excellent.\n• InteractiveObject. This InteractiveObject class is the abstract base class for all display objects with which the user can interact, using the mouse and keyboard. Most Events are documented here. (Make sure to list also the inherited events).\n• Event. The Event class is used as the base class for the creation of Event objects, which are passed as parameters to event listeners when an event occurs.\n• EventDispatcher. This is the page you should consult when you want to look up details for methods like addEventListener()."
    },
    {
        "link": "https://gamedev.stackexchange.com/questions/29061/what-is-the-best-way-to-handle-mouseevents-in-as3",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://airsdk.dev/reference/actionscript/3.0/flash/events/MouseEvent.html",
        "document": "When nested nodes are involved, mouse events target the deepest possible nested node that is visible in the display list. This node is called the target node. To have a target node's ancestor receive notification of a mouse event, use EventDispatcher.addEventListener() on the ancestor node with the type parameter set to the specific mouse event you want to detect.\n\nA MouseEvent object is dispatched into the event flow whenever mouse events occur. A mouse event is usually generated by a user input device, such as a mouse or a trackball, that uses a pointer.\n\n[read-only] The vertical coordinate at which the event occurred in global Stage coordinates.\n\n[read-only] The horizontal coordinate at which the event occurred in global Stage coordinates.\n\nIndicates whether the Shift key is active ( true ) or inactive ( false ).\n\nA reference to a display list object that is related to the event.\n\n[static] A reference to the prototype object of a class or function object.\n\nWhen mouse locking is enabled, the change in mouse position in the Y direction since the last mouse event.\n\nWhen mouse locking is enabled, the change in mouse position in the X direction since the last mouse event.\n\nWhen mouse locking is disabled, the vertical coordinate at which the event occurred relative to the containing sprite.\n\nWhen mouse locking is disabled, the horizontal coordinate at which the event occurred relative to the containing sprite.\n\nIf true , the relatedObject property is set to null for reasons related to security sandboxes.\n\nThe current phase in the event flow.\n\nIndicates how many lines should be scrolled for each unit the user rotates the mouse wheel.\n\nThe object that is actively processing the Event object with an event listener.\n\nOn Windows or Linux, indicates whether the Ctrl key is active ( true ) or inactive ( false ).\n\nIndicates whether the Control key is activated on Mac and whether the Ctrl key is activated on Windows or Linux.\n\nA reference to the class object or constructor function for a given object instance.\n\nThe value of property commandKey will have the same value as property ctrlKey on the Mac.\n\nIndicates whether the command key is activated (Mac only.)\n\n[read-only] Indicates whether or not the mouse down event is part of a multi-click sequence.\n\nIndicates whether the behavior associated with the event can be prevented.\n\nIndicates whether the primary mouse button is pressed ( true ) or not ( false ).\n\nIndicates whether an event is a bubbling event.\n\nIndicates whether the Alt key is active ( true ) or inactive ( false ).\n\nReturns the primitive value of the specified object.\n\nInstructs Flash Player or Adobe AIR to render after processing of this event completes, if the display list has been modified.\n\nReturns a string that contains all the properties of the MouseEvent object.\n\nReturns the string representation of this object, formatted according to locale-specific conventions.\n\nPrevents processing of any event listeners in nodes subsequent to the current node in the event flow.\n\nPrevents processing of any event listeners in the current node and any subsequent nodes in the event flow.\n\nSets the availability of a dynamic property for loop operations.\n\nIndicates whether the specified property exists and is enumerable.\n\nCancels an event's default behavior if that behavior can be canceled.\n\nIndicates whether an instance of the Object class is in the prototype chain of the object specified as the parameter.\n\nChecks whether the preventDefault() method has been called on the event.\n\nIndicates whether an object has a specified property defined.\n\nA utility function for implementing the toString() method in custom ActionScript 3.0 Event classes.\n\nCreates a copy of the MouseEvent object and sets the value of each property to match that of the original.\n\nCreates an Event object that contains information about mouse events.\n\n[static] The Event.WORKER_STATE constant defines the value of the type property of a workerState event object.\n\n[static] The Event.VIDEO_FRAME constant defines the value of the type property of a videoFrame event object.\n\n[static] The Event.USER_PRESENT constant defines the value of the type property of a userPresent event object.\n\n[static] The Event.USER_IDLE constant defines the value of the type property of a userIdle event object.\n\n[static] The Event.UNLOAD constant defines the value of the type property of an unload event object.\n\n[static] The Event.TEXTURE_READY constant defines the value of the type property of a textureReady event object.\n\n[static] The Event.TEXT_INTERACTION_MODE_CHANGE constant defines the value of the type property of a interaction mode event object.\n\n[static] The Event.TAB_INDEX_CHANGE constant defines the value of the type property of a tabIndexChange event object.\n\n[static] The Event.TAB_ENABLED_CHANGE constant defines the value of the type property of a tabEnabledChange event object.\n\n[static] The Event.TAB_CHILDREN_CHANGE constant defines the value of the type property of a tabChildrenChange event object.\n\n[static] The Event.SUSPEND constant defines the value of the type property of an suspend event object.\n\n[static] The Event.STANDARD_OUTPUT_CLOSE constant defines the value of the type property of a standardOutputClose event object.\n\n[static] The Event.STANDARD_INPUT_CLOSE constant defines the value of the type property of a standardInputClose event object.\n\n[static] The Event.STANDARD_ERROR_CLOSE constant defines the value of the type property of a standardErrorClose event object.\n\n[static] The Event.SOUND_COMPLETE constant defines the value of the type property of a soundComplete event object.\n\n[static] The Event.SELECT_ALL constant defines the value of the type property of a selectAll event object.\n\n[static] The Event.SELECT constant defines the value of the type property of a select event object.\n\n[static] The Event.SCROLL constant defines the value of the type property of a scroll event object.\n\n[static] Defines the value of the type property of a rollOver event object.\n\n[static] Defines the value of the type property of a rollOut event object.\n\n[static] Defines the value of the type property of a rightMouseUp event object.\n\n[static] Defines the value of the type property of a rightMouseDown event object.\n\n[static] Defines the value of the type property of a rightClick event object.\n\n[static] The Event.RESIZE constant defines the value of the type property of a resize event object.\n\n[static] The Event.RENDER constant defines the value of the type property of a render event object.\n\n[static] The Event.REMOVED_FROM_STAGE constant defines the value of the type property of a removedFromStage event object.\n\n[static] The Event.REMOVED constant defines the value of the type property of a removed event object.\n\n[static] Defines the value of the type property of a releaseOutside event object.\n\n[static] The Event.PREPARING constant defines the value of the type property of a preparing event object.\n\n[static] The Event.PASTE constant defines the value of the type property of a paste event object.\n\n[static] The Event.OPEN constant defines the value of the type property of an open event object.\n\n[static] The Event.NETWORK_CHANGE constant defines the value of the type property of a networkChange event object.\n\n[static] Defines the value of the type property of a mouseWheelHorizontal event object.\n\n[static] Defines the value of the type property of a mouseWheel event object.\n\n[static] Defines the value of the type property of a mouseUp event object.\n\n[static] Defines the value of the type property of a mouseOver event object.\n\n[static] Defines the value of the type property of a mouseOut event object.\n\n[static] Defines the value of the type property of a mouseMove event object.\n\n[static] The Event.MOUSE_LEAVE constant defines the value of the type property of a mouseLeave event object.\n\n[static] Defines the value of the type property of a mouseDown event object.\n\n[static] Defines the value of the type property of a middleMouseUp event object.\n\n[static] Defines the value of the type property of a middleMouseDown event object.\n\n[static] Defines the value of the type property of a middleClick event object.\n\n[static] The Event.LOCATION_CHANGE constant defines the value of the type property of a locationChange event object.\n\n[static] The Event.INIT constant defines the value of the type property of an init event object.\n\n[static] The Event.ID3 constant defines the value of the type property of an id3 event object.\n\n[static] The Event.HTML_RENDER constant defines the value of the type property of an htmlRender event object.\n\n[static] The Event.HTML_DOM_INITIALIZE constant defines the value of the type property of an htmlDOMInitialize event object.\n\n[static] The Event.HTML_BOUNDS_CHANGE constant defines the value of the type property of an htmlBoundsChange event object.\n\n[static] The Event.FULL_SCREEN constant defines the value of the type property of a fullScreen event object.\n\n[static] The Event.FRAME_LABEL constant defines the value of the type property of an frameLabel event object.\n\n[static] The Event.FRAME_CONSTRUCTED constant defines the value of the type property of an frameConstructed event object.\n\n[static] The Event.EXITING constant defines the value of the type property of an exiting event object.\n\n[static] The Event.EXIT_FRAME constant defines the value of the type property of an exitFrame event object.\n\n[static] The Event.ENTER_FRAME constant defines the value of the type property of an enterFrame event object.\n\n[static] Defines the value of the type property of a doubleClick event object.\n\n[static] The Event.DISPLAYING constant defines the value of the type property of a displaying event object.\n\n[static] The Event.DEACTIVATE constant defines the value of the type property of a deactivate event object.\n\n[static] Defines the value of the type property of a cut event object.\n\n[static] Defines the value of the type property of a copy event object.\n\n[static] The MouseEvent.CONTEXT_MENU constant defines the value of the type property of a contextMenu event object.\n\n[static] The Event.CONTEXT3D_CREATE constant defines the value of the type property of a context3Dcreate event object.\n\n[static] The Event.CONNECT constant defines the value of the type property of a connect event object.\n\n[static] The Event.COMPLETE constant defines the value of the type property of a complete event object.\n\n[static] The Event.CLOSING constant defines the value of the type property of a closing event object.\n\n[static] The Event.CLOSE constant defines the value of the type property of a close event object.\n\n[static] Defines the value of the type property of a click event object.\n\n[static] The Event.CLEAR constant defines the value of the type property of a clear event object.\n\n[static] The Event.CHANNEL_STATE constant defines the value of the type property of a channelState event object.\n\n[static] The Event.CHANNEL_MESSAGE constant defines the value of the type property of a channelMessage event object.\n\n[static] The Event.CHANGE constant defines the value of the type property of a change event object.\n\n[static] The Event.CANCEL constant defines the value of the type property of a cancel event object.\n\n[static] The Event.BROWSER_ZOOM_CHANGE constant defines the value of the type property of an browserZoomChange event object.\n\n[static] The Event.ADDED_TO_STAGE constant defines the value of the type property of an addedToStage event object.\n\n[static] The Event.ADDED constant defines the value of the type property of an added event object.\n\n[static] The ACTIVATE constant defines the value of the type property of an activate event object.\n\nDefines the value of the property of a event object. This event has the following properties: if the Alt key is active (Windows). if the primary mouse button is pressed; otherwise. ; the default behavior cannot be canceled. on the Mac if the Command key is active; if it is inactive. Always on Windows. if the Ctrl or Control key is active; if it is inactive. on Windows or Linux if the Ctrl key is active. on Mac if either the Ctrl key or the Command key is active. Otherwise, . The object that is actively processing the Event object with an event listener. The horizontal coordinate at which the event occurred relative to the containing sprite, if mouse locking is disabled. The vertical coordinate at which the event occurred relative to the containing sprite, if mouse locking is disabled. The change in horizontal coordinates of the mouse position since the last mouse event, if mouse locking is enabled. The change in vertical coordinates of the mouse position since the last mouse event, if mouse locking is enabled. if the Shift key is active; if it is inactive. The horizontal coordinate at which the event occurred in global stage coordinates. The vertical coordinate at which the event occurred in global stage coordinates. The InteractiveObject instance under the pointing device. The is not always the object in the display list that registered the event listener. Use the property to access the object in the display list that is currently processing the event. \n\n \n\nThe following example is a simple drawing program. The user can draw on the main Sprite object or on a smaller rectangular Sprite object. The following example is a simple drawing program. The user can draw on the main Sprite object or on a smaller rectangular Sprite object. In the constructor, a rectangle Sprite object is created and the line style is set to green. The line style for drawing on the Sprite container is set to red. Separate event listeners for the and events are added for the application's main Sprite object and Sprite object. In both cases, the mouse down event listener methods move the current drawing position to the mouse pointer's location and add a listener for the event. When the mouse pointer is moved, the invoked event listener methods follows the pointer and draw a line using the method. (Note: The Sprite object obscures the red lines of the main Sprite object that are drawn behind the rectangle.) When the event occurs, the listener for the event is removed and drawing is stopped."
    }
]