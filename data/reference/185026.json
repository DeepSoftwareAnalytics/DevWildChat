[
    {
        "link": "https://nodejs.org/en/download/package-manager/all",
        "document": "Node.js LTS and npm packages are available in the Main Repository.\n\nNode.js Current can be installed from the Community Repository.\n\nAndroid support is still experimental in Node.js, so precompiled binaries are not yet provided by Node.js developers.\n\nHowever, there are some third-party solutions. For example, Termux community provides terminal emulator and Linux environment for Android, as well as own package manager and extensive collection of many precompiled applications. This command in Termux app will install the last available Node.js version:\n\nCurrently, Termux Node.js binaries are linked against (depending on package).\n\nNode.js and npm packages are available in the Community Repository.\n\nNode.js is available as a module called in CentOS/RHEL 8 and Fedora.\n\nwhere corresponds to the major version of Node.js. To see a list of available streams:\n\nFor example, to install Node.js 18:\n\nThese resources provide packages compatible with CentOS, Fedora, and RHEL.\n\nNode.js binary distributions are available from NodeSource.\n\nPackages compatible with Debian and Ubuntu based Linux distributions are available via Node.js snaps.\n\nNode.js and npm packages are available in the arbor repository.\n\nFast and simple Node.js version manager built in Rust used to manage multiple released Node.js versions. It allows you to perform operations like install, uninstall, switch Node versions automatically based on the current directory, etc. To install fnm, use this install script.\n\nfnm has cross-platform support (macOS, Windows, Linux) & all popular shells (Bash, Zsh, Fish, PowerShell, Windows Command Line Prompt). fnm is built with speed in mind and compatibility support for and files.\n\nThe most recent release of Node.js is available via the www/node port.\n\nOr compile it on your own using ports:\n\nNode.js is available in the portage tree.\n\nLTS versions of Node.js are available from IBM, and are available via the 'yum' package manager. The package name is followed by the major version number (for instance, , etc)\n\nTo install Node.js 20.x from the command line, run the following as a user with *ALLOBJ special authority:\n\nNode.js can also be installed with the IBM i Access Client Solutions product. See this support document for more details\n\nDownload the macOS Installer directly from the nodejs.org web site.\n\nIf you want to download the package with bash:\n\nis a simple to use Node.js version manager for Mac and Linux. Specify the target version to install using a rich syntax, or select from a menu of previously downloaded versions. The versions are installed system-wide or user-wide, and for more targeted use you can run a version directly from the cached downloads.\n\nSee the homepage for install methods (bootstrap, npm, Homebrew, third-party), and all the usage details.\n\nIf you already have then installing and then the newest LTS version is as simple as:\n\nNode.js is available in the pkgsrc tree:\n\nOr install a binary package (if available for your platform) using pkgin:\n\nis a lightweight node version manager, similar to . It's simple and predictable. A rich plugin ecosystem lets you tailor it to suit your needs. Use to pick a Node version for your application and guarantee that your development environment matches production.\n\nNodenv installation instructions are maintained on its Github page. Please visit that page to ensure you're following the latest version of the installation steps.\n\nNode Version Manager is a bash script used to manage multiple released Node.js versions. It allows you to perform operations like install, uninstall, switch version, etc. To install nvm, use this install script.\n\nOn Unix / OS X systems Node.js built from source can be installed using nvm by installing into the location that nvm expects:\n\nAfter this you can use to switch between released versions and versions built from source. For example, if the version of Node.js is v8.0.0-pre:\n\nOnce the official release is out you will want to uninstall the version built from source:\n\nThe version manager is cross-platform and can be used on Windows, macOS, and Unix-like systems\n\nTo install on Windows go to the release page here and download the MSI installer file of the latest release.\n\nYou can also use to install it:\n\nYou can find the documentation regarding the installation steps of in macOS/Unix-like systems here\n\nAfter this you can use to switch between different versions of node.\n\nTo add the latest version of node:\n\nOr to add the latest LTS version of node:\n\nThen run the command to add a version of node to your for the current shell:\n\nTo add it to permanently, use :\n\nNode.js is available through the ports system.\n\nNode.js is available in the main repositories under the following packages:\n• SUSE Linux Enterprise Server (SLES) 12: , , and (The \"Web and Scripting Module\" must be enabled.)\n• SUSE Linux Enterprise Server (SLES) 15 SP2: , , and (The \"Web and Scripting Module\" must be enabled.)\n\nFor example, to install Node.js 14.x on openSUSE Leap 15.2, run the following as root:\n\nDifferent major versions of Node can be installed and used concurrently.\n\nSmartOS images come with pkgsrc pre-installed. On other illumos distributions, first install pkgsrc, then you may install the binary package as normal:\n\nNode.js snaps are available as on the Snap store.\n\nSolus provides Node.js in its main repository.\n\nIt allows you to different versions for different projects, different versions for different shells, and switch Node versions automatically based on the current directory, etc.\n\nSee the Quick Start for quickly using vfox, and all the usage details.\n\nDownload the Windows Installer directly from the nodejs.org web site.\n\nAfter running one of the two commands above, it may be necessary to restart the terminal emulator before the CLI command becomes available.\n\nIBM® SDK for Node.js - z/OS® is available in two installation formats, SMP/E and PAX. Select the installation format that applies to you:\n• Installing and configuring SMP/E edition of Node.js on z/OS\n• Installing and configuring PAX edition of Node.js on z/OS"
    },
    {
        "link": "https://phoenixnap.com/kb/debian-install-nodejs",
        "document": "Node.js is an open-source JavaScript (JS) runtime environment for developing web applications. It is lightweight and efficient, thanks to its event-driven, non-blocking I/O model and cross-platform support.\n\nThere are several ways to install Node.js on Debian. The best approach depends on the specific Node.js version.\n\nThis guide explains how to install Node.js on Debian using three different methods.\n\nThe simplest way to install Node.js on Debian is from the official repository. This method is simple and sufficient for development purposes.\n\nFollow the steps below to install Node.js using the APT package manager.\n\nBefore installing Node.js, make sure the repository is up to date. To update system repositories, run the following apt command:\n\nThen, upgrade packages to the latest version:\n\nAfter updating and upgrading the repository, proceed to the next step.\n\nUse to install Node.js and the Node Package Manager (NPM), the default package manager for Node.js.\n\nThe command also installs any required dependencies for both packages.\n\nRun the command with to check the Node.js version and verify the package installation:\n\nThe latest version of Node.js may not be available in the APT repository. To get a newer version, use the PPA repository by NodeSource. This method enables you to choose a specific version that is unavailable through the repositories.\n\nInstalling Node.js from PPA requires the curl command. To install the latest version of , run:\n\nThe output shows that is up to date. In case it is not, the system updates the command. To verify the installation, run:\n\nAdd PPA to the system and install it with:\n\nThe command downloads and runs the Bash script to add the package to the repository listing.\n\nOnce the system adds the PPA, update the repository:\n\nWhen installing from the PPA, Node.js and NPM come in the same package. Install both with:\n\nTo confirm Node.js and NPM are installed, check their versions:\n\nAnother way to install Node.js on Debian is with the Node Version Manager (NVM). NVM manages installed Node.js versions and enables switching between different versions using the terminal. Use this method to work with multiple Node.js versions on the same system.\n\nTo install NVM, download the installer from GitHub. Run the following command:\n\nThe command downloads and runs the Bash script to install NVM.\n\nTo add the path to the NVM script in the current shell session, restart the terminal or source the .profile file:\n\nBoth methods apply the file contents to the shell session and enable using the command.\n\nRun the following to list all available Node.js versions:\n\nThe command prints all available Node.js version numbers.\n\nUse to download and install your preferred Node.js version. For instance, to install version 12.1, run:\n\nThe installed version becomes the system's default Node.js. To confirm, run:\n\nThe newly installed version is shown in the output.\n\nNVM allows users to download and install multiple Node.js versions on the same system. For instance, you can download and install versions 18.1 and 16.5:\n\nList all installed versions with the following command:\n\nThe command shows three versions, with the currently active one shown with a pointer printed in green.\n\nTo switch to another installed version, use:\n\nThe output also shows the current default version as 12.1.\n\nTo change the default Node.js version, use:\n\nNode.js now defaults to the selected version.\n\nThis guide demonstrated various methods for installing Node.js on Debian. It also showed how to use NPM to manage Node.js packages and handle different Node.js versions.\n\nNext, learn how to update Node.js to the latest version or how to build a Node.js app with Docker."
    },
    {
        "link": "https://redswitches.com/blog/install-node-js-and-npm-on-debian",
        "document": "node.js is a powerful JavaScript runtime built on Chrome’s V8 engine. It is a popular choice for building scalable and efficient web applications.\n\nIn almost all cases, the performance of a node.js-powered stack depends upon how you set it up. That’s why installing it the right way is a critical step in extracting the desired performance from the hosted applications.\n\nIf you’re using a Debian-based system and looking to get started with node.js, this installation tutorial will guide you through the various methods to install Node.js on your Debian machine.\n\nLet’s start with installing node.js on Debian. We will discuss three methods that cover various sources, including the official Debian repository, the Node.js developer source, and NVM.\n\nThis method involves the official Debian repository. Note that this repository doesn’t always contain the latest node.js version. However, you will get a stable version on your machine.\n\nBefore you start the installation process, you should make sure you start with an updated system’s package repository. This preparatory step ensures you have the latest and most stable package versions on your system.\n\nLaunch the terminal and run the following command:\n\nNext, run the following command to upgrade the packages to the latest versions.\n\nWith your system repository index updated, you can now install node.js.\n\nRun the following command to get the latest version of the package from the Debian repository.\n\nAfter the installation is complete, verify it by checking the version information by running one of the following commands:\n\nIf you want more control over the version of Node.js you want to install, consider using a Personal Package Archive (PPA) provided by NodeSource, a respected brand in the node.js space. NodeSource manages its own APT repository that contains a variety of Node.js versions and related tools.\n\nWe recommend this method if you plan to set up multiple node.js versions on your Debian system and get the benefit of the latest features and updates.\n\nImportant: When you use the PPA for installation, node.js and NPM (the default package manager for Node.js) are included in the package.\n\nStep #1: Make Sure You Have curl on the System\n\nEnsure you have curl installed on your Debian system because we will use it to download the NodeSource installation script.\n\nSo, if curl is not already installed, install it by running the following command:\n\nThe message indicates that we already have the latest curl version on our test system. If it weren’t, the system would update it automatically.\n\nWe recommend running the following command to check if the installation was successful:\n\nWith curl installed, let’s use it to add the NodeSource PPA to your system.\n\nRemember, NodeSource provides various versions of Node. In our example, we used version 18.x. If you need a different version, simply swap setup_18.x with the specific version (for instance, 14.x or 16.x) you’re looking for.\n\nWe will run the following command to get the relevant PPA using the curl command:\n\nAfter adding the PPA, update the system package repository and upgrade packages to include the newly added NodeSource packages:\n\nNow, we are ready to install node.js. For this, run the following command:\n\nConfirm the installation by printing out the version information with one of the following commands:\n\nNext, check the version of the npm package with the following command:\n\nNode Version Manager (NVM) is a tool that allows you to manage multiple node.js versions on a system. This results in greater flexibility by leveraging the capabilities and features of specific node.js versions.\n\nStart by downloading and running the NVM installation script from the project’s GitHub repository:\n\nTo start using NVM, you’ll need to reload the bash profile.\n\nYou can do this by either closing and reopening your terminal or running the following command to reload without restarting the terminal:\n\nCheck the available node.js versions you can install with one of these commands:\n\nAs you can see, the command lists all available versions, giving users the option to select and install more than one version.\n\nInstall your desired version of Node.js by specifying the version number. For example, to install node.js stable version 16.13.0, run:\n\nAfter node.js is installed on your system, it starts using the installed version by default. You can check which version is currently active by running:\n\nSince NVM enables users to download and install various versions of node.js, chances are that you have more than one version on your Debian system. To see a list of all the node.js versions you’ve installed, use the nvm ls command like this\n\nNow that you have verified that you have multiple versions of node.js installed, you can switch between them using:\n\nFor instance, run the following command to use version 15.0.1:\n\nLet’s go back to the output of the nvm ls command that indicated that the current default node.js version is 16.13.0. If you want to set a different version, such as 15.0.1, as the default version, run the following command:\n\nAlso Read: How to Install node.js and NPM On macOS: 3 Simple Methods\n\nAlso Read: Install Go in Debian in 4 Easy Steps\n\nInstalling node.js on Debian is straightforward, with multiple methods to choose from based on your specific needs.\n\nWhether you prefer the simplicity of the apt package manager, the control provided by NodeSource’s PPA, or the flexibility of NVM, each method has its advantages. Remember to consider RedSwitches’ bare metal hosting provider for high-performance hosting solutions to further enhance your Node.js applications.\n\nExperience hosting perfection with RedSwitches. We offer unparalleled dedicated hosting solutions for seamless performance and global reach. Our product lineup has the best dedicated server pricing for instant dedicated servers. These servers are usually on the same day the order gets approved. Whether you need a dedicated server, a traffic-friendly 10Gbps dedicated server, or a powerful bare metal server, we are your trusted hosting partner.\n\nQ. How do I uninstall Node.js?\n\n To uninstall Node.js, use the apt remove command if installed via apt or nvm uninstall <version> for versions installed via NVM.\n\nQ. Can I install multiple versions of Node.js on the same system?\n\nYes, using NVM allows you to install and manage multiple Node.js versions on the same machine.\n\nQ. How do I update Node.js to a newer version?\n\n If you used apt, simply run sudo apt update && sudo apt upgrade. For NVM, install the new version with `nvm install `\n\nDebian repositories are online servers that store and distribute Debian software packages. They include thousands of precompiled packages managed by the apt package management system, making software installation and maintenance on Debian systems straightforward and efficient.\n\nQ. How do I update the package list on Debian?\n\nTo update the package list on Debian, you use the apt update command. This command refreshes your local package index with the latest information from the Debian repositories, ensuring you can install the most recent versions of the software.\n\nQ. Why is Debian a good choice for a development environment?\n\nDebian is favored for development environments due to its stability, comprehensive package repositories, and strong community support. It provides a solid foundation for developers to build, test, and deploy applications efficiently.\n\nQ. Why should I use the official Node.js repository instead of the Debian repository for installation?\n\nThe official Node.js repository often contains more up-to-date versions of Node.js compared to the Debian repositories. Using the official repository ensures you have access to the latest features, security patches, and improvements, which is crucial for developing modern web applications."
    },
    {
        "link": "https://computingforgeeks.com/install-node-js-14-on-ubuntu-debian-linux-mint",
        "document": "In this guide, we will cover installation of Node.js 14 on Ubuntu / Debian / Linux Mint. Node.js is a server-side JavaScript language based on the V8 JavaScript engine for writing server-side JavaScript applications.\n\nNode.js 14 was released on 2020-04-21 and is expected to enter active LTS state on 2020-10-20. The maintenance window will start on 2021-10-19 and is expected to reach End-of-life on 2023-04-30.\n\nWe will use the Node.js Binary Distributions installer script to setup Node.js 14 on Ubuntu / Debian / Linux Mint Linux machine\n\nRun the apt update command on your Ubuntu / Debian Linux to update package repository contents database.\n\nAfter system update, install Node.js 14 on Ubuntu / Debian / Linux Mint by first installing the required repository.\n\nYou can validate that the repository was added by checking file contents.\n\nOnce the repository is added, you can begin the installation of Node.js 14 on Ubuntu / Debian / Linux Mint machine:\n\nIf you need Node Development tools, install them with the command:\n\nYou now have Node.js 14 installed on Ubuntu / Debian / Linux Mint."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-install-node-js-on-debian-10",
        "document": "Node.js is a JavaScript runtime for server-side programming. It allows developers to create scalable backend functionality using JavaScript, a language many are already familiar with from browser-based web development.\n\nIn this guide, you will learn how to install Node.js on a Debian 10 server three different ways:\n• Using NVM (Node Version Manager) to install and activate different versions of Node.\n\nFor many users, using with the default repository will be sufficient. If you need specific newer (or legacy) versions of Node, you should use the PPA repository. If you are actively developing Node applications and need to switch between versions frequently, choose the NVM method.\n\nBefore you begin, you should have a non-root user with sudo privileges set up on your system. You can learn how to set this up by following the initial server setup for Debian 10 tutorial.\n\nInstalling Node.js with Apt from the Default Repositories\n\nDebian contains a version of Node.js in its default repositories that can be used to provide a consistent experience across multiple systems. At the time of writing, the version in the repositories is 10.24.0. This will not be the latest version, but it should be stable and sufficient for quick experimentation with the language.\n\nTo get Node.js from the default Debian software repository, you can use the package manager. First, refresh your local package index:\n\nTo verify that the installation was successful, run the command with the flag to get the version:\n\nIf the package in the repositories suits your needs, this is all you need to do to get set up with Node.js. In most cases, you’ll also want to also install , the Node.js package manager. You can do this by installing the package with :\n\nThis will allow you to install modules and packages to use with Node.js.\n\nAt this point you have successfully installed Node.js and using and the default Ubuntu software repositories. The next section will show how to use an alternate repository to install different versions of Node.js.\n\nTo work with a more recent version of Node.js, you can install from a PPA (personal package archive) maintained by NodeSource. This is an alternate repository that still works with , and will have more up-to-date versions of Node.js than the official Debian repositories. NodeSource has PPAs available for multiple Node versions. Refer to the NodeSource documentation for more information on the available versions.\n\nFrom your home directory, use to retrieve the installation script for your preferred Node.js version. If you do not have installed, you can install it before proceeding to the next step with this command:\n\nWith installed, you can begin your Node.js installation. This example installs version . You can replace with your preferred version.\n\nYou don’t need to install a separate package for in this case, as it is included in the package.\n\nVerify the installation by running with the version option:\n\nuses a configuration file in your home directory to keep track of updates. It will be created the first time you run . Execute this command to verify that is installed:\n\nAn alternative to installing Node.js through is to use a tool called , which stands for “Node Version Manager”. Rather than working at the operating system level, works at the level of an independent directory within your user’s home directory. This means that you can install multiple self-contained versions of Node.js without affecting the entire system.\n\nControlling your environment with allows you to access the newest versions of Node.js while also retaining and managing previous releases. It is a different utility from , however, and the versions of Node.js that you manage with it are distinct from those you manage with .\n\nTo install on Debian 10, follow the installation instructions on the README file from the NVM Github repository.\n\nThe URL may change depending on the latest version of , but as of this writing, the script can be downloaded and executed by typing:\n\nThis will install the script to your user account. To use it, you must first source your file. This allows you to execute the code:\n\nNow, you can list the available Node versions using :\n\nYou can install a version of Node by typing any of the release versions you see. For example, to install version , you can type:\n\nYou can view the different versions you have installed by typing:\n\nThis shows the currently active version on the first line ( ), followed by some named aliases and the versions that those aliases point to.\n\nAdditionally, this output lists aliases for the various long-term support (LTS) releases of Node:\n\nWe can install a release based on these aliases as well. For instance, to install the latest long-term support version, , run the following:\n\nYou can verify that the installation was successful by typing:\n\nIf you wish to use a particular Node version as a default, type the following with the version of your choosing:\n\nThis version will be automatically selected when you start a new session in Node. You can also reference it by the alias like this:\n\nEach version of Node.js will keep track of its own packages and has available to manage these.\n\nYou can uninstall Node.js using or , depending on the version you want to target. To remove versions installed from the Debian repository or from the PPA, you will need to work with the utility at the system level.\n\nTo remove either of these versions, type the following:\n\nThis command will remove the package and the configuration files.\n\nTo uninstall a version of Node.js that you have enabled using , first determine whether or not the version you would like to remove is the current active version:\n\nIf the version you are targeting is not the current active version, you can run this command with the version you want to remove:\n\nThis command will uninstall the selected version of Node.js.\n\nIf the version you would like to remove is the current active version, you must first deactivate to enable your changes:\n\nYou can now uninstall the current version using the command with your current version of Node.js.\n\nThis will remove all files associated with the targeted version of Node.js except the cached files that can be used for reinstallation.\n\nThere are quite a few ways to get up and running with Node.js on your Debian 10 server. Your circumstances will dictate which of the above methods is best for your needs. While using the packaged version in the Debian repository is an option for experimentation, installing from a PPA and working with a NodeSource PPA or offers additional flexibility.\n\nFor more information on programming with Node.js, please refer to our tutorial series How To Code in Node.js."
    },
    {
        "link": "https://nodesource.com/blog/Update-Node.js-versions-on-linux",
        "document": "Keeping your Node.js version up to date is essential for security, performance, and access to the latest features. New releases often include bug fixes, optimizations, and improvements that can enhance your development workflow.\n\nIf you are running a Linux system, there are several ways to update Node.js. This guide will walk you through multiple methods, including using a package manager, Node Version Manager (nvm), NodeSource distribution binaries, and manually downloading the latest version.\n\nLooking for instructions for macOS? Click here. Need help with Windows? Click here.\n\nBy the end of this article, you’ll have the latest version of Node.js running smoothly on your system—without breaking your existing projects. Let’s get started! 🚀\n\nBefore updating Node.js, it’s important to check which version you currently have installed. You can do this by running the following command in your terminal or command prompt:\n\nThis will display the installed Node.js version, e.g., .\n\nNode.js follows a predictable release schedule with two main tracks:\n• LTS (Long-Term Support): Recommended for most users, especially for production environments. LTS versions receive security updates and bug fixes for an extended period. The LTS version at the moment is v22.\n• Current: Includes the latest features and improvements but may introduce breaking changes. It's ideal for developers who want early access to new capabilities. The current version at the moment, and until April 2025, is v23.\n\nTo determine whether your installed version is still actively maintained, visit the Node.js release schedule.\n\nUpdating Node.js on Linux can be done efficiently using the NodeSource binary distributions, which provide a simple and reliable way to install and manage Node.js versions. NodeSource is the recommended way to install Node.js on Linux as it offers the most up-to-date and stable releases, including LTS and Current versions.\n\nTo update Node.js, you first need to ensure that the NodeSource repository is set up for the version you want to install. Follow the steps below to add the NodeSource repository and install or update Node.js:\n\nRun the following command to add the NodeSource repository for the latest version of Node.js:\n\nIf you prefer to install the latest LTS (Long-Term Support) version, use the LTS setup script instead:\n\nThis command will configure your system to download the desired Node.js version from the NodeSource repository.\n\nIf you want to install a specific version, for example v23, you can run the following command:\n\nNote: When using NodeSource, you have the option to install either the standard Node.js Binaries or the N|Solid Runtime.\n• Node.js Binaries are the official Linux packages for Node.js, offering a reliable, secure, and up-to-date way to install and manage Node.js versions across various Linux distributions, including Debian, Ubuntu, RHEL, CentOS, Fedora, and Amazon Linux.\n• N|Solid Runtime is an enterprise-grade version of Node.js that includes advanced security features, real-time performance monitoring, and enhanced diagnostics, making it ideal for teams focused on security and operational insights.\n\nIf you need only the Node.js runtime, follow the Node.js installation steps. If you're looking for additional security and performance monitoring capabilities, installing N|Solid is recommended.\n\nThis will install the latest version of Node.js (either LTS or Current, depending on the script you ran).\n\nThis command will install the latest stable version with enterprise-grade monitoring and security capabilities.\n\nAfter installation, you should verify that Node.js has been updated successfully. Use the following command to check the version:\n\nIf you're working with native modules or need additional build tools (like or ), you may want to install the build-essential package:\n\nThis package includes the necessary tools to compile and install Node.js native modules, ensuring everything runs smoothly.\n\nIf you’re using NodeSource and have multiple Node.js versions installed, you can remove older versions to free up space. To do this, you can use the following command:\n\nThen, proceed to reinstall the desired version using the steps outlined above.\n\nFor users who work on multiple Node.js projects requiring different versions, is the best solution.\n\nFirst, check if is installed:\n\nIf not, install it using:\n\nOnce is installed, you can update Node.js:\n• Set it as the default: \n\n\n\nIf you prefer to manually install the latest version, you can do so from the official Node.js website.\n• If you want official binary distributions, use Method 1 (NodeSource Binaries) the best choice overall.\n• If you work with multiple Node.js versions, (Method 2).\n\nKeeping your Node.js installation up to date ensures you have the latest features, security patches, and performance improvements. Choose the method that works best for your workflow and enjoy a smooth Node.js development experience on Linux!"
    },
    {
        "link": "https://github.com/nodesource/distributions",
        "document": "This repository contains the instructions to install the NodeSource N|solid and Node.js Binary Distributions via .rpm and .deb as well as their setup and support scripts.\n\nIf you're looking for more information on NodeSource's low-impact Node.js performance monitoring platform, Learn more here.\n\nWe'd like to inform you of important changes to our distribution repository nodesource/distributions.\n• Package Changes: DEB and RPM packages are now available under the codename. We no longer package the installer coupled to specific versions. This means you can install Node.js on almost any distro that meets the minimum requirements.\n• Installation Scripts: Back by popular demand, the installation scripts have returned and are better than ever. See the installation instructions below for details on how to use them.\n• RPM Package Signing Key: The key used to sign RPM packages has changed. We now sign packages using SHA256, providing better support to the community.\n• Questions and concerns: To resolve questions and discuss concerns about this update we've opened this discussion space New distribution's packages\n\nLooking for the previous Documentation README.md\n\nNodeSource will continue to maintain the following architectures and may add additional ones in the future.\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nTo completely remove Node.js or N|solid installed from the deb.nodesource.com package methods above:\n\nNodeSource will continue to maintain the following architectures and may add additional ones in the future.\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nBefore you begin, ensure that is installed on your system. If is not installed, you can install it using the following command:\n\nTo compile and install native addons from npm you may also need to install build tools:\n\nTo completely remove Node.js installed from the rpm.nodesource.com package methods above:\n\nA: The scripts are deprecated for the versions of Node.js that are currently outdated. While the packages for these versions still exist, we no longer provide support for them. Our support is exclusively dedicated to the active Node.js versions, which, as of today, are 18, 20, and 21. Users utilizing these versions can confidently use our scripts, but we encourage those using older versions to upgrade for continued support and the best experience.\n\nQ: How can I configure the repository manually?\n\nA: If you prefer to manually configure the repository, we have a detailed guide to assist you through the process. Please visit our Repository Manual Installation Guide for comprehensive instructions. This guide is designed to provide step-by-step directions to ensure a smooth and successful manual setup of the repository for your Node.js environment.\n\nQ: How do I pin to specific versions of Node.js?\n\nA: Please take a look at wiki\n\nQ: Why is there no folder listing available when I visit the following URLs? https://deb.nodesource.com/node_XX.x/pool/main/n/\n\nA: This issue may arise because some users utilize the above URLs to download specific versions of Node.js or create mirrors of our repository.\n\nFor more information and possible solutions, please refer to the following resources:\n\nContributions are welcomed from anyone wanting to improve this project!\n\nThis material is Copyright (c) NodeSource and licensed under the MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE.md file for more details.\n\nSupported with love by the NodeSource team\n\nThis project is not affiliated with Debian, Ubuntu, Red Hat, CentOS or Fedora.\n\nUbuntu is a registered trademark of Canonical Ltd.\n\nDebian is a registered trademark owned by Software in the Public Interest, Inc.\n\nRed Hat, CentOS and Fedora are trademarks of Red Hat, Inc.\n\nAmazon Linux is a trademark of Amazon Web Services, Inc.\n\nCloudLinux is a trademark of CloudLinux, Inc"
    },
    {
        "link": "https://unix.stackexchange.com/questions/35679/whats-the-currently-recommended-way-to-install-node-js-on-debian",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-install-node-js-on-debian-10",
        "document": "Node.js is a JavaScript runtime for server-side programming. It allows developers to create scalable backend functionality using JavaScript, a language many are already familiar with from browser-based web development.\n\nIn this guide, you will learn how to install Node.js on a Debian 10 server three different ways:\n• Using NVM (Node Version Manager) to install and activate different versions of Node.\n\nFor many users, using with the default repository will be sufficient. If you need specific newer (or legacy) versions of Node, you should use the PPA repository. If you are actively developing Node applications and need to switch between versions frequently, choose the NVM method.\n\nBefore you begin, you should have a non-root user with sudo privileges set up on your system. You can learn how to set this up by following the initial server setup for Debian 10 tutorial.\n\nInstalling Node.js with Apt from the Default Repositories\n\nDebian contains a version of Node.js in its default repositories that can be used to provide a consistent experience across multiple systems. At the time of writing, the version in the repositories is 10.24.0. This will not be the latest version, but it should be stable and sufficient for quick experimentation with the language.\n\nTo get Node.js from the default Debian software repository, you can use the package manager. First, refresh your local package index:\n\nTo verify that the installation was successful, run the command with the flag to get the version:\n\nIf the package in the repositories suits your needs, this is all you need to do to get set up with Node.js. In most cases, you’ll also want to also install , the Node.js package manager. You can do this by installing the package with :\n\nThis will allow you to install modules and packages to use with Node.js.\n\nAt this point you have successfully installed Node.js and using and the default Ubuntu software repositories. The next section will show how to use an alternate repository to install different versions of Node.js.\n\nTo work with a more recent version of Node.js, you can install from a PPA (personal package archive) maintained by NodeSource. This is an alternate repository that still works with , and will have more up-to-date versions of Node.js than the official Debian repositories. NodeSource has PPAs available for multiple Node versions. Refer to the NodeSource documentation for more information on the available versions.\n\nFrom your home directory, use to retrieve the installation script for your preferred Node.js version. If you do not have installed, you can install it before proceeding to the next step with this command:\n\nWith installed, you can begin your Node.js installation. This example installs version . You can replace with your preferred version.\n\nYou don’t need to install a separate package for in this case, as it is included in the package.\n\nVerify the installation by running with the version option:\n\nuses a configuration file in your home directory to keep track of updates. It will be created the first time you run . Execute this command to verify that is installed:\n\nAn alternative to installing Node.js through is to use a tool called , which stands for “Node Version Manager”. Rather than working at the operating system level, works at the level of an independent directory within your user’s home directory. This means that you can install multiple self-contained versions of Node.js without affecting the entire system.\n\nControlling your environment with allows you to access the newest versions of Node.js while also retaining and managing previous releases. It is a different utility from , however, and the versions of Node.js that you manage with it are distinct from those you manage with .\n\nTo install on Debian 10, follow the installation instructions on the README file from the NVM Github repository.\n\nThe URL may change depending on the latest version of , but as of this writing, the script can be downloaded and executed by typing:\n\nThis will install the script to your user account. To use it, you must first source your file. This allows you to execute the code:\n\nNow, you can list the available Node versions using :\n\nYou can install a version of Node by typing any of the release versions you see. For example, to install version , you can type:\n\nYou can view the different versions you have installed by typing:\n\nThis shows the currently active version on the first line ( ), followed by some named aliases and the versions that those aliases point to.\n\nAdditionally, this output lists aliases for the various long-term support (LTS) releases of Node:\n\nWe can install a release based on these aliases as well. For instance, to install the latest long-term support version, , run the following:\n\nYou can verify that the installation was successful by typing:\n\nIf you wish to use a particular Node version as a default, type the following with the version of your choosing:\n\nThis version will be automatically selected when you start a new session in Node. You can also reference it by the alias like this:\n\nEach version of Node.js will keep track of its own packages and has available to manage these.\n\nYou can uninstall Node.js using or , depending on the version you want to target. To remove versions installed from the Debian repository or from the PPA, you will need to work with the utility at the system level.\n\nTo remove either of these versions, type the following:\n\nThis command will remove the package and the configuration files.\n\nTo uninstall a version of Node.js that you have enabled using , first determine whether or not the version you would like to remove is the current active version:\n\nIf the version you are targeting is not the current active version, you can run this command with the version you want to remove:\n\nThis command will uninstall the selected version of Node.js.\n\nIf the version you would like to remove is the current active version, you must first deactivate to enable your changes:\n\nYou can now uninstall the current version using the command with your current version of Node.js.\n\nThis will remove all files associated with the targeted version of Node.js except the cached files that can be used for reinstallation.\n\nThere are quite a few ways to get up and running with Node.js on your Debian 10 server. Your circumstances will dictate which of the above methods is best for your needs. While using the packaged version in the Debian repository is an option for experimentation, installing from a PPA and working with a NodeSource PPA or offers additional flexibility.\n\nFor more information on programming with Node.js, please refer to our tutorial series How To Code in Node.js."
    },
    {
        "link": "https://reddit.com/r/debian/comments/pr6sfp/best_way_to_use_nodejs",
        "document": "So node.js doesn't seem to be on apt. I installed it on snap, but having some weird issues with npm. I had to install npm with apt, even though snap came with it? I'm so confused why apt has npm and not node, and why npm from apt works but not from snap. If I had to install it from source, I would probably mess something up lol. Any advice or insight?"
    }
]