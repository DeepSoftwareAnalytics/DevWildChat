[
    {
        "link": "https://docs.python.org/3/using/index.html",
        "document": "This part of the documentation is devoted to general information on the setup of the Python environment on different platforms, the invocation of the interpreter and things that make working with Python easier."
    },
    {
        "link": "https://cloud.google.com/python/docs/setup",
        "document": "This tutorial shows how to prepare your local machine for Python development, including developing Python apps that run on Google Cloud.\n\nIf you already have a development environment set up, see Python and Google Cloud to get an overview of how to run Python apps on Google Cloud.\n\nPython's installation instructions vary by operating system. Follow the guide for the operating system you're running in your development environment, macOS, Windows, or Linux.\n\nmacOS includes a version of Python by default and uses it for its own purposes. To avoid interfering with macOS, we recommend creating a separate development environment and installing a supported version of Python for Google Cloud. To install Python, use homebrew.\n• None To use homebrew to install Python packages, you need a compiler, which you can get by installing Xcode's command-line tools.\n• None Install homebrew by following the instructions on the homebrew homepage, and then use homebrew to install Python as follows: Python version number should be in the format of . For example:\n• None After the installations are complete, verify that Python 3 is available as and , and that is also installed. To verify that Python is available, run the following command: The output shows the version. You can learn about Python homebrew on the Homebrew Python Formulae page, and then check your version. To verify that is available, run the following command: If installed, the output shows the version. For more about the latest version of , see the Release Notes. If the preceding command does not show the version, make sure that is installed correctly. If is installed but not working, upgrade to the latest version using the following command: Homebrew installs the latest versions of Python available on your platform. The version numbers in the outputs might be different from the latest official releases of Python.\n• None To install Python in a Windows environment, download the installer for the version of Python you need from the Python website. For more information, see the supported versions of Python for Google Cloud.\n• None To access your version of Python, use Python launcher for Windows. To start the version of Python you installed, run the following command: To start the version of Python 3 you installed, run the following command: To verify the version of that is available, run the following command: The output shows the version from . You can learn about the latest version of in the Release Notes.\n• None To install Python in a Linux environment, install the appropriate packages for your distribution. For Debian and Ubuntu, these packages are python3, python3-dev, python3-venv, and python3-pip, Install these packages using the following commands:\n• None After the installations are complete, verify that you have installed: You can learn about the latest version of in the pip Release Notes.\n\nis a tool that creates isolated Python environments. These isolated environments can have separate versions of Python packages, which lets you isolate one project's dependencies from the dependencies of other projects. We recommend that you always use a per-project virtual environment when developing locally with Python.\n• None Use the command to create a virtual copy of the entire Python installation. This tutorial creates a virtual copy in a folder named , but you can specify any name for the folder.\n• None Set your shell to use the paths for Python by activating the virtual environment:\n• None Now you can install packages without affecting other projects or your global Python installation: If you want to stop using the virtual environment and go back to your global Python, you can deactivate it:\n\nYou can read more about in the docs.\n\nTo develop Python apps, you need an editor. Here are a few of the more popular editors (in no particular order):\n\nThe Cloud Client Libraries for Python is how Python developers integrate with Google Cloud services like Datastore and Cloud Storage. To install the package for an individual API like Cloud Storage, use a command similar to the following:\n\nThe gcloud CLI is a set of command-line tools for Google Cloud. It contains and , which you can use to access Compute Engine, Cloud Storage, BigQuery, and other products and services from the command line. You can run these tools interactively or in your automated scripts.\n\nTo use the client library, you must first set up authentication.\n\nIf you're using a local shell, then create local authentication credentials for your user account:\n\nYou don't need to do this if you're using Cloud Shell.\n\nIf an authentication error is returned, and you are using an external identity provider (IdP), confirm that you have signed in to the gcloud CLI with your federated identity.\n\nFor more information, see Authenticate for using client libraries.\n• Learn more about Python on Google Cloud."
    },
    {
        "link": "https://docs.python.org",
        "document": "What's new in Python 3.13?\n\n Or all \"What's new\" documents since Python 2.0\n\nTutorial\n\n Start here: a tour of Python's syntax and features\n\nPython setup and usage\n\n How to install, configure, and use Python"
    },
    {
        "link": "https://devguide.python.org",
        "document": "This guide is a comprehensive resource for contributing to Python – for both new and experienced contributors. It is maintained by the same community that maintains Python. We welcome your contributions to Python!\n\nImproving Python’s code, documentation and tests are ongoing tasks that are never going to be “finished”, as Python operates as part of an ever-evolving system of technology. An even more challenging ongoing task than these necessary maintenance activities is finding ways to make Python, in the form of the standard library and the language definition, an even better tool in a developer’s toolkit. While these kinds of change are much rarer than those described above, they do happen and that process is also described as part of this guide:\n\nThis guide is specifically for contributing to the Python reference interpreter, also known as CPython (while most of the standard library is written in Python, the interpreter core is written in C and integrates most easily with the C and C++ ecosystems). There are other Python implementations, each with a different focus. Like CPython, they always have more things they would like to do than they have developers to work on them. Some major examples that may be of interest are:\n• None Jython: A Python interpreter focused on good integration with the Java Virtual Machine (JVM) environment\n• None IronPython: A Python interpreter focused on good integration with the Common Language Runtime (CLR) provided by .NET and Mono\n• None Stackless: A Python interpreter focused on providing lightweight microthreads while remaining largely compatible with CPython specific extension modules\n• None MicroPython: A tiny Python interpreter with small subset of the Python standard library that is optimised to run on microcontrollers and in constrained environments.\n• None CircuitPython: A fork of MicroPython designed to simplify experimenting and learning to code on low-cost microcontroller boards.\n\nPlease note that all interactions on Python Software Foundation-supported infrastructure is covered by the PSF Code of Conduct, which includes all infrastructure used in the development of Python itself (for example, mailing lists, issue trackers, GitHub, etc.). In general this means everyone is expected to be open, considerate, and respectful of others no matter what their position is within the project."
    },
    {
        "link": "https://python.org/doc",
        "document": "Browse the docs online or download a copy of your own.\n\nGet started here, or scroll down for documentation broken out by type and subject.\n\nSee also Documentation Releases by Version"
    },
    {
        "link": "https://reddit.com/r/Python/comments/moobu6/the_perfect_script_structure_where_do_you_write",
        "document": "Well, I'm trying to figure out what is the best way to write one-file Python programs in terms of structure.\n\nFor the purpose of this post I will focus only in the use of the main() function.\n\nMost people out there will write their one-file program this way:\n\nBut I think the more logical and readable order for a human is:\n\nIn the second way, a programmer that reads the Python program for the first time (or after some months) can see what the program does at first, and then how it does it, not the other way.\n\nIn other words, I used to write the problem definition as the main function on top (right next to imports, globals and constants), and the implementation at the bottom, as it is the most abstract (and less likely to change) part of the program.\n\nI know Python can read it in both ways, but all the code I see on the internet use the first structure and I want to know if am I missing something or if it is just a matter of preference.\n\nHow do you write your own one-file scripts?"
    },
    {
        "link": "https://softwareengineering.stackexchange.com/questions/418600/best-practice-for-python-main-function-definition-and-program-start-exit",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/5544752/should-i-use-a-main-method-in-a-simple-python-script",
        "document": "I have a lot of simple scripts that calculate some stuff or so. They consist of just a single module.\n\nShould I write main methods for them and call them with the construct, or just dump it all right in there?\n\nWhat are the advantages of either method?"
    },
    {
        "link": "https://stackoverflow.com/questions/55976356/best-practice-for-using-main-function",
        "document": "For the best use of:\n\nwhat is the best?\n\nOption 1: Create a class that runs the application and then create an instance of that class like:\n\nOption 2. Or put the main code in a main function and then call that function:\n\nEdit: ok, I got the subjective and personal aspects in this questions. Also, I´ve found a very interesting article here: https://realpython.com/python-main-function/ Helped a lot"
    },
    {
        "link": "https://reddit.com/r/learnpython/comments/pcupz3/can_we_talk_about_def_main_please",
        "document": "In lots of tutorials and courses, the programmers use the main function:\n\nIs there a standard in this arena and whether or not every program you write should be in this style? I'm a beginner/intermediate programmer and from what I understand, the above is useful if your script is some kind of module or something. (Someone can enlighten me a bit more maybe.) But for self-contained scripts? I know it's not necessary, but is it even desired? It seems like a pain to me that you have to deal with another level of indentation right away. Plus it's just extra code that you don't need, right? Thoughts?"
    }
]