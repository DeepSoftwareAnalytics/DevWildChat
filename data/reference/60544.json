[
    {
        "link": "https://stackoverflow.com/questions/7489418/controlling-a-web-browser-using-excel-vba",
        "document": "I have been assigned the task of automating a web based task ( for a HTTPS website). The users currently are filling in the Excel sheet with the data, they now want to automate excel in such a way that it directly controls the browser and fills in the data.\n\nI found the iMacros Scripting edition as a possible solution for doing this, I wanted to know if there are any other similar tools which can be used for controlling the browser and filling in data.\n\nI also had a look at the Selenium Client Driver, but I am not sure on how to use it in Excel VBA.\n\nAny help would be appreciated."
    },
    {
        "link": "https://mrexcel.com/board/threads/using-excel-vba-to-perform-repetitive-web-browsing-tasks.1041551",
        "document": "I would like to write a macro to go to an internal company website to download data and import it into my spreadsheet. The website requires me to login and do a series of mouse clicks to download the data as excel spreadsheets, for which I already have developed a macro to merge these spreadsheets and format it the way I want.\n\n \n\n I'm new to VBA but I've done a little research. My browser options on my company PC are Chrome, Firefox, IE, or Edge. I cannot download or install any unapproved 3rd-party applications (such as Selenium for Chrome) to aid me in this, and obtaining approvals for anything are unlikely.\n\n \n\n Based on what I've found you would need Selenium to use Chrome, and that currently Edge does not support any VBA functionality.\n\n \n\n Looking for some advice, pointers, or online resources to help."
    },
    {
        "link": "https://stackoverflow.com/questions/67136317/how-to-open-an-url-in-a-browser-using-vba",
        "document": "Trying to open a PDF(-website) with a referer which can only be opened with a link-click on the parents page.\n\nthe access works, but I need to open the page in a browser to view the pdf.\n\nNo results! Does anyone have a solution? (Just VBA please! Thx)"
    },
    {
        "link": "https://reddit.com/r/vba/comments/jb7nnp/vba_code_to_interact_with_a_website_with_chrome",
        "document": "Sorry if title is confusing. I have a list of stuffs (on an excel table) that I need to search online on a couple of specific websites. On some of those websites I can simply fiddle with the URL and insert the search parameters inside of it, and simply hyperlink away\n\nOn some other websites, they simply don't have a 'searchable URL', and I have to manually enter the website, click/select/activate the search bar, type/tick the search parameters and then click/select/activate the search button\n\nFor the non-searchable-URL type of website, is it possible to write a code on VBA that does all necessary actions for the search to happen? I (currently) don't need to return any information from those websites, I just need to search everything and visually confirm the results from the search.\n\nI already have a code somewhere on one of my workbooks for the searchable-URL, but I just don't know how to start the non-searchable-URL code. My first thought was a macro-type of code that emulates keyboard strokes, but I'm not sure if it could work with copy/paste operations or even if it could work at all.\n\nDisclaimer: I know my way around VBA, and it's the only programming language I know, but I'm self-taught and have some difficulty understanding some complex functions or even some standard practices. If you're kind enough to provide an example code for me to get started, I'd appreciate if you could also write comments in details for the key parts!\n\nOne of the non-searchable-URL website is: immuniweb.com/ssl\n\nSorry for the long wall of text. If I wasn't clear about any of it, please ask and I'll do my best to clarify!"
    },
    {
        "link": "https://scrapingrobot.com/blog/vba-web-scraping",
        "document": "According to research by Zipdo, more than 1.2 billion people worldwide use Microsoft Office. If you’re part of this group, you can also use the VBA programming language and do VBA web scraping.\n\nNever heard of VBA or web scraping? Not sure how they could benefit you and your organization? You’re in the right place.\n\nThis in-depth guide explains all that you need to know about VBA programming, VBA web scraping, and everything in between.\n\nVBA stands for Visual Basic for Applications. It is a programming language developed by Microsoft that is primarily used for automating tasks within Microsoft Office applications such as Excel, Word, Access, and Outlook.\n\nVBA is an object-oriented programming language. It involves working with objects, properties, methods, and events. In the context of Office applications, objects might include worksheets, cells, ranges, and charts.\n\nWhat Is VBA Programming Used For?\n\nVBA allows users to write code to automate repetitive and time-consuming tasks, create custom forms and user interfaces, interact with other Office applications, and manipulate data.\n\nVBA also includes a feature called macro recording, which allows users to record a series of actions in an Office application and automatically generate VBA code that reproduces those actions.\n\nThis programming language allows users to create custom forms and user interfaces within Office applications, providing a way to interact with users in a more controlled and specific manner. It supports event-driven programming, where specific actions or events trigger the execution of code, as well. For example, a button click or a cell value change can trigger a specific subroutine.\n\nAnother important part of understanding VBA is understanding VBA modules.\n\nIn VBA, a module is a container meant for storing and organizing code. It is a space where you can write and store VBA procedures, functions, and other types of code. Modules allow you to organize your code logically and make it more manageable.\n\nThere are two main types of modules in VBA:\n• Standard Modules: These are general-purpose modules where you can write standalone procedures and functions. Standard modules are not associated with any particular object or form. You can create multiple standard modules in a VBA project, and they typically contain reusable code that can be called from various parts of your application.\n• Class Modules: What is class module in VBA? Class modules are used in object-oriented programming in VBA. They allow you to define custom objects with properties, methods, and events. Each instance of a class module represents a specific object with its own set of characteristics and behaviors.\n\nYou can utilize VBA for several purposes, including web scraping.\n\nWeb scraping is a technique used to extract data from websites. It involves fetching the HTML content of a web page and then parsing and extracting specific information from that content. Web scraping is commonly used for various purposes, such as data extraction, content aggregation, price monitoring, and more.\n\nMany organizations use a web scraping API (Application Programming Interface) to make the scraping process easier. A web scraping API is a service or tool that provides a structured way for developers to extract data from websites without directly accessing the HTML source code.\n\nUnlike traditional web scraping, where developers write custom scripts to fetch and parse HTML content, a web scraping API simplifies the process by offering a set of endpoints that allow users to request specific data from the target website.\n\nHow does VBA programming fit into the equation?\n\nThe VBA programming language can be used for web scraping by leveraging its ability to make HTTP requests and parse HTML content. VBA can interact with websites, retrieve HTML data, and extract information programmatically.\n\nWhy would you want to use VBA for web scraping and scrape data from websites into Excel (or other Microsoft tools)?\n\nFirst of all, web scraping saves you a lot of time and allows you to be more productive. Instead of copying and pasting data manually, you can relax and let an automated tool do the work for you. Using CBA for web scraping can also help you reduce the number of errors you make when transferring data from one place to another.\n\nBenefits of Using VBA Code for Web Scraping\n\nPeople use VBA web scraping for many reasons. Here are some of the top advantages that come with utilizing this programming language:\n• Ready to use: VBA is bundled with Microsoft Office. If you already have Microsoft Office installed, you don’t have to worry about any additional installations. You can use VBA right away in any Microsoft Office tool.\n• Reliability: Both Microsoft Excel and VBA are developed and maintained by Microsoft. That means you can upgrade these tools together to ensure you’re always working with the latest version.\n• Out-of-the-box support: When you use VBA web scraping, you can take advantage of Microsoft’s browser, Microsoft Edge, which makes it easier to scrape dynamic websites.\n• Complete automation: When you run the VBA script, you don’t have to carry out any additional tasks or interact with the browser at all. The VBA script takes care of everything, even logins, scrolling, and button clicking.\n\nOf course, there are a few downsides to using VBA to scrape website data. For example, because it’s so tightly connected to Microsoft Office tools, it can be difficult to use it with other platforms. It also works best in a Windows environment, making it less accessible to Mac users, and is harder to learn than other programming languages like Python and JavaScript.\n\nHow to Do Excel VBA Web Scraping in Chrome\n\nExcel VBA web scraping can be done in Chrome (one of the world’s most popular browsers with 2.65 million users) using a few different methods, including using the Selenium library for VBA (this is one of the most popular options).\n\nIf you’ve never done this before, don’t worry. Here’s a step-by-step guide on how to perform web scraping using Excel VBA in Chrome:\n\nFirst, you should make sure you have the Selenium library installed since you’ll reference it in your VBA project. You can download the Selenium-type library (WebDriver) from the SeleniumHQ website: https://www.selenium.dev/.\n\nNext, Open Excel and create a new workbook. Then, Press Alt + F11 to open the Visual Basic for Applications (VBA) editor.\n\nIn the VBA editor, go to Tools > References.\n\nLook for “Selenium Type Library” or “WebDriver” and check the box to enable it. Click “OK” to close the references window.\n\nRight-click on the project explorer in the VBA editor. Then, choose Insert > Module to add a new module to your project.\n\nIn the module, you can write VBA code to control Chrome using Selenium. Here’s a basic example:\n\nPress F5 or click the “Run” button to execute the code.\n\nFrom here, you’ll see Chrome opening and navigating to the specified URL, performing actions, and then closing.\n\nYou can always Modify the code to suit your specific web scraping needs. Identify the HTML elements you want to interact with and adjust the code accordingly.\n\nCan You Do VBA Web Scraping in Chrome without Selenium?\n\nIt’s not easy to do VBA web scraping in Chrome without Selenium. However, if you have a reliable web scraping API, you don’t have to worry about keeping track of all the code required.\n\nThat’s where a tool like Scraping Robot comes in handy.\n\nScraping Robot is a system made to assist developers and help users like you work more efficiently. It’s easy to use and is up and running within minutes, allowing you to scrape websites on Chrome, Microsoft Edge, and other browsers quickly and accurately.\n\nVBA programming is an excellent option for scraping website data, especially if you’re a Windows user who already relies heavily on Microsoft Office tools like Excel.\n\nOne of the primary downsides to using VBA web scraping, though, is that VBA comes with a steeper learning curve than some other programming languages. Luckily, there are tools that can help you overcome that learning curve.\n\nWith the right tools, such as the Scraping Robot API, you can overcome these hurdles and enhance your web scraping process.\n\nStart your trial and get 5,000 free scrapes today!\n\nThe information contained within this article, including information posted by official staff, guest-submitted material, message board postings, or other third-party material is presented solely for the purposes of education and furtherance of the knowledge of the reader. All trademarks used in this publication are hereby acknowledged as the property of their respective owners."
    },
    {
        "link": "https://codestack.net/visual-basic/best-practices",
        "document": "In nowadays Visual Basic is mainly used in VBA macros format with a minor exception of several legacy applications.\n\nAlthough VBA macros are usually small applications, those are still playing a major role in millions of organizations worldwide. As macros are applications, they should be considered as such and all the practices for writing reliable, maintainable and stable application should still be applied when developing macros.\n\nBelow is the list of guidelines for improving the quality of the macro. These guidelines applies to any type of the macro, e.g. MS Word, MS Excel, SOLIDWORKS, Autodesk Inventor etc.\n\nVisit 5 best practices to make your VBA macro great blog article for the video demonstration of the practical application of the below guidelines.\n\nWhen developing any application (VBA is not an exception) try to use as descriptive as possible names for variables, functions, procedures, modules, classes and events.\n\nPrefer to use descriptive names instead of comment\n\nDo not overload code with comments for the obvious snippets. Comment in the snippet below is redundant\n\nAvoid using unnamed string and numbers (magic numbers), instead declare the constants with a descriptive name\n\nWhen developing code, avoid 'hiding the problem' as this may potentially cause more damage than crash of the application.\n\nFor example, the following snippet checks if the swModel object is not nothing and performs important operation. However, having the swModel equal to Nothing is possible scenario and skipping the export without notifying the user, will keep the problem unnoticed and user will not be able to understand why DoSomeImportantWorkWithModel was not performed on this model.\n\nOn Error Resume Next directive should be used with caution. Aim to process all exceptions in your code. I would recommend to handle all errors in the centralized (usually the entry function).\n\nThe below format is not a regular VBA format for handling an error and it is trying to emulate try-catch-finally syntax from other languages, such as C#, VB.NET, C++, JavaScript etc., but it allows to make code more readable and easy to understand:\n• DoWork() is a main function performing all the operations\n• If at any point exception is thrown, code will be redirected to catch_ block, where error can be processed (e.g. logged or message box is displayed)\n• Otherwise, code will be redirected to finally_ block and exit the macro once the DoWork routine is completed\n\nTo fix the above issue we can go with 'Fail Fast' approach, i.e. terminate the execution immediately, notifying the caller that something went wrong:\n\nAnd it is up to the calling function to decide what to do with this case. Depending on the requirement application can proceed and consider this as safe error or it can log the error or display the message to the user.\n\nMost of the VBA macro enabled applications, such as MS Word, MS Excel, SOLIDWORKS, Autodesk Inventor would consider any parameterless function as a potential entry point of the macro.\n\nThe code below has 3 parameterless functions\n• main - Actual expected entry function. Running this function will result into expected outcome\n• Init - Function which initialized data, required to do work. This function itself doesn't perform the work. Running this as an entry point will not cause errors, but it will not produce any results\n• DoWork - Function which performs the work, however, it requires InitData to be initialized. Running this function directly will most likely result into the 'Run time error 91: Object variable block variable set'\n\nAll the above 3 functions can be selected when running the macro\n\nTo prevent the potential issues, keep parameterless functions only for entry points. To make the function with parameter, without compromising an existing code, use optional parameter:\n\nWith the setup above, only one function will be available for running:\n\nTry to keep functions and modules as independent as possible from another functions, module level variables and environment. This would make a consumption of the function more predictable and function can be reused.\n\nIn the below code snippet the swModel variable is declared at the module level which makes it accessible from within the ProcessDocument function. Variable is initialized in the main function. It means that ProcessDocument is dependent on the swModel and will be only able to work with active document (or the one assigned to swModel). This function cannot be reused for another purpose, e.g. processing the model of the component in the assembly.\n\nInstead the above code could be rewritten to the following code. Instead of declaring the model level variable, it can be defined as the parameter of the function, thus removing the dependency. Now ProcessDocument function can be used with any pointer to SldWorks.ModelDoc2\n\nAnother example is dependency on environment. Function below saves the value from the Excel cell into the text file. It takes 2 parameters for cell and the file path. However, this function doesn't perform any Excel specific functionality rather than calling the Value property on the cell to extract the text. But because of this, CreateTextFile function is dependant on the Excel environment and cannot be reused in other scenarios and applications (such as MS Word or Autodesk Inventor).\n\nInstead the function can be changed to the following code, where the caller is responsible for preparing the text for writing. This function can then be copied to another macros to perform similar functionality if required.\n\nDocumentation the functionality of your application could be very useful for the users of your software and for other collaborators of your project. The documentation can be as simple as text file, Word or PDF document or complete multi page technical site.\n\nFor VBA macros simple header at the top of the macro can be sufficient. Specify the author of the macro, license, contact details and brief description\n\nWhen just few objects or functions from the 3rd party type library are used (e.g. Microsoft Scripting Runtime, Microsoft Excel, etc.) and this is not a primary target of automation, consider using them with Late Binding instead of an Early Binding\n\nFor example Excel VBA macro needs to create a dictionary object to hold key-value pairs. Instead of referring the Microsoft Scripting Runtime reference and using the following code\n\nIt is possible to avoid adding the Microsoft Scripting Runtime reference and instead use\n\nAnother example is SOLIDWORKS VBA macro, which primarily automates SOLIDWORKS, while some Excel API invocation might be required. In this case Excel can be created as late bound object and no references to Excel library need to be added to the macro.\n\nThis approach allows to simplify the compatibility between different versions of library and avoid missing references issue\n\nDebug.Assert is a mechanism of displaying an assert when the condition is not met. Asserts are developer (not user) facing messages and intended to be used to validate conditions which are not the part of the use or misuse of the application. Assert should indicate the error in the code logic, but not the error in the use of the software.\n\nFor example the following SOLIDWORKS macro suppose to perform an operation on the active document. However it is a valid scenario where ActiveDoc can return Nothing. If macro runs when no document open (and user can do this), this would result in Nothing. So assert would not be an appropriate here to indicate the error, rather an exception would fit here better.\n\nOn the other hand GetTitle function below, runs a custom code to find the title of the document. It is assumed that regardless of the circumstances, title can never be an empty string, so empty string returned from GetTitle indicates the logic error. Assert would be thrown if its condition is False (title <> \"\").\n\nVisual Basic is not designed for unit tests, there are several 3rd party solutions available for unit tests implementation.\n\nAs a workaround, simple validation function can be implemented in the macro to emulate unit testing. This testing function should be run manually.\n\nIn the below code there are 2 functions which are the part of the macro logic:\n• SortArray - sorts input array in ascending or descending order and returns result\n• CountWords - counts the number of words in the specified test\n\nThose functions can be tested independently as units (unit tests)\n\nFor example, test1 runs the SortArray functions and supplies an array of [C, B, A] requesting the sorting in ascending order. The expected outcome is an array [A, B, C] which is a validated in the Debug.Assert call. If the condition is false, assert will be thrown indicating the failure of the test.\n\nControl Version Systems (CVS) for source code provide a centralized management of the code in the plain text formats. Such systems include, but not limited to Git, SVN, Mercurial.\n\nMost of VBA macro engine implementations in various applications such as MS Word, MS Excel, SOLIDWORKS, Autodesk Inventor store macro files either as embeded into a file or in the binary format which makes it unpractical to use with Control Version Services.\n\nIt is however still beneficial and recommended to extract a text copy of the macro code and add this under the revision control.\n\nVBA macro in the GIT repository browsed using the GIT Extensions client\n\nTry to keep your applications within the capacity of the technology and programming language. For a simple applications, scripts and VBA macros can be sufficient, but for more complicated functionalities where database connection, web service calls, data processing and analyzing etc. is required consider switching to more sophisticated environments (add-ins, stand-alone applications, web services) and OOP languages, such as VB.NET, C#, C++, Java etc."
    },
    {
        "link": "https://masterofficevba.com/vba-coding-constructs/best-practices-for-excel-vba-code",
        "document": "There are over a billion Microsoft Office users, including around 750 million Excel users. So it is not surprising that CEO, Satya Nadella, sees Excel as Microsoft’s prime consumer product. Excel VBA (Visual Basic for Applications) significantly boosts Excel’s capabilities. However, when misused, VBA can introduce a lot of problems in your Excel applications.\n\nIn this post, I summarise guidelines for writing high-quality Excel VBA code. The article derives from my personal experience and a host of credible sources.\n\nThe Software Quality Triangle (SQT) is often used to describe software quality. The backbone of high-quality software is a high-quality underlying code. So, the same attributes stated in the SQT also apply to code quality.\n\nNot all these attributes derive from Excel VBA code though. Excel VBA is a hosted language (Excel being the host), so some of these attributes derive from Excel itself. For instance:\n• Usability (ease of use) arises from both the application and Excel’s user interface (UI) and user experience (UX) design;\n• Portability (multi-platform use) depends on operating systems supporting Excel or VBA;\n• Testability (ease of testing) stems from software architecture rather than construction (coding).\n\nSo, we can say that a high-quality Excel VBA code is one that:\n• Does what was agreed or intended (no more, no less!) – correctness;\n• Does more with less (time/memory) – efficiency;\n• Doesn’t break things in the applications it interacts with – integrity;\n• Is usable in different contexts or for different purposes – reusability;\n\nThere are obvious benefits to writing high-quality Excel VBA code, here are a few:\n• Adding new features is easier, quicker, and cheaper;\n\nCoding best practices are consensus guidelines known to improve Excel VBA application quality. But, they are not holy-writ, and individual developers can pick those to adopt.\n\nThis article summarises these guidelines. The format is willfully concise, but you can access detailed posts on some of these guidelines by clicking on the headings.\n\nThe road to code correctness begins with a review of the application requirements. These requirements capture stakeholders’ agreement on what the application should do.\n\nRequirements are the basis for ranking correctness. The following guidelines help to improve your Excel VBA code’s correctness:\n• The application should not do more than required, neither should it do less;\n• Test the application thoroughly, as per the requirements;\n• If possible, get your code reviewed by your peers;\n• Adopt the best practices for Excel VBA coding.\n\nAdd Option Explicit atop modules, so undeclared variables filter out at compilation time. Otherwise, they execute as variant variables which may lead to unpredictable results.\n\nAssign Initial Values to Variables upon their Declaration\n\nTo prevent unexpected results, assign default values to variables immediately after declaring them. It is essential that the values you assign fit the variables’ purpose.\n\nUse Variant Variables Rarely or Not At All\n\nAvoid using Variant variables. They don’t validate assigned data types and are internally converted to other data types by VBA. By using specific variable types, you are more in control.\n\nWhen coding procedures, always add code that validates the arguments’ data type. This prevents incorrect argument data type errors.\n\nUse Enumerations to reduce variable assignment errors, whenever appropriate.\n\nNote the contrasts between the ByVal and ByRef keywords. This is critical when coding procedures (subroutines and functions).\n\nAlways compile VBA projects before running. This catches syntax and compilation errors before runtime.\n\nAlways add error handlers to procedures. This prevents users from getting confusing runtime error messages.\n\nAlways qualify object references and default properties fully. Otherwise, you rely on VBA internal rules which may lead to unexpected results.\n\nUse Exit For and Exit Do carefully. Specifically, always ensure the execution of all relevant lines of code before mid-loop exits.\n\nBreak Execution on All Errors while Coding\n\nSet Excel’s error-trapping setting to Break on All Errors. This allows you to catch both handled and unhandled errors while coding.\n\nAlways bind object variables at runtime (i.e. late binding). This prevents your code from crashing in the event that an early-bound object’s COM (Component Object Model) reference is not found on a user’s computer. Note that there are efficiency trade-offs to consider.\n\nAdopt a consistent and descriptive naming convention. This makes your code easier to understand in a few months or years (or if someone else reads it right now).\n\nAdd header blocks to major, lengthy, or complex code blocks. Header blocks summarise the essential information about the code block below it. This makes your code easier to understand.\n\nWrite Comments Properly and Use them Judiciously\n\nUse both in-line (i.e., full line) and end-of-line comments, but appropriately. Comment on the ‘why’ and not the ‘how’ of a code line or block.\n\nAdopt a consistent indentation and spacing style. This will boost your Excel VBA code’s readability to humans.\n\nAvoid mid-loop exits in heavily nested loops. As you can imagine, logic comprehension problems may arise for code readers.\n\nAdopt a Code-Writing format that is Easy on the Eye\n\nAvoid lengthy code lines or blocks. People find thin-column content easy to read, think of public media like magazines and newspapers. Adopt this format in your code.\n\nAvoid the GoTo statement. Branching between code lines may be handy at times (e.g. error handling), but it makes reading tougher.\n\nFollow the Don’t Repeat Yourself (DRY) principle. Editing or altering your code is easier when you only have to do it in one place.\n\nWrite de-coupled procedures. When procedures tackle a single task, editing or modifying them doesn’t impact code outside them. So, the code is more maintainable and flexible.\n\nAvoid using magic numbers, constants, or strings for variables with fixed values. The first two hinder readability, while strings eat up memory and run slow. Instead, use Enumerations.\n\nSpeed up garbage collection and prevent memory leaks by setting all unused objects’ references to Nothing.\n\nAvoid the Select and Activate object methods. Instead, explicitly reference the object property or method of interest.\n\nAvoid Repetitive Exchange of Data between Code and Excel\n\nExchange chunks of data between VBA code & Excel in one-shot. This is much faster than cell-by-cell transfer.\n\nUse the With statement to store qualified object references for use in with-blocks. This avoids object reference requalification.\n\nUse the Set statement to pass qualified object references to variables. This avoids reference requalification.\n\nAvoid loops when searching in ranges and arrays. Excel’s Range methods and worksheet functions help in this regard.\n\nAvoid loops when copying data between worksheet ranges. Instead, assign the destination range to the source range directly.\n\nAvoid Loops when Sorting Data in Ranges or Arrays\n\nAvoid loops when sorting data in ranges or arrays. Instead, use the Range object’s Sort method.\n\nIf You Must Use Loops, Use Smart Ones\n\nEnsure loops are smart. Refer to Guidelines for Efficient Excel VBA Code for more details.\n\nDeclare whole numeric data type variables as Long rather than Integer. This speeds up execution as VBA does not first convert them into Long type before use.\n\nIf a variable holds only whole numbers between 0 and 255, then declare it as Byte. This takes up less memory and boosts run speed.\n\nEliminate or Minimise the Use of Variants\n\nAvoid using Variants as they are bulky (memory-wise) and run slow.\n\nBind application-level objects early (at compile time). Compared to binding objects at runtime (i.e. late binding), this improves execution speed. Note that there are reliability trade-offs to consider relative to the magnitude of speed increase.\n\nUse ‘Index’ instead of ‘Name’ to Reference Collection Items\n\nUse ‘Index’ instead of ‘Name’ to reference Collection items for improved execution speed.\n\nInstead of Evaluating Strings use Enumerations\n\nUse Enumerations instead of strings. Strings are bulky (memory-wise) and run slow.\n\nUse vbNullString instead of “”\n\nUse vbNullString instead of an empty string, “”. vbNullString is a VB constant set to zero bytes and representing a zero-length string. It executes slightly faster than an empty string.\n\nBesides Microsoft Office applications, VBA also runs on other applications. These include ArcGIS, AutoCAD, CorelDraw, LibreOffice, Reflection, SolidWorks, MicroStation, and WordPerfect.\n\nYour Excel VBA code shouldn’t be a bull in a china shop. It shouldn’t break things in the applications it interacts with, including Excel itself.\n\nYour Excel VBA code should leave applications in the same state in which it found them. How you do this depends on the particular application.\n\nYou can interact with VBA-enabled applications from your Excel VBA code. You can also use .NET libraries written in any of the .NET programming languages (C# or VB). These are also known as Dynamic Linked Libraries (DLL).\n\nThis is an excellent interoperability feature of VBA that you should take advantage of. For example, why write code to create drawings from Excel shapes when you can interop with AutoCAD to do so.\n\nCheck out posts by Pragmateek, John Franco, and GeeksEngine to get started on VBA and .NET Library interoperability."
    },
    {
        "link": "https://stackoverflow.com/questions/4927487/disadvantages-of-bigger-project-in-vba",
        "document": "There are no real answers here from anybody who demonstrates extensive experience with Access, so I'll give my answer:\n\nDefine \"bigger projects.\" In general, I'd say no, but I'm thinking in terms of Enterprise-wide apps. But the question here is not whether VBA can be used, but whether Access is a front end appropriate for apps of this extent. The biggest drawback with Access (aside form deployment issues) is managing the project because source control is not as easy as with other development platforms.\n\nBut you don't really give an idea of how big the app is. Is it used by hundreds of people? Or does it just have hundreds of sub-components? That is, is it big in terms of complexity or big in terms of number of users?\n\nAs I said, you're asking the wrong question. The issue is whether Access is an appropriate front end. If it is, then VBA is the language you have to write it in.\n\nAs to \"macros and simple functions\" there's a terminological problem in that Word and Excel \"macros\" are generated in VBA, which makes many people think that VBA is a simple language. VBA is, in fact a SUPERSET of VB6 (not a subset) -- VBA has MORE functionality built in than VB6 itself. With Access, most of that functionality is specific to interacting with databases, and because of that is very useful (compare an Access bound form to a VB form, for instance).\n\nIn general, though, the Access philosophy is one in which you begin with building objects interactively, point-and-click, and then add code only when the default behaviors are not sufficient. VBA allows a great deal of flexibility in that it can interact with any tools that have a COM interface. It's basically unlimited in what it can do (though certainly there is a limit to what is practical).\n\n\"Better\" for what purposes? If you have a working application, you really have to consider the Spolsky/Netscape effect (cited above). Certainly you might get better code management, but at the cost of having to maintain a lot more of it. On the other hand, if you have inhouse expertise on that development platform and none with VBA, then there's going to be a bias towards migrating to the development platform that's more suited to your particular developers.\n\nBut it's not really an issue of \"better,\" which can't really be determined without knowing all the issues and personnel involved.\n\nWith Visual SourceSafe you can have multiple developers working on the project. Or, you could automate your build using Application.SaveAsText/.LoadFromText and use the CVS of your choice.\n\nBut in general, I'd say that Access is much better suited to a single-developer model.\n\nI have no idea of what this question means. Many people have the crazy idea that the workset for an Access front end is bigger than the workset for a VB6 app doing the same thing, but it's actually not true. I would expect .NET is about the same (if not an even bigger workset, since things always get bigger and bigger as \"progress\" marches forward).\n\nThe biggest disadvantage of Access, in my opionion, is the problem of deployment, where any users who need multiple versions of Access can have lots of problems. The SageKey install scripts are designed to fix that, but they are kind of ad hoc -- they fix problems when they come up, so if you have a deployment environment with problems they haven't yet encountered and handled, you're out of luck. But they do cover most such circumstnaces.\n\nI don't believe so, but then, as an Access developer, I probably don't have any really good idea what unit testing really is. Most of an Access application's code is user interface not algorithmic programming, so it's NOT going to be easily testable, I'd think. Whether this is an issue or not depends on the nature of the project and the type of testing that is believed to be necessary.\n\nFor an accounting app, you really do require a high level of reliability, and as I said in a comment elsewhere, if somebody interviewed me for a potential project to build an accounting app, I'd recommend they not build it from scratch, regardless of the chosen platform."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/library-reference/concepts/getting-started-with-vba-in-office",
        "document": "Getting started with VBA in Office\n\nAre you facing a repetitive clean up of fifty tables in Word? Do you want a particular document to prompt the user for input when it opens? Are you having difficulty figuring out how to get your contacts from Microsoft Outlook into a Microsoft Excel spreadsheet efficiently?\n\nYou can perform these tasks and accomplish a great deal more by using Visual Basic for Applications (VBA) for Office—a simple, but powerful programming language that you can use to extend Office applications.\n\nThis article is for experienced Office users who want to learn about VBA and who want some insight into how programming can help them to customize Office.\n\nThe Office suite of applications has a rich set of features. There are many different ways to author, format, and manipulate documents, email, databases, forms, spreadsheets, and presentations. The great power of VBA programming in Office is that nearly every operation that you can perform with a mouse, keyboard, or a dialog box can also be done by using VBA. Further, if it can be done once with VBA, it can be done just as easily a hundred times. (In fact, the automation of repetitive tasks is one of the most common uses of VBA in Office.)\n\nBeyond the power of scripting VBA to accelerate every-day tasks, you can use VBA to add new functionality to Office applications or to prompt and interact with the user of your documents in ways that are specific to your business needs. For example, you could write some VBA code that displays a pop up message that reminds users to save a document to a particular network drive the first time they try to save it.\n\nThis article explores some of the primary reasons to leverage the power of VBA programming. It explores the VBA language and the out-of-the-box tools that you can use to work with your solutions. Finally, it includes some tips and ways to avoid some common programming frustrations and missteps.\n\nWhen to use VBA and why\n\nThere are several principal reasons to consider VBA programming in Office.\n\nVBA is effective and efficient when it comes to repetitive solutions to formatting or correction problems. For example, have you ever changed the style of the paragraph at the top of each page in Word? Have you ever had to reformat multiple tables that were pasted from Excel into a Word document or an Outlook email? Have you ever had to make the same change in multiple Outlook contacts?\n\nIf you have a change that you have to make more than ten or twenty times, it may be worth automating it with VBA. If it is a change that you have to do hundreds of times, it certainly is worth considering. Almost any formatting or editing change that you can do by hand, can be done in VBA.\n\nThere are times when you want to encourage or compel users to interact with the Office application or document in a particular way that is not part of the standard application. For example, you might want to prompt users to take some particular action when they open, save, or print a document.\n\nDo you need to copy all of your contacts from Outlook to Word and then format them in some particular way? Or, do you need to move data from Excel to a set of PowerPoint slides? Sometimes simple copy and paste does not do what you want it to do, or it is too slow. Use VBA programming to interact with the details of two or more Office applications at the same time and then modify the content in one application based on the content in another.\n\nDoing things another way\n\nVBA programming is a powerful solution, but it is not always the optimal approach. Sometimes it makes sense to use other ways to achieve your aims.\n\nThe critical question to ask is whether there is an easier way. Before you begin a VBA project, consider the built-in tools and standard functionalities. For example, if you have a time-consuming editing or layout task, consider using styles or accelerator keys to solve the problem. Can you perform the task once and then use CTRL+Y (Redo) to repeat it? Can you create a new document with the correct format or template, and then copy the content into that new document?\n\nOffice applications are powerful; the solution that you need may already be there. Take some time to learn more about Office before you jump into programming.\n\nBefore you begin a VBA project, ensure that you have the time to work with VBA. Programming requires focus and can be unpredictable. Especially as a beginner, never turn to programming unless you have time to work carefully. Trying to write a \"quick script\" to solve a problem when a deadline looms can result in a very stressful situation. If you are in a rush, you might want to use conventional methods, even if they are monotonous and repetitive.\n\nUsing code to make applications do things\n\nYou might think that writing code is mysterious or difficult, but the basic principles use every-day reasoning and are quite accessible. Microsoft Office applications are created in such a way that they expose things called objects that can receive instructions, in much the same way that a phone is designed with buttons that you use to interact with the phone. When you press a button, the phone recognizes the instruction and includes the corresponding number in the sequence that you are dialing. In programming, you interact with the application by sending instructions to various objects in the application. These objects are expansive, but they have their limits. They can only do what they are designed to do, and they will only do what you instruct them to do.\n\nFor example, consider the user who opens a document in Word, makes a few changes, saves the document, and then closes it. In the world of VBA programming, Word exposes a Document object. By using VBA code, you can instruct the Document object to do things such as Open, Save, or Close.\n\nThe following section discusses how objects are organized and described.\n\nDevelopers organize programming objects in a hierarchy, and that hierarchy is called the object model of the application. Word, for example, has a top-level Application object that contains a Document object. The Document object contains Paragraph objects and so on. Object models roughly mirror what you see in the user interface. They are a conceptual map of the application and its capabilities.\n\nThe definition of an object is called a class, so you might see these two terms used interchangeably. Technically, a class is the description or template that is used to create, or instantiate, an object.\n\nOnce an object exists, you can manipulate it by setting its properties and calling its methods. If you think of the object as a noun, the properties are the adjectives that describe the noun and the methods are the verbs that animate the noun. Changing a property changes some quality of appearance or behavior of the object. Calling one of the object methods causes the object to perform some action.\n\nThe VBA code in this article runs against an open Office application where many of the objects that the code manipulates are already up and running; for example, the Application itself, the Worksheet in Excel, the Document in Word, the Presentation in PowerPoint, the Explorer and Folder objects in Outlook. Once you know the basic layout of the object model and some key properties of the Application that give access to its current state, you can start to extend and manipulate that Office application with VBA in Office.\n\nIn Word, for example, you can change the properties and invoke the methods of the current Word document by using the ActiveDocument property of the Application object. This ActiveDocument property returns a reference to the Document object that is currently active in the Word application. \"Returns a reference to\" means \"gives you access to.\"\n\nThe following code does exactly what it says; that is, it saves the active document in the application.\n\nRead the code from left to right, \"In this Application, with the Document referenced by ActiveDocument, invoke the Save method.\" Be aware that Save is the simplest form of method; it does not require any detailed instructions from you. You instruct a Document object to Save and it does not require any more input from you.\n\nIf a method requires more information, those details are called parameters. The following code runs the SaveAs method, which requires a new name for the file.\n\nValues listed in parentheses after a method name are the parameters. Here, the new name for the file is a parameter for the SaveAs method.\n\nYou use the same syntax to set a property that you use to read a property. The following code executes a method to select cell A1 in Excel and then to set a property to put something in that cell.\n\nThe first challenge in VBA programming is to get a feeling for the object model of each Office application and to read the object, method, and property syntax. The object models are similar in all Office applications, but each is specific to the kind of documents and objects that it manipulates.\n\nIn the first line of the code snippet, there is the Application object, Excel this time, and then the ActiveSheet, which provides access to the active worksheet. After that is a term not as familiar, Range, which means \"define a range of cells in this way.\" The code instructs Range to create itself with just A1 as its defined set of cells. In other words, the first line of code defines an object, the Range, and runs a method against it to select it. The result is automatically stored in another property of the Application called Selection.\n\nThe second line of code sets the Value property of Selection to the text \"Hello World\", and that value appears in cell A1.\n\nThe simplest VBA code that you write might simply gain access to objects in the Office application that you are working with and set properties. For example, you could get access to the rows in a table in Word and change their formatting in your VBA script.\n\nThat sounds simple, but it can be incredibly useful; once you can write that code, you can harness all of the power of programming to make those same changes in several tables or documents, or make them according to some logic or condition. For a computer, making 1000 changes is no different from making 10, so there is an economy of scale here with larger documents and problems, and that is where VBA can really shine and save you time.\n\nNow that you know something about how Office applications expose their object models, you are probably eager to try calling object methods, setting object properties, and responding to object events. To do so, you must write your code in a place and in a way that Office can understand; typically, by using the Visual Basic Editor. Although it is installed by default, many users don't know that it is even available until it is enabled on the ribbon.\n\nAll Office applications use the ribbon. One tab on the ribbon is the Developer tab, where you access the Visual Basic Editor and other developer tools. Because Office does not display the Developer tab by default, you must enable it by using the following procedure:\n• None On the File tab, choose Options to open the Options dialog box.\n• None Choose Customize Ribbon on the left side of the dialog box.\n• None Under Choose commands from on the left side of the dialog box, select Popular Commands.\n• None Under Customize the Ribbon on the right side of the dialog box, select Main Tabs in the drop down list box, and then select the Developer checkbox.\n\nAfter you enable the Developer tab, it is easy to find the Visual Basic and Macros buttons.\n\nTo protect Office users against viruses and dangerous macro code, you cannot save macro code in a standard Office document that uses a standard file extension. Instead, you must save the code in a file with a special extension. For example you cannot save macros in a standard Word document with a .docx extension; instead, you must use a special Word Macro-Enabled Document with a .docm extension.\n\nWhen you open a .docm file, Office security might still prevent the macros in the document from running, with or without telling you. Examine the settings and options in the Trust Center on all Office applications. The default setting disables macro from running, but warns you that macros have been disabled and gives you the option to turn them back on for that document.\n\nYou can designate specific folders where macros can run by creating Trusted Locations, Trusted Documents, or Trusted Publishers. The most portable option is to use Trusted Publishers, which works with digitally signed documents that you distribute. For more information about the security settings in a particular Office application, open the Options dialog box, choose Trust Center, and then choose Trust Center Settings.\n\nWhen you choose the Macro button on the Developer tab, it opens the Macros dialog box, which gives you access to VBA subroutines or macros that you can access from a particular document or application. The Visual Basic button opens the Visual Basic Editor, where you create and edit VBA code.\n\nAnother button on the Developer tab in Word and Excel is the Record Macro button, which automatically generates VBA code that can reproduce the actions that you perform in the application. Record Macro is a terrific tool that you can use to learn more about VBA. Reading the generated code can give you insight into VBA and provide a stable bridge between your knowledge of Office as a user and your knowledge as a programmer. The only caveat is that the generated code can be confusing because the Macro editor must make some assumptions about your intentions, and those assumptions are not necessarily accurate.\n• None Open Excel to a new Workbook and choose the Developer tab in the ribbon. Choose Record Macro and accept all of the default settings in the Record Macro dialog box, including Macro1 as the name of the macro and This Workbook as the location.\n• None Choose OK to begin recording the macro. Note how the button text changes to Stop Recording. Choose that button the instant you complete the actions that you want to record.\n• None Choose cell B1 and type the programmer's classic first string: Hello World. Stop typing and look at the Stop Recording button; it is grayed out because Excel is waiting for you to finish typing the value in the cell.\n• None Choose cell B2 to complete the action in cell B1, and then choose Stop Recording.\n• None Choose Macros on the Developer tab, select Macro1 if it is not selected, and then choose Edit to view the code from Macro1 in the Visual Basic Editor.\n\nLooking at the code\n\nThe macro that you created should look similar to the following code.\n\nBe aware of the similarities to the earlier code snippet that selected text in cell A1, and the differences. In this code, cell B1 is selected, and then the string \"Hello World\" is applied to the cell that has been made active. The quotes around the text specify a string value as opposed to a numeric value.\n\nRemember how you chose cell B2 to display the Stop Recording button again? That action shows up as a line of code as well. The macro recorder records every keystroke.\n\nThe lines of code that start with an apostrophe and colored green by the editor are comments that explain the code or remind you and other programmers the purpose of the code. VBA ignores any line, or portion of a line, that begins with a single quote. Writing clear and appropriate comments in your code is an important topic, but that discussion is out of the scope of this article. Subsequent references to this code in the article don't include those four comment lines.\n\nWhen the macro recorder generates the code, it uses a complex algorithm to determine the methods and the properties that you intended. If you don't recognize a given property, there are many resources available to help you. For example, in the macro that you recorded, the macro recorder generated code that refers to the FormulaR1C1 property. Not sure what that means?\n\nSelect FormulaR1C1 in the recorded macro and press F1. The Help system runs a quick search, determines that the appropriate subjects are in the Excel Developer section of the Excel Help, and lists the FormulaR1C1 property. You can choose the link to read more about the property, but before you do, be aware of the Excel Object Model Reference link near the bottom of the window. Choose the link to view a long list of objects that Excel uses in its object model to describe the Worksheets and their components.\n\nChoose any one of those to see the properties and methods that apply to that particular object, along with cross references to different related options. Many Help entries also have brief code examples that can help you. For example, you can follow the links in the Borders object to see how to set a border in VBA.\n\nThe Borders code looks different from the recorded macro. One thing that can be confusing with an object model is that there is more than one way to address any given object, cell A1 in this example.\n\nSometimes the best way to learn programming is to make minor changes to some working code and see what happens as a result. Try it now. Open Macro1 in the Visual Basic Editor and change the code to the following.\n\nYou don't need to save the code to try it out, so return to the Excel document, choose Macros on the Developer tab, choose Macro1, and then choose Run. Cell A1 now contains the text Wow! and has a double-line border around it.\n\nFigure 3. Results of your first macro\n\nYou just combined macro recording, reading the object model documentation, and simple programming to make a VBA program that does something. Congratulations!\n\nDid not work? Read on for debugging suggestions in VBA.\n\nThe VBA community is very large; a search on the Web can almost always yield an example of VBA code that does something similar to what you want to do. If you cannot find a good example, try to break the task down into smaller units and search on each of those, or try to think of a more common, but similar problem. Starting with an example can save you hours of time.\n\nThat does not mean that free and well-thought-out code is on the Web waiting for you to come along. In fact, some of the code that you find might have bugs or mistakes. The idea is that the examples you find online or in VBA documentation give you a head start. Remember that learning programming requires time and thought. Before you get in a big rush to use another solution to solve your problem, ask yourself whether VBA is the right choice for this problem.\n\nProgramming can get complex quickly. It's critical, especially as a beginner, that you break the problem down to the smallest possible logical units, then write and test each piece in isolation. If you have too much code in front of you and you get confused or muddled, stop and set the problem aside. When you come back to the problem, copy out a small piece of the problem into a new module, solve that piece, get the code working, and test it to ensure that it works. Then move on to the next part.\n\nThere are two main types of programming errors: syntax errors, which violate the grammatical rules of the programming language, and run-time errors, which look syntactically correct, but fail when VBA attempts to execute the code.\n\nAlthough they can be frustrating to fix, syntax errors are easy to catch; the Visual Basic Editor beeps and flashes at you if you type a syntax error in your code.\n\nFor example, string values must be surrounded by double quotes in VBA. To find out what happens when you use single quotes instead, return to the Visual Basic Editor and replace the \"Wow!\" string in the code example with 'Wow!' (that is, the word Wow enclosed in single quotes). If you choose the next line, the Visual Basic Editor reacts. The error \"Compile error: Expected: expression\" is not that helpful, but the line that generates the error turns red to tell you that you have a syntax error in that line and as a result, this program will not run.\n\nChoose OK and change the text back to\"Wow!\".\n\nRuntime errors are harder to catch because the programming syntax looks correct, but the code fails when VBA tries to execute it.\n\nFor example, open the Visual Basic Editor and change the Value property name to ValueX in your Macro, deliberately introducing a runtime error since the Range object does not have a property called ValueX. Go back to the Excel document, open the Macros dialog box and run Macro1 again. You should see a Visual Basic message box that explains the run-time error with the text, \"Object doesn't support this property of method.\" Although that text is clear, choose Debug to find out more.\n\nWhen you return to the Visual Basic Editor, it is in a special debug mode that uses a yellow highlight to show you the line of code that failed. As expected, the line that includes the ValueX property is highlighted.\n\nYou can make changes to VBA code that is running, so change ValueX back to Value and choose the little green play button underneath the Debug menu. The program should run normally again.\n\nIt's a good idea to learn how to use the debugger more deliberately for longer, more complex programs. At a minimum, learn a how to set break-points to stop execution at a point where you want to take a look at the code, how to add watches to see the values of different variables and properties as the code runs, and how to step through the code line by line. These options are all available in the Debug menu and serious debugger users typically memorize the accompanying keyboard shortcuts.\n\nTo open the Developer Reference that is built into Office Help, open the Help reference from any Office application by choosing the question mark in the ribbon or by pressing F1. Then, to the right of the Search button, choose the dropdown arrow to filter the contents. Choose Developer Reference. If you don't see the table of contents in the left panel, choose the little book icon to open it, and then expand the Object Model Reference from there.\n\nFigure 4. Filtering on developer Help applies to all Office applications\n\nTime spent browsing the Object Model reference pays off. After you understand the basics of VBA syntax and the object model for the Office application that you are working with, you advance from guesswork to methodical programming.\n\nOf course the Microsoft Office Developer Center is an excellent portal for articles, tips, and community information.\n\nAll programmers get stuck sometimes, even after reading every reference article they can find and losing sleep at night thinking about different ways to solve a problem. Fortunately, the Internet has fostered a community of developers who help each other solve programming problems.\n\nAny search on the Web for \"office developer forum\" reveals several discussion groups. You can search on \"office development\" or a description of your problem to discover forums, blog posts, and articles as well.\n\nIf you have done everything that you can to solve a problem, don't be afraid to post your question to a developers forum. These forums welcome posts from newer programmers and many of the experienced developers are glad to help.\n\nThe following are a few points of etiquette to follow when you post to a developer forum:\n• None Before you post, look on the site for an FAQ or for guidelines that members want you to follow. Ensure that you post content that is consistent with those guidelines and in the correct section of the forum.\n• None Include a clear and complete code sample, and consider editing your code to clarify it for others if it is part of a longer section of code.\n• None Describe your problem clearly and concisely, and summarize any steps that you have taken to solve the problem. Take the time to write your post as well as you can, especially if you are flustered or in a hurry. Present the situation in a way that will make sense to readers the first time that they read the problem statement.\n• None Be polite and express your appreciation.\n\nGoing further with programming\n\nAlthough this article is short and only scratches the surface of VBA and programming, it is hopefully enough to get you started.\n\nThis section briefly discusses a few more key topics.\n\nIn the simple examples in this article you manipulated objects that the application had already created. You might want to create your own objects to store values or references to other objects for temporary use in your application. These are called variables.\n\nTo use a variable in VBA, must tell VBA which type of object the variable represents by using the Dim statement. You then set its value and use it to set other variables or properties.\n\nThe simple programs in this article execute one line at a time, from the top down. The real power in programming comes from the options that you have to determine which lines of code to execute, based on one or more conditions that you specify. You can extend those capabilities even further when you can repeat an operation many times. For example, the following code extends Macro1.\n\nType or paste the code into the Visual Basic Editor and then run it. Follow the directions in the message box that appears and change the text in cell A1 from Wow! to Yes! and run it again to see the power of looping. This code snippet demonstrates variables, branching and looping. Read it carefully after you see it in action and try to determine what happens as each line executes.\n\nAll of my Office applications: example code\n\nHere are a few scripts to try; each solves a real-world Office problem.\n\nBe aware that there are situations in which you might want to automate email in Outlook; you can use templates as well.\n\nBe aware that you can select a column of cells and run this macro to delete all rows in the selected column that have a blank cell.\n\nBe aware that this code loops through all of the slides and deletes all text boxes that don't have any text. The count variable decrements instead of increments because each time the code deletes an object, it removes that object from the collection, which reduces the count.\n\nBe aware that this code copies the currently open contact in Outlook into the open Word document. This code only works if there is a contact currently open for inspection in Outlook.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://forum.uipath.com/t/what-are-drawbacks-of-using-vba-macros-for-web-scraping-vs-using-uipath/687791",
        "document": "I have been using UiPath for doing all the automations asked by the client.\n\n But now there are asking to use macro to do web scraping from a website and then paste in the excel.\n\nHow do I convince them to go with UiPath instead ?. For folks who have used both, I need strong arguments for that, thanks"
    }
]