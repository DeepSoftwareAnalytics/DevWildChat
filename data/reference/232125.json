[
    {
        "link": "https://en.uniapp.dcloud.io/vue-components.html",
        "document": "\n• Components are the basic building blocks of the view layer.\n• The component is an encapsulation of a single functional module.\n• A component includes a start tag and an end tag. Attributes can be written on the label and assigned values to the attributes. The content is written in two labels.\n• Root is , this case can only and must have a root component. This is the vue single file component specification .\n• The data option of a component must be a function.\n\nThe following is an example of a basic component. Introduce a component again under the root component, and bind a data to the text area of the component.\n\nBasic components are built in the uni-app framework, including dozens of basic components such as view, text, input, button and video. See the list for details: Uni-app basic components (opens new window)\n\nBut basic components alone are not enough. There will be many encapsulated components in actual development.\n\nFor example, if we need a pentagram click rating component, it is available in the DCloud plug-in market: https://ext.dcloud.net.cn/plugin?id=33 (opens new window)\n\nImport this uni-rate component into your uni-app project, refer to it in the required vue page, and you can display this five-pointed star component in the specified place.\n• The components can be reused any number of times.\n• The code is more convenient to organize and manage, and it is more extensible, facilitating collaborative development by multiple people.\n\nWhen registering a component, we always need to give it a name. There are two ways to define component names:\n\nWhen using kebab-case (name separated by dashes) to define a component, you must also use kebab-case when referencing this custom element, for example .\n\nWhen defining a component using PascalCase (name with initial capital letters), you can use both nomenclatures when referencing this custom element. Both and are acceptable.\n\nCreate and store custom components in the directory under the root directory of the uni-app project:\n\nsupports the configuration of global components. Global registration is required in , and the component can be used in all pages after registration.\n• The first parameter of Vue.component must be a static string.\n• The nvue page does not currently support global components.\n• Components can be used directly in\n\nBefore partial registration, import the component you want to use on the page that needs to reference the component.\n\nThe way the page introduces components\n\nThe following two ways to import a corner label component libraryhttps://ext.dcloud.net.cn/plugin?id=21 (opens new window), recommended to use to introduce\n• Traditional vue specifications: On the index.vue page, import the component as ,and define the you want to use in the Components option.\n\nFor the object of each property, its property name is the name of the custom elements, objects whose property value is the option of this component.\n\nPutting a variable name similar to uniBadge in the object is actually uniBadge: short for uniBadge, that is, the variable name is also:\n• The name of the custom element used in the template\n• The variable name that contains this component option (Only hump naming is supported)\n• easycom : introduce the components into one step. As long as the components are installed in the project directory, and in accordance with the directory structure. You can use it directly on the page without quoting or registering.\n• None Easycom (opens new window) is automatically turned on , you do not need to manually open ,when there is a demand of nodes personalize .\n• None No matter how many components are installed in the components directory, easycom will automatically remove unused components after packaging, which is particularly friendly to the use of component libraries.\n\nComponent is a very important part of the technology in .Components allow UI-related wheels to be easily manufactured and shared, which in turn makes development efficiency for users significantly higher.\n\nhas built a component plug-in market, in which there are many ready-made components. If you download components that conform to the components/ component name/component name. vue directory structure, you can use them directly. uni-app plug-in market (opens new window)\n\nCan be an array or object, used to receive data from the parent component. It can be a simple array, or use an object as an alternative. The object allows configuration of advanced options such as type detection, custom validation, and setting default values.\n• You can give like this passed in a static value:\n• Pass in all of an object\n\nIf you want to pass in all of an object as a prop, you can use without parameters (replace v-bind: prop-name) . For example, for a given object :\n\nAll props form a one -line downward binding between their parent and child props : updates to the parent prop will flow down to the child components, but the reverse is not possible. This will prevent accidental changes to the state of the parent component from the child component, which will make the data flow of your application difficult to understand.\n• This is used to pass an initial value; the desired sub-assembly to the next as a local used data.\n• This with a primitive values passed and the need for conversion. In this case, it is preferable to use the value of a calculated attribute to define:\n\nref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object.\n\nIf used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:\n\nWhen used on elements/components with v-for, the registered reference will be an Array containing DOM nodes or component instances.\n\n**An important note about the ref registration timing: **\n\nbecause the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don’t exist yet! $refs is also non-reactive, therefore you should not attempt to use it in templates for data-binding.\n\nDespite the existence of props and events, sometimes you might still need to directly access a child component in . To achieve this you can assign a reference ID to the child component using the . For example:\n\nNow in the component where you’ve defined this ref, you can use:\n\nThus allowing the parent component to focus the input inside with:\n\nhere may be times when you want to listen directly to a native event on the root element of a component. In these cases, you can use the modifier for :\n• Note: the performance of app and h5 are inconsistent, and h5 gets the browser native event.\n\nWhen a child component changes the value of a , the change is synchronized with the binding in the parent component. It is extended as a listener that automatically updates the properties of the parent component.\n\nVue implements a content distribution API, using elements as outlets for hosting content distribution.\n\nIt allows you to synthesize components like this:\n\nIn the template may be written as:\n\nWhen the component is rendered, it will be replaced with \"Your Profile\". The slot can contain any template code, including :\n\nIf a does not contain an element, then anything between the start tag and an end tag assembly is discarded.\n\nWhen you want to use data in a slot, for example:\n\nThis slot has access to the same instance (that is, the same \"scope\") as the rest of the template, but not to the scope of .For example, a visit of less than:\n\nSometimes it is useful to set a specific fallback (that is, the default) content for a slot, which will only be rendered when no content is provided. In one example, component:\n\nWe may hope that the vast majority of cases are rendered within the text \"Submit\". In order to \"Submit\" content as a backup, we can put it in the label:\n• When I use a parent component when slot and does not provide any content:\n• When I use a parent assembly time and provides a slot content:\n\nWhen multiple slots are required, you can define named slots using a special feature of the element:\n• When providing content to a named slot, We can use directive on a element, and provide their name as a parameter of v-slot:\n\nNow all the content elements will have to be passed in the appropriate slot. Any not been wrapped with the v-slot in is considered the default slot content in the content .\n\nLike v-on and v-bind, it also has abbreviations, that is, replace everything before the parameter (v-slot:) with the character # . For example, it can be rewritten as :\n\nIn the scope slot, the parent component can get the data of the child component. Subassembly may be bound label on the attribute value.\n\nSometimes it is useful to allow the contents of the slot to access data that is only available in the subcomponent.\n\nWe may want to change the default content and display it by first name instead of last name. as follows:\n\nHowever, the above code does not work properly, because only components can access the user and the content we provide is in the parent rendering.\n\nTo make user available in the parent slot contents, we can bind user as an of the element:\n\nBinding on the element is called slot prop .Now in the parent scope, we can use the valued to define the name of the we provide:\n\nIn this example, we select will contain all the slots object name , but you can use any name you like.\n\nLike assume unspecified content corresponding slot as the default, with no arguments is assumed to correspond to the default slot:\n\nThe abbreviated syntax of the default slot cannot be mixed with the named slot , because it will cause the scope to be ambiguous:\n\nAlways use the full -based syntax for all slots whenever multiple slots are present:\n\nThe internal working principle of scoped slots is to wrap the contents of your slot in a function with a single parameter:\n\nThis means that the value of a can actually be any expression that can be used as a parameter in a function definition. So with the support of the environment ( single file component ), you can also use the ES2015 deconstructed to pass specific slot , as follows:\n\nThis makes the template more compact, especially if the slot provides more than one .It also opens up other possibilities, such as renaming,for example, rename :\n\nYou can even define a backup for the case where in the slot is :\n\nThe following are reserved keywords and can not be used as component names.\n• In addition to the names in the above list, standard HTML and SVG tag names cannot be used as component names.\n• Methods cannot use a method name with the same name as a lifecycle."
    },
    {
        "link": "https://en.uniapp.dcloud.io/tutorial/vue-components",
        "document": "1. Please check the server address \n\n2. Please check your network settings \n\n3. Close the AD blocking plug-in and try again"
    },
    {
        "link": "https://en.uniapp.dcloud.io/component/uniui/quickstart.html",
        "document": "uni-ui supports HBuilderX to directly create a new project template, npm installation and separate import of individual components, etc.\n\n# In the template of the new uni-app project in HBuilderX, select the uni-ui template\n\nDue to the unique easycom technology of uni-app, you can directly use various Vue components that meet the rules without reference and registration.\n\nType in the code area, pull up a list of various built-in or uni-ui components, and select one to use the component.\n\nPlace the cursor on the component name and press F1 to view the component's documentation.\n\nIf you have not created a uni-ui project template, you can also install a required component separately in your project through uni_modules. The following table is the list of extension components of uni-ui. Click each component on the details page to import the components to the project. After importing, you can use it directly without import and registration.\n\nUse the method to install the component library, which can be imported directly through the plug-in market, and the components can be quickly updated through the right-click menu. No reference or registration is required, and the component can be used directly in the page. Click to install uni-ui component library\n\nNote: Downloading the latest components currently only supports uni_modules , and the non-uni_modules version supports up to the 1.2.10 version of the component\n\nIf you cannot upgrade to the version, you can use to install the corresponding components and copy the components to the corresponding directory.\n\nFor example, to update and , copy all the directories under and to the following directory:\n\nIf you want to import all uni-ui components into the project at once, you only need to import one component click to import .\n\nIf other components are not automatically imported, you can right-click on the uni-ui component directory and select .\n\nYou can use to install the library in the project, or use directly in the project.\n\nFor the project, please install sass and sass-loader first. If you use it in HBuliderX, you can skip this step.\n\nAfter using to install , you need to configure rules, so that the components installed by support\n\nOpen in the project root directory and add the node:\n• uni-ui now only recommends using , if you refer to the component yourself, there may be a problem that the component cannot be found\n• For components installed using npm, babel-loader will ignore all files in node_modules by default, which will cause conditional compilation to fail. It needs to be solved by configuring :\n• uni-ui is an extension to the built-in components of uni-app. Note that unlike web development, uni-ui does not include base components, it is a complement to base components. Some developers in web development are accustomed to using a ui library to complete all development, but in the uni-app system, it is recommended that developers use basic components with higher performance first, and then introduce necessary extension components as needed.\n• does not support installing using"
    },
    {
        "link": "https://tencentcloud.com/document/product/1047/58649",
        "document": ""
    },
    {
        "link": "https://en.uniapp.dcloud.io/tutorial/mp-weixin-plugin-dev.html",
        "document": "This document is intended to introduce how to compile a uni-app project into an applet plugin. If you want to know how to reference and use applet plugins in uni-app, please refer to the document: Using applet plugins\n\nThe applet plug-in specification is defined by the applet manufacturer. A plug-in is a package of a set of js interfaces, custom components or pages, and is used to be embedded in the applet.\n\nuni-app can not only develop a complete applet, but also compile it into a applet plug-in.\n• When developing , the basic library version began to support. (If the plugin includes pages, the base library version is required.)\n• When developing the , the Alipay IDE version is required to be 0.60 and above\n\nplugin.json is at the same level as pages.json in the uni-app project. All components, pages and js interfaces open to third-party applets must be declared in plugin.json\n• The meaning of each configuration is as follows:\n• : List all custom components open to the applet.\n• : List all pages open to the applet.\n• The meaning of each configuration is as follows:\n• : List all custom components open to the applet.\n• : List all pages open to the applet.\n• : List all the pages of the plugin (including pages that are open to Mini Programs and those that are not open to Mini Programs).\n• The item in has the same function as the item in\n• The pages in for external use need to be declared in , array type\n• Due to the inconsistent formats at both ends, you can use conditional compilation in to process\n• Update the compiler dependency of the project created by CLI to 3.2.1 or above, and update the compiler dependency reference: [https://uniapp.dcloud.net.cn/quickstart-cli.html#cliversion](https://uniapp. dcloud.net.cn/quickstart-cli.html#cliversion).\n• Where is the name of the compiled plugin package. The executable MiniApp plug-in code is in .\n• The platform plugin will be compiled and released later, please pay attention to the update log.\n\n# How to use plugins in your project\n• The host applet is the . You can configure relevant information in . [Details](https://uniapp.dcloud.io/component/mp-weixin-plugin?id= %e9%85%8d%e7%bd%ae%e5%b0%8f%e7%a8%8b%e5%ba%8f%e6%8f%92%e4%bb%b6)\n• The host is a native applet, which can be configured in the of the project:\n\nSometimes the project not only needs to be compiled into a plug-in, but also needs to be run as a normal applet, but some APIs are not applicable to both ends. In this case, you can use custom conditional compilation to distinguish them.\n• None To customize conditional compilation (details), add the following configuration to :\n• None Execute the command when compiling: , you can write the script into , and each execution is more simplified.\n• The component is not used inside the plug-in. When it needs to be used in the host applet, it should be introduced and used in main.js, otherwise the unused plug-in will be lost after compilation. E.g:\n• The pages written in the plugin need to be filled in .\n• If there are multiple compiled by that need to run in the same applet, do not have the same name.\n• Do not have special characters in the name, such as . This name will be used to mount a method.\n• has been manually replaced with , do not write other special characters.\n• Each applet plugin has different support for each . For details, please refer to the relevant description of the official applet documentation"
    },
    {
        "link": "https://developer.apple.com/documentation/authenticationservices/implementing-user-authentication-with-sign-in-with-apple",
        "document": "Please turn on JavaScript in your browser and refresh the page to view its content."
    },
    {
        "link": "https://developer.apple.com/documentation/sign_in_with_apple/configuring-your-webpage-for-sign-in-with-apple",
        "document": "Please turn on JavaScript in your browser and refresh the page to view its content."
    },
    {
        "link": "https://developer.apple.com/documentation/signinwithapplejs",
        "document": "Please turn on JavaScript in your browser and refresh the page to view its content."
    },
    {
        "link": "https://dev.to/varsilias/complete-guide-to-implementing-apple-oauth-20sign-in-with-apple-authentication-in-a-nodeexpress-application-4hf",
        "document": "OAuth, short for Open Authorization, is a standard that allows users to give third-party clients usually web applications, mobile applications, desktop applications, etc access to their basic data located on another server without giving up their sensitive data like passwords or any other encrypted data.\n\nOAuth allows data to be exchanged between different servers at different locations provided that the user in question authorizes the data exchange. This protocol gives a faster on-boarding experience for users on other applications by transferring their already existing details from an identity provider to a third-party application that needs access to this information.\n\nHere is a link to read more about OAuth.\n\nHere is an example summary of how the OAuth 2.0 works\n\nThe third-party application e.g web, mobile or desktop application sends a request to the Identity Provider e.g Google, Apple, Facebook, Twitter, or GitHub specifying the redirect URL. The redirect URL is a webhook URL that the identity provider uses to securely transmit sensitive data to the third-party application after the user has authorized the identity provider.\n• None The third-party application e.g web, mobile or desktop application sends a request to the Identity Provider e.g Google, Apple, Facebook, Twitter, or GitHub specifying the redirect URL. The redirect URL is a webhook URL that the identity provider uses to securely transmit sensitive data to the third-party application after the user has authorized the identity provider.\n• None The Identity provider prompts the user to authorize the data transfer.\n• None The identity provider issues an Authorization Code to the third-party application.\n• None The third-party application exchanges the authorization code with the identity provider for an Identity token, a refresh token and an access token.\n• None The Identity token is a JWT string that can be decoded to access the user’s information.\n• None The third-party application can choose to decode and retrieve the user information(This is less secure as the signature of the JWT token may have been tampered with during the transmission) or utilize the access token to make further requests to the identity provider to retrieve the user’s information.\n• None The third-party application uses the access token to request the user’s data on behalf of the user.\n\nWhile this procedure is pretty straightforward and vastly used by several identity providers, Apple’s OAuth2 implementation seems to be a lot different and quite challenging for a lot of developers to implement. I guess this is mostly because of Apple’s user privacy policy.\n\nBefore we proceed, let’s point out some of the differences that exist between Apple’s OAuth implementation and the widely used implementation by some of the other identity providers.\n• Apple gives its users the option to hide their email addresses while registering for certain services on third-party websites. If users choose to hide their email during the authorization process, Upon completion of the entire Authorization process, Apple issues a proxy email to the third-party website that redirects all the emails sent to the proxy email to the user’s real email address. Apple says that they do this to prevent spamming of their users.\n• Unlike most identity providers, at the time of writing there is no REST API endpoint to access the user’s profile information using a server-issued access token on behalf of the user, this makes it difficult to rely on the “Sign in with Apple” option as the only source of truth when onboarding new users in a third-party application.\n\nHere is a link to Apple’s documentation on “Sign in with Apple”\n\nBefore we proceed, let’s consider how we want our application to work.\n\nThe client-side of the application(Web or Mobile) which for the sake of this tutorial we would not talk about in-depth, would initiate the entire authorization flow, get the access, refresh and identity token and then send a POST request to an API endpoint that we would define in our Node/Express backend server with either of the access token or the identity token.\n\nFor some identity providers like Google or Facebook, it would be best that the client sends the access token as this would allow our server to retrieve the user’s details on their behalf using an endpoint provided by Google and Facebook or any other identity provider.\n\nIn Apple’s case, though not explicitly specified in the developer documentation, as at the point of writing this article there is no endpoint provided by Apple to retrieve the user’s data on their behalf using the access token provided by Apple. With that said, as recommended by Apple on the developer documentation, we would be depending on the identity token(id_token) which I earlier stated is a JSON Web Token string containing some of the user information like email, sub etc. We would not just decode the token and retrieve the user information, that would not be nice since anyone with the technical knowledge can create a JWT string and also decode it.\n\nIn order to verify an Identity token issued by Apple, there are steps Apple recommends and they are all outlined in this part of the Apple developer documentation. One particular point I would like to highlight in this article which is also the approach we would be using in this article is to verify the JWS E256 signature using the server’s public key. Of course, this would sound confusing at first and at this point you may already be tempted to just decode the identity token and retrieve the data you need but that wouldn’t be a good approach and would also lead to a technical debt that could cause the company you work for huge amounts of money in the future.\n\nThe API endpoint that we would define in our Node/Express backend server would need the identity token to be passed in the request body when the request is to be sent and yes your guess is as good as mine, the request would be a POST request. The endpoint would also be responsible for making validating and verifying the JWS E256 signature of the identity token using the server’s public key in some kind of cryptographic manner and at the same time retrieving the user information from the token.\n\nEnough of the boring talk, let’s write some code.\n\nIn order to follow along, you will need nodejs installed. Nodejs version >= 10.x would do. The example code for this tutorial would be based on Nodejs version 16.x.\n\nNodejs by default comes with NPM a package manager that allows developers to pull libraries and packages into their development workflow from the registry.\n\nFor this article, I would be using the yarn package manager.\n\nLet’s set up a mini Nodejs/Express server with one endpoint that would allow our client-side applications to send a POST request with the id_token.\n\nCreate a folder and name it whatever you want to. Inside the folder for a start, we will install express and nodemon By running the command\n\nCreate an index.js file at the root of the project folder and add the below snippet\n\nIn the above snippet\n• We imported the express package we installed earlier\n• We serve the app and listen on PORT 3000 for incoming request\n• We are also destructing the property id_token from the incoming request body just like earlier stated\n\nNext, we need to verify the JWS E256 signature of the id_token using the server’s public key just as apple recommends.\n\nFirst, what is the server public key and how do we fetch it?\n\nThe server public key is referred to by Apple as a JWK key set located in this part of the developer documentation.\n\nAccording to the documentation, when we send a GET request to\n\nhttps://appleid.apple.com/auth/keys we get a JSON keys response in the format below\n\nThe response above is a JWKS key set. The JWKS key set contains information needed to get the Apple public key that would be used to verify the JWS E256 signature of the id_token. It is quite difficult to write specific detail on how to get the public key from this JWKS but in this article, we would use jwk-rsa, a nodejs package that converts a set of JWK keys into an equivalent Public key.\n\nInstall the package by running the command\n\nTo generate the public key with this package we would require a “kid” that matches one of the kid properties on the JWKS key set returned from the Apple server. From the attached image below, we can see that For every Apple issued Id_token, there exists a “kid” property on the header of the decoded id_token\n\nIn order to get the “kid” from the header of id_token, we would need to decode the token and get the header and then get the “kid” from the header. For this, we can use the j*sonwebtoken* nodejs package to decode the id_token.\n\nModify the initial code by adding the following line\n\nThe time we have all been waiting for.\n\nIn order to generate the public key modify the code to look like the one below\n\nWhen you send a POST request to http://localhost:3000/auth/apple **and pass the Apple issued id_token**, you will get a string in the following format in the console\n\nWith the string above, we can then verify the JWS E256 signature of the Apple issued id_token by modifying the code a little.\n\nif everything works without errors, an Object of type JWTPayload containing the sub and email as well as other properties.\n\nYou can go ahead to store the email and sub in the database depending on your application needs.\n\nIn this article, our major focus has been on ensuring that we are able to verify the JWS signature of an Apple issued id_token.\n\nWhile this is properly covered here, you may need to take certain steps before needing this article in the first place. For instance, how to get the necessary Apple credentials like Client Secret, Client ID. You will most likely spend a substantial amount of time in the Apple developer documentation before achieving your aim.\n\nHere is a link to how you can get the above-mentioned credentials."
    },
    {
        "link": "https://scottbrady.io/openid-connect/implementing-sign-in-with-apple-in-aspnet-core",
        "document": "“Sign In With Apple” (SIWA) is Apple’s response to social authentication methods, similar to google. Released as part of Apple’s WWDC 2019 conference, Apple has weighed into the identity provider space by using Apple ID for username and password authentication and MFA using the user’s registered Apple devices.\n\nSign in with Apple gives you a new alternative to other social login providers such as Google and Facebook. However, unlike those services, it has a greater focus on identity and authentication rather than access to services such as Google calendar.\n\nTheir primary value add is the ability to create a “private relay email”. So instead of giving a website your actual email address, you give the website an Apple email address explicitly created for that website. Apple will then forward any emails sent to that private relay email, allowing you to use the website without necessarily exposing your personal information.\n\nIn this article, I’m going to take a brief look at how Sign in with Apple fits together (spoiler alert, it’s OpenID Connect) and then show an example integration using ASP.NET Core’s OpenID Connect authentication handler.\n\nSign in with Apple: How It Works\n\nThe good news is, Sign in with Apple now implements OpenID Connect. It has an authorization endpoint, a token endpoint, you send it a client ID, redirect URI, state, and at the end of it, you get an identity token in return. However, it does have a few caveats.\n\nUnlike the early days, Sign in with Apple now supports the OpenID Connect discovery document, available at https://appleid.apple.com/.well-known/openid-configuration. This endpoint describes important data such as Apple’s:\n• parts of the OpenID Connect specification it supports.\n\nFrom my experience, this endpoint is good for loading in endpoint configuration, but the “supported” values are not 100% true. For instance, Sign in with Apple does support the hybrid flow and the c_hash claim, but its discovery document does not reflect this.\n\nThe authorization URL is the same for every application, but to use it, you must register your client in Apple’s developer portal as a Service ID.\n\nExample Sign in with Apple Authorization Request\n\nHere is an example authorization request your client application can make to Apple (with added line breaks & URL decoded):\n\nThis is your average OpenID Connect authorization request, using the hybrid flow and nonce validation for defense against code injection.\n\nSince Sign in with Apple does not currently support Proof-Key for Code Exchange (PKCE), I recommend using the hybrid flow rather than the authorization code flow. Using the hybrid flow means that you will receive an identity token alongside the authorization code, which you can validate before using your client secret to swap the authorization code for tokens. If you validate the and values, you can prove that both the identity token and the authorization code were issued in response to your request.\n\nSign in with Apple supports the following scopes:\n\nRather than include the identity data from email and name inside the identity token (a bad idea) or support the user info endpoint (a good idea), Apple will return the user’s identity data inside the “user” field of the authorization response. However, they will include the email scope claims in the identity token ( and ).\n\nIf you request the name or email scope, Apple requires you to use the form_post response mode. This is because they will not return user data via the URL. Since Apple does not currently support PKCE, the form post response mode is our preferred response mode to prevent the authorization code from being exposed to the URL. Just be aware of how the browser handles any correlation cookies.\n\nIn response to your authorization request, Apple will return the requested code and identity token, repeat your state back to you and their custom “user” property.\n\nNote that you will only receive the user property the first time that the user uses your client application. After that, apple will not repeat the user data, so if you want to remember it, now is the time to save it. If something goes wrong, the only way I’ve found to reset the process is to have the user visit https://appleid.apple.com/account/manage, revoke consent, and reauthenticate into your app.\n\nApple does not support shared secrets for client authorization. Instead, they use a custom implementation, similar to JWT Bearer Token for Client Authentication found in RFC 7523.\n\nTo authenticate the client, you’ll need to generate a JWT, but instead of signing it with a key known only to you, you must instead use a private key created by Apple in their developer portal. You then use this key to sign your JWT using the ES256 signing algorithm.\n\nThis JWT must also have:\n• An issuer ( ) value set to your Apple Team ID (found in the membership area of the Apple developer portal)\n• An expiry ( ) of under 6 months (allowing for long-lived or short-lived credentials)\n• An audience ( ) value of https://appleid.apple.com\n• A subject ( ) value equal to your (Service ID)\n\nYou can find more details on the client secret type in Apple’s documentation.\n\nYou client secret will look something like the following JWT:\n\nExample Sign in with Apple Token Request\n\nOtherwise, the token request looks the same as your usual OAuth token request, but the value is your JWT.\n\nExample Sign in with Apple Token Response\n\nIn response to your token request, Apple will respond with your three tokens:\n\nASP.NET Core Authentication using Sign in with Apple\n\nLet’s see how to integrate this in ASP.NET Core. First, you’ll need to do some setup within Apple’s developer portal, access to which will, unfortunately, put you back at least £79 if you don’t already have an account.\n\nApple has some decent step-by-step instructions for creating a client application in their developer portal; however, the requirements boil down to:\n• Create an App ID configured for “Sign in with Apple”\n• Create a Service ID configured for “Sign in with Apple” (including a verified domain and redirect URIs)\n• Create a key that can be used by your created Service ID\n\nUnfortunately, you can’t use localhost redirect URIs, but you can use dev domains such as . In my example, I set my verified domain as www.scottbrady91.com and had my redirect URL as http://local.test:5000/signin-apple (with an associated host record on my machine).\n\nLet’s start by adding cookie and OpenID Connect authentication handlers to your application’s Startup class, making it look something like the following:\n\nDon’t forget to add the call to in your methodand forcing authentication on one of your routes (e.g. using an ).\n\nLike you saw earlier, you’re using the hybrid flow, relying on and validation to prevent code or identity token injection.\n\nYou’ve also cleared the scope collection to prevent ASP.NET from asking for the profile scope, which Apple does not support (it used to cause an HTTP 500 error on Apple’s consent page).\n\nSince Apple now supports OpenID Connect’s discovery document, you can configure as the authority, allowing ASP.NET Core to automatically load the discovery document and Apple’s public keys (from their JWKS endpoint). In addition, ASP.NET Core will periodically reload this metadata, allowing it to automatically load in new public keys whenever Apple triggers key rollover.\n\nYour will be the Service ID that you created for Sign in with Apple. Your callback path must match a redirect URI configured in that Service (remember, this is case-sensitive).\n\nNow for secret generation. When you generate a key within the Apple developer portal, it is given to you as a file. Luckily, this is something you can read with relative ease, thanks to the method on .\n\nUsing this helper method, you can generate a new client secret per request via the event:\n\nYou should now be able to login using “Sign in with Apple”\n\nYou can find a working sample of this code on GitHub. You’ll just need to provide your own Service ID, redirect URI, and signing key.\n• Documentation: Configure Sign in with Apple for the web\n• Aaron Parecki: What the Heck is Sign in with Apple?"
    }
]