[
    {
        "link": "https://registry.terraform.io/modules/cloudposse/vpc-peering-multi-account/aws/latest",
        "document": "Please enable Javascript to use this application"
    },
    {
        "link": "https://stackoverflow.com/questions/70677531/vpc-peering-in-2-different-account-via-terraform",
        "document": "I try to set up a vpc peering connection between 2 VPC in Singapore region in 2 different AWS accounts. I followed the terraform document on \"vpc_peering_connection\" and \"vpc_peering_connection_accepter\" on the official website. So this is my code and failure:\n\nWhen I run nothing fails. when run , I receive this failure:\n\nBut the VPC Peering connection is still created and I got the VPC Peering ID\n\nResult: and is done.\n‚Ä¢ The status of VPC peering in both Accounts is active. But when I run again in Requester, the VPC peering was destroyed and replaced."
    },
    {
        "link": "https://github.com/cloudposse/terraform-aws-vpc-peering-multi-account/blob/master/README.md",
        "document": "Terraform module to create a peering connection between any two VPCs existing in different AWS accounts.\n\nThis module supports performing this action from a 3rd account (e.g. a \"root\" account) by specifying the roles to assume for each member account.\n\nIMPORTANT: AWS allows a multi-account VPC Peering Connection to be deleted from either the requester's or accepter's side. However, Terraform only allows the VPC Peering Connection to be deleted from the requester's side by removing the corresponding resource from your configuration. Read more about this on Terraform's documentation portal.\n\nIMPORTANT: Do not pin to because there may be breaking changes between releases. Instead pin to the release tag (e.g. ) of one of our latest releases.\n\nFor a complete example, see examples/complete\n\nThe requester IAM Role should have the following Trust Policy:\n\nand the following IAM Policy attached to it:\n\nNOTE: the policy specifies the permissions to create (with ) and delete (with ) all the required resources in the requester AWS account\n\nwhere is the requester AWS account ID.\n\nThe accepter IAM Role should have the following Trust Policy:\n\nNOTE: The accepter Trust Policy is the same as the requester Trust Policy since it defines who can assume the IAM Role. In the requester case, the requester account ID itself is the trusted entity. For the accepter, the Trust Policy specifies that the requester account ID can assume the role in the accepter AWS account .\n\nand the following IAM Policy attached to it:\n\nNOTE: the policy specifies the permissions to create (with ) and delete (with ) all the required resources in the accepter AWS account\n\nwhere is the accepter AWS account ID.\n\nFor more information on IAM policies and permissions for VPC peering, see Creating and managing VPC peering connections.\n‚Ä¢ terraform-aws-vpc - Terraform Module that defines a VPC with public/private subnets across multiple AZs with Internet Gateways\n‚Ä¢ terraform-aws-vpc-peering - Terraform module to create a peering connection between two VPCs in the same AWS account\n‚Ä¢ terraform-aws-kops-vpc-peering - Terraform module to create a peering connection between a backing services VPC and a VPC created by Kops\n\nFor additional context, refer to some of these links.\n‚Ä¢ What is VPC Peering? - VPC peering connection is a networking connection between two VPCs that enables you to route traffic between them using private IPv4 addresses or IPv6 addresses.\n\nThis project is under active development, and we encourage contributions from our community.\n\nMany thanks to our outstanding contributors:\n\nFor üêõ bug reports & feature requests, please use the issue tracker.\n\nIn general, PRs are welcome. We follow the typical \"fork-and-pull\" Git workflow.\n‚Ä¢ Review our Code of Conduct and Contributor Guidelines.\n‚Ä¢ Clone the project to your own machine\n‚Ä¢ Commit changes to your own branch\n‚Ä¢ Push your work back up to your fork\n‚Ä¢ Submit a Pull Request so that we can review your changes\n\nNOTE: Be sure to merge the latest changes from \"upstream\" before making a pull request!\n\nJoin our Open Source Community on Slack. It's FREE for everyone! Our \"SweetOps\" community is where you get to talk with others who share a similar vision for how to rollout and manage infrastructure. This is the best place to talk shop, ask questions, solicit feedback, and work together as a community to build totally sweet infrastructure.\n\nSign up for our newsletter and join 3,000+ DevOps engineers, CTOs, and founders who get insider access to the latest DevOps trends, so you can always stay in the know. Dropped straight into your Inbox every week ‚Äî and usually a 5-minute read.\n\nJoin us every Wednesday via Zoom for your weekly dose of insider DevOps trends, AWS news and Terraform insights, all sourced from our SweetOps community, plus a live Q&A that you can‚Äôt find anywhere else. It's FREE for everyone!\n\nAll other trademarks referenced herein are the property of their respective owners."
    },
    {
        "link": "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc_peering_connection",
        "document": "Please enable Javascript to use this application"
    },
    {
        "link": "https://github.com/cloudposse/terraform-aws-vpc-peering-multi-account",
        "document": "Terraform module to create a peering connection between any two VPCs existing in different AWS accounts.\n\nThis module supports performing this action from a 3rd account (e.g. a \"root\" account) by specifying the roles to assume for each member account.\n\nIMPORTANT: AWS allows a multi-account VPC Peering Connection to be deleted from either the requester's or accepter's side. However, Terraform only allows the VPC Peering Connection to be deleted from the requester's side by removing the corresponding resource from your configuration. Read more about this on Terraform's documentation portal.\n\nIMPORTANT: Do not pin to because there may be breaking changes between releases. Instead pin to the release tag (e.g. ) of one of our latest releases.\n\nFor a complete example, see examples/complete\n\nThe requester IAM Role should have the following Trust Policy:\n\nand the following IAM Policy attached to it:\n\nNOTE: the policy specifies the permissions to create (with ) and delete (with ) all the required resources in the requester AWS account\n\nwhere is the requester AWS account ID.\n\nThe accepter IAM Role should have the following Trust Policy:\n\nNOTE: The accepter Trust Policy is the same as the requester Trust Policy since it defines who can assume the IAM Role. In the requester case, the requester account ID itself is the trusted entity. For the accepter, the Trust Policy specifies that the requester account ID can assume the role in the accepter AWS account .\n\nand the following IAM Policy attached to it:\n\nNOTE: the policy specifies the permissions to create (with ) and delete (with ) all the required resources in the accepter AWS account\n\nwhere is the accepter AWS account ID.\n\nFor more information on IAM policies and permissions for VPC peering, see Creating and managing VPC peering connections.\n‚Ä¢ terraform-aws-vpc - Terraform Module that defines a VPC with public/private subnets across multiple AZs with Internet Gateways\n‚Ä¢ terraform-aws-vpc-peering - Terraform module to create a peering connection between two VPCs in the same AWS account\n‚Ä¢ terraform-aws-kops-vpc-peering - Terraform module to create a peering connection between a backing services VPC and a VPC created by Kops\n\nFor additional context, refer to some of these links.\n‚Ä¢ What is VPC Peering? - VPC peering connection is a networking connection between two VPCs that enables you to route traffic between them using private IPv4 addresses or IPv6 addresses.\n\nThis project is under active development, and we encourage contributions from our community.\n\nMany thanks to our outstanding contributors:\n\nFor üêõ bug reports & feature requests, please use the issue tracker.\n\nIn general, PRs are welcome. We follow the typical \"fork-and-pull\" Git workflow.\n‚Ä¢ Review our Code of Conduct and Contributor Guidelines.\n‚Ä¢ Clone the project to your own machine\n‚Ä¢ Commit changes to your own branch\n‚Ä¢ Push your work back up to your fork\n‚Ä¢ Submit a Pull Request so that we can review your changes\n\nNOTE: Be sure to merge the latest changes from \"upstream\" before making a pull request!\n\nJoin our Open Source Community on Slack. It's FREE for everyone! Our \"SweetOps\" community is where you get to talk with others who share a similar vision for how to rollout and manage infrastructure. This is the best place to talk shop, ask questions, solicit feedback, and work together as a community to build totally sweet infrastructure.\n\nSign up for our newsletter and join 3,000+ DevOps engineers, CTOs, and founders who get insider access to the latest DevOps trends, so you can always stay in the know. Dropped straight into your Inbox every week ‚Äî and usually a 5-minute read.\n\nJoin us every Wednesday via Zoom for your weekly dose of insider DevOps trends, AWS news and Terraform insights, all sourced from our SweetOps community, plus a live Q&A that you can‚Äôt find anywhere else. It's FREE for everyone!\n\nAll other trademarks referenced herein are the property of their respective owners."
    },
    {
        "link": "https://registry.terraform.io/modules/cloudposse/vpc-peering-multi-account/aws/latest",
        "document": "Please enable Javascript to use this application"
    },
    {
        "link": "https://github.com/cloudposse/terraform-aws-vpc-peering-multi-account",
        "document": "Terraform module to create a peering connection between any two VPCs existing in different AWS accounts.\n\nThis module supports performing this action from a 3rd account (e.g. a \"root\" account) by specifying the roles to assume for each member account.\n\nIMPORTANT: AWS allows a multi-account VPC Peering Connection to be deleted from either the requester's or accepter's side. However, Terraform only allows the VPC Peering Connection to be deleted from the requester's side by removing the corresponding resource from your configuration. Read more about this on Terraform's documentation portal.\n\nIMPORTANT: Do not pin to because there may be breaking changes between releases. Instead pin to the release tag (e.g. ) of one of our latest releases.\n\nFor a complete example, see examples/complete\n\nThe requester IAM Role should have the following Trust Policy:\n\nand the following IAM Policy attached to it:\n\nNOTE: the policy specifies the permissions to create (with ) and delete (with ) all the required resources in the requester AWS account\n\nwhere is the requester AWS account ID.\n\nThe accepter IAM Role should have the following Trust Policy:\n\nNOTE: The accepter Trust Policy is the same as the requester Trust Policy since it defines who can assume the IAM Role. In the requester case, the requester account ID itself is the trusted entity. For the accepter, the Trust Policy specifies that the requester account ID can assume the role in the accepter AWS account .\n\nand the following IAM Policy attached to it:\n\nNOTE: the policy specifies the permissions to create (with ) and delete (with ) all the required resources in the accepter AWS account\n\nwhere is the accepter AWS account ID.\n\nFor more information on IAM policies and permissions for VPC peering, see Creating and managing VPC peering connections.\n‚Ä¢ terraform-aws-vpc - Terraform Module that defines a VPC with public/private subnets across multiple AZs with Internet Gateways\n‚Ä¢ terraform-aws-vpc-peering - Terraform module to create a peering connection between two VPCs in the same AWS account\n‚Ä¢ terraform-aws-kops-vpc-peering - Terraform module to create a peering connection between a backing services VPC and a VPC created by Kops\n\nFor additional context, refer to some of these links.\n‚Ä¢ What is VPC Peering? - VPC peering connection is a networking connection between two VPCs that enables you to route traffic between them using private IPv4 addresses or IPv6 addresses.\n\nThis project is under active development, and we encourage contributions from our community.\n\nMany thanks to our outstanding contributors:\n\nFor üêõ bug reports & feature requests, please use the issue tracker.\n\nIn general, PRs are welcome. We follow the typical \"fork-and-pull\" Git workflow.\n‚Ä¢ Review our Code of Conduct and Contributor Guidelines.\n‚Ä¢ Clone the project to your own machine\n‚Ä¢ Commit changes to your own branch\n‚Ä¢ Push your work back up to your fork\n‚Ä¢ Submit a Pull Request so that we can review your changes\n\nNOTE: Be sure to merge the latest changes from \"upstream\" before making a pull request!\n\nJoin our Open Source Community on Slack. It's FREE for everyone! Our \"SweetOps\" community is where you get to talk with others who share a similar vision for how to rollout and manage infrastructure. This is the best place to talk shop, ask questions, solicit feedback, and work together as a community to build totally sweet infrastructure.\n\nSign up for our newsletter and join 3,000+ DevOps engineers, CTOs, and founders who get insider access to the latest DevOps trends, so you can always stay in the know. Dropped straight into your Inbox every week ‚Äî and usually a 5-minute read.\n\nJoin us every Wednesday via Zoom for your weekly dose of insider DevOps trends, AWS news and Terraform insights, all sourced from our SweetOps community, plus a live Q&A that you can‚Äôt find anywhere else. It's FREE for everyone!\n\nAll other trademarks referenced herein are the property of their respective owners."
    },
    {
        "link": "https://chandarachea.medium.com/vpc-peering-connetion-with-terraform-c4522a24bf3e",
        "document": "A VPC (Virtual Private Cloud) peering connection is a networking connection between two VPCs that allows traffic between them using private IPv4 addresses or IPv6 addresses. VPC peering connection can be created between own VPCs, or with a VPC in another AWS account.\n\nA VPC peering connection helps to facilitate the transfer of data. Instances in either VPC can communicate with each other as if they are within the same network. For example, if you have more than one AWS account, you can peer the VPCs across those accounts to create a file sharing network. You can also use a VPC peering connection to allow other VPCs to access resources you have in one of your VPCs.\n\nIn this article, I‚Äôm going to talk about how I setup VPC peering connection on AWS by using Terraform.\n\nIn this scenario, we are having 3 VPCs:\n\nWe are going to setup a central VPC (VPC A), and a VPC peering connection between VPC A and VPC B, and between VPC A and VPC C. All VPCs are in the different AWS accounts, and do not have overlapping CIDR blocks.\n\nLet‚Äôs assume that our VPC B is a dev environment VPC and VPC C is a test environment VPC, which we have already created. Each VPC has 3 subnets: public, private and database subnets.\n\nAnd now we want to crate VPC A ,which is the root environment (for shared resources), and create VPC peering connection from the root environment to our dev and test environment VPCs. The root environment that we are going to create has CIDRs 10.50.0.0/16\n\nI use 3 providers here because each VPC resides in different AWS accounts. Terraform commands will be run from root profile (where VPC is located), so it needs assume_role in other profiles to be able to access resources in VPC B and VPC C.\n\nUse aws_caller_identity to get the access to the effective Account ID, User ID, and ARN in which Terraform is authorized.\n\nCreate root VPC by using shared module from AWS\n\nTo have VPC peering connection, normally we need to create a VPC connection from requester side and we need to accept the connection from acceptor side. However, if we are doing this with terraform, terraform will automatically handle the connection on acceptor side, so we don‚Äôt need to accept the request manually."
    },
    {
        "link": "https://github.com/cloudposse/terraform-aws-vpc-peering-multi-account/blob/master/README.yaml",
        "document": "List any related terraform modules that this module may be used with or that this module depends on.\n\nHowever, Terraform only allows the VPC Peering Connection to be deleted from the requester's side by removing the corresponding `aws_vpc_peering_connection` resource from your configuration.\n\n**IMPORTANT:** Do not pin to `master` because there may be breaking changes between releases. Instead pin to the release tag (e.g. `?ref=tags/x.y.z`) of one of our [latest releases](https://github.com/cloudposse/terraform-aws-vpc-peering-multi-account/releases).\n\n__NOTE:__ the policy specifies the permissions to create (with `terraform plan/apply`) and delete (with `terraform destroy`) all the required resources in the requester AWS account\n\n__NOTE__: The accepter Trust Policy is the same as the requester Trust Policy since it defines who can assume the IAM Role.\n\nFor more information on IAM policies and permissions for VPC peering, see [Creating and managing VPC peering connections](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_IAM.html#vpcpeeringiam).\n\n: VPC peering connection is a networking connection between two VPCs that enables you to route traffic between them using private IPv4 addresses or IPv6 addresses."
    },
    {
        "link": "https://docs.gruntwork.io/reference/modules/terraform-aws-vpc/vpc-peering",
        "document": "This Terraform Module creates VPC Peering Connections between VPCs. Normally, VPCs are completely isolated from each other, but sometimes, you want to allow traffic to flow between them, such as allowing DevOps tools running in a Mgmt VPC (see vpc-mgmt) to talk to apps running in a Stage or Prod VPC (see vpc-app). This module can create peering connections and route table entries that make this sort of cross-VPC communication possible.\n\nA VPC or Virtual Private Cloud is a logically isolated section of your AWS cloud. Each VPC defines a virtual network within which you run your AWS resources, as well as rules for what can go in and out of that network. This includes subnets, route tables that tell those subnets how to route inbound and outbound traffic, security groups, access controls lists for the network (NACLs), and any other network components such as VPN connections.\n\nWe intentionally keep VPCs as isolated as we can to reduce the chances that a problem in one VPC will affect the other VPCs. For example, our standard VPC deployment gives you an isolated staging VPC where you can test changes without having to worry that they might affect production. Similarly, if an attacker breaks into the staging VPC, they cannot easily access your production data without breaking through yet another layer of security. These multiple layers are known as \"defense-in-depth.\"\n\nThe point of VPC peering is to allow limited, controlled cross-VPC communication. In particular, you may want to set up peering to allow a user logged into a management VPC to carry out maintenance tasks in the staging and production VPCs. However, VPC peering relationships are not \"transitive\": even though the management VPC can access both staging and production, someone in staging cannot access production."
    }
]