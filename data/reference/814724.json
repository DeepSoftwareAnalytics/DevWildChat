[
    {
        "link": "https://geeksforgeeks.org/lambda-expressions-java-8",
        "document": "Lambda expressions in Java, introduced in Java SE 8, represent instances of functional interfaces (interfaces with a single abstract method). They provide a concise way to express instances of single-method interfaces using a block of code.\n\nLambda Expressions implement the only abstract function and therefore implement functional interfaces lambda expressions are added in Java 8 and provide the below functionalities.\n• Functional Interfaces is an interface that contains only one abstract method.\n• Pass and Execute : Pass lambda expressions as objects and execute on demand.\n\nExample: Here, the below Java program demonstrates how lambda expression can be used to implement a user-defined functional interface.\n\nBelow diagram demonstrates the structure of Lambda Expression\n\nJava Lambda Expression has the following syntax:\n• Arrow Token (->): Separates the parameter list and the body\n\nThere are three Lambda Expression Parameters are mentioned below:\n\nExample: Here, the below Java program demonstrates a Lambda expression with zero parameter.\n\nIt is not mandatory to use parentheses if the type of that variable can be inferred from the context\n\nExample: Here, the below Java program demonstrates the use of lambda expression in two different scenarios with an ArrayList.\n• None We are using lambda expression to iterate through and print all elements of an ArrayList.\n• None We are using lambda expression with a condition to selectively print even number of elements from an ArrayList.\n\nNote: Lambda expressions can only be used to implement functional interfaces. In the above example also, the lambda expression implements Consumer Functional Interface.\n\nExample: Here, the below Java program demonstrates the use of lambda expression to implement functional interface to perform basic arithmetic operations.\n\nThese are commonly used in sorting and comparisons.\n\nIs it good to use lambda expressions in Java?\n\nWhat are the drawbacks of Java lambda?\n\nBased on the syntax rules just shown, which of the following is/are NOT valid lambda expressions?"
    },
    {
        "link": "https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html",
        "document": "The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't take advantage of improvements introduced in later releases and might use technology no longer available. See Dev.java for updated tutorials taking advantage of the latest releases. See Java Language Changes for a summary of updated language features in Java SE 9 and subsequent releases. See JDK Release Notes for information about new features, enhancements, and removed or deprecated options for all JDK releases.\n\nOne issue with anonymous classes is that if the implementation of your anonymous class is very simple, such as an interface that contains only one method, then the syntax of anonymous classes may seem unwieldy and unclear. In these cases, you're usually trying to pass functionality as an argument to another method, such as what action should be taken when someone clicks a button. Lambda expressions enable you to do this, to treat functionality as method argument, or code as data.\n\nThe previous section, Anonymous Classes, shows you how to implement a base class without giving it a name. Although this is often more concise than a named class, for classes with only one method, even an anonymous class seems a bit excessive and cumbersome. Lambda expressions let you express instances of single-method classes more compactly.\n\nThis section covers the following topics:\n• Ideal Use Case for Lambda Expressions\n• Approach 1: Create Methods That Search for Members That Match One Characteristic\n• Approach 4: Specify Search Criteria Code in an Anonymous Class\n• Approach 7: Use Lambda Expressions Throughout Your Application\n• Approach 9: Use Aggregate Operations That Accept Lambda Expressions as Parameters\n\nSuppose that you are creating a social networking application. You want to create a feature that enables an administrator to perform any kind of action, such as sending a message, on members of the social networking application that satisfy certain criteria. The following table describes this use case in detail:\n\nSuppose that members of this social networking application are represented by the following class:\n\nSuppose that the members of your social networking application are stored in a instance.\n\nThis section begins with a naive approach to this use case. It improves upon this approach with local and anonymous classes, and then finishes with an efficient and concise approach using lambda expressions. Find the code excerpts described in this section in the example .\n\nApproach 1: Create Methods That Search for Members That Match One Characteristic\n\nOne simplistic approach is to create several methods; each method searches for members that match one characteristic, such as gender or age. The following method prints members that are older than a specified age:\n\nNote: A is an ordered . A collection is an object that groups multiple elements into a single unit. Collections are used to store, retrieve, manipulate, and communicate aggregate data. For more information about collections, see the Collections trail.\n\nThis approach can potentially make your application brittle, which is the likelihood of an application not working because of the introduction of updates (such as newer data types). Suppose that you upgrade your application and change the structure of the class such that it contains different member variables; perhaps the class records and measures ages with a different data type or algorithm. You would have to rewrite a lot of your API to accommodate this change. In addition, this approach is unnecessarily restrictive; what if you wanted to print members younger than a certain age, for example?\n\nThe following method is more generic than ; it prints members within a specified range of ages:\n\nWhat if you want to print members of a specified sex, or a combination of a specified gender and age range? What if you decide to change the class and add other attributes such as relationship status or geographical location? Although this method is more generic than , trying to create a separate method for each possible search query can still lead to brittle code. You can instead separate the code that specifies the criteria for which you want to search in a different class.\n\nThe following method prints members that match search criteria that you specify:\n\nThis method checks each instance contained in the parameter whether it satisfies the search criteria specified in the parameter by invoking the method . If the method returns a value, then the method is invoked on the instance.\n\nTo specify the search criteria, you implement the interface:\n\nThe following class implements the interface by specifying an implementation for the method . This method filters members that are eligible for Selective Service in the United States: it returns a value if its parameter is male and between the ages of 18 and 25:\n\nTo use this class, you create a new instance of it and invoke the method:\n\nAlthough this approach is less brittle—you don't have to rewrite methods if you change the structure of the —you still have additional code: a new interface and a local class for each search you plan to perform in your application. Because implements an interface, you can use an anonymous class instead of a local class and bypass the need to declare a new class for each search.\n\nApproach 4: Specify Search Criteria Code in an Anonymous Class\n\nOne of the arguments of the following invocation of the method is an anonymous class that filters members that are eligible for Selective Service in the United States: those who are male and between the ages of 18 and 25:\n\nThis approach reduces the amount of code required because you don't have to create a new class for each search that you want to perform. However, the syntax of anonymous classes is bulky considering that the interface contains only one method. In this case, you can use a lambda expression instead of an anonymous class, as described in the next section.\n\nThe interface is a functional interface. A functional interface is any interface that contains only one abstract method. (A functional interface may contain one or more default methods or static methods.) Because a functional interface contains only one abstract method, you can omit the name of that method when you implement it. To do this, instead of using an anonymous class expression, you use a lambda expression, which is highlighted in the following method invocation:\n\nSee Syntax of Lambda Expressions for information about how to define lambda expressions.\n\nYou can use a standard functional interface in place of the interface , which reduces even further the amount of code required.\n\nThis is a very simple interface. It's a functional interface because it contains only one abstract method. This method takes one parameter and returns a value. The method is so simple that it might not be worth it to define one in your application. Consequently, the JDK defines several standard functional interfaces, which you can find in the package .\n\nFor example, you can use the interface in place of . This interface contains the method :\n\nThe interface is an example of a generic interface. (For more information about generics, see the Generics (Updated) lesson.) Generic types (such as generic interfaces) specify one or more type parameters within angle brackets ( ). This interface contains only one type parameter, . When you declare or instantiate a generic type with actual type arguments, you have a parameterized type. For example, the parameterized type is the following:\n\nThis parameterized type contains a method that has the same return type and parameters as . Consequently, you can use in place of as the following method demonstrates:\n\nAs a result, the following method invocation is the same as when you invoked in Approach 3: Specify Search Criteria Code in a Local Class to obtain members who are eligible for Selective Service:\n\nThis is not the only possible place in this method to use a lambda expression. The following approach suggests other ways to use lambda expressions.\n\nApproach 7: Use Lambda Expressions Throughout Your Application\n\nReconsider the method to see where else you could use lambda expressions:\n\nThis method checks each instance contained in the parameter whether it satisfies the criteria specified in the parameter . If the instance does satisfy the criteria specified by , the method is invoked on the instance.\n\nInstead of invoking the method , you can specify a different action to perform on those instances that satisfy the criteria specified by . You can specify this action with a lambda expression. Suppose you want a lambda expression similar to , one that takes one argument (an object of type ) and returns void. Remember, to use a lambda expression, you need to implement a functional interface. In this case, you need a functional interface that contains an abstract method that can take one argument of type and returns void. The interface contains the method , which has these characteristics. The following method replaces the invocation with an instance of that invokes the method :\n\nAs a result, the following method invocation is the same as when you invoked in Approach 3: Specify Search Criteria Code in a Local Class to obtain members who are eligible for Selective Service. The lambda expression used to print members is highlighted:\n\nWhat if you want to do more with your members' profiles than printing them out. Suppose that you want to validate the members' profiles or retrieve their contact information? In this case, you need a functional interface that contains an abstract method that returns a value. The interface contains the method . The following method retrieves the data specified by the parameter , and then performs an action on it specified by the parameter :\n\nThe following method retrieves the email address from each member contained in who is eligible for Selective Service and then prints it:\n\nReconsider the method . The following is a generic version of it that accepts, as a parameter, a collection that contains elements of any data type:\n\nTo print the e-mail address of members who are eligible for Selective Service, invoke the method as follows:\n\nThis method invocation performs the following actions:\n• Obtains a source of objects from the collection . In this example, it obtains a source of objects from the collection . Notice that the collection , which is a collection of type , is also an object of type .\n• Filters objects that match the object . In this example, the object is a lambda expression that specifies which members would be eligible for Selective Service.\n• Maps each filtered object to a value as specified by the object . In this example, the object is a lambda expression that returns the e-mail address of a member.\n• Performs an action on each mapped object as specified by the object . In this example, the object is a lambda expression that prints a string, which is the e-mail address returned by the object.\n\nYou can replace each of these actions with an aggregate operation.\n\nApproach 9: Use Aggregate Operations That Accept Lambda Expressions as Parameters\n\nThe following example uses aggregate operations to print the e-mail addresses of those members contained in the collection who are eligible for Selective Service:\n\nThe following table maps each of the operations the method performs with the corresponding aggregate operation:\n\nThe operations , , and are aggregate operations. Aggregate operations process elements from a stream, not directly from a collection (which is the reason why the first method invoked in this example is ). A stream is a sequence of elements. Unlike a collection, it is not a data structure that stores elements. Instead, a stream carries values from a source, such as collection, through a pipeline. A pipeline is a sequence of stream operations, which in this example is - - . In addition, aggregate operations typically accept lambda expressions as parameters, enabling you to customize how they behave.\n\nFor a more thorough discussion of aggregate operations, see the Aggregate Operations lesson.\n\nTo process events in a graphical user interface (GUI) application, such as keyboard actions, mouse actions, and scroll actions, you typically create event handlers, which usually involves implementing a particular interface. Often, event handler interfaces are functional interfaces; they tend to have only one method.\n\nIn the JavaFX example (discussed in the previous section Anonymous Classes), you can replace the highlighted anonymous class with a lambda expression in this statement:\n\nThe method invocation specifies what happens when you select the button represented by the object. This method requires an object of type . The interface contains only one method, . This interface is a functional interface, so you could use the following highlighted lambda expression to replace it:\n\nA lambda expression consists of the following:\n• None A comma-separated list of formal parameters enclosed in parentheses. The method contains one parameter, , which represents an instance of the class. Note: You can omit the data type of the parameters in a lambda expression. In addition, you can omit the parentheses if there is only one parameter. For example, the following lambda expression is also valid:\n• None A body, which consists of a single expression or a statement block. This example uses the following expression: If you specify a single expression, then the Java runtime evaluates the expression and then returns its value. Alternatively, you can use a return statement: A return statement is not an expression; in a lambda expression, you must enclose statements in braces ( ). However, you do not have to enclose a void method invocation in braces. For example, the following is a valid lambda expression:\n\nNote that a lambda expression looks a lot like a method declaration; you can consider lambda expressions as anonymous methods—methods without a name.\n\nThe following example, , is an example of lambda expressions that take more than one formal parameter:\n\nThe method performs a mathematical operation on two integer operands. The operation itself is specified by an instance of . The example defines two operations with lambda expressions, and . The example prints the following:\n\nLike local and anonymous classes, lambda expressions can capture variables; they have the same access to local variables of the enclosing scope. However, unlike local and anonymous classes, lambda expressions do not have any shadowing issues (see Shadowing for more information). Lambda expressions are lexically scoped. This means that they do not inherit any names from a supertype or introduce a new level of scoping. Declarations in a lambda expression are interpreted just as they are in the enclosing environment. The following example, , demonstrates this:\n\nThis example generates the following output:\n\nIf you substitute the parameter in place of in the declaration of the lambda expression , then the compiler generates an error:\n\nThe compiler generates the error \"Lambda expression's parameter x cannot redeclare another local variable defined in an enclosing scope\" because the lambda expression does not introduce a new level of scoping. Consequently, you can directly access fields, methods, and local variables of the enclosing scope. For example, the lambda expression directly accesses the parameter of the method . To access variables in the enclosing class, use the keyword . In this example, refers to the member variable .\n\nHowever, like local and anonymous classes, a lambda expression can only access local variables and parameters of the enclosing block that are final or effectively final. In this example, the variable is effectively final; its value is never changed after it's initialized. However, suppose that you add the following assignment statement in the the lambda expression :\n\nBecause of this assignment statement, the variable is not effectively final anymore. As a result, the Java compiler generates an error message similar to \"Local variable z defined in an enclosing scope must be final or effectively final\".\n\nHow do you determine the type of a lambda expression? Recall the lambda expression that selected members who are male and between the ages 18 and 25 years:\n\nThis lambda expression was used in the following two methods:\n• None in Approach 3: Specify Search Criteria Code in a Local Class\n• None in Approach 6: Use Standard Functional Interfaces with Lambda Expressions\n\nWhen the Java runtime invokes the method , it's expecting a data type of , so the lambda expression is of this type. However, when the Java runtime invokes the method , it's expecting a data type of , so the lambda expression is of this type. The data type that these methods expect is called the target type. To determine the type of a lambda expression, the Java compiler uses the target type of the context or situation in which the lambda expression was found. It follows that you can only use lambda expressions in situations in which the Java compiler can determine a target type:\n\nFor method arguments, the Java compiler determines the target type with two other language features: overload resolution and type argument inference.\n\nConsider the following two functional interfaces ( and ):\n\nThe method does not return a value, whereas does.\n\nSuppose that you have overloaded the method as follows (see Defining Methods for more information about overloading methods):\n\nWhich method will be invoked in the following statement?\n\nThe method will be invoked because that method returns a value; the method does not. In this case, the type of the lambda expression is .\n\nYou can serialize a lambda expression if its target type and its captured arguments are serializable. However, like inner classes, the serialization of lambda expressions is strongly discouraged."
    },
    {
        "link": "https://w3schools.com/java/java_lambda.asp",
        "document": "A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.\n\nThe simplest lambda expression contains a single parameter and an expression:\n\nTo use more than one parameter, wrap them in parentheses:\n\nExpressions are limited. They have to immediately return a value, and they cannot contain variables, assignments or statements such as or . In order to do more complex operations, a code block can be used with curly braces. If the lambda expression needs to return a value, then the code block should have a statement.\n\nLambda expressions are usually passed as parameters to a function:\n\nLambda expressions can be stored in variables if the variable's type is an interface which has only one method. The lambda expression should have the same number of parameters and the same return type as that method. Java has many of these kinds of interfaces built in, such as the interface (found in the package) used by lists.\n\nTo use a lambda expression in a method, the method should have a parameter with a single-method interface as its type. Calling the interface's method will run the lambda expression:"
    },
    {
        "link": "https://abu-talha.medium.com/lambda-expressions-in-java-a-concise-guide-with-examples-47c7ade952fb",
        "document": "Lambda expressions were introduced in Java 8, revolutionizing the way developers write code by providing a more concise and expressive way to define anonymous functions. Lambda expressions simplify the use of functional interfaces and enable developers to write cleaner, more readable code. In this article, we’ll explore what lambda expressions are, how to use them, and provide practical examples.\n\nA lambda expression is a concise way to represent an anonymous function (a function without a name) in Java. It allows you to define a method implementation directly inline with your code, making it easier to work with functional interfaces (interfaces with a single abstract method) like , , and many others.\n• Parameter List: The list of input parameters enclosed in parentheses. For a method with no parameters, you can use empty parentheses: .\n• Arrow Operator ( ): Separates the parameter list from the body of the lambda expression.\n• Body: The implementation of the lambda expression, which can be a single expression or a block of code enclosed in curly braces.\n\nThe basic syntax of a lambda expression is as follows:\n\nLet’s explore some practical examples to understand how to use lambda expressions in Java.\n\nExample 1: Using Lambda with\n\nIn this example, we create a using both the traditional anonymous inner class and a lambda expression. The lambda expression makes the code more concise.\n\nHere, we sort a list of names using both an anonymous comparator and a lambda expression. The lambda expression simplifies the comparator’s definition.\n\nExample 3: Using Lambda with Streams\n\nIn this example, we use lambda expressions with Java Streams to filter and print even numbers from a list. The lambda expressions within and make the code more readable.\n\nLambda expressions in Java provide a powerful and concise way to work with functional interfaces and write cleaner, more expressive code. They have become an integral part of modern Java programming and are extensively used in various contexts, from simple tasks like sorting to more complex scenarios like stream processing. Learning to use lambda expressions effectively can significantly improve your Java programming skills and code quality.\n\nFor more updates like & follow!"
    },
    {
        "link": "https://oracle.com/technical-resources/articles/java/architect-lambdas-part1.html",
        "document": ""
    },
    {
        "link": "https://obsproject.com/forum/threads/plugin-streaming.81860",
        "document": "You can call:to start and stop streaming from a C or C++ plugin. There are similar calls for recording. These are in the frontend api along with a bunch of other useful stuff.There are probably also similar things for scripting but I've not dabbled with that so others will be more informed."
    },
    {
        "link": "https://obsproject.com/forum/tags/java",
        "document": "\n• So when I try to add a WIndow Capture for the java program, the title of the program can't be detected (it shows (null)), and the capture displayed is a black blank. I'm sure the program is running properly. Is there any way I can fix this issue? thx:) log file URL...\n• How you can join the OBS WebSocket in Nodemcu, just as a scene becomes active or does not lead to any node. make a registration led, show an active scene or not at the time of transmission\n• Hey so I want to record a video using OBS (24.0.3) of Minecraft but whenever I try to record it crashes Minecraft. Minecraft version is 1.12.2 Computer Specs: Core: i5 2430M (2.40 GHz) GPU: AMD Radeon 6630 M RAM: 8 Gigabytes...\n• want to use OBS api in spring boot(java) appliaction Hello Friends, I am new to this platform, I want to integrate OBS live streaming api in spring boot java application. So I want to know, does OBS provide api for live streaming to integrate spring boot application.Can anyone provide...\n• I am looking for a way to add to the following that ON PAGE LOAD the script in HTML file runs and simulates a left mouse click to bypass need for interact every single time.. I have the following but not able to add the necessary code.. <!DOCTYPE html> <html> <head> <script..."
    },
    {
        "link": "https://sdk-gaming.co.uk/iracing-live-streamer-app-user-manual",
        "document": "So now that you have a default overlay displaying in OBS we can decide what Components of the overlay we choose to Hide or Show. In iRacing Live Timing press F4 or click the up arrow at the bottom of the screen and depending on which project file you have loaded you will see a layout of buttons appear. We will use the Live Streamer default project file in our example.\n\nBy hovering your mouse over a Component or a button within a Component, a tooltip will display with a brief description of what it does. You can also click on the question mark in the corner of each Component to open the website support page for that Component!\n\nMost of the buttons displayed allow for a simple Show or Hide option for a particular component. For example if I select Hide under the label Logo you will see the default SDK Gaming logo in the top right of your overlay in OBS disappear! Some of the components have buttons for tuning what type of information is displayed. For example the Timing Tower can be set to display a variety of different information, much of it simultaneously if you wish and present it in different ways (for instance during multi class racing)!\n\nYou now have setup a basic overlay that allows you to Show and Hide different components to present the information you want to your viewers!! However iRacing Live Timing allows almost infinite amounts of customisation to your overlay to create a personal and unique overlay with many advanced features! Head over to Overlay Component List, Remote Control Tab and Editing CSS Styles for more information on beginning this customisation and remember to jump in our Discord support channel for any other questions!"
    },
    {
        "link": "https://stackoverflow.com/questions/28988491/how-to-cast-objects-with-different-classes-in-a-java-8-stream",
        "document": "I'm using an 3rd party library where there are two very similar classes that don't implement an interface. The code currently loops through a list of items to find the first occurrence of an object using one of these classes and then converts it to a stream where it is processed. It would be nice if I could convert this code to use a stream and have it chained to the rest of my code.\n\nIs it possible cast the entry based on the previous filter in the stream?"
    },
    {
        "link": "https://reddit.com/r/devops/comments/1ex4dl6/software_suggestion_for_taking_screenshot_eg_obs",
        "document": "Im trying to make an springboot app that has this feature of taking screenshot of the whole screen. I used OBS studio's websocket server tool for this purpose but its difficult to handle (Constantly showing connecting and disconnecting).\n\nCan you guys suggest some other kind of method that is easy to use?"
    }
]