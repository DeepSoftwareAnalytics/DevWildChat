[
    {
        "link": "https://geeksforgeeks.org/arrays-in-java",
        "document": "Arrays are fundamental structures in Java that allow us to store multiple values of the same type in a single variable. They are useful for storing and managing collections of data. Arrays in Java are objects, which makes them work differently from arrays in C/C++ in terms of memory management.\n\nFor primitive arrays, elements are stored in a contiguous memory location. For non-primitive arrays, references are stored at contiguous locations, but the actual objects may be at different locations in memory.\n\nThere are some basic operations we can start with as mentioned below:\n\nTo declare an array in Java, use the following syntax:\n• type : The data type of the array elements (e.g.,\n• arrayName : The name of the array.\n\nNote: The array is not yet initialized.\n\nTo create an array, you need to allocate memory for it using the keyword:\n\nThis statement initializes the array to hold 5 integers. The default value for each element is .\n\n3. Access an Element of an Array\n\nWe can access array elements using their index, which starts from :\n\nThe first line sets the value of the first element to . The second line retrieves the value of the first element.\n\nTo change an element, assign a new value to a specific index:\n\nWe can get the length of an array using the property:\n\nNow, we have completed with basic operations so let us go through the in-depth concepts of Java Arrays, through the diagrams, examples, and explanations.\n\nFollowing are some important points about Java arrays.\n• None In Java, all arrays are dynamically allocated\n• None Arrays may be stored in contiguous memory\n• None Since arrays are objects in Java, we can find their length using the object property length . This is different from C/C++, where we find length using size of.\n• None A Java array variable can also be declared like other variables with [] after the data type.\n• None The variables in the array are ordered, and each has an index beginning with 0.\n• None Java array can also be used as a static field, a local variable, or a method parameter.\n\nAn array can contain primitives (int, char, etc.) and object (or non-primitive) references of a class, depending on the definition of the array. In the case of primitive data types, the actual values might be stored in contiguous memory locations (JVM does not guarantee this behavior). In the case of class objects, the actual objects are stored in a heap segment.\n\nFor understanding the array we need to understand how it actually works. To understand this follow the flow mentioned below:\n\nThe general form of array declaration is\n\nThe element type determines the data type of each element that comprises the array. Like an array of integers, we can also create an array of other primitive data types like char, float, double, etc., or user-defined data types (objects of a class).\n\nNote: It is just how we can create is an array variable, no actual array exists. It merely tells the compiler that this variable (int Array) will hold an array of the integer type.\n\nNow, Let us provide memory storage to this created array.\n\nWhen an array is declared, only a reference of an array is created. The general form of new as it applies to one-dimensional arrays appears as follows:\n\nHere, type specifies the type of data being allocated, size determines the number of elements in the array, and var-name is the name of the array variable that is linked to the array. To use new to allocate an array, you must specify the type and number of elements to allocate.\n\nNote: The elements in the array allocated by new will automatically be initialized to zero (for numeric types), false (for boolean), or null (for reference types). Do refer to default array values in Java.\n\nObtaining an array is a two-step process. First, you must declare a variable of the desired array type. Second, you must allocate the memory to hold the array, using new, and assign it to the array variable. Thus, in Java, all arrays are dynamically allocated.\n\nIn a situation where the size of the array and variables of the array are already known, array literals can be used.\n• None The length of this array determines the length of the created array.\n• None There is no need to write the new int[] part in the latest versions of Java.\n\nNow , we have created an Array with or without the values stored in it. Access becomes an important part to operate over the values mentioned within the array indexes using the points mentioned below:\n• None Each element in the array is accessed via its index.\n• None The index begins with 0 and ends at (total array size)-1.\n• None All the elements of array can be accessed using Java for Loop.\n\nLet us check the syntax of basic for loop to traverse an array:\n\nThese are the most common type of arrays, where elements are stored in a linear order.\n\nArrays with more than one dimension, such as two-dimensional arrays (matrices).\n\nYou can also access java arrays using for each loops.\n\nAn array of objects is created like an array of primitive-type data items in the following way.\n\nExample of Arrays of Objects\n\nExample 1: Here we are taking a student class and creating an array of Student with five Student objects stored in the array. The Student objects have to be instantiated using the constructor of the Student class, and their references should be assigned to the array elements.\n\n\n\nExample 2: An array of objects is also created like\n\nWhat happens if we try to access elements outside the array size?\n\nJVM throws ArrayIndexOutOfBoundsException to indicate that the array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of an array.\n\nBelow code shows what happens if we try to access elements outside the array size:\n\nMultidimensional arrays are arrays of arrays with each element of the array holding the reference of other arrays. These are also known as Jagged Arrays. A multidimensional array is created by appending one set of square brackets ([]) per dimension.\n\nThere are 2 methods to declare Java Multidimensional Arrays as mentioned below:\n\nExample 1: Let us start with basic two dimensional Array declared and initialized.\n\nExample 2: Now, after declaring and initializing the array we will check how to Traverse the Multidimensional Array using for loop.\n\nLike variables, we can also pass arrays to methods. For example, the below program passes the array to method sum to calculate the sum of the array’s values.\n\nAs usual, a method can also return an array. For example, the below program returns an array from method m1.\n\nNow, as you know that arrays are objects of a class, and a direct superclass of arrays is a class Object.\n\nThe members of an array type are all of the following:\n• length contains the number of components of the array. Length may be positive or zero.\n• None All the members are inherited from class Object; the only method of Object that is not inherited is its\n• clone() overrides the clone method in class Object and throws no\n\nWhen you clone a single-dimensional array, such as , a shallow copy is performed. This means that the new array contains references to the original array’s elements rather than copies of the objects themselves. A deep copy occurs only with arrays containing primitive data types, where the actual values are copied.\n\nBelow is the implementation of the above method:\n\nA clone of a multi-dimensional array (like Object[][]) is a “shallow copy,” however, which is to say that it creates only a single new array with each element array a reference to an original element array, but subarrays are shared.\n\nBelow is the implementation of the above method:\n• Efficient Access : Accessing an element by its index is fast and has constant time complexity, O(1).\n• Memory Management : Arrays have fixed size, which makes memory management straightforward and predictable.\n• Data Organization : Arrays help organize data in a structured manner, making it easier to manage related elements.\n• Fixed Size : Once an array is created, its size cannot be changed, which can lead to memory waste if the size is overestimated or insufficient storage if underestimated.\n• Type Homogeneity : Arrays can only store elements of the same data type, which may require additional handling for mixed types of data.\n• Insertion and Deletion : Inserting or deleting elements, especially in the middle of an array, can be costly as it may require shifting elements.\n\nHow can we initialize an array in Java?\n\nCan we use an array of primitive types in Java?\n\nHow are multidimensional arrays represented in Java?\n\nCan we change the size of an array after it is created in Java?\n\nCan we specify the size of an array as\n\nWhat is the direct superclass of an array in Java?\n\nWhich interfaces are implemented by arrays in Java?"
    },
    {
        "link": "https://hostman.com/tutorials/how-to-create-an-array-in-java",
        "document": "In Java programming, arrays, as a fundamental data structure, provide efficient storage and manipulation of multiple values. Due to their advantages in managing big data, they are commonly used in various programming tasks. Without arrays, separate variables for each value would have to be declared, which is time-consuming and prone to errors.\n\nThe arrays can be resized to meet various programming requirements. The dynamic of arrays is a solution when the number of elements is unknown or may change. It is essential to master techniques such as looping through the array to perform specific tasks on each item, or using built-in functions to sort or search for specific values within the array.\n\nWe'll delve into the concept of arrays in Java, starting with the fundamentals of their structure and how to create an array in Java. We'll cover the different types of arrays and their initialization methods. You will gain a thorough comprehension of arrays in Java, empowering you to confidently incorporate them into your programming endeavors.\n\nThe syntax of array creation in Java\n\nTo confidently deal with arrays in Java, it is necessary to understand the syntax of array creation. To create an array, use the keyword, followed by the data type of the elements and the number of elements enclosed in square brackets.\n\nTo create an array of integers with ten elements, use the syntax:\n\nThis tells the Java compiler to allocate memory for an array of 10 integers and assign it to the variable .\n\nThe indicated data type in an array declaration determines the type of data to store within the array. Both data types should match. An integer array cannot store strings or floating point numbers. Mixing different data types within an array results in errors and unpredictable outcomes.\n\nFor an array creation in Java, indicate its size or the number of elements it will contain. Once an array is created, its size is fixed and cannot be changed by adding or removing items. It is important to determine the appropriate size of the array before creating it.\n\nTo access an element at an index that is outside the array's size, get an to eliminate the program crash.\n\nThe memory usage of an array depends on its size. The bigger the array, the greater amount of memory it will require. When declaring an array, it is crucial to take into account its size, especially when dealing with big data. Remember that the size of an array is a positive integer value.\n\nHow to create an array in Java\n\nTo create a simple array in Java, declare the array, indicate its data type, and initialize it with values.\n\nTo create an array for storing weekly temperatures, declare it as follows:\n\nNext, indicate the size of the array, which determines the number of elements it contains. To store the temperatures for seven days, initialize the array in Java with a size of seven as follows:\n\nNow, assign values to each element in the array using a for loop to iterate through the array and assign a value to each element.\n\nThis can be achieved as follows:\n\nIn this case, a temperature value is assigned to each element, starting from 1 for day 1 and increasing by 1 for every next day. Once all the values ​​are assigned, the array will look like this:\n\nAccess each element of the array through its index, starting from 0. So, the first element of the array has index 0, the second element has index 1, and so on.\n\nTo print the temperature for day 7, access the element at index 6 as follows:\n\nArrays are used to store different data types, such as strings, doubles, and booleans.\n\nTo create an array for storing the names of months, declare and initialize it as follows:\n\nArrays deal with large datasets and perform tasks on them. To find the average month temperature, use a for loop to iterate through the array and sum all temperatures, divided by the number of items in the array.\n\nThis can be achieved as follows:\n\nHow to declare and initialize an array in Java\n\nTo work correctly, you should learn how to declare an array in Java. Start by specifying any primitive data type of the elements it will contain, such as , , , or .\n\nTo create an array of integers, use the syntax:\n\nA variable named of type may contain multiple integer values.\n\nNext, you should know how to initialize an array in Java. To do this, specify an array size in square brackets after the data type indicating the number of elements the array contains.\n\nTo store 10 integers within the array, write:\n\nA new array object with a length of 10 is assigned to the variable .\n\nTo assign values, use the assignment operator ( ) and enclose the values in curly braces, separated by commas.\n\nTo assign values 1, 2, 3, 4, and 5 to an array, use the following code:\n\nAlternatively, you can assign values to the array in a separate statement:\n\nThere are also other methods to initialize arrays in Java. The first one is by using the method from the class to fill an array with a specific value or a range of values.\n\nThis initializes the array with 5 elements, all assigned the value of 1.\n\nJava also provides the method for initializing arrays to copy an existing array and specify the desired length of the new array.\n\nIt creates a new array named with 3 elements, copying the first three elements from the array.\n\nTo access elements of the array, use the index number enclosed in square brackets. In Java, arrays are zero-based with the first element of the array being at index 0, the second element at index 1, and so on.\n\nTo access the first element of our array, use the following code:\n\nTo access the second element, use the following code:\n\nUse a for loop to iterate through all the elements of an array and interact with them. The for loop takes the size of the array as a condition and uses the index variable to access each element of the array, as shown below:\n\nTo see the values stored in an array, use the method to print them to the console. Print each element individually or use a loop to print all the elements, as shown below:\n\nUse a loop to print all the elements at once:\n\nOne-dimensional arrays store and organize a collection of elements of the same data type. They consist of a fixed number of elements of the same data type, such as integers, strings, or characters. The array elements are indexed, starting from 0, allowing each element to be accessed at its appropriate index.\n\nTo declare an array, use the square brackets notation after the data type. To declare an array of integers, write int[], followed by the name of the array and an equal sign to assign values to the array.\n\nTo initialize an array, use the keyword , followed by the data type and the number of elements in the array.\n\nThis code will create an array named with 5 elements of type integer.\n\nMulti-dimensional arrays store and manipulate data in a table or spreadsheet format. Unlike traditional one-dimensional arrays, which are limited to a single row or column of data, these ones appear as a grid or matrix with rows and columns.\n\nTo create a multi-dimensional array in Java, use square brackets to indicate the dimensions of the array. To create a 2D array with 3 rows and 4 columns, use the following syntax:\n\nTo access and modify elements in the array, use row and column indices, such as arr[0][0] to access the first element in the first row.\n\nThe use of array literals and anonymous arrays in Java\n\nTypically, arrays are declared with a fixed size and are initialized with specific values ​​at declaration time. The introduction of array literals and anonymous arrays led to better versatility and ease of manipulation. Array literals stand for creating arrays without explicitly declaring and initializing them. Instead of writing multiple code lines to declare and assign values to an array, use a single code line with the curly braces.\n\nFor instance, instead of writing this:\n\nThis makes the code easier to read and understand.\n\nArray literals allow you to create multi-dimensional arrays. While previously creating them required nested square brackets, now with array literals you can use a comma-separated list of arrays within curly braces.\n\nwill create a 2D array with 3 rows and 2 columns.\n\nThis shortens the code when working with large arrays.\n\nJava supports anonymous arrays created without a variable name for one-time use. To sort an array of integers, use them as the argument for the sorting method rather than declaring or initializing a named array.\n\nAnonymous arrays are used in cases where the size of the array is unknown by omitting it in the declaration and using curly braces.\n\nCan be rewritten as this, using an anonymous array:\n\nArrays play a crucial role in Java programming as they serve as a fundamental data structure for organizing and modifying a set of elements with the same data type. Proficiency in the proper syntax for creating, declaring and initializing arrays is essential, as it forms the foundation for commonly used algorithms and data structures. With a solid understanding of the core concepts, you can efficiently utilize arrays in your code and effectively manipulate data. And in case you missed it, servers can be started on Hostman for only $4 per month."
    },
    {
        "link": "https://stackoverflow.com/questions/1200621/how-do-i-declare-and-initialize-an-array-in-java",
        "document": "How do I declare and initialize an array in Java?\n\nYou can either use array declaration or array literal (but only when you declare and affect the variable right away, array literals cannot be used for re-assigning an array). int[] myIntArray = new int[3]; // each element of the array is initialised to 0 int[] myIntArray = {1, 2, 3}; int[] myIntArray = new int[]{1, 2, 3}; // Since Java 8. Doc of IntStream: https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html int [] myIntArray = IntStream.range(0, 100).toArray(); // From 0 to 99 int [] myIntArray = IntStream.rangeClosed(0, 100).toArray(); // From 0 to 100 int [] myIntArray = IntStream.of(12,25,36,85,28,96,47).toArray(); // The order is preserved. int [] myIntArray = IntStream.of(12,25,36,85,28,96,47).sorted().toArray(); // Sort For classes, for example , it's the same: String[] myStringArray = new String[3]; // each element is initialised to null String[] myStringArray = {\"a\", \"b\", \"c\"}; String[] myStringArray = new String[]{\"a\", \"b\", \"c\"}; The third way of initializing is useful when you declare an array first and then initialize it, pass an array as a function argument, or return an array. The explicit type is required.\n\nI find it is helpful if you understand each part: is the type of the variable called name (\"name\" is called the identifier). The literal \"Type\" is the base type, and the brackets mean this is the array type of that base. Array types are in turn types of their own, which allows you to make multidimensional arrays like (the array type of Type[]). The keyword says to allocate memory for the new array. The number between the bracket says how large the new array will be and how much memory to allocate. For instance, if Java knows that the base type takes 32 bytes, and you want an array of size 5, it needs to internally allocate 32 * 5 = 160 bytes. You can also create arrays with the values already there, such as which not only creates the empty space but fills it with those values. Java can tell that the primitives are integers and that there are 5 of them, so the size of the array can be determined implicitly.\n\nThe following shows the declaration of an array, but the array is not initialized: The following shows the declaration as well as initialization of the array: Now, the following also shows the declaration as well as initialization of the array: But this third one shows the property of anonymous array-object creation which is pointed by a reference variable \"myIntArray\", so if we write just \"new int[]{1,2,3};\" then this is how anonymous array-object can be created. this is not declaration of array, but the following statement makes the above declaration complete:\n\nTake the primitive type for example. There are several ways to declare and array: int[] i = new int[capacity]; int[] i = new int[] {value1, value2, value3, etc}; int[] i = {value1, value2, value3, etc}; where in all of these, you can use instead of . With reflection, you can use Note that in method parameters, indicates . Essentially, any number of parameters is fine. It's easier to explain with code: Inside the method, is treated as a normal . can only be used in method parameters, so will not compile. Note that when passing an to a method (or any other ), you cannot use the third way. In the statement , the compiler assumes that the means an . But that is because you are declaring a variable. When passing an array to a method, the declaration must either be or . Multidimensional arrays are much harder to deal with. Essentially, a 2D array is an array of arrays. means an array of s. The key is that if an is declared as , the maximum index is . Essentially, a rectangular is:\n\nint item = value; int [] one_dimensional_array = { value, value, value, .., value }; int [][] two_dimensional_array = { { value, value, value, .. value }, { value, value, value, .. value }, .. .. .. .. { value, value, value, .. value } }; If it's an object, then it's the same concept Object item = new Object(); Object [] one_dimensional_array = { new Object(), new Object(), .. new Object() }; Object [][] two_dimensional_array = { { new Object(), new Object(), .. new Object() }, { new Object(), new Object(), .. new Object() }, .. .. .. { new Object(), new Object(), .. new Object() } }; In case of objects, you need to either assign it to to initialize them using , classes like and are special cases that will be handled as following String [] a = { \"hello\", \"world\" }; // is equivalent to String [] a = { new String({'h','e','l','l','o'}), new String({'w','o','r','l','d'}) }; Integer [] b = { 1234, 5678 }; // is equivalent to Integer [] b = { new Integer(1234), new Integer(5678) }; In general you can create arrays that's dimensional It's worthy to note that creating an dimensional array is expensive in terms of Space. Since when you create an dimensional array with on all the dimensions, The total size of the array is bigger than , since each array has a reference, and at the M-dimension there is an (M-1)-dimensional array of references. The total size is as following\n\nint[] nums1 = {1, 2, 3}; int[] nums2 = new int[]{1, 2, 3}; Object[] objects1 = {new Object(), new Object(), new Object()}; Object[] objects2 = new Object[]{new Object(), new Object(), new Object()}; int[] nums = new int[3]; for (int i = 0; i < nums.length; i++) { nums[i] = i; // can contain any YOUR filling strategy } Object[] objects = new Object[3]; for (int i = 0; i < objects.length; i++) { objects[i] = new Object(); // can contain any YOUR filling strategy } int[] nums = new int[10]; Random random = new Random(); for (int i = 0; i < nums.length; i++) { nums[i] = random.nextInt(10); // random int from 0 to 9 } int[] nums1 = IntStream.range(0, 3) .toArray(); // [0, 1, 2] int[] nums2 = IntStream.rangeClosed(0, 3) .toArray(); // [0, 1, 2, 3] int[] nums3 = IntStream.of(10, 11, 12, 13) .toArray(); // [10, 11, 12, 13] int[] nums4 = IntStream.of(12, 11, 13, 10) .sorted() .toArray(); // [10, 11, 12, 13] int[] nums5 = IntStream.iterate(0, x -> x <= 3, x -> x + 1) .toArray(); // [0, 1, 2, 3] int[] nums6 = IntStream.iterate(0, x -> x + 1) .takeWhile(x -> x < 3) .toArray(); // [0, 1, 2] int size = 3; Object[] objects1 = IntStream.range(0, size) .mapToObj(i -> new Object()) // can contain any YOUR filling strategy .toArray(Object[]::new); Object[] objects2 = Stream.generate(() -> new Object()) // can contain any YOUR filling strategy .limit(size) .toArray(Object[]::new); With and (since Java 8) int[][] nums1 = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; int[][] nums2 = new int[][]{ {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; Object[][] objects1 = { {new Object(), new Object(), new Object()}, {new Object(), new Object(), new Object()}, {new Object(), new Object(), new Object()} }; Object[][] objects2 = new Object[][]{ {new Object(), new Object(), new Object()}, {new Object(), new Object(), new Object()}, {new Object(), new Object(), new Object()} }; int[][] nums = new int[3][3]; for (int i = 0; i < nums.length; i++) { for (int j = 0; j < nums[i].length; i++) { nums[i][j] = i + j; // can contain any YOUR filling strategy } } Object[][] objects = new Object[3][3]; for (int i = 0; i < objects.length; i++) { for (int j = 0; j < nums[i].length; i++) { objects[i][j] = new Object(); // can contain any YOUR filling strategy } }\n\nThere are a lot of answers here. I am adding a few tricky ways to create arrays (from an exam point of view it's good to know this)\n• This will create an array of length 3. As it holds a primitive type, int, all values are set to 0 by default. For example,\n• None Using box brackets [] before the variable name int[] intArray = new int[3]; intArray[0] = 1; // Array content is now {1, 0, 0}\n• None Initialise and provide data to the array This time there isn't any need to mention the size in the box bracket. Even a simple variant of this is:\n• int intArray[][] = new int[2][3]; // This will create an array of length 2 and //each element contains another array of length 3. // { {0,0,0},{0,0,0} } int lenght1 = intArray.length; // Will return 2 int length2 = intArray[0].length; // Will return 3 Using box brackets before the variable: It's absolutely fine if you put one box bracket at the end: int [] intArray [] = new int[][] {{1,2,3},{4,5,6}}; int [] intArray1 [] = new int[][] {new int[] {1,2,3}, new int [] {4,5,6}}; int [] intArray2 [] = new int[][] {new int[] {1,2,3},{4,5,6}} // All the 3 arrays assignments are valid // Array looks like {{1,2,3},{4,5,6}} It's not mandatory that each inner element is of the same size. int [][] intArray = new int[2][]; intArray[0] = {1,2,3}; intArray[1] = {4,5}; //array looks like {{1,2,3},{4,5}} int[][] intArray = new int[][2] ; // This won't compile. Keep this in mind. You have to make sure if you are using the above syntax, that the forward direction you have to specify the values in box brackets. Else it won't compile. Some examples: int [][][] intArray = new int[1][][]; int [][][] intArray = new int[1][2][]; int [][][] intArray = new int[1][2][3]; Number[] numArray = {1,2,3,4}; // java.lang.Number numArray[0] = new Float(1.5f); // java.lang.Float numArray[1] = new Integer(1); // java.lang.Integer // You can store a subclass object in an array that is declared // to be of the type of its superclass. // Here 'Number' is the superclass for both Float and Integer. Number num[] = new Float[5]; // This is also valid IMPORTANT: For referenced types, the default value stored in the array is null."
    },
    {
        "link": "https://datacamp.com/doc/java/defining-and-initializing-arrays",
        "document": "In Java, arrays are a fundamental data structure that allows you to store multiple values of the same type in a single variable. Arrays are used to organize data efficiently and can be defined and initialized in various ways.\n\nTo define an array in Java, you specify the data type of its elements followed by square brackets. You can define an array without initializing it immediately.\n• dataType: The type of elements the array will hold (e.g., , ).\n• arrayName: The name of the array.\n\nHere, is an array of integers, and is an array of strings. Both arrays are defined but not yet initialized.\n\nArrays can be initialized at the time of declaration or later in the code. There are several ways to initialize an array in Java.\n\nYou can initialize an array at the time of declaration using curly braces with the values separated by commas.\n\nIn this example, the array is initialized with integers, and the array is initialized with strings.\n\nYou can also use the keyword to allocate memory for the array and then assign values to each index.\n\nHere, the array is initialized with a size of 5, and each element is individually assigned a value.\n\nArrays can also be multi-dimensional, such as two-dimensional arrays, which are essentially arrays of arrays.\n\nIn this example, is a two-dimensional array with 3 rows and 3 columns, initialized with values.\n• Bounds Checking: Always ensure you access array elements within their bounds to avoid .\n• Default Values: Remember that arrays in Java are initialized with default values ( for numeric types, for , for object references).\n• Enhanced for Loop: Use the enhanced loop for iterating over arrays when you do not need to modify the array elements.\n• Use Utility Class: Java provides the class with utility methods for array manipulation, such as , , and for easy handling of arrays."
    },
    {
        "link": "https://w3schools.com/java/java_arrays.asp",
        "document": "Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.\n\nTo declare an array, define the variable type with square brackets:\n\nWe have now declared a variable that holds an array of strings. To insert values to it, you can place the values in a comma-separated list, inside curly braces:\n\nTo create an array of integers, you could write:\n\nAccess the Elements of an Array\n\nYou can access an array element by referring to the index number.\n\nThis statement accesses the value of the first element in cars:\n\nTo change the value of a specific element, refer to the index number:\n\nTo find out how many elements an array has, use the property:"
    },
    {
        "link": "https://geeksforgeeks.org/array-index-out-of-bounds-exception-in-java",
        "document": "In Java, ArrayIndexOutOfBoundsException is a Runtime Exception thrown only at runtime. The Java Compiler does not check for this error during the compilation of a program. It occurs when we try to access the element out of the index we are allowed to, i.e. index >= size of the array.\n\nJava supports the creation and manipulation of arrays as a data structure. The index of an array is an integer value that has a value in the interval [0, n-1], where n is the size of the array. If a request for a negative or an index greater than or equal to the size of the array is made, then Java throws an ArrayIndexOutOfBounds Exception. This is unlike C/C++, where no index of the bound check is done.\n\nExample 1: Here, we are trying to access the index which is greater than or equal to the array length.\n\nHere if you carefully see, the array is of size 5. Therefore while accessing its element using for loop, the maximum index value can be 4, but in our program, it is going till 5 and thus the exception.\n\nExample 2: Here, we are trying to access the index of array which is negative.\n\nTo handle ArrayIndexOutOfBoundsException, make sure that index of array is within the valid range. You can also use the enhanced for-loop to automatically handle this exception.\n\nExample 1: Here, we are checking whether the index is valid or not by taking array length with in the index range i.e. [0, n-1]\n\nExample 2: Here, we are using enhanced for loop that automatically handles the accessing of array’s index\n\nExample 3: Consider enclosing your code inside a try-catch statement and manipulate the exception accordingly. As mentioned, Java won’t let you access an invalid index and will definitely throw an ArrayIndexOutOfBoundsException. However, we should be careful inside the block of the catch statement because if we don’t handle the exception appropriately, we may conceal it and thus, create a bug in your application.\n\nHere in the above example, you can see that till index 4 (value 5), the loop printed all the values, but as soon as we tried to access the a[5], the program threw an exception which is caught by the catch block, and it printed the “Exception Caught” statement."
    },
    {
        "link": "https://stackoverflow.com/questions/5554734/what-causes-a-java-lang-arrayindexoutofboundsexception-and-how-do-i-prevent-it",
        "document": "Here is a code sample that triggers the exception:\n\nWhat does ArrayIndexOutOfBoundsException mean and how do I get rid of it?\n\nYour first port of call should be the documentation which explains it reasonably clearly: Thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array. As for how to avoid it... um, don't do that. Be careful with your array indexes. One problem people sometimes run into is thinking that arrays are 1-indexed, e.g. int[] array = new int[5]; // ... populate the array here ... for (int index = 1; index <= array.length; index++) { System.out.println(array[index]); } That will miss out the first element (index 0) and throw an exception when index is 5. The valid indexes here are 0-4 inclusive. The correct, idiomatic statement here would be:\n\nIf you think of a variable as a \"box\" where you can place a value, then an array is a series of boxes placed next to each other, where the number of boxes is a finite and explicit integer. Creating an array like this: creates a row of 5 boxes, each holding an . Each of the boxes has an index, a position in the series of boxes. This index starts at 0 and ends at N-1, where N is the size of the array (the number of boxes). To retrieve one of the values from this series of boxes, you can refer to it through its index, like this: Which will give you the value of the 4th box in the series (since the first box has an index of 0). An is caused by trying to retrieve a \"box\" that does not exist, by passing an index that is higher than the index of the last \"box\", or negative. With my running example, these code snippets would produce such an exception: myArray[5] //tries to retrieve the 6th \"box\" when there is only 5 myArray[-1] //just makes no sense myArray[1337] //way to high In order to prevent , there are some key points to consider: When looping through an array, always make sure that the index you are retrieving is strictly smaller than the length of the array (the number of boxes). For instance: Notice the , never mix a in there.. You might want to be tempted to do something like this: Just don't. Stick to the one above (if you need to use the index) and it will save you a lot of pain. Where possible, use foreach: This way you won't have to think about indexes at all. When looping, whatever you do, NEVER change the value of the loop iterator (here: ). The only place this should change value is to keep the loop going. Changing it otherwise is just risking an exception, and is in most cases not necessary. When retrieving an arbitrary element of the array, always check that it is a valid index against the length of the array: public Integer getArrayElement(final int index) { if (index < 0 || index >= myArray.length) { return null; //although I would much prefer an actual exception being thrown when this happens. } return myArray[index]; }"
    },
    {
        "link": "https://nkamphoa.com/how-to-fix-arrayindexoutofboundsexception-in-java",
        "document": "When dealing with arrays in Java, ArrayIndexOutOfBoundsException is an exception you’ll most probably encounter. In this article, you’ll learn how to fix this exception. You’ll also learn some best practices for avoiding the ArrayIndexOutOfBoundsException.\n\n2. What Java Says about ArrayIndexOutOfBoundsException\n\nAccording to the Javadoc, an ArrayIndexOutOfBoundsException is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.\n\nLet’s consider the following code which creates an integers array of size 5:\n\nArrays in Java are zero-indexed, meaning that the first element is at index 0 and the last element is at index . Any attempt to access an index out of this range will result in an ArrayIndexOutOfBoundsException.\n\nRunning the above code snippet will print the following to the console:\n\nTo fix the exception, you should make sure that the index is between 0 and 4 (which is 5 – 1).\n\nAlways ensure that the index of the element you are trying to access is within the range [0, yourArray.length – 1].\n\nWhen iterating an array using a loop, make sure that the start and end conditions of your loop are within the range of the array’s indexes.\n\nWhenever possible, prefer using the enhanced for-loop. This way, you don’t have to worry about index boundaries.\n\nIn this brief tutorial, you learned about the ArrayIndexOutOfBoundsException and how to fix it.\n\nYou can find the complete code of this article here in GitHub"
    },
    {
        "link": "https://stackoverflow.com/questions/16467325/how-to-handle-arrayindexoutofboundsexception",
        "document": "I am getting from my . I get this exception, how to handle this exception so that i can avoid any integer which does not match my .\n\nFor instance if my Array Holds four items.\n\nIf my getting either -1 or any value greater than 3, how can i handle them."
    },
    {
        "link": "https://baeldung.com/java-arrayindexoutofboundsexception",
        "document": "In this tutorial, we’ll discuss ArrayIndexOutOfBoundsException in Java. We’ll understand why it occurs and how to avoid it.\n\nAs we know, in Java, an array is a static data structure, and we define its size at the time of creation.\n\nWe access the elements of an array using indices. Indexing in an array starts from zero and must never be greater than or equal to the size of the array.\n\nIn short, the rule of thumb is 0 <= index < (size of array).\n\nArrayIndexOutOfBoundsException occurs when we access an array, or a Collection, that is backed by an array with an invalid index. This means that the index is either less than zero or greater than or equal to the size of the array.\n\nAdditionally, bound checking happens at runtime. So, ArrayIndexOutOfBoundsException is a runtime exception. Therefore, we need to be extra careful when accessing the boundary elements of an array.\n\nLet’s understand some of the common operations that lead to ArrayIndexOutOfBoundsException.\n\nThe most common mistake that may happen while accessing an array is forgetting about the upper and lower bounds.\n\nThe lower bound of an array is always 0, while the upper bound is one less than its length.\n\nAccessing the array elements out of these bounds would throw an ArrayIndexOutOfBoundsException:\n\nHere, the size of the array is 5, which means the index will range from 0 to 4.\n\nIn this case, accessing the 5th index results in an ArrayIndexOutOfBoundsException:\n\nSimilarly, we get ArrayIndexOutOfBoundsException if we pass a value less than zero as an index to numbers.\n\nThe static method Arrays.asList() returns a fixed-sized list that is backed by the specified array. Moreover, it acts as a bridge between array-based and collection-based APIs.\n\nThis returned List has methods to access its elements based on indices. Also, similar to an array, the indexing starts from zero and ranges to one less than its size.\n\nIf we try to access the elements of the List returned by Arrays.asList() beyond this range, we would get an ArrayIndexOutOfBoundsException:\n\nHere again, we are trying to get the last element of the List. The position of the last element is 5, but its index is 4 (size – 1). Hence, we get ArrayIndexOutOfBoundsException as below:\n\nSimilarly, if we pass a negative index, say -1, we will get a similar result.\n\nSometimes, while iterating over an array in a for loop, we might put a wrong termination expression.\n\nInstead of terminating the index at one less than the length of the array, we might end up iterating until its length:\n\nIn the above termination expression, the loop variable i is being compared as less than or equal to the length of our existing array numbers. So, in the last iteration, the value of i will become 5.\n\nSince index 5 is beyond the range of numbers, it will again lead to ArrayIndexOutOfBoundsException:\n\nLet’s now understand some ways to avoid ArrayIndexOutOfBoundsException.\n\nWe must always remember that the array index starts at 0 in Java. So, the first element is always at index 0, while the last element is at index one less than the length of the array.\n\nRemembering this rule will help us avoid ArrayIndexOutOfBoundsException most of the time.\n\n3.2. Correctly Using the Operators in Loops\n\nIncorrectly initializing the loop variable to index 1 may result in ArrayIndexOutOfBoundsException.\n\nSimilarly, the incorrect use of operators <, <=, > or >= in termination expressions of loops is a common reason for the occurrence of this exception.\n\nWe should correctly determine the use of these operators in loops.\n\nIf our application is running on Java 1.5 or a higher version, we should use an enhanced for loop statement that has been specifically developed to iterate over collections and arrays. Also, it makes our loops more succinct and easy to read.\n\nAdditionally, using the enhanced for loop helps us completely avoid the ArrayIndexOutOfBoundsException as it does not involve an index variable:\n\nHere, we do not have to worry about indexing. The enhanced for loop picks up an element and assigns it to a loop variable, number, with each iteration. Thus, it completely avoids ArrayIndexOutOfBoundsException.\n\nIndexOutOfBoundsException occurs when we try to access an index of some type (String, array, List, etc.) beyond its range. It’s a superclass of ArrayIndexOutOfBoundsException and StringIndexOutOfBoundsException.\n\nSimilar to ArrayIndexOutOfBoundsException, StringIndexOutOfBoundsException is thrown when we try to access a character of a String with an index beyond its length.\n\nIn this article, we explored ArrayIndexOutOfBoundsException, some examples for how it occurs, and some common techniques to avoid it."
    }
]