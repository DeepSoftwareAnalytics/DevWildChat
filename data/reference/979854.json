[
    {
        "link": "https://stackoverflow.com/questions/8901556/controlling-spotify-with-applescript",
        "document": "Essentially what I'd like to do is play an entire album via AppleScript. Right now, you can use their special URIs to load the album, but not play it. You can also play a specific track, but once that finishes playing, your queue resumes what was playing before.\n\nSpotify's scripting dictionary is somewhat thin, does anyone know if there are plans to increase its depth a bit?"
    },
    {
        "link": "https://github.com/simonbs/spotify-controls-api/blob/master/Spotify.applescript",
        "document": "Could not execute the command. Did you run the script from command line and passed in a valid argument? E.g. next, previous, play, pause or playpause?"
    },
    {
        "link": "https://reddit.com/r/applescript/comments/w1gp3t/control_spotify_programmatically_via_applescript",
        "document": "So today I learnt that we can do play/pause/shuffle/etc. using AppleScript on macOS. The idea is to write code that interacts with the Spotify app to make it do certain things:"
    },
    {
        "link": "https://engineering.atspotify.com/2022/04/spotifys-player-api",
        "document": "In 2017, we launched the Spotify Connect Web API, a set of tools that developers could use to programmatically start, stop, and manage Spotify audio playback from the web. This post presents an overview of what you can do with the API, now called the Player API, and some background information about how it came to exist.\n\nPrior to shipping the Connect Web API, Spotify offered a public interface that allowed developers to connect to Spotify’s Mac desktop application from another app running on Mac OS X. Through AppleScript, third-party developers could start or stop the music that was playing from Spotify’s Mac app and observe the title of the track that was playing. Developers used this opportunity to extend the Spotify experience into a variety of creative apps for their own personal use, for friends, and for other Spotify users.\n\nThe Spotify Connect Web API extended these innovations to the web, and it now allows developers to control Spotify playback from any internet-connected device or app. The Player API has been used by thousands of developers to make third-party apps for home automation, social listening, music discovery, and much more.\n\nIn 2018, we enhanced the Player API further with the launch of our Web Playback SDK: a JavaScript SDK that enables developers to create and control a fully functional player in the browser. When paired with the Player API, our Web Playback SDK can be used to build a frontend application that contains a fully functional web player for Spotify Premium users.\n\n\n\nIn 2020, the Player API was further improved by the addition of an add-to-queue API — a new endpoint that developers can use to add tracks to the list of songs or podcast episodes that are playing next. We’re excited about what’s in store for the future of the Player API, and about the apps that developers are making with its functionality.\n\nWhat can I do with it?\n\nAt its core, the Player API empowers your web application to tell Spotify what audio to play and where and how to play it. In order to make commands, your app will need an OAuth access token authorized with the user-modify-playback-state OAuth scope. After your app has been granted a token with this permission by a user, your app can use that token to send commands to the Spotify Web API from any device connected to the internet. Note that most commands will only work for users who have a Spotify Premium subscription.\n\nThe namesake feature of our Player API is the endpoint — your tool for beginning or continuing the playback of music or podcasts on Spotify.\n\nIt’s more powerful than the play button that you see in Spotify’s mobile app. When you make a request to the /v1/me/player/play endpoint, your third-party app can specify tracks by ID, or pass a context that you’d like to play. Contexts can be a playlist, an album, or a collection, like your Liked Songs.\n\nYou can also tell Spotify which device you’d like to listen to by providing Spotify with a device identifier. The device can refer to a Web Playback SDK app, a running instance of a Spotify app, or one of your Spotify Connect-enabled speakers. You can find the device identifiers that are available to control through our Devices API. Note that some devices are not supported.\n\nWhen you use the play endpoint, you can also tell Spotify how loud the music should be — a score from 0 to 100 — and you can also ask Spotify to offset playback by one or more playlist items. This could be useful if you want to start playback from the third song in a playlist, for example.\n\nThis endpoint is simple: it stops the audio that’s currently playing. After pausing playback with the pause endpoint, you can start it again by sending a request to without any options.\n\nTurning up (or down) the volume\n\nThis command sets the volume between 0 and 100. Some apps use it to add a volume slider or switch into their user interface.\n\nYou can use the Player API to add songs or podcast episodes to the “Up next” queue in your Spotify app. Use this endpoint carefully — there is no API yet for removing tracks from the queue, or for reading the contents of the queue.\n\nYour app can use the seek endpoint to move the audio cursor to a given millisecond of the track or podcast episode that is currently playing. After the command is executed, Spotify will begin playback from that point in the song or episode. Some apps — like those using the Web Playback SDK — might use this endpoint to build an audio scrubbing interface.\n\nIssuing playback commands to Spotify would be hard without the ability to observe the state of the player and Connect environment. Luckily, the Player API includes methods you can use to do just that. You can find some of the more popular observation endpoints below. Calling these endpoints requires a token that’s been authorized with the user-read-playback-state OAuth scope.\n\nYou can use the devices API endpoint to fetch a list of active devices that you can target with playback commands. The list will include any open Web Playback SDK apps, many online Spotify Connect speakers, and Spotify-built apps that you may have open, like the web player.\n\nMaking a GET request to the player endpoint will provide you with basic information about the currently playing context, the device that’s streaming, and other information about the playback state like whether or not shuffle is enabled and if the songs will repeat or not.\n\nWhat you can build with the Player API\n\nMusic fans commonly use Spotify Connect on social occasions to listen to music with friends and family. You can use the Player APIs to build an app that helps with your next house party or backyard barbeque.\n\nFor example, the Player API allows you to fetch information about the currently playing track. Your app can combine this information with the Audio Features API to learn about the estimated danceability or tempo of the currently playing song, and integrate this information with a programmable lighting system to match the mood.\n\nDevelopers can also combine the Player APIs with our Web Playback SDK to make a virtual “listening party” experience. By tracking the current point in the song and using the seek API endpoint when necessary, your app can allow groups of Spotify users to log into a web app, listen to music at the same time and share control over which songs will be played next.\n\nMany home automation systems are extensible or open source. Developers can use the Player APIs to connect Spotify with smart home systems and make audio a part of their routine. For example, you could use the endpoint to begin streaming your favorite morning podcast at the same time as a programmable coffee machine starts to brew coffee.\n\nWith some programming knowledge, any Spotify Premium user can set up a Player API app or develop one for their own use. You can connect with other developers who are using the API in the Spotify for Developers forum, or find examples of third-party apps in the Developer Showcase.\n\nWe hope you get creative with it and make inventions that add to the Spotify experience for yourself or for your friends. To get started, visit Spotify for Developers and log in with your Spotify account to register your first app. Happy coding!"
    },
    {
        "link": "https://stackoverflow.com/questions/12675168/spotify-applescript-add-current-track-to-playlist",
        "document": "This actually is possible, provided you have an Internet connection.\n\nAlthough the Spotify AppleScript API doesn't natively support adding songs to a playlist, you can call their Web API (which does support this feature) from your script.\n\nIt would look something like this:\n• is the ID from the URL for your playlist (whether it is public or private) in the format\n• is the Spotify URI for a song (which you can get using the AppleScript API: set track_id to id of the current track , for example)\n• is the authorization key you get from OAuth when you register and authorize your application (this is the tricky one); also remember to request private playlist modification scope when you authorize if you want to be able to use this with private playlists\n\nAs for the universal shortcut, I created a systemwide service in Automator that simply ran my AppleScript and assigned it to a shortcut in System Preferences."
    },
    {
        "link": "https://stackoverflow.com/questions/26855380/detect-the-end-of-a-spotify-track-with-applescript",
        "document": "I'm writing an Applescript that displays a notification with the name, album, and artist of the current Spotify track. Yes, I'm aware there is already an app that does this, but even with the latest version, it's very buggy and behaves erratically.\n\nSo far, I have a good little script. Here it is:\n\nBasically, the problem with this is if I pause or change the track, delay stays the same and thus doesn't display the notification when the song starts.\n\nI used delay in this script because I don't really know a better way of checking for the end of a track. Is there any Applescript event for the end of a song (or the beginning of a new one?)\n\nP.S., If this question is too complicated, feel free to ask more."
    },
    {
        "link": "https://stackoverflow.com/questions/7642467/monitoring-spotify-track-change-in-applescript",
        "document": "I'm trying to figure out the best way via Spotify's Applescript library to detect a track change. So far, I've tried checking player position -- if it equals 0 it is a new track and the Growl notification appears again. (This didn't work mostly if someone started a song over, etc.)\n\nI'm wondering if the more plausible method is having an idle iTunes script running and checking the current track name for change every couple seconds. I'm worried this might be a bit of a hog memory-wise. I can't get this code to function either.\n\nThis might be a little complicated but any help is appreciated."
    },
    {
        "link": "https://community.spotify.com/t5/Spotify-for-Developers/AppleScript-currentPosition-is-delayed-if-user-plays-autoplay/td-p/5728422",
        "document": "Previously I reported an issue where the currentPosition returned by Spotify's AppleSript api is delayed by the number of seconds the user has set crossfade to. Firstly that has not been fixed in over 4 months. Now, even with crossfade and the new automix option disabled, I am STILL facing currentPosition delay in my application. I have realised that on playlist playback this issue is not visible.\n\nIt is only visible on autoplays, recommended songs, or automixes. no solution but to manually pause and play and fix the currentPosition.\n\n3. Query the playback position on apple script (it is accurate)\n\n4. Queue a new song and wait for Spotify to automatically play the next song (recommended songs, make sure NOT IN A QUEUE or album/user/playlist context)\n\n5. Query the playback position on Apple Script (it is off by 1-2 seconds. It is 1-2 seconds higher than it should be)\n\nIf you pause the song and unpause, querying the apple script results in a correct playback position. There is no current workaround because users of my product will often listen to automixes or recommended songs."
    },
    {
        "link": "https://timingapp.com/help/applescript-controlling-tracking",
        "document": "Simply copy the following script(s) into a new \"Script Editor\" document and press run.\n\n After pasting them, consider saving the scripts to disk for future re-use. You could even save them to iCloud Drive (or e.g. Dropbox or Google Drive) to have them available on all your Macs.\n\n Feel free to customize them for your use cases; if you need details on how a particular method works, please refer to our AppleScript reference.\n\nNote: We do not take responsibility for any data loss incurred by running these scripts.\n\n Make sure to back up your data (e.g. by copying the directories mentioned here to a different location) before running these scripts.\n\nPausing all tracking for five minutes"
    },
    {
        "link": "https://community.spotify.com/t5/Spotify-for-Developers/Best-practice-to-monitor-current-playback/td-p/6105046",
        "document": "If you couldn't find any answers in the previous step then we need to post your question in the community and wait for someone to respond. You'll be notified when that happens.\n\nSimply add some detail to your question and refine the title if needed, choose the relevant category, then post."
    }
]