[
    {
        "link": "https://reqbin.com/req/c-hlt4gkzd/curl-bearer-token-authorization-header-example",
        "document": "Curl is a well-known command-line tool for transferring data between servers, designed to work without user intervention. Curl can upload or download data using popular protocols including HTTP, HTTPS, SCP, SFTP, and FTP with Curl. Curl is used for API testing, has built-in support for proxies, SSL, HTTP cookies. Curl runs on Linux, Windows, and macOS platforms.\n\nWhat is the Authorization Header?\n\nHTTP provides a built-in framework for controlling access and authentication to protected resources. The authorization request header contains the credentials for authenticating the HTTP client to the server. The most commonly used authorization headers are Basic Auth and Bearer Token headers.\n\nWhat is the Bearer Authorization Token?\n\nHTTP provides a user authentication framework to control access to protected resources. Bearer authentication (also called token authentication) is done by sending security tokens in the authorization header. The Bearer Token is a string that is not intended to be used by clients. Some servers will issue bearer tokens, short lines of hexadecimal characters, while others may use structured tokens like JWTs. The client must send this token back to the server in every authorization header when requesting protected resources.\n\nHow to send Curl request with Bearer Authorization Header?\n\nThe Bearer Token can be sent in the Curl request header. To pass the bearer token in the Curl authorization header, add the following command line parameter when executing the Curl request:\n\nThe following are examples of sending a request with a Bearer Authorization Header in Curl:\n\nThe following is an example of sending a Curl request with Bearer Authorization Header in Curl:\n\nSending the Bearer Token with a Curl POST request is similar to sending the Bearer Token with a Curl GET request. POST data is passed with the -d command-line option, and the authorization header and the bearer token are passed with the -H command-line option."
    },
    {
        "link": "https://stackoverflow.com/questions/3044315/how-to-set-the-authorization-header-using-curl",
        "document": "If you don't have the token at the time of the call is made, You will have to make two calls, one to get the token and the other to extract the token form the response, pay attention to\n\nas it is the part which is dealing with extracting the token from the response.\n\nAfter extracting the token you can use the token to make subsequent calls as follows."
    },
    {
        "link": "https://curl.se/docs/manpage.html",
        "document": "curl is a tool for transferring data from or to a server using URLs. It supports these protocols: DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET, TFTP, WS and WSS.\n\ncurl is powered by libcurl for all transfer-related features. See libcurl(3) for details.\n\nThe URL syntax is protocol-dependent. You find a detailed description in RFC 3986.\n\nIf you provide a URL without a leading protocol:// scheme, curl guesses what protocol you want. It then defaults to HTTP but assumes others based on often-used hostname prefixes. For example, for hostnames starting with \"ftp.\" curl assumes you want FTP.\n\nYou can specify any amount of URLs on the command line. They are fetched in a sequential manner in the specified order unless you use -Z, --parallel. You can specify command line options and URLs mixed and in any order on the command line.\n\ncurl attempts to reuse connections when doing multiple transfers, so that getting many files from the same server do not use multiple connects and setup handshakes. This improves speed. Connection reuse can only be done for URLs specified for a single command line invocation and cannot be performed between separate curl runs.\n\nProvide an IPv6 zone id in the URL with an escaped percentage sign. Like in\n\nEverything provided on the command line that is not a command line option or its argument, curl assumes is a URL and treats it as such.\n\nYou can specify multiple URLs or parts of URLs by writing lists within braces or ranges within brackets. We call this \"globbing\".\n\nProvide a list with three different names like this:\n\nDo sequences of alphanumeric series by using [] as in:\n\nWith letters through the alphabet:\n\nNested sequences are not supported, but you can use several ones next to each other:\n\nYou can specify a step counter for the ranges to get every Nth number or letter:\n\nWhen using [] or {} sequences when invoked from a command line prompt, you probably have to put the full URL within double quotes to avoid the shell from interfering with it. This also goes for other characters treated special, like for example '&', '?' and '*'.\n\ncurl supports command line variables (added in 8.3.0). Set variables with --variable name=content or --variable name@file (where \"file\" can be stdin if set to a single dash (-)).\n\nVariable contents can be expanded in option parameters using \"{{name}}\" if the option name is prefixed with \"--expand-\". This gets the contents of the variable \"name\" inserted, or a blank if the name does not exist as a variable. Insert \"{{\" verbatim in the string by prefixing it with a backslash, like \"\\{{\".\n\nYou access and expand environment variables by first importing them. You select to either require the environment variable to be set or you can provide a default value in case it is not already set. Plain \"--variable %name\" imports the variable called \"name\" but exits with an error if that environment variable is not already set. To provide a default value if it is not set, use \"--variable %name=content\" or \"--variable %name@content\".\n\nExample. Get the USER environment variable into the URL, fail if USER is not set:\n\nWhen expanding variables, curl supports a set of functions that can make the variable contents more convenient to use. It can trim leading and trailing white space with \"trim\", it can output the contents as a JSON quoted string with \"json\", URL encode the string with \"url\", base64 encode it with \"b64\" and base64 decode it with \"64dec\". To apply functions to a variable expansion, add them colon separated to the right side of the variable. Variable content holding null bytes that are not encoded when expanded cause error.\n\nExample: get the contents of a file called $HOME/.secret into a variable called \"fix\". Make sure that the content is trimmed and percent-encoded when sent as POST data:\n\nCommand line variables and expansions were added in 8.3.0.\n\nIf not told otherwise, curl writes the received data to stdout. It can be instructed to instead save that data into a local file, using the -o, --output or -O, --remote-name options. If curl is given multiple URLs to transfer on the command line, it similarly needs multiple options for where to save them.\n\ncurl does not parse or otherwise \"understand\" the content it gets or writes as output. It does no encoding or decoding, unless explicitly asked to with dedicated command line options.\n\ncurl supports numerous protocols, or put in URL terms: schemes. Your particular build may not support them all.\n\nRead or write local files. curl does not support accessing file:// URL remotely, but when running on Microsoft Windows using the native UNC approach works.\n\ncurl supports the File Transfer Protocol with a lot of tweaks and levers. With or without using TLS.\n\ncurl supports HTTP with numerous options and variations. It can speak HTTP version 0.9, 1.0, 1.1, 2 and 3 depending on build options and the correct command line options.\n\nUsing the mail reading protocol, curl can download emails for you. With or without using TLS.\n\ncurl can do directory lookups for you, with or without TLS.\n\ncurl supports MQTT version 3. Downloading over MQTT equals subscribe to a topic while uploading/posting equals publish on a topic. MQTT over TLS is not supported (yet).\n\nDownloading from a pop3 server means getting a mail. With or without using TLS.\n\nThe Realtime Messaging Protocol is primarily used to serve streaming media and curl can download it.\n\nUploading contents to an SMTP server means sending an email. With or without TLS.\n\nFetching a telnet URL starts an interactive session where it sends what it reads on stdin and outputs what the server sends it.\n\ncurl can do TFTP downloads and uploads.\n\nWebSocket done over HTTP/1. WSS implies that it works over HTTPS.\n\ncurl normally displays a progress meter during operations, indicating the amount of transferred data, transfer speeds and estimated time left, etc. The progress meter displays the transfer rate in bytes per second. The suffixes (k, M, G, T, P) are 1024 based. For example 1k is 1024 bytes. 1M is 1048576 bytes.\n\ncurl displays this data to the terminal by default, so if you invoke curl to do an operation and it is about to write data to the terminal, it disables the progress meter as otherwise it would mess up the output mixing progress meter and response data.\n\nIf you want a progress meter for HTTP POST or PUT requests, you need to redirect the response output to a file, using shell redirect (>), -o, --output or similar.\n\nThis does not apply to FTP upload as that operation does not spit out any response data to the terminal.\n\nIf you prefer a progress bar instead of the regular meter, -#, --progress-bar is your friend. You can also disable the progress meter completely with the -s, --silent option.\n\nThis man page describes curl 8.13.0. If you use a later version, chances are this man page does not fully document it. If you use an earlier version, this document tries to include version information about which specific version that introduced changes.\n\nYou can always learn which the latest curl version is by running\n\nThe online version of this man page is always showing the latest incarnation: https://curl.se/docs/manpage.html\n\nOptions start with one or two dashes. Many of the options require an additional value next to them. If provided text does not start with a dash, it is presumed to be and treated as a URL.\n\nThe short \"single-dash\" form of the options, -d for example, may be used with or without a space between it and its value, although a space is a recommended separator. The long double-dash form, -d, --data for example, requires a space between it and its value.\n\nShort version options that do not need any additional values can be used immediately next to each other, like for example you can specify all the options -O, -L and -v at once as -OLv.\n\nIn general, all boolean options are enabled with --option and yet again disabled with --no-option. That is, you use the same option name but prefix it with \"no-\". However, in this list we mostly only list and show the --option version of them.\n\nWhen -:, --next is used, it resets the parser state and you start again with a clean option state, except for the options that are global. Global options retain their values and meaning even after -:, --next.\n\nThe first argument that is exactly two dashes (\"--\"), marks the end of options; any argument after the end of options is interpreted as a URL argument even if it starts with a dash.\n\nThe following options are global: --fail-early, --libcurl, --parallel-immediate, --parallel-max, -Z, --parallel, -#, --progress-bar, --rate, -S, --show-error, --stderr, --styled-output, --trace-ascii, --trace-config, --trace-ids, --trace-time, --trace and -v, --verbose.\n\n(HTTP) Connect through an abstract Unix domain socket, instead of using the network. Note: netstat shows the path of an abstract socket prefixed with \"@\", however the <path> argument should not have this leading character.\n\nIf --abstract-unix-socket is provided several times, the last set value is used.\n\n(HTTPS) Enable the alt-svc parser. If the filename points to an existing alt-svc cache file, that gets used. After a completed transfer, the cache is saved to the filename again if it has been modified.\n\nSpecify a \"\" filename (zero length) to avoid loading/saving and make curl just handle the cache in memory.\n\nIf this option is used several times, curl loads contents from all the files but the last one is used for saving.\n\n--alt-svc can be used several times in a command line\n\nAdded in 7.64.1. See also --resolve and --connect-to.\n\n(HTTP) Figure out authentication method automatically, and use the most secure one the remote site claims to support. This is done by first doing a request and checking the response-headers, thus possibly inducing an extra network round-trip. This option is used instead of setting a specific authentication method, which you can do with --basic, --digest, --ntlm, and --negotiate.\n\nUsing --anyauth is not recommended if you do uploads from stdin, since it may require data to be sent twice and then the client must be able to rewind. If the need should arise when uploading from stdin, the upload operation fails.\n\nUsed together with -u, --user.\n\nSee also --proxy-anyauth, --basic and --digest.\n\n(FTP SFTP) When used in an upload, this option makes curl append to the target file instead of overwriting it. If the remote file does not exist, it is created. Note that this flag is ignored by some SFTP servers (including OpenSSH).\n\nProviding --append multiple times has no extra effect. Disable it again with --no-append.\n\nSee also -r, --range and -C, --continue-at.\n\n(HTTP) Use AWS V4 signature authentication in the transfer.\n\nThe provider argument is a string that is used by the algorithm when creating outgoing authentication headers.\n\nThe region argument is a string that points to a geographic area of a resources collection (region-code) when the region name is omitted from the endpoint.\n\nThe service argument is a string that points to a function provided by a cloud (service-code) when the service name is omitted from the endpoint.\n\nIf --aws-sigv4 is provided several times, the last set value is used.\n\nAdded in 7.75.0. See also --basic and -u, --user.\n\n(HTTP) Use HTTP Basic authentication with the remote host. This method is the default and this option is usually pointless, unless you use it to override a previously set option that sets a different authentication method (such as --ntlm, --digest, or --negotiate).\n\nUsed together with -u, --user.\n\n(TLS) Use the operating system's native CA store for certificate verification.\n\nThis option is independent of other CA certificate locations set at run time or build time. Those locations are searched in addition to the native CA store.\n\nThis option works with OpenSSL and its forks (LibreSSL, BoringSSL, etc) on Windows. (Added in 7.71.0)\n\nThis option works with wolfSSL on Windows, Linux (Debian, Ubuntu, Gentoo, Fedora, RHEL), macOS, Android and iOS. (Added in 8.3.0)\n\nThis option works with GnuTLS. (Added in 8.5.0)\n\nThis option currently has no effect for Schannel or Secure Transport. Those are native TLS libraries from Microsoft and Apple, respectively, that by default use the native CA store for verification unless overridden by a CA certificate location setting.\n\nProviding --ca-native multiple times has no extra effect. Disable it again with --no-ca-native.\n\nAdded in 8.2.0. See also --cacert, --capath, --dump-ca-embed, -k, --insecure and --proxy-ca-native.\n\n(TLS) Use the specified certificate file to verify the peer. The file may contain multiple CA certificates. The certificate(s) must be in PEM format. Normally curl is built to use a default file for this, so this option is typically used to alter that default file.\n\ncurl recognizes the environment variable named 'CURL_CA_BUNDLE' if it is set and the TLS backend is not Schannel, and uses the given path as a path to a CA cert bundle. This option overrides that variable.\n\n(Windows) curl automatically looks for a CA certs file named 'curl-ca-bundle.crt', either in the same directory as curl.exe, or in the Current Working Directory, or in any folder along your PATH.\n\ncurl 8.11.0 added a build-time option to disable this search behavior, and another option to restrict search to the application's directory.\n\n(iOS and macOS only) If curl is built against Secure Transport, then this option is supported for backward compatibility with other SSL engines, but it should not be set. If the option is not set, then curl uses the certificates in the system and user Keychain to verify the peer, which is the preferred method of verifying the peer's certificate chain.\n\n(Schannel only) This option is supported for Schannel in Windows 7 or later (added in 7.60.0). This option is supported for backward compatibility with other SSL engines; instead it is recommended to use Windows' store of root certificates (the default for Schannel).\n\nIf --cacert is provided several times, the last set value is used.\n\nSee also --capath, --dump-ca-embed and -k, --insecure.\n\n(TLS) Use the specified certificate directory to verify the peer. Multiple paths can be provided by separated with colon (\":\") (e.g. \"path1:path2:path3\"). The certificates must be in PEM format, and if curl is built against OpenSSL, the directory must have been processed using the c_rehash utility supplied with OpenSSL. Using --capath can allow OpenSSL-powered curl to make SSL-connections much more efficiently than using --cacert if the --cacert file contains many CA certificates.\n\nIf this option is set, the default capath value is ignored.\n\nIf --capath is provided several times, the last set value is used.\n\nSee also --cacert, --dump-ca-embed and -k, --insecure.\n\n(TLS) Use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol. The certificate must be in PKCS#12 format if using Secure Transport, or PEM format if using any other engine. If the optional password is not specified, it is queried for on the terminal. Note that this option assumes a certificate file that is the private key and the client certificate concatenated. See -E, --cert and --key to specify them independently.\n\nIn the <certificate> portion of the argument, you must escape the character \":\" as \"\\:\" so that it is not recognized as the password delimiter. Similarly, you must escape the double quote character as \\\" so that it is not recognized as an escape character.\n\nIf curl is built against OpenSSL library, and the engine pkcs11 or pkcs11 provider is available, then a PKCS#11 URI (RFC 7512) can be used to specify a certificate located in a PKCS#11 device. A string beginning with \"pkcs11:\" is interpreted as a PKCS#11 URI. If a PKCS#11 URI is provided, then the --engine option is set as \"pkcs11\" if none was provided and the --cert-type option is set as \"ENG\" or \"PROV\" if none was provided (depending on OpenSSL version).\n\nIf curl is built against GnuTLS library, a PKCS#11 URI can be used to specify a certificate located in a PKCS#11 device. A string beginning with \"pkcs11:\" is interpreted as a PKCS#11 URI.\n\n(iOS and macOS only) If curl is built against Secure Transport, then the certificate string can either be the name of a certificate/private key in the system or user keychain, or the path to a PKCS#12-encoded certificate and private key. If you want to use a file from the current directory, please precede it with \"./\" prefix, in order to avoid confusion with a nickname.\n\n(Schannel only) Client certificates must be specified by a path expression to a certificate store. (Loading PFX is not supported; you can import it to a store first). You can use \"<store location>\\<store name>\\<thumbprint>\" to refer to a certificate in the system certificates store, for example, \"CurrentUser\\MY\\934a7ac6f8a5d579285a74fa61e19f23ddfe8d7a\". Thumbprint is usually a SHA-1 hex string which you can see in certificate details. Following store locations are supported: CurrentUser, LocalMachine, CurrentService, Services, CurrentUserGroupPolicy, LocalMachineGroupPolicy and LocalMachineEnterprise.\n\nIf --cert is provided several times, the last set value is used.\n\nSee also --cert-type, --key and --key-type.\n\n(TLS) Verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.\n\nIf this option is enabled and the server sends an invalid (e.g. expired) response, if the response suggests that the server certificate has been revoked, or no response at all is received, the verification fails.\n\nThis support is currently only implemented in the OpenSSL and GnuTLS backends.\n\nProviding --cert-status multiple times has no extra effect. Disable it again with --no-cert-status.\n\n(TLS) Set type of the provided client certificate. PEM, DER, ENG, PROV and P12 are recognized types.\n\nThe default type depends on the TLS backend and is usually PEM, however for Secure Transport and Schannel it is P12. If -E, --cert is a pkcs11: URI then ENG or PROV is the default type (depending on OpenSSL version).\n\nIf --cert-type is provided several times, the last set value is used.\n\nSee also -E, --cert, --key and --key-type.\n\n(TLS) Specifies which cipher suites to use in the connection if it negotiates TLS 1.2 (1.1, 1.0). The list of ciphers suites must specify valid ciphers. Read up on cipher suite details on this URL:\n\nIf --ciphers is provided several times, the last set value is used.\n\nSee also --tls13-ciphers, --proxy-ciphers and --curves.\n\n(HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.\n\nResponse headers are not modified when saved, so if they are \"interpreted\" separately again at a later point they might appear to be saying that the content is (still) compressed; while in fact it has already been decompressed.\n\nIf this option is used and the server sends an unsupported encoding, curl reports an error. This is a request, not an order; the server may or may not deliver data compressed.\n\nProviding --compressed multiple times has no extra effect. Disable it again with --no-compressed.\n\n(SCP SFTP) Enables built-in SSH compression. This is a request, not an order; the server may or may not do it.\n\nProviding --compressed-ssh multiple times has no extra effect. Disable it again with --no-compressed-ssh.\n\nSpecify a text file to read curl arguments from. The command line arguments found in the text file are used as if they were provided on the command line.\n\nOptions and their parameters must be specified on the same line in the file, separated by whitespace, colon, or the equals sign. Long option names can optionally be given in the config file without the initial double dashes and if so, the colon or equals characters can be used as separators. If the option is specified with one or two dashes, there can be no colon or equals character between the option and its parameter.\n\nIf the parameter contains whitespace or starts with a colon (:) or equals sign (=), it must be specified enclosed within double quotes (\"like this\"). Within double quotes the following escape sequences are available: \\ \\\", \\t, \n\n, \\r and \\v. A backslash preceding any other letter is ignored.\n\nIf the first non-blank column of a config line is a '#' character, that line is treated as a comment.\n\nOnly write one option per physical line in the config file. A single line is required to be no more than 10 megabytes (since 8.2.0).\n\nSpecify the filename to -K, --config as minus \"-\" to make curl read the file from stdin.\n\nNote that to be able to specify a URL in the config file, you need to specify it using the --url option, and not by simply writing the URL on its own line. So, it could look similar to this:\n\nWhen curl is invoked, it (unless -q, --disable is used) checks for a default config file and uses it if found, even when -K, --config is used. The default config file is checked for in the following places in this order:\n\n7) Non-Windows: use getpwuid to find the home directory\n\n8) On Windows, if it finds no .curlrc file in the sequence described above, it checks for one in the same directory the curl executable is placed.\n\nOn Windows two filenames are checked per location: .curlrc and _curlrc, preferring the former. Older versions on Windows checked for _curlrc only.\n\n--config can be used several times in a command line\n\nMaximum time in seconds that you allow curl's connection to take. This only limits the connection phase, so if curl connects within the given period it continues - if not it exits.\n\nThis option accepts decimal values. The decimal value needs to be provided using a dot (.) as decimal separator - not the local version even if it might be using another separator.\n\nThe connection phase is considered complete when the DNS lookup and requested TCP, TLS or QUIC handshakes are done.\n\nIf --connect-timeout is provided several times, the last set value is used.\n\nFor a request intended for the \"HOST1:PORT1\" pair, connect to \"HOST2:PORT2\" instead. This option is only used to establish the network connection. It does NOT affect the hostname/port number that is used for TLS/SSL (e.g. SNI, certificate verification) or for the application protocols.\n\n\"HOST1\" and \"PORT1\" may be empty strings, meaning any host or any port number. \"HOST2\" and \"PORT2\" may also be empty strings, meaning use the request's original hostname and port number.\n\nA hostname specified to this option is compared as a string, so it needs to match the name used in request URL. It can be either numerical such as \"127.0.0.1\" or the full host name such as \"example.org\".\n\nExample: redirect connects from the example.com hostname to 127.0.0.1 independently of port number:\n\nExample: redirect connects from all hostnames to 127.0.0.1 independently of port number:\n\n--connect-to can be used several times in a command line\n\nSee also --resolve and -H, --header.\n\nResume a previous transfer from the given byte offset. The given offset is the exact number of bytes that are skipped, counting from the beginning of the source file before it is transferred to the destination. If used with uploads, the FTP server command SIZE is not used by curl.\n\nUse \"-C -\" to instruct curl to automatically find out where/how to resume the transfer. It then uses the given output/input files to figure that out.\n\nThis command line option is mutually exclusive with -r, --range: you can only use one of them for a single transfer.\n\nThe --no-clobber and --remove-on-error options cannot be used together with -C, --continue-at.\n\nIf --continue-at is provided several times, the last set value is used.\n\n(HTTP) This option has two slightly separate cookie sending functions.\n\nEither: pass the exact data to send to the HTTP server in the Cookie header. It is supposedly data previously received from the server in a \"Set-Cookie:\" line. The data should be in the format \"NAME1=VALUE1; NAME2=VALUE2\". When given a set of specific cookies, curl populates its cookie header with this content explicitly in all outgoing request(s). If multiple requests are done due to authentication, followed redirects or similar, they all get this cookie header passed on.\n\nOr: If no \"=\" symbol is used in the argument, it is instead treated as a filename to read previously stored cookie from. This option also activates the cookie engine which makes curl record incoming cookies, which may be handy if you are using this in combination with the -L, --location option or do multiple URL transfers on the same invoke.\n\nIf the filename is a single minus (\"-\"), curl reads the contents from stdin. If the filename is an empty string (\"\") and is the only cookie input, curl activates the cookie engine without any cookies.\n\nThe file format of the file to read cookies from should be plain HTTP headers (Set-Cookie style) or the Netscape/Mozilla cookie file format.\n\nThe file specified with -b, --cookie is only used as input. No cookies are written to that file. To store cookies, use the -c, --cookie-jar option.\n\nIf you use the Set-Cookie file format and do not specify a domain then the cookie is not sent since the domain never matches. To address this, set a domain in Set-Cookie line (doing that includes subdomains) or preferably: use the Netscape format.\n\nUsers often want to both read cookies from a file and write updated cookies back to a file, so using both -b, --cookie and -c, --cookie-jar in the same command line is common.\n\nIf curl is built with PSL (Public Suffix List) support, it detects and discards cookies that are specified for such suffix domains that should not be allowed to have cookies. If curl is not built with PSL support, it has no ability to stop super cookies.\n\n--cookie can be used several times in a command line\n\nSee also -c, --cookie-jar and -j, --junk-session-cookies.\n\n(HTTP) Specify to which file you want curl to write all cookies after a completed operation. curl writes all cookies from its in-memory cookie storage to the given file at the end of operations. Even if no cookies are known, a file is created so that it removes any formerly existing cookies from the file. The file uses the Netscape cookie file format. If you set the filename to a single minus, \"-\", the cookies are written to stdout.\n\nThe file specified with -c, --cookie-jar is only used for output. No cookies are read from the file. To read cookies, use the -b, --cookie option. Both options can specify the same file.\n\nThis command line option activates the cookie engine that makes curl record and use cookies. The -b, --cookie option also activates it.\n\nIf the cookie jar cannot be created or written to, the whole curl operation does not fail or even report an error clearly. Using -v, --verbose gets a warning displayed, but that is the only visible feedback you get about this possibly lethal situation.\n\nIf --cookie-jar is provided several times, the last set value is used.\n\nSee also -b, --cookie and -j, --junk-session-cookies.\n\nWhen used in conjunction with the -o, --output option, curl creates the necessary local directory hierarchy as needed. This option creates the directories mentioned with the -o, --output option combined with the path possibly set with --output-dir. If the combined output filename uses no directory, or if the directories it mentions already exist, no directories are created.\n\nCreated directories are made with mode 0750 on Unix-style file systems.\n\nTo create remote directories when using FTP or SFTP, try --ftp-create-dirs.\n\nProviding --create-dirs multiple times has no extra effect. Disable it again with --no-create-dirs.\n\nSee also --ftp-create-dirs and --output-dir.\n\n(SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644.\n\nThis option takes an octal number as argument.\n\nIf --create-file-mode is provided several times, the last set value is used.\n\nAdded in 7.75.0. See also --ftp-create-dirs.\n\n(FTP SMTP) Convert line feeds to carriage return plus line feeds in upload. Useful for MVS (OS/390).\n\nProviding --crlf multiple times has no extra effect. Disable it again with --no-crlf.\n\n(TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.\n\nIf --crlfile is provided several times, the last set value is used.\n\nSee also --cacert and --capath.\n\n(TLS) Set specific curves to use during SSL session establishment according to RFC 8422, 5.1. Multiple algorithms can be provided by separating them with \":\" (e.g. \"X25519:P-521\"). The parameter is available identically in the OpenSSL \"s_client\" and \"s_server\" utilities.\n\n--curves allows a OpenSSL powered curl to make SSL-connections with exactly the (EC) curve requested by the client, avoiding nontransparent client/server negotiations.\n\nIf this option is set, the default curves list built into OpenSSL are ignored.\n\nIf --curves is provided several times, the last set value is used.\n\nAdded in 7.73.0. See also --ciphers.\n\n(HTTP MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button. This option makes curl pass the data to the server using the content-type application/x-www-form-urlencoded. Compare to -F, --form.\n\n--data-raw is almost the same but does not have a special interpretation of the @ character. To post data purely binary, you should instead use the --data-binary option. To URL-encode the value of a form field you may use --data-urlencode.\n\nIf any of these options is used more than once on the same command line, the data pieces specified are merged with a separating &-symbol. Thus, using '-d name=daniel -d skill=lousy' would generate a post chunk that looks like 'name=daniel&skill=lousy'.\n\nIf you start the data with the letter @, the rest should be a filename to read the data from, or - if you want curl to read the data from stdin. Posting data from a file named 'foobar' would thus be done with -d, --data @foobar. When -d, --data is told to read from a file like that, carriage returns, newlines and null bytes are stripped out. If you do not want the @ character to have a special interpretation use --data-raw instead.\n\nThe data for this option is passed on to the server exactly as provided on the command line. curl does not convert, change or improve it. It is up to the user to provide the data in the correct form.\n\n--data can be used several times in a command line\n\nThis option is mutually exclusive with -F, --form, -I, --head and -T, --upload-file. See also --data-binary, --data-urlencode and --data-raw.\n\n(HTTP) This option is just an alias for -d, --data.\n\n--data-ascii can be used several times in a command line\n\nSee also --data-binary, --data-raw and --data-urlencode.\n\n(HTTP) Post data exactly as specified with no extra processing whatsoever.\n\nIf you start the data with the letter @, the rest should be a filename. \"@-\" makes curl read the data from stdin. Data is posted in a similar manner as -d, --data does, except that newlines and carriage returns are preserved and conversions are never done.\n\nLike -d, --data the default content-type sent to the server is application/x-www-form-urlencoded. If you want the data to be treated as arbitrary binary data by the server then set the content-type to octet-stream: -H \"Content-Type: application/octet-stream\".\n\nIf this option is used several times, the ones following the first append data as described in -d, --data.\n\n--data-binary can be used several times in a command line\n\n(HTTP) Post data similarly to -d, --data but without the special interpretation of the @ character.\n\n--data-raw can be used several times in a command line\n\n(HTTP) Post data, similar to the other -d, --data options with the exception that this performs URL-encoding.\n\nTo be CGI-compliant, the <data> part should begin with a name followed by a separator and a content specification. The <data> part can be passed to curl using one of the following syntaxes:\n\nURL-encode the content and pass that on. Just be careful so that the content does not contain any \"=\" or \"@\" symbols, as that makes the syntax match one of the other cases below.\n\nURL-encode the content and pass that on. The preceding \"=\" symbol is not included in the data.\n\nURL-encode the content part and pass that on. Note that the name part is expected to be URL-encoded already.\n\nload data from the given file (including any newlines), URL-encode that data and pass it on in the POST. Using \"@-\" makes curl read the data from stdin.\n\nload data from the given file (including any newlines), URL-encode that data and pass it on in the POST. The name part gets an equal sign appended, resulting in name=urlencoded-file-content. Note that the name is expected to be URL-encoded already.\n\n--data-urlencode can be used several times in a command line\n\nSee also -d, --data and --data-raw.\n\n(GSS/kerberos) Set LEVEL what curl is allowed to delegate when it comes to user credentials.\n\nDo not allow any delegation.\n\nDelegates if and only if the OK-AS-DELEGATE flag is set in the Kerberos service ticket, which is a matter of realm policy.\n\nUnconditionally allow the server to delegate.\n\nIf --delegation is provided several times, the last set value is used.\n\nSee also -k, --insecure and --ssl.\n\n(HTTP) Enables HTTP Digest authentication. This authentication scheme avoids sending the password over the wire in clear text. Use this in combination with the normal -u, --user option to set username and password.\n\nProviding --digest multiple times has no extra effect. Disable it again with --no-digest.\n\nThis option is mutually exclusive with --basic, --ntlm and --negotiate. See also -u, --user, --proxy-digest and --anyauth.\n\nIf used as the first parameter on the command line, the curlrc config file is not read or used. See the -K, --config for details on the default config file search path.\n\nProviding --disable multiple times has no extra effect. Disable it again with --no-disable.\n\n(FTP) Disable the use of the EPRT and LPRT commands when doing active FTP transfers. curl normally first attempts to use EPRT before using PORT, but with this option, it uses PORT right away. EPRT is an extension to the original FTP protocol, and does not work on all servers, but enables more functionality in a better way than the traditional PORT command.\n\n--eprt can be used to explicitly enable EPRT again and --no-eprt is an alias for --disable-eprt.\n\nIf the server is accessed using IPv6, this option has no effect as EPRT is necessary then.\n\nDisabling EPRT only changes the active behavior. If you want to switch to passive mode you need to not use -P, --ftp-port or force it with --ftp-pasv.\n\nProviding --disable-eprt multiple times has no extra effect. Disable it again with --no-disable-eprt.\n\nSee also --disable-epsv and -P, --ftp-port.\n\n(FTP) Disable the use of the EPSV command when doing passive FTP transfers. curl normally first attempts to use EPSV before PASV, but with this option, it does not try EPSV.\n\n--epsv can be used to explicitly enable EPSV again and --no-epsv is an alias for --disable-epsv.\n\nIf the server is an IPv6 host, this option has no effect as EPSV is necessary then.\n\nDisabling EPSV only changes the passive behavior. If you want to switch to active mode you need to use -P, --ftp-port.\n\nProviding --disable-epsv multiple times has no extra effect. Disable it again with --no-disable-epsv.\n\nSee also --disable-eprt and -P, --ftp-port.\n\nExit with error if passed a URL containing a username. Probably most useful when the URL is being provided at runtime or similar.\n\nProviding --disallow-username-in-url multiple times has no extra effect. Disable it again with --no-disallow-username-in-url.\n\nAdded in 7.61.0. See also --proto.\n\n(DNS) Send outgoing DNS requests through the given interface. This option is a counterpart to --interface (which does not affect DNS). The supplied string must be an interface name (not an address).\n\nIf --dns-interface is provided several times, the last set value is used.\n\n--dns-interface requires that libcurl is built to support c-ares. See also --dns-ipv4-addr and --dns-ipv6-addr.\n\n(DNS) Bind to a specific IP address when making IPv4 DNS requests, so that the DNS requests originate from this address. The argument should be a single IPv4 address.\n\nIf --dns-ipv4-addr is provided several times, the last set value is used.\n\n--dns-ipv4-addr requires that libcurl is built to support c-ares. See also --dns-interface and --dns-ipv6-addr.\n\n(DNS) Bind to a specific IP address when making IPv6 DNS requests, so that the DNS requests originate from this address. The argument should be a single IPv6 address.\n\nIf --dns-ipv6-addr is provided several times, the last set value is used.\n\n--dns-ipv6-addr requires that libcurl is built to support c-ares. See also --dns-interface and --dns-ipv4-addr.\n\n(DNS) Set the list of DNS servers to be used instead of the system default. The list of IP addresses should be separated with commas. Port numbers may also optionally be given, appended to the IP address separated with a colon.\n\nIf --dns-servers is provided several times, the last set value is used.\n\n--dns-servers requires that libcurl is built to support c-ares. See also --dns-interface and --dns-ipv4-addr.\n\nSame as --cert-status but used for DoH (DNS-over-HTTPS).\n\nVerifies the status of the DoH servers' certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.\n\nIf this option is enabled and the DoH server sends an invalid (e.g. expired) response, if the response suggests that the server certificate has been revoked, or no response at all is received, the verification fails.\n\nThis support is currently only implemented in the OpenSSL and GnuTLS backends.\n\nProviding --doh-cert-status multiple times has no extra effect. Disable it again with --no-doh-cert-status.\n\nAdded in 7.76.0. See also --doh-insecure.\n\nBy default, every connection curl makes to a DoH server is verified to be secure before the transfer takes place. This option tells curl to skip the verification step and proceed without checking.\n\nWARNING: using this option makes the DoH transfer and name resolution insecure.\n\nThis option is equivalent to -k, --insecure and --proxy-insecure but used for DoH (DNS-over-HTTPS) only.\n\nProviding --doh-insecure multiple times has no extra effect. Disable it again with --no-doh-insecure.\n\nAdded in 7.76.0. See also --doh-url, -k, --insecure and --proxy-insecure.\n\nSpecifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism. The URL must be HTTPS.\n\nSome SSL options that you set for your transfer also applies to DoH since the name lookups take place over SSL. However, the certificate verification settings are not inherited but are controlled separately via --doh-insecure and --doh-cert-status.\n\nBy default, DoH is bypassed when initially looking up DNS records of the DoH server. You can specify the IP address(es) of the DoH server with --resolve to avoid this.\n\nThis option is unset if an empty string \"\" is used as the URL. (Added in 7.85.0)\n\nIf --doh-url is provided several times, the last set value is used.\n\nAdded in 7.62.0. See also --doh-insecure.\n\n(TLS) Write the CA bundle embedded in curl to standard output, then quit.\n\nIf curl was not built with a default CA bundle embedded, the output is empty.\n\nProviding --dump-ca-embed multiple times has no extra effect. Disable it again with --no-dump-ca-embed.\n\nAdded in 8.10.0. See also --ca-native, --cacert, --capath, --proxy-ca-native, --proxy-cacert and --proxy-capath.\n\n(HTTP FTP) Write the received protocol headers to the specified file. If no headers are received, the use of this option creates an empty file. Specify \"-\" as filename (a single minus) to have it written to stdout.\n\nStarting in curl 8.10.0, specify \"%\" (a single percent sign) as filename writes the output to stderr.\n\nWhen used in FTP, the FTP server response lines are considered being \"headers\" and thus are saved there.\n\nStarting in curl 8.11.0, using the --create-dirs option can also create missing directory components for the path provided in -D, --dump-header.\n\nHaving multiple transfers in one set of operations (i.e. the URLs in one -:, --next clause), appends them to the same file, separated by a blank line.\n\nIf --dump-header is provided several times, the last set value is used.\n\n(HTTPS) Specifies how to do ECH (Encrypted Client Hello).\n\nThe values allowed for <config> can be:\n\nDo not attempt ECH. The is the default.\n\nAttempt ECH if possible, but do not fail if ECH is not attempted. (The connection fails if ECH is attempted but fails.)\n\nAttempt ECH and fail if that is not possible. ECH only works with TLS 1.3 and also requires using DoH or providing an ECHConfigList on the command line.\n\nA base64 encoded ECHConfigList that is used for ECH.\n\nA name to use to over-ride the \"public_name\" field of an ECHConfigList (only available with OpenSSL TLS support)\n\nIf --ech is provided several times, the last set value is used.\n\nAdded in 8.8.0. See also --doh-url.\n\n(TLS) Deprecated option (added in 7.84.0). Prior to that it only had an effect on curl if built to use old versions of OpenSSL.\n\nSpecify the path name to the Entropy Gathering Daemon socket. The socket is used to seed the random engine for SSL connections.\n\nIf --egd-file is provided several times, the last set value is used.\n\n(TLS) Select the OpenSSL crypto engine to use for cipher operations. Use --engine list to print a list of build-time supported engines. Note that not all (and possibly none) of the engines may be available at runtime.\n\nIf --engine is provided several times, the last set value is used.\n\nSee also --ciphers and --curves.\n\n(HTTP) Make a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.\n\nFor correct results, make sure that the specified file contains only a single line with the desired ETag. A non-existing or empty file is treated as an empty ETag.\n\nUse the option --etag-save to first save the ETag from a response, and then use this option to compare against the saved ETag in a subsequent request.\n\nUse this option with a single URL only.\n\nIf --etag-compare is provided several times, the last set value is used.\n\nAdded in 7.68.0. See also --etag-save and -z, --time-cond.\n\n(HTTP) Save an HTTP ETag to the specified file. An ETag is a caching related header, usually returned in a response. Use this option with a single URL only.\n\nIf no ETag is sent by the server, an empty file is created.\n\nStarting in curl 8.12.0, using the --create-dirs option can also create missing directory components for the path provided in --etag-save.\n\nIf --etag-save is provided several times, the last set value is used.\n\nAdded in 7.68.0. See also --etag-compare.\n\n(HTTP) Maximum time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request. By default curl waits one second. This option accepts decimal values. When curl stops waiting, it continues as if a response was received.\n\nThe decimal value needs to be provided using a dot (\".\") as decimal separator - not the local version even if it might be using another separator.\n\nIf --expect100-timeout is provided several times, the last set value is used.\n\n(HTTP) Fail with error code 22 and with no response body output at all for HTTP transfers returning HTTP response codes at 400 or greater.\n\nIn normal cases when an HTTP server fails to deliver a document, it returns a body of text stating so (which often also describes why and more) and a 4xx HTTP response code. This command line option prevents curl from outputting that data and instead returns error 22 early. By default, curl does not consider HTTP response codes to indicate failure.\n\nTo get both the error code and also save the content, use --fail-with-body instead.\n\nThis method is not fail-safe and there are occasions where non-successful response codes slip through, especially when authentication is involved (response codes 401 and 407).\n\nProviding --fail multiple times has no extra effect. Disable it again with --no-fail.\n\nThis option is mutually exclusive with --fail-with-body. See also --fail-with-body and --fail-early.\n\nFail and exit on the first detected transfer error.\n\nWhen curl is used to do multiple transfers on the command line, it attempts to operate on each given URL, one by one. By default, it ignores errors if there are more URLs given and the last URL's success determines the error code curl returns. Early failures are \"hidden\" by subsequent successful transfers.\n\nUsing this option, curl instead returns an error on the first transfer that fails, independent of the amount of URLs that are given on the command line. This way, no transfer failures go undetected by scripts and similar.\n\nThis option does not imply -f, --fail, which causes transfers to fail due to the server's HTTP status code. You can combine the two options, however note -f, --fail is not global and is therefore contained by -:, --next.\n\nThis option is global and does not need to be specified for each use of --next.\n\nProviding --fail-early multiple times has no extra effect. Disable it again with --no-fail-early.\n\nSee also -f, --fail and --fail-with-body.\n\n(HTTP) Return an error on server errors where the HTTP response code is 400 or greater). In normal cases when an HTTP server fails to deliver a document, it returns an HTML document stating so (which often also describes why and more). This option allows curl to output and save that content but also to return error 22.\n\nThis is an alternative option to -f, --fail which makes curl fail for the same circumstances but without saving the content.\n\nProviding --fail-with-body multiple times has no extra effect. Disable it again with --no-fail-with-body.\n\nThis option is mutually exclusive with -f, --fail. Added in 7.76.0. See also -f, --fail and --fail-early.\n\n(TLS) Use false start during the TLS handshake. False start is a mode where a TLS client starts sending application data before verifying the server's Finished message, thus saving a round trip when performing a full handshake.\n\nThis functionality is currently only implemented in the Secure Transport (on iOS 7.0 or later, or macOS 10.9 or later) backend.\n\nProviding --false-start multiple times has no extra effect. Disable it again with --no-false-start.\n\n(HTTP SMTP IMAP) For the HTTP protocol family, emulate a filled-in form in which a user has pressed the submit button. This makes curl POST data using the Content-Type multipart/form-data according to RFC 2388.\n\nFor SMTP and IMAP protocols, this composes a multipart mail message to transmit.\n\nThis enables uploading of binary files etc. To force the 'content' part to be a file, prefix the filename with an @ sign. To just get the content part from a file, prefix the filename with the symbol <. The difference between @ and < is then that @ makes a file get attached in the post as a file upload, while the < makes a text field and just get the contents for that text field from a file.\n\nRead content from stdin instead of a file by using a single \"-\" as filename. This goes for both @ and < constructs. When stdin is used, the contents is buffered in memory first by curl to determine its size and allow a possible resend. Defining a part's data from a named non-regular file (such as a named pipe or similar) is not subject to buffering and is instead read at transmission time; since the full size is unknown before the transfer starts, such data is sent as chunks by HTTP and rejected by IMAP.\n\nExample: send an image to an HTTP server, where 'profile' is the name of the form-field to which the file portrait.jpg is the input:\n\nExample: send your name and shoe size in two text fields to the server:\n\nExample: send your essay in a text field to the server. Send it as a plain text field, but get the contents for it from a local file:\n\nYou can also instruct curl what Content-Type to use by using \"type=\", in a manner similar to:\n\nYou can also explicitly change the name field of a file upload part by setting filename=, like this:\n\nIf filename/path contains ',' or ';', it must be quoted by double-quotes like:\n\nNote that if a filename/path is quoted by double-quotes, any double-quote or backslash within the filename must be escaped by backslash.\n\nQuoting must also be applied to non-file data if it contains semicolons, leading/trailing spaces or leading double quotes:\n\nYou can add custom headers to the field by setting headers=, like\n\nThe headers= keyword may appear more that once and above notes about quoting apply. When headers are read from a file, Empty lines and lines starting with '#' are comments and ignored; each header can be folded by splitting between two words and starting the continuation line with a space; embedded carriage-returns and trailing spaces are stripped. Here is an example of a header file contents:\n\nTo support sending multipart mail messages, the syntax is extended as follows:\n\n- name can be omitted: the equal sign is the first character of the argument,\n\n- if data starts with '(', this signals to start a new multipart: it can be followed by a content type specification.\n\n- a multipart can be terminated with a '=)' argument.\n\nExample: the following command sends an SMTP mime email consisting in an inline part in two alternative formats: plain text and HTML. It attaches a text file:\n\nData can be encoded for transfer using encoder=. Available encodings are binary and 8bit that do nothing else than adding the corresponding Content-Transfer-Encoding header, 7bit that only rejects 8-bit characters with a transfer error, quoted-printable and base64 that encodes data according to the corresponding schemes, limiting lines length to 76 characters.\n\nExample: send multipart mail with a quoted-printable text message and a base64 attached file:\n\nSee further examples and details in the MANUAL.\n\n--form can be used several times in a command line\n\nThis option is mutually exclusive with -d, --data, -I, --head and -T, --upload-file. See also -d, --data, --form-string and --form-escape.\n\n(HTTP imap smtp) Pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.\n\nIf --form-escape is provided several times, the last set value is used.\n\nAdded in 7.81.0. See also -F, --form.\n\n(HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally. Leading @ and < characters, and the \";type=\" string in the value have no special meaning. Use this in preference to -F, --form if there is any possibility that the string value may accidentally trigger the @ or < features of -F, --form.\n\n--form-string can be used several times in a command line\n\n(FTP) When an FTP server asks for \"account data\" after username and password has been provided, this data is sent off using the ACCT command.\n\nIf --ftp-account is provided several times, the last set value is used.\n\n(FTP) If authenticating with the USER and PASS commands fails, send this command. When connecting to Tumbleweed's Secure Transport server over FTPS using a client certificate, using \"SITE AUTH\" tells the server to retrieve the username from the certificate.\n\nIf --ftp-alternative-to-user is provided several times, the last set value is used.\n\nSee also --ftp-account and -u, --user.\n\n(FTP SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail. Using this option, curl instead attempts to create missing directories.\n\nProviding --ftp-create-dirs multiple times has no extra effect. Disable it again with --no-ftp-create-dirs.\n\n(FTP) Control what method curl should use to reach a file on an FTP(S) server. The method argument should be one of the following alternatives:\n\nDo a single CWD operation for each path part in the given URL. For deep hierarchies this means many commands. This is how RFC 1738 says it should be done. This is the default but the slowest behavior.\n\nDo no CWD at all. curl does SIZE, RETR, STOR etc and gives the full path to the server for each of these commands. This is the fastest behavior.\n\nDo one CWD with the full target directory and then operate on the file \"normally\" (like in the multicwd case). This is somewhat more standards compliant than \"nocwd\" but without the full penalty of \"multicwd\".\n\nIf --ftp-method is provided several times, the last set value is used.\n\n(FTP) Use passive mode for the data connection. Passive is the internal default behavior, but using this option can be used to override a previous -P, --ftp-port option.\n\nReversing an enforced passive really is not doable but you must then instead enforce the correct -P, --ftp-port again.\n\nPassive mode means that curl tries the EPSV command first and then PASV, unless --disable-epsv is used.\n\nProviding --ftp-pasv multiple times has no extra effect. Disable it again with --no-ftp-pasv.\n\n(FTP) Reverses the default initiator/listener roles when connecting with FTP. This option makes curl use active mode. curl then commands the server to connect back to the client's specified address and port, while passive mode asks the server to setup an IP address and port for it to connect to. <address> should be one of:\n\ne.g. eth0 to specify which interface's IP address you want to use (Unix only)\n\ne.g. 192.168.10.1 to specify the exact IP address\n\ne.g. my.host.domain to specify the machine\n\nmake curl pick the same IP address that is already used for the control connection. This is the recommended choice.\n\nDisable the use of PORT with --ftp-pasv. Disable the attempt to use the EPRT command instead of PORT by using --disable-eprt. EPRT is really PORT++.\n\nYou can also append \":[start]-[end]\" to the right of the address, to tell curl what TCP port range to use. That means you specify a port range, from a lower to a higher number. A single number works as well, but do note that it increases the risk of failure since the port may not be available.\n\nIf --ftp-port is provided several times, the last set value is used.\n\nSee also --ftp-pasv and --disable-eprt.\n\n(FTP) Send a PRET command before PASV (and EPSV). Certain FTP servers, mainly drftpd, require this non-standard command for directory listings as well as up and downloads in PASV mode.\n\nProviding --ftp-pret multiple times has no extra effect. Disable it again with --no-ftp-pret.\n\nSee also -P, --ftp-port and --ftp-pasv.\n\n(FTP) Do not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection. Instead curl reuses the same IP address it already uses for the control connection.\n\nThis option is enabled by default (added in 7.74.0).\n\nThis option has no effect if PORT, EPRT or EPSV is used instead of PASV.\n\nProviding --ftp-skip-pasv-ip multiple times has no extra effect. Disable it again with --no-ftp-skip-pasv-ip.\n\n(FTP) Use CCC (Clear Command Channel) Shuts down the SSL/TLS layer after authenticating. The rest of the control channel communication is be unencrypted. This allows NAT routers to follow the FTP transaction. The default mode is passive.\n\nProviding --ftp-ssl-ccc multiple times has no extra effect. Disable it again with --no-ftp-ssl-ccc.\n\nSee also --ssl and --ftp-ssl-ccc-mode.\n\n(FTP) Sets the CCC mode. The passive mode does not initiate the shutdown, but instead waits for the server to do it, and does not reply to the shutdown from the server. The active mode initiates the shutdown and waits for a reply from the server.\n\nProviding --ftp-ssl-ccc-mode multiple times has no extra effect. Disable it again with --no-ftp-ssl-ccc-mode.\n\n(FTP) Require SSL/TLS for the FTP login, clear for transfer. Allows secure authentication, but non-encrypted data transfers for efficiency. Fails the transfer if the server does not support SSL/TLS.\n\nProviding --ftp-ssl-control multiple times has no extra effect. Disable it again with --no-ftp-ssl-control.\n\n(HTTP) When used, this option makes all data specified with -d, --data, --data-binary or --data-urlencode to be used in an HTTP GET request instead of the POST request that otherwise would be used. curl appends the provided data to the URL as a query string.\n\nIf used in combination with -I, --head, the POST data is instead appended to the URL with a HEAD request.\n\nProviding --get multiple times has no extra effect. Disable it again with --no-get.\n\nSee also -d, --data and -X, --request.\n\nSwitch off the URL globbing function. When you set this option, you can specify URLs that contain the letters {}[] without having curl itself interpret them. Note that these letters are not normal legal URL contents but they should be encoded according to the URI standard.\n\nProviding --globoff multiple times has no extra effect. Disable it again with --no-globoff.\n\nSee also -K, --config and -q, --disable.\n\nHappy Eyeballs is an algorithm that attempts to connect to both IPv4 and IPv6 addresses for dual-stack hosts, giving IPv6 a head-start of the specified number of milliseconds. If the IPv6 address cannot be connected to within that time, then a connection attempt is made to the IPv4 address in parallel. The first connection to be established is the one that is used.\n\nThe range of suggested useful values is limited. Happy Eyeballs RFC 6555 says \"It is RECOMMENDED that connection attempts be paced 150-250 ms apart to balance human factors against network load.\" libcurl currently defaults to 200 ms. Firefox and Chrome currently default to 300 ms.\n\nIf --happy-eyeballs-timeout-ms is provided several times, the last set value is used.\n\nSee also -m, --max-time and --connect-timeout.\n\n(HTTP) Sets a client IP in HAProxy PROXY protocol v1 header at the beginning of the connection.\n\nFor valid requests, IPv4 addresses must be indicated as a series of exactly 4 integers in the range [0..255] inclusive written in decimal representation separated by exactly one dot between each other. Heading zeroes are not permitted in front of numbers in order to avoid any possible confusion with octal numbers. IPv6 addresses must be indicated as series of 4 hexadecimal digits (upper or lower case) delimited by colons between each other, with the acceptance of one double colon sequence to replace the largest acceptable range of consecutive zeroes. The total number of decoded bits must exactly be 128.\n\nOtherwise, any string can be accepted for the client IP and get sent.\n\nIt replaces --haproxy-protocol if used, it is not necessary to specify both flags.\n\nIf --haproxy-clientip is provided several times, the last set value is used.\n\nAdded in 8.2.0. See also -x, --proxy.\n\n(HTTP) Send a HAProxy PROXY protocol v1 header at the beginning of the connection. This is used by some load balancers and reverse proxies to indicate the client's true IP address and port.\n\nThis option is primarily useful when sending test requests to a service that expects this header.\n\nProviding --haproxy-protocol multiple times has no extra effect. Disable it again with --no-haproxy-protocol.\n\nAdded in 7.60.0. See also -x, --proxy.\n\n(HTTP FTP FILE) Fetch the headers only. HTTP-servers feature the command HEAD which this uses to get nothing but the header of a document. When used on an FTP or FILE URL, curl displays the file size and last modification time only.\n\nProviding --head multiple times has no extra effect. Disable it again with --no-head.\n\nSee also -G, --get, -v, --verbose and --trace-ascii.\n\n(HTTP IMAP SMTP) Extra header to include in information sent. When used within an HTTP request, it is added to the regular request headers.\n\nFor an IMAP or SMTP MIME uploaded mail built with -F, --form options, it is prepended to the resulting MIME document, effectively including it at the mail global level. It does not affect raw uploaded mails.\n\nYou may specify any number of extra headers. Note that if you should add a custom header that has the same name as one of the internal ones curl would use, your externally set header is used instead of the internal one. This allows you to make even trickier stuff than curl would normally do. You should not replace internally set headers without knowing perfectly well what you are doing. Remove an internal header by giving a replacement without content on the right side of the colon, as in: -H \"Host:\". If you send the custom header with no-value then its header must be terminated with a semicolon, such as -H \"X-Custom-Header;\" to send \"X-Custom-Header:\".\n\ncurl makes sure that each header you add/replace is sent with the proper end-of-line marker, you should thus not add that as a part of the header content: do not add newlines or carriage returns, they only mess things up for you. curl passes on the verbatim string you give it without any filter or other safe guards. That includes white space and control characters.\n\nThis option can take an argument in @filename style, which then adds a header for each line in the input file. Using @- makes curl read the header file from stdin.\n\nPlease note that most anti-spam utilities check the presence and value of several MIME mail headers: these are \"From:\", \"To:\", \"Date:\" and \"Subject:\" among others and should be added with this option.\n\nYou need --proxy-header to send custom headers intended for an HTTP proxy.\n\nPassing on a \"Transfer-Encoding: chunked\" header when doing an HTTP request with a request body, makes curl send the data using chunked encoding.\n\nWARNING: headers set with this option are set in all HTTP requests - even after redirects are followed, like when told with -L, --location. This can lead to the header being sent to other hosts than the original host, so sensitive headers should be used with caution combined with following redirects.\n\n\"Authorization:\" and \"Cookie:\" headers are explicitly not passed on in HTTP requests when following redirects to other origins, unless --location-trusted is used.\n\n--header can be used several times in a command line\n\nSee also -A, --user-agent and -e, --referer.\n\nUsage help. Provide help for the subject given as an optional argument.\n\nIf no argument is provided, curl displays the most important command line arguments.\n\nThe argument can either be a category or a command line option. When a category is provided, curl shows all command line options within the given category. Specify category \"all\" to list all available options.\n\nIf \"category\" is specified, curl displays all available help categories.\n\nIf the provided subject is instead an existing command line option, specified either in its short form with a single dash and a single letter, or in the long form with two dashes and a longer name, curl displays a help text for that option in the terminal.\n\nThe help output is extensive for some options.\n\nIf the provided command line option is not known, curl says so.\n\n(SFTP SCP) Pass a string containing 32 hexadecimal digits. The string should be the 128 bit MD5 checksum of the remote host's public key, curl refuses the connection with the host unless the checksums match.\n\nIf --hostpubmd5 is provided several times, the last set value is used.\n\n(SFTP SCP) Pass a string containing a Base64-encoded SHA256 hash of the remote host's public key. curl refuses the connection with the host unless the hashes match.\n\nThis feature requires libcurl to be built with libssh2 and does not work with other SSH backends.\n\nIf --hostpubsha256 is provided several times, the last set value is used.\n\nAdded in 7.80.0. See also --hostpubmd5.\n\n(HTTPS) Enable HSTS for the transfer. If the filename points to an existing HSTS cache file, that is used. After a completed transfer, the cache is saved to the filename again if it has been modified.\n\nIf curl is told to use HTTP:// for a transfer involving a hostname that exists in the HSTS cache, it upgrades the transfer to use HTTPS. Each HSTS cache entry has an individual life time after which the upgrade is no longer performed.\n\nSpecify a \"\" filename (zero length) to avoid loading/saving and make curl just handle HSTS in memory.\n\nIf this option is used several times, curl loads contents from all the files but the last one is used for saving.\n\n--hsts can be used several times in a command line\n\nAdded in 7.74.0. See also --proto.\n\nHTTP/0.9 is a response without headers and therefore you can also connect with this to non-HTTP servers and still get a response since curl simply transparently downgrades - if allowed.\n\nHTTP/0.9 is disabled by default (added in 7.66.0)\n\nProviding --http0.9 multiple times has no extra effect. Disable it again with --no-http0.9.\n\nAdded in 7.64.0. See also --http1.1, --http2 and --http3.\n\n(HTTP) Use HTTP version 1.0 instead of using its internally preferred HTTP version.\n\nThis option is mutually exclusive with --http1.1, --http2, --http2-prior-knowledge and --http3. See also --http0.9 and --http1.1.\n\n(HTTP) Use HTTP version 1.1. This is the default with HTTP:// URLs.\n\nThis option is mutually exclusive with --http1.0, --http2, --http2-prior-knowledge and --http3. See also --http1.0 and --http0.9.\n\nFor HTTPS, this means curl negotiates HTTP/2 in the TLS handshake. curl does this by default.\n\nFor HTTP, this means curl attempts to upgrade the request to HTTP/2 using the Upgrade: request header.\n\nWhen curl uses HTTP/2 over HTTPS, it does not itself insist on TLS 1.2 or higher even though that is required by the specification. A user can add this version requirement with --tlsv1.2.\n\n--http2 requires that libcurl is built to support HTTP/2. This option is mutually exclusive with --http1.1, --http1.0, --http2-prior-knowledge and --http3. See also --http1.1, --http3 and --no-alpn.\n\n(HTTP) Issue a non-TLS HTTP requests using HTTP/2 directly without HTTP/1.1 Upgrade. It requires prior knowledge that the server supports HTTP/2 straight away. HTTPS requests still do HTTP/2 the standard way with negotiated protocol version in the TLS handshake.\n\nSince 8.10.0 if this option is set for an HTTPS request then the application layer protocol version (ALPN) offered to the server is only HTTP/2. Prior to that both HTTP/1.1 and HTTP/2 were offered.\n\nProviding --http2-prior-knowledge multiple times has no extra effect. Disable it again with --no-http2-prior-knowledge.\n\n--http2-prior-knowledge requires that libcurl is built to support HTTP/2. This option is mutually exclusive with --http1.1, --http1.0, --http2 and --http3. See also --http2 and --http3.\n\n(HTTP) Attempt HTTP/3 to the host in the URL, but fallback to earlier HTTP versions if the HTTP/3 connection establishment fails or is slow. HTTP/3 is only available for HTTPS and not for HTTP URLs.\n\nThis option allows a user to avoid using the Alt-Svc method of upgrading to HTTP/3 when you know or suspect that the target speaks HTTP/3 on the given host and port.\n\nWhen asked to use HTTP/3, curl issues a separate attempt to use older HTTP versions with a slight delay, so if the HTTP/3 transfer fails or is slow, curl still tries to proceed with an older HTTP version. The fallback performs the regular negotiation between HTTP/1 and HTTP/2.\n\nUse --http3-only for similar functionality without a fallback.\n\n--http3 requires that libcurl is built to support HTTP/3. This option is mutually exclusive with --http1.1, --http1.0, --http2, --http2-prior-knowledge and --http3-only. Added in 7.66.0. See also --http1.1 and --http2.\n\n(HTTP) Instructs curl to use HTTP/3 to the host in the URL, with no fallback to earlier HTTP versions. HTTP/3 can only be used for HTTPS and not for HTTP URLs. For HTTP, this option triggers an error.\n\nThis option allows a user to avoid using the Alt-Svc method of upgrading to HTTP/3 when you know that the target speaks HTTP/3 on the given host and port.\n\nThis option makes curl fail if a QUIC connection cannot be established, it does not attempt any other HTTP versions on its own. Use --http3 for similar functionality with a fallback.\n\n--http3-only requires that libcurl is built to support HTTP/3. This option is mutually exclusive with --http1.1, --http1.0, --http2, --http2-prior-knowledge and --http3. Added in 7.88.0. See also --http1.1, --http2 and --http3.\n\n(FTP HTTP) For HTTP, ignore the Content-Length header. This is particularly useful for servers running Apache 1.x, which reports incorrect Content-Length for files larger than 2 gigabytes.\n\nFor FTP, this makes curl skip the SIZE command to figure out the size before downloading a file.\n\nProviding --ignore-content-length multiple times has no extra effect. Disable it again with --no-ignore-content-length.\n\n(TLS SFTP SCP) By default, every secure connection curl makes is verified to be secure before the transfer takes place. This option makes curl skip the verification step and proceed without checking.\n\nWhen this option is not used for protocols using TLS, curl verifies the server's TLS certificate before it continues: that the certificate contains the right name which matches the hostname used in the URL and that the certificate has been signed by a CA certificate present in the cert store. See this online resource for further details: https://curl.se/docs/sslcerts.html\n\nFor SFTP and SCP, this option makes curl skip the known_hosts verification. known_hosts is a file normally stored in the user's home directory in the \".ssh\" subdirectory, which contains hostnames and their public keys.\n\nWARNING: using this option makes the transfer insecure.\n\nWhen curl uses secure protocols it trusts responses and allows for example HSTS and Alt-Svc information to be stored and used subsequently. Using -k, --insecure can make curl trust and use such information from malicious servers.\n\nProviding --insecure multiple times has no extra effect. Disable it again with --no-insecure.\n\nSee also --proxy-insecure, --cacert and --capath.\n\nPerform the operation using a specified interface. You can enter interface name, IP address or hostname. If you prefer to be specific, you can use the following special syntax:\n\nInterface name. If the provided name does not match an existing interface, curl returns with error 45.\n\nInterface name and IP address or hostname. This syntax requires libcurl 8.9.0 or later.\n\nIf the provided name does not match an existing interface, curl returns with error 45.\n\ncurl does not support using network interface names for this option on Windows.\n\nThat name resolve operation if a hostname is provided does not use DNS-over-HTTPS even if --doh-url is set.\n\nOn Linux this option can be used to specify a VRF (Virtual Routing and Forwarding) device, but the binary then needs to either have the CAP_NET_RAW capability set or to be run as root.\n\nIf --interface is provided several times, the last set value is used.\n\n(All) Set Type of Service (TOS) for IPv4 or Traffic Class for IPv6.\n\nThe values allowed for <string> can be a numeric value between 1 and 255 or one of the following:\n\nIf --ip-tos is provided several times, the last set value is used.\n\nAdded in 8.9.0. See also --tcp-nodelay and --vlan-priority.\n\n(IPFS) Specify which gateway to use for IPFS and IPNS URLs. Not specifying this instead makes curl check if the IPFS_GATEWAY environment variable is set, or if a \"~/.ipfs/gateway\" file holding the gateway URL exists.\n\nIf you run a local IPFS node, this gateway is by default available under \"http://localhost:8080\". A full example URL would look like:\n\nThere are many public IPFS gateways. See for example: https://ipfs.github.io/public-gateway-checker/\n\nIf you opt to go for a remote gateway you need to be aware that you completely trust the gateway. This might be fine in local gateways that you host yourself. With remote gateways there could potentially be malicious actors returning you data that does not match the request you made, inspect or even interfere with the request. You may not notice this when using curl. A mitigation could be to go for a \"trustless\" gateway. This means you locally verify that the data. Consult the docs page on trusted vs trustless: https://docs.ipfs.tech/reference/http/gateway/#trusted-vs-trustless\n\nIf --ipfs-gateway is provided several times, the last set value is used.\n\nAdded in 8.4.0. See also -h, --help and -M, --manual.\n\nUse IPv4 addresses only when resolving hostnames, and not for example try IPv6.\n\nThis option is mutually exclusive with -6, --ipv6. See also --http1.1 and --http2.\n\nUse IPv6 addresses only when resolving hostnames, and not for example try IPv4.\n\nYour resolver may respond to an IPv6-only resolve request by returning IPv6 addresses that contain \"mapped\" IPv4 addresses for compatibility purposes. macOS is known to do this.\n\nThis option is mutually exclusive with -4, --ipv4. See also --http1.1 and --http2.\n\n(HTTP) Sends the specified JSON data in a POST request to the HTTP server. --json works as a shortcut for passing on these three options:\n\nThere is no verification that the passed in data is actual JSON or that the syntax is correct.\n\nIf you start the data with the letter @, the rest should be a filename to read the data from, or a single dash (-) if you want curl to read the data from stdin. Posting data from a file named 'foobar' would thus be done with --json @foobar and to instead read the data from stdin, use --json @-.\n\nIf this option is used more than once on the same command line, the additional data pieces are concatenated to the previous before sending.\n\nThe headers this option sets can be overridden with -H, --header as usual.\n\n--json can be used several times in a command line\n\nThis option is mutually exclusive with -F, --form, -I, --head and -T, --upload-file. Added in 7.82.0. See also --data-binary and --data-raw.\n\n(HTTP) When curl is told to read cookies from a given file, this option makes it discard all \"session cookies\". This has the same effect as if a new session is started. Typical browsers discard session cookies when they are closed down.\n\nProviding --junk-session-cookies multiple times has no extra effect. Disable it again with --no-junk-session-cookies.\n\nSee also -b, --cookie and -c, --cookie-jar.\n\nSet the maximum number of keepalive probes TCP should send but get no response before dropping the connection. This option is usually used in conjunction with --keepalive-time.\n\nThis option is supported on Linux, *BSD/macOS, Windows >=10.0.16299, Solaris 11.4, and recent AIX, HP-UX and more. This option has no effect if --no-keepalive is used.\n\nIf unspecified, the option defaults to 9.\n\nIf --keepalive-cnt is provided several times, the last set value is used.\n\nAdded in 8.9.0. See also --keepalive-time and --no-keepalive.\n\nSet the time a connection needs to remain idle before sending keepalive probes and the time between individual keepalive probes. It is currently effective on operating systems offering the \"TCP_KEEPIDLE\" and \"TCP_KEEPINTVL\" socket options (meaning Linux, *BSD/macOS, Windows, Solaris, and recent AIX, HP-UX and more). Keepalive is used by the TCP stack to detect broken networks on idle connections. The number of missed keepalive probes before declaring the connection down is OS dependent and is commonly 8 (*BSD/macOS/AIX), 9 (Linux/AIX) or 5/10 (Windows), and this number can be changed by specifying the curl option \"keepalive-cnt\". Note that this option has no effect if --no-keepalive is used.\n\nIf unspecified, the option defaults to 60 seconds.\n\nIf --keepalive-time is provided several times, the last set value is used.\n\nSee also --no-keepalive, --keepalive-cnt and -m, --max-time.\n\n(TLS SSH) Private key filename. Allows you to provide your private key in this separate file. For SSH, if not specified, curl tries the following candidates in order: \"~/.ssh/id_rsa\", \"~/.ssh/id_dsa\", \"./id_rsa\", \"./id_dsa\".\n\nIf curl is built against OpenSSL library, and the engine pkcs11 or pkcs11 provider is available, then a PKCS#11 URI (RFC 7512) can be used to specify a private key located in a PKCS#11 device. A string beginning with \"pkcs11:\" is interpreted as a PKCS#11 URI. If a PKCS#11 URI is provided, then the --engine option is set as \"pkcs11\" if none was provided and the --key-type option is set as \"ENG\" or \"PROV\" if none was provided (depending on OpenSSL version).\n\nIf curl is built against Secure Transport or Schannel then this option is ignored for TLS protocols (HTTPS, etc). Those backends expect the private key to be already present in the keychain or PKCS#12 file containing the certificate.\n\nIf --key is provided several times, the last set value is used.\n\nSee also --key-type and -E, --cert.\n\n(TLS) Private key file type. Specify which type your --key provided private key is. DER, PEM, and ENG are supported. If not specified, PEM is assumed.\n\nIf --key-type is provided several times, the last set value is used.\n\n(FTP) Enable Kerberos authentication and use. The level must be entered and should be one of 'clear', 'safe', 'confidential', or 'private'. Should you use a level that is not one of these, 'private' is used.\n\nIf --krb is provided several times, the last set value is used.\n\n--krb requires that libcurl is built to support Kerberos. See also --delegation and --ssl.\n\nAppend this option to any ordinary curl command line, and you get libcurl-using C source code written to the file that does the equivalent of what your command-line operation does.\n\nThis option is global and does not need to be specified for each use of --next.\n\nIf --libcurl is provided several times, the last set value is used.\n\nSpecify the maximum transfer rate you want curl to use - for both downloads and uploads. This feature is useful if you have a limited pipe and you would like your transfer not to use your entire bandwidth. To make it slower than it otherwise would be.\n\nThe given speed is measured in bytes/second, unless a suffix is appended. Appending 'k' or 'K' counts the number as kilobytes, 'm' or 'M' makes it megabytes, while 'g' or 'G' makes it gigabytes. The suffixes (k, M, G, T, P) are 1024 based. For example 1k is 1024. Examples: 200K, 3m and 1G.\n\nThe rate limiting logic works on averaging the transfer speed to no more than the set threshold over a period of multiple seconds.\n\nIf you also use the -Y, --speed-limit option, that option takes precedence and might cripple the rate-limiting slightly, to help keeping the speed-limit logic working.\n\nIf --limit-rate is provided several times, the last set value is used.\n\nSee also --rate, -Y, --speed-limit and -y, --speed-time.\n\n(FTP POP3 SFTP FILE) When listing an FTP directory, force a name-only view. Maybe particularly useful if the user wants to machine-parse the contents of an FTP directory since the normal directory view does not use a standard look or format. When used like this, the option causes an NLST command to be sent to the server instead of LIST.\n\nNote: Some FTP servers list only files in their response to NLST; they do not include sub-directories and symbolic links.\n\nWhen listing an SFTP directory, this switch forces a name-only view, one per line. This is especially useful if the user wants to machine-parse the contents of an SFTP directory since the normal directory view provides more information than just filenames.\n\nWhen retrieving a specific email from POP3, this switch forces a LIST command to be performed instead of RETR. This is particularly useful if the user wants to see if a specific message-id exists on the server and what size it is.\n\nFor FILE, this option has no effect yet as directories are always listed in this mode.\n\nNote: When combined with -X, --request, this option can be used to send a UIDL command instead, so the user may use the email's unique identifier rather than its message-id to make the request.\n\nProviding --list-only multiple times has no extra effect. Disable it again with --no-list-only.\n\nSee also -Q, --quote and -X, --request.\n\nSet a preferred single number or range (FROM-TO) of local port numbers to use for the connection(s). Note that port numbers by nature are a scarce resource so setting this range to something too narrow might cause unnecessary connection setup failures.\n\nIf --local-port is provided several times, the last set value is used.\n\n(HTTP) If the server reports that the requested page has moved to a different location (indicated with a Location: header and a 3XX response code), this option makes curl redo the request to the new place. If used together with -i, --show-headers or -I, --head, headers from all requested pages are shown.\n\nWhen authentication is used, or when sending a cookie with \"-H Cookie:\", curl only sends its credentials to the initial host. If a redirect takes curl to a different host, it does not get the credentials passed on. See --location-trusted on how to change this.\n\nLimit the amount of redirects to follow by using the --max-redirs option.\n\nWhen curl follows a redirect and if the request is a POST, it sends the following request with a GET if the HTTP response was 301, 302, or 303. If the response code was any other 3xx code, curl resends the following request using the same unmodified method.\n\nYou can tell curl to not change POST requests to GET after a 30x response by using the dedicated options for that: --post301, --post302 and --post303.\n\nThe method set with -X, --request overrides the method curl would otherwise select to use.\n\nProviding --location multiple times has no extra effect. Disable it again with --no-location.\n\nSee also --resolve and --alt-svc.\n\n(HTTP) Instructs curl to like -L, --location follow HTTP redirects, but permits it to send credentials and other secrets along to other hosts than the initial one.\n\nThis may or may not introduce a security breach if the site redirects you to a site to which you send this sensitive data to. Another host means that one or more of hostname, protocol scheme or port number changed.\n\nThis option also allows curl to pass long cookies set explicitly with -H, --header.\n\nProviding --location-trusted multiple times has no extra effect. Disable it again with --no-location-trusted.\n\n(IMAP LDAP POP3 SMTP) Specify the login options to use during server authentication.\n\nYou can use login options to specify protocol specific options that may be used during authentication. At present only IMAP, POP3 and SMTP support login options. For more information about login options please see RFC 2384, RFC 5092 and the IETF draft https://datatracker.ietf.org/doc/html/draft-earhart-url-smtp-00\n\nSince 8.2.0, IMAP supports the login option \"AUTH=+LOGIN\". With this option, curl uses the plain (not SASL) \"LOGIN IMAP\" command even if the server advertises SASL authentication. Care should be taken in using this option, as it sends your password over the network in plain text. This does not work if the IMAP server disables the plain \"LOGIN\" (e.g. to prevent password snooping).\n\nIf --login-options is provided several times, the last set value is used.\n\n(SMTP) Specify a single address. This is used to specify the authentication address (identity) of a submitted message that is being relayed to another server.\n\nIf --mail-auth is provided several times, the last set value is used.\n\nSee also --mail-rcpt and --mail-from.\n\n(SMTP) Specify a single address that the given mail should get sent from.\n\nIf --mail-from is provided several times, the last set value is used.\n\nSee also --mail-rcpt and --mail-auth.\n\n(SMTP) Specify a single email address, username or mailing list name. Repeat this option several times to send to multiple recipients.\n\nWhen performing an address verification (VRFY command), the recipient should be specified as the username or username and domain (as per Section 3.5 of RFC 5321).\n\nWhen performing a mailing list expand (EXPN command), the recipient should be specified using the mailing list name, such as \"Friends\" or \"London-Office\".\n\n--mail-rcpt can be used several times in a command line\n\n(SMTP) When sending data to multiple recipients, by default curl aborts SMTP conversation if at least one of the recipients causes RCPT TO command to return an error.\n\nThe default behavior can be changed by passing --mail-rcpt-allowfails command-line option which makes curl ignore errors and proceed with the remaining valid recipients.\n\nIf all recipients trigger RCPT TO failures and this flag is specified, curl still aborts the SMTP conversation and returns the error received from to the last RCPT TO command.\n\nProviding --mail-rcpt-allowfails multiple times has no extra effect. Disable it again with --no-mail-rcpt-allowfails.\n\nAdded in 7.69.0. See also --mail-rcpt.\n\nSee also -v, --verbose, --libcurl and --trace.\n\n(FTP HTTP MQTT) When set to a non-zero value, it specifies the maximum size (in bytes) of a file to download. If the file requested is larger than this value, the transfer does not start and curl returns with exit code 63.\n\nSetting the maximum value to zero disables the limit.\n\nA size modifier may be used. For example, Appending 'k' or 'K' counts the number as kilobytes, 'm' or 'M' makes it megabytes, while 'g' or 'G' makes it gigabytes. Examples: 200K, 3m and 1G.\n\nNOTE: before curl 8.4.0, when the file size is not known prior to download, for such files this option has no effect even if the file transfer ends up being larger than this given limit.\n\nStarting with curl 8.4.0, this option aborts the transfer if it reaches the threshold during transfer.\n\nIf --max-filesize is provided several times, the last set value is used.\n\n(HTTP) Set maximum number of redirections to follow. When -L, --location is used, to prevent curl from following too many redirects, by default, the limit is set to 50 redirects. Set this option to -1 to make it unlimited.\n\nIf --max-redirs is provided several times, the last set value is used.\n\nSet maximum time in seconds that you allow each transfer to take. Prevents your batch jobs from hanging for hours due to slow networks or links going down. This option accepts decimal values.\n\nIf you enable retrying the transfer (--retry) then the maximum time counter is reset each time the transfer is retried. You can use --retry-max-time to limit the retry time.\n\nThe decimal value needs to be provided using a dot (.) as decimal separator - not the local version even if it might be using another separator.\n\nIf --max-time is provided several times, the last set value is used.\n\nSee also --connect-timeout and --retry-max-time.\n\nThis option was previously used to specify a Metalink resource. Metalink support is disabled in curl for security reasons (added in 7.78.0).\n\nIf --metalink is provided several times, the last set value is used.\n\nEnables the use of Multipath TCP (MPTCP) for connections. MPTCP is an extension to the standard TCP that allows multiple TCP streams over different network paths between the same source and destination. This can enhance bandwidth and improve reliability by using multiple paths simultaneously.\n\nMPTCP is beneficial in networks where multiple paths exist between clients and servers, such as mobile networks where a device may switch between WiFi and cellular data or in wired networks with multiple Internet Service Providers.\n\nThis option is currently only supported on Linux starting from kernel 5.6. Only TCP connections are modified, hence this option does not effect HTTP/3 (QUIC) or UDP connections.\n\nThe server curl connects to must also support MPTCP. If not, the connection seamlessly falls back to TCP.\n\nProviding --mptcp multiple times has no extra effect. Disable it again with --no-mptcp.\n\nAdded in 8.9.0. See also --tcp-fastopen.\n\nThis option requires a library built with GSS-API or SSPI support. Use -V, --version to see if your curl supports GSS-API/SSPI or SPNEGO.\n\nWhen using this option, you must also provide a fake -u, --user option to activate the authentication code properly. Sending a '-u :' is enough as the username and password from the -u, --user option are not actually used.\n\nSee also --basic, --ntlm, --anyauth and --proxy-negotiate.\n\nMake curl scan the .netrc file in the user's home directory for login name and password. This is typically used for FTP on Unix. If used with HTTP, curl enables user authentication. See netrc(5) and ftp(1) for details on the file format. curl does not complain if that file does not have the right permissions (it should be neither world- nor group-readable). The environment variable \"HOME\" is used to find the home directory.\n\nOn Windows two filenames in the home directory are checked: .netrc and _netrc, preferring the former. Older versions on Windows checked for _netrc only.\n\nA quick and simple example of how to setup a .netrc to allow curl to FTP to the machine host.example.com with username 'myself' and password 'secret' could look similar to:\n\nProviding --netrc multiple times has no extra effect. Disable it again with --no-netrc.\n\nThis option is mutually exclusive with --netrc-file and --netrc-optional. See also --netrc-file, -K, --config and -u, --user.\n\nSet the netrc file to use. Similar to -n, --netrc, except that you also provide the path (absolute or relative).\n\nIt abides by --netrc-optional if specified.\n\nIf --netrc-file is provided several times, the last set value is used.\n\nThis option is mutually exclusive with -n, --netrc. See also -n, --netrc, -u, --user and -K, --config.\n\nSimilar to -n, --netrc, but this option makes the .netrc usage optional and not mandatory as the -n, --netrc option does.\n\nProviding --netrc-optional multiple times has no extra effect. Disable it again with --no-netrc-optional.\n\nThis option is mutually exclusive with -n, --netrc. See also --netrc-file.\n\nUse a separate operation for the following URL and associated options. This allows you to send several URL requests, each with their own specific options, for example, such as different usernames or custom requests for each.\n\n-:, --next resets all local options and only global ones have their values survive over to the operation following the -:, --next instruction. Global options include -v, --verbose, --trace, --trace-ascii and --fail-early.\n\nFor example, you can do both a GET and a POST in a single command line:\n\n--next can be used several times in a command line\n\nSee also -Z, --parallel and -K, --config.\n\n(HTTPS) Disable the ALPN TLS extension. ALPN is enabled by default if libcurl was built with an SSL library that supports ALPN. ALPN is used by a libcurl that supports HTTP/2 to negotiate HTTP/2 support with the server during https sessions.\n\nNote that this is the negated option name documented. You can use --alpn to enable ALPN.\n\nProviding --no-alpn multiple times has no extra effect. Disable it again with --alpn.\n\n--no-alpn requires that libcurl is built to support TLS. See also --no-npn and --http2.\n\nDisables the buffering of the output stream. In normal work situations, curl uses a standard buffered output stream that has the effect that it outputs the data in chunks, not necessarily exactly when the data arrives. Using this option disables that buffering.\n\nNote that this is the negated option name documented. You can use --buffer to enable buffering again.\n\nProviding --no-buffer multiple times has no extra effect. Disable it again with --buffer.\n\nWhen used in conjunction with the -o, --output, -J, --remote-header-name, -O, --remote-name, or --remote-name-all options, curl avoids overwriting files that already exist. Instead, a dot and a number gets appended to the name of the file that would be created, up to filename.100 after which it does not create any file.\n\nNote that this is the negated option name documented. You can thus use --clobber to enforce the clobbering, even if -J, --remote-header-name is specified.\n\nThe -C, --continue-at option cannot be used together with --no-clobber.\n\nProviding --no-clobber multiple times has no extra effect. Disable it again with --clobber.\n\nAdded in 7.83.0. See also -o, --output and -O, --remote-name.\n\nDisables the use of keepalive messages on the TCP connection. curl otherwise enables them by default.\n\nNote that this is the negated option name documented. You can thus use --keepalive to enforce keepalive.\n\nProviding --no-keepalive multiple times has no extra effect. Disable it again with --keepalive.\n\nSee also --keepalive-time and --keepalive-cnt.\n\n(HTTPS) curl never uses NPN, this option has no effect (added in 7.86.0).\n\nDisable the NPN TLS extension. NPN is enabled by default if libcurl was built with an SSL library that supports NPN. NPN is used by a libcurl that supports HTTP/2 to negotiate HTTP/2 support with the server during https sessions.\n\nProviding --no-npn multiple times has no extra effect. Disable it again with --npn.\n\n--no-npn requires that libcurl is built to support TLS. See also --no-alpn and --http2.\n\nOption to switch off the progress meter output without muting or otherwise affecting warning and informational messages like -s, --silent does.\n\nNote that this is the negated option name documented. You can thus use --progress-meter to enable the progress meter again.\n\nProviding --no-progress-meter multiple times has no extra effect. Disable it again with --progress-meter.\n\nAdded in 7.67.0. See also -v, --verbose and -s, --silent.\n\n(TLS) Disable curl's use of SSL session-ID caching. By default all transfers are done using the cache. Note that while nothing should ever get hurt by attempting to reuse SSL session-IDs, there seem to be broken SSL implementations in the wild that may require you to disable this in order for you to succeed.\n\nNote that this is the negated option name documented. You can thus use --sessionid to enforce session-ID caching.\n\nProviding --no-sessionid multiple times has no extra effect. Disable it again with --sessionid.\n\nComma-separated list of hosts for which not to use a proxy, if one is specified. The only wildcard is a single \"*\" character, which matches all hosts, and effectively disables the proxy. Each name in this list is matched as either a domain which contains the hostname, or the hostname itself. For example, \"local.com\" would match \"local.com\", \"local.com:80\", and \"www.local.com\", but not \"www.notlocal.com\".\n\nThis option overrides the environment variables that disable the proxy (\"no_proxy\" and \"NO_PROXY\"). If there is an environment variable disabling a proxy, you can set the no proxy list to \"\" to override it.\n\nIP addresses specified to this option can be provided using CIDR notation (added in 7.86.0): an appended slash and number specifies the number of network bits out of the address to use in the comparison. For example \"192.168.0.0/16\" would match all addresses starting with \"192.168\".\n\nIf --noproxy is provided several times, the last set value is used.\n\n(HTTP) Use NTLM authentication. The NTLM authentication method was designed by Microsoft and is used by IIS web servers. It is a proprietary protocol, reverse-engineered by clever people and implemented in curl based on their efforts. This kind of behavior should not be endorsed, you should encourage everyone who uses NTLM to switch to a public and documented authentication method instead, such as Digest.\n\nIf you want to enable NTLM for your proxy authentication, then use --proxy-ntlm.\n\n--ntlm requires that libcurl is built to support TLS. This option is mutually exclusive with --basic, --negotiate, --digest and --anyauth. See also --proxy-ntlm.\n\nEnabled NTLM much in the style --ntlm does, but handed over the authentication to a separate executable that was executed when needed.\n\nSee also --ntlm and --proxy-ntlm.\n\n(IMAP LDAP POP3 SMTP HTTP) Specify the Bearer Token for OAUTH 2.0 server authentication. The Bearer Token is used in conjunction with the username which can be specified as part of the --url or -u, --user options.\n\nThe Bearer Token and username are formatted according to RFC 6750.\n\nIf --oauth2-bearer is provided several times, the last set value is used.\n\nSee also --basic, --ntlm and --digest.\n\nWrite output to the given file instead of stdout. If you are using globbing to fetch multiple documents, you should quote the URL and you can use \"#\" followed by a number in the filename. That variable is then replaced with the current string for the URL being fetched. Like in:\n\nor use several variables like:\n\nYou may use this option as many times as the number of URLs you have. For example, if you specify two URLs on the same command line, you can use it like this:\n\nand the order of the -o options and the URLs does not matter, just that the first -o is for the first URL and so on, so the above command line can also be written as\n\nSee also the --create-dirs option to create the local directories dynamically. Specifying the output as '-' (a single dash) passes the output to stdout.\n\nTo suppress response bodies, you can redirect output to /dev/null:\n\nSpecify the filename as single minus to force the output to stdout, to override curl's internal binary output in terminal prevention:\n\n--output is associated with a single URL. Use it once per URL when you use several URLs in a command line.\n\nSee also -O, --remote-name, --remote-name-all and -J, --remote-header-name.\n\nSpecify the directory in which files should be stored, when -O, --remote-name or -o, --output are used.\n\nThe given output directory is used for all URLs and output options on the command line, up until the first -:, --next.\n\nIf the specified target directory does not exist, the operation fails unless --create-dirs is also used.\n\nIf --output-dir is provided several times, the last set value is used.\n\nAdded in 7.73.0. See also -O, --remote-name and -J, --remote-header-name.\n\nMakes curl perform all transfers in parallel as compared to the regular serial manner. Parallel transfer means that curl runs up to N concurrent transfers simultaneously and if there are more than N transfers to handle, it starts new ones when earlier transfers finish.\n\nWith parallel transfers, the progress meter output is different than when doing serial transfers, as it then displays the transfer status for multiple transfers in a single line.\n\nThe maximum amount of concurrent transfers is set with --parallel-max and it defaults to 50.\n\nThis option is global and does not need to be specified for each use of --next.\n\nProviding --parallel multiple times has no extra effect. Disable it again with --no-parallel.\n\nAdded in 7.66.0. See also -:, --next, -v, --verbose, --parallel-max and --parallel-immediate.\n\nWhen doing parallel transfers, this option instructs curl to prefer opening up more connections in parallel at once rather than waiting to see if new transfers can be added as multiplexed streams on another connection.\n\nBy default, without this option set, curl prefers to wait a little and multiplex new transfers over existing connections. It keeps the number of connections low at the expense of risking a slightly slower transfer startup.\n\nThis option is global and does not need to be specified for each use of --next.\n\nProviding --parallel-immediate multiple times has no extra effect. Disable it again with --no-parallel-immediate.\n\nAdded in 7.68.0. See also -Z, --parallel and --parallel-max.\n\nWhen asked to do parallel transfers, using -Z, --parallel, this option controls the maximum amount of transfers to do simultaneously.\n\nThe default is 50. 300 is the largest supported value.\n\nThis option is global and does not need to be specified for each use of --next.\n\nIf --parallel-max is provided several times, the last set value is used.\n\nAdded in 7.66.0. See also -Z, --parallel.\n\nIf --pass is provided several times, the last set value is used.\n\nSee also --key and -u, --user.\n\nDo not handle sequences of /../ or /./ in the given URL path. Normally curl squashes or merges them according to standards but with this option set you tell it not to do that.\n\nProviding --path-as-is multiple times has no extra effect. Disable it again with --no-path-as-is.\n\n(TLS) Use the specified public key file (or hashes) to verify the peer. This can be a path to a file which contains a single public key in PEM or DER format, or any number of base64 encoded sha256 hashes preceded by 'sha256//' and separated by ';'.\n\nWhen negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key is extracted from this certificate and if it does not exactly match the public key provided to this option, curl aborts the connection before sending or receiving any data.\n\nThis option is independent of option -k, --insecure. If you use both options together then the peer is still verified by public key.\n\nIf --pinnedpubkey is provided several times, the last set value is used.\n\n(HTTP) Respect RFC 7231/6.4.2 and do not convert POST requests into GET requests when following a 301 redirect. The non-RFC behavior is ubiquitous in web browsers, so curl does the conversion by default to maintain consistency. However, a server may require a POST to remain a POST after such a redirection. This option is meaningful only when using -L, --location.\n\nProviding --post301 multiple times has no extra effect. Disable it again with --no-post301.\n\nSee also --post302, --post303 and -L, --location.\n\n(HTTP) Respect RFC 7231/6.4.3 and do not convert POST requests into GET requests when following a 302 redirect. The non-RFC behavior is ubiquitous in web browsers, so curl does the conversion by default to maintain consistency. However, a server may require a POST to remain a POST after such a redirection. This option is meaningful only when using -L, --location.\n\nProviding --post302 multiple times has no extra effect. Disable it again with --no-post302.\n\nSee also --post301, --post303 and -L, --location.\n\n(HTTP) Violate RFC 7231/6.4.4 and do not convert POST requests into GET requests when following 303 redirect. A server may require a POST to remain a POST after a 303 redirection. This option is meaningful only when using -L, --location.\n\nProviding --post303 multiple times has no extra effect. Disable it again with --no-post303.\n\nSee also --post302, --post301 and -L, --location.\n\nUse the specified SOCKS proxy before connecting to an HTTP or HTTPS -x, --proxy. In such a case curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy. Hence pre proxy.\n\nThe pre proxy string should be specified with a protocol:// prefix to specify alternative proxy protocols. Use socks4://, socks4a://, socks5:// or socks5h:// to request the specific SOCKS version to be used. No protocol specified makes curl default to SOCKS4.\n\nIf the port number is not specified in the proxy string, it is assumed to be 1080.\n\nUser and password that might be provided in the proxy string are URL decoded by curl. This allows you to pass in special characters such as @ by using %40 or pass in a colon with %3a.\n\nIf --preproxy is provided several times, the last set value is used.\n\nSee also -x, --proxy and --socks5.\n\nMake curl display transfer progress as a simple progress bar instead of the standard, more informational, meter.\n\nThis progress bar draws a single line of '#' characters across the screen and shows a percentage if the transfer size is known. For transfers without a known size, there is a space ship (-=o=-) that moves back and forth but only while data is being transferred, with a set of flying hash sign symbols on top.\n\nThis option is global and does not need to be specified for each use of --next.\n\nProviding --progress-bar multiple times has no extra effect. Disable it again with --no-progress-bar.\n\nLimit what protocols to allow for transfers. Protocols are evaluated left to right, are comma separated, and are each a protocol name or 'all', optionally prefixed by zero or more modifiers. Available modifiers are:\n\nPermit this protocol in addition to protocols already permitted (this is the default if no modifier is used).\n\nDeny this protocol, removing it from the list of protocols already permitted.\n\nPermit only this protocol (ignoring the list already permitted), though subject to later modification by subsequent entries in the comma separated list.\n\nFor example: --proto -ftps uses the default protocols, but disables ftps\n\n--proto =http,https also only enables http and https\n\nUnknown and disabled protocols produce a warning. This allows scripts to safely rely on being able to disable potentially dangerous protocols, without relying upon support for that protocol being built into curl to avoid an error.\n\nThis option can be used multiple times, in which case the effect is the same as concatenating the protocols into one instance of the option.\n\nIf --proto is provided several times, the last set value is used.\n\nSee also --proto-redir and --proto-default.\n\nUse protocol for any provided URL missing a scheme.\n\nAn unknown or unsupported protocol causes error CURLE_UNSUPPORTED_PROTOCOL.\n\nThis option does not change the default proxy protocol (http).\n\nWithout this option set, curl guesses protocol based on the hostname, see --url for details.\n\nIf --proto-default is provided several times, the last set value is used.\n\nSee also --proto and --proto-redir.\n\nLimit what protocols to allow on redirects. Protocols denied by --proto are not overridden by this option. See --proto for how protocols are represented.\n\nExample, allow only HTTP and HTTPS on redirect:\n\nBy default curl only allows HTTP, HTTPS, FTP and FTPS on redirects (added in 7.65.2). Specifying all or +all enables all protocols on redirects, which is not good for security.\n\nIf --proto-redir is provided several times, the last set value is used.\n\nUse the specified proxy.\n\nThe proxy string can be specified with a protocol:// prefix. No protocol specified or http:// it is treated as an HTTP proxy. Use socks4://, socks4a://, socks5:// or socks5h:// to request a specific SOCKS version to be used.\n\nUnix domain sockets are supported for socks proxy. Set localhost for the host part. e.g. socks5h://localhost/path/to/socket.sock\n\nHTTPS proxy support works set with the https:// protocol prefix for OpenSSL and GnuTLS. It also works for BearSSL, mbedTLS, Rustls, Schannel, Secure Transport and wolfSSL (added in 7.87.0).\n\nUnrecognized and unsupported proxy protocols cause an error. Ancient curl versions ignored unknown schemes and used http:// instead.\n\nIf the port number is not specified in the proxy string, it is assumed to be 1080.\n\nThis option overrides existing environment variables that set the proxy to use. If there is an environment variable setting a proxy, you can set proxy to \"\" to override it.\n\nAll operations that are performed over an HTTP proxy are transparently converted to HTTP. It means that certain protocol specific operations might not be available. This is not the case if you can tunnel through the proxy, as one with the -p, --proxytunnel option.\n\nUser and password that might be provided in the proxy string are URL decoded by curl. This allows you to pass in special characters such as @ by using %40 or pass in a colon with %3a.\n\nThe proxy host can be specified the same way as the proxy environment variables, including the protocol prefix (http://) and the embedded user + password.\n\nWhen a proxy is used, the active FTP mode as set with -P, --ftp-port, cannot be used.\n\nDoing FTP over an HTTP proxy without -p, --proxytunnel makes curl do HTTP with an FTP URL over the proxy. For such transfers, common FTP specific options do not work, including --ssl-reqd and --ftp-ssl-control.\n\nIf --proxy is provided several times, the last set value is used.\n\nSee also --socks5 and --proxy-basic.\n\nAutomatically pick a suitable authentication method when communicating with the given HTTP proxy. This might cause an extra request/response round-trip.\n\nSee also -x, --proxy, --proxy-basic and --proxy-digest.\n\nUse HTTP Basic authentication when communicating with the given proxy. Use --basic for enabling HTTP Basic with a remote host. Basic is the default authentication method curl uses with proxies.\n\nSee also -x, --proxy, --proxy-anyauth and --proxy-digest.\n\n(TLS) Use the operating system's native CA store for certificate verification of the HTTPS proxy.\n\nThis option is independent of other HTTPS proxy CA certificate locations set at run time or build time. Those locations are searched in addition to the native CA store.\n\nEquivalent to --ca-native but used in HTTPS proxy context. Refer to --ca-native for TLS backend limitations.\n\nProviding --proxy-ca-native multiple times has no extra effect. Disable it again with --no-proxy-ca-native.\n\nAdded in 8.2.0. See also --ca-native, --cacert, --capath, --dump-ca-embed and -k, --insecure.\n\nUse the specified certificate file to verify the HTTPS proxy. The file may contain multiple CA certificates. The certificate(s) must be in PEM format.\n\nThis allows you to use a different trust for the proxy compared to the remote server connected to via the proxy.\n\nEquivalent to --cacert but used in HTTPS proxy context.\n\nIf --proxy-cacert is provided several times, the last set value is used.\n\nSee also --proxy-capath, --cacert, --capath, --dump-ca-embed and -x, --proxy.\n\nSame as --capath but used in HTTPS proxy context.\n\nUse the specified certificate directory to verify the proxy. Multiple paths can be provided by separated with colon (\":\") (e.g. \"path1:path2:path3\"). The certificates must be in PEM format, and if curl is built against OpenSSL, the directory must have been processed using the c_rehash utility supplied with OpenSSL. Using --proxy-capath can allow OpenSSL-powered curl to make SSL-connections much more efficiently than using --proxy-cacert if the --proxy-cacert file contains many CA certificates.\n\nIf this option is set, the default capath value is ignored.\n\nIf --proxy-capath is provided several times, the last set value is used.\n\nSee also --proxy-cacert, -x, --proxy, --capath and --dump-ca-embed.\n\nUse the specified client certificate file when communicating with an HTTPS proxy. The certificate must be in PKCS#12 format if using Secure Transport, or PEM format if using any other engine. If the optional password is not specified, it is queried for on the terminal. Use --proxy-key to provide the private key.\n\nThis option is the equivalent to -E, --cert but used in HTTPS proxy context.\n\nIf --proxy-cert is provided several times, the last set value is used.\n\nSee also -x, --proxy, --proxy-key and --proxy-cert-type.\n\nSet type of the provided client certificate when using HTTPS proxy. PEM, DER, ENG, PROV and P12 are recognized types.\n\nThe default type depends on the TLS backend and is usually PEM, however for Secure Transport and Schannel it is P12. If --proxy-cert is a pkcs11: URI then ENG or PROV is the default type (depending on OpenSSL version).\n\nEquivalent to --cert-type but used in HTTPS proxy context.\n\nIf --proxy-cert-type is provided several times, the last set value is used.\n\nSee also --proxy-cert and --proxy-key.\n\n(TLS) Same as --ciphers but used in HTTPS proxy context.\n\nSpecify which cipher suites to use in the connection to your HTTPS proxy when it negotiates TLS 1.2 (1.1, 1.0). The list of ciphers suites must specify valid ciphers. Read up on cipher suite details on this URL:\n\nIf --proxy-ciphers is provided several times, the last set value is used.\n\nSee also --proxy-tls13-ciphers, --ciphers and -x, --proxy.\n\nProvide filename for a PEM formatted file with a Certificate Revocation List that specifies peer certificates that are considered revoked when communicating with an HTTPS proxy.\n\nEquivalent to --crlfile but only used in HTTPS proxy context.\n\nIf --proxy-crlfile is provided several times, the last set value is used.\n\nSee also --crlfile and -x, --proxy.\n\nUse HTTP Digest authentication when communicating with the given proxy. Use --digest for enabling HTTP Digest with a remote host.\n\nSee also -x, --proxy, --proxy-anyauth and --proxy-basic.\n\n(HTTP) Extra header to include in the request when sending HTTP to a proxy. You may specify any number of extra headers. This is the equivalent option to -H, --header but is for proxy communication only like in CONNECT requests when you want a separate header sent to the proxy to what is sent to the actual remote host.\n\ncurl makes sure that each header you add/replace is sent with the proper end-of-line marker, you should thus not add that as a part of the header content: do not add newlines or carriage returns, they only mess things up for you.\n\nHeaders specified with this option are not included in requests that curl knows are not be sent to a proxy.\n\nThis option can take an argument in @filename style, which then adds a header for each line in the input file. Using @- makes curl read the headers from stdin.\n\nThis option can be used multiple times to add/replace/remove multiple headers.\n\n--proxy-header can be used several times in a command line\n\n(HTTP) Negotiate HTTP/2 with an HTTPS proxy. The proxy might still only offer HTTP/1 and then curl sticks to using that version.\n\nThis has no effect for any other kinds of proxies.\n\nProviding --proxy-http2 multiple times has no extra effect. Disable it again with --no-proxy-http2.\n\n--proxy-http2 requires that libcurl is built to support HTTP/2. Added in 8.1.0. See also -x, --proxy.\n\nSame as -k, --insecure but used in HTTPS proxy context.\n\nEvery secure connection curl makes is verified to be secure before the transfer takes place. This option makes curl skip the verification step with a proxy and proceed without checking.\n\nWhen this option is not used for a proxy using HTTPS, curl verifies the proxy's TLS certificate before it continues: that the certificate contains the right name which matches the hostname and that the certificate has been signed by a CA certificate present in the cert store. See this online resource for further details: https://curl.se/docs/sslcerts.html\n\nWARNING: using this option makes the transfer to the proxy insecure.\n\nProviding --proxy-insecure multiple times has no extra effect. Disable it again with --no-proxy-insecure.\n\nSee also -x, --proxy and -k, --insecure.\n\nSpecify the filename for your private key when using client certificates with your HTTPS proxy. This option is the equivalent to --key but used in HTTPS proxy context.\n\nIf --proxy-key is provided several times, the last set value is used.\n\nSee also --proxy-key-type and -x, --proxy.\n\nSpecify the private key file type your --proxy-key provided private key uses. DER, PEM, and ENG are supported. If not specified, PEM is assumed.\n\nEquivalent to --key-type but used in HTTPS proxy context.\n\nIf --proxy-key-type is provided several times, the last set value is used.\n\nSee also --proxy-key and -x, --proxy.\n\nUse HTTP Negotiate (SPNEGO) authentication when communicating with the given proxy. Use --negotiate for enabling HTTP Negotiate (SPNEGO) with a remote host.\n\nSee also --proxy-anyauth, --proxy-basic and --proxy-service-name.\n\nUse HTTP NTLM authentication when communicating with the given proxy. Use --ntlm for enabling NTLM with a remote host.\n\nSee also --proxy-negotiate, --proxy-anyauth and -U, --proxy-user.\n\nPassphrase for the private key for HTTPS proxy client certificate.\n\nEquivalent to --pass but used in HTTPS proxy context.\n\nIf --proxy-pass is provided several times, the last set value is used.\n\nSee also -x, --proxy and --proxy-key.\n\n(TLS) Use the specified public key file (or hashes) to verify the proxy. This can be a path to a file which contains a single public key in PEM or DER format, or any number of base64 encoded sha256 hashes preceded by 'sha256//' and separated by ';'.\n\nWhen negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key is extracted from this certificate and if it does not exactly match the public key provided to this option, curl aborts the connection before sending or receiving any data.\n\nBefore curl 8.10.0 this option did not work due to a bug.\n\nIf --proxy-pinnedpubkey is provided several times, the last set value is used.\n\nSee also --pinnedpubkey and -x, --proxy.\n\nSet the service name for SPNEGO when doing proxy authentication.\n\nIf --proxy-service-name is provided several times, the last set value is used.\n\nSee also --service-name, -x, --proxy and --proxy-negotiate.\n\nDo not work around a security flaw in the TLS1.0 protocol known as BEAST when communicating to an HTTPS proxy. If this option is not used, the TLS layer may use workarounds known to cause interoperability problems with some older server implementations.\n\nThis option only changes how curl does TLS 1.0 with an HTTPS proxy and has no effect on later TLS versions.\n\nWARNING: this option loosens the TLS security, and by using this flag you ask for exactly that.\n\nEquivalent to --ssl-allow-beast but used in HTTPS proxy context.\n\nProviding --proxy-ssl-allow-beast multiple times has no extra effect. Disable it again with --no-proxy-ssl-allow-beast.\n\nSee also --ssl-allow-beast and -x, --proxy.\n\nSame as --ssl-auto-client-cert but used in HTTPS proxy context.\n\nThis is only supported by Schannel.\n\nProviding --proxy-ssl-auto-client-cert multiple times has no extra effect. Disable it again with --no-proxy-ssl-auto-client-cert.\n\nAdded in 7.77.0. See also --ssl-auto-client-cert and -x, --proxy.\n\n(TLS) Same as --tls13-ciphers but used in HTTPS proxy context.\n\nSpecify which cipher suites to use in the connection to your HTTPS proxy when it negotiates TLS 1.3. The list of ciphers suites must specify valid ciphers. Read up on TLS 1.3 cipher suite details on this URL:\n\nThis option is used when curl is built to use OpenSSL 1.1.1 or later, Schannel, wolfSSL, or mbedTLS 3.6.0 or later.\n\nBefore curl 8.10.0 with mbedTLS or wolfSSL, TLS 1.3 cipher suites were set by using the --proxy-ciphers option.\n\nIf --proxy-tls13-ciphers is provided several times, the last set value is used.\n\nAdded in 7.61.0. See also --proxy-ciphers, --tls13-ciphers and -x, --proxy.\n\nSet TLS authentication type with HTTPS proxy. The only supported option is \"SRP\", for TLS-SRP (RFC 5054). This option works only if the underlying libcurl is built with TLS-SRP support.\n\nEquivalent to --tlsauthtype but used in HTTPS proxy context.\n\nIf --proxy-tlsauthtype is provided several times, the last set value is used.\n\nSee also -x, --proxy, --proxy-tlsuser and --proxy-tlspassword.\n\nSet password to use with the TLS authentication method specified with --proxy-tlsauthtype when using HTTPS proxy. Requires that --proxy-tlsuser is set.\n\nThis option does not work with TLS 1.3.\n\nEquivalent to --tlspassword but used in HTTPS proxy context.\n\nIf --proxy-tlspassword is provided several times, the last set value is used.\n\nSee also -x, --proxy and --proxy-tlsuser.\n\nSet username for use for HTTPS proxy with the TLS authentication method specified with --proxy-tlsauthtype. Requires that --proxy-tlspassword also is set.\n\nThis option does not work with TLS 1.3.\n\nIf --proxy-tlsuser is provided several times, the last set value is used.\n\nSee also -x, --proxy and --proxy-tlspassword.\n\nUse at least TLS version 1.x when negotiating with an HTTPS proxy. That means TLS version 1.0 or higher\n\nEquivalent to -1, --tlsv1 but for an HTTPS proxy context.\n\nSpecify the username and password to use for proxy authentication.\n\nIf you use a Windows SSPI-enabled curl binary and do either Negotiate or NTLM authentication then you can tell curl to select the username and password from your environment by specifying a single colon with this option: \"-U :\".\n\nOn systems where it works, curl hides the given option argument from process listings. This is not enough to protect credentials from possibly getting seen by other users on the same system as they still are visible for a moment before cleared. Such sensitive data should be retrieved from a file instead or similar and never used in clear text in a command line.\n\nIf --proxy-user is provided several times, the last set value is used.\n\nUse the specified HTTP 1.0 proxy. If the port number is not specified, it is assumed at port 1080.\n\nThe only difference between this and the HTTP proxy option -x, --proxy, is that attempts to use CONNECT through the proxy specifies an HTTP 1.0 protocol instead of the default HTTP 1.1.\n\nSee also -x, --proxy, --socks5 and --preproxy.\n\nWhen an HTTP proxy is used -x, --proxy, this option makes curl tunnel the traffic through the proxy. The tunnel approach is made with the HTTP proxy CONNECT request and requires that the proxy allows direct connect to the remote port number curl wants to tunnel through to.\n\nTo suppress proxy CONNECT response headers when curl is set to output headers use --suppress-connect-headers.\n\nProviding --proxytunnel multiple times has no extra effect. Disable it again with --no-proxytunnel.\n\n(SFTP SCP) Public key filename. Allows you to provide your public key in this separate file.\n\ncurl attempts to automatically extract the public key from the private key file, so passing this option is generally not required. Note that this public key extraction requires libcurl to be linked against a copy of libssh2 1.2.8 or higher that is itself linked against OpenSSL.\n\nIf --pubkey is provided several times, the last set value is used.\n\n(FTP SFTP) Send an arbitrary command to the remote FTP or SFTP server. Quote commands are sent BEFORE the transfer takes place (just after the initial PWD command in an FTP transfer, to be exact). To make commands take place after a successful transfer, prefix them with a dash '-'.\n\n(FTP only) To make commands be sent after curl has changed the working directory, just before the file transfer command(s), prefix the command with a '+'. This is not performed when a directory listing is performed.\n\nYou may specify any number of commands.\n\nBy default curl stops at first failure. To make curl continue even if the command fails, prefix the command with an asterisk (*). Otherwise, if the server returns failure for one of the commands, the entire operation is aborted.\n\nYou must send syntactically correct FTP commands as RFC 959 defines to FTP servers, or one of the commands listed below to SFTP servers.\n\nSFTP is a binary protocol. Unlike for FTP, curl interprets SFTP quote commands itself before sending them to the server. Filenames may be quoted shell-style to embed spaces or special characters. Following is the list of all supported SFTP quote commands:\n\nThe atime command sets the last access time of the file named by the file operand. The date expression can be all sorts of date strings, see the curl_getdate(3) man page for date expression details. (Added in 7.73.0)\n\nThe chgrp command sets the group ID of the file named by the file operand to the group ID specified by the group operand. The group operand is a decimal integer group ID.\n\nThe chmod command modifies the file mode bits of the specified file. The mode operand is an octal integer mode number.\n\nThe chown command sets the owner of the file named by the file operand to the user ID specified by the user operand. The user operand is a decimal integer user ID.\n\nThe ln and symlink commands create a symbolic link at the target_file location pointing to the source_file location.\n\nThe mkdir command creates the directory named by the directory_name operand.\n\nThe mtime command sets the last modification time of the file named by the file operand. The date expression can be all sorts of date strings, see the curl_getdate(3) man page for date expression details. (Added in 7.73.0)\n\nThe pwd command returns the absolute path name of the current working directory.\n\nThe rename command renames the file or directory named by the source operand to the destination path named by the target operand.\n\nThe rm command removes the file specified by the file operand.\n\nThe rmdir command removes the directory entry specified by the directory operand, provided it is empty.\n\n--quote can be used several times in a command line\n\nDeprecated option. This option is ignored (added in 7.84.0). Prior to that it only had an effect on curl if built to use old versions of OpenSSL.\n\nSpecify the path name to file containing random data. The data may be used to seed the random engine for SSL connections.\n\nIf --random-file is provided several times, the last set value is used.\n\n(HTTP FTP SFTP FILE) Retrieve a byte range (i.e. a partial document) from an HTTP/1.1, FTP or SFTP server or a local FILE. Ranges can be specified in a number of ways.\n\nspecifies the bytes from offset 9500 and forward\n\nspecifies the first and last byte only(*)(HTTP)\n\n(*) = NOTE that if specifying multiple ranges and the server supports it then it replies with a multiple part response that curl returns as-is. It contains meta information in addition to the requested bytes. Parsing or otherwise transforming this response is the responsibility of the caller.\n\nOnly digit characters (0-9) are valid in the 'start' and 'stop' fields of the 'start-stop' range syntax. If a non-digit character is given in the range, the server's response is unspecified, depending on the server's configuration.\n\nMany HTTP/1.1 servers do not have this feature enabled, so that when you attempt to get a range, curl instead gets the whole document.\n\nFTP and SFTP range downloads only support the simple 'start-stop' syntax (optionally with one of the numbers omitted). FTP use depends on the extended FTP command SIZE.\n\nThis command line option is mutually exclusive with -C, --continue-at: you can only use one of them for a single transfer.\n\nIf --range is provided several times, the last set value is used.\n\nSee also -C, --continue-at and -a, --append.\n\nSpecify the maximum transfer frequency you allow curl to use - in number of transfer starts per time unit (sometimes called request rate). Without this option, curl starts the next transfer as fast as possible.\n\nIf given several URLs and a transfer completes faster than the allowed rate, curl waits until the next transfer is started to maintain the requested rate. This option has no effect when -Z, --parallel is used.\n\nThe request rate is provided as \"N/U\" where N is an integer number and U is a time unit. Supported units are 's' (second), 'm' (minute), 'h' (hour) and 'd' /(day, as in a 24 hour unit). The default time unit, if no \"/U\" is provided, is number of transfers per hour.\n\nIf curl is told to allow 10 requests per minute, it does not start the next request until 6 seconds have elapsed since the previous transfer was started.\n\nThis function uses millisecond resolution. If the allowed frequency is set more than 1000 per second, it instead runs unrestricted.\n\nWhen retrying transfers, enabled with --retry, the separate retry delay logic is used and not this setting.\n\nStarting in version 8.10.0, you can specify number of time units in the rate expression. Make curl do no more than 5 transfers per 15 seconds with \"5/15s\" or limit it to 3 transfers per 4 hours with \"3/4h\". No spaces allowed.\n\nThis option is global and does not need to be specified for each use of --next.\n\nIf --rate is provided several times, the last set value is used.\n\nAdded in 7.84.0. See also --limit-rate and --retry-delay.\n\n(HTTP) When used, it disables all internal HTTP decoding of content or transfer encodings and instead makes them passed on unaltered, raw.\n\nProviding --raw multiple times has no extra effect. Disable it again with --no-raw.\n\n(HTTP) Set the referrer URL in the HTTP request. This can also be set with the -H, --header flag of course. When used with -L, --location you can append \";auto\"\" to the -e, --referer URL to make curl automatically set the previous URL when it follows a Location: header. The \";auto\" string can be used alone, even if you do not set an initial -e, --referer.\n\nIf --referer is provided several times, the last set value is used.\n\nSee also -A, --user-agent and -H, --header.\n\n(HTTP) Tell the -O, --remote-name option to use the server-specified Content-Disposition filename instead of extracting a filename from the URL. If the server-provided filename contains a path, that is stripped off before the filename is used.\n\nThe file is saved in the current directory, or in the directory specified with --output-dir.\n\nIf the server specifies a filename and a file with that name already exists in the destination directory, it is not overwritten and an error occurs - unless you allow it by using the --clobber option. If the server does not specify a filename then this option has no effect.\n\nThere is no attempt to decode %-sequences (yet) in the provided filename, so this option may provide you with rather unexpected filenames.\n\nThis feature uses the name from the \"filename\" field, it does not yet support the \"filename*\" field (filenames with explicit character sets).\n\nWARNING: Exercise judicious use of this option, especially on Windows. A rogue server could send you the name of a DLL or other file that could be loaded automatically by Windows or some third party software.\n\nProviding --remote-header-name multiple times has no extra effect. Disable it again with --no-remote-header-name.\n\nWrite output to a local file named like the remote file we get. (Only the file part of the remote file is used, the path is cut off.)\n\nThe file is saved in the current working directory. If you want the file saved in a different directory, make sure you change the current working directory before invoking curl with this option or use --output-dir.\n\nThe remote filename to use for saving is extracted from the given URL, nothing else, and if it already exists it is overwritten. If you want the server to be able to choose the filename refer to -J, --remote-header-name which can be used in addition to this option. If the server chooses a filename and that name already exists it is not overwritten.\n\nThere is no URL decoding done on the filename. If it has %20 or other URL encoded parts of the name, they end up as-is as filename.\n\nYou may use this option as many times as the number of URLs you have.\n\nBefore curl 8.10.0, curl returned an error if the URL ended with a slash, which means that there is no filename part in the URL. Starting in 8.10.0, curl sets the filename to the last directory part of the URL or if that also is missing to \"curl_response\" (without extension) for this situation.\n\n--remote-name is associated with a single URL. Use it once per URL when you use several URLs in a command line.\n\nSee also --remote-name-all, --output-dir and -J, --remote-header-name.\n\nChange the default action for all given URLs to be dealt with as if -O, --remote-name were used for each one. If you want to disable that for a specific URL after --remote-name-all has been used, you must use \"-o -\" or --no-remote-name.\n\nProviding --remote-name-all multiple times has no extra effect. Disable it again with --no-remote-name-all.\n\nMakes curl attempt to figure out the timestamp of the remote file that is getting downloaded, and if that is available make the local file get that same timestamp.\n\nProviding --remote-time multiple times has no extra effect. Disable it again with --no-remote-time.\n\nSee also -O, --remote-name and -z, --time-cond.\n\nRemove output file if an error occurs. If curl returns an error when told to save output in a local file. This prevents curl from leaving a partial file in the case of an error during transfer.\n\nIf the output is not a regular file, this option has no effect.\n\nThe -C, --continue-at option cannot be used together with --remove-on-error.\n\nProviding --remove-on-error multiple times has no extra effect. Disable it again with --no-remove-on-error.\n\nAdded in 7.83.0. See also -f, --fail.\n\nChange the method to use when starting the transfer.\n\ncurl passes on the verbatim string you give it in the request without any filter or other safe guards. That includes white space and control characters.\n\nSpecifies a custom request method to use when communicating with the HTTP server. The specified request method is used instead of the method otherwise used (which defaults to GET). Read the HTTP 1.1 specification for details and explanations. Common additional HTTP requests include PUT and DELETE, while related technologies like WebDAV offers PROPFIND, COPY, MOVE and more.\n\nNormally you do not need this option. All sorts of GET, HEAD, POST and PUT requests are rather invoked by using dedicated command line options.\n\nThis option only changes the actual word used in the HTTP request, it does not alter the way curl behaves. For example if you want to make a proper HEAD request, using -X HEAD does not suffice. You need to use the -I, --head option.\n\nThe method string you set with -X, --request is used for all requests, which if you for example use -L, --location may cause unintended side-effects when curl does not change request method according to the HTTP 30x response codes - and similar.\n\nSpecifies a custom FTP command to use instead of LIST when doing file lists with FTP.\n\nSpecifies a custom POP3 command to use instead of LIST or RETR.\n\nSpecifies a custom IMAP command to use instead of LIST.\n\nSpecifies a custom SMTP command to use instead of HELP or VRFY.\n\nIf --request is provided several times, the last set value is used.\n\n(HTTP) Use an alternative target (path) instead of using the path as provided in the URL. Particularly useful when wanting to issue HTTP requests without leading slash or other data that does not follow the regular URL pattern, like \"OPTIONS *\".\n\ncurl passes on the verbatim string you give it its the request without any filter or other safe guards. That includes white space and control characters.\n\nIf --request-target is provided several times, the last set value is used.\n\nProvide a custom address for a specific host and port pair. Using this, you can make the curl requests(s) use a specified address and prevent the otherwise normally resolved address to be used. Consider it a sort of /etc/hosts alternative provided on the command line. The port number should be the number used for the specific protocol the host is used for. It means you need several entries if you want to provide addresses for the same host but different ports.\n\nBy specifying \"*\" as host you can tell curl to resolve any host and specific port pair to the specified address. Wildcard is resolved last so any --resolve with a specific host and port is used first.\n\nThe provided address set by this option is used even if -4, --ipv4 or -6, --ipv6 is set to make curl use another IP version.\n\nBy prefixing the host with a '+' you can make the entry time out after curl's default timeout (1 minute). Note that this only makes sense for long running parallel transfers with a lot of files. In such cases, if this option is used curl tries to resolve the host as it normally would once the timeout has expired.\n\nTo redirect connects from a specific hostname or any hostname, independently of port number, consider the --connect-to option.\n\nSupport for resolving with wildcard was added in 7.64.0.\n\nSupport for the '+' prefix was added in 7.75.0.\n\nSupport for specifying the host component as an IPv6 address was added in 8.13.0.\n\n--resolve can be used several times in a command line\n\nSee also --connect-to and --alt-svc.\n\nIf a transient error is returned when curl tries to perform a transfer, it retries this number of times before giving up. Setting the number to 0 makes curl do no retries (which is the default). Transient error means either: a timeout, an FTP 4xx response code or an HTTP 408, 429, 500, 502, 503 or 504 response code.\n\nWhen curl is about to retry a transfer, it first waits one second and then for all forthcoming retries it doubles the waiting time until it reaches 10 minutes which then remains delay between the rest of the retries. By using --retry-delay you disable this exponential backoff algorithm. See also --retry-max-time to limit the total time allowed for retries.\n\ncurl complies with the Retry-After: response header if one was present to know when to issue the next retry (added in 7.66.0).\n\nIf --retry is provided several times, the last set value is used.\n\nRetry on any error. This option is used together with --retry.\n\nThis option is the \"sledgehammer\" of retrying. Do not use this option by default (for example in your curlrc), there may be unintended consequences such as sending or receiving duplicate data. Do not use with redirected input or output. You might be better off handling your unique problems in a shell script. Please read the example below.\n\nWARNING: For server compatibility curl attempts to retry failed flaky transfers as close as possible to how they were started, but this is not possible with redirected input or output. For example, before retrying it removes output data from a failed partial transfer that was written to an output file. However this is not true of data redirected to a | pipe or > file, which are not reset. We strongly suggest you do not parse or record output via redirect in combination with this option, since you may receive duplicate data.\n\nBy default curl does not return error for transfers with an HTTP response code that indicates an HTTP error, if the transfer was successful. For example, if a server replies 404 Not Found and the reply is fully received then that is not an error. When --retry is used then curl retries on some HTTP response codes that indicate transient HTTP errors, but that does not include most 4xx response codes such as 404. If you want to retry on all response codes that indicate HTTP errors (4xx and 5xx) then combine with -f, --fail.\n\nProviding --retry-all-errors multiple times has no extra effect. Disable it again with --no-retry-all-errors.\n\nAdded in 7.71.0. See also --retry.\n\nIn addition to the other conditions, consider ECONNREFUSED as a transient error too for --retry. This option is used together with --retry.\n\nProviding --retry-connrefused multiple times has no extra effect. Disable it again with --no-retry-connrefused.\n\nSee also --retry and --retry-all-errors.\n\nMake curl sleep this amount of time before each retry when a transfer has failed with a transient error (it changes the default backoff time algorithm between retries). This option is only interesting if --retry is also used. Setting this delay to zero makes curl use the default backoff time.\n\nIf --retry-delay is provided several times, the last set value is used.\n\nThe retry timer is reset before the first transfer attempt. Retries are done as usual (see --retry) as long as the timer has not reached this given limit. Notice that if the timer has not reached the limit, the request is made and while performing, it may take longer than this given time period. To limit a single request's maximum time, use -m, --max-time. Set this option to zero to not timeout retries.\n\nIf --retry-max-time is provided several times, the last set value is used.\n\nUse this authorization identity (authzid), during SASL PLAIN authentication, in addition to the authentication identity (authcid) as specified by -u, --user.\n\nIf the option is not specified, the server derives the authzid from the authcid, but if specified, and depending on the server implementation, it may be used to access another user's inbox, that the user has been granted access to, or a shared mailbox for example.\n\nIf --sasl-authzid is provided several times, the last set value is used.\n\nAdded in 7.66.0. See also --login-options.\n\nProviding --sasl-ir multiple times has no extra effect. Disable it again with --no-sasl-ir.\n\nSet the service name for SPNEGO.\n\nIf --service-name is provided several times, the last set value is used.\n\nSee also --negotiate and --proxy-service-name.\n\nWhen used with -s, --silent, it makes curl show an error message if it fails.\n\nThis option is global and does not need to be specified for each use of --next.\n\nProviding --show-error multiple times has no extra effect. Disable it again with --no-show-error.\n\n(HTTP FTP) Show response headers in the output. HTTP response headers can include things like server name, cookies, date of the document, HTTP version and more. With non-HTTP protocols, the \"headers\" are other server communication.\n\nThis option makes the response headers get saved in the same stream/output as the data. -D, --dump-header exists to save headers in a separate stream.\n\nTo view the request headers, consider the -v, --verbose option.\n\nPrior to 7.75.0 curl did not print the headers if -f, --fail was used in combination with this option and there was error reported by server.\n\nThis option was called --include before 8.10.0. The previous name remains functional.\n\nProviding --show-headers multiple times has no extra effect. Disable it again with --no-show-headers.\n\nSee also -v, --verbose and -D, --dump-header.\n\nSilent or quiet mode. Do not show progress meter or error messages. Makes curl mute. It still outputs the data you ask for, potentially even to the terminal/stdout unless you redirect it.\n\nUse -S, --show-error in addition to this option to disable progress meter but still show error messages.\n\nProviding --silent multiple times has no extra effect. Disable it again with --no-silent.\n\nSee also -v, --verbose, --stderr and --no-progress-meter.\n\nIf there is a local file present when a download is requested, the operation is skipped. Note that curl cannot know if the local file was previously downloaded fine, or if it is incomplete etc, it just knows if there is a filename present in the file system or not and it skips the transfer if it is.\n\nProviding --skip-existing multiple times has no extra effect. Disable it again with --no-skip-existing.\n\nAdded in 8.10.0. See also -o, --output, -O, --remote-name and --no-clobber.\n\nUse the specified SOCKS4 proxy. If the port number is not specified, it is assumed at port 1080. Using this socket type make curl resolve the hostname and passing the address on to the proxy.\n\nTo specify proxy on a Unix domain socket, use localhost for host, e.g. \"socks4://localhost/path/to/socket.sock\"\n\nThis option overrides any previous use of -x, --proxy, as they are mutually exclusive.\n\nThis option is superfluous since you can specify a socks4 proxy with -x, --proxy using a socks4:// protocol prefix.\n\n--preproxy can be used to specify a SOCKS proxy at the same time proxy is used with an HTTP/HTTPS proxy. In such a case, curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy.\n\nIf --socks4 is provided several times, the last set value is used.\n\nSee also --socks4a, --socks5 and --socks5-hostname.\n\nUse the specified SOCKS4a proxy. If the port number is not specified, it is assumed at port 1080. This asks the proxy to resolve the hostname.\n\nTo specify proxy on a Unix domain socket, use localhost for host, e.g. \"socks4a://localhost/path/to/socket.sock\"\n\nThis option overrides any previous use of -x, --proxy, as they are mutually exclusive.\n\nThis option is superfluous since you can specify a socks4a proxy with -x, --proxy using a socks4a:// protocol prefix.\n\n--preproxy can be used to specify a SOCKS proxy at the same time -x, --proxy is used with an HTTP/HTTPS proxy. In such a case, curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy.\n\nIf --socks4a is provided several times, the last set value is used.\n\nSee also --socks4, --socks5 and --socks5-hostname.\n\nUse the specified SOCKS5 proxy - but resolve the hostname locally. If the port number is not specified, it is assumed at port 1080.\n\nTo specify proxy on a Unix domain socket, use localhost for host, e.g. \"socks5://localhost/path/to/socket.sock\"\n\nThis option overrides any previous use of -x, --proxy, as they are mutually exclusive.\n\nThis option is superfluous since you can specify a socks5 proxy with -x, --proxy using a socks5:// protocol prefix.\n\n--preproxy can be used to specify a SOCKS proxy at the same time -x, --proxy is used with an HTTP/HTTPS proxy. In such a case, curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy.\n\nThis option does not work with FTPS or LDAP.\n\nIf --socks5 is provided several times, the last set value is used.\n\nSee also --socks5-hostname and --socks4a.\n\nUse username/password authentication when connecting to a SOCKS5 proxy. The username/password authentication is enabled by default. Use --socks5-gssapi to force GSS-API authentication to SOCKS5 proxies.\n\nUse GSS-API authentication when connecting to a SOCKS5 proxy. The GSS-API authentication is enabled by default (if curl is compiled with GSS-API support). Use --socks5-basic to force username/password authentication to SOCKS5 proxies.\n\nProviding --socks5-gssapi multiple times has no extra effect. Disable it again with --no-socks5-gssapi.\n\nAs part of the GSS-API negotiation a protection mode is negotiated. RFC 1961 says in section 4.3/4.4 it should be protected, but the NEC reference implementation does not. The option --socks5-gssapi-nec allows the unprotected exchange of the protection mode negotiation.\n\nProviding --socks5-gssapi-nec multiple times has no extra effect. Disable it again with --no-socks5-gssapi-nec.\n\nSet the service name for a socks server. Default is rcmd/server-fqdn.\n\nIf --socks5-gssapi-service is provided several times, the last set value is used.\n\nUse the specified SOCKS5 proxy (and let the proxy resolve the hostname). If the port number is not specified, it is assumed at port 1080.\n\nTo specify proxy on a Unix domain socket, use localhost for host, e.g. \"socks5h://localhost/path/to/socket.sock\"\n\nThis option overrides any previous use of -x, --proxy, as they are mutually exclusive.\n\nThis option is superfluous since you can specify a socks5 hostname proxy with -x, --proxy using a socks5h:// protocol prefix.\n\n--preproxy can be used to specify a SOCKS proxy at the same time -x, --proxy is used with an HTTP/HTTPS proxy. In such a case, curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy.\n\nIf --socks5-hostname is provided several times, the last set value is used.\n\nSee also --socks5 and --socks4a.\n\nIf a transfer is slower than this set speed (in bytes per second) for a given number of seconds, it gets aborted. The time period is set with -y, --speed-time and is 30 seconds by default.\n\nIf --speed-limit is provided several times, the last set value is used.\n\nSee also -y, --speed-time, --limit-rate and -m, --max-time.\n\nIf a transfer runs slower than speed-limit bytes per second during a speed-time period, the transfer is aborted. If speed-time is used, the default speed-limit is 1 unless set with -Y, --speed-limit.\n\nThis option controls transfers (in both directions) but does not affect slow connects etc. If this is a concern for you, try the --connect-timeout option.\n\nIf --speed-time is provided several times, the last set value is used.\n\nSee also -Y, --speed-limit and --limit-rate.\n\n(FTP IMAP POP3 SMTP LDAP) Warning: this is considered an insecure option. Consider using --ssl-reqd instead to be sure curl upgrades to a secure connection.\n\nTry to use SSL/TLS for the connection - often referred to as STARTTLS or STLS because of the involved commands. Reverts to a non-secure connection if the server does not support SSL/TLS. See also --ftp-ssl-control and --ssl-reqd for different levels of encryption required.\n\nThis option is handled in LDAP (added in 7.81.0). It is fully supported by the OpenLDAP backend and ignored by the generic ldap backend.\n\nPlease note that a server may close the connection if the negotiation does not succeed.\n\nThis option was formerly known as --ftp-ssl. That option name can still be used but might be removed in a future version.\n\nProviding --ssl multiple times has no extra effect. Disable it again with --no-ssl.\n\nSee also --ssl-reqd, -k, --insecure and --ciphers.\n\n(TLS) Do not work around a security flaw in the TLS1.0 protocol known as BEAST. If this option is not used, the TLS layer may use workarounds known to cause interoperability problems with some older server implementations.\n\nThis option only changes how curl does TLS 1.0 and has no effect on later TLS versions.\n\nWARNING: this option loosens the TLS security, and by using this flag you ask for exactly that.\n\nProviding --ssl-allow-beast multiple times has no extra effect. Disable it again with --no-ssl-allow-beast.\n\nSee also --proxy-ssl-allow-beast and -k, --insecure.\n\n(TLS) (Schannel) Automatically locate and use a client certificate for authentication, when requested by the server. Since the server can request any certificate that supports client authentication in the OS certificate store it could be a privacy violation and unexpected.\n\nProviding --ssl-auto-client-cert multiple times has no extra effect. Disable it again with --no-ssl-auto-client-cert.\n\nAdded in 7.77.0. See also --proxy-ssl-auto-client-cert.\n\n(TLS) (Schannel) Disable certificate revocation checks. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that.\n\nProviding --ssl-no-revoke multiple times has no extra effect. Disable it again with --no-ssl-no-revoke.\n\n(FTP IMAP POP3 SMTP LDAP) Require SSL/TLS for the connection - often referred to as STARTTLS or STLS because of the involved commands. Terminates the connection if the transfer cannot be upgraded to use SSL/TLS.\n\nThis option is handled in LDAP (added in 7.81.0). It is fully supported by the OpenLDAP backend and rejected by the generic ldap backend if explicit TLS is required.\n\nThis option is unnecessary if you use a URL scheme that in itself implies immediate and implicit use of TLS, like for FTPS, IMAPS, POP3S, SMTPS and LDAPS. Such a transfer always fails if the TLS handshake does not work.\n\nThis option was formerly known as --ftp-ssl-reqd.\n\nProviding --ssl-reqd multiple times has no extra effect. Disable it again with --no-ssl-reqd.\n\nSee also --ssl and -k, --insecure.\n\n(TLS) (Schannel) Ignore certificate revocation checks when they failed due to missing/offline distribution points for the revocation check lists.\n\nProviding --ssl-revoke-best-effort multiple times has no extra effect. Disable it again with --no-ssl-revoke-best-effort.\n\nAdded in 7.70.0. See also --crlfile and -k, --insecure.\n\n(TLS) Use the given file to load SSL session tickets into curl's cache before starting any transfers. At the end of a successful curl run, the cached SSL sessions tickets are save to the file, replacing any previous content.\n\nThe file does not have to exist, but curl reports an error if it is unable to create it. Unused loaded tickets are saved again, unless they get replaced or purged from the cache for space reasons.\n\nUsing a session file allows \"--tls-earlydata\" to send the first request in \"0-RTT\" mode, should an SSL session with the feature be found. Note that a server may not support early data. Also note that early data does not provide forward secrecy, e.g. is not as secure.\n\nThe SSL session tickets are stored as base64 encoded text, each ticket on its own line. The hostnames are cryptographically salted and hashed. While this prevents someone to easily see the hosts you contacted, they could still check if a specific hostname matches one of the values.\n\nIf --ssl-sessions is provided several times, the last set value is used.\n\nAdded in 8.12.0. See also --tls-earlydata.\n\n(SSL) This option previously asked curl to use SSLv2, but is now ignored (added in 7.77.0). SSLv2 is widely considered insecure (see RFC 6176).\n\n-2, --sslv2 requires that libcurl is built to support TLS. This option is mutually exclusive with -3, --sslv3, -1, --tlsv1, --tlsv1.1 and --tlsv1.2. See also --http1.1 and --http2.\n\n(SSL) This option previously asked curl to use SSLv3, but is now ignored (added in 7.77.0). SSLv3 is widely considered insecure (see RFC 7568).\n\n-3, --sslv3 requires that libcurl is built to support TLS. This option is mutually exclusive with -2, --sslv2, -1, --tlsv1, --tlsv1.1 and --tlsv1.2. See also --http1.1 and --http2.\n\nRedirect all writes to stderr to the specified file instead. If the filename is a plain '-', it is instead written to stdout.\n\nThis option is global and does not need to be specified for each use of --next.\n\nIf --stderr is provided several times, the last set value is used.\n\nSee also -v, --verbose and -s, --silent.\n\nEnable automatic use of bold font styles when writing HTTP headers to the terminal. Use --no-styled-output to switch them off.\n\nStyled output requires a terminal that supports bold fonts. This feature is not present on curl for Windows due to lack of this capability.\n\nThis option is global and does not need to be specified for each use of --next.\n\nProviding --styled-output multiple times has no extra effect. Disable it again with --no-styled-output.\n\nAdded in 7.61.0. See also -I, --head and -v, --verbose.\n\nWhen -p, --proxytunnel is used and a CONNECT request is made do not output proxy CONNECT response headers. This option is meant to be used with -D, --dump-header or -i, --show-headers which are used to show protocol headers in the output. It has no effect on debug options such as -v, --verbose or --trace, or any statistics.\n\nProviding --suppress-connect-headers multiple times has no extra effect. Disable it again with --no-suppress-connect-headers.\n\nSee also -D, --dump-header, -i, --show-headers and -p, --proxytunnel.\n\nEnable use of TCP Fast Open (RFC 7413). TCP Fast Open is a TCP extension that allows data to get sent earlier over the connection (before the final handshake ACK) if the client and server have been connected previously.\n\nProviding --tcp-fastopen multiple times has no extra effect. Disable it again with --no-tcp-fastopen.\n\nTurn on the TCP_NODELAY option. See the curl_easy_setopt(3) man page for details about this option.\n\ncurl sets this option by default and you need to explicitly switch it off if you do not want it on.\n\nProviding --tcp-nodelay multiple times has no extra effect. Disable it again with --no-tcp-nodelay.\n\nPass options to the telnet protocol. Supported options are:\n\n--telnet-option can be used several times in a command line\n\n(TFTP) Set the TFTP BLKSIZE option (must be 512 or larger). This is the block size that curl tries to use when transferring data to or from a TFTP server. By default 512 bytes are used.\n\nIf --tftp-blksize is provided several times, the last set value is used.\n\n(TFTP) Do not to send TFTP options requests. This improves interop with some legacy servers that do not acknowledge or properly implement TFTP options. When this option is used --tftp-blksize is ignored.\n\nProviding --tftp-no-options multiple times has no extra effect. Disable it again with --no-tftp-no-options.\n\n(HTTP FTP) Request a file that has been modified later than the given time and date, or one that has been modified before that time. The date expression can be all sorts of date strings or if it does not match any internal ones, it is treated as a filename and curl tries to get the modification date (mtime) from that file instead. See the curl_getdate(3) man pages for date expression details.\n\nStart the date expression with a dash (-) to make it request for a document that is older than the given date/time, default is a document that is newer than the specified date/time.\n\nIf provided a non-existing file, curl outputs a warning about that fact and proceeds to do the transfer without a time condition.\n\nIf --time-cond is provided several times, the last set value is used.\n\nSee also --etag-compare and -R, --remote-time.\n\n(TLS) Enable the use of TLSv1.3 early data, also known as '0RTT' where possible. This has security implications for the requests sent that way.\n\nThis option is used when curl is built to use GnuTLS.\n\nIf a server supports this TLSv1.3 feature, and to what extent, is announced as part of the TLS \"session\" sent back to curl. Until curl has seen such a session in a previous request, early data cannot be used.\n\nWhen a new connection is initiated with a known TLSv1.3 session, and that session announced early data support, the first request on this connection is sent before the TLS handshake is complete. While the early data is also encrypted, it is not protected against replays. An attacker can send your early data to the server again and the server would accept it.\n\nIf your request contacts a public server and only retrieves a file, there may be no harm in that. If the first request orders a refrigerator for you, it is probably not a good idea to use early data for it. curl cannot deduce what the security implications of your requests actually are and make this decision for you.\n\nThe amount of early data sent can be inspected by using the \"-w, --write-out\" variable \"tls_earlydata\".\n\nWARNING: this option has security implications. See above for more details.\n\nProviding --tls-earlydata multiple times has no extra effect. Disable it again with --no-tls-earlydata.\n\nAdded in 8.11.0. See also --tlsv1.3, --tls-max and --ssl-sessions.\n\n(TLS) VERSION defines maximum supported TLS version. The minimum acceptable version is set by tlsv1.0, tlsv1.1, tlsv1.2 or tlsv1.3.\n\nIf the connection is done without TLS, this option has no effect. This includes QUIC-using (HTTP/3) transfers.\n\nUse up to recommended TLS version.\n\nUse up to TLSv1.0.\n\nUse up to TLSv1.1.\n\nUse up to TLSv1.2.\n\nUse up to TLSv1.3.\n\nIf --tls-max is provided several times, the last set value is used.\n\n--tls-max requires that libcurl is built to support TLS. See also --tlsv1.0, --tlsv1.1, --tlsv1.2 and --tlsv1.3.\n\n(TLS) Specifies which cipher suites to use in the connection if it negotiates TLS 1.3. The list of ciphers suites must specify valid ciphers. Read up on TLS 1.3 cipher suite details on this URL:\n\nThis option is used when curl is built to use OpenSSL 1.1.1 or later, wolfSSL, or mbedTLS 3.6.0 or later.\n\nBefore curl 8.10.0 with mbedTLS or wolfSSL, TLS 1.3 cipher suites were set by using the --ciphers option.\n\nIf --tls13-ciphers is provided several times, the last set value is used.\n\nAdded in 7.61.0. See also --ciphers, --proxy-tls13-ciphers and --curves.\n\n(TLS) Set TLS authentication type. Currently, the only supported option is \"SRP\", for TLS-SRP (RFC 5054). If --tlsuser and --tlspassword are specified but --tlsauthtype is not, then this option defaults to \"SRP\". This option works only if the underlying libcurl is built with TLS-SRP support, which requires OpenSSL or GnuTLS with TLS-SRP support.\n\nIf --tlsauthtype is provided several times, the last set value is used.\n\n(TLS) Set password to use with the TLS authentication method specified with --tlsauthtype. Requires that --tlsuser is set.\n\nThis option does not work with TLS 1.3.\n\nIf --tlspassword is provided several times, the last set value is used.\n\n(TLS) Set username for use with the TLS authentication method specified with --tlsauthtype. Requires that --tlspassword also is set.\n\nThis option does not work with TLS 1.3.\n\nIf --tlsuser is provided several times, the last set value is used.\n\n(TLS) Use at least TLS version 1.x when negotiating with a remote TLS server. That means TLS version 1.0 or higher\n\n-1, --tlsv1 requires that libcurl is built to support TLS. This option is mutually exclusive with --tlsv1.1, --tlsv1.2 and --tlsv1.3. See also --http1.1 and --http2.\n\n(TLS) Forces curl to use TLS version 1.0 or later when connecting to a remote TLS server.\n\nIn old versions of curl this option was documented to allow _only_ TLS 1.0. That behavior was inconsistent depending on the TLS library. Use --tls-max if you want to set a maximum TLS version.\n\n(TLS) Forces curl to use TLS version 1.1 or later when connecting to a remote TLS server.\n\nIn old versions of curl this option was documented to allow _only_ TLS 1.1. That behavior was inconsistent depending on the TLS library. Use --tls-max if you want to set a maximum TLS version.\n\nSee also --tlsv1.3 and --tls-max.\n\n(TLS) Forces curl to use TLS version 1.2 or later when connecting to a remote TLS server.\n\nIn old versions of curl this option was documented to allow _only_ TLS 1.2. That behavior was inconsistent depending on the TLS library. Use --tls-max if you want to set a maximum TLS version.\n\nSee also --tlsv1.3 and --tls-max.\n\n(TLS) Forces curl to use TLS version 1.3 or later when connecting to a remote TLS server.\n\nIf the connection is done without TLS, this option has no effect. This includes QUIC-using (HTTP/3) transfers.\n\nNote that TLS 1.3 is not supported by all TLS backends.\n\nSee also --tlsv1.2 and --tls-max.\n\n(HTTP) Request a compressed Transfer-Encoding response using one of the algorithms curl supports, and uncompress the data while receiving it.\n\nProviding --tr-encoding multiple times has no extra effect. Disable it again with --no-tr-encoding.\n\nSave a full trace dump of all incoming and outgoing data, including descriptive information, in the given output file. Use \"-\" as filename to have the output sent to stdout. Use \"%\" as filename to have the output sent to stderr.\n\nNote that verbose output of curl activities and network traffic might contain sensitive data, including usernames, credentials or secret data content. Be aware and be careful when sharing trace logs with others.\n\nThis option is global and does not need to be specified for each use of --next.\n\nIf --trace is provided several times, the last set value is used.\n\nThis option is mutually exclusive with -v, --verbose and --trace-ascii. See also --trace-ascii, --trace-config, --trace-ids and --trace-time.\n\nSave a full trace dump of all incoming and outgoing data, including descriptive information, in the given output file. Use \"-\" as filename to have the output sent to stdout. Use \"%\" as filename to send the output to stderr.\n\nThis is similar to --trace, but leaves out the hex part and only shows the ASCII part of the dump. It makes smaller output that might be easier to read for untrained humans.\n\nNote that verbose output of curl activities and network traffic might contain sensitive data, including usernames, credentials or secret data content. Be aware and be careful when sharing trace logs with others.\n\nThis option is global and does not need to be specified for each use of --next.\n\nIf --trace-ascii is provided several times, the last set value is used.\n\nThis option is mutually exclusive with --trace and -v, --verbose. See also -v, --verbose and --trace.\n\nSet configuration for trace output. A comma-separated list of components where detailed output can be made available from. Names are case-insensitive. Specify 'all' to enable all trace components.\n\nIn addition to trace component names, specify \"ids\" and \"time\" to avoid extra --trace-ids or --trace-time parameters.\n\nSee the curl_global_trace(3) man page for more details.\n\nThis option is global and does not need to be specified for each use of --next.\n\n--trace-config can be used several times in a command line\n\nAdded in 8.3.0. See also -v, --verbose and --trace.\n\nPrepends the transfer and connection identifiers to each trace or verbose line that curl displays.\n\nThis option is global and does not need to be specified for each use of --next.\n\nProviding --trace-ids multiple times has no extra effect. Disable it again with --no-trace-ids.\n\nAdded in 8.2.0. See also --trace and -v, --verbose.\n\nPrepends a time stamp to each trace or verbose line that curl displays.\n\nThis option is global and does not need to be specified for each use of --next.\n\nProviding --trace-time multiple times has no extra effect. Disable it again with --no-trace-time.\n\nSee also --trace and -v, --verbose.\n\n(HTTP) Connect through this Unix domain socket, instead of using the network.\n\nIf --unix-socket is provided several times, the last set value is used.\n\nUpload the specified local file to the remote URL.\n\nIf there is no file part in the specified URL, curl appends the local file name to the end of the URL before the operation starts. You must use a trailing slash (/) on the last directory to prove to curl that there is no filename or curl thinks that your last directory name is the remote filename to use.\n\nWhen putting the local filename at the end of the URL, curl ignores what is on the left side of any slash (/) or backslash (\\\\) used in the filename and only appends what is on the right side of the rightmost such character.\n\nUse the filename \"-\" (a single dash) to use stdin instead of a given file. Alternately, the filename \".\" (a single period) may be specified instead of \"-\" to use stdin in non-blocking mode to allow reading server output while stdin is being uploaded.\n\nIf this option is used with an HTTP(S) URL, the PUT method is used.\n\nYou can specify one -T, --upload-file for each URL on the command line. Each -T, --upload-file + URL pair specifies what to upload and to where. curl also supports globbing of the -T, --upload-file argument, meaning that you can upload multiple files to a single URL by using the same URL globbing style supported in the URL.\n\nWhen uploading to an SMTP server: the uploaded data is assumed to be RFC 5322 formatted. It has to feature the necessary set of headers and mail body formatted correctly by the user as curl does not transcode nor encode it further in any way.\n\n--upload-file is associated with a single URL. Use it once per URL when you use several URLs in a command line.\n\nSee also -G, --get, -I, --head, -X, --request and -d, --data.\n\nSpecify additional behavior to apply to uploaded files. Flags are specified as either a single flag value or a comma-separated list of flag values. These values are case-sensitive and may be negated by prepending them with a '-' character. Currently the following flag values are accepted: answered, deleted, draft, flagged, and seen. The currently-accepted flag values are used to set flags on IMAP uploads.\n\nIf --upload-flags is provided several times, the last set value is used.\n\nAdded in 8.13.0. See also -T, --upload-file.\n\nSpecify a URL to fetch or send data to.\n\nIf the given URL is missing a scheme (such as \"http://\" or \"ftp://\" etc) curl guesses which scheme to use based on the hostname. If the outermost subdomain name matches DICT, FTP, IMAP, LDAP, POP3 or SMTP case insensitively, then that protocol is used, otherwise it assumes HTTP. Scheme guessing can be avoided by providing a full URL including the scheme, or disabled by setting a default protocol, see --proto-default for details.\n\nTo control where the contents of a retrieved URL is written instead of the default stdout, use the -o, --output or the -O, --remote-name options. When retrieving multiple URLs in a single invoke, each provided URL needs its own dedicated destination option unless --remote-name-all is used.\n\nOn Windows, \"file://\" accesses can be converted to network accesses by the operating system.\n\nStarting in curl 8.13.0, curl can be told to download URLs provided in a text file, one URL per line. It is done by with \"--url @filename\": so instead of a URL, you specify a filename prefixed with the \"@\" symbol. It can be told to load the list of URLs from stdin by providing an argument like \"@-\".\n\nWhen downloading URLs given in a file, it implies using -O, --remote-name for each provided URL. The URLs are full, there is no globbing applied or done on these. Features such as --skip-existing work fine in combination with this.\n\nLines in the URL file that start with \"#\" are treated as comments and are skipped.\n\n--url can be used several times in a command line\n\nSee also -:, --next, -K, --config, --path-as-is and --disallow-username-in-url.\n\n(all) Add a piece of data, usually a name + value pair, to the end of the URL query part. The syntax is identical to that used for --data-urlencode with one extension:\n\nIf the argument starts with a '+' (plus), the rest of the string is provided as-is unencoded.\n\nThe query part of a URL is the one following the question mark on the right end.\n\n--url-query can be used several times in a command line\n\nAdded in 7.87.0. See also --data-urlencode and -G, --get.\n\n(FTP LDAP) Enable ASCII transfer mode. For FTP, this can also be enforced by using a URL that ends with \";type=A\". This option causes data sent to stdout to be in text mode for Win32 systems.\n\nProviding --use-ascii multiple times has no extra effect. Disable it again with --no-use-ascii.\n\nSee also --crlf and --data-ascii.\n\nSpecify the username and password to use for server authentication. Overrides -n, --netrc and --netrc-optional.\n\nIf you simply specify the username, curl prompts for a password.\n\nThe username and passwords are split up on the first colon, which makes it impossible to use a colon in the username with this option. The password can, still.\n\nOn systems where it works, curl hides the given option argument from process listings. This is not enough to protect credentials from possibly getting seen by other users on the same system as they still are visible for a moment before cleared. Such sensitive data should be retrieved from a file instead or similar and never used in clear text in a command line.\n\nWhen using Kerberos V5 with a Windows based server you should include the Windows domain name in the username, in order for the server to successfully obtain a Kerberos Ticket. If you do not, then the initial authentication handshake may fail.\n\nWhen using NTLM, the username can be specified simply as the username, without the domain, if there is a single domain and forest in your setup for example.\n\nTo specify the domain name use either Down-Level Logon Name or UPN (User Principal Name) formats. For example, EXAMPLE\\user and user@example.com respectively.\n\nIf you use a Windows SSPI-enabled curl binary and perform Kerberos V5, Negotiate, NTLM or Digest authentication then you can tell curl to select the username and password from your environment by specifying a single colon with this option: \"-u :\".\n\nIf --user is provided several times, the last set value is used.\n\nSee also -n, --netrc and -K, --config.\n\n(HTTP) Specify the User-Agent string to send to the HTTP server. To encode blanks in the string, surround the string with single quote marks. This header can also be set with the -H, --header or the --proxy-header options.\n\nIf you give an empty argument to -A, --user-agent (\"\"), it removes the header completely from the request. If you prefer a blank header, you can set it to a single space (\" \").\n\nBy default, curl uses curl/VERSION, such as User-Agent: curl/8.13.0.\n\nIf --user-agent is provided several times, the last set value is used.\n\nSee also -H, --header and --proxy-header.\n\nSet a variable with \"name=content\" or \"name@file\" (where \"file\" can be stdin if set to a single dash (\"-\")). The name is a case sensitive identifier that must consist of no other letters than a-z, A-Z, 0-9 or underscore. The specified content is then associated with this identifier.\n\nSetting the same variable name again overwrites the old contents with the new.\n\nThe contents of a variable can be referenced in a later command line option when that option name is prefixed with \"--expand-\", and the name is used as \"{{name}}\".\n\n--variable can import environment variables into the name space. Opt to either require the environment variable to be set or provide a default value for the variable in case it is not already set.\n\n--variable %name imports the variable called \"name\" but exits with an error if that environment variable is not already set. To provide a default value if the environment variable is not set, use --variable %name=content or --variable %name@content. Note that on some systems - but not all - environment variables are case insensitive.\n\nAdded in curl 8.12.0: you can get a byte range from the source by appending \"[start-end]\" to the variable name, where start and end are byte offsets to include from the contents. For example, asking for offset \"2-10\" means offset two to offset ten, inclusive, resulting in 9 bytes in total. \"2-2\" means a single byte at offset 2. Not providing a second number implies to the end of data. The start offset cannot be larger than the end offset. Asking for a range that is outside of the file size makes the variable contents empty. For example, getting the first one hundred bytes from a given file:\n\nGiven a byte range that has no data results in an empty string. Asking for a range that is larger than the content makes curl use the piece of the data that exists.\n\nTo assign a variable using contents from another variable, use --expand-variable. Like for example assigning a new variable using contents from two other:\n\nWhen expanding variables, curl supports a set of functions that can make the variable contents more convenient to use. You apply a function to a variable expansion by adding a colon and then list the desired functions in a comma-separated list that is evaluated in a left-to-right order. Variable content holding null bytes that are not encoded when expanded, causes an error.\n\ndecodes a base64 encoded character sequence. If the sequence is not possible to decode, it instead outputs \"[64dec-fail]\"\n\n--variable can be used several times in a command line\n\nAdded in 8.3.0. See also -K, --config.\n\nMakes curl verbose during the operation. Useful for debugging and seeing what's going on under the hood. A line starting with > means header data sent by curl, < means header data received by curl that is hidden in normal cases, and a line starting with * means additional info provided by curl.\n\nIf you only want HTTP headers in the output, -i, --show-headers or -D, --dump-header might be more suitable options.\n\nSince curl 8.10, mentioning this option several times in the same argument increases the level of the trace output. However, as before, a single -v, --verbose or --no-verbose reverts any additions by previous \"-vv\" again. This means that \"-vv -v\" is equivalent to a single -v. This avoids unwanted verbosity when the option is mentioned in the command line and curl config files.\n\nUsing it twice, e.g. \"-vv\", outputs time (--trace-time) and transfer ids (--trace-ids), as well as enable tracing for all protocols (--trace-config protocol).\n\nAdding a third verbose outputs transfer content (--trace-ascii %) and enable tracing of more components (--trace-config read,write,ssl).\n\nA forth time adds tracing of all network components. (--trace-config network).\n\nAny addition of the verbose option after that has no effect.\n\nIf you think this option does not give you the right details, consider using --trace or --trace-ascii instead. Or use it only once and use --trace-config to trace the specific components you wish to see.\n\nNote that verbose output of curl activities and network traffic might contain sensitive data, including usernames, credentials or secret data content. Be aware and be careful when sharing trace logs with others.\n\nWhen the output contains protocol headers, those lines might include carriage return (ASCII code 13) characters, even on platforms that otherwise normally only use linefeed to signify line separations - as curl shows the exact contents arriving from the server.\n\nThis option is global and does not need to be specified for each use of --next.\n\nProviding --verbose multiple times has no extra effect. Disable it again with --no-verbose.\n\nThis option is mutually exclusive with --trace and --trace-ascii. See also -i, --show-headers, -s, --silent, --trace and --trace-ascii.\n\nDisplays information about curl and the libcurl version it uses.\n\nThe first line includes the full version of curl, libcurl and other 3rd party libraries linked with the executable.\n\nThis line may contain one or more TLS libraries. curl can be built to support more than one TLS library which then makes curl - at start-up - select which particular backend to use for this invocation.\n\nIf curl supports more than one TLS library like this, the ones that are not selected by default are listed within parentheses. Thus, if you do not specify which backend to use (with the \"CURL_SSL_BACKEND\" environment variable) the one listed without parentheses is used. Such builds also has \"MultiSSL\" set as a feature.\n\nThe second line (starts with \"Release-Date:\") shows the release date.\n\nThe third line (starts with \"Protocols:\") shows all protocols that libcurl reports to support.\n\nThe fourth line (starts with \"Features:\") shows specific features libcurl reports to offer. Available features include:\n\nSupport for the Alt-Svc: header is provided.\n\nThis curl uses asynchronous name resolves. Asynchronous name resolves can be done using either the c-ares or the threaded resolver backends.\n\ncurl was built with support for character set conversions (like EBCDIC)\n\nThis curl uses a libcurl built with Debug. This enables more error-tracking and memory debugging etc. For curl-developers only.\n\nThe built-in SASL authentication includes extensions to support SCRAM because libcurl was built with libgsasl.\n\nThis curl is built to support HTTPS proxy.\n\nYou can use IPv6 with this.\n\nThis curl supports transfers of large files, files larger than 2GB.\n\nAutomatic decompression (via gzip, deflate) of compressed files over HTTP is supported.\n\nNTLM delegation to winbind helper is supported. This feature was removed from curl in 8.8.0.\n\nPSL is short for Public Suffix List and means that this curl has been built with knowledge about \"public suffixes\".\n\nSSL versions of various protocols are supported, such as HTTPS, FTPS, POP3S and so on.\n\nThis build supports TLS session export/import, like with the --ssl-sessions.\n\nAutomatic decompression (via zstd) of compressed files over HTTP is supported.\n\nSee also -h, --help and -M, --manual.\n\n(All) Set VLAN priority as defined in IEEE 802.1Q.\n\nThis field is set on Ethernet level, and only works within a local network.\n\nThe valid range for <priority> is 0 to 7.\n\nIf --vlan-priority is provided several times, the last set value is used.\n\nAdded in 8.9.0. See also --ip-tos.\n\nMake curl display information on stdout after a completed transfer. The format is a string that may contain plain text mixed with any number of variables. The format can be specified as a literal \"string\", or you can have curl read the format from a file with \"@filename\" and to tell curl to read the format from stdin you write \"@-\".\n\nThe variables present in the output format are substituted by the value or text that curl thinks fit, as described below. All variables are specified as %{variable_name} and to output a normal % you just write them as %%. You can output a newline by using \n\n, a carriage return with \\r and a tab space with \\t.\n\nThe output is by default written to standard output, but can be changed with %{stderr} and %output{}.\n\nOutput HTTP header values from the transfer's most recent server response by using %header{name} where name is the case insensitive name of the header (without the trailing colon). The header contents are exactly as delivered over the network but with leading and trailing whitespace and newlines stripped off (added in 7.84.0).\n\nSelect a specific target destination file to write the output to, by using %output{name} (added in curl 8.3.0) where name is the full filename. The output following that instruction is then written to that file. More than one %output{} instruction can be specified in the same write-out argument. If the filename cannot be created, curl leaves the output destination to the one used prior to the %output{} instruction. Use %output{>>name} to append data to an existing file.\n\nThis output is done independently of if the file transfer was successful or not.\n\nIf the specified action or output specified with this option fails in any way, it does not make curl return a (different) error.\n\nNOTE: On Windows, the %-symbol is a special symbol used to expand environment variables. In batch files, all occurrences of % must be doubled when using this option to properly escape. If this option is used at the command prompt then the % cannot be escaped and unintended expansion is possible.\n\nThe variables available are:\n\nOutput the certificate chain with details. Supported only by the OpenSSL, GnuTLS, Schannel, Rustls, and Secure Transport backends. (Added in 7.88.0)\n\nThe connection identifier last used by the transfer. The connection id is unique number among all connections using the same connection cache. (Added in 8.2.0)\n\nThe Content-Type of the requested document, if there was any.\n\nThe numerical exit code of the transfer. (Added in 7.75.0)\n\nThe ultimate filename that curl writes out to. This is only meaningful if curl is told to write to a file with the -O, --remote-name or -o, --output option. It is most useful in combination with the -J, --remote-header-name option.\n\nThe initial path curl ended up in when logging on to the remote FTP server.\n\nThe value of header \"name\" from the transfer's most recent server response. Unlike other variables, the variable name \"header\" is not in braces. For example \"%header{date}\". Refer to -w, --write-out remarks. (Added in 7.84.0)\n\nA JSON object with all HTTP response headers from the recent transfer. Values are provided as arrays, since in the case of multiple headers there can be multiple values. (Added in 7.83.0)\n\nThe header names provided in lowercase, listed in order of appearance over the wire. Except for duplicated headers. They are grouped on the first occurrence of that header, each value is presented in the JSON array.\n\nThe numerical response code that was found in the last retrieved HTTP(S) or FTP(s) transfer.\n\nThe numerical code that was found in the last response (from a proxy) to a curl CONNECT request.\n\nThe http version that was effectively used.\n\nA JSON object with all available keys. (Added in 7.70.0)\n\nThe IP address of the local end of the most recently done connection - can be either IPv4 or IPv6.\n\nThe local port number of the most recently done connection.\n\nThe http method used in the most recent HTTP request. (Added in 7.72.0)\n\nNumber of server certificates received in the TLS handshake. Supported only by the OpenSSL, GnuTLS, Schannel, Rustls and Secure Transport backends. (Added in 7.88.0)\n\nNumber of new connects made in the recent transfer.\n\nThe number of response headers in the most recent request (restarted at each redirect). Note that the status line IS NOT a header. (Added in 7.73.0)\n\nNumber of redirects that were followed in the request.\n\nNumber of retries actually performed when \"--retry\" has been used. (Added in 8.9.0)\n\nThe rest of the output is only shown if the transfer returned a non-zero error. (Added in 7.75.0)\n\nFrom this point on, the -w, --write-out output is written to the filename specified in braces. The filename can be prefixed with \">>\" to append to the file. Unlike other variables, the variable name \"output\" is not in braces. For example \"%output{>>stats.txt}\". Refer to -w, --write-out remarks. (Added in 8.3.0)\n\nThe result of the HTTPS proxy's SSL peer certificate verification that was requested. 0 means the verification was successful.\n\nReturns 1 if the previous transfer used a proxy, otherwise 0. Useful to for example determine if a \"NOPROXY\" pattern matched the hostname or not. (Added in 8.7.0)\n\nWhen an HTTP request was made without -L, --location to follow redirects (or when --max-redirs is met), this variable shows the actual URL a redirect would have gone to.\n\nThe Referer: header, if there was any. (Added in 7.76.0)\n\nThe remote IP address of the most recently done connection - can be either IPv4 or IPv6.\n\nThe remote port number of the most recently done connection.\n\nThe numerical response code that was found in the last transfer (formerly known as \"http_code\").\n\nThe URL scheme (sometimes called protocol) that was effectively used.\n\nThe total amount of bytes that were downloaded. This is the size of the body/data that was transferred, excluding headers.\n\nThe total amount of bytes of the downloaded headers.\n\nThe total amount of bytes that were sent in the HTTP request.\n\nThe total amount of bytes that were uploaded. This is the size of the body/data that was transferred, excluding headers.\n\nThe average download speed that curl measured for the complete download. Bytes per second.\n\nThe average upload speed that curl measured for the complete upload. Bytes per second.\n\nThe result of the SSL peer certificate verification that was requested. 0 means the verification was successful.\n\nFrom this point on, the -w, --write-out output is written to standard error. (Added in 7.63.0)\n\nFrom this point on, the -w, --write-out output is written to standard output. This is the default, but can be used to switch back after switching to stderr. (Added in 7.63.0)\n\nThe time, in seconds, it took from the start until the SSL/SSH/etc connect/handshake to the remote host was completed.\n\nThe time, in seconds, it took from the start until the TCP connect to the remote host (or proxy) was completed.\n\nThe time, in seconds, it took from the start until the name resolving was completed.\n\nThe time it took from the start until the last byte is sent by libcurl. In microseconds. (Added in 8.10.0)\n\nThe time, in seconds, it took from the start until the file transfer was just about to begin. This includes all pre-transfer commands and negotiations that are specific to the particular protocol(s) involved.\n\nThe time, in seconds, the transfer was queued during its run. This adds the queue time for each redirect step that may have happened. Transfers may be queued for significant amounts of time when connection or parallel limits are in place. (Added in 8.12.0)\n\nThe time, in seconds, it took for all redirection steps including name lookup, connect, pretransfer and transfer before the final transaction was started. \"time_redirect\" shows the complete execution time for multiple redirections.\n\nThe time, in seconds, it took from the start until the first byte is received. This includes time_pretransfer and also the time the server needed to calculate the result.\n\nThe total time, in seconds, that the full operation lasted.\n\nThe amount of bytes that were sent as TLSv1.3 early data. This is 0 if this TLS feature was not used and negative if the data sent had been rejected by the server. The use of early data is enabled via the command line option \"--tls-earlydata\". (Added in 8.12.0)\n\nThe URL that was fetched. (Added in 7.75.0)\n\nThe scheme part of the URL that was fetched. (Added in 8.1.0)\n\nThe user part of the URL that was fetched. (Added in 8.1.0)\n\nThe password part of the URL that was fetched. (Added in 8.1.0)\n\nThe options part of the URL that was fetched. (Added in 8.1.0)\n\nThe host part of the URL that was fetched. (Added in 8.1.0)\n\nThe port number of the URL that was fetched. If no port number was specified and the URL scheme is known, that scheme's default port number is shown. (Added in 8.1.0)\n\nThe path part of the URL that was fetched. (Added in 8.1.0)\n\nThe query part of the URL that was fetched. (Added in 8.1.0)\n\nThe fragment part of the URL that was fetched. (Added in 8.1.0)\n\nThe zone id part of the URL that was fetched. (Added in 8.1.0)\n\nThe scheme part of the effective (last) URL that was fetched. (Added in 8.1.0)\n\nThe user part of the effective (last) URL that was fetched. (Added in 8.1.0)\n\nThe password part of the effective (last) URL that was fetched. (Added in 8.1.0)\n\nThe options part of the effective (last) URL that was fetched. (Added in 8.1.0)\n\nThe host part of the effective (last) URL that was fetched. (Added in 8.1.0)\n\nThe port number of the effective (last) URL that was fetched. If no port number was specified, but the URL scheme is known, that scheme's default port number is shown. (Added in 8.1.0)\n\nThe path part of the effective (last) URL that was fetched. (Added in 8.1.0)\n\nThe query part of the effective (last) URL that was fetched. (Added in 8.1.0)\n\nThe fragment part of the effective (last) URL that was fetched. (Added in 8.1.0)\n\nThe zone id part of the effective (last) URL that was fetched. (Added in 8.1.0)\n\nThe URL index number of this transfer, 0-indexed. Unglobbed URLs share the same index number as the origin globbed URL. (Added in 7.75.0)\n\nThe URL that was fetched last. This is most meaningful if you have told curl to follow location: headers.\n\nThe numerical identifier of the last transfer done. -1 if no transfer has been started yet for the handle. The transfer id is unique among all transfers performed using the same connection cache. (Added in 8.2.0)\n\nIf --write-out is provided several times, the last set value is used.\n\nSee also -v, --verbose and -I, --head.\n\nWhen saving output to a file, tell curl to store file metadata in extended file attributes. Currently, \"curl\" is stored in the \"creator\" attribute, the URL is stored in the \"xdg.origin.url\" attribute and, for HTTP, the content type is stored in the \"mime_type\" attribute. If the file system does not support extended attributes, a warning is issued.\n\nProviding --xattr multiple times has no extra effect. Disable it again with --no-xattr.\n\nSee also -R, --remote-time, -w, --write-out and -v, --verbose.\n\nThe environment variables can be specified in lower case or upper case. The lower case version has precedence. \"http_proxy\" is an exception as it is only available in lower case.\n\nUsing an environment variable to set the proxy has the same effect as using the -x, --proxy option.\n\nSets the proxy server to use for HTTP.\n\nSets the proxy server to use for HTTPS.\n\nSets the proxy server to use for [url-protocol], where the protocol is a protocol that curl supports and as specified in a URL. FTP, FTPS, POP3, IMAP, SMTP, LDAP, etc.\n\nSets the proxy server to use if no protocol-specific proxy is set.\n\nlist of hostnames that should not go through any proxy. If set to an asterisk '*' only, it matches all hosts. Each name in this list is matched as either a domain name which contains the hostname, or the hostname itself.\n\nThis environment variable disables use of the proxy even when specified with the -x, --proxy option. That is\n\naccesses the target URL through the proxy.\n\nThe list of hostnames can also be include numerical IP addresses, and IPv6 versions should then be given without enclosing brackets.\n\nIP addresses can be specified using CIDR notation: an appended slash and number specifies the number of \"network bits\" out of the address to use in the comparison (added in 7.86.0). For example \"192.168.0.0/16\" would match all addresses starting with \"192.168\".\n\nOn Windows, this variable is used when trying to find the home directory. If the primary home variables are all unset.\n\nIf set, the specified number of characters is used as the terminal width when the alternative progress-bar is shown. If not set, curl tries to figure it out using other ways.\n\nIf set, it is used as the --cacert value. This environment variable is ignored if Schannel is used as the TLS backend.\n\nIf set, is the first variable curl checks when trying to find its home directory. If not set, it continues to check XDG_CONFIG_HOME\n\nIf curl was built with support for \"MultiSSL\", meaning that it has built-in support for more than one TLS backend, this environment variable can be set to the case insensitive name of the particular backend to use when curl is invoked. Setting a name that is not a built-in alternative makes curl stay with the default.\n\nIf set, this is used to find the home directory when that is needed. Like when looking for the default .curlrc. CURL_HOME and XDG_CONFIG_HOME have preference.\n\nIf curl was built with HTTP/3 support, setting this environment variable to a local directory makes curl produce qlogs in that directory, using file names named after the destination connection id (in hex). Do note that these files can become rather large. Works with the ngtcp2 and quiche QUIC backends.\n\nUsed on VMS when trying to detect if using a DCL or a Unix shell.\n\nIf set, it is used as the --capath value. This environment variable is ignored if Schannel is used as the TLS backend.\n\nIf set, it is used as the --cacert value. This environment variable is ignored if Schannel is used as the TLS backend.\n\nIf you set this environment variable to a filename, curl stores TLS secrets from its connections in that file when invoked to enable you to analyze the TLS traffic in real time using network analyzing tools such as Wireshark. This works with the following TLS backends: OpenSSL, LibreSSL (TLS 1.2 max), BoringSSL, GnuTLS and wolfSSL.\n\nOn Windows, this variable is used when trying to find the home directory. If the other, primary, variable are all unset. If set, curl uses the path \"$USERPROFILE\\Application Data\".\n\nIf CURL_HOME is not set, this variable is checked when looking for a default .curlrc file.\n\nThe proxy string may be specified with a protocol:// prefix to specify alternative proxy protocols.\n\nIf no protocol is specified in the proxy string or if the string does not match a supported one, the proxy is treated as an HTTP proxy.\n\nThe supported proxy protocol prefixes are as follows:\n\nMakes it use it as an HTTP proxy. The default if no scheme prefix is used.\n\nMakes it treated as an HTTPS proxy.\n\nMakes it the equivalent of --socks4\n\nMakes it the equivalent of --socks4a\n\nMakes it the equivalent of --socks5\n\nMakes it the equivalent of --socks5-hostname\n\nThere are a bunch of different error codes and their corresponding error messages that may appear under error conditions. At the time of this writing, the exit codes are:\n\nSuccess. The operation completed successfully according to the instructions.\n\nUnsupported protocol. This build of curl has no support for this protocol.\n\nURL malformed. The syntax was not correct.\n\nA feature or option that was needed to perform the desired request was not enabled or was explicitly disabled at build-time. To make curl able to do this, you probably need another build of libcurl.\n\nCould not resolve proxy. The given proxy host could not be resolved.\n\nCould not resolve host. The given remote host could not be resolved.\n\nWeird server reply. The server sent data curl could not parse.\n\nFTP access denied. The server denied login or denied access to the particular resource or directory you wanted to reach. Most often you tried to change to a directory that does not exist on the server.\n\nFTP accept failed. While waiting for the server to connect back when an active FTP session is used, an error code was sent over the control connection or similar.\n\nFTP weird PASS reply. curl could not parse the reply sent to the PASS request.\n\nDuring an active FTP session while waiting for the server to connect back to curl, the timeout expired.\n\nFTP weird PASV reply, curl could not parse the reply sent to the PASV request.\n\nFTP weird 227 format. curl could not parse the 227-line the server sent.\n\nFTP cannot use host. Could not resolve the host IP we got in the 227-line.\n\nHTTP/2 error. A problem was detected in the HTTP2 framing layer. This is somewhat generic and can be one out of several problems, see the error message for details.\n\nFTP could not set binary. Could not change transfer method to binary.\n\nPartial file. Only a part of the file was transferred.\n\nFTP could not download/access the given file, the RETR (or similar) command failed.\n\nFTP quote error. A quote command returned error from the server.\n\nHTTP page not retrieved. The requested URL was not found or returned another error with the HTTP error code being 400 or above. This return code only appears if -f, --fail is used.\n\nWrite error. curl could not write data to a local filesystem or similar.\n\nFailed starting the upload. For FTP, the server typically denied the STOR command.\n\nOperation timeout. The specified time-out period was reached according to the conditions.\n\nFTP PORT failed. The PORT command failed. Not all FTP servers support the PORT command, try doing a transfer using PASV instead.\n\nFTP could not use REST. The REST command failed. This command is used for resumed FTP transfers.\n\nHTTP range error. The range \"command\" did not work.\n\nBad download resume. Could not continue an earlier aborted download.\n\nFILE could not read file. Failed to open the file. Permissions?\n\nFunction not found. A required LDAP function was not found.\n\nAborted by callback. An application told curl to abort the operation.\n\nInterface error. A specified outgoing interface could not be used.\n\nToo many redirects. When following redirects, curl hit the maximum amount.\n\nUnknown option specified to libcurl. This indicates that you passed a weird option to curl that was passed on to libcurl and rejected. Read up in the manual.\n\nThe server did not reply anything, which here is considered an error.\n\nCould not use specified SSL cipher.\n\nPeer certificate cannot be authenticated with known CA certificates.\n\nThe username, password, or similar was not accepted and curl failed to log in.\n\nOut of disk space on TFTP server.\n\nThe resource referenced in the URL does not exist.\n\nAn unspecified error occurred during the SSH session.\n\nFailed to shut down the SSL connection.\n\nCould not load CRL file, missing or wrong format.\n\nNo connection available, the session is queued.\n\nAn API function was called from inside a callback.\n\nA problem was detected in the HTTP/3 layer. This is somewhat generic and can be one out of several problems, see the error message for details.\n\nQUIC connection error. This error may be caused by an SSL library error. QUIC is the protocol used for HTTP/3 transfers.\n\nA client-side certificate is required to complete the TLS handshake.\n\nA value or data field grew larger than allowed.\n\nMore error codes might appear here in future releases. The existing ones are meant to never change.\n\nIf you experience any problems with curl, submit an issue in the project's bug tracker on GitHub: https://github.com/curl/curl/issues\n\nDaniel Stenberg is the main author, but the whole list of contributors is found in the separate THANKS file.\n\nThis HTML page was made with roffit."
    },
    {
        "link": "https://stackoverflow.com/questions/22229996/basic-http-and-bearer-token-authentication",
        "document": "I had a similar problem - authenticate device and user at device. I used a header alongside an header. One header authenticated the device, the other authenticated the user. I used a header because these are commonly used for authentication.\n\nYou can only have one header. I used this to send a bearer token, which is a large random nonce provided from the server to the client to authenticate the client - the device. These are stored in a database, and if a device presents the nonce, we know we've authorized that device before.\n\nWe cared about users at the device as well as devices, so every user account also had a nonce. When the user authenticated on the device, this then was supplied to the device which also stored it and presented it on each request, in this case as a header, since headers often: 1) contain nonces and 2) are used for authentication.\n\nIt's been more than 6 years since I wrote the original answer. The nonces might have been bearer tokens instead which delivered a symmetrically encrypted payload from the server to itself to avoid using a database. Done properly they have at least a user identifier and an expiration. They then can't be revoked before they expire without using a database again, but if revocation is infrequent this could still be a smaller/faster lookup.\n\nHopefully this brief tutorial on authentication tokens helps those who are confused about what kinds of things can be set in the headers to authenticate a request from a device or a user.\n\nIt frankly doesn't matter \"what I send as a cookie\", or in other words, which technique I used for authentication. The useful part of the answer is the choice of headers informed by their semantic meaning and common use."
    },
    {
        "link": "https://scrapfly.io/blog/how-to-use-curl-get-requests",
        "document": "Guide to using JSON with cURL\n\nLearn how to send JSON with `cURL` using files, inline data, environment variables, and `jq`. Includes real-world examples for Slack & Google Translate."
    },
    {
        "link": "https://stackoverflow.com/questions/3044315/how-to-set-the-authorization-header-using-curl",
        "document": "If you don't have the token at the time of the call is made, You will have to make two calls, one to get the token and the other to extract the token form the response, pay attention to\n\nas it is the part which is dealing with extracting the token from the response.\n\nAfter extracting the token you can use the token to make subsequent calls as follows."
    },
    {
        "link": "https://stackoverflow.com/questions/356705/how-to-send-a-header-using-a-http-request-through-a-curl-call",
        "document": "You can see the request that curl sent by adding the option."
    },
    {
        "link": "https://oxylabs.io/blog/curl-authorization-header",
        "document": "Authorization headers are fundamental to secure API interactions and managing HTTP requests efficiently. When you're building API integrations, proper authorization header configuration is essential for successful authentication. In this guide, we'll explore the implementation of cURL authorization headers across various scenarios and platforms, building upon our comprehensive guide on what cURL is and how it works.\n\nLet's begin by examining the primary authentication methods, focusing particularly on basic authentication and its implementation examples. The curl command provides several ways to handle authentication in your HTTP requests. To get a deeper understanding of how cURL interacts with APIs, check out our detailed guide on working with cURL and APIs.\n\nWhile basic authentication provides a foundation, bearer authentication offers a more robust approach for modern APIs. Each curl request with bearer tokens requires proper authorization header formatting. For more insights on handling headers in cURL, see our guide on sending headers with cURL.\n\nWhen working with APIs, you'll often need to make different types of requests. To see more examples, check our guides on making GET requests with cURL and handling POST requests in cURL.\n\nEach operating system provides distinct mechanisms for handling authentication. Here are the recommended approaches for different operating systems:\n\nCookie-based authentication remains prevalent in web applications, requiring proper session management through stored cookies. When implementing authentication with cURL, correct cookie handling ensures successful maintenance of authenticated sessions across multiple requests.\n\nComplex API integrations often require sophisticated authentication approaches that combine multiple authentication methods or implement dynamic token management. These implementations are particularly crucial when working with distributed systems or high-security environments. For complex authentication scenarios:\n\nWhen authentication issues occur, systematic debugging approaches become essential for efficient problem resolution. cURL provides several diagnostic tools that help identify common authentication failures through detailed request and response analysis. For authentication issue resolution:\n\nImplementing secure API authentication requires several critical practices. All requests must utilize HTTPS protocols for encrypted data transmission, while sensitive credentials should be stored in environment variables to prevent exposure. A comprehensive security approach includes proper token refresh mechanisms, thorough error handling, and regular session maintenance. Consider this implementation contrast:\n\nEnable verbose output for debugging only in development environments, ensuring all sensitive data remains protected in production.\n\nEffective cURL authorization header implementation requires attention to security principles and best practices. By following these implementation patterns, developers can establish secure and maintainable API authentication mechanisms. These methodologies provide a foundation for both basic integrations and complex API interactions."
    },
    {
        "link": "https://scrapfly.io/blog/how-to-set-authorization-with-curl-full-examples-guide",
        "document": "curl and wget are both popular terminal tools but often used for different tasks - let's take a look at the differences."
    },
    {
        "link": "https://smartproxy.com/blog/curl-send-headers",
        "document": "These headers provide the server with essential context, such as what kind of content to expect (Content-Type) and how to authenticate the request (Authorization).\n\nBy default, cURL does not include any special headers in its HTTP requests besides those automatically set by the HTTP protocol. The most common default headers that cURL might send are:\n• User-Agent. cURL sends a User-Agent header that identifies the client software, usually in the form of \"curl/\" followed by the version number (e.g., \"curl/7.69.0\");\n• Host. This header specifies the domain name of the server you're trying to reach. It's automatically set based on the URL provided in the request;\n• Accept. By default, cURL sends \"Accept: */*\", indicating that the client is willing to accept any response.\n\nThese default headers provide basic information that helps the server understand and process the request. They can be overridden or supplemented with additional headers using various header options with cURL.\n\nHow to send custom headers with cURL?\n\nTo add a custom header to a cURL request, use the -H or --header flag followed by the header name and value:"
    }
]