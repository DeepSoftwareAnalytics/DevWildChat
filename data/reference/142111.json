[
    {
        "link": "https://stackoverflow.com/questions/14675913/changing-image-size-in-markdown",
        "document": "If it is possible I would like the picture to also be centered. I am asking for general Markdown, not just how GitHub does it.\n\nThe documentation only gives the following suggestion for an image:\n\nI just got started with Markdown. I love it, but there is one thing bugging me: How can I change the size of an image using Markdown?\n\nYou could just use some HTML in your Markdown: Or via attribute (not supported by GitHub) Or you could use a custom CSS file as described in this answer on Markdown and image alignment\n\nCombining two answers I came out with a solution, that might not look that pretty,\n\n but it works! It creates a thumbnail with a specific size that might be clicked to bring you to the max resolution image. Here's an example! I tested it on Visual Code and Github. Thanks to the feedback, we know that this also works on:\n\nIf you have one image in each md file, one handy way to control image size is: ## Who Invented JSON? `Douglas Crockford` Douglas Crockford originally specified the JSON format in the early 2000s. ![Douglas Crockford](img/Douglas_Crockford.jpg) <style type=\"text/css\"> img { width: 250px; } </style> and the output will be like: If you have more images in each md page, then the handy way to control each image or each customized tag is to define each element in css. For this case for the img tag we could have: //in css or within style tags: img[alt=\"Result1\"] { width: 100px; } img[alt=\"Result2\"] { width: 200px; } img[alt=\"Result3\"] { width: 400px; } // try in md one of the methods shown below to insert image in your document:\n\nI came here searching for an answer. Some awesome suggestions here. And gold information pointing out that markdown supports HTML completely! A good clean solution is always to go with pure html syntax for sure. With the tag. But I was trying to still stick to the markdown syntax so I tried wrapping it around a tag and added whatever attributes i wanted for the image inside the div tag. And it WORKS!! So this way external images are supported! Just thought I would put this out there as it isn't in any of the answers. :)"
    },
    {
        "link": "https://markdownguide.org/hacks",
        "document": "The majority of people using Markdown will find that the basic and extended syntax elements cover their needs. But chances are that if you use Markdown long enough, you’ll inevitably discover that it doesn’t support something you need. This page provides tips and tricks for working around Markdown’s limitations.\n\nTip: These hacks aren't guaranteed to work in your Markdown application. If you need to use these hacks frequently, you should consider writing using something other than Markdown.\n\nUnderlined text is not something you typically see in web writing, probably because underlined text is nearly synonymous with links. However, if you’re writing a paper or a report, you may need the ability to underline words and phrases. A couple of applications like Bear and Simplenote provide support for underlining text, but Markdown doesn’t natively support underlining. If your Markdown processor supports HTML, you can use the HTML tag to underline text in your document.\n\nThe rendered output looks like this:\n\nSome of these words .\n\nTabs and whitespace have a special meaning in Markdown. You can use trailing whitespace to create line breaks, and you can use tabs to create code blocks. But what if you need to indent a paragraph the old-fashioned way, using the tab key? Markdown doesn’t provide an easy way of doing that.\n\nYour best bet might be to use a Markdown editor that supports indentation. This is common in applications that are more oriented towards desktop publishing. For example, iA Writer allows you to customize indentation settings for the editor in the application preferences. It also provides template customization options so that you can make the rendered document look the way you expect it to, indentation and all.\n\nAnother option, if your Markdown processor supports HTML, is to use the HTML entity for non-breaking space ( ). This should probably be your option of last resort as it can get awkward. Basically, every in your Markdown source will be replaced with a space in the rendered output. So if you stick four instances of before a paragraph, the paragraph will look like it’s indented four spaces.\n\nThe rendered output looks like this:\n\nThis is the first sentence of my indented paragraph.\n\nHaving the ability to center text is a necessity when writing a paper or a report. Unfortunately, Markdown doesn’t have any concept of text alignment (one possible exception is when using tables). The good news is that there’s an HTML tag you can use: . If your Markdown processor supports HTML, you can place these tags around whatever text you want to center align.\n\nThe rendered output looks like this:\n\nThe HTML tag is technically supported but officially deprecated, which means it works for now but you’re not supposed to be using it. Unfortunately, there’s not another pure HTML alternative. You could try using one of the CSS alternatives. Not all Markdown applications provide CSS support, but if the one you’re using does, here’s an alternative to the tag:\n\nIf this is supported by your Markdown application, the output looks like this:\n\nMarkdown doesn’t allow you to change the color of text, but if your Markdown processor supports HTML, you can use the HTML tag. The attribute allows you to specify the font color using a color’s name or the hexadecimal code.\n\nThe rendered output looks like this:\n\nThe HTML tag is technically supported but officially deprecated, which means it works for now but you’re not supposed to be using it. Unfortunately, there’s not another pure HTML alternative. You could try using one of the CSS alternatives. Not all Markdown applications provide CSS support, but if the one you’re using does, here’s an alternative to the tag:\n\nIf this is supported by your Markdown application, the output looks like this:\n\nSome people need the ability to write sentences in their Markdown files that will not appear in the rendered output. These comments are essentially hidden text. The text is viewable by the author of the document, but it’s not printed on the webpage or PDF. Markdown doesn’t natively support comments, but several enterprising individuals have devised a solution.\n\nTo add a comment, place text inside brackets followed by a colon, a space, and a pound sign (e.g., ). You should put blank lines before and after a comment.\n\nThe rendered output looks like this:\n\nHere’s a paragraph that will be visible.\n\nAdmonitions are frequently used in documentation to call attention to warnings, notes, and tips. Markdown doesn’t provide special syntax for admonitions, and most Markdown applications don’t provide support for admonitions (one exception is MkDocs).\n\nHowever, if you need to add admonitions, you might be able to use blockquotes with emoji and emphasis to create something that looks similar to the admonitions you see on other websites.\n\nThe rendered output looks like this:\n\nThe Markdown syntax for images doesn’t allow you to specify the width and height of images. If you need to resize an image and your Markdown processor supports HTML, you can use the HTML tag with the and attributes to set the dimensions of an image in pixels.\n\nThe rendered output will contain the image resized to the dimensions you specified.\n\nMarkdown doesn’t natively support image captions, but there are two possible workarounds. If your Markdown application supports HTML, you can use the and HTML tags to add a caption for your image.\n\nThe rendered output looks like this:\n\nTip: If your Markdown application supports CSS, you can use CSS to style the appearance of the caption.\n\nIf your Markdown application doesn’t support HTML, you could try placing the caption directly below the image and using emphasis.\n\nThe rendered output looks like this:\n\nA single track trail outside of Albuquerque, New Mexico.\n\nSome people like creating links that open in new tabs or windows. The Markdown syntax for links doesn’t allow you to specify the attribute, but if your Markdown processor supports HTML, you can use HTML to create these links.\n\nThe rendered output looks like this:\n\nMarkdown doesn’t provide special syntax for symbols. However, in most cases, you can copy and paste whatever symbol you want to use into your Markdown document. For example, if you need to display Pi (π), just find the symbol on a webpage and copy and paste it into your document. The symbol should appear as expected in the rendered output.\n\nAlternatively, if your Markdown application supports HTML, you can use the HTML entity for whatever symbol you want to use. For example, if you want to display the copyright sign (©), you can copy and paste the HTML entity for copyright ( ) into your Markdown document.\n\nFor a complete list of available HTML entities, refer to Wikipedia’s page on HTML entities.\n\nMarkdown tables are notoriously finicky. You can’t use many Markdown syntax elements to format the text in table cells. But there are workarounds for at least two common table issues: Line breaks and lists.\n\nYou can separate paragraphs within a table cell by using one or more HTML tags.\n\nThe rendered output looks like this:\n\nYou can add a list within a table cell by using HTML tags.\n\nThe rendered output looks like this:\n\nSome Markdown applications like Markdeep can automatically generate a table of contents (also referred to as a toc) from your headings, but this isn’t a feature provided by all Markdown applications. However, if your Markdown application supports heading IDs, you can create a table of contents for your Markdown file using a list and some links.\n\nThe rendered output looks like this:\n\nIf your Markdown application supports HTML, you should be able to embed a video in your Markdown file by copying and pasting the HTML code provided by a video website like YouTube or Vimeo. If your Markdown application doesn’t support HTML, you can’t embed a video, but you can come close by adding an image and a link to the video. You could do this with practically any video on any video service.\n\nSince YouTube makes this easy, we’ll use them as an example. Take this video, for instance: . The last part of the URL ( ) is the ID of the video. We can take that ID and put it in the following template:\n\nYouTube automatically generates an image for every video ( ), so we can use that and link the image to the video on YouTube. After we replace the image alt text and add the ID of the video, our example looks like this:\n\nThe rendered output looks like this:"
    },
    {
        "link": "https://tiiny.host/blog/images-in-markdown",
        "document": "\n• FAQ: Images in Markdown\n• How do I add an image in Markdown?\n• Can I link an image to a URL in Markdown?\n\nIt’s simple to insert an image into Markdown.\n\nBut doing much else with the image is a bit of a mess.\n\nI’m here to give you something hard to find: Markdown that formats and enhances your images.\n\nAnd there’s something else you should know.\n\nPlain HTML works in Markdown. We’ll be using HTML to pull some nice image manipulation tricks.\n\nMarkdown is plenty powerful, especially for web content. What it does, it does well.\n\nMarkdown was created by John Gruber and Aaron Swartz in 2004. Its purpose is to be as easy to use and human-readable as possible in its raw, plain-text format.\n\nKnowing a little Markdown history helps understand why some basic formatting functionality is so complicated. Using images in Markdown is a perfect example.\n\nMarkdown was not written as a standard. And therein lies the rub. It lacks a formal specification. It is a lightweight markup language. That’s all.\n\nThe lack of a formal specification has spawned many implementations and interpretations of Markdown. This causes some mayhem when trying to get anything done beyond basic markup tasks.\n\nAn effort to standardize Markdown is underway. CommonMark aims to create an unambiguous specification for Markdown. It has become widely adopted, but other Markdown flavors are still common.\n\nLet’s sort through the variations of Markdown markup. We’ll create snippets and techniques you can use to do advanced image manipulation in Markdown.\n\nAnd I’ll now reveal our secret weapon.\n\nBefore I start with Markdown, I want to let you in on a poorly kept secret. Markdown supports inline HTML. Well, it’s not actually a secret. It was designed like this from the beginning.\n\nThis feature makes up for all the dissimilar Markdown syntax problems. Finding consistency in browsers, editors, previewers, and processors relies on inserting HTML tags into your markup wherever needed.\n\nOn to the solutions.\n\nLet’s resurrect our first example from the introduction.\n\nThe Markdown is in three parts. All three parts are required.\n\nImage insertion begins with an exclamation point (!) or “bang.” This tells the Markdown interpreter that image information is coming.\n\n[Alt text] is required and displayed when the image can’t be shown. A significant use for alt text is for screenreaders that speak webpage content for the visually impaired. It is also used for text-only browsing of any kind. [Square brackets] delineate alt text.\n\n(File-path) is what it says, the path towards the image file itself. The file-path can be relative, absolute, or root-relative. It can also be a URL to an image on the internet. Use (parentheses) for the file path.\n\nThe path is relative to the Markdown file’s location.\n\nSpecifies a complete path from the root of the file system.\n\nWhen the image file is relative to the root directory.\n\nPoints to an online image, file, or document.\n\nNOTE: Relative paths or URLs are recommended for documents shared across different systems.\n\nIt is common to alter an image’s appearance on a web page or document. You may wish to resize, align, or add a title or caption.\n\nHere’s where it gets tricky.\n\nThree of the most common flavors of Markdown are:\n\nBut writing your Markdown in one of these doesn’t assure compatibility with the Markdown processor used for interpreting it. You must write specifically for your processor or else be as generic as possible.\n\nIf you will be using your Markdown on multiple platforms or in various applications, you can’t be sure what syntax all those processors use.\n\nNOTE: If you don’t know any HTML, it’s worth learning a bit. It gives you the flexibility to script anything you need in Markdown. Visit w3schools.com or another HTML tutorial site to get started.\n\nHere are several examples of image manipulation in HTML that you can use in Markdown.\n\nIf you know CSS, you can use it in your HTML either inline or as a referenced class. The CSS will style the image as you would expect.\n\nIf you know what flavor Markdown your processor uses, you can take advantage of this knowledge and use the specialized syntax that the processor supports.\n\nOne brief example is this:\n\nNote the {bracket notation} at the end of the primary tag.\n\nWhile this example works in MultiMarkdown, this notation is not supported in CommonMark or most Markdown flavors. As shown in the section above, HTML is a more reliable choice for CommonMark or any other Markdown processor.\n\nNow that you know how to access and manipulate your Markdown and images, you must host your web files somewhere.\n\nGetting them working on your local computer is fine, but to share them online, you need a web hosting service to store your Markdown and image files with the world.\n\nDid I mention that you can host a Markdown website for free?\n\nOur service, Tiiny.host, automates the entire hosting process and puts your Markdown (.md) files and images online in moments, not hours. Just drag and drop and sign in. That’s it.\n\nVisit Tiiny.host for more information about Markdown, hosting, images, or anything else web-related.\n\nOur wonderful customer supportstaff is available free of charge to anyone. You needn’t have an account already. Try us out!\n\nLet us know what you think.\n\nHow do I add an image in Markdown?\n\nUse this syntax: ![Alt Text](URL). “Alt Text” is the alternative description of the image, and “URL” is the path or link to the image.\n\nMarkdown doesn’t directly support resizing images. HTML tags, including the img tag, are supported within your Markdown. MultiMarkdown supports a direct image resize syntax.\n\nCan I link an image to a URL in Markdown?\n\nYes, wrap the image syntax in link syntax: [![Alt Text](Image URL])](Link URL)."
    },
    {
        "link": "https://stackoverflow.com/questions/11509830/how-to-add-color-to-githubs-readme-md-file",
        "document": "But screenshots aren't text, preventing readers from copy/pasting the command in the screenshot. They're also a pain to create / edit / maintain, and are slower for browsers to load. The modern web uses text styles, not a bunch of rendered images of text.\n\nCurrently, the only way to do this is with a screenshot (which can be stored in the project repository):\n\nI have a README.md file for my project underscore-cli , and I want to document the --color flag.\n\nThese emoji characters are also useful if you are okay with this limited variety of colors and shapes (though they may look different in different OS and browsers), This is an alternative to AlecRust's answer which needs an external service that may go down some day, and with the idea of using emojis from Luke Hutchison's answer: There are also many colored rectangle characters with alphanumeric, arrow, and other symbols that may work for you. Example usage: This was my use case that got solved by these emojis (which came to mind after reading the answers here) Also, the following emojis are skin tone modifiers that have the skin colors inside this rectangular-ish shape only on some devices. For example, in Windows, they are not even colored. Don't use them! Because they shouldn't be alone, they're supposed to be used with other emojis to modify the output of their sibling emojis. And also they are rendered so much different in different OS, version, browser, and version combination when used alone.\n\nI'm inclined to agree with M-Pixel that it's not currently possible to specify color for text in GitHub Markdown content, at least not through HTML. GitHub does allow some HTML elements and attributes, but only certain ones (see their documentation about their HTML sanitization). They do allow and tags, as well as attribute. However, when I tried using them in a Markdown document on GitHub, it didn't work. I tried the following (among other variations), and they didn't work: As M-Pixel suggested, if you really must use color you could do it in a README.html file and refer them to it.\n\nrefer to Supported color models in GitHub models as they clearly stated that:\n• None A supported color model cannot have any leading or trailing spaces within the backticks.\n• None The visualization of the color is only supported in issues, pull requests, and discussions. so they aren't supported through GitHub markdown language, but if you refer to Writing mathematical expressions in GitHub docs, they stated that : To enable clear communication of mathematical expressions, GitHub supports LaTeX formatted math within Markdown. For more information, see LaTeX/Mathematics in Wikibooks. which means that GitHub doesn't support color models in files but it supports which in turn supports color models in . so if you refer to this website provided by LaTeX/Mathematics, you will find a section called Color. which doesn't provide so much useful information, but it provides a link to LaTeX/Colors which contains all useful information about how to use latex colors. also to use LaTeX/Colors, you should use mathematical expressions in your GitHub README, so refer to Writing mathematical expressions in GitHub docs as before where they stated that :\n• None To include a math expression inline with your text, delimit the expression with a dollar symbol $.\n• None To add a math expression as a block, start a new line and delimit the expression with two dollar symbols $$. so for example, if you find an expression in LaTeX/Colors like this : in order to do it in GitHub according to GitHub docs, you should do it for example: by referring to LaTeX/Colors, here are some examples with their output as images on GitHub: code in file, where is used to skip backspace: code in file, where is used to skip backspace: change color for only part of the text code in file, where is used to skip backspace: and so on, you can try the rest by yourself. and you can define your colors, refer to the LaTeX/Colors as stated above and try it by yourself 😊.\n\nBased on AlecRust's idea, I did an implementation of the PNG text service. There are four parameters:\n• font: not used, because I only have Arial.ttf anyway on this demo. Please do not use this service directly (except for testing), but use the class I created that provides the service: class PngTextUtil { /** * Displays a PNG text. * * Note: this method is meant to be used as a web service. * * Options: * ------------ * - font: string = arial/Arial.ttf * The font to use. * If the path starts with a slash, it's an absolute path to the font file. * Else if the path doesn't start with a slash, it's a relative path to the font directory provided * by this class (the WebBox/assets/fonts directory in this repository). * - fontSize: int = 12 * The font size. * - color: string = 000000 * The color of the text in hexadecimal format (6 characters). * This can optionally be prefixed with a pound symbol (#). * * * * * * * @param string $text * @param array $options * @throws \\Bat\\Exception\\BatException * @throws WebBoxException */ public static function displayPngText(string $text, array $options = []): void { if (false === extension_loaded(\"gd\")) { throw new WebBoxException(\"The gd extension is not loaded!\"); } header(\"Content-type: image/png\"); $font = $options['font'] ?? \"arial/Arial.ttf\"; $fontsize = $options['fontSize'] ?? 12; $hexColor = $options['color'] ?? \"000000\"; if ('/' !== substr($font, 0, 1)) { $fontDir = __DIR__ . \"/../assets/fonts\"; $font = $fontDir . \"/\" . $font; } $rgbColors = ConvertTool::convertHexColorToRgb($hexColor); //-------------------------------------------- // GET THE TEXT BOX DIMENSIONS //-------------------------------------------- $charWidth = $fontsize; $charFactor = 1; $textLen = mb_strlen($text); $imageWidth = $textLen * $charWidth * $charFactor; $imageHeight = $fontsize; $logoimg = imagecreatetruecolor($imageWidth, $imageHeight); imagealphablending($logoimg, false); imagesavealpha($logoimg, true); $col = imagecolorallocatealpha($logoimg, 255, 255, 255, 127); imagefill($logoimg, 0, 0, $col); $white = imagecolorallocate($logoimg, $rgbColors[0], $rgbColors[1], $rgbColors[2]); // For font color $x = 0; $y = $fontsize; $angle = 0; $bbox = imagettftext($logoimg, $fontsize, $angle, $x, $y, $white, $font, $text); // Fill text in your image $boxWidth = $bbox[4] - $bbox[0]; $boxHeight = $bbox[7] - $bbox[1]; imagedestroy($logoimg); //-------------------------------------------- // CREATE THE PNG //-------------------------------------------- $imageWidth = abs($boxWidth); $imageHeight = abs($boxHeight); $logoimg = imagecreatetruecolor($imageWidth, $imageHeight); imagealphablending($logoimg, false); imagesavealpha($logoimg, true); $col = imagecolorallocatealpha($logoimg, 255, 255, 255, 127); imagefill($logoimg, 0, 0, $col); $white = imagecolorallocate($logoimg, $rgbColors[0], $rgbColors[1], $rgbColors[2]); // For font color $x = 0; $y = $fontsize; $angle = 0; imagettftext($logoimg, $fontsize, $angle, $x, $y, $white, $font, $text); // Fill text in your image imagepng($logoimg); // Save your image at new location $target imagedestroy($logoimg); } } Note: if you don't use the Universe framework, you will need to replace this line: In which case your hex color must be exactly six characters long (don't put the hash symbol (#) in front of it). Note: in the end, I did not use this service, because I found that the font was ugly and worse: it was not possible to select the text. But for the sake of this discussion I thought this code was worth sharing...\n\nUpdate:\n\n I now simplified coloured text and you can now just do this: These are all the query parameters you can use with this endpoint, note that custom fonts from urls won't work and a lot of svg's features will be limited, but still useful for generating coloured text easly.\n\n Note that the padding parameter needs to be a number without units like or . I know that this post is very old, but if you need a solution, you can use an endpoint I made for displaying svg: https://server.powerupstudio.eu/svg?c=(SVG CONTENT HERE) Where (SVG CONTENT HERE) is the svg content, here is an example of using this to display coloured text: Will generate green text \"Green\" when embedded into markdown like this: Any type of svg will work and the endpoint will not be down anytime soon as I will use it too, feel free to use it."
    },
    {
        "link": "https://discourse.devontechnologies.com/t/markdown-a-simple-method-for-scaling-images/70035",
        "document": "The following construct allows to scale an image in a Markdown document, while still using the original Markdown image command. No further css is needed. It turns out that a critical element is the empty line between the statement and the image command (that’s why I missed this a long time ago). Use to center the image horizontally, without that it will be left aligned. This is to my knowledge the easiest, least intrusive way of achieving this with minimal HTML cluttering up the markdown. If you associate a css sheet with Markdown in DT, you can further fine tune the global appearance of figures by customizing the environment, e.g to have the caption in somewhat smaller font and e.g. italics, set the background color, add a frame. This hack depends sensitively on the ability to use md commands inside a HTML environment, so it’s potentially fragile. It could stop working with a future update of the md engine. Important: No one is forced to use this. I have a good case for myself, and I figured (pun intended) that it would be worth sharing with those that also see some value in scaling and centering images in md. Note: This writeup replaces the original method, that was much more cumbersome. Some of the discussion below refer to that old version.\n\nThanks, @chrillek and @cgrunenberg for the feedback. I wholeheartedly agree that the bulky html block for the scaled images is annoying. But in order to fine-tune the environment for each figure, all the parameters would have to show up there, and can’t be in a css file. Having said that, in most cases the user probably only wants to adjust the width, and maybe the left/center/right alignment on a per-image basis. Everything else should probably go into a css, as you suggest. @chrillek: Well, that would have worked if I had not been stuck in HTML3 world. I didn’t know about the figure environment in HTML5. I now also realize that it is this very figure environment that shapes the appearance of the Markdown image environment. That explains a lot. I was wondering what css elements I would have to manipulate to e.g. format the caption. And all your other remarks about my html code are of course true. I’m essentially hacking this stuff by throwing things together, playing with it until it works, and then I stop . And then hope for forum feedback to make improvements. Standing on the shoulders of DT giants. Looking into all this again this morning, I suddenly found a method that allows to scale md images (and format other aspects) with leaving the md image command intact! In fact, I had tried this a long time ago and it did not work, and it turns out a single extra linefeed makes the difference. I’ll post that later today. One question about putting things in a css file: Of course, any formatting that can be punted into a css-file should be, to keep the md clean. The natural place would be the css template that can be specified in the DT prefs. However, to my knowledge this template is not available in DTTG, so to me this path is a no-go. I only see two other paths:\n• The css sits at a publicly available URL; this will not work in offline mode.\n• The css is located at as file in DT and is referenced on the first line of the md file as , which mucks up the md source right at the top, but otherwise works reliably on DTTG as well. The best solution would be to add the ability to specify a css template in DTTG. We need to convince Eric.\n\nWell, that would have worked if I had not been stuck in HTML3 world. Wow. Did you fall down a wormhole? HTML 3 – what kind of environment is that? This version appeared in 1997 and was superseeded in the same year by HTML 4. Which also went out of fashion about 10 years ago. But in order to fine-tune the environment for each figure Do you think that that’s necessary? I’d understand the requirement if you were publishing art books, for example. Otherwise, I do not think that it’s even a good idea to “fine tune” the style for every figure. Readers like consistency (I suppose). I’d go for a maximum of three widths (and leave the rest of the parameters the same for all figures): 98% of the container’s width (to allow for some white space left and right), 48% of the container’s width to allow for two images side by side, and 48% of the container’s width to allow for an image to the left of the text (i.e. the text flows “around” it at its right side). Of course, if you’re using a 3- or 4-column layout (are you?), 1, 2, 3, and 4 column wide images would perhaps be needed. Even if the idea of having special styles for every image were more appealing, it has one important disadvantage: You have to change every single image definition if you (for example) want them to be 30% or 50% wide. That’s a bit like foregoing “styles” (is that the term?) in Word - if you decide that your second level heading has to be 14 instead of 16 points, you’d have to change every single one of them by hand. Instead of changing the style. But: What are we really talking about here: A high-end web site that has to be mega attractive to millions of people – or rendering some technical stuff as fast possible, sufficiently “nice” and in a way that conveys the information as well as possible? The less special cases you take into account, the easier the task is becoming. And if it’s only you and some colleagues who’ll ever be looking at your rendered MD … maybe less is more. The natural place would be the css template that can be specified in the DT prefs. I think so, too. However, this approach has one drawback: The global CSS overwrites all styles predefined by DT. So a global stylesheet has to provide for everything. I find that a bit disappointing. And then there’s of course this template is not available in DTTG,\n\nWow. Did you fall down a wormhole? HTML 3 – what kind of environment is that? This version appeared in 1997 and was superseeded in the same year by HTML 4. Which also went out of fashion about 10 years ago. Well, I’m a subatomic physicist for my day job, and I wield whatever computer stuff is necessary. Typically as far as I need to get the job done, but not further, as my to-do list is already too long. For my own research webpage, I’ve had for 15 years now an instance of PmWiki, so no html involved there. Other than that, I fiddle with html for things like fudging the appearance of Markdown documents Using goes a long way. Today I added to my repertoire, and I’m also stoked about and ! Do you think that that’s necessary? I’d understand the requirement if you were publishing art books, for example. As I wrote in my previous post: no it’s not. As you suggest, I only use the md docs as internal working documents, so they need to be utilitarian in the first place, but when they are too rough, it bugs me. So I put a bit of work in. Currently (and that’s where my burst of activity on Markdown is coming from) I’m making a growing number of flashcards for my DT-internal spaced repetition practice system. Someone on this forum had mentioned how one can use and to make nice cards where you expand the answer. That together with LaTeX formulae and nice images makes for excellent cards written in markdown. I like those cards to look nice when I go through them. So yes, I spend a bit of effort on formatting.\n\nWe are dealing here with heavily extended Markdown (which one could call MultiMarkdown, which is however a specific implementation by Fletcher Penney), not John Gruber’s original use case. These extensions have been morphing continually over time. Within this context, it is wrong to state that “it is what it is”. If the community wants something it’s apparently being added. Why the desire for image attributes is so strongly contested here, I do not understand. There is a huge gap between wanting simple image scaling and alignment and “hey, if you need perfection, write it in LaTeX”. Obviously, images are handled just fine by Markdown (with the exception of attributes as noted above.) However, without some more information, images are not easily translated into other document formats (e.g. PDF). To handle this, my XSLT files will make use of dimensions (e.g. and ). If present, the image will be scaled. If only one dimension is specified, the image will be scaled proportionately. If neither nor is specified, then the image will be scaled such that its width is the same as a column of text. This is to prevent high resolution images from overflowing the page. Unfortunately, it has the side effect of “zooming” in on smaller images. So, if you have images that are being scaled in a way that you do not desire, simply specify at least one dimension. Note in particular the issue of scaling small images to full width. As such Mmd V6 allows image (and link) attributes inline. And some of it actually works in the Markdown system implemented in DT (seemingly not all, but I have not really played much with testing out attributes other than width), for now: This image ![Alt text](https://math.ucr.edu/home/baez/ecological/fox_white.jpg) is unscaled. Now we scale by pixel: ![](https://math.ucr.edu/home/baez/ecological/fox_white.jpg style=\"width:200px\" ) And now by percent: ![](https://math.ucr.edu/home/baez/ecological/fox_white.jpg style=\"width:50%\" )\n\nSome context here: I was referring to a post by someone who hijacked a year-old thread, giving misleading advice. As to the general question: Yes, MMD does allow including attributes in image and link markup. No, I don’t think that this is a good idea to use that for sizing images. Assuming that the intended output format is HTML (things might be different for, e.g., PDF). (from Penney’s example) results in And here’s what MDN has to say about inline dimensions in elements: Note: Including and enables the aspect ratio of the image to be calculated by the browser prior to the image being loaded. This aspect ratio is used to reserve the space needed to display the image, reducing or even preventing a layout shift when the image is downloaded and painted to the screen. Reducing layout shift is a major component of good user experience and web performance. So, in 2023, a single is not helpful. Alternatively, one could use a attribute like\n\n (which is a lot better than specifying pixels).\n\n Now, the image will be 50% of its surrounding box element. Which causes an interesting difference between images in a paragraph (inline) and on their own line. ![Isolated image is rendered as a figure](x-devonthink-item://4646CB4A-7DFE-4986-8078-1D313B7988F8 style=\"width: 50%;\") A paragraph with an inline image ![Inline image is rendered … inline](x-devonthink-item://4646CB4A-7DFE-4986-8078-1D313B7988F8 style=\"width: 50%;\") in the middle… how does that work? Isolated images are put inside a element, inline ones are not. The user has specified seemingly the same width for both, but the result is very different. That is not a shortcoming of MMD, things are working as documented. And with an appropriate stylesheet, one can make that difference disappear. And that’s a better approach, I believe: Write a CSS that does The Right Thing. For example, having an image display at 50% width on a smartphone might not make a lot of sense. Media (or, nowadays, container) queries in the CSS can take care of these issues. And a CSS allows one to apply the same style to all images (e.g. to add a shadow or whatever) – with attributes added to the MD, you’d have to do that for every image. Tedious. If a single image needs to be treated differently, one can still use an attribute in the MD and refer to it in the CSS.\n\nIt is more complicated to use a CSS Style sheet, which I already do for color tagging. Drag and drop images into DT groups are common.\n\n Easy image inserting with EASY scaling is within the ethos of fast Markdown writing. Not super perfect typesetting like latex. If you need that go Rmarkdown and Knitr/Pandoc. This is a way to fast documentation - faster than word, formatted and printable and deployable. I can code and hack with the best of them - just built R-Shiny deployment for an Apple Silicon ARM VM last night. Since the ARM binaries are not avail. It is not about hacking, been there done that. It is about fast, easy note taking - to produce formatted output fast for a hectic workflow. Perhaps CSS tagging for multiple common scales 50%, 75%, etc … hmmm good idea- thanks for the challenge! my point … simple fast note taking and documentation. Image scaling is just annoying in DT now."
    },
    {
        "link": "https://medium.com/markdown-monster-blog/getting-images-into-markdown-documents-and-weblog-posts-with-markdown-monster-9ec6f353d8ec",
        "document": "One good justification for using a rich editor for editing Markdown or a Weblog entry is that you can provide some additional features above and beyond what a simple text or code editor can provide. When you’re creating content you are usually dealing with a number of things beyond plain text like code snippets, feature widgets and most importantly — images.\n\nJust about any document you create is likely to include some visual content in the form of images and getting images into documents should be as quick and easy as possible. In this post I describe all the different ways available in Markdown Monster to add images to Markdown content.\n\nBecause images are so important Markdown Monster offers quite a few ways to embed images into a Markdown document:\n• Type it in using Markdown or HTML syntax\n• Using the Embed Image Dialog to select images or Urls\n• Drag and Drop image files from the Folder Browser\n• Drag and Drop image files from Explorer into the document\n• Use the Screen Capture Tool to Capture Screen Shots\n\nThe goal is to provide all these options because there are a lot of different ways we often interact with images. Sometimes we browse for images in folders, other times we pick up images off a Web page simply copying it to the clipboard and other times we just want to pick a file from disk and embed it.\n\nAll of those options are supported along with the base feature of just typing an image link into the Markdown.\n\nMarkdown is a text format so naturally you can type in the Markdown representation of an image using to put an image reference directly into the editor.\n\nSome typical image markup may look like this:\n\nIf the image exists in a local and linkable folder the and you know the URL or file you're linking to this bit of simple syntax is often the quickest way to get an image into the page.\n\nMarkdown also supports raw HTML syntax, so if you need to adorn your image with additional tags or styles you can do that as well:\n\nThe following HTML is also legal Markdown:\n\nNote that how well this works and the syntax used may depend on where this markdown or HTML will end up getting rendered. For example, GitHub doesn’t allow style information and instead allows a few attributes like , , to provide some of these feature with special syntax.\n\nIf you use the HTML output created by Markdown Monster however the raw HTML passes through and you’ll see the styled content as shown above.\n\nThe most visible way to embed images into your Markdown is to use the Toolbar Image icon (or Alt-I) to bring up the Embed Image dialog.\n\nTyping raw Markdown image links — using the Markdown syntax - works of course, but in most cases I either don't remember the file name I'm trying to embed, or I'm dealing with an image that isn't local to my document and needs to be saved to the local folder first.\n\nThis is where the Embed Image Dialog comes in:\n\nThe dialog is smart enough to pick up URLs or images from the clipboard when first loaded or if you re-activate the window when no image has been selected yet. The dialog also shows a preview of the image you’re pasting so you get an idea at what you’re looking at.\n\nIt also offers to save document non-relative files or pasted images to a local relative folder. You can also optionally embed images directly into the Markdown/HTML document as base64 embedded image content.\n\nYou can easily select files from the file system and embed them in your page by using the file open button (…) and selecting a file from the file selection dialog.\n\nIf the file you’re selecting is not in a relative folder to the currently open document or more than 1 level below the current document you get the option to save the file in a new location relative to the document. Markdown Monster then creates a link to the new file as a relative link.\n\nYou can also type a Web Url to an image directly in the first textbox of the dialog to embed that image. As with local files, the image is previewed.\n\nIf an image URL — a Url that ends in an image extension — is on the clipboard that URL is automatically filled into the textbox. Likewise if the field is empty and you navigate away from the form to say a Web Browser to copy a URL, the URL is automatically filled in when the form is reactivated saving a few keystrokes.\n\nYou can also paste images from the clipboard into this dialog with . As with the Web URL if you open the dialog and an image is on the clipboard, the image is pre-selected in the previewer and if you navigate away and re-activate the window with an image on the clipboard the image is automatically picked up and displayed.\n\nPasted images have to be saved to disk first so the dialog looks slightly different with a Save to Disk button choice:\n\nWhen you click it the image is saved to disk first. Then once the file exists the image’s new file is shown in the the file Textbox.\n\nWhen you click OK the file is embedded into the page.\n\nFinally you can also optionally embed the image as base64 content directly into the Markdown document. This can be useful in some situations where you want to have a self contained HTML document that doesn’t have external dependencies.\n\nMarkdown Monster creates a reference image link in the page which looks like this:\n\nThe image itself is marked with a reference ID which is then embedded at the bottom of the document with the actual base64 encoded image data.\n\nWhile this can be useful be aware that this image data is going to be very large and very ugly. It’s added at the very bottom of the document so it mostly stays out of the way, but it makes the Markdown document — and the resulting HTML page huge. Use this feature only if you don’t have no other way to link image content, otherwise it’s almost always better to embed links to external image files or URLs.\n\nThis is feature that’s been requested by a few people over time and it was easy enough to add, but I still would recommend thinking carefully of whether you want to use this. So much so that you have to click this checkbox — the base64 checkbox is not a tab stop so that it doesn’t easily get set by accident.\n\nOne very productive feature when dealing with images is to copy and paste images. If you pick up images off the Web it’s often easiest to copy the image from the Web browser (using on the browser context menu) and then simply pasting the image into the document. Likewise a lot of people love to use Alt-PrtScn to capture an active window and just paste that, although I'd argue the built-in screen capture tools do a better job for most scenarios like capturing mouse pointers allowing delayed captures and more control over what you're capturing.\n\nPasting images from the clipboard directly into a Markdown document was one of the most frequent requests I’ve received for Markdown Monster. I was somewhat non-committal on this feature as I didn’t use image pasting all that frequently. I use the screen capture tools a lot or save images to disk and then embed them with the Image dialog.\n\nBit incidentally right around the same time I started looking into this I started using Better TweetDeck which adds the ability to paste images directly into tweets rather than embedding by file and that really set me off on realizing how useful it is to be able to just paste images from the clipboard. With support for image pasting in Tweetdeck and Markdown Monster I find I’m using it all the time now and really miss it when it’s not available in other places.\n\nLong story short I underappreciated how productive image pasting can be compared to manually capturing, saving images in the proper location and then importing an image. Copying, pasting and saving is simple a lot faster.\n\nMarkdown Monster makes this process very easy — simply copy an image to the clipboard and then paste. MM will prompt to save the file for you (or you can embed it into the document as base64 as well) and then embed the resulting — hopefully relative — link to the image file.\n\nI love it because this feature actually changed the way I work in other places outside of MM as I think about pasting images a lot more these days and a lot of places — Twitter, Facebook, Github — all support this functionality in some capacity.\n\nYou can also drag images into the Markdown Editor from Windows Explorer. Simply find the file in Explorer and then drag it to the location where you want to see it in the Markdown document:\n\nIf you’re dragging the file from a non-relative location or location down further than one level ( ) below the document you're editing, MM prompts to save the file in a local path relative to the document - by default in the document's folder.\n\nIf you need to get screen captures into a page you can of course use Alt-PrtScn to the clipboard and then paste the image as shown above. That works fine, and for many cases that may be perfectly fine.\n\nHowever, if you need more control over capturing or you need to capture the mouse pointer, some sort of UI interaction (like a highlighted menu option or selection) that’s not really possible with Alt-PrtScn. For that scenario you can use the built-in screen capture feature of Markdown Monster.\n\nMarkdown Monster supports the basic built-in capture tool you see above, or — if you own SnagIt from Techsmith — you can use the built-in SnagIt integration to capture image using SnagIts superior image capture and editing tools. Either way both ways are directly integrated with MM and make it very quick to get captured images directly embedded into your document.\n\nWhen you save a PNG images from the clipboard or a file, MM will try to optimize and compress that image losslessly in the background.\n\nAfter a PNG file is saved it runs a lossless image optimizer against the PNG image to reduce the size of the file. Typical image size reductions for images saved from clipboard are 20–30% typically, for others it depends how optimized the images are in the first place. I find for images from Paint.NET I typically see a 10–15% smaller image, 10–20% or more from SnagIt images. But your mileage will vary.\n\nCompression ratios may vary but it’s nice to not have to worry too much about the level of PNG compression of your image tool (or the producer of the PNG) and let the optimizer do the work for you in the background.\n\nThe PNG Optimizer works in the Background\n\nComparing Image Size for jpg and png: Manual but a good Idea!\n\nIn the future it might be nice to also compare sizes of images created as PNG and JPG and pick the smaller of the two. For a number of things PNGs are preferrable both in size and quality (since they’re lossless), but not quite sure how to best provide UI for this since the optimization operations are quite slow and would hold up the workflow. Currently I often save images both as PNG and JPG and pick the one that’s smaller for my document. If you think this is nit-picking — the size differences between formats can often be quite drastic and for large files like Weblog post banner files that are often quite large it can mean the diffence between an 80k image or 500k image. For big images in particular it pays to compare image sizes!\n\nMy manual workflow for this is:\n• Paste or embed an image with the Image dialog\n• Right click on the doc tab, Open Folder\n• Compare the file size of both png and jpg files\n• Change the image file extension in the document if necessary\n\nManual — yes. Worth it for large images: Definitely if you can save 100k or often much more for every image load on your connection!\n\nThere’s still more that can be done in this space — one thing that has already come up and has been addressed with addins today — is the ability to save images to other storage spaces like Azure Blob Storage, or Imgur or some other storage mechanism like DropBox or OneDrive.\n\nI’ve looked at this a few times and backed out of implementation because the feature set of MM is still in flux — there are a lot of paths that lead to saving images in MM and the way this works differs quite considerably in places. To build a consolidated image saving mechanism will require a fair bit of abstraction and some internal UI logic (for picking save location etc.) that makes this trickier than just a simple provider API.\n\nToday if you want to save and embed images using a custom store you have to create an Addin to make it happen. One such addin exists in the form of the Save Image to Azure Blob Storage Addin (you can load it from Tools -> Addin Manager:\n\nThis is a full featured addin that duplicates some of the functionality in the Embed Image Dialog so this is not trivial to create. However, to create one for other storage providers or image services, they could probably copy and modify this existing addin and hook up the appropriate API functionality.\n\nThis will get easier in the future as we figure out a better way to make providers more generic, either via a direct image saving Provider API that can be extended and plugged into, or via single addin that provides upload capabilities to various providers.\n\nI’m hoping to hear from you fine people, to see what’s important you in the way of providers, and hopefully can solicit some participation in creating extensions that can interface with other services. The code for both Markdown Monster and all the Addins is available on Github and open for comments and discussions.\n\nAnd here you thought Image embedding is an open and shut book, right? Image embedding is a preferential thing for most people — everybody does it a little differently and for this reason Markdown Monster tries to provide a number of different ways that you can get your images into the page efficiently.\n\nI know thinking about the image workflow and adding features like image pasting and dragging images directly into the document have really improved my productivity while creating content and I hope the options in Markdown Monster can provide some of these same benefits to you.\n\nSo if you haven’t checked into the image embedding features in Markdown Monster, experiment a little and see if you can’t optimize your own workflow and make image embedding more efficient."
    },
    {
        "link": "https://markdownguide.org/basic-syntax",
        "document": "Nearly all Markdown applications support the basic syntax outlined in the original Markdown design document. There are minor variations and discrepancies between Markdown processors — those are noted inline wherever possible.\n\nTo create a heading, add number signs ( ) in front of a word or phrase. The number of number signs you use should correspond to the heading level. For example, to create a heading level three ( ), use three number signs (e.g., ).\n\nAlternatively, on the line below the text, add any number of characters for heading level 1 or characters for heading level 2.\n\nMarkdown applications don’t agree on how to handle a missing space between the number signs ( ) and the heading name. For compatibility, always put a space between the number signs and the heading name.\n\nYou should also put blank lines before and after a heading for compatibility.\n\nTo create paragraphs, use a blank line to separate one or more lines of text.\n\nUnless the paragraph is in a list, don’t indent paragraphs with spaces or tabs.\n\nTo create a line break or new line ( ), end a line with two or more spaces, and then type return.\n\nYou can use two or more spaces (commonly referred to as “trailing whitespace”) for line breaks in nearly every Markdown application, but it’s controversial. It’s hard to see trailing whitespace in an editor, and many people accidentally or intentionally put two spaces after every sentence. For this reason, you may want to use something other than trailing whitespace for line breaks. If your Markdown application supports HTML, you can use the HTML tag.\n\nFor compatibility, use trailing white space or the HTML tag at the end of the line.\n\nThere are two other options I don’t recommend using. CommonMark and a few other lightweight markup languages let you type a backslash ( ) at the end of the line, but not all Markdown applications support this, so it isn’t a great option from a compatibility perspective. And at least a couple lightweight markup languages don’t require anything at the end of the line — just type return and they’ll create a line break.\n\nYou can add emphasis by making text bold or italic.\n\nTo bold text, add two asterisks or underscores before and after a word or phrase. To bold the middle of a word for emphasis, add two asterisks without spaces around the letters.\n\nMarkdown applications don’t agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to bold the middle of a word for emphasis.\n\nTo italicize text, add one asterisk or underscore before and after a word or phrase. To italicize the middle of a word for emphasis, add one asterisk without spaces around the letters.\n\nMarkdown applications don’t agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to italicize the middle of a word for emphasis.\n\nTo emphasize text with bold and italics at the same time, add three asterisks or underscores before and after a word or phrase. To bold and italicize the middle of a word for emphasis, add three asterisks without spaces around the letters.\n\nNote: The order of the and tags might be reversed depending on the Markdown processor you're using.\n\nMarkdown applications don’t agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to bold and italicize the middle of a word for emphasis.\n\nTo create a blockquote, add a in front of a paragraph.\n\nThe rendered output looks like this:\n\nBlockquotes can contain multiple paragraphs. Add a on the blank lines between the paragraphs.\n\nThe rendered output looks like this:\n\nBlockquotes can be nested. Add a in front of the paragraph you want to nest.\n\nThe rendered output looks like this:\n\nBlockquotes can contain other Markdown formatted elements. Not all elements can be used — you’ll need to experiment to see which ones work.\n\nThe rendered output looks like this:\n\nFor compatibility, put blank lines before and after blockquotes.\n\nYou can organize items into ordered and unordered lists.\n\nTo create an ordered list, add line items with numbers followed by periods. The numbers don’t have to be in numerical order, but the list should start with the number one.\n\nCommonMark and a few other lightweight markup languages let you use a parenthesis ( ) as a delimiter (e.g., ), but not all Markdown applications support this, so it isn’t a great option from a compatibility perspective. For compatibility, use periods only.\n\nTo create an unordered list, add dashes ( ), asterisks ( ), or plus signs ( ) in front of line items. Indent one or more items to create a nested list.\n\nIf you need to start an unordered list item with a number followed by a period, you can use a backslash ( ) to escape the period.\n\nMarkdown applications don’t agree on how to handle different delimiters in the same list. For compatibility, don’t mix and match delimiters in the same list — pick one and stick with it.\n\nTo add another element in a list while preserving the continuity of the list, indent the element four spaces or one tab, as shown in the following examples.\n\nTip: If things don't appear the way you expect, double check that you've indented the elements in the list four spaces or one tab.\n\nThe rendered output looks like this:\n• This is the first list item.\n• I need to add another paragraph below the second list item.\n• And here’s the third list item.\n\nThe rendered output looks like this:\n• This is the first list item.\n• A blockquote would look great below the second list item.\n• And here’s the third list item.\n\nCode blocks are normally indented four spaces or one tab. When they’re in a list, indent them eight spaces or two tabs.\n\nThe rendered output looks like this:\n• Find the following code block on line 21:\n• Update the title to match the name of your website.\n\nThe rendered output looks like this:\n• Open the file containing the Linux mascot.\n\nYou can nest an unordered list in an ordered list, or vice versa.\n\nThe rendered output looks like this:\n\nTo denote a word or phrase as code, enclose it in backticks ( ).\n\nIf the word or phrase you want to denote as code includes one or more backticks, you can escape it by enclosing the word or phrase in double backticks ( ).\n\nTo create code blocks, indent every line of the block by at least four spaces or one tab.\n\nThe rendered output looks like this:\n\nTo create a horizontal rule, use three or more asterisks ( ), dashes ( ), or underscores ( ) on a line by themselves.\n\nThe rendered output of all three looks identical:\n\nFor compatibility, put blank lines before and after horizontal rules.\n\nTo create a link, enclose the link text in brackets (e.g., ) and then follow it immediately with the URL in parentheses (e.g., ).\n\nThe rendered output looks like this:\n\nMy favorite search engine is Duck Duck Go.\n\nYou can optionally add a title for a link. This will appear as a tooltip when the user hovers over the link. To add a title, enclose it in quotation marks after the URL.\n\nThe rendered output looks like this:\n\nMy favorite search engine is Duck Duck Go.\n\nTo quickly turn a URL or email address into a link, enclose it in angle brackets.\n\nThe rendered output looks like this:\n\nTo emphasize links, add asterisks before and after the brackets and parentheses. To denote links as code, add backticks in the brackets.\n\nThe rendered output looks like this:\n\nI love supporting the EFF.\n\n This is the Markdown Guide.\n\n See the section on .\n\nReference-style links are a special kind of link that make URLs easier to display and read in Markdown. Reference-style links are constructed in two parts: the part you keep inline with your text and the part you store somewhere else in the file to keep the text easy to read.\n\nFormatting the First Part of the Link\n\nThe first part of a reference-style link is formatted with two sets of brackets. The first set of brackets surrounds the text that should appear linked. The second set of brackets displays a label used to point to the link you’re storing elsewhere in your document.\n\nAlthough not required, you can include a space between the first and second set of brackets. The label in the second set of brackets is not case sensitive and can include letters, numbers, spaces, or punctuation.\n\nThis means the following example formats are roughly equivalent for the first part of the link:\n\nFormatting the Second Part of the Link\n\nThe second part of a reference-style link is formatted with the following attributes:\n• The label, in brackets, followed immediately by a colon and at least one space (e.g., ).\n• The URL for the link, which you can optionally enclose in angle brackets.\n• The optional title for the link, which you can enclose in double quotes, single quotes, or parentheses.\n\nThis means the following example formats are all roughly equivalent for the second part of the link:\n\nYou can place this second part of the link anywhere in your Markdown document. Some people place them immediately after the paragraph in which they appear while other people place them at the end of the document (like endnotes or footnotes).\n\nAn Example Putting the Parts Together\n\nSay you add a URL as a standard URL link to a paragraph and it looks like this in Markdown:\n\nThough it may point to interesting additional information, the URL as displayed really doesn’t add much to the existing raw text other than making it harder to read. To fix that, you could format the URL like this instead:\n\nIn both instances above, the rendered output would be identical:\n\nand the HTML for the link would be:\n\nMarkdown applications don’t agree on how to handle spaces in the middle of a URL. For compatibility, try to URL encode any spaces with . Alternatively, if your Markdown application supports HTML, you could use the HTML tag.\n\nParentheses in the middle of a URL can also be problematic. For compatibility, try to URL encode the opening parenthesis ( ) with and the closing parenthesis ( ) with . Alternatively, if your Markdown application supports HTML, you could use the HTML tag.\n\nTo add an image, add an exclamation mark ( ), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title in quotation marks after the path or URL.\n\nThe rendered output looks like this:\n\nTo add a link to an image, enclose the Markdown for the image in brackets, and then add the link in parentheses.\n\nThe rendered output looks like this:\n\nTo display a literal character that would otherwise be used to format text in a Markdown document, add a backslash ( ) in front of the character.\n\nThe rendered output looks like this:\n\n* Without the backslash, this would be a bullet in an unordered list.\n\nYou can use a backslash to escape the following characters.\n\nMany Markdown applications allow you to use HTML tags in Markdown-formatted text. This is helpful if you prefer certain HTML tags to Markdown syntax. For example, some people find it easier to use HTML tags for images. Using HTML is also helpful when you need to change the attributes of an element, like specifying the color of text or changing the width of an image.\n\nTo use HTML, place the tags in the text of your Markdown-formatted file.\n\nThe rendered output looks like this:\n\nThis word is bold. This word is italic.\n\nFor security reasons, not all Markdown applications support HTML in Markdown documents. When in doubt, check your Markdown application’s documentation. Some applications support only a subset of HTML tags.\n\nUse blank lines to separate block-level HTML elements like , , , and from the surrounding content. Try not to indent the tags with tabs or spaces — that can interfere with the formatting.\n\nYou can’t use Markdown syntax inside block-level HTML tags. For example, won’t work."
    },
    {
        "link": "https://docs.gitlab.com/user/markdown",
        "document": "GitLab Flavored Markdown (GLFM) is a powerful markup language that formats text in the GitLab user interface. GLFM:\n• Creates rich content with support for code, diagrams, math equations, and multimedia.\n• Links issues, merge requests, and other GitLab content with cross-references.\n\nWhen you enter text in the GitLab UI, GitLab assumes the text is in GitLab Flavored Markdown.\n\nYou can use GitLab Flavored Markdown in:\n• Snippets (the snippet must be named with a extension)\n\nYou can also use other rich text files in GitLab. You might have to install a dependency to do so. For more information, see the gem project.\n\nWe do our best to render the Markdown faithfully here, however the GitLab documentation website and the GitLab handbook use a different Markdown processor.\n\nGitLab Flavored Markdown consists of the following:\n\nAll standard Markdown formatting should work as expected in GitLab. Some standard functionality is extended with additional features, without affecting the standard usage.\n\nThe following features are not found in standard Markdown:\n\nThe following features are extended from standard Markdown:\n\nWhen you use GitLab Flavored Markdown, you are creating digital content. This content should be as accessible as possible to your audience. The following list is not exhaustive, but it provides guidance for some of the GitLab Flavored Markdown styles to pay particular attention to:\n\nUse heading formatting to create a logical heading structure. The structure of headings on a page should make sense, like a good table of contents. Ensure that there is only one element on a page, that heading levels are not skipped, and that they are nested correctly.\n\nTo keep tables accessible and scannable, tables should not have any empty cells. If there is no otherwise meaningful value for a cell, consider entering N/A for “not applicable” or None.\n\nDescribe the image or video in the . Make the description accurate, succinct, and unique. Don’t use or in the description. For more information, see WebAim Alternative Text.\n\nCreate headings from 1 to 6 by using .\n\nAlternatively, for H1 and H2, use an underline style:\n\nAll Markdown-rendered headings automatically get IDs that can be linked to, except in comments.\n\nOn hover, a link to those IDs becomes visible to make it easier to copy the link to the heading to use it somewhere else.\n\nThe IDs are generated from the content of the heading according to the following rules:\n• All text is converted to lowercase.\n• All non-word text (such as punctuation or HTML) is removed.\n• All spaces are converted to hyphens.\n• Two or more hyphens in a row are converted to one.\n• If a heading with the same ID has already been generated, a unique incrementing number is appended, starting at 1.\n\nWould generate the following link IDs:\n\nA line break is inserted (a new paragraph starts) if the previous text is ended with two newlines. For example, when you press twice in a row. If you only use one newline (press once), the next sentence remains part of the same paragraph. Use this approach if you want to keep long lines from wrapping, and keep them editable:\n\nHere’s a line for us to start with.\n\nThis longer line is separated from the one above by two newlines, so it is a separate paragraph.\n\nThis line is also a separate paragraph, but… These lines are only separated by single newlines, so they do not break and just follow the previous lines in the same paragraph.\n\nGitLab Flavored Markdown adheres to the Markdown specification for handling paragraphs and line breaks.\n\nA paragraph is one or more consecutive lines of text, separated by one or more blank lines (two newlines at the end of the first paragraph), as explained above.\n\nNeed more control over line breaks or soft returns? Add a single line break by ending a line with a backslash, or two or more spaces. Two newlines in a row create a new paragraph, with a blank line in between:\n\nYou can emphasize text in multiple ways. Use italics, bold, strikethrough, or combine these emphasis styles together.\n\nEmphasis, or italics, with asterisks or underscores.\n\nStrong emphasis, or bold, with double asterisks or underscores.\n\nAvoid italicizing a portion of a word, especially when you’re dealing with code and names that often appear with multiple underscores.\n\nGitLab Flavored Markdown ignores multiple underlines in words, to allow better rendering of Markdown documents discussing code:\n\nIf you wish to emphasize only a part of a word, it can still be done with asterisks:\n\nWith inline diff tags, you can display or .\n\nThe wrapping tags can be either curly braces or square brackets:\n\nHowever, you cannot mix the wrapping tags:\n\nDiff highlighting doesn’t work with . If your text includes backticks ( ), escape each backtick with a backslash :\n\nCreate a horizontal rule by using three or more hyphens, asterisks, or underscores:\n\nYou can create ordered and unordered lists.\n\nFor an ordered list, add the number you want the list to start with, like , followed by a space, at the start of each line. After the first number, it does not matter what number you use. Ordered lists are numbered automatically by vertical order, so repeating for all items in the same list is common. If you start with a number other than , it uses that as the first number, and counts up from there.\n\nFor an unordered list, add a , or , followed by a space, at the start of each line. Don’t mix the characters in the same list.\n\nThey can also:\n\nThey can even:\n\nIf a list item contains multiple paragraphs, each subsequent paragraph should be indented to the same level as the start of the list item text.\n• None Second paragraph of first item.\n\nIf the first item’s paragraph isn’t indented with the proper number of spaces, the paragraph appears outside the list. Use the correct number of spaces to properly indent under the list item. For example:\n\nOrdered lists that are the first sub-item of an unordered list item must have a preceding blank line if they don’t start with .\n\nCommonMark ignores blank lines between ordered and unordered list items, and considers them part of a single list. The items are rendered as a loose list. Each list item is enclosed in a paragraph tag and therefore has paragraph spacing and margins. This makes the list look like there is extra spacing between each item.\n\nCommonMark ignores the blank line and renders this as one list with paragraph spacing.\n\nA description list is a list of terms with corresponding descriptions. Each term can have multiple descriptions. In HTML this is represented with , , and tags.\n\nTo create a description list, place the term on one line, with the description on the next line beginning with a colon.\n\nYou can also have a blank line between the term and description.\n\nYou can add task lists anywhere Markdown is supported.\n• In issues, merge requests, epics, and comments, you can select the boxes.\n• In all other places, you cannot select the boxes. You must edit the Markdown manually by adding or removing an in the brackets.\n\nBesides complete and incomplete, tasks can also be inapplicable. Selecting an inapplicable checkbox in an issue, merge request, epic, or comment has no effect.\n\nTo create a task list, follow the format of an ordered or unordered list:\n\nTo include task lists in tables, use HTML list tags or HTML tables.\n\nYou can create links two ways: inline-style and reference-style. For example:\n• This line shows a link to a repository file in the same directory\n• This line shows a relative link to a file one directory higher\n• This line shows a link that also has title text\n• This line links to a section on a different Markdown page, using a “#” and the heading ID\n• This line links to a different section on the same page, using a “#” and the heading ID\n• This line is a reference-style link, see below\n• You can use numbers for reference-style link definitions, see below\n• Or leave it empty and use the link text itself, see below.\n\nSome text to show that the reference links can follow later.\n\nAlmost any URL you put into your text is auto-linked:\n\nGitLab Flavored Markdown renders GitLab-specific references. For example, you can reference an issue, a commit, a team member, or even an entire project team. GitLab Flavored Markdown turns that reference into a link so you can navigate between them. All references to projects should use the project slug rather than the project name.\n\nAdditionally, GitLab Flavored Markdown recognizes certain cross-project references and also has a shorthand version to reference other projects from the same namespace.\n• Introduced in GitLab 16.9. Iteration cadence references are always rendered following the format . For example, the text reference renders as if the referenced iterations cadence’s ID is .\n• For labels or milestones, prepend a before to specify the exact label or milestone, removing any possible ambiguity.\n\nFor example, referencing an issue by using formats the output as a link to issue number 123 with text . Likewise, a link to issue number 123 is recognized and formatted with text . If you don’t want to link to an issue, add a leading backslash .\n\nIn addition to this, links to some objects are also recognized and formatted. For example:\n\nTo include the title in the rendered link of an epic (using the new look), issue, task, objective, key result, merge request, or epic:\n• Add a plus ( ) at the end of the reference.\n\nFor example, a reference like is rendered as .\n\nURL references like are also expanded.\n\nTo include an extended summary in the rendered link of an epic (using the new look), issue, task, objective, key result, or merge request:\n• Add a at the end of the reference.\n\nSummary includes information about assignees, milestone and health status, as applicable by work item type, of referenced item.\n\nFor example, a reference like is rendered as The issue title (#123)\n• First Assignee, Second Assignee+\n• v15.10\n• Needs attention .\n\nURL references like are also expanded.\n\nTo update the rendered references if the assignee, milestone, or health status changed:\n• Edit the comment or description and save it.\n\nHovering over a link to a comment shows the author and first line of the comment.\n\nYou can embed GitLab Observability UI dashboards descriptions and comments, for example in epics, issues, and MRs.\n• In GitLab Observability UI, copy the URL in the address bar.\n• Paste your link in a comment or description. GitLab Flavored Markdown recognizes the URL and displays the source.\n• The first line contains the headers, separated by pipe characters ( ).\n• The second line separates the headers from the cells.\n• The cells can contain only empty spaces, hyphens, and (optionally) colons for horizontal alignment.\n• Each cell must contain at least one hyphen, but adding more hyphens to a cell does not change the cell’s rendering.\n• Any content other than hyphens, whitespace, or colons is not allowed\n• The third, and any following lines, contain the cell values.\n• You can’t have cells separated over many lines in the Markdown, they must be kept to single lines, but they can be very long. You can also include HTML tags to force newlines if needed.\n• The cell sizes don’t have to match each other. They are flexible, but must be separated by pipes ( ).\n• You can have blank cells.\n• Column widths are calculated dynamically based on the content of the cells.\n• To use the pipe character ( ) in the text and not as table delimiter, you must escape it with a backslash ( ).\n\nAdditionally, you can choose the alignment of text in columns by adding colons ( ) to the sides of the “dash” lines in the second row. This affects every cell in the column:\n\nIn GitLab itself, the headers are always left-aligned in Chrome and Firefox, and centered in Safari.\n\nYou can use HTML formatting to adjust the rendering of tables. For example, you can use tags to force a cell to have multiple lines:\n\nTo add task lists with checkboxes, use HTML formatting. Using either:\n• None An HTML table with Markdown in the cells. Tables formatted this way result in fully functioning task lists.\n• None A Markdown table with HTML list tags. These tasks don’t save their state when selected. Tables formatted this way do not render properly on .\n\nYou can also create a table in the rich text editor and insert a task list then.\n\nIf you’re working in spreadsheet software (for example, Microsoft Excel, Google Sheets, or Apple Numbers), GitLab creates a Markdown table when you copy and paste from a spreadsheet. For example, suppose you have the following spreadsheet:\n\nSelect the cells and copy them to your clipboard. Open a GitLab Markdown entry and paste the spreadsheet:\n\nTo render tables with JSON code blocks, use the following syntax:\n\nWatch the following video walkthrough of this feature:\n\nThe attribute is a list of objects representing the data points.\n\nTo specify the table labels, use the attribute.\n\nNot all elements of must have corresponding values in .\n\nWhen is not explicitly specified, the labels are picked from the first element of .\n\nYou can specify custom labels for .\n\nYou can enable sorting for individual elements of .\n\nYou can use the attribute to render a table with content filtered dynamically by user input.\n\nYou can use the attribute to allow for GitLab Flavored Markdown in the items and caption, including GitLab references. Fields do not support Markdown.\n\nBy default, every JSON table has the caption . You can override this caption by specifying the attribute.\n\nIf JSON is invalid, an error occurs.\n\nEmbed images, videos, and audio. You can add multimedia using Markdown syntax to link files, set dimensions, and display them inline. Formatting options let you customize titles, specify width and height, and control how media appears in the rendered output.\n\nEmbed images using inline or reference links. To see title text, hover over the image.\n\nImage tags that link to files with a video extension are automatically converted to a video player. The valid video extensions are , , , , and :\n\nYou can control the width and height of an image or video by following the image with an attribute list. The value must an integer with a unit of either (default) or .\n\nYou can also use the HTML tag instead of Markdown and set its and parameters.\n\nWhen you paste a higher resolution PNG image into a Markdown text box in GitLab 17.1 and later, dimensions are always appended. The dimensions are automatically adjusted to accommodate for retina (and other higher-resolution) displays. For instance, a 144ppi image is resized to 50% of its dimensions, whereas a 96ppi image is resized to 75% of its dimensions.\n\nSimilar to videos, link tags for files with an audio extension are automatically converted to an audio player. The valid audio extensions are , , , , and :\n\nUse a blockquote to highlight information, such as a side note. It’s generated by starting the lines of the blockquote with :\n\nHighlight anything that should be viewed as code and not standard text.\n\nTo achieve a similar effect for a larger code example, you can:\n• Fence an entire block of code with triple backticks ( ).\n• You can use more than three backticks, as long as both the opening and closing set have the same number. When you create a multi-line suggestion containing a code block, the number of backticks automatically increases.\n• Fence an entire block of code with triple tildes ( ).\n• Indent it four or more spaces.\n\nThe three examples above render as:\n\nGitLab uses the Rouge Ruby library for more colorful syntax highlighting in code blocks. For a list of supported languages visit the Rouge project wiki. Syntax highlighting is supported only in code blocks, so you can’t highlight inline code.\n\nTo fence and apply syntax highlighting to a block of code, append the code language to the opening code declaration, three back-ticks ( ) or three tildes ( ):\n\nThe four examples above render as:\n\nYou can generate diagrams from text by using:\n\nIn wikis, you can also add and edit diagrams created with the diagrams.net editor.\n\nVisit the official page for more details. The Mermaid Live Editor helps you learn Mermaid and debug issues in your Mermaid code. Use it to identify and resolve issues in your diagrams.\n\nTo generate a diagram or flowchart, write your text inside the block:\n\nYou can also include subgraphs:\n\nPlantUML integration is enabled on GitLab.com. To make PlantUML available in GitLab Self-Managed installation of GitLab, a GitLab administrator must enable it.\n\nAfter you enable PlantUML, diagram delimiters / aren’t required, as these are replaced by the block. For example:\n\nYou can include or embed a PlantUML diagram from separate files in the repository using the directive. For more information, see Include diagram files.\n\nTo make Kroki available in GitLab, a GitLab administrator must enable it. For more information, see the Kroki integration page.\n\nMath written in LaTeX syntax is rendered with KaTeX. KaTeX only supports a subset of LaTeX. This syntax also works in AsciiDoc wikis and files using . For details, see the Asciidoctor user manual.\n\nTo prevent malicious activity, GitLab renders only the first 50 inline math instances. You can disable this limit for a group or for the entire GitLab Self-Managed instance.\n\nThe number of math blocks is also limited based on render time. If the limit is exceeded, GitLab renders the excess math instances as text. Wiki and repository files do not have these limits.\n\nMath written between dollar signs with backticks ( ) or single dollar signs ( ) is rendered inline with the text.\n\nMath written between double dollar signs ( ) or in a code block with the language declared as is rendered on a separate line:\n\nA table of contents is an unordered list that links to subheadings in the document. You can add a table of contents to issues, merge requests, and epics, but you can’t add one to notes or comments.\n\nAdd one of these tags on their own line to the description field of any of the supported content types:\n\nAlerts can be used to highlight or call attention to something. The alert syntax uses the Markdown blockquote syntax followed by the type of alert. You can use alerts in any text box that supports Markdown.\n\nYou can use the following types of alerts:\n• None Note: information that users should take into account, even when skimming: > The following information is useful.\n• None Tip: Optional information to help a user be more successful:\n• None Important: Crucial information necessary for users to succeed: > This is something important you should know.\n• None > You need to be very careful about the following.\n• None > The following would be dangerous.\n\nThe title text shown for an alert defaults to the name of the alert. For example, alert has the title .\n\nTo override an alert block’s title, enter any text on the same line. For example, to use the warning color but have as the title:\n\nMultiline blockquotes also support the alert syntax. This allows you to wrap large and more complex text in an alert.\n\nYou can write a color code in the formats: , , or .\n\nIn the GitLab application (but not the GitLab documentation) color codes in backticks display a color chip next to the color code. For example:\n\nSometimes you want to around a bit and add some to your . Well we have a gift for you:\n\nYou can use emoji anywhere GitLab Flavored Markdown is supported.\n\nYou can use it to point out a or warn about patches. If someone improves your really code, send them some . People you for that.\n\nIf you’re new to this, don’t be . You can join the emoji . Just look up one of the supported codes.\n\nConsult the TanukiEmoji reference for a list of all supported emoji codes.\n\nThe above paragraphs in raw Markdown:\n\nThe previous emoji example uses hard-coded images. Rendered emoji in GitLab might look different depending on the OS and browser used.\n\nMost emoji are natively supported on macOS, Windows, iOS, Android, and fall back on image-based emoji where there is no support.\n\nOn Linux, you can download Noto Color Emoji to get full native emoji support. Ubuntu 22.04 (like many modern Linux distributions) has this font installed by default.\n\nTo learn more about adding custom emoji, see Custom emoji.\n\nFront matter is metadata included at the beginning of a Markdown document, preceding the content. This data can be used by static site generators like Jekyll, Hugo, and many other applications.\n\nWhen you view a Markdown file rendered by GitLab, front matter is displayed as-is, in a box at the top of the document. The HTML content displays after the front matter. To view an example, you can toggle between the source and rendered version of a GitLab documentation file.\n\nIn GitLab, front matter is used only in Markdown files and wiki pages, not the other places where Markdown formatting is supported. It must be at the very top of the document and must be between delimiters.\n\nThe following delimiters are supported:\n\nOther languages are supported by adding a specifier to any of the existing delimiters. For example:\n\nUse includes, or include directives, to add the content of a document inside another document.\n\nFor example, a book could be split into multiple chapters, and then each chapter could be included in the main book document:\n\nIn GitLab, include directives are used only in Markdown files and wiki pages, not the other places where Markdown formatting is supported.\n\nUse an include directive in a Markdown file:\n\nUse an include directive in a wiki page:\n\nEach must start at the beginning of a line, and specifies a file or URL for . The content of the specified file (or URL) is included at the position of the and processed with the remaining Markdown.\n\nInclude directives inside the included file are ignored. For example, if includes , and includes , when is processed, it doesn’t have the contents of .\n\nTo guarantee good system performance and prevent malicious documents from causing problems, GitLab enforces a maximum limit on the number of include directives processed in a document. By default, a document can have up to 32 include directives.\n\nTo customize the number of processed include directives, administrators can change the application setting with the application settings API.\n\nTo use includes from separate wiki pages or external URLs, administrators can enable the application setting.\n\nYou can use the directive inside code blocks to add content from files in your repository. For example, if your repository contains a file :\n\nYou can include it in your Markdown file:\n\nMarkdown reserves the following ASCII characters to format the page:\n\nTo use one of these reserved characters in your text, add the backslash character ( ) immediately before the reserved character. When you place the backslash before a reserved character, the Markdown parser omits the backslash and treats the reserved character as regular text.\n\nWhen rendered, the escaped characters look like this:\n\n*Not bold, just italic text placed between some asterisks*\n\nA backslash doesn’t always escape the character that follows it. The backslash appears as regular text in the following cases:\n• When the backslash appears before a non-reserved character, such as , , or a space.\n• When the backslash appears inside of these Markdown elements:\n\nIn these instances you might need to use the equivalent HTML entity, such as for .\n\nFootnotes add a link to a note rendered at the end of a Markdown file.\n\nTo make a footnote, you need both a reference tag and a separate line (anywhere in the file) with the note content.\n\nRegardless of the tag names, the relative order of the reference tags determines the rendered numbering.\n\nRegardless where you put the note, it’s always shown at the bottom of the file.\n\nA footnote reference tag looks like this:\n\nThis reference tag is a mix of letters and numbers.\n\nYou can also use raw HTML in your Markdown, and it usually works pretty well.\n\nSee the documentation for ’s SanitizationFilter class for the list of allowed HTML tags and attributes. In addition to the default allowlist, GitLab allows , , and elements. is allowed on links to support the Rel-License microformat and license attribution.\n\nIt’s still possible to use Markdown inside HTML tags, but only if the lines containing Markdown are separated into their own lines:\n\nContent can be collapsed using HTML’s and tags. For example, collapse a long log file so it takes up less screen space.\n\nMarkdown inside these tags is also supported.\n\nRemember to leave a blank line before and after any Markdown sections, as shown in the example:\n\nThe element is used to identify text that represents user keyboard input. Text surrounded by tags is typically displayed in the browser’s default monospace font.\n\nPress to go to the next page.\n\nFor superscripts and subscripts, use the standard HTML syntax:\n\nThe formula for water is H O while the equation for the theory of relativity is E = mc2.\n\nThe following topics show how links inside wikis behave.\n\nWhen linking to wiki pages, you should use the page slug rather than the page name.\n\nA direct page link includes the slug for a page that points to that page, at the base level of the wiki.\n\nThis example links to a page at the root of your wiki:\n\nA direct file link points to a file extension for a file, relative to the current page.\n\nIf the following example is on a page at , it links to :\n\nA hierarchical link can be constructed relative to the current wiki page by using relative paths like or .\n\nIf this example is on a page at , it links to :\n\nIf this example is on a page at , it links to :\n\nIf this example is on a page at , it links to :\n\nIf this example is on a page at , it links to :\n\nA root link starts with a and is relative to the wiki root.\n\nThis example links to :\n\nThis example links to :\n\nIn wikis, you can use the diagrams.net editor to create diagrams. You can also edit diagrams created with the diagrams.net editor. The diagram editor is available in both the plain text editor and the rich text editor.\n\nFor more information, see Diagrams.net.\n\nTo create a diagram in the plain text editor:\n• On the wiki page you want to edit, select Edit.\n• In the text box, make sure you’re using the plain text editor (the button on the bottom left says Switch to rich text editing).\n• In the editor’s toolbar, select Insert or edit diagram ( ).\n• Create the diagram in the app.diagrams.net editor.\n\nA Markdown image reference to the diagram is inserted in the wiki content.\n\nTo edit a diagram in the plain text editor:\n• On the wiki page you want to edit, select Edit.\n• In the text box, make sure you’re using the plain text editor (the button on the bottom left says Switch to rich text editing).\n• Position your cursor in the Markdown image reference that contains the diagram.\n• Edit the diagram in the app.diagrams.net editor.\n\nA Markdown image reference to the diagram is inserted in the wiki content, replacing the previous diagram.\n\nTo create a diagram in the rich text editor:\n• On the wiki page you want to edit, select Edit.\n• In the text box, make sure you’re using the rich text editor (the button on the bottom left says Switch to plain text editing).\n• In the editor’s toolbar, select More options ( ).\n• In the dropdown list, select Create or edit diagram.\n• Create the diagram in the app.diagrams.net editor.\n\nThe diagram as visualized in the diagrams.net editor is inserted in the wiki content.\n\nTo edit a diagram in the rich text editor:\n• On the wiki page you want to edit, select Edit.\n• In the text box, make sure you’re using the rich text editor (the button on the bottom left says Switch to plain text editing).\n• Select the diagram that you want to edit.\n• Edit the diagram in the app.diagrams.net editor.\n\nThe selected diagram is replaced with an updated version.\n• The GitLab Flavored Markdown development guidelines is a developer-facing document that describes in detail the various goals, tools, implementations, and terms related to the GLFM specification.\n• This document leveraged heavily from the Markdown-Cheatsheet.\n• The original Markdown Syntax Guide at Daring Fireball is an excellent resource for a detailed explanation of standard Markdown.\n• You can find the detailed specification for CommonMark in the CommonMark Spec."
    },
    {
        "link": "https://docs.github.com/articles/basic-writing-and-formatting-syntax",
        "document": "To create a heading, add one to six symbols before your heading text. The number of you use will determine the hierarchy level and typeface size of the heading.\n\nWhen you use two or more headings, GitHub automatically generates a table of contents that you can access by clicking within the file header. Each heading title is listed in the table of contents and you can click a title to navigate to the selected section.\n\nYou can indicate emphasis with bold, italic, strikethrough, subscript, or superscript text in comment fields and files.\n\nYou can quote text with a .\n\nQuoted text is indented with a vertical line on the left and displayed using gray type.\n\nYou can call out code or a command within a sentence with single backticks. The text within the backticks will not be formatted. You can also press the + (Mac) or + (Windows/Linux) keyboard shortcut to insert the backticks for a code block within a line of Markdown.\n\nTo format code or text into its own distinct block, use triple backticks.\n\nFor more information, see Creating and highlighting code blocks.\n\nIf you are frequently editing code snippets and tables, you may benefit from enabling a fixed-width font in all comment fields on GitHub. For more information, see About writing and formatting on GitHub.\n\nIn issues, pull requests, and discussions, you can call out colors within a sentence by using backticks. A supported color model within backticks will display a visualization of the color.\n\nHere are the currently supported color models.\n\nYou can create an inline link by wrapping link text in brackets , and then wrapping the URL in parentheses . You can also use the keyboard shortcut + to create a link. When you have text selected, you can paste a URL from your clipboard to automatically create a link from the selection.\n\nYou can also create a Markdown hyperlink by highlighting the text and using the keyboard shortcut + . If you'd like to replace the text with the link, use the keyboard shortcut + + .\n\nThis site was built using [GitHub Pages](https://pages.github.com/).\n\nYou can link directly to any section that has a heading. To view the automatically generated anchor in a rendered file, hover over the section heading to expose the icon and click the icon to display the anchor in your browser.\n\nIf you need to determine the anchor for a heading in a file you are editing, you can use the following basic rules:\n• Spaces are replaced by hyphens ( ). Any other whitespace or punctuation characters are removed.\n• Markup formatting is removed, leaving only the contents (for example, becomes ).\n• If the automatically generated anchor for a heading is identical to an earlier anchor in the same document, a unique identifier is generated by appending a hyphen and an auto-incrementing integer.\n\nFor more detailed information on the requirements of URI fragments, see RFC 3986: Uniform Resource Identifier (URI): Generic Syntax, Section 3.5.\n\nThe code block below demonstrates the basic rules used to generate anchors from headings in rendered content.\n\nYou can define relative links and image paths in your rendered files to help readers navigate to other files in your repository.\n\nA relative link is a link that is relative to the current file. For example, if you have a README file in root of your repository, and you have another file in docs/CONTRIBUTING.md, the relative link to CONTRIBUTING.md in your README might look like this:\n\nGitHub will automatically transform your relative link or image path based on whatever branch you're currently on, so that the link or path always works. The path of the link will be relative to the current file. Links starting with will be relative to the repository root. You can use all relative link operands, such as and .\n\nYour link text should be on a single line. The example below will not work.\n\nRelative links are easier for users who clone your repository. Absolute links may not work in clones of your repository - we recommend using relative links to refer to other files within your repository.\n\nYou can use standard HTML anchor tags ( ) to create navigation anchor points for any location in the document. To avoid ambiguous references, use a unique naming scheme for anchor tags, such as adding a prefix to the attribute value.\n\nYou can link to a custom anchor using the value of the attribute you gave the anchor. The syntax is exactly the same as when you link to an anchor that is automatically generated for a heading.\n\nIf you're writing in issues, pull requests, or discussions in a repository, GitHub will render a line break automatically:\n\nHowever, if you are writing in an .md file, the example above would render on one line without a line break. To create a line break in an .md file, you will need to include one of the following:\n• Include two spaces at the end of the first line. This example Will span two lines\n• Include a backslash at the end of the first line. This example\\ Will span two lines\n• Include an HTML single line break tag at the end of the first line. This example Will span two lines\n\nIf you leave a blank line between two lines, both .md files and Markdown in issues, pull requests, and discussions will render the two lines separated by the blank line:\n\nYou can display an image by adding and wrapping the alt text in . Alt text is a short text equivalent of the information in the image. Then, wrap the link for the image in parentheses .\n\n![Screenshot of a comment on a GitHub issue showing an image, added in the Markdown, of an Octocat smiling and raising a tentacle.](https://myoctocat.com/assets/images/base-octocat.svg)\n\nGitHub supports embedding images into your issues, pull requests, discussions, comments and files. You can display an image from your repository, add a link to an online image, or upload an image. For more information, see Uploading assets.\n\nHere are some examples for using relative links to display an image.\n\nFor more information, see Relative Links.\n\nYou can make an unordered list by preceding one or more lines of text with , , or .\n\nTo order your list, precede each line with a number.\n\nYou can create a nested list by indenting one or more list items below another item.\n\nTo create a nested list using the web editor on GitHub or a text editor that uses a monospaced font, like Visual Studio Code, you can align your list visually. Type space characters in front of your nested list item until the list marker character ( or ) lies directly below the first character of the text in the item above it.\n\nTo create a nested list in the comment editor on GitHub, which doesn't use a monospaced font, you can look at the list item immediately above the nested list and count the number of characters that appear before the content of the item. Then type that number of space characters in front of the nested list item.\n\nIn this example, you could add a nested list item under the list item by indenting the nested list item a minimum of five spaces, since there are five characters ( ) before .\n\nYou can create multiple levels of nested lists using the same method. For example, because the first nested list item has seven characters ( ) before the nested list content , you would need to indent the second nested list item by at least two more characters (nine spaces minimum).\n\nFor more examples, see the GitHub Flavored Markdown Spec.\n\nTo create a task list, preface list items with a hyphen and space followed by . To mark a task as complete, use .\n\nIf a task list item description begins with a parenthesis, you'll need to escape it with :\n\nFor more information, see About task lists.\n\nYou can mention a person or team on GitHub by typing plus their username or team name. This will trigger a notification and bring their attention to the conversation. People will also receive a notification if you edit a comment to mention their username or team name. For more information about notifications, see About notifications.\n\n@github/support What do you think about these updates?\n\nWhen you mention a parent team, members of its child teams also receive notifications, simplifying communication with multiple groups of people. For more information, see About teams.\n\nTyping an symbol will bring up a list of people or teams on a project. The list filters as you type, so once you find the name of the person or team you are looking for, you can use the arrow keys to select it and press either tab or enter to complete the name. For teams, enter the @organization/team-name and all members of that team will get subscribed to the conversation.\n\nThe autocomplete results are restricted to repository collaborators and any other participants on the thread.\n\nYou can bring up a list of suggested issues and pull requests within the repository by typing . Type the issue or pull request number or title to filter the list, and then press either tab or enter to complete the highlighted result.\n\nFor more information, see Autolinked references and URLs.\n\nIf custom autolink references are configured for a repository, then references to external resources, like a JIRA issue or Zendesk ticket, convert into shortened links. To know which autolinks are available in your repository, contact someone with admin permissions to the repository. For more information, see Configuring autolinks to reference external resources.\n\nYou can upload assets like images by dragging and dropping, selecting from a file browser, or pasting. You can upload assets to issues, pull requests, comments, and files in your repository.\n\nYou can add emoji to your writing by typing , a colon followed by the name of the emoji.\n\n@octocat :+1: This PR looks great - it's ready to merge! :shipit:\n\nTyping will bring up a list of suggested emoji. The list will filter as you type, so once you find the emoji you're looking for, press Tab or Enter to complete the highlighted result.\n\nFor a full list of available emoji and codes, see the Emoji-Cheat-Sheet.\n\nYou can create a new paragraph by leaving a blank line between lines of text.\n\nYou can add footnotes to your content by using this bracket syntax:\n\nThe footnote will render like this:\n\nAlerts are a Markdown extension based on the blockquote syntax that you can use to emphasize critical information. On GitHub, they are displayed with distinctive colors and icons to indicate the significance of the content.\n\nUse alerts only when they are crucial for user success and limit them to one or two per article to prevent overloading the reader. Additionally, you should avoid placing alerts consecutively. Alerts cannot be nested within other elements.\n\nTo add an alert, use a special blockquote line specifying the alert type, followed by the alert information in a standard blockquote. Five types of alerts are available:\n\nHere are the rendered alerts:\n\nYou can tell GitHub to hide content from the rendered Markdown by placing the content in an HTML comment.\n\nYou can tell GitHub to ignore (or escape) Markdown formatting by using before the Markdown character.\n\nFor more information on backslashes, see Daring Fireball's Markdown Syntax.\n\nWhen viewing a Markdown file, you can click Code at the top of the file to disable Markdown rendering and view the file's source instead.\n\nDisabling Markdown rendering enables you to use source view features, such as line linking, which is not possible when viewing rendered Markdown files.\n• About writing and formatting on GitHub"
    },
    {
        "link": "https://markdownguide.org/hacks",
        "document": "The majority of people using Markdown will find that the basic and extended syntax elements cover their needs. But chances are that if you use Markdown long enough, you’ll inevitably discover that it doesn’t support something you need. This page provides tips and tricks for working around Markdown’s limitations.\n\nTip: These hacks aren't guaranteed to work in your Markdown application. If you need to use these hacks frequently, you should consider writing using something other than Markdown.\n\nUnderlined text is not something you typically see in web writing, probably because underlined text is nearly synonymous with links. However, if you’re writing a paper or a report, you may need the ability to underline words and phrases. A couple of applications like Bear and Simplenote provide support for underlining text, but Markdown doesn’t natively support underlining. If your Markdown processor supports HTML, you can use the HTML tag to underline text in your document.\n\nThe rendered output looks like this:\n\nSome of these words .\n\nTabs and whitespace have a special meaning in Markdown. You can use trailing whitespace to create line breaks, and you can use tabs to create code blocks. But what if you need to indent a paragraph the old-fashioned way, using the tab key? Markdown doesn’t provide an easy way of doing that.\n\nYour best bet might be to use a Markdown editor that supports indentation. This is common in applications that are more oriented towards desktop publishing. For example, iA Writer allows you to customize indentation settings for the editor in the application preferences. It also provides template customization options so that you can make the rendered document look the way you expect it to, indentation and all.\n\nAnother option, if your Markdown processor supports HTML, is to use the HTML entity for non-breaking space ( ). This should probably be your option of last resort as it can get awkward. Basically, every in your Markdown source will be replaced with a space in the rendered output. So if you stick four instances of before a paragraph, the paragraph will look like it’s indented four spaces.\n\nThe rendered output looks like this:\n\nThis is the first sentence of my indented paragraph.\n\nHaving the ability to center text is a necessity when writing a paper or a report. Unfortunately, Markdown doesn’t have any concept of text alignment (one possible exception is when using tables). The good news is that there’s an HTML tag you can use: . If your Markdown processor supports HTML, you can place these tags around whatever text you want to center align.\n\nThe rendered output looks like this:\n\nThe HTML tag is technically supported but officially deprecated, which means it works for now but you’re not supposed to be using it. Unfortunately, there’s not another pure HTML alternative. You could try using one of the CSS alternatives. Not all Markdown applications provide CSS support, but if the one you’re using does, here’s an alternative to the tag:\n\nIf this is supported by your Markdown application, the output looks like this:\n\nMarkdown doesn’t allow you to change the color of text, but if your Markdown processor supports HTML, you can use the HTML tag. The attribute allows you to specify the font color using a color’s name or the hexadecimal code.\n\nThe rendered output looks like this:\n\nThe HTML tag is technically supported but officially deprecated, which means it works for now but you’re not supposed to be using it. Unfortunately, there’s not another pure HTML alternative. You could try using one of the CSS alternatives. Not all Markdown applications provide CSS support, but if the one you’re using does, here’s an alternative to the tag:\n\nIf this is supported by your Markdown application, the output looks like this:\n\nSome people need the ability to write sentences in their Markdown files that will not appear in the rendered output. These comments are essentially hidden text. The text is viewable by the author of the document, but it’s not printed on the webpage or PDF. Markdown doesn’t natively support comments, but several enterprising individuals have devised a solution.\n\nTo add a comment, place text inside brackets followed by a colon, a space, and a pound sign (e.g., ). You should put blank lines before and after a comment.\n\nThe rendered output looks like this:\n\nHere’s a paragraph that will be visible.\n\nAdmonitions are frequently used in documentation to call attention to warnings, notes, and tips. Markdown doesn’t provide special syntax for admonitions, and most Markdown applications don’t provide support for admonitions (one exception is MkDocs).\n\nHowever, if you need to add admonitions, you might be able to use blockquotes with emoji and emphasis to create something that looks similar to the admonitions you see on other websites.\n\nThe rendered output looks like this:\n\nThe Markdown syntax for images doesn’t allow you to specify the width and height of images. If you need to resize an image and your Markdown processor supports HTML, you can use the HTML tag with the and attributes to set the dimensions of an image in pixels.\n\nThe rendered output will contain the image resized to the dimensions you specified.\n\nMarkdown doesn’t natively support image captions, but there are two possible workarounds. If your Markdown application supports HTML, you can use the and HTML tags to add a caption for your image.\n\nThe rendered output looks like this:\n\nTip: If your Markdown application supports CSS, you can use CSS to style the appearance of the caption.\n\nIf your Markdown application doesn’t support HTML, you could try placing the caption directly below the image and using emphasis.\n\nThe rendered output looks like this:\n\nA single track trail outside of Albuquerque, New Mexico.\n\nSome people like creating links that open in new tabs or windows. The Markdown syntax for links doesn’t allow you to specify the attribute, but if your Markdown processor supports HTML, you can use HTML to create these links.\n\nThe rendered output looks like this:\n\nMarkdown doesn’t provide special syntax for symbols. However, in most cases, you can copy and paste whatever symbol you want to use into your Markdown document. For example, if you need to display Pi (π), just find the symbol on a webpage and copy and paste it into your document. The symbol should appear as expected in the rendered output.\n\nAlternatively, if your Markdown application supports HTML, you can use the HTML entity for whatever symbol you want to use. For example, if you want to display the copyright sign (©), you can copy and paste the HTML entity for copyright ( ) into your Markdown document.\n\nFor a complete list of available HTML entities, refer to Wikipedia’s page on HTML entities.\n\nMarkdown tables are notoriously finicky. You can’t use many Markdown syntax elements to format the text in table cells. But there are workarounds for at least two common table issues: Line breaks and lists.\n\nYou can separate paragraphs within a table cell by using one or more HTML tags.\n\nThe rendered output looks like this:\n\nYou can add a list within a table cell by using HTML tags.\n\nThe rendered output looks like this:\n\nSome Markdown applications like Markdeep can automatically generate a table of contents (also referred to as a toc) from your headings, but this isn’t a feature provided by all Markdown applications. However, if your Markdown application supports heading IDs, you can create a table of contents for your Markdown file using a list and some links.\n\nThe rendered output looks like this:\n\nIf your Markdown application supports HTML, you should be able to embed a video in your Markdown file by copying and pasting the HTML code provided by a video website like YouTube or Vimeo. If your Markdown application doesn’t support HTML, you can’t embed a video, but you can come close by adding an image and a link to the video. You could do this with practically any video on any video service.\n\nSince YouTube makes this easy, we’ll use them as an example. Take this video, for instance: . The last part of the URL ( ) is the ID of the video. We can take that ID and put it in the following template:\n\nYouTube automatically generates an image for every video ( ), so we can use that and link the image to the video on YouTube. After we replace the image alt text and add the ID of the video, our example looks like this:\n\nThe rendered output looks like this:"
    }
]