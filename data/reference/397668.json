[
    {
        "link": "https://openpyxl.readthedocs.io",
        "document": "It was born from lack of existing library to read/write natively from Python the Office Open XML format. All kudos to the PHPExcel team as openpyxl was initially based on PHPExcel.\n\nThis is an open source project, maintained by volunteers in their spare time. This may well mean that particular features or functions that you would like are missing. But things don’t have to stay that way. You can contribute the project Development yourself or contract a developer for particular features. Professional support for openpyxl is available from Clark Consulting & Research and Adimian. Donations to the project to support further development and maintenance are welcome. Bug reports and feature requests should be submitted using the issue tracker. Please provide a full traceback of any error you see and if possible a sample file. If for reasons of confidentiality you are unable to make a file publicly available then contact of one the developers. The repository is being provided by Octobus and Clever Cloud.\n\nAny help will be greatly appreciated, just follow those steps: 1. Please join the group and create a branch (https://foss.heptapod.net/openpyxl/openpyxl/) and follow the Merge Request Start Guide. for each independent feature, don’t try to fix all problems at the same time, it’s easier for those who will review and merge your changes ;-) 3. Don’t forget to add unit tests for your changes! (YES, even if it’s a one-liner, changes without tests will not be accepted.) There are plenty of examples in the source if you lack know-how or inspiration. 4. If you added a whole new feature, or just improved something, you can be proud of it, so add yourself to the AUTHORS file :-) 5. Let people know about the shiny thing you just implemented, update the docs! 6. When it’s done, just issue a pull request (click on the large “pull request” button on your repository) and wait for your code to be reviewed, and, if you followed all theses steps, merged into the main repository. For further information see Development There are several ways to contribute, even if you can’t code (or can’t code well):\n• None triaging bugs on the bug tracker: closing bugs that have already been closed, are not relevant, cannot be reproduced, …\n• None updating documentation in virtually every area: many large features have been added (mainly about charts and images at the moment) but without any documentation, it’s pretty hard to do anything with it\n• None proposing compatibility fixes for different versions of Python: we support 3.6, 3.7, 3.8 and 3.9."
    },
    {
        "link": "https://geeksforgeeks.org/python-reading-excel-file-using-openpyxl-module",
        "document": "Openpyxl is a Python library for reading and writing Excel (with extension xlsx/xlsm/xltx/xltm) files. The Openpyxl Module allows Python programs to read and modify Excel files. For example, users might have to go through thousands of rows and pick out a few handfuls of information to make small changes based on some criteria. Using Openpyxl module, these tasks can be done very efficiently and easily.\n\nUse this command to install openpyxl module\n\nProgram to Print the Particular Cell Value"
    },
    {
        "link": "https://openpyxl.readthedocs.io/en/3.1.3/tutorial.html",
        "document": "Install openpyxl using pip. It is advisable to do this in a Python virtualenv without system packages: There is support for the popular lxml library which will be used if it is installed. This is particular useful when creating large files. To be able to include images (jpeg, png, bmp,…) into an openpyxl file, you will also need the “pillow” library that can be installed with: or browse https://pypi.python.org/pypi/Pillow/, pick the latest version and head to the bottom of the page for Windows binaries. Sometimes you might want to work with the checkout of a particular version. This may be the case if bugs have been fixed but a release has not yet been made.\n\nThere is no need to create a file on the filesystem to get started with openpyxl. Just import the class and start work: A workbook is always created with at least one worksheet. You can get it by using the property: This is set to 0 by default. Unless you modify its value, you will always get the first worksheet by using this method. You can create new worksheets using the method: Sheets are given a name automatically when they are created. They are numbered in sequence (Sheet, Sheet1, Sheet2, …). You can change this name at any time with the property: Once you gave a worksheet a name, you can get it as a key of the workbook: You can review the names of all worksheets of the workbook with the attribute You can loop through worksheets You can create copies of worksheets within a single workbook: Only cells (including values, styles, hyperlinks and comments) and certain worksheet attributes (including dimensions, format and properties) are copied. All other workbook / worksheet attributes are not copied - e.g. Images, Charts. You also cannot copy worksheets between workbooks. You cannot copy a worksheet if the workbook is open in or mode.\n\nNow we know how to get a worksheet, we can start modifying cells content. Cells can be accessed directly as keys of the worksheet: This will return the cell at A4, or create one if it does not exist yet. Values can be directly assigned: There is also the method. This provides access to cells using row and column notation: When a worksheet is created in memory, it contains no . They are created when first accessed. Because of this feature, scrolling through cells instead of accessing them directly will create them all in memory, even if you don’t assign them a value. will create 100x100 cells in memory, for nothing. Ranges of cells can be accessed using slicing: Ranges of rows or columns can be obtained similarly: You can also use the method: For performance reasons the method is not available in read-only mode. If you need to iterate through all the rows or columns of a file, you can instead use the property: For performance reasons the property is not available in read-only mode. If you just want the values from a worksheet you can use the property. This iterates over all the rows in a worksheet but returns just the cell values: Both and can take the parameter to return just the cell’s value:\n\nOnce we have a , we can assign it a value: The simplest and safest way to save a workbook is by using the method of the object: This operation will overwrite existing files without warning. The filename extension is not forced to be xlsx or xlsm, although you might have some trouble opening it directly with another application if you don’t use an official extension. As OOXML files are basically ZIP files, you can also open it with your favourite ZIP archive manager. If required, you can specify the attribute , to save a workbook as a template: If you want to save the file to a stream, e.g. when using a web application such as Pyramid, Flask or Django then you can simply provide a : You should monitor the data attributes and document extensions for saving documents in the document templates and vice versa, otherwise the result table engine can not open the document. # Need to save with the extension *.xlsx # MS Excel will not open the document # If we need a template document, then we must specify extension as *.xltm. # MS Excel will not open the document"
    },
    {
        "link": "https://kartoza.com/blog/python/reading-and-writing-xlsx-file-with-openpyxl?srsltid=AfmBOor7EPNFM2ygP4Nh1kvI4f2WbvFXVYO0vkTH88aVXUvmEsrH5P1g",
        "document": "Openpyxl is a Python library used for manipulating Excel files. I came across a ticket that needs to export data ti XLSX format, and I used Openpyxl for that as it’s pretty straightforward.\n\nReading XLSX file is simple. First, we load the file into a Workbook object and choose the sheets. If the file contains only one sheet, we can use .active to get the sheet. Active will return active sheet, and in the case when there’s only 1 sheet, that sheet will always be active.\n\nWe can get cell value by entering cell coordinate, which will be useful when we need specific cell value.\n\nor by looping the row, which can be used when we import a data.\n\nOn this example, I only print the cell value but in real case, we can literally do anything with those data.\n\nWriting to XLSX File is an easy feat with Openpyxl. We need to first create a workbook object before finally saving it to desired destination. This example creates workbook containing 2 worksheets.\n\nWe must call save() at the end to finally export the workbook, otherwise the workbook will exist only as an object.\n\nThose are simple example to write XLSX to file. For more complex formatting such as style, you can read the detailed documentation here:\n\nIt's more than often that what we want to achieve in our Django app is not simply saving the XLSX file, but to return it the as a request’s reponse. The way of creating workbook object is basically the same, but now we save it to response object. We'll use the previous code to write XLSX file with some updates.\n\nIn previous code, we save the workbook to a file. Now, we will save it to a response object. We must explicitly set the content type of the response, which is application/vnd.openxmlformats-officedocument.spreadsheetml.sheet. Please note that the value is predefined, so for XLSX file the content type will always be the same and you cannot change it. Using different content type might make the browser to falsely think it as different media type. We also need to set the content disposition to attachment to make the response be downloaded instead of displayed on the browser, and provide the filename for the file.\n\nNow, replace wb.save(filename=dest_filename) this code and remove dest_filename = 'empty_book.xlsx' as we won't need it anymore.\n\nAnd finally, save the workbook to the response object and return it with\n\nSo now, our code looks like this\n\nUsing Openpyxl to read and write XLSX file is pretty easy, and will basically cover most of our requirements. Now, you can try to read and write simple XLSX then move on to read and write XLSX with more complex formatting."
    },
    {
        "link": "https://geeksforgeeks.org/python-writing-excel-file-using-openpyxl-module",
        "document": "is a Python library for reading and writing Excel (with extension xlsx/xlsm/xltx/xltm) files. The openpyxl module allows Python program to read and modify Excel files.\n\nFor example, user might have to go through thousands of rows and pick out few handful information to make small changes based on some criteria. Using Openpyxl module, these tasks can be done very efficiently and easily.\n\nLet’s see how to create and write to an excel-sheet using Python.\n\n\n\n Code #2 : Program to change the Title name\n\n\n\n Code #3 :Program to write to an Excel sheet\n\ncode #4 :Program to add Sheets in the Workbook"
    },
    {
        "link": "https://stackoverflow.com/questions/11295917/how-to-select-a-directory-and-store-the-location-using-tkinter-in-python",
        "document": "I am creating a GUI with a browse button which I only want to return the path. I've been looking at solutions using code like below.\n\nHowever I know Tkinter has a built in which is a super easy one line of code for opening files. Is there some way to modify this to return the directory instead of a file? Is there a smaller option than the larger chunk of code I posted?"
    },
    {
        "link": "https://docs.python.org/3/library/dialog.html",
        "document": "The module provides classes and factory functions for creating file/directory selection windows.\n\nThe following classes and functions provide file dialog windows that combine a native look-and-feel with configuration options to customize behaviour. The following keyword arguments are applicable to the classes and functions listed below:\n\nThe below functions when called create a modal, native look-and-feel dialog, wait for the user’s selection, then return the selected value(s) or to the caller.\n\nThe below classes are used for creating file/directory windows from scratch. These do not emulate the native look-and-feel of the platform."
    },
    {
        "link": "https://stackoverflow.com/questions/9319317/quick-and-easy-file-dialog-in-python",
        "document": "I have a simple script which parses a file and loads it's contents to a database. I don't need a UI, but right now I'm prompting the user for the file to parse using which is most unfriendly, especially because the user can't copy/paste the path. I would like a quick and easy way to present a file selection dialog to the user, they can select the file, and then it's loaded to the database. (In my use case, if they happened to chose the wrong file, it would fail parsing, and wouldn't be a problem even if it was loaded to the database.)\n\nThis code is close to what I want, but it leaves an annoying empty frame open (which isn't able to be closed, probably because I haven't registered a close event handler).\n\nI don't have to use tkInter, but since it's in the Python standard library it's a good candidate for quickest and easiest solution.\n\nWhats a quick and easy way to prompt for a file or filename in a script without any other UI?"
    },
    {
        "link": "https://pythonassets.com/posts/browse-file-or-folder-in-tk-tkinter",
        "document": "Tk provides functions to display dialogs for browsing files or folders on Windows, Linux (or any other Unix-based system) and macOS. In Python those functions are accessible through the standard module. The most important ones are:\n\nThe and functions display a dialog to open one or more files. does the same for browsing a folder (it is not possible to select more than one folder). displays a dialog similar to the first two functions, but to save a file instead of opening it. We will see their differences in a moment.\n\nOn Windows and macOS these functions work internally with native dialogs provided by the OS, which ensures that you always get an up-to-date and modern tool for browsing files or folders. On the Microsoft system, Tk makes use of the IFileDialog, IFileOpenDialog and IFileSaveDialog native interfaces available starting with Windows Vista. On Windows XP and earlier, the GetOpenFileName() and GetSaveFileName() functions are used. The implementation can be seen in the tkWinDialog.c file of the Tk source code. On macOS, Tk also works with the NSOpenPanel and NSSavePanel native interfaces. The implementation is available in the tkMacOSXDialog.c file (written in Objective-C). On Unix systems the dialogs simulate the Windows (95) window and are written directly in Tcl in the tkfbox.tcl file.\n\nAll functions have a similar interface. They can be called without arguments and return a string (with the exception of , which returns a tuple of strings). For example, to display a dialog to open a file, use:\n\nThe dialog allows you to walk through the entire file system and select a file from it. The dialog texts are displayed in the language configured in the operating system. The path of the file selected by the user is returned as a string and stored, in this case, in the variable. If the user cancels or closes the dialog, the result is an empty string or tuple (depending on the operating system), so you'll probably want to do add a conditional after calling the function. Since both empty tuples and empty strings evaluate to , it is not necessary to distinguish one case from the other. For example:\n\nThe function (note the \"s\" at the end) allows the user to select more than one file in the same folder. The result is in this case a tuple containing the paths of the selected files. Here, too, an empty string or tuple is returned when the dialog is cancelled.\n\nis similar to , but only allows you to select folders:\n\nNote that in these three functions the selected folders or files must exist. If the user types a non-existent file or folder name, the dialog displays an error message.\n\nThe function, on the other hand, is used to select a file that doesn't exist yet by typing its name into the textbox, typically to implement a file save feature. If the selected file already exists, the dialog displays a message to the user asking for his confirmation to replace the file. The return value has the same behavior as in .\n\nBy default, the dialogs prompted by the three file-browse functions show all types of files. You can configure the dialog to show only certain types of files by using the argument:\n\nThe argument receives a tuple of 2-tuples. The first element of the inner tuples specifies the name of the file type that will be displayed to the user. The second can be a string or a tuple of strings containing the patterns to be used. For example, the string shows only files ending with , while the tuple displays files ending with both or . The pattern is used to display files with any name and extension. When the argument is present, the dialog includes a dropdown list to show certain file types:\n\nIn these four functions the argument can be passed to define the initial path in which the dialog will appear. For example:\n\nOr to initialize in the directory where the Python interpreter is located:\n\nIf is not specified, the initial path depends on the operating system. On Unix and macOS systems it is the current working directory, which is usually where your Python file is located. On Windows it is the last directory from which a file was successfully selected in that same application. On macOS sometimes the value of is ignored, depending on user settings.\n\nFinally, the title and parent window of the dialog can be specified via the and parameters, respectively. The dialog closes automatically if the parent window is destroyed."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-specify-the-file-path-in-a-tkinter-filedialog",
        "document": "How to specify the file path in a tkinter filedialog?\n\nIn this article, we are going to know how to specify the file path in a tkinter filedialog.\n\nAre you creating a GUI app in which you want the user to directly open a specific location while selecting a file or saving a file? Then, you must definitely read this article. This article will discuss how to specify the file path in a Tkinter dialog.\n\nThis module includes a set of unique dialogs which can be used while dealing with files. It is specifically used for the file selection when you want to provide an option to user to browse a file or a directory from the system.\n\nStep 1: First of all, import the libraries, tk, ttk, and filedialog from Tkinter.\n\nStep 3: Then, give the title and dimensions to the app.\n\nStep 4: Create a text field for putting the text extracted from the file.\n\nStep 5: Specify the location of the text field.\n\nStep 6: Further, create a function to open the file dialog.\n\nStep 6.1: Later on, specify the file types.\n\nStep 6.2: Moreover, show the open file dialog at the specified path by the user.\n\nStep 6.3: Insert the text extracted from a file in a text field.\n\nStep 7: Next, create a button that when clicked will open the file dialog.\n\nStep 8: Furthermore, specify the position of the button on the GUI app.\n\nStep 9: At last, call an infinite loop for displaying the app on the screen.\n\nBelow is the complete implementation:"
    },
    {
        "link": "https://stackoverflow.com/questions/10607688/how-to-create-a-file-name-with-the-current-date-time-in-python",
        "document": "Here is a functional code (create file with success)\n\nNow I'm trying to name the file with the current date/time (I'm not an expert in Python)\n\nI want to write out a file name with the exact date and time, it is a xml file, that the program has already create, I just need to name the file. The above code is not working."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-create-filename-containing-date-or-time-in-python",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/60760759/adding-timestamp-to-file-name-in-python",
        "document": "I want to add a timestamp to my file name for the ease to recognize the latest file.\n\nfor this, I tried the following code:-\n\nunfortunately, I am getting an error as\n\nPlease help me with this."
    },
    {
        "link": "https://docs.python.org/3/library/datetime.html",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/how-to-get-file-creation-and-modification-date-or-time-in-python",
        "document": "How to get file creation and modification date or time in Python?\n\nWe often need to access various file properties for different purposes. Among the file properties, the creation and modification time of a file are the most commonly used ones. We can achieve the same functionality and use it for various utility purposes, using multiple methods.\n\nYou can use functions from the time module and datetime module to get the file creation and modification of date or time.\n\nUsing the OS and Time module\n\nWe will use the getctime() and getmtime() function, found inside the path module in the os library, for getting the creation and modification times of the file.\n\nBoth the above functions return time in seconds since EPOCH (00:00:00 UTC on 1 January 1970). Since that number doesn’t resemble an understandable timestamp, we would have to convert that time so that it becomes recognizable. For that purpose, we would be using the ctime() function found inside the time library.\n\nExample 1: Getting creation and modification time using getctime() and getmtime() methods.\n\nThe timestamp of the above code has the following format qualifiers –\n\nWhere the word inside the bracket is the cue for what is being displayed, and the number following it within the parenthesis displays the length it will occupy.\n\nExample 2: Get creation and modification time in ISO 8601 format\n\nBy default, the ctime() function would return a timestamp of the aforementioned syntax. In order to change it, we would have to pass it to strptime() function (also found inside the time library) to create a time structure (object) out of it. Then we can pass format specifiers to strftime(), to create a custom timestamp out of the time structure. In the following code, we will be getting the modification time of the same file in ISO 8601 timestamp format.\n\nClasses for working with date and time are provided by the Python datetime module. Numerous capabilities to deal with dates, times, and time intervals are provided by these classes. Python treats date and datetime as objects, so when you work with them, you’re working with objects rather than strings or timestamps.\n\nExample 1: Convert creation and modification time into a Datetime object\n\nWe can convert the time returned by the getctime() method and the getmtime() method into a DateTime object using the datetime.datetime.fromtimestamp() method.\n\nExample 2: Get Creation And Modification Time Of a File Using pathlib.path\n\npathlib module in Python allows you to work with file paths and file systems. pathlib.path is a submodule of pathlib library that allows you to work with file paths in an object-oriented manner.\n\nWe will use the stat().st_mtime function to get the modification time of the file and stat().st_ctime to get the creation time of the file.\n\nWe have used the OS module and pathlib module to get the creation and modification time of the file. We have also used the datetime module and time module to convert the returned time into a more understandable format. Getting modification and creation time of the file is an important operation of file handling."
    }
]