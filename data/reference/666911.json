[
    {
        "link": "https://defold.com/manuals/html5",
        "document": "Getting Started - Introduction - Installing Defold - Glossary - Defold for Flash users - Getting help Project Setup - Creating a project - Project settings - Sharing projects Editor - Overview - Code editor - Custom project templates - Editor scripts - Editor scripts: UI - Debugger - Keyboard shortcuts - Preferences - Refactoring - Styling Core Concepts - Building blocks - Addressing - Message passing - Application lifecycle Assets and Resources - Importing assets - Caching assets - Importing 2D graphics - Importing 3D models - Adapting to different screen sizes - Live update - Atlas - Buffer - Font - Runtime TTF Font - Resource management - Tile source - Texture filtering - Texture compression Animations - Overview - Flipbook Animation - Model animation - Property animation (tweens) - Rive animation - Spine animation Components - Overview - Collection factory - Collection proxy - Collision object - Camera - Factory - Label - Mesh - Model - Particle FX - Rive - Sound - Spine - Sprite - Tilemap GUI - GUI overview - Box nodes - Text nodes - Pie nodes - Spine nodes - ParticleFX nodes - Template nodes - Scripts - Clipping - Layouts Physics - Physics overview - Collision objects - Collision shapes - Collision groups - Collision messages - Collision events listener - Resolving collisions - Ray casts - Joints and constraints Sound - Sound - Sound Streaming - FMOD Input - Overview - Key and text input - Mouse and touch - Gamepads Game logic - Scripts - Properties - Script properties - Lua in Defold - Source code obfuscation - Modules - Debugging - Writing code Files - Working with files Network Connections - Overview - HTTP Requests - Socket connections - WebSocket connections - Online services Rendering - Render - Material - Compute - Shader - Texture filtering Workflow - Application security - Bundling an application - Caching assets - Command line tools - Hot reloading - Porting guidelines - Refactoring - The mobile dev app - Version control - Writing code - Working offline Debugging - Debugging game logic - Debugging native code - Debugging native code on Android - Debugging native code on iOS - Reading game and system logs Optimization - Optimizing an application - Optimize game size - Optimize runtime performance - Optimize battery usage - Optimize memory usage - Profiling Monetization - Ads - In-app purchases Android - Introduction - Advertising Info - AdMob ads - Android Device Performance Framework - App review and ratings - Camera - Facebook - Firebase Analytics - Firebase Remote Config - Google Play Game Services - Google Play Instant - Inter-app communication - IronSource ad mediation - Push notifications - Safe Area - Webview - The mobile dev app iOS - Introduction - Advertising Info - AdMob ads - App review and ratings - Camera - Facebook - Firebase Analytics - Firebase Remote Config - Inter-app communication - IronSource ad mediation - Push notifications - Safe Area - Webview - The mobile dev app Consoles - Nintendo Switch - PlayStation®4 - PlayStation®5 - Microsoft Xbox HTML5 - Introduction - CrazyGames - Facebook - Facebook Instant Games - Poki Desktop - Linux - macOS - Windows Engine extensions - Introduction - Defold SDK - Gradle dependencies - Cocoapod dependencies - Adding auto-complete definition - Best Practices - Debugging - Extension Manifests - App Manifests - Manifest Merging - The Lua C API (external) - Setup local build server - Available Docker images to run Extender\n\nDefold supports building games for the HTML5 platform through the regular bundling menu, as well as for other platforms. In addition, the resulting game is embedded on a regular HTML page that can be styled through a simple template system.\n\nThe game.project file contains the HTML5 specific settings:\n\nDefold support for HTML5 is powered by Emscripten (See http://en.wikipedia.org/wiki/Emscripten). In short, it creates a sandbox of memory for the heap in which the application operates. By default, the engine allocates a generous amount of memory (256MB). This should be more than sufficient for the typical game. As part of your optimization process, you may choose to use a smaller value. To do this, follow these steps:\n• Set heap_size to a preferred value. It should be expressed in megabytes.\n• Create your HTML5 bundle (see below)\n\nFor testing, HTML5 build needs an HTTP server. Defold creates one for you if you choose .\n\nIf you want to test your bundle, just upload it to your remote HTTP server or create a local server, for example, using python in the bundle folder. Python 2:\n\nCreating HTML5 content with Defold is simple and follows the same pattern as all other supported platforms: select from the menu:\n\nYou can chose to include both an and a WebAssembly (wasm) version of the Defold engine in HTML5 bundle. In most cases it is enough to chose WebAssembly since all modern browsers support WebAssembly.\n\nWhen you click on the button you will be prompted to select a folder in which to create your application. After the export process completes, you will find all of the files needed to run the application.\n• Hot Reload - Hot Reload doesn’t work in HTML5 builds. Defold applications must run their own miniature web server in order to receive updates from the editor, which isn’t possible in a HTML5 build.\n• Internet Explorer 11\n• Audio - Defold handles audio playback using HTML5 WebAudio (see http://www.w3.org/TR/webaudio), which is not currently supported by Internet Explorer 11. Applications will fall back to a null audio implementation when using this browser.\n• WebGL - Microsoft has not completed work implementing the WebGL API (see https://www.khronos.org/registry/webgl/specs/latest/). Therefore, it does not perform as well as other browsers.\n• Full screen - Full screen mode is unreliable in the browser.\n• Chrome\n• Slow debug builds - In debug builds on HTML5 we verify all WebGL graphics calls to detect errors. This is unfortunately very slow when testing on Chrome. It is possible to disable this by setting the Engine Arguments field of game.project to .\n• Gamepad support - Refer to the Gamepad documentation for special considerations and steps you may need to take on HTML5.\n\nWhen generating an HTML5 version of your game, Defold provides a default web page. It references style and script resources that dictate how your game is presented.\n\nEach time the application is exported, this content is created afresh. If you wish to customize any of these elements you must make modifications to your project settings. To do so, open the game.project in the Defold editor and scroll to the html5 section:\n\nMore information about every option is available in project settings manual.\n\nIn game.project it is possible to turn-off the button and the link. Defold provides a dark and light theme for the index.html. The light theme is set by default but it is possible to change by changing file. There is also four predefined scale modes to chose from in the field.\n\nFor the mode canvas size will be changed to show full game canvas on the screen with original proportions. The only difference in is changing size only if the inner size of the webpage is smaller than the original canvas of the game, but doesn’t scale-up when a webpage is bigger than the original game canvas.\n\nFor the mode canvas size will be changed to fully fill the inner size of the webpage.\n\nWith mode the canvas size is exactly the same as you predefined in game.project file, section.\n\nWe use Mustache template language for creation of the file. When your are building or bundling, the HTML and CSS files are passed through a compiler that is capable of replacing certain tokens with values that depend upon your project settings. These tokens are always encased in either double or triple curly braces ( or ), depending on whether character sequences should be escaped or not. This feature can be useful if you either make frequent changes to your project settings or intend for material to be reused in other projects.\n\nAny game.project can be a token. For example, if you want to use value from section:\n\nOpen game.project as a text and check and name of the field you want to use. Then you can use it as a token: or .\n\nFor example, in HTML template in JavaScript:\n\nAlso, we have the following custom tokens:\n\nIf you create your custom template, you can redefine set of parameters for the engine loader. To achieve that you need to add section and redefine values inside .\n\nmay contains following fields:\n\nHTML5 builds support file operations such as , and but the way these operations are handled internally is different from other platforms. When Javascript is run in a browser there is no real concept of a file system and local file access is blocked for security reasons. Instead Emscripten (and thus Defold) uses IndexedDB, an in-browser database used to persistently store data, to create a virtual filesystem in the browser. The important difference from file system access on other platforms is that there can be a slight delay between writing to a file and the change actually being stored in the database. The browser developer console usually allows you to inspect the contents of the IndexedDB.\n\nIt is sometimes necessary to provide additional arguments to a game before it or as it is started. This could for instance be a user id, session token or which level to load when the game starts. This can be achieved in a number of different ways, some of which are described here.\n\nIt is possible to specify additional engine arguments when the engine is configured and loaded. These extra engine arguments can at runtime be retrieved using . To add the key-value pairs you modify the field of the object that is passed to the engine when loaded in :\n\nYou can also add to the engine arguments field in the HTML5 section of game.project and it will be injected into the generated index.html file.\n\nAt runtime you get the values like this:\n\nYou can pass arguments as part of the query parameters in the page URL and read these at runtime:\n\nA full helper function to get all query parameters as a Lua table:\n\nHTML5 games usually have strict requirements on initial download size, startup time and memory usage to ensure that games load fast and run well on low end devices and slow internet connections. To optimize an HTML5 game it is recommended to focus on the following areas:\n\nQ: Why does my HTML5-app freeze at the splash screen in Chrome?\n\nA: In some cases it is not possible to run a game in the browser locally from the filesystem. Running from the editor serves the game from a local web server. You can, for instance, use in Python:\n\nQ: Why does my game crash with error “Unexpected data size” while loading?\n\nA: This usually happens when you are using Windows and make a build and commit it to Git. If you have the wrong line-ending configuration in Git it will change your line endings and thus also the data size. Follow these instructions to solve the problem: https://docs.github.com/en/free-pro-team@latest/github/using-git/configuring-git-to-handle-line-endings"
    },
    {
        "link": "https://forum.defold.com/t/call-js-script-in-html5-game/71145",
        "document": "Defold is a free and open game engine used for development of console, desktop, mobile and web games."
    },
    {
        "link": "https://defold.com/manuals/lua",
        "document": "Getting Started - Introduction - Installing Defold - Glossary - Defold for Flash users - Getting help Project Setup - Creating a project - Project settings - Sharing projects Editor - Overview - Code editor - Custom project templates - Editor scripts - Editor scripts: UI - Debugger - Keyboard shortcuts - Preferences - Refactoring - Styling Core Concepts - Building blocks - Addressing - Message passing - Application lifecycle Assets and Resources - Importing assets - Caching assets - Importing 2D graphics - Importing 3D models - Adapting to different screen sizes - Live update - Atlas - Buffer - Font - Runtime TTF Font - Resource management - Tile source - Texture filtering - Texture compression Animations - Overview - Flipbook Animation - Model animation - Property animation (tweens) - Rive animation - Spine animation Components - Overview - Collection factory - Collection proxy - Collision object - Camera - Factory - Label - Mesh - Model - Particle FX - Rive - Sound - Spine - Sprite - Tilemap GUI - GUI overview - Box nodes - Text nodes - Pie nodes - Spine nodes - ParticleFX nodes - Template nodes - Scripts - Clipping - Layouts Physics - Physics overview - Collision objects - Collision shapes - Collision groups - Collision messages - Collision events listener - Resolving collisions - Ray casts - Joints and constraints Sound - Sound - Sound Streaming - FMOD Input - Overview - Key and text input - Mouse and touch - Gamepads Game logic - Scripts - Properties - Script properties - Lua in Defold - Source code obfuscation - Modules - Debugging - Writing code Files - Working with files Network Connections - Overview - HTTP Requests - Socket connections - WebSocket connections - Online services Rendering - Render - Material - Compute - Shader - Texture filtering Workflow - Application security - Bundling an application - Caching assets - Command line tools - Hot reloading - Porting guidelines - Refactoring - The mobile dev app - Version control - Writing code - Working offline Debugging - Debugging game logic - Debugging native code - Debugging native code on Android - Debugging native code on iOS - Reading game and system logs Optimization - Optimizing an application - Optimize game size - Optimize runtime performance - Optimize battery usage - Optimize memory usage - Profiling Monetization - Ads - In-app purchases Android - Introduction - Advertising Info - AdMob ads - Android Device Performance Framework - App review and ratings - Camera - Facebook - Firebase Analytics - Firebase Remote Config - Google Play Game Services - Google Play Instant - Inter-app communication - IronSource ad mediation - Push notifications - Safe Area - Webview - The mobile dev app iOS - Introduction - Advertising Info - AdMob ads - App review and ratings - Camera - Facebook - Firebase Analytics - Firebase Remote Config - Inter-app communication - IronSource ad mediation - Push notifications - Safe Area - Webview - The mobile dev app Consoles - Nintendo Switch - PlayStation®4 - PlayStation®5 - Microsoft Xbox HTML5 - Introduction - CrazyGames - Facebook - Facebook Instant Games - Poki Desktop - Linux - macOS - Windows Engine extensions - Introduction - Defold SDK - Gradle dependencies - Cocoapod dependencies - Adding auto-complete definition - Best Practices - Debugging - Extension Manifests - App Manifests - Manifest Merging - The Lua C API (external) - Setup local build server - Available Docker images to run Extender\n\nThe Defold engine has the Lua language embedded for scripting. Lua is a lightweight dynamic language that is powerful, fast, and easy to embed. It is widely used as a videogame scripting language. Lua programs are written in a simple procedural syntax. The language is dynamically typed and is run by a bytecode interpreter. It features automatic memory management with incremental garbage collection.\n\nThis manual will give a quick introduction to the basics of Lua programming in general and what you need to consider when working with Lua in Defold. If you have some experience with Python, Perl, Ruby, Javascript, or a similar dynamic language you will get going pretty quickly. If you are new to programming you might want to start with a Lua book aimed at beginners. There are plenty to choose from.\n\nDefold uses LuaJIT, a highly optimized version of Lua suitable for use in games and other performance-critical software. It is fully upwards compatible with Lua 5.1 and supports all standard Lua library functions and the full set of Lua/C API functions.\n\nLuaJIT also adds several language extensions and some Lua 5.2 and 5.3 features.\n\nWe aim to keep Defold the same across all platforms, but we currently have a few minor discrepancies in the Lua language version between platforms:\n• iOS does not allow JIT compilation.\n• Nintendo Switch does not allow JIT compilation.\n• HTML5 uses Lua 5.1.4 instead of LuaJIT.\n\nDefold includes all of the Lua 5.1 standard libraries as well as a socket and a bit operation library:\n\nAll libraries are documented in the reference API documentation.\n• Programming in Lua (first edition) Later editions are available in print.\n• Programming in Lua - Programming in Lua is the official book about the language, providing a solid base to any programmer who wants to use Lua. Authored by Roberto Ierusalimschy, the chief architect of the language.\n• Lua programming gems - This collection of articles records some of the existing wisdom and practice on how to program well in Lua.\n• Lua 5.1 reference manual - Also available online (see above)\n\nPrograms have simple, easy-to-read syntax. Statements are written one on each line and there is no need to mark the end of a statement. You can optionally use semicolons to separate statements. Blocks of code are keyword delimited, ending with the keyword. Comments can be either written in a block or until the end of the line:\n\nLua is dynamically typed, meaning variables do not have types, but values do. Unlike in statically typed languages, you can assign any value to any variable as you like.\n\nThere are eight basic types in Lua:\n\nLua provides the usual set of flow control constructs.\n\nAll variables that you declare are by default global, meaning that they are available through all parts of the Lua runtime context. You can explicitly declare variables , meaning that the variable will only exist within the current scope.\n\nEach Lua source file defines a separate scope. Local declarations on the topmost level in a file mean the variable is local to the Lua script file. Each function creates another nested scope and each control structure block creates additional scopes. You can explicitly create a scope with the and keywords. Lua is lexically scoped, meaning that a scope has full access to local variables from the enclosing scope. Note that the local variables must be declared before their use.\n\nNote that if you declare functions in a script file (which is generally a good idea) you need to watch out how you order the code. You can use forward declarations if you have functions that mutually call each other.\n\nIf you write a function enclosed in another function, it too has full access to local variables from the enclosing function. This is a very powerful construct.\n\nLocal variables declared in a block will shadow variables from a surrounding block with the same name.\n\nFunctions execute from beginning to end and there is no way to stop them midway through. Coroutines allow you to do that, which can be very convenient in some cases. Suppose we want to create a very specific frame-by-frame animation where we move a game object from y position to some very specific y positions from frame 1 to frame 5. We could solve that with a counter in the function (see below) and a list of the positions. However, with a coroutine, we get a very clean implementation that is easy to extend and work with. All state is contained within the coroutine itself.\n\nWhen a coroutine yields it returns control back to the caller but remembers its execution point so it can continue from there later on.\n\nAll variables that you declare are by default global, meaning that they are available through all parts of the Lua runtime context. Defold has a setting shared_state setting in game.project that controls this context. If the option is set, all scripts, GUI scripts, and the render script are evaluated in the same Lua context and global variables are visible everywhere. If the option is not set, the engine executes scripts, GUI scripts, and the render script in separate contexts.\n\nDefold allows you to use the same script file in several separate game object components. Any locally declared variables are shared between components that run the same script file.\n\nIn a high-performance game that is intended to run at a smooth 60 FPS small performance mistakes can have a large impact on the experience. There are some simple general things to consider and some things that might not seem problematic.\n\nBeginning with the simple things. It is generally a good idea to write straightforward code that does not contain unnecessary loops. Sometimes you do need to iterate over lists of things, but be careful if the list of things is sufficiently large. This example runs in slightly over 1 millisecond on a pretty decent laptop, which can make all the difference if each frame is only 16 milliseconds long (at 60 FPS) and with the engine, render script, physics simulation, and so forth eating up a chunk of that.\n\nUse the value returned from (seconds since system epoch) to benchmark suspect code.\n\nLua’s garbage collection runs automatically in the background by default and reclaims memory that the Lua runtime has allocated. Collecting lots of garbage can be a time-consuming task so it is good to keep down the number of objects that need to be garbage collected:\n• Local variables are in themselves free and will not generate garbage. (i.e. )\n• Each new unique string creates a new object. Writing will create a new object and assign to it. The local itself will not generate garbage, but the string object will. Using the same string multiple times adds no additional memory cost.\n• Each time a table constructor is executed ( ) a new table is created.\n• Vararg functions ( ) create a table for the ellipsis each time the function is called (in Lua before version 5.2, or if not using LuaJIT).\n\nThere are many cases where you can avoid creating new objects and instead reuse the ones you already have. For example. The following is common at the end of each :\n\nIt’s easy to forget that each call to creates a new object. Let’s find out how much memory one uses:\n\n70 bytes has been added between the calls to , but this includes allocations for more than the object. Each printing of the result from builds a string which in itself adds 22 bytes of garbage:\n\nSo a weighs in at 70-22=48 bytes. That is not much, but if you create one each frame in a 60 FPS game it’s suddenly 2.8 kB of garbage per second. With 360 script components that each create one every frame we’re looking at 1 MB of garbage generated per second. The numbers can add up very quickly. When the Lua runtime collects garbage it may eat up many precious milliseconds—especially on mobile platforms.\n\nOne way to avoid allocations is to create a and then keep working with the same object. For instance, to reset a we can use the following construct:\n\nThe default garbage-collecting scheme may not be optimal for some time-critical applications. If you see a stutter in your game or app, you might want to tune how Lua collects garbage through the Lua function. You can, for instance, run the collector for a short time every frame with a low value. To get an idea how much memory your game or app is eating, you can print the current amount of garbage bytes with:\n\nA common implementation design consideration is how to structure code for shared behaviors. Several approaches are possible."
    },
    {
        "link": "https://defold.com/manuals/html5?q=engine_arguments",
        "document": "Getting Started - Introduction - Installing Defold - Glossary - Defold for Flash users - Getting help Project Setup - Creating a project - Project settings - Sharing projects Editor - Overview - Code editor - Custom project templates - Editor scripts - Editor scripts: UI - Debugger - Keyboard shortcuts - Preferences - Refactoring - Styling Core Concepts - Building blocks - Addressing - Message passing - Application lifecycle Assets and Resources - Importing assets - Caching assets - Importing 2D graphics - Importing 3D models - Adapting to different screen sizes - Live update - Atlas - Buffer - Font - Runtime TTF Font - Resource management - Tile source - Texture filtering - Texture compression Animations - Overview - Flipbook Animation - Model animation - Property animation (tweens) - Rive animation - Spine animation Components - Overview - Collection factory - Collection proxy - Collision object - Camera - Factory - Label - Mesh - Model - Particle FX - Rive - Sound - Spine - Sprite - Tilemap GUI - GUI overview - Box nodes - Text nodes - Pie nodes - Spine nodes - ParticleFX nodes - Template nodes - Scripts - Clipping - Layouts Physics - Physics overview - Collision objects - Collision shapes - Collision groups - Collision messages - Collision events listener - Resolving collisions - Ray casts - Joints and constraints Sound - Sound - Sound Streaming - FMOD Input - Overview - Key and text input - Mouse and touch - Gamepads Game logic - Scripts - Properties - Script properties - Lua in Defold - Source code obfuscation - Modules - Debugging - Writing code Files - Working with files Network Connections - Overview - HTTP Requests - Socket connections - WebSocket connections - Online services Rendering - Render - Material - Compute - Shader - Texture filtering Workflow - Application security - Bundling an application - Caching assets - Command line tools - Hot reloading - Porting guidelines - Refactoring - The mobile dev app - Version control - Writing code - Working offline Debugging - Debugging game logic - Debugging native code - Debugging native code on Android - Debugging native code on iOS - Reading game and system logs Optimization - Optimizing an application - Optimize game size - Optimize runtime performance - Optimize battery usage - Optimize memory usage - Profiling Monetization - Ads - In-app purchases Android - Introduction - Advertising Info - AdMob ads - Android Device Performance Framework - App review and ratings - Camera - Facebook - Firebase Analytics - Firebase Remote Config - Google Play Game Services - Google Play Instant - Inter-app communication - IronSource ad mediation - Push notifications - Safe Area - Webview - The mobile dev app iOS - Introduction - Advertising Info - AdMob ads - App review and ratings - Camera - Facebook - Firebase Analytics - Firebase Remote Config - Inter-app communication - IronSource ad mediation - Push notifications - Safe Area - Webview - The mobile dev app Consoles - Nintendo Switch - PlayStation®4 - PlayStation®5 - Microsoft Xbox HTML5 - Introduction - CrazyGames - Facebook - Facebook Instant Games - Poki Desktop - Linux - macOS - Windows Engine extensions - Introduction - Defold SDK - Gradle dependencies - Cocoapod dependencies - Adding auto-complete definition - Best Practices - Debugging - Extension Manifests - App Manifests - Manifest Merging - The Lua C API (external) - Setup local build server - Available Docker images to run Extender\n\nDefold supports building games for the HTML5 platform through the regular bundling menu, as well as for other platforms. In addition, the resulting game is embedded on a regular HTML page that can be styled through a simple template system.\n\nThe game.project file contains the HTML5 specific settings:\n\nDefold support for HTML5 is powered by Emscripten (See http://en.wikipedia.org/wiki/Emscripten). In short, it creates a sandbox of memory for the heap in which the application operates. By default, the engine allocates a generous amount of memory (256MB). This should be more than sufficient for the typical game. As part of your optimization process, you may choose to use a smaller value. To do this, follow these steps:\n• Set heap_size to a preferred value. It should be expressed in megabytes.\n• Create your HTML5 bundle (see below)\n\nFor testing, HTML5 build needs an HTTP server. Defold creates one for you if you choose .\n\nIf you want to test your bundle, just upload it to your remote HTTP server or create a local server, for example, using python in the bundle folder. Python 2:\n\nCreating HTML5 content with Defold is simple and follows the same pattern as all other supported platforms: select from the menu:\n\nYou can chose to include both an and a WebAssembly (wasm) version of the Defold engine in HTML5 bundle. In most cases it is enough to chose WebAssembly since all modern browsers support WebAssembly.\n\nWhen you click on the button you will be prompted to select a folder in which to create your application. After the export process completes, you will find all of the files needed to run the application.\n• Hot Reload - Hot Reload doesn’t work in HTML5 builds. Defold applications must run their own miniature web server in order to receive updates from the editor, which isn’t possible in a HTML5 build.\n• Internet Explorer 11\n• Audio - Defold handles audio playback using HTML5 WebAudio (see http://www.w3.org/TR/webaudio), which is not currently supported by Internet Explorer 11. Applications will fall back to a null audio implementation when using this browser.\n• WebGL - Microsoft has not completed work implementing the WebGL API (see https://www.khronos.org/registry/webgl/specs/latest/). Therefore, it does not perform as well as other browsers.\n• Full screen - Full screen mode is unreliable in the browser.\n• Chrome\n• Slow debug builds - In debug builds on HTML5 we verify all WebGL graphics calls to detect errors. This is unfortunately very slow when testing on Chrome. It is possible to disable this by setting the Engine Arguments field of game.project to .\n• Gamepad support - Refer to the Gamepad documentation for special considerations and steps you may need to take on HTML5.\n\nWhen generating an HTML5 version of your game, Defold provides a default web page. It references style and script resources that dictate how your game is presented.\n\nEach time the application is exported, this content is created afresh. If you wish to customize any of these elements you must make modifications to your project settings. To do so, open the game.project in the Defold editor and scroll to the html5 section:\n\nMore information about every option is available in project settings manual.\n\nIn game.project it is possible to turn-off the button and the link. Defold provides a dark and light theme for the index.html. The light theme is set by default but it is possible to change by changing file. There is also four predefined scale modes to chose from in the field.\n\nFor the mode canvas size will be changed to show full game canvas on the screen with original proportions. The only difference in is changing size only if the inner size of the webpage is smaller than the original canvas of the game, but doesn’t scale-up when a webpage is bigger than the original game canvas.\n\nFor the mode canvas size will be changed to fully fill the inner size of the webpage.\n\nWith mode the canvas size is exactly the same as you predefined in game.project file, section.\n\nWe use Mustache template language for creation of the file. When your are building or bundling, the HTML and CSS files are passed through a compiler that is capable of replacing certain tokens with values that depend upon your project settings. These tokens are always encased in either double or triple curly braces ( or ), depending on whether character sequences should be escaped or not. This feature can be useful if you either make frequent changes to your project settings or intend for material to be reused in other projects.\n\nAny game.project can be a token. For example, if you want to use value from section:\n\nOpen game.project as a text and check and name of the field you want to use. Then you can use it as a token: or .\n\nFor example, in HTML template in JavaScript:\n\nAlso, we have the following custom tokens:\n\nIf you create your custom template, you can redefine set of parameters for the engine loader. To achieve that you need to add section and redefine values inside .\n\nmay contains following fields:\n\nHTML5 builds support file operations such as , and but the way these operations are handled internally is different from other platforms. When Javascript is run in a browser there is no real concept of a file system and local file access is blocked for security reasons. Instead Emscripten (and thus Defold) uses IndexedDB, an in-browser database used to persistently store data, to create a virtual filesystem in the browser. The important difference from file system access on other platforms is that there can be a slight delay between writing to a file and the change actually being stored in the database. The browser developer console usually allows you to inspect the contents of the IndexedDB.\n\nIt is sometimes necessary to provide additional arguments to a game before it or as it is started. This could for instance be a user id, session token or which level to load when the game starts. This can be achieved in a number of different ways, some of which are described here.\n\nIt is possible to specify additional engine arguments when the engine is configured and loaded. These extra engine arguments can at runtime be retrieved using . To add the key-value pairs you modify the field of the object that is passed to the engine when loaded in :\n\nYou can also add to the engine arguments field in the HTML5 section of game.project and it will be injected into the generated index.html file.\n\nAt runtime you get the values like this:\n\nYou can pass arguments as part of the query parameters in the page URL and read these at runtime:\n\nA full helper function to get all query parameters as a Lua table:\n\nHTML5 games usually have strict requirements on initial download size, startup time and memory usage to ensure that games load fast and run well on low end devices and slow internet connections. To optimize an HTML5 game it is recommended to focus on the following areas:\n\nQ: Why does my HTML5-app freeze at the splash screen in Chrome?\n\nA: In some cases it is not possible to run a game in the browser locally from the filesystem. Running from the editor serves the game from a local web server. You can, for instance, use in Python:\n\nQ: Why does my game crash with error “Unexpected data size” while loading?\n\nA: This usually happens when you are using Windows and make a build and commit it to Git. If you have the wrong line-ending configuration in Git it will change your line endings and thus also the data size. Follow these instructions to solve the problem: https://docs.github.com/en/free-pro-team@latest/github/using-git/configuring-git-to-handle-line-endings"
    },
    {
        "link": "https://github.com/AGulev/jstodef",
        "document": "This is Native Extension for the Defold Game Engine that makes possible to send messages from JavaScript to Lua in HTML5 build.\n\nTo use this library in your Defold project, add the needed version URL to your dependencies from Releases\n\nWhere is a string that helps you to identify this message on Lua side.\n\nis a custom value that might be one of the next types: object, number, boolean, string, undefined(if you don't need any extra data).\n\nIf you are working on cross-platform application the best practice to check the existence of jstodef module, this module exists only in html5 build:\n\nWhere is a function with the next parameters:\n\nis the current script self.\n\nis a string that helps you to identify this message.\n\nis a custom value that might be one of the next types: table, number, boolean, string, nil.\n\nIt is possible to add a few listeners.\n\nWhere is the function that was previously added as a listener with method.\n\nIf you have any issues, questions or suggestions please create an issue or contact me: me@agulev.com"
    },
    {
        "link": "https://forum.defold.com/t/calling-js-function-from-lua-code-solved/3214",
        "document": "We are considering switching to Defold for all our new projects, and researching if it fits our needs. Primary blockers for us, so far:\n• Can’t call JS functions from Lua code, so unable to use payment systems on Kongregate, Facebook, VK, OK and other desktop web game platforms.\n• Can’t use native libraries on mobile platforms. So it is impossible to use all those libraries that are an essential part of modern mobile projects. For example ads, analytics, crash reports libraries etc.\n\nI have not tested but Defold already support facebook payments http://www.defold.com/manuals/iap/ But I agree with Arthur. JS function calling is very important thing. It’s much better than rewrite all sdk to lua and then keep it up to date.\n• I agree. I have added an issue for this DEF-1782, this feels like a must have feature for devs aiming to publish on other HTML-platforms than Facebook. It might be something that could fit into the IAC-module, which currently has support on mobile at the moment. (Or the perhaps the webview-module that also is only supported on mobile currently.)\n• There is a plan in place to add native extendability to the engine, but I don’t have any timeline for when this will be available. Some of the examples you bring up we do already have some support for, for example;\n• Analytics - We have support for analytics out of the box, it’s an opt-in thing for each project. Check out your project dashboard where there should be more info.\n• Crash reporting - The engine exposes some functionality to setup this yourself, see the crash-module. The actual “reporting” step needs to be taken care of by the game devs though, but the data is there!\n• Facebook IAP - As Alexey points out, there is support for IAP on Facebook canvas. It uses the same iap-module as the other mobile iap solutions.\n\nIs there any news on this issue? I’m planing to release early access game on vk.ru at first as the user acquisition there is cheaper than on Facebook.\n\nMy guess is that this will be the next thing we’ll be working on once Live Update and Native Extensions have been released.\n\nas i’m trying to launch my game in vk.com this feature is critical for me. And also want to include gameanalytics.com which already have js API.\n\n Waiting for updates =) hope it will be soon.\n\nYup, it will be soon. We’re about to launch Java extensions soon (to be able to support SDKs on Android) and next up would be Javascript. My guess is that it should happen within two or three releases. We know this is a priority to you and many other devs so this is a priority for us."
    },
    {
        "link": "https://forum.defold.com/t/jstodef-simple-way-to-send-messages-from-js-to-lua/48527",
        "document": "GitHub - AGulev/jstodef: Library for sending messages from JavaScript to...\n\nLibrary for sending messages from JavaScript to Defold (Lua)"
    },
    {
        "link": "https://forum.defold.com/t/js-integration-newbie-question/38386",
        "document": "I am new to game dev, but a web dev senior and I seek a game engine to fit our web stack.\n\nPlease, when HTML5 is a target, it is possible to:\n\n a) call outside JS methods (or send messages) from inside Defold (lua) ?\n\n b) call inside Lua methods (or send messages) from outside JS web context ?\n\nCan you provide an example?\n\nThanks! Defold looks very promising, nice, clean and fast."
    },
    {
        "link": "https://defold.com/manuals/lua",
        "document": "Getting Started - Introduction - Installing Defold - Glossary - Defold for Flash users - Getting help Project Setup - Creating a project - Project settings - Sharing projects Editor - Overview - Code editor - Custom project templates - Editor scripts - Editor scripts: UI - Debugger - Keyboard shortcuts - Preferences - Refactoring - Styling Core Concepts - Building blocks - Addressing - Message passing - Application lifecycle Assets and Resources - Importing assets - Caching assets - Importing 2D graphics - Importing 3D models - Adapting to different screen sizes - Live update - Atlas - Buffer - Font - Runtime TTF Font - Resource management - Tile source - Texture filtering - Texture compression Animations - Overview - Flipbook Animation - Model animation - Property animation (tweens) - Rive animation - Spine animation Components - Overview - Collection factory - Collection proxy - Collision object - Camera - Factory - Label - Mesh - Model - Particle FX - Rive - Sound - Spine - Sprite - Tilemap GUI - GUI overview - Box nodes - Text nodes - Pie nodes - Spine nodes - ParticleFX nodes - Template nodes - Scripts - Clipping - Layouts Physics - Physics overview - Collision objects - Collision shapes - Collision groups - Collision messages - Collision events listener - Resolving collisions - Ray casts - Joints and constraints Sound - Sound - Sound Streaming - FMOD Input - Overview - Key and text input - Mouse and touch - Gamepads Game logic - Scripts - Properties - Script properties - Lua in Defold - Source code obfuscation - Modules - Debugging - Writing code Files - Working with files Network Connections - Overview - HTTP Requests - Socket connections - WebSocket connections - Online services Rendering - Render - Material - Compute - Shader - Texture filtering Workflow - Application security - Bundling an application - Caching assets - Command line tools - Hot reloading - Porting guidelines - Refactoring - The mobile dev app - Version control - Writing code - Working offline Debugging - Debugging game logic - Debugging native code - Debugging native code on Android - Debugging native code on iOS - Reading game and system logs Optimization - Optimizing an application - Optimize game size - Optimize runtime performance - Optimize battery usage - Optimize memory usage - Profiling Monetization - Ads - In-app purchases Android - Introduction - Advertising Info - AdMob ads - Android Device Performance Framework - App review and ratings - Camera - Facebook - Firebase Analytics - Firebase Remote Config - Google Play Game Services - Google Play Instant - Inter-app communication - IronSource ad mediation - Push notifications - Safe Area - Webview - The mobile dev app iOS - Introduction - Advertising Info - AdMob ads - App review and ratings - Camera - Facebook - Firebase Analytics - Firebase Remote Config - Inter-app communication - IronSource ad mediation - Push notifications - Safe Area - Webview - The mobile dev app Consoles - Nintendo Switch - PlayStation®4 - PlayStation®5 - Microsoft Xbox HTML5 - Introduction - CrazyGames - Facebook - Facebook Instant Games - Poki Desktop - Linux - macOS - Windows Engine extensions - Introduction - Defold SDK - Gradle dependencies - Cocoapod dependencies - Adding auto-complete definition - Best Practices - Debugging - Extension Manifests - App Manifests - Manifest Merging - The Lua C API (external) - Setup local build server - Available Docker images to run Extender\n\nThe Defold engine has the Lua language embedded for scripting. Lua is a lightweight dynamic language that is powerful, fast, and easy to embed. It is widely used as a videogame scripting language. Lua programs are written in a simple procedural syntax. The language is dynamically typed and is run by a bytecode interpreter. It features automatic memory management with incremental garbage collection.\n\nThis manual will give a quick introduction to the basics of Lua programming in general and what you need to consider when working with Lua in Defold. If you have some experience with Python, Perl, Ruby, Javascript, or a similar dynamic language you will get going pretty quickly. If you are new to programming you might want to start with a Lua book aimed at beginners. There are plenty to choose from.\n\nDefold uses LuaJIT, a highly optimized version of Lua suitable for use in games and other performance-critical software. It is fully upwards compatible with Lua 5.1 and supports all standard Lua library functions and the full set of Lua/C API functions.\n\nLuaJIT also adds several language extensions and some Lua 5.2 and 5.3 features.\n\nWe aim to keep Defold the same across all platforms, but we currently have a few minor discrepancies in the Lua language version between platforms:\n• iOS does not allow JIT compilation.\n• Nintendo Switch does not allow JIT compilation.\n• HTML5 uses Lua 5.1.4 instead of LuaJIT.\n\nDefold includes all of the Lua 5.1 standard libraries as well as a socket and a bit operation library:\n\nAll libraries are documented in the reference API documentation.\n• Programming in Lua (first edition) Later editions are available in print.\n• Programming in Lua - Programming in Lua is the official book about the language, providing a solid base to any programmer who wants to use Lua. Authored by Roberto Ierusalimschy, the chief architect of the language.\n• Lua programming gems - This collection of articles records some of the existing wisdom and practice on how to program well in Lua.\n• Lua 5.1 reference manual - Also available online (see above)\n\nPrograms have simple, easy-to-read syntax. Statements are written one on each line and there is no need to mark the end of a statement. You can optionally use semicolons to separate statements. Blocks of code are keyword delimited, ending with the keyword. Comments can be either written in a block or until the end of the line:\n\nLua is dynamically typed, meaning variables do not have types, but values do. Unlike in statically typed languages, you can assign any value to any variable as you like.\n\nThere are eight basic types in Lua:\n\nLua provides the usual set of flow control constructs.\n\nAll variables that you declare are by default global, meaning that they are available through all parts of the Lua runtime context. You can explicitly declare variables , meaning that the variable will only exist within the current scope.\n\nEach Lua source file defines a separate scope. Local declarations on the topmost level in a file mean the variable is local to the Lua script file. Each function creates another nested scope and each control structure block creates additional scopes. You can explicitly create a scope with the and keywords. Lua is lexically scoped, meaning that a scope has full access to local variables from the enclosing scope. Note that the local variables must be declared before their use.\n\nNote that if you declare functions in a script file (which is generally a good idea) you need to watch out how you order the code. You can use forward declarations if you have functions that mutually call each other.\n\nIf you write a function enclosed in another function, it too has full access to local variables from the enclosing function. This is a very powerful construct.\n\nLocal variables declared in a block will shadow variables from a surrounding block with the same name.\n\nFunctions execute from beginning to end and there is no way to stop them midway through. Coroutines allow you to do that, which can be very convenient in some cases. Suppose we want to create a very specific frame-by-frame animation where we move a game object from y position to some very specific y positions from frame 1 to frame 5. We could solve that with a counter in the function (see below) and a list of the positions. However, with a coroutine, we get a very clean implementation that is easy to extend and work with. All state is contained within the coroutine itself.\n\nWhen a coroutine yields it returns control back to the caller but remembers its execution point so it can continue from there later on.\n\nAll variables that you declare are by default global, meaning that they are available through all parts of the Lua runtime context. Defold has a setting shared_state setting in game.project that controls this context. If the option is set, all scripts, GUI scripts, and the render script are evaluated in the same Lua context and global variables are visible everywhere. If the option is not set, the engine executes scripts, GUI scripts, and the render script in separate contexts.\n\nDefold allows you to use the same script file in several separate game object components. Any locally declared variables are shared between components that run the same script file.\n\nIn a high-performance game that is intended to run at a smooth 60 FPS small performance mistakes can have a large impact on the experience. There are some simple general things to consider and some things that might not seem problematic.\n\nBeginning with the simple things. It is generally a good idea to write straightforward code that does not contain unnecessary loops. Sometimes you do need to iterate over lists of things, but be careful if the list of things is sufficiently large. This example runs in slightly over 1 millisecond on a pretty decent laptop, which can make all the difference if each frame is only 16 milliseconds long (at 60 FPS) and with the engine, render script, physics simulation, and so forth eating up a chunk of that.\n\nUse the value returned from (seconds since system epoch) to benchmark suspect code.\n\nLua’s garbage collection runs automatically in the background by default and reclaims memory that the Lua runtime has allocated. Collecting lots of garbage can be a time-consuming task so it is good to keep down the number of objects that need to be garbage collected:\n• Local variables are in themselves free and will not generate garbage. (i.e. )\n• Each new unique string creates a new object. Writing will create a new object and assign to it. The local itself will not generate garbage, but the string object will. Using the same string multiple times adds no additional memory cost.\n• Each time a table constructor is executed ( ) a new table is created.\n• Vararg functions ( ) create a table for the ellipsis each time the function is called (in Lua before version 5.2, or if not using LuaJIT).\n\nThere are many cases where you can avoid creating new objects and instead reuse the ones you already have. For example. The following is common at the end of each :\n\nIt’s easy to forget that each call to creates a new object. Let’s find out how much memory one uses:\n\n70 bytes has been added between the calls to , but this includes allocations for more than the object. Each printing of the result from builds a string which in itself adds 22 bytes of garbage:\n\nSo a weighs in at 70-22=48 bytes. That is not much, but if you create one each frame in a 60 FPS game it’s suddenly 2.8 kB of garbage per second. With 360 script components that each create one every frame we’re looking at 1 MB of garbage generated per second. The numbers can add up very quickly. When the Lua runtime collects garbage it may eat up many precious milliseconds—especially on mobile platforms.\n\nOne way to avoid allocations is to create a and then keep working with the same object. For instance, to reset a we can use the following construct:\n\nThe default garbage-collecting scheme may not be optimal for some time-critical applications. If you see a stutter in your game or app, you might want to tune how Lua collects garbage through the Lua function. You can, for instance, run the collector for a short time every frame with a low value. To get an idea how much memory your game or app is eating, you can print the current amount of garbage bytes with:\n\nA common implementation design consideration is how to structure code for shared behaviors. Several approaches are possible."
    },
    {
        "link": "https://forum.defold.com/t/call-js-script-in-html5-game/71145",
        "document": "Defold is a free and open game engine used for development of console, desktop, mobile and web games."
    }
]