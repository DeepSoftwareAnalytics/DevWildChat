[
    {
        "link": "https://docs.docker.com/reference",
        "document": "This section includes the reference documentation for the Docker platform's various APIs, CLIs, drivers and specifications, and file formats."
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/scripting/install/powershell-in-docker?view=powershell-7.5",
        "document": "We publish Docker images with PowerShell preinstalled. This article shows you how to get started using PowerShell in the Docker container.\n\nThe released images require Docker 17.05 or newer. It's also expected that you are able to run Docker without or local administrative rights. Please follow Docker's official instructions to install correctly.\n\nThe release containers derive from the official distribution image, then install dependencies, and finally install the PowerShell package.\n\nFor more information about these Docker images, visit the PowerShell-Docker repository on GitHub.\n\nThe following steps show the Docker commands required to download the image containing the latest available stable version of PowerShell and start an interactive PowerShell session.\n\nUse the following command to download and run the image containing the latest available preview version of PowerShell.\n\nRemove the image when no longer needed\n\nThe following command is used to delete the Docker image when you no longer need it.\n\nPowerShell is licensed under the MIT license.\n\nBy requesting and using the Container OS Image for Windows containers, you acknowledge, understand, and consent to the Supplemental License Terms available on Docker hub:\n\nBy default, PowerShell collects limited telemetry without personally identifiable information to help aid development of future versions of PowerShell. To opt-out of sending telemetry, create an environment variable called set to a value of before starting PowerShell from the installed location. The telemetry we collect falls under the Microsoft Privacy Statement."
    },
    {
        "link": "https://docs.powershelluniversal.com/getting-started/docker",
        "document": "This page provides installation and configuration information for Docker.\n\nRun the following command to confirm Docker is installed:\n\nDocker Compose v1 uses the command . As of June 2023, support ends for Docker Compose v1.\n\nIf you are using Docker Compose v1 please adjust the commands accordingly. More information on Docker Compose can be found here.\n\nRun one of the following commands to confirm that Docker Compose is installed:\n\nTo ensure that Docker has the ability to pull and run container images run the following command:\n\nThis message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it To try something more ambitious, you can run an Ubuntu container with: Share images, automate workflows, and more with a free Docker ID: For more examples and ideas, visit:\n\nIn order to run PowerShell Universal, use the provided container image. The docker image is available on Docker Hub.\n\nThe prebuilt version supports both free & paid features of PowerShell Universal.\n\nStart the container by pulling the image and then running a container with the default port bound.\n\nPresent an image to a different port\n\nIf port 5000 is unavailable on your host, switch to another port.\n\nThe command allows you to mount a volume for persistent storage. Mount the volume to the /root folder.\n\nThe following command mounts the folder to on your container:\n\nMount a volume on Container on Mac and Linux\n\nThe following command mounts the folder to on your container:\n\nDocker Compose allows you to use a yaml text file to standardize your build and script the deployment (or build) or multiple containers.\n\nThe default name for any compose file is . It is recommended you use this as your compose filename.\n\nThe following compose file runs a Powershell Universal container in Windows:\n\nThe following compose file runs a Powershell Universal container on Mac and Linux:\n\nUsing a Terminal shell or PowerShell for Windows. Use the cd command to change the working directory with your script.\n\nUsing a Terminal shell, or PowerShell for Windows. cd to the directory with your script.\n\nYou can add Environment variables into your Compose Scripts. Below is an example of:\n\nYou can add Environment variables into your Compose Scripts. Below is an example of:\n\nIf you wish to build more features, modify, or hardcode Environment Variables into your container, then create a\n\nTo create a Docker image that can persist the Universal data, create a dockerfile like the one below.\n\nThis Dockerfile exposes port 5000, creates a /data volume, sets configuration environment variables to store the Universal repository and database in the volume and then sets the Universal.Server as the entry point to the container.\n\nFrom the path that hosts your Dockerfile, run the following command:\n\nStart the docker container with the run command and make sure to specify the volume to mount:\n\nTo use SQL persistence, define the plugin and connection string as follows:\n\nTo use PostgreSQL persistence, define the plugin and connection string as follows:\n\nTo properly support time zones on Linux when scheduling jobs, include the package in your dockerfile along with an environment variable that specifies the server time zone.\n\nWe publish the following tags to Docker Hub:\n• None 5.x-preview-modules - Nightly build of version 5 using Ubuntu LTS and select AZ modules\n• None 5.x-preview-<OS>-<PS> - Nightly build of version 5 with the specified OS and PS version\n• None 4.x-preview-<OS>-<PS> - Nightly build of version 4 with the specified OS and PS version\n• None 5.x-<OS>-<PS> - Production version 5 with the specified OS and PS version\n• None 4.x-<OS>-<PS> - Current production version 4 with the specified OS and PS versions\n\nThe module container images include the following modules:\n\nThis basic \"How to Get Started\" enables you to start running or building PSU Containers. This references section links all sources for commands:"
    },
    {
        "link": "https://docs.docker.com/desktop/setup/install/windows-install",
        "document": "This page contains the download URL, information about system requirements, and instructions on how to install Docker Desktop for Windows.\n\nContainers and images created with Docker Desktop are shared between all user accounts on machines where it is installed. This is because all Windows accounts use the same VM to build and run containers. Note that it is not possible to share containers and images between user accounts when using the Docker Desktop WSL 2 backend.\n\nRunning Docker Desktop inside a VMware ESXi or Azure VM is supported for Docker Business customers. It requires enabling nested virtualization on the hypervisor first. For more information, see Running Docker Desktop in a VM or VDI environment.\n\nHow do I switch between Windows and Linux containers? From the Docker Desktop menu, you can toggle which daemon (Linux or Windows) the Docker CLI talks to. Select Switch to Windows containers to use Windows containers, or select Switch to Linux containers to use Linux containers (the default). For more information on Windows containers, refer to the following documentation:\n• None Build and Run Your First Windows Server Container (Blog Post) gives a quick tour of how to build and run native Docker Windows containers on Windows 10 and Windows Server 2016 evaluation releases.\n• None Getting Started with Windows Containers (Lab) shows you how to use the MusicStore application with Windows containers. The MusicStore is a standard .NET application and, forked here to use containers , is a good example of a multi-container application.\n• None To understand how to connect to Windows containers from the local host, see I want to connect to a container from Windows When you switch to Windows containers, Settings only shows those tabs that are active and apply to your Windows containers. If you set proxies or daemon configuration in Windows containers mode, these apply only on Windows containers. If you switch back to Linux containers, proxies and daemon configurations return to what you had set for Linux containers. Your Windows container settings are retained and become available again when you switch back.\n• None Download the installer using the download button at the top of the page, or from the release notes.\n• None Double-click to run the installer. By default, Docker Desktop is installed at .\n• None When prompted, ensure the Use WSL 2 instead of Hyper-V option on the Configuration page is selected or not depending on your choice of backend. If your system only supports one of the two options, you won't be able to select which backend to use.\n• None Follow the instructions on the installation wizard to authorize the installer and proceed with the install.\n• None When the installation is successful, select Close to complete the installation process.\n\nIf your administrator account is different to your user account, you must add the user to the docker-users group:\n• Right-click to add the user to the group.\n• Sign out and sign back in for the changes to take effect.\n\nAfter downloading , run the following command in a terminal to install Docker Desktop:\n\nIf you’re using PowerShell you should run it as:\n\nIf using the Windows Command Prompt:\n\nBy default, Docker Desktop is installed at .\n\nThe command accepts the following flags:\n• None : Accepts the Docker Subscription Service Agreement now, rather than requiring it to be accepted when the application is first run\n• None : Disables the Windows containers integration. This can improve security. For more information, see Windows containers.\n• None : Requires the user to sign in and be part of the specified Docker Hub organization when running the application\n• None : Selects the default backend to use for Docker Desktop, , or (default)\n• None : Automatically creates an file which is used by admins to control certain Docker Desktop settings on client machines within their organization. For more information, see Settings Management.\n• It must be used together with the flag.\n• None : Sets the URL of the HTTP proxy that must be used for outgoing HTTP requests, requires to be\n• None : Sets the URL of the HTTP proxy that must be used for outgoing HTTPS requests, requires to be\n• None : Bypasses proxy settings for the hosts and domains. Uses a comma-separated list.\n• None : Enables Kerberos and NTLM proxy authentication. If you are enabling this, ensure your proxy server is properly configured for Kerberos/NTLM authentication. Available with Docker Desktop 4.32 and later.\n• None : Specifies the default location for the Hyper-V VM disk.\n• None : Specifies the default location for the Windows containers.\n• None : Specifies the default location for the WSL distribution disk.\n• None : After installation completes, starts and sets the service startup type to Automatic. This circumvents the need for administrator privileges, which are otherwise necessary to start . is required by Windows containers and Hyper-V backend.\n\nIf your admin account is different to your user account, you must add the user to the docker-users group:\n\nDocker Desktop does not start automatically after installation. To start Docker Desktop:\n• None Search for Docker, and select Docker Desktop in the search results.\n• None\n• Docker Desktop is free for small businesses (fewer than 250 employees AND less than $10 million in annual revenue), personal use, education, and non-commercial open source projects.\n• Otherwise, it requires a paid subscription for professional use.\n• Paid subscriptions are also required for government entities.\n• The Docker Pro, Team, and Business subscriptions include commercial use of Docker Desktop.\n• None Select Accept to continue. Docker Desktop starts after you accept the terms. Note that Docker Desktop won't run if you do not agree to the terms. You can choose to accept the terms at a later date by opening Docker Desktop. For more information, see Docker Desktop Subscription Service Agreement . It is recommended that you read the FAQs .\n\nWhere to go next\n• Explore Docker's subscriptions to see what Docker can offer you.\n• Explore Docker Desktop and all its features.\n• Troubleshooting describes common problems, workarounds, and how to get support.\n• Release notes lists component updates, new features, and improvements associated with Docker Desktop releases.\n• Back up and restore data provides instructions on backing up and restoring data related to Docker."
    },
    {
        "link": "https://learn.microsoft.com/en-us/virtualization/windowscontainers/quick-start/run-your-first-container",
        "document": "Get started: Run your first Windows container\n\nThis topic describes how to run your first Windows container, after setting up your environment as described in Get started: Prep Windows for containers. To run a container, you first download (in containers, also referenced as a pull operation) a base image, which provides a foundational layer of operating system services to your container. Then you create and run a container image, which is based upon the base image. For details, read on.\n\nAll containers are created from container images. Microsoft offers several starter images, called base images, to choose from (for more details, see Container base images). This procedures pulls (downloads and installs) the lightweight Nano Server base image.\n• None Open a command prompt window (such as the built-in command prompt, PowerShell, or Windows Terminal), and then run the following command to download and install the base image: If Docker fails to start when trying to pull the image, the Docker daemon may be unreachable. To resolve this issue, try restarting the Docker service. If you see an error message that says no matching manifest for linux/amd64 in the manifest list entries , make sure Docker isn't configured to run Linux containers. To switch to Windows containers in Docker, right-click the Docker icon, and select Switch to Windows containers. To use the command line to switch between containers, run .\n• None After the image is finished downloading, read the EULA while you wait, and verify its existence on your system by querying your local docker image repository. Running the command returns a list of installed images. Here's an example of the output showing the Nano Server image.\n\nFor this simple example, a ‘Hello World’ container image will be created and deployed. For the best experience, run these commands in an elevated command prompt window (but don't use the Windows PowerShell ISE—it doesn't work for interactive sessions with containers, as the containers appear to hang).\n• None Start a container with an interactive session from the image by entering the following command in your command prompt window:\n• None After the container starts, the command prompt window changes context to the container. Inside the container, we'll create a simple ‘Hello World’ text file and then exit the container by entering the following commands:\n• None Get the container ID for the container you just exited by running the docker ps command:\n• None Create a new ‘HelloWorld’ image that includes the changes in the first container you ran. To do so, run the docker commit command, replacing with the ID of your container: You now have a custom image that contains the hello world script. This can be seen with the docker images command. Here's an example of the output:\n• None Finally, run the new container by using the docker run command with the parameter that automatically removes the container once the command line (cmd.exe) stops. The result is that Docker created a container from the 'HelloWorld' image, Docker started an instance of cmd.exe in the container, and the cmd.exe read our file and output the contents to the shell. As the final step, Docker stopped and removed the container.\n\nUse Windows Admin Center to run your containers locally. Specifically, use the Containers extension of your Windows Admin Center instance to run the containers. First, open the container host you want to manage, and in the Tools pane, select the Containers extension. Then, select the Images tab inside the Container extension under Container Host.\n\nIf your host doesn't have a base container image, select the Pull option to open the Pull Container Image settings:\n\nIn the Pull Container Image settings, provide the image URL and the tag. If you aren't certain which image to pull, Windows Admin Center provides a list of common images from Microsoft. You can also provide the credentials to pull an image from a private repository. Once you fill out the necessary information, select Pull. Windows Admin Center starts the pull process on the container host. After the download is complete, you see the new image on the Images tab.\n\nSelect the image you want to run, and select Run.\n\nOn the Run menu, set up the configuration for the container, such as the container name, the isolation type, which ports to publish, and memory and CPU allocation. Additionally, you can append Docker run commands that are not in the UI, such as -v for persistent volume. For more information on available Docker run parameters, review the documentation.\n\nOnce you finish the configuration for the container, click Run. You can see the status of the running containers on the Containers tab:"
    },
    {
        "link": "https://docs.docker.com/reference/cli/docker/container/rm",
        "document": "Remove one or more containers\n\nThis removes the container referenced under the link .\n\nRemove a link specified with on the default bridge network (--link)\n\nThis removes the underlying link between and the containers on the default bridge network, removing all network communication between the two containers. This does not apply when is used with user-specified networks.\n\nThe main process inside the container referenced under the link will receive , then the container will be removed.\n\nUse the command to remove all stopped containers, or refer to the command to remove unused containers in addition to other Docker resources, such as (unused) images and networks.\n\nAlternatively, you can use the with the / option to generate a list of container IDs to remove, and use that list as argument for the command.\n\nCombining commands can be more flexible, but is less portable as it depends on features provided by the shell, and the exact syntax may differ depending on what shell is used. To use this approach on Windows, consider using PowerShell or Bash.\n\nThe example below uses to print the IDs of all containers that have exited ( ), and removes those containers with the command:\n\nOr, using the Linux utility:\n\nThis command removes the container and any volumes associated with it. Note that if a volume was specified with a name, it will not be removed.\n\nIn this example, the volume for remains intact, but the volume for is removed. The same behavior holds for volumes inherited with ."
    },
    {
        "link": "https://stackoverflow.com/questions/35122773/single-command-to-stop-and-remove-docker-container",
        "document": "Use the docker ps command with the -a flag to locate the name or ID of the containers you want to remove\n\nIf you know when you’re creating a container that you won’t want to keep it around once you’re done, you can run docker run --rm to automatically delete it when it exits.\n\nYou can locate containers using docker ps -a and filter them by their status: created, restarting, running, paused, or exited. To review the list of exited containers, use the -f flag to filter based on status. When you've verified you want to remove those containers, using -q to pass the IDs to the docker rm command.\n\nRemove containers using more than one filter:\n\nDocker filters can be combined by repeating the filter flag with an additional value. This results in a list of containers that meet either condition. For example, if you want to delete all containers marked as either Created (a state which can result when you run a container with an invalid command) or Exited, you can use two filters:\n\nStop and Remove all the containers:"
    },
    {
        "link": "https://stackoverflow.com/questions/45357771/stop-and-remove-all-docker-containers",
        "document": "Docker introduced new namespaces and commands which everyone should finally learn and not stick to the old habits. Here is the documentation, and here are some examples:\n\nwhich means, that it only deletes images, which are not tagged and are not pointed on by \"latest\" - so no real images you can regularly use are deleted\n\n( even stopped containers do claim volumes ). This usually cleans up dangling anon-volumes of containers have been deleted long time ago. It should never delete named volumes since the containers of those should exists / be running. Be careful, ensure your stack at least is running before going with this one\n\nAnd finally, if you want to get rid if all the trash - to ensure nothing happens to your production, be sure all stacks are running and then run"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes",
        "document": "Docker makes it easy to wrap your applications and services in containers so you can run them anywhere. However, as you work with Docker, it’s also easy to accumulate an excessive number of unused images, containers, and data volumes that clutter the output and consume disk space.\n\nDocker gives you all the tools you need to clean up your system from the command line. This cheat sheet-style guide provides a quick reference to commands that are useful for freeing disk space and keeping your system organized by removing unused Docker images, containers, and volumes.\n\nHow to Use This Guide:\n• This guide is in cheat sheet format with self-contained command-line snippets.\n• Jump to any section that is relevant to the task you are trying to complete.\n\nIf you want a 1-click way to deploy a Docker application to a live server, take a look at DigitalOcean App Platform.\n\nPurging All Unused or Dangling Images, Containers, Volumes, and Networks\n\nDocker provides a single command that will clean up any resources — images, containers, volumes, and networks — that are dangling (not tagged or associated with a container):\n\nTo additionally remove any stopped containers and all unused images (not just dangling images), add the flag to the command:\n\nRemove one or more specific images\n\nUse the command with the flag to locate the ID of the images you want to remove. This will show you every image, including intermediate image layers. When you’ve located the images you want to delete, you can pass their ID or tag to :\n\nDocker images consist of multiple layers. Dangling images are layers that have no relationship to any tagged images. They no longer serve a purpose and consume disk space. They can be located by adding the filter flag with a value of to the command. When you’re sure you want to delete them, you can use the command:\n\nYou can find all the images that match a pattern using a combination of and . Once you’re satisfied, you can delete them by using to pass the IDs to . Note that these utilities are not supplied by Docker and are not necessarily available on all systems:\n\nAll the Docker images on a system can be listed by adding to the command. Once you’re sure you want to delete them all, you can add the flag to pass the image ID to :\n\nRemove one or more specific containers\n\nUse the command with the flag to locate the name or ID of the containers you want to remove:\n\nIf you know when you’re creating a container that you won’t want to keep it around once you’re done, you can run to automatically delete it when it exits:\n\nYou can locate containers using and filter them by their status: , , , , or . To review the list of containers, use the flag to filter based on status. When you’ve verified you want to remove those containers, use to pass the IDs to the command:\n\nRemove containers using more than one filter\n\nDocker filters can be combined by repeating the filter flag with an additional value. This results in a list of containers that meet either condition. For example, if you want to delete all containers marked as either (a state which can result when you run a container with an invalid command) or , you can use two filters:\n\nYou can find all the containers that match a pattern using a combination of and . When you’re satisfied that you have the list you want to delete, you can use and to supply the ID to . Note that these utilities are not supplied by Docker and are not necessarily available on all systems:\n\nYou can review the containers on your system with . Adding the flag will show all containers. When you’re sure you want to delete them, you can add the flag to supply the IDs to the and commands:\n\nRemove one or more specific volumes\n\nUse the command to locate the volume name or names you wish to delete. Then you can remove one or more volumes with the command:\n\nSince the point of volumes is to exist independent from containers, when a container is removed, a volume is not automatically removed at the same time. When a volume exists and is no longer connected to any containers, it’s called a dangling volume. To locate them to confirm you want to remove them, you can use the command with a filter to limit the results to dangling volumes. When you’re satisfied with the list, you can remove them all with :\n\nIf you create an unnamed volume, it can be deleted at the same time as the container with the flag. Note that this only works with unnamed volumes. When the container is successfully removed, its ID is displayed. Note that no reference is made to the removal of the volume. If it is unnamed, it is silently removed from the system. If it is named, it silently stays present.\n\nThis guide covers some of the common commands used to remove images, containers, and volumes with Docker. There are many other combinations and flags that can be used with each. For a comprehensive guide to what’s available, see the Docker documentation for , , , and . If there are common cleanup tasks you’d like to see in the guide, please ask or make suggestions in the comments.\n\nFor a detailed look at the different components of a Docker container, check out The Docker Ecosystem: An Introduction to Common Components.\n\nTo completely remove a Docker image, use the following command:\n\nReplace with the ID or name of the image. If the image is in use by a container, you must first remove the container before removing the image.\n\nUnused images (dangling and untagged) can be removed using the following command:\n\nTo remove all unused images, use the flag:\n\n3.How do I clear all Docker images and cache?\n\nTo remove all Docker images, containers, volumes, and networks, use this command:\n\nYou cannot directly modify a Docker image. Instead, create a new image without the unwanted files. Here’s how:\n\nStart and login inside the container from the image:\n\nNow, remove files within the container as needed.\n\nNext, commit the changes to a new image:\n\nTo remove all stopped containers, use:\n\nYou will be prompted for confirmation. To skip the prompt, use:\n\nTo remove containers that have been inactive for a specified time, use the following:\n\nThis removes containers with or status. Adjust the filter based on your needs.\n\nDocker images are stored in the Docker directory of your system. By default:\n• Windows: In Docker Desktop’s WSL2 VM or the\n\nYou can verify the storage driver and path using:\n\n8.How do I remove a container when Docker is finished?\n\nTo automatically remove a container after it exits, use the flag when starting the container:\n\nThis ensures the container is removed as soon as it stops."
    },
    {
        "link": "https://upwork.com/resources/how-to-stop-a-docker-container",
        "document": "Check out our latest products, partners, and enhancements.\n\nNews and stories from the world’s work marketplace.\n\nInsights and tools for business leaders navigating a new world of work."
    }
]