[
    {
        "link": "https://geeksforgeeks.org/c-switch-statement",
        "document": "In C, switch statement is a control flow structure that allows you to execute one of many code blocks based on the value of an expression. It is often used in place of if-else ladder when there are multiple conditional codes.\n\nExplanation: In this program, the switch statement evaluates the variable var. Since var is 1, the code in case with value 1 executes, printing “Case 1 is Matched.” and then exiting the switch block due to the break statement. Other cases and the default case are skipped.\n• expression : This is the variable or value you want to evaluate.\n• case : Each case represents a possible value for the expression. If the expression matches a case, the corresponding block of code runs.\n• break : This is used to exit the switch statement once a case is executed. Without break, the program will continue executing the subsequent cases (this is called “fall through”).\n• default : This block of code is executed if none of the case values match the expression.\n\nFollowing are some of the rules that we need to follow while using the switch statement:\n• case value must be of char int\n• None There can be one or N number of cases.\n• None The values in the case must be unique\n• None Each statement of the case can have a break statement. It is optional.\n• None The default statement is also optional.\n\nThe working of the switch statement in C is as follows:\n• Step 2: The evaluated value is matched against all the present cases.\n• Step 3A: If the matching case value is found, the associated code is executed.\n• Step 3B: If the matching code is not found, then the default case is executed if present.\n• Step 4A: If the break keyword is present in the executed case, then program control breaks out of the switch statement.\n• Step 4B: If the break keyword is not present, then all the cases after the matching case are executed.\n• Step 5: Statements after the switch statement are executed.\n\nThe below flowchart helps in visualizing the working of the switch statement in C.\n\nExamples of switch Statement in C\n\nThe below programs shows some use cases of switch statement in practical scenario:\n\nPrint Day Name of the Week\n\n1. Break in switch case is optional by syntax but logically required.\n\nThe break keyword is used to stop the execution inside a switch block. It helps to terminate the switch block and break out of it. When a break statement is reached, the switch terminates, and the flow of control jumps to the next line following the switch statement.\n\nThe break statement is optional. If omitted, execution will continue on into the next case. The flow of control will fall through to subsequent cases until a break is reached. The below example illustrate the switch case without break.\n\nThe default keyword is used to specify the set of statements to execute if there is no case match.\n\nIt is optional to use the default keyword in a switch case. Even if the switch case statement does not have a default statement, it would run without any problem.\n\nIf the expression provided in the switch statement does not result in a constant value, it would not be valid. Some valid expressions for switch case will be,\n\n4. Expression value should be only of int or char type.\n\nThe switch statement can only evaluate the integer or character value. So the switch expression should return the values of type int or char only.\n\nIn the C switch statement, duplicate case values are not allowed.\n\nNesting of switch statements is allowed, which means you can have switch statements inside another switch. However nested switch statements should be avoided as it makes the program more complex and less readable.\n\n7. The default block can be placed anywhere\n\nRegardless of its placement, the default case only gets executed if none of the other case conditions are met. So, putting it at the beginning, middle, or end doesn’t change the core logic."
    },
    {
        "link": "https://stackoverflow.com/questions/29022954/c-using-casecondition-instead-of-case-value",
        "document": "As far as I know, you can't, but it isn't that useful anyway. Except in C#. The closest thing to that you can do is this:\n\nSince compares the value inside of the parenthesis against each of the cases, you can write things such as or and then use variables or condition expressions in each of the cases. But even doing so, there are two other problems: 1.- all variables implied in such cases must be constant or it won't compile, (see the code) and 2.- Switch statements don't allow repeating any case, as you can see, I comented out the last case since there were already one false condition so it would've not compiled."
    },
    {
        "link": "https://geeksforgeeks.org/decision-making-c-cpp",
        "document": "The conditional statements (also known as decision control structures) such as if, if else, switch, etc. are used for decision-making purposes in C programs.\n\nThey are also known as Decision-Making Statements and are used to evaluate one or more conditions and make the decision whether to execute a set of statements or not. These decision-making statements in programming languages decide the direction of the flow of program execution.\n\nThere come situations in real life when we need to make some decisions and based on these decisions, we decide what should we do next. Similar situations arise in programming also where we need to make some decisions and based on these decisions we will execute the next block of code. For example, in C if x occurs then execute y else execute z. There can also be multiple conditions like in C if x occurs then execute p, else if condition y occurs execute q, else execute r. This condition of C else-if is one of the many ways of importing multiple conditions.\n\nTypes of Conditional Statements in C\n\nFollowing are the decision-making statements available in C:\n\nLet’s discuss each of them one by one.\n\n1. if in C\n\nThe if statement is the most simple decision-making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statements is executed otherwise not.\n\nHere, the condition after evaluation will be either true or false. C if statement accepts boolean values – if the value is true then it will execute the block of statements below it otherwise not. If we do not provide the curly braces ‘{‘ and ‘}’ after if(condition) then by default if statement will consider the first immediately below statement to be inside its block.\n\nExample of if in C\n\nAs the condition present in the if statement is false. So, the block below the if statement is not executed.\n\nThe if statement alone tells us that if a condition is true it will execute a block of statements and if the condition is false it won’t. But what if we want to do something else when the condition is false? Here comes the C else statement. We can use the else statement with the if statement to execute a block of code when the condition is false. The if-else statement consists of two blocks, one for false expression and one for true expression.\n\nSyntax of if else in C\n\nThe block of code following the else statement is executed as the condition present in the if statement is false.\n\nA nested if in C is an if statement that is the target of another if statement. Nested if statements mean an if statement inside another if statement. Yes, C allow us to nested if statements within if statements, i.e, we can place an if statement inside another if statement.\n\nThe below flowchart helps in visualize the above syntax.\n\nThe if else if statements are used when the user has to decide among multiple options. The C if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the C else-if ladder is bypassed. If none of the conditions is true, then the final else statement will be executed. if-else-if ladder is similar to the switch statement.\n\nThe switch case statement is an alternative to the if else if ladder that can be used to execute the conditional code based on the value of the variable specified in the switch statement. The switch block consists of cases to be executed based on the value of the switch variable.\n\nThe conditional operator is used to add conditional code in our program. It is similar to the if-else statement. It is also known as the ternary operator as it works on three operands.\n\nThese statements are used in C for the unconditional flow of control throughout the functions in a program. They support four types of jump statements:\n\nThis loop control statement is used to terminate the loop. As soon as the break statement is encountered from within a loop, the loop iterations stop there, and control returns from the loop immediately to the first statement after the loop.\n\nBasically, break statements are used in situations when we are not sure about the actual number of iterations for the loop or we want to terminate the loop based on some condition.\n\nThis loop control statement is just like the break statement. The continue statement is opposite to that of the break statement, instead of terminating the loop, it forces to execute the next iteration of the loop. \n\nAs the name suggests the continue statement forces the loop to continue or execute the next iteration. When the continue statement is executed in the loop, the code inside the loop following the continue statement will be skipped and the next iteration of the loop will begin.\n\nIf you create a variable in if-else in C, it will be local to that if/else block only. You can use global variables inside the if/else block. If the name of the variable you created in if/else is as same as any global variable then priority will be given to the `local variable`.\n\nThe goto statement in C also referred to as the unconditional jump statement can be used to jump from one point to another within a function.\n\nIn the above syntax, the first line tells the compiler to go to or jump to the statement marked as a label. Here, a label is a user-defined identifier that indicates the target statement. The statement immediately followed after ‘label:’ is the destination statement. The ‘label:’ can also appear before the ‘goto label;’ statement in the above syntax.\n\nThe return in C returns the flow of the execution to the function from where it is called. This statement does not mandatorily need any conditional statements. As soon as the statement is executed, the flow of the program stops immediately and returns the control from where it was called. The return statement may or may not return anything for a void function, but for a non-void function, a return value must be returned."
    },
    {
        "link": "https://stackoverflow.com/questions/427760/when-to-use-if-else-if-else-over-switch-statements-and-vice-versa",
        "document": "I typically prefer if/else constructs over switch statements, especially in languages that allows fall-through cases. What I've found, often, is as the projects age, and multiple developers gets involved, you'll start having trouble with the construction of a switch statement.\n\nIf they (the statements) become anything more than simple, many programmers become lazy and instead of reading the entire statement to understand it, they'll simply pop in a case to cover whatever case they're adding into the statement.\n\nI've seen many cases where code repeats in a switch statement because a person's test was already covered, a simple fall-though case would have sufficed, but laziness forced them to add the redundant code at the end instead of trying to understand the switch. I've also seen some nightmarish switch statements with many cases that were poorly constructed, and simply trying to follow all the logic, with many fall-through cases dispersed throughout, and many cases which weren't, becomes difficult ... which kind of leads to the first/redundancy problem I talked about.\n\nTheoretically, the same problem could exist with if/else constructs, but in practice this just doesn't seem to happen as often. Maybe (just a guess) programmers are forced to read a bit more carefully because you need to understand the, often, more complex conditions being tested within the if/else construct? If you're writing something simple that you know others are likely to never touch, and you can construct it well, then I guess it's a toss-up. In that case, whatever is more readable and feels best to you is probably the right answer because you're likely to be sustaining that code.\n\nSwitch statements often perform faster than if-else constructs (but not always). Since the possible values of a switch statement are laid out beforehand, compilers are able to optimize performance by constructing jump tables. Each condition doesn't have to be tested as in an if/else construct (well, until you find the right one, anyway).\n\nHowever this isn't always the case, though. If you have a simple switch, say, with possible values of 1 to 10, this will be the case. The more values you add requires the jump tables to be larger and the switch becomes less efficient (not than an if/else, but less efficient than the comparatively simple switch statement). Also, if the values are highly variant ( i.e. instead of 1 to 10, you have 10 possible values of, say, 1, 1000, 10000, 100000, and so on to 100000000000), the switch is less efficient than in the simpler case."
    },
    {
        "link": "https://codedamn.com/news/c/switch-statement-in-c-programming-with-examples",
        "document": "Control flow statements are fundamental in programming, allowing developers to design the flow of execution based on certain conditions.\n\nAmong these, the statement stands out for its ability to simplify complex conditionals, making it a popular choice for handling multiple branches of execution.\n\nUnlike the more commonly used ladder, which evaluates conditions in a linear manner, the statement directly jumps to the matching case, enhancing code readability and efficiency. This feature is particularly useful in scenarios where a variable or expression needs to be compared against multiple values.\n\nControl flow statements in C, such as , , , , , and , control the execution flow of a program. However, when it comes to checking a single variable against a series of constants, the statement is the preferred choice. The statement evaluates an expression once and compares its value against various cases, executing the matching case block. It’s a cleaner, more readable alternative to nested statements, especially when dealing with a large number of conditions.\n\nThe basic syntax of a statement in C is as follows:\n• : This keyword initiates the switch statement, and the expression within parentheses is evaluated.\n• : Followed by a constant value, this defines a branch of execution. If the expression matches the constant, the statements following that are executed.\n• : This keyword is used to exit the switch block, preventing the execution from falling through to the next case.\n• : This optional case executes if none of the constants match the expression. It’s essentially the “else” part of the statement.\n\nWhen a statement is executed, the expression is evaluated once and compared against the values of each in the order they appear. If a matching value is found, the control of the program jumps to that block, executing the statements until a is encountered or the end of the block is reached. If no matching case is found, and a case is provided, the program executes the block. It’s important to include a in every to avoid “fall through”, where the execution continues into the next unintentionally.\n\nSwitch statements are incredibly useful for scenarios where multiple conditions lead to different execution paths. Below are examples demonstrating the practical use of switch statements in C programming.\n\nThis example shows how a statement can be used to handle different menu options:\n\nThis example demonstrates using a statement to perform basic calculator operations:\n\nConsider a scenario where you need to process user input for a multi-level menu in a console application. Each option in the main menu leads to sub-options. Here’s how you can utilize nested switch statements to handle this:\n\nThis example showcases the power of nested switch statements in organizing and handling complex decision-making scenarios efficiently.\n\nSwitch statements are often compared with if-else constructs. The choice between them boils down to readability and efficiency. Switch statements shine when dealing with multiple distinct values of a single variable, offering a clear, readable format. They’re especially efficient with integral and enumeration types due to the compiler’s ability to optimize switch statements into jump tables, providing O(1) complexity for the selection process. Conversely, if-else statements are more flexible and can handle ranges or conditions involving multiple variables but tend to be less readable with an increasing number of conditions.\n\nOmitting the statement in a switch case leads to “fall-through”, where subsequent cases are executed until a break is encountered or the switch ends. This behavior, although sometimes useful, is often unintended and can lead to bugs. Always remember to include a statement unless fall-through is explicitly desired.\n\nSwitch statements in C are limited to handling integral (e.g., int, char) and enumeration types. This limitation means that switch cannot be used with floating-point types or strings directly, a notable difference from if-else statements that can handle any type of condition.\n\nIncluding a default case in switch statements ensures that there’s a fallback option if none of the specified cases match the variable’s value. This practice prevents unexpected behavior and enhances code robustness."
    },
    {
        "link": "https://w3schools.com/c/c_user_input.php",
        "document": "You have already learned that is used to output values in C.\n\nTo get user input, you can use the function:\n\n// Create an integer variable that will store the number we get from the user\n\nint myNum;\n\n\n\n// Ask the user to type a number\n\nprintf(\"Type a number: \n\n\");\n\n\n\n// Get and save the number the user types\n\nscanf(\"%d\", &myNum);\n\n \n\n// Output the number the user typed\n\nprintf(\"Your number is: %d\", myNum);\n\n Run example »\n\nThe function takes two arguments: the format specifier of the variable ( in the example above) and the reference operator ( ), which stores the memory address of the variable. Tip: You will learn more about memory addresses and functions in the next chapter.\n\nThe function also allow multiple inputs (an integer and a character in the following example):\n\n// Create an int and a char variable\n\nint myNum;\n\nchar myChar;\n\n\n\n // Ask the user to type a number AND a character\n\nprintf(\"Type a number AND a character and press enter: \n\n\"); \n\n\n\n// Get and save the number AND character the user types\n\nscanf(\"%d %c\", &myNum, &myChar);\n\n\n\n// Print the number\n\nprintf(\"Your number is: %d\n\n\", myNum);\n\n\n\n// Print the character\n\nprintf(\"Your character is: %c\n\n\", myChar);\n\n Run example »\n\nYou can also get a string entered by the user:\n\nNote: When working with strings in , you must specify the size of the string/array (we used a very high number, 30 in our example, but atleast then we are certain it will store enough characters for the first name), and you don't have to use the reference operator ( ).\n\nHowever, the function has some limitations: it considers space (whitespace, tabs, etc) as a terminating character, which means that it can only display a single word (even if you type many words). For example:\n\nFrom the example above, you would expect the program to print \"John Doe\", but it only prints \"John\".\n\nThat's why, when working with strings, we often use the function to read a line of text. Note that you must include the following arguments: the name of the string variable, (string_name), and :"
    },
    {
        "link": "https://freecodecamp.org/news/using-scanf-in-c",
        "document": "The function is a commonly used input function in the C programming language. It allows you to read input from the user or from a file and store that input in variables of different data types.\n\nInput is an essential part of most programs, and the function provides an easy way to read input in a variety of formats. But it's important to use carefully and to always validate user input to prevent security vulnerabilities and unexpected program behavior.\n\nIn this article, we'll take a closer look at the function and how to use it effectively in C programming.\n\nWhat you will learn\n\nHere are some things that you will learn:\n• What is and what it's used for\n• How to use to read input from the user or from a file\n• The syntax of the function and how to use conversion specifiers to read input\n• How to store input in variables using pointers\n• The importance of input validation and error checking to prevent unexpected program behavior and security vulnerabilities\n\nThe basic syntax of the function is as follows:\n\nThe function returns the number of items successfully read, or if an error occurs or the end of the input stream is reached.\n• : A string that specifies the format of the input to be read. This string can contain conversion specifiers that tell what type of input to expect and how to read it. See the next section for more details on conversion specifiers.\n• : A variable-length argument list that contains the memory addresses of variables where the input values will be stored. These memory addresses must be passed as pointers.\n\nHow to Use Conversion Specifiers to Read Input\n\nThe function takes a format string as its first argument, which specifies the format and data types of the input that will be read.\n\nThe format string can include conversion specifiers, which begin with the percent sign ( ) and are followed by one or more characters that specify the type of data to be read.\n\nThe most common conversion specifiers are:\n\nAfter the format string, the function takes a variable number of arguments, each of which is a pointer to the variable where the input value will be stored. The number and type of arguments must match the conversion specifiers in the format string.\n\nFor example, the following code reads an integer value and a floating-point value from the user, and stores them in the variables and , respectively:\n\nBelow is the expected output:\n\nIn this example, the format string tells to read an integer value followed by a floating-point value, separated by a space. The operator is used to pass the address of the and variables to , so that the input values can be stored in those variables.\n\nIn the C programming language, \"conversion specifiers\" and \"type specifiers\" are related concepts, but they have different meanings and purposes.\n\nA \"type specifier\" is a keyword that specifies the data type of a variable or expression. For example, the , , and keywords are type specifiers that indicate integer, floating-point, and character data types, respectively. We use type specifiers to declare variables and functions and to define the return type of a function.\n\nOn the other hand, a \"conversion specifier\" is a symbol we use in format strings to specify the format of input and output operations. Conversion specifiers start with the character, followed by a single letter or sequence of characters that indicates the type of data to be read or written. For example, the conversion specifier reads integer values, while the specifier reads floating-point values.\n\nIn summary, type specifiers are used to specify the data type of variables and expressions, while conversion specifiers are used to specify the format of input and output operations. Both concepts are important in C programming and are used in different contexts.\n\nHow to Store Input in Variables Using Pointers\n\nTo store input in a variable using , you need to pass the memory address of the variable as an argument to the function using the (address of) operator. This is because expects pointers as arguments to store input values directly in memory locations.\n\nHere's an example of using to read an integer value from the user and store it in a variable called :\n\nIn this example, the conversion specifier tells to expect an integer input value. The memory address of the variable is passed to using the operator, which returns a pointer to the memory location of .\n\nIf you need to read multiple input values, you can pass multiple pointers as arguments to in the order that they appear in the format string. For example, to read two integer values and store them in variables and , you could do:\n\nNote that it's important to make sure that the data types of the input values match the data types of the variables that you're storing them in. If the types don't match, the input value may be interpreted incorrectly, leading to unexpected program behavior.\n\nAdditionally, it's a good practice to validate input values and handle input errors, as discussed in the next section.\n\nInput validation and error checking are important concepts in programming, especially when dealing with user input or input from external sources. In C, you can use various techniques to validate input and handle input errors.\n\nOne common technique is to use the return value of to check if the input operation was successful or if an error occurred. The function returns the number of input values that were successfully read and stored, or if an error occurred or the end of the input stream was reached.\n\nBy checking the return value, you can determine if the input operation was successful or if an error occurred.\n\nFor example, if you're using to read an integer value from the user and store it in a variable called , you could use the following code to validate the input:\n\nIn this example, the function is used to read an integer value and store it in the variable. The return value of is compared to to check if one input value was successfully read and stored. If the return value is not , an error message is printed to the console and the program exits with an error code.\n\nBelow is the expected output:\n\nYou can use similar techniques to validate input of other types, such as floating-point numbers or strings. For example, to validate the input of a floating-point value, you could use the conversion specifier and check if the return value of is equal to .\n\nIn addition to checking the return value of , you can also use other techniques to validate input and handle errors, such as using to read input as a string and then parsing the string to extract the desired values, or using regular expressions to validate input patterns.\n\nIt's important to carefully validate input and handle errors to prevent unexpected program behavior or security vulnerabilities.\n\nand the Standard C Library\n\nThe function is included in the standard C library, which provides a collection of pre-defined functions that you can use in C programs. The header file is also part of the standard C library and contains declarations for input and output functions like , , and others.\n\nTo use the function in a C program, you need to include the header file at the beginning of your program using the preprocessor directive. This allows you to access the functions and data types defined in the standard C library, including .\n\nHere's an example of how to use in a C program:\n\nIn this example, we first include the header file using . We then define a variable of type . We use the function to prompt the user to enter an integer, and the function reads the user's input and stores it in the variable. Finally, we use another statement to print the value of .\n\nNote that we use the operator before the variable name in the function to pass the memory address of the variable to the function. This allows the function to store the user's input directly in the variable.\n\nThe function in C is a powerful tool for reading input from the user or from a file and storing it in variables. By specifying conversion specifiers in the format string, you can read input values of different types, such as integers, floating-point numbers, and strings.\n\nWhen using , it's important to be aware of potential input errors and to validate input values to prevent unexpected program behavior or security vulnerabilities.\n\nYou can use the return value of to check if the input operation was successful. You can also use various techniques to validate input and handle errors, such as checking input ranges, using regular expressions, or converting input values to strings and parsing them.\n\nOverall, is a versatile function that you can use in a variety of programming scenarios. By understanding how to use effectively and how to validate and handle input errors, you can build robust and reliable C programs that interact with users and external data sources in a safe and secure manner."
    },
    {
        "link": "https://geeksforgeeks.org/scanf-in-c",
        "document": "In C, scanf is a function that stands for Scan Formatted String. It is the most used function to read data from stdin (standard input stream i.e. usually keyboard) and stores the result into the given arguments. It can accept character, string, and numeric data from the user using standard input. It also uses format specifiers like printf.\n\nExplanation: In this example, scanf(“%d”, &n) reads an integer from the keyboard and stores it in the integer variable n. The %d format specifier indicates that an integer is expected, and &n provides the memory address of n so that scanf can store the input value there.\n\nThe syntax of scanf() in C is similar to the syntax of printf().\n• format: It is the format string that contains the format specifiers(s).\n• address_of_args: Address of the variables where we want to store the input.\n\nWe use & operator to find the address of the variables by appending it before the variable name. If you’re interested in learning more about input handling and integrating it into complex data structures, the C Programming Course Online with Data Structures covers practical applications of input functions in C.\n\nTo know more about format specifiers, refer to this article – Format Specifiers in C\n\nThe scanf in C returns three types of values:\n• >0: The number of values converted and assigned successfully.\n• 0: No value was assigned.\n• <0: Read error encountered or end-of-file (EOF) reached before any assignment was made.\n\nThe below examples demonstrate the use of scanf for different types of input:\n\nExplanation: The scanf(“%f”, &f) statement reads a floating-point number from user input and stores it in the variable f. The %f format specifier ensures the correct interpretation of the input, and &f passes the memory address of f to store the value.\n\nTake Two Integers as Input\n\nExplanation: scanf(“%d %d”, &a, &b) read two integers from the standard input. The space in the format string %d %d tells scanf to expect whitespace (spaces, tabs, or newlines/enters) between the two numbers. When you press Enter after typing the first number, it’s interpreted as whitespace, and scanf proceeds to read the second integer. The values are then stored in the integer variables a and b, respectively.\n\nExplanation: The scanf(“%s”, name) function reads a single input until the first space, so when “Abhishek Sharma” is entered, only “Abhishek” will be stored in name. Also, we don’t need to use the &operator for the address of name.\n\nIn C, scanf() provides a feature called scanset characters, which allows you to read custom pattern of input. For example, reading only specific characters, reading text with whitespaces, etc.\n• set: A sequence of characters that defines the pattern. This can include individual characters, ranges of characters (e.g., a-z for lowercase letters), or negated sets (e.g., [^0-9] to exclude digits).\n\nExplanation: The scanf(“%[^\n\n]s”, name) function reads an entire line, including spaces, until a newline (\n\n) is encountered. This allows storing full names like “Abhishek Sharma” in the name array. The program then prints the entered name using printf()."
    },
    {
        "link": "https://stackoverflow.com/questions/2144459/using-scanf-to-accept-user-input",
        "document": "I was reading an article about scanf. I personally have never checked the return code of a scanf.\n\nI am just wondering what other techniques experienced programmers do when they use scanf when they want to get user input? Or do they use another function or write their own?\n\nThanks for any suggestions,\n\nI think most programmers agree that scanf is bad, and most agree to use fgets and sscanf. However, I can use fgets to readin the input. However, if I don't know what the user will enter how do I know what to parse. For example, like if the user was to enter their address which would contain numbers and characters and in any order?"
    },
    {
        "link": "https://programiz.com/c-programming/c-input-output",
        "document": "In C programming, is one of the main output function. The function sends formatted output to the screen. For example,\n\nHow does this program work?\n• All valid C programs must contain the function. The code execution begins from the start of the function.\n• The is a library function to send formatted output to the screen. The function prints the string inside quotations.\n• To use in our program, we need to include header file using the statement.\n• The statement inside the function is the \"Exit status\" of the program. It's optional.\n\nWe use format specifier to print types. Here, the inside the quotations will be replaced by the value of .\n\nTo print , we use format specifier. Similarly, we use to print values.\n\nTo print , we use format specifier.\n\nIn C programming, is one of the commonly used function to take input from the user. The function reads formatted input from the standard input such as keyboards.\n\nHere, we have used format specifier inside the function to take input from the user. When the user enters an integer, it is stored in the variable.\n\nNotice, that we have used inside . It is because gets the address of , and the value entered by the user is stored in that address.\n\nWe use and format specifier for and respectively.\n\nWhen a character is entered by the user in the above program, the character itself is not stored. Instead, an integer value (ASCII value) is stored.\n\nAnd when we display that value using text format, the entered character is displayed. If we use to display the character, it's ASCII value is printed.\n\nHere's how you can take multiple inputs from the user and display them.\n\nAs you can see from the above examples, we use\n\nHere's a list of commonly used C data types and their format specifiers."
    }
]