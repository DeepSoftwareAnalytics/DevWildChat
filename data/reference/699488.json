[
    {
        "link": "https://helpch.at/docs/1.12.2",
        "document": ""
    },
    {
        "link": "https://helpch.at/docs/1.12.2/index.html?org/bukkit/plugin/java/JavaPlugin.html",
        "document": ""
    },
    {
        "link": "https://hub.spigotmc.org/javadocs/spigot",
        "document": "The documentation is for developing plugins and is split into the respective packages for each subject matter. This documentation does not cover running a server, contributing code back to the project, or setting up a workspace. Working knowledge of the Java language is a prerequisite for developing plugins.\n\nFor basic plugin development, see the . It covers the basic requirements of a plugin jar.\n\nFor handling events and triggered code, see the .\n\nNote: While the Bukkit API makes every effort to ensure stability, this is not guaranteed, especially across major versions. In particular the following is a (incomplete) list of things that are not API.\n• Implementing interfaces or extending classes. The Bukkit API is designed to only be implemented by server software. Unless a class/interface is obviously designed for extension (eg ), or explicitly marked as such, it should not be implemented or extended by plugins. Although this can sometimes work, it is not guaranteed to do so and resulting bugs will be disregarded.\n• Constructing inbuilt events. Although backwards compatibility is attempted where possible, it is sometimes not possible to add new fields to events without breaking existing constructors. To ensure that the API continues to evolve, event constructors are therefore not plugin API.\n• Implementation classes. Concrete implementation classes packaged with Bukkit (eg those beginning with Simple) are not API. You should access them via their interfaces instead.\n• The \"enumness\" of enums which implement . Such enums are liable to conversion to regular classes and therefore usages deriving from their status as an enum (including, but not limited to, use in switch statements and classes such as ) should be avoided."
    },
    {
        "link": "https://hub.spigotmc.org/javadocs/spigot/index.html?overview-summary.html",
        "document": "The documentation is for developing plugins and is split into the respective packages for each subject matter. This documentation does not cover running a server, contributing code back to the project, or setting up a workspace. Working knowledge of the Java language is a prerequisite for developing plugins.\n\nFor basic plugin development, see the . It covers the basic requirements of a plugin jar.\n\nFor handling events and triggered code, see the .\n\nNote: While the Bukkit API makes every effort to ensure stability, this is not guaranteed, especially across major versions. In particular the following is a (incomplete) list of things that are not API.\n• Implementing interfaces or extending classes. The Bukkit API is designed to only be implemented by server software. Unless a class/interface is obviously designed for extension (eg ), or explicitly marked as such, it should not be implemented or extended by plugins. Although this can sometimes work, it is not guaranteed to do so and resulting bugs will be disregarded.\n• Constructing inbuilt events. Although backwards compatibility is attempted where possible, it is sometimes not possible to add new fields to events without breaking existing constructors. To ensure that the API continues to evolve, event constructors are therefore not plugin API.\n• Implementation classes. Concrete implementation classes packaged with Bukkit (eg those beginning with Simple) are not API. You should access them via their interfaces instead.\n• The \"enumness\" of enums which implement . Such enums are liable to conversion to regular classes and therefore usages deriving from their status as an enum (including, but not limited to, use in switch statements and classes such as ) should be avoided."
    },
    {
        "link": "https://javadocs.olziedev.com/spigot/1.12.2/index.html?org/bukkit/plugin/java/class-use/JavaPlugin.html",
        "document": ""
    },
    {
        "link": "https://spigotmc.org/wiki/scheduler-programming",
        "document": ""
    },
    {
        "link": "https://spigotmc.org/threads/every-15-seconds-run-something.539120",
        "document": ""
    },
    {
        "link": "https://helpch.at/docs/1.12.2/index.html?org/bukkit/scheduler/BukkitRunnable.html",
        "document": ""
    },
    {
        "link": "https://bukkit.fandom.com/wiki/Scheduler_Programming",
        "document": "This tutorial will guide you in using the scheduler provided by bukkit. It will allow you to defer the execution of code to a later time. This is not the same as registering a Listener, a block of code which is executed in response to an event in the game. Blocks of code may also be scheduled to be executed repeatedly at a fixed interval, with or without a delay. They will continue to execute until completed, or canceled, or your plugin is disabled.\n\nWhen using BukkitRunnable, with a separate class, scheduling work occurs in two steps for the programmer.\n• Define the work to be done, see the section Defining Work\n• Notify Bukkit when the work should be executed, see the section Scheduling Work\n\nAlternatively, work can be scheduled directly with the scheduler, this also occurs in two steps for the programmer.\n• Define the work to be done, in a Runnable or Callable\n• Then directly scheduling the work with the Bukkit Scheduler, see the section BukkitScheduler\n\nBukkitRunnable is an abstract implementation of Runnable. It also supports additional operations that a Runnable is not capable of, most conveniently, BukkitRunnables can schedule and cancel their own execution. However, if the BukkitRunnable did not schedule itself for execution, it cannot cancel itself from execution. BukkitRunnables are not schedulers, do not contain any scheduler logic, and are not expensive to create. Plugins should prefer defining a BukkitRunnable and calling the appropriate run method over directly scheduling a Runnable with the BukkitScheduler.\n\nPlugins should first extend BukkitRunnable to define work that needs to be done. In other words, the definition of the run method is what you want executed in accordance to a schedule.\n\nThis is an example definition of a task that can be scheduled.\n\nThis is an example of a definition of a task that will cancel itself when it has executed the specified number of times\n\nAfter defining the task, the plugin needs to schedule the task. BukkitRunnables are scheduled when the desired run method is invoked on an instance of the task. The list of methods for BukkitRunnable can be found in the Javadocs for BukkitRunnable. The different run methods all return a BukkitTask object\n\nThis is an example of a plugin which registers a listener and when a player joins, schedules a task to be run 20 ticks later.\n\nThis is example takes the above ExampleSelfCancelingTask and schedules it to run every 20 ticks after waiting 10 ticks.\n\nAn anonymous BukkitRunnable will allow you to schedule a task, without creating a new class with a name. This examples combines the above two basic examples.\n\nThis is an example of a plugin which registers a listener and when a player joins, schedules the above ExampleTask to run on an async thread.\n\nThe BukkitScheduler allows plugins to schedule a Runnable and/or a Callable , for execution at a later time. The list of methods for BukkitScheduler can be found in the Javadocs for BukkitScheduler.\n\nExample for directly scheduling an anonymous Runnable with the BukkitScheduler to run after 20 ticks.\n\nExample for directly scheduling an anonymous Runnable with the BukkitScheduler to run every twenty ticks, forever, starting from when you schedule it.\n\nExample for directly scheduling an anonymous Runnable with the BukkitScheduler using a lambda function as an async task.\n\nA BukkitTask object is returned whenever a Runnable is scheduled. This object represents the task the scheduled task being executed by the scheduler. For more information see, Javadocs for BukkitTask.\n\nA Callable given to the scheduler to call synchronously returns a Future. These are standard Java classes, for more information see, Javadocs for Callable and Javadocs for Future\n\nThe Bukkit API, with the exception of the scheduler package, is not thread safe nor guaranteed to be thread safe.\n• Asynchronous tasks should never access any API in Bukkit.\n• Do not access or modify shared collections from your asynchronous tasks. Normal collections are not thread-safe. This also applies to objects which are not thread safe.\n• If you want to schedule something at a fixed time, by calculating how many ticks until that point in time, you should use an asynchronous task. If you don't, lag will increase the delay."
    },
    {
        "link": "https://bukkit.org/threads/creating-and-stopping-scheduled-bukkitrunnable-task.353575",
        "document": ""
    }
]