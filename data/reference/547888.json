[
    {
        "link": "https://geeksforgeeks.org/basic-input-output-c",
        "document": "In C++, input and output are performed in the form of a sequence of bytes or more commonly known as streams.\n• Input Stream: If the direction of flow of bytes is from the device (for example, Keyboard) to the main memory then this process is called input.\n• Output Stream: If the direction of flow of bytes is opposite, i.e. from main memory to device (display screen) then this process is called output.\n\nAll of these streams are defined inside the <iostream> header file which contains all the standard input and output tools of C++. The two instances cout and cin of iostream class are used very often for printing outputs and taking inputs respectively. These two are the most basic methods of taking input and printing output in C++.\n\nThe C++ cout is the instance of the ostream class used to produce output on the standard output device which is usually the display screen. The data needed to be displayed on the screen is inserted in the standard output stream (cout) using the insertion operator(<<).\n\nFor example, if we want to print text “GeeksforGeeks” on the display, we can use the cout as shown:\n\nExplanation: In the above program, cout is used to output the text “GeeksforGeeks” to the standard output stream. It works in conjunction with the insertion operator (<<) to send the specified data to the output stream.\n\nWe can also print the variable values using cout.\n\nUnderstanding input and output operations is essential for any C++ programmer. The C++ Course includes comprehensive lessons on basic I/O operations, ensuring you can manage user interaction in your programs.\n\nThe C++ cin statement is the instance of the class istream and is used to read input from the standard input device which is usually a keyboard. The extraction operator (>>) is used along with the object cin for extracting the data from the input stream and store it in some variable in the program.\n\nFor example, if we want to ask user for his/her age, then we can use cin as shown:\n\nExplanation: The above program asks the user to input the age. The object cin is connected to the input device (keyboard). The age entered by the user is extracted from cin using the extraction operator(>>) and the extracted data is then stored in the variable age present on the right side of the extraction operator.\n\nAlso, while taking text as input using cin, we need to remember that cin stops reading input as soon as it encounters a whitespace (space, tab, or newline). This means it only captures the first word or characters until the first whitespace. It is shown in the below example:\n\nThe C++ cerr is the standard error stream that is used to output the errors. This is also an instance of the iostream class. As cerr in C++ is un-buffered so it is used when one needs to display the error message immediately. It does not have any buffer to store the error message and display it later.\n\nThe main difference between cerr and cout comes when you would like to redirect output using “cout” that gets redirected to file if you use “cerr” the error doesn’t get stored in file.(This is what un-buffered means ..It cant store the message)\n\nThis is also an instance of ostream class and used to display errors but unlike cerr the error is first inserted into a buffer and is stored in the buffer until it is not fully filled. or the buffer is not explicitly flushed (using flush()). The error message will be displayed on the screen too."
    },
    {
        "link": "https://cplusplus.com/doc/tutorial/basic_io",
        "document": "std; main () { i; cout << \"Please enter an integer value: \" ; cin >> i; cout << \"The value you entered is \" << i; cout << \" and its double is \" << i*2 << ; 0; }\n\nPlease enter an integer value: 702 The value you entered is 702 and its double is 1404."
    },
    {
        "link": "https://cplusplus.com/doc/tutorial/files",
        "document": "std; main () { ofstream myfile ( ); (myfile.is_open()) { myfile << ; myfile << \"This is another line.\n\n\" ; myfile.close(); } cout << ; 0; }\n\n[file example.txt] This is a line. This is another line."
    },
    {
        "link": "https://home.csulb.edu/~pnguyen/cecs282/lecnotes/inputoutput.pdf",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/63034484/how-to-create-stream-which-handles-both-input-and-output-in-c",
        "document": "Creating a class that behaves like a stream is easy. Let's say we want to create such class with the name , the definition of the class will be as simple as:\n\nThe constructor of your class should call the constructor of with a pointer to a custom object. is just a template class which defines the structure of a stream buffer. So you have to get your own stream buffer. You can get it in two ways:\n• From another stream: Every stream has a member which takes no arguments and returns a pointer to the stream buffer being used by it. Example:\n• Create your own: You can always create a buffer class by deriving from and customize it as you want.\n\nNow we defined and implemented class, we need the stream buffer. Let's select option 2 from above and create our own stream buffer and name this . We will need the following:\n• Continuous memory block to store input from the user (or something other) temporarily.\n• Method , which is called when allocated memory for storing output is full.\n• Method , which is called when all input is read by the program and more input requested.\n• Method , which is called when output is flushed.\n\nAs we know what things are needed to create a stream buffer class, let's declare it:\n\nHere and are two arrays which will store input and output respectively. is a special type which is like char and created to support multiple character types like , , etc.\n\nBefore we jump into the implementation of our buffer class, we need to know how the buffer will work.\n\nTo understand how buffers work, we need to know how arrays work. Arrays are nothing special but pointers to continuous memory. When we declare a array with two elements, the operating system allocate memory for our program. When we access an element from the array with , it is converted to , where is index number. When you add to an array, it jumps to next (figure 1). If you don't know what pointer arithmetics I would recommend you to learn that before you continue. cplusplus.com has a good article on pointers for beginners.\n\nAs we know much about pointers now, let's see how stream buffers work. Our buffer contains two arrays and . But how the standard library would know input must be stored to and output must be stored to ? So, there two areas called get area and put area which is input and output area respectively.\n\nPut area is specified with the following three pointers (figure 2):\n• or put pointer: where next character will be put\n\nThese are actually functions which return the corresponding pointer. These pointers are set by . After this function call, is set to . To change it we'll use which repositions by n character, n can be positive or negative. Note that the stream will write to the previous memory block of but not .\n\nGet area is specified with the following three pointers (figure 3):\n• or end back, start of get area\n• or end get pointer, end of get area\n• or get pointer, the position which is going to be read\n\nThese pointers are set with function. Note that the stream will read the previous memory block of but not .\n\nNow that we have discussed almost all we need to know before creating a custom stream buffer, it's time to implement it! We'll try to implement our stream buffer such way that it will work like !\n\nHere we set all three get pointers to one position, which means there are no readable characters, forcing when input wanted. Then we set put pointer in such a way so the stream can write to whole array except the last element. We'll preserve it for future use.\n\nNow, let's implement method, which is called when output is flushed:\n\nThis does it's work very easily. First, it determines how many characters there are to print, then prints one by one and repositions (put pointer). It returns EOF or -1 if character any character is EOF, 0 otherwise.\n\nBut what to do if put area is full? So, we need method. Let's implement it:\n\nNot very special, this just put the extra character into the preserved last element of and repositions (put pointer), then calls . It returns EOF if returned EOF, otherwise the extra character.\n\nEverything is now complete, except input handling. Let's implement , which is called when all characters in input buffer are read:\n\nA little difficult to understand. Let's see what's going on here. First, it calculates how many characters it should preserve in buffer (which is at most 4) and stores it in the variable. Then it copies last number characters to the start of the buffer. This is done because characters can be put back into the buffer with method of . Program can even read next characters without extracting it with method of . After the last few characters are put back, it reads new characters until it reaches the end of the input buffer or gets EOF as input. Then it returns EOF if no characters are read, continues otherwise. Then it repositions all get pointers and return the first character read.\n\nAs our stream buffer is implemented now, we can setup our stream class so it uses our stream buffer. So we change the private variable:\n\nYou can now test your own stream, it should take input from and show output from terminal.\n\nNote that this stream and buffer can only handle based input and output. Your class must derive from corresponding class to handle other types of input and output (e.g for wide characters) and implement member functions or method to so they can handle that type of character."
    },
    {
        "link": "https://programiz.com/cpp-programming/nested-loops",
        "document": "A loop within another loop is called a nested loop. Let's take an example,\n\nSuppose we want to loop through each day of a week for 3 weeks.\n\nTo achieve this, we can create a loop to iterate three times (3 weeks). And inside the loop, we can create another loop to iterate 7 times (7 days). This is how we can use nested loops.\n\nWe can create nested loops with while and do...while in a similar way.\n\nIn this program, the outer loop iterates from to .\n\nThe inner loop iterates from to . Inside the inner loop, we print the character .\n\nWhen we use a break statement inside the inner loop, it terminates the inner loop but not the outer loop. For example,\n\nThis program does not run the inner loop when the value of is i.e. it does not print the days of the 2nd week. The outer loop that prints the weeks is unaffected.\n\nSimilarly, when we use a continue statement inside the inner loop, it skips the current iteration of the inner loop only. The outer loop is unaffected. For example,\n\nThis program prints only those days that are even.\n\nWhenever the is odd, the statement skips that iteration of the inner loop."
    },
    {
        "link": "https://stackoverflow.com/questions/73982464/how-to-print-a-pattern-using-nested-for-loops",
        "document": "Here is something kind of from out in the left field, and off topic, leaving behind not only the requirements of the homework, but the C language. However, we will find our way back.\n\nWe can solve this problem (sort of) using text processing at the Unix prompt:\n\nWe can treat the smallest square\n\nas an initial seed kernel, which is fed through a little command pipeline to produce a square of the next size (up to a single digit limitation):\n\nNow, copy the 3x3 square and paste it into :\n\nNow, several steps in one go, by piping through multiple instances of :\n• None For each line of input, repeat the second-to-last character. E.g becomes , or becomes . This is easily done with .\n• None Add a new line at the end which is a copy of the last line, with each digit replaced by its successor. E.g. if the last line is , make it . The utility helps here\n\nTo connect this to the homework problem: a C program could be written which works in a similar way, starting with an array which holds the square, and grows it. The requirement for nested loops would be satisfied because there would be an outer loop iterating on the number of \"next\" operations, and then an inner loop performing the edits on the array: replicating the next-to-last column, and adding the new row at the bottom."
    },
    {
        "link": "https://geeksforgeeks.org/nested-for-loop-to-print-a-pattern",
        "document": "A nested for loop in R is used when we want to iterate through multiple dimensions, such as rows and columns of a matrix, or for creating patterns. we will discuss how to print multiplication tables up to a certain number with its working example in the R Programming Language using R for loop conditions. Everyone found an easy way for pattern printing in other programming languages. But it’s a tough task using the R language\n• None Start the first loop for the number of lines\n• None Start the second loop for the item to be displayed\n• None Increment the second loop until a condition is reached\n• None Increment the first loop until the condition is true\n• None Initialize n=5, indicating the number of rows in the pattern.\n• None The outer loop iterates over the range of i from 1 to n (inclusive), controlling the number of rows in the pattern.\n• None Inside the outer loop, the inner loop iterates over the range of j from 1 to the value of i (inclusive). This loop controls the number of asterisks to be printed in each row.\n• None Inside the inner loop, cat(“* “) prints an asterisk followed by a space, generating the pattern elements.\n• None After the inner loop, cat(“\n\n”) is used to print a newline character, moving to the next line after printing the pattern for each row.\n• None Initialize n=4, indicating the number of rows in the pattern.\n• None The outer loop iterates over the range of i from 1 to n (inclusive), controlling the number of rows in the pattern.\n• None Inside the outer loop, the inner loop iterates over the range of j from 1 to the value of i (inclusive). This loop controls the number of asterisks to be printed in each row.\n• None Inside the inner loop, cat(“* “) prints an asterisk followed by a space, generating the pattern elements.\n• None After the inner loop, cat(“\n\n”) is used to print a newline character, moving to the next line after printing the pattern for each row.\n• None to store the stars for each row.\n• None : Initializes the column counter to 5 (this represents the number of stars in the first row).\n• None : This is the outer\n• None : This is the inner loop that iterates through the stars within a row.\n• None vector to prepare for the next row.\n• None : Increments the row counter for the next iteration.\n• None : Reduce the number of stars for the next row."
    },
    {
        "link": "https://stackoverflow.com/questions/53069573/understanding-nested-for-loop-to-print-asterisk-pattern",
        "document": "First you are accepting the user input for the size of the pattern. Now suppose the input or the value of a is 3.\n\nNow when the first loop executes, it starts like this for(cols=1; cols<4; cols++) Now when the execution goes to the nested loop, the loop looks like this for(rows=0; rows<1; rows++)\n\nIn the nested loop the condition gets satisfied as because 0 is less than 1 so it prints the first asterisk \"*\" and the inner loop stops, and the execution moves further and cout << endl moves to a newline i.e. it inserts a newline character.\n\nFor the 2nd iteration of the outer loop, the value of cols becomes 2 and after that it again enters the inner or the nested loop. Here the inner loop looks like this :- for(rows=0; rows<2; rows++) Now 0 is less than 2 so the loop executes and prints an asterisk \"*\" and the inner loop's execution continues and again the value of rows gets incremented to 1. Since 1 is also less than 2, so it again prints an asterisk, and the execution of the inner loop stops, leaving two asterisks in the console, i.e. \"**\".\n\nSo you have a pattern like this\n\nAnd the above mentioned process continues and it again prints 3 sets of asterisk and like this it goes on and gets terminated as soon as the outer loop's condition becomes false."
    },
    {
        "link": "https://algocademy.com/link?problem=nested-loops&lang=cpp&solution=1",
        "document": "Best Time To Buy Stock in C++\n\nBest Time To Buy Stock in C++\n\nBest Time To Buy Stock in C++\n\nBest Time To Buy Stock in C++\n\nBest Time To Buy Stock in C++\n\nBest Time To Buy Stock in C++\n\nBinary Strings With At Most K Consecutive Ones in C++\n\nBinary Strings With At Most K Consecutive Ones in C++\n\nBinary Strings With K Ones On Even Positions in C++\n\nBinary Strings With K Ones On Even Positions in C++\n\nBinary Strings With K Ones in C++\n\nBinary Strings With K Ones in C++\n\nBinary Strings Without Consecutive Ones in C++\n\nBinary Strings Without Consecutive Ones in C++\n\nPermutations Of Given Length in C++\n\nPermutations Of Given Length in C++\n\nBinary Strings Of Given Length in C++\n\nBinary Strings Of Given Length in C++\n\nSubarray Of Given Sum Ii in C++\n\nSubarray Of Given Sum Ii in C++\n\nLongest Subarray With At Most K Distinct Integers in C++\n\nLongest Subarray With At Most K Distinct Integers in C++\n\nLongest Subarray With Sum At Most S in C++\n\nLongest Subarray With Sum At Most S in C++\n\nIntersection Of Two Linked Lists in C++\n\nIntersection Of Two Linked Lists in C++\n\nRemove Nth Node From End Of List in C++\n\nRemove Nth Node From End Of List in C++\n\nGenerate Binary Strings With K Ones in C++\n\nGenerate Binary Strings With K Ones in C++\n\nLongest Subarray With At Most K Distinct Integers in C++\n\nLongest Subarray With At Most K Distinct Integers in C++\n\nContainer With Most Water in C++\n\nContainer With Most Water in C++\n\nMax Sum Of Three Subarrays in C++\n\nMax Sum Of Three Subarrays in C++\n\nMax Sum Of Three Subarrays in C++\n\nMax Sum Of Three Subarrays in C++\n\nMax Sum Of Three Subarrays in C++\n\nMax Sum Of Three Subarrays in C++\n\nSubarray Of Given Sum in C++\n\nSubarray Of Given Sum in C++\n\nLongest Subarray With Sum At Most S in C++\n\nLongest Subarray With Sum At Most S in C++\n\nMax Sum Of Three Subarrays in C++\n\nMax Sum Of Three Subarrays in C++\n\nMax Val And Number Of Occurrences in C++\n\nMax Val And Number Of Occurrences in C++\n\nLongest Common Prefix Of Two Strings in C++\n\nLongest Common Prefix Of Two Strings in C++\n\nContinue In For Loops in C++\n\nContinue In For Loops in C++\n\nBreak In For Loops in C++\n\nBreak In For Loops in C++\n\nLooping Through Arrays With Indices in C++\n\nLooping Through Arrays With Indices in C++\n\nThe For Loop in C++\n\nThe For Loop in C++\n\nThe While Loop in C++\n\nThe While Loop in C++\n\nWhy For Loops in C++\n\nWhy For Loops in C++\n\nSecond Largest Value in C++\n\nSecond Largest Value in C++\n\nMinimum Value Of Three in C++\n\nMinimum Value Of Three in C++\n\nAllow To Contest in C++\n\nAllow To Contest in C++\n\nReducing If Else To Boolean Expression in C++\n\nReducing If Else To Boolean Expression in C++\n\nIf Else in C++\n\nIf Else in C++\n\nLast Two Digit Sum in C++\n\nLast Two Digit Sum in C++\n\nYour First Challenge in C++\n\nYour First Challenge in C++\n\nBuggy Code Return Instead Of Print in C++\n\nBuggy Code Return Instead Of Print in C++\n\nQuiz Return Instead Of Print in C++\n\nQuiz Return Instead Of Print in C++\n\nBuggy Code Print Instead Of Return in C++\n\nBuggy Code Print Instead Of Return in C++\n\nQuiz Print Instead Of Return in C++\n\nQuiz Print Instead Of Return in C++\n\nWhy Parameters And Arguments in C++\n\nWhy Parameters And Arguments in C++\n\nConvert Hours And Mins Into Seconds in C++\n\nConvert Hours And Mins Into Seconds in C++\n\nThe Power Of Variables in C++\n\nThe Power Of Variables in C++\n\nA nested loop has one loop inside of another. These are typically used for working with two dimensions such as printing stars in rows and columns as shown below. When a loop is nested inside another loop, the inner loop runs many times inside the outer loop. In each iteration of the outer loop, the inner loop will be re-started. The inner loop must finish all of its iterations before the outer loop can continue to its next iteration. for(int row = 0; row < 3; row++) { for(int col = 0; col < 5; col++) { cout << '*'; } cout << '\n\n'; } // This code prints a rectangle with 3 rows and 5 columns, filled with '*' Nested loops are also helpful when we want to iterate through a multi dimensional array, for example: vector > arr = { {1, 2}, {3, 4}, {5, 6} }; for (int i = 0; i < 3; i++) { for (int j = 0; j < 2; j++) { cout << arr[i][j] << \"\n\n\"; } } // This outputs each sub-element in one at a time In a nested loop, a statement only stops the loop it is placed in. Therefore, if a is placed in the inner loop, the outer loop still continues. For example: vector > arr = { {1, 2}, {3, 4}, {5, 6} }; for (int i = 0; i < 3; i++) { for (int j = 0; j < 2; j++) { if(arr[i][j] == 3) { break; } cout << arr[i][j] << \"\n\n\"; } } // prints the numbers 1, 2, 5 and 6 on different lines When is and is , we execute the . This means we stop the inner loop and go back to the outer loop to continue from the next iteration, which is . And as you can see, we print all the elements of row 2. However, if the is placed in the outer loop, all of the looping stops. For example: vector > arr = { {1, 2}, {3, 4}, {5, 6} }; for (int i = 0; i < 3; i++) { if(arr[i][0] == 3) { break; } for (int j = 0; j < 2; j++) { cout << arr[i][j] << \"\n\n\"; } } // prints the numbers 1 and 2 on different lines Assignment\n\nFollow the Coding Tutorial and let's write some nested loops. Hint\n\n Look at the examples above if you get stuck.\n\nNested loops are a fundamental concept in programming, especially in C++. They are used to perform repeated actions within repeated actions, making them essential for tasks that involve multi-dimensional data structures or complex iteration patterns. Understanding nested loops is crucial for solving problems related to matrices, grids, and other multi-dimensional arrays.\n\nBefore diving into nested loops, it's important to understand the basic structure of a loop. A loop allows you to execute a block of code multiple times. In C++, the most common types of loops are , , and loops. Nested loops are simply loops within loops, where the inner loop completes all its iterations for each iteration of the outer loop.\n\nNested loops are used to handle multi-dimensional data structures. For example, a 2D array can be thought of as an array of arrays. To iterate through each element of a 2D array, you need a nested loop:\n\nNested loops are particularly useful in scenarios such as:\n\nLet's look at an example of matrix addition:\n\nWhen working with nested loops, it's easy to make mistakes such as:\n• Clearly commenting your code to explain the purpose of each loop\n• Minimizing the depth of nested loops when possible\n\nAdvanced techniques involve optimizing nested loops for performance. For example, you can use loop unrolling to reduce the overhead of loop control. Another technique is to use parallel processing to distribute the work of nested loops across multiple CPU cores.\n\nHere's an example of loop unrolling:\n\nDebugging nested loops can be challenging. Here are some tips:\n• Use print statements to track the values of loop variables\n• Use a debugger to step through the code\n\nFor testing, write test cases that cover different scenarios, including edge cases. For example, test with empty arrays, single-element arrays, and large arrays.\n• Break down the problem into smaller parts\n• Start with simple examples to understand the pattern\n\nPractice is key to mastering nested loops. Try solving problems on coding challenge platforms to improve your skills.\n\nNested loops are a powerful tool in C++ programming. They allow you to handle multi-dimensional data structures and perform complex iterations. By understanding the basics, avoiding common pitfalls, and practicing regularly, you can become proficient in using nested loops effectively.\n\nFor further reading and practice, check out these resources:"
    }
]