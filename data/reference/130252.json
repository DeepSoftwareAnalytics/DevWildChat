[
    {
        "link": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-9.0",
        "document": "\n• Is an API that supports user interface (UI) login functionality.\n\nUsers can create an account with the login information stored in Identity or they can use an external login provider. Supported external login providers include Facebook, Google, Microsoft Account, and Twitter.\n\nFor information on how to globally require all users to be authenticated, see Require authenticated users.\n\nThe Identity source code is available on GitHub. Scaffold Identity and view the generated files to review the template interaction with Identity.\n\nIdentity is typically configured using a SQL Server database to store user names, passwords, and profile data. Alternatively, another persistent store can be used, for example, Azure Table Storage.\n\nIn this topic, you learn how to use Identity to register, log in, and log out a user. Note: the templates treat username and email as the same for users. For more detailed instructions about creating apps that use Identity, see Next Steps.\n\nASP.NET Core Identity isn't related to the Microsoft identity platform. Microsoft identity platform is:\n• An evolution of the Azure Active Directory (Azure AD) developer platform.\n• An alternative identity solution for authentication and authorization in ASP.NET Core apps.\n\nASP.NET Core Identity adds user interface (UI) login functionality to ASP.NET Core web apps. To secure web APIs and SPAs, use one of the following:\n\nDuende Identity Server is an OpenID Connect and OAuth 2.0 framework for ASP.NET Core. Duende Identity Server enables the following security features:\n\nFor more information, see the Duende Identity Server documentation (Duende Software website).\n\nView or download the sample code (how to download).\n\nThe generated project provides ASP.NET Core Identity as a Razor class library. The Identity Razor class library exposes endpoints with the area. For example:\n\nApply the migrations to initialize the database.\n\nRun the app and register a user. Depending on your screen size, you might need to select the navigation toggle button to see the Register and Login links.\n\nServices are added in . The typical pattern is to call methods in the following order:\n\nThe preceding code configures Identity with default option values. Services are made available to the app through dependency injection.\n\nIdentity is enabled by calling UseAuthentication. adds authentication middleware to the request pipeline.\n\nThe template-generated app doesn't use authorization. is included to ensure it's added in the correct order should the app add authorization. , , and must be called in the order shown in the preceding code.\n\nFor more information on , see IdentityOptions and Application Startup.\n\nWhen a user clicks the Register button on the page, the action is invoked. The user is created by CreateAsync(TUser) on the object:\n\nWith the default templates, the user is redirected to the where they can select a link to have the account confirmed. The default is used only for testing, automatic account verification should be disabled in a production app.\n\nTo require a confirmed account and prevent immediate login at registration, set in :\n\nThe Login form is displayed when:\n• The Log in link is selected.\n• A user attempts to access a restricted page that they aren't authorized to access or when they haven't been authenticated by the system.\n\nWhen the form on the Login page is submitted, the action is called. is called on the object.\n\nFor information on how to make authorization decisions, see Introduction to authorization in ASP.NET Core.\n\nThe Log out link invokes the action.\n\nIn the preceding code, the code needs to be a redirect so that the browser performs a new request and the identity for the user gets updated.\n\nPost is specified in the :\n\nThe default web project templates allow anonymous access to the home pages. To test Identity, add :\n\nIf you are signed in, sign out. Run the app and select the Privacy link. You are redirected to the login page.\n\nTo explore Identity in more detail:\n• Examine the source of each page and step through the debugger.\n\nAll the Identity-dependent NuGet packages are included in the ASP.NET Core shared framework.\n\nThe primary package for Identity is Microsoft.AspNetCore.Identity. This package contains the core set of interfaces for ASP.NET Core Identity, and is included by .\n\nFor more information and guidance on migrating your existing Identity store, see Migrate Authentication and Identity.\n\nSee Configuration for a sample that sets the minimum password requirements.\n\nAddDefaultIdentity was introduced in ASP.NET Core 2.1. Calling is similar to calling the following:\n\nSee AddDefaultIdentity source for more information.\n\nTo prevent publishing static Identity assets (stylesheets and JavaScript files for Identity UI) to the web root, add the following property and target to the app's project file:\n• How to work with Roles in ASP.NET Core Identity\n• See this GitHub issue for information on configuring Identity using SQLite.\n• Create an ASP.NET Core app with user data protected by authorization\n• Add, download, and delete user data to Identity in an ASP.NET Core project"
    },
    {
        "link": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-9.0",
        "document": ""
    },
    {
        "link": "https://medium.com/@ravipatel.it/a-beginners-guide-to-asp-net-core-identity-for-authentication-and-authorization-with-net-8-e6c8deb612f4",
        "document": "Let’s walk through the steps to integrate ASP.NET Core Identity into your .NET 8 web application for user authentication and authorization.\n\nStart by creating a new ASP.NET Core Web App using the .NET CLI or Visual Studio.\n\nIf your project doesn’t include Identity, you can install the required NuGet packages:\n\nThis package includes everything needed to work with ASP.NET Core Identity and Entity Framework for managing users and roles in a database.\n\nIn your file, you need to configure services for Identity:\n• AddDbContext configures the database using Entity Framework Core. The is the context class for Identity.\n• AddDefaultIdentity sets up the Identity services, including user registration, login, and roles.\n• UseAuthentication and UseAuthorization enable the app to authenticate users and authorize their actions.\n\nYou’ll need to define an class that integrates Identity with Entity Framework.\n\nThis class inherits from , which provides the necessary structure for Identity tables (like users, roles, and claims).\n\nTo save time, you can scaffold Identity pages like registration, login, and logout.\n\nIn Visual Studio, right-click on your project and select Add > New Scaffolded Item. Then, choose Identity and select the relevant pages (e.g., Register, Login, etc.).\n\nAlternatively, you can manually create your Razor Pages for login and registration.\n\nNow, let’s create the database that will store Identity information (like user credentials and roles).\n\nRun Entity Framework Core Migrations to set up the Identity schema in the database:\n\nThese commands will create all the necessary Identity tables in your database (such as , , , etc.)."
    },
    {
        "link": "https://scholarhat.com/tutorial/aspnet/authentication-authentication-aspnet-identity-example",
        "document": "Authentication is the process of checking the identity of the users accessing our application. Most of the applications have a feature for logging in and the application validates user identity against any trusted source such as a database or external login providers (i.e. Facebook, Gmail, Twitter, etc.). This process is called Authentication.\n\nAuthorization is the process of validating privileges to access a resource of the application. After successful login to the application, the authorization mechanism checks whether the login user has privileges to access the application resource.\n• Security- First and foremost advantage of ASP.NET Core Identity is its measures to enhance the security of our application. For that, it uses practices like password hashing, account lockout, protection against CSRF(Cross-Site Request Forgery) and XSS (Cross-Site Scripting).\n• Customization- It lets the developers to customize user properties, password policies, authentication workflows, etc, to create their passwords as per their requirements.\n• Social Logins- It means users can login through third parties who provide authentication such as Google, Facebook, Twitter or Microsoft accounts.\n• Role-Based Authorization- There is built in support for role based authorization in ASP.NET Core Identity through which developers can set roles and permissions for users within their applications.\n• Cross Platform Compatibility- The ASP.NET Core Identity is a cross platform mechanism that can easily run on Windows, Linux and macOS.\n• For the developers who are new to the framework may find it complex as it has many components, configuration options and customization possibilities which may take some time to get used to.\n• ASP.NET Core Identity uses Entity Framework by default for the purpose of data access. So, if you are working on an application that uses some other data access technology, it may a difficult task for you.\n• It is not very much flexible when it comes to areas like customizing the authentication and authorization aspects of it.\n• ASP.NET works only with ASP.NET Core middleware, So if your application is not a ASP.NET Core application, you will have to find other methods for its authentication and authorization.\n• The very first thing to why authentication is important is the security of your web application so as to protect your sensitive data.\n• It also helps in maintaining the privacy of the user by only letting authenticated users to have access to their personal information and sensitive data.\n• Implementing proper authentication mechanisms help in ensuring compliance with some of those regulations which are important to avoid legal failures.\n• It also helps in building trust within the users that it will protect their sensitive data and privacy\n• It provides a framework which helps to manage user accounts, include registration, login, logout and password management functionalities.\n• It works well with ASP.NET Core's authentication middleware which enables many features like cookies, tokens and external logins.\n• It comes with best security practices from password hashing, salting, to account lockout mechanisms which help in protecting the application from vulnerabilities.\n• Data storage is more flexible due to many storage providers like Microsoft SQL Server, SQLite, etc\n\nHow to Perform Authentication Using ASP.NET Core Identity?\n\nASP.Net Core provides an identity membership system that enables us to add login functionality to our application. Identity can be added by creating a user account or can be used by external login providers such as Facebook or Twitter.\n\nTo configure the Identity in our application we can either use an SQL server database to store user information or use another persistent store such as Azure Table Storage. ASP.net Core project template allows us to create applications using .NET Core Identity. The application can be created by using Visual Studio or the Command line tool.\n\nUsing the following command, we can create an application using the Command Line Tool in the ASP.NET Core.\n\nThe template adds the following code to the ConfigureServices method of the startup class. This code is to add the identity service to our application. In this code, I am using the \"services.AddDefaultIdentity\" method that adds the default identity system configuration for specific users.\n\nAlternatively, we can use the “AddIdentity” method that adds the identity configuration for specific roles and users. The AddIdentity method is used for role-based authentication. By calling the \"app.UseAuthentication\" method (that adds authentication middleware to the request pipeline) in the Configure method of the startup class, we can make identity available to the application.\n\nThe ASP.net Core template adds the default database connection string in the appsetting.json file. The template adds the database name in the format \"aspnet-{project name}-{guid}\". This connection string is used in the initialization of the DBContext service in the ConfigureService method. Here we need to replace this with the actual connection string.\n\nRead More: How can you become an ASP.NET developer\n\nNow all the configuration related to authentication using Identity is done. When I launch the application and click on the \"Register\" link, the system will ask for database migration if the database is not compatible with the application or the database does not exist.\n\nWe can do the database migration either by clicking the \"Apply Migrations\" button or by using the command line (using the command: \"dotnet ef database update\"). The database migration will generate Identity membership-related tables.\n\nThis UI for login and registration is defined in the \"Microsoft.AspNetCore.Identity\" library as a Razor Pages. We can view or download source code for these pages from GitHub. We can also do the customization in the login and registration razor page by defining our pages.\n\nIn this library, both are defined under the “Identity” area. So, if you don’t want to change navigation, you need to add razor pages under the “Area/Identity/Pages/Account” folder. In this example, I have added my custom login page. I have added an “Account” controller and I have three methods: Login, Logout, and AccessDenied within this controller.\n\nRead More: What's new in ASP.NET Core 8 - Features, Optimizations, and Benefits\n\nIdentity comes with some default configurations such as password policy, lockout policy, etc. We can also override this default configuration based on our requirements. We can override the following options\n\nUsing PasswordOptions, we can put some restrictions on setting passwords. Following are password options supported by identity service.\n• None RequireDigit: it specifies that the password must contain at least one digit\n• None RequiredLength: it specifies the minimum length of the password\n• None RequireNonAlphanumeric: it specifies that the user must enter a non-alphanumeric character in the password\n• None RequireUppercase: it specifies that the password must contain at least one uppercase character\n• None RequireLowercase: it specifies that the password must contain at least one lowercase character\n• None RequiredUniqueChars: it specifies that the password must contain a unique set of characters\n\nIt contains the user lockout-related settings. Followings are Lockout options supported by identity service.\n• None DefaultLockoutTimeSpan: it is the default time for the user is locked out\n• None MaxFailedAccessAttempts: it specifies the maximum number of failed attempts\n• None AllowedForNewUsers: it determines that new user can be locked out\n\nIt contains the setting related to sign-in. Followings are SignIn options supported by identity service.\n• None RequireConfirmedEmail: it indicates that a confirmed email address is required\n• None RequireConfirmedPhoneNumber: it indicates that a confirmed phone number is required\n\nIt contains the settings related to user information. Following are UserOptions supported by identity service\n• None RequireUniqueEmail: It indicates that the application requires a unique email address for each user\n• None AllowedUserNameCharacters: Using this setting, we can specify the allowed character list in the user name\n\nIt contains an option related to the user token provider. It has the following options.\n• None EmailConfirmationTokenProvider: it specifies the token provider that is used to generate tokens used in confirmation email\n• None PasswordResetTokenProvider: it specifies the token provided that is used in the password reset email\n• None ChangeEmailTokenProvider: it specifies the token provided that is used in the change confirmation email\n• None ChangePhoneNumberTokenProvider:it specify the token provided that is used when the phone number is changed\n• None AuthenticatorTokenProvider: it specifies the token provided that is used to validate two-factor sign-ins with an authenticator\n\nIt contains the settings related to application cookies. It has the following options\n• None Cookie.Name: name of the application cookie\n• None Cookie.HttpOnly: it specifies whether cookie is accessible from client-side scripts or not\n• None ExpireTimeSpan: it specifies the time that the authentication ticket is stored in the cookie and remains valid.\n• None AccessDeniedPath: it defines the path on which the user will redirect if authorization is fail\n• None SlidingExpiration: This is a Boolean property. When it is set to true, a new cookie will be created when the current cookie is more than halfway through the expiration window.\n• None ReturnUrlParameter: it is used by middleware and it specifies the return URL\n\nIn the following example, I have overridden some of the configuration options as:\n• None The password configuration forces the user to enter at least one digit and the minimum password length is 10\n• None The Lockout configuration that overrides default lock time and maximum failed password attempts\n• None The Sign-In configuration forces the user to enter a confirmed email\n• None The User configuration that allows unique emails\n• None The cookie configuration that overrides cookie expiration time, login URL, logout URL, and Sliding Expiration setting\n\nTo demonstrate the concept, I have marked the \"About\" action method of the Home Controller with the Authorize attribute so only authenticated users can able to access the method. If we try to access the About page without login, the system will redirect to the Login page.\n\nAuthentication checks only the user's identity and allows the user to access the system resources. Authorization validates the user's privileges to access a system resource. There are many types of authorization available with asp.net code such as simple authorization, role-based, claims-based, and policy-based authorization. If we provide only authentication, it is called simple authorization. In this article, I will explain about the role-based authorization.\n\nThe Identity Membership system allows us to define a role for the user and with the help of the user role, we can identify whether the user has the privilege to access the page or not. With the default template, only the UserManager class of the Identity service is available but do the role-based authentication, the RoleManager class is also required. Both the classes are available together by using the “AddIdentity” method that adds the identity configuration for specific roles and users.\n\nTo demonstrate the concept, I have created hard-code roles and users. Here, I have created 4 Roles and 4 users and mapped each user with one role. You can create a user and role by either inserting a record into the database table or using membership classes and methods you can add a user and role. In the following code snippet, I have created roles and users by using membership classes. This method is called from Configure method of the startup class when all the services are loaded and available for use.\n\nUsing the RoleManager and UserManager classes of identity service, we can add the roles, users, and user - role mapping. Using the CreateAsync method of the RoleManager class, we can create new roles. Using the CreateAsync method of UserManager, we can create a new user, and using the AddToRoleAsync method, we can add a user to a particular role.\n\nAs described in the above section, we can do authorization using the Authorize attribute. This attribute has a Roles property in which we can specify the name of roles that allow access. Using the Following code, we can allow to access the action method to the user that has an \"Administrator\" role.\n\nThe Authorize attribute can also be applied multiple times to the action method. By applying multiple attributes, we can allow multiple roles to access the action.\n\nAlternatively, we can also specify multiple roles by passing comma-separated values for roles. In the following example, users in roles “GroupUser” and “User are allowed to access the action method.\n\nASP.net core provides a very rich identity membership service and using this service, we can add many facilities such as login, logout, registration, etc. by writing a few lines of the code. This service will take care of many things such as validating tokens, finding users, adding users, adding users to roles, etc. We can also customize these features and also override the behavior of the Identity Option such as PasswordOption, SignInOption, etc. For a more in-depth understanding, consider enrolling in our ASP.NET Core Certification Training Program."
    },
    {
        "link": "https://livebook.manning.com/book/asp-net-core-razor-pages-in-action/chapter-9/v-8",
        "document": "This, and the next chapter look at managing users within a Razor Pages application. They look at two closely related topics - Authentication and Authorization . Authentication is the process of identifying who your user is. Authorization is part of the process of securing your application by limiting your user’s access to only those parts of the application that they are allowed to access.\n\nThis chapter will concentrate on the nature of a “user” and how you can authenticate their identity, or how you can ensure they are who they claim to be. Authentication is hard to get right. From a practical point of view, you need to provide mechanisms to capture and store a user’s personal information including something only they know, such as a password. Then you need to be able to “remember” the user on subsequent visits. Your application might also require you to use a secondary authentication mechanism, so-called “Two-factor authentication” (or 2FA), like a code sent by SMS. You might need to provide the user with features to reset their password if they have forgotten it or manage their profile information. What about verifying email addresses? Or managing account lockouts in the event of repeated incorrect attempts to log in? And you need to do all of this in a cryptographically secure manner."
    },
    {
        "link": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-9.0",
        "document": "\n• Is an API that supports user interface (UI) login functionality.\n\nUsers can create an account with the login information stored in Identity or they can use an external login provider. Supported external login providers include Facebook, Google, Microsoft Account, and Twitter.\n\nFor information on how to globally require all users to be authenticated, see Require authenticated users.\n\nThe Identity source code is available on GitHub. Scaffold Identity and view the generated files to review the template interaction with Identity.\n\nIdentity is typically configured using a SQL Server database to store user names, passwords, and profile data. Alternatively, another persistent store can be used, for example, Azure Table Storage.\n\nIn this topic, you learn how to use Identity to register, log in, and log out a user. Note: the templates treat username and email as the same for users. For more detailed instructions about creating apps that use Identity, see Next Steps.\n\nASP.NET Core Identity isn't related to the Microsoft identity platform. Microsoft identity platform is:\n• An evolution of the Azure Active Directory (Azure AD) developer platform.\n• An alternative identity solution for authentication and authorization in ASP.NET Core apps.\n\nASP.NET Core Identity adds user interface (UI) login functionality to ASP.NET Core web apps. To secure web APIs and SPAs, use one of the following:\n\nDuende Identity Server is an OpenID Connect and OAuth 2.0 framework for ASP.NET Core. Duende Identity Server enables the following security features:\n\nFor more information, see the Duende Identity Server documentation (Duende Software website).\n\nView or download the sample code (how to download).\n\nThe generated project provides ASP.NET Core Identity as a Razor class library. The Identity Razor class library exposes endpoints with the area. For example:\n\nApply the migrations to initialize the database.\n\nRun the app and register a user. Depending on your screen size, you might need to select the navigation toggle button to see the Register and Login links.\n\nServices are added in . The typical pattern is to call methods in the following order:\n\nThe preceding code configures Identity with default option values. Services are made available to the app through dependency injection.\n\nIdentity is enabled by calling UseAuthentication. adds authentication middleware to the request pipeline.\n\nThe template-generated app doesn't use authorization. is included to ensure it's added in the correct order should the app add authorization. , , and must be called in the order shown in the preceding code.\n\nFor more information on , see IdentityOptions and Application Startup.\n\nWhen a user clicks the Register button on the page, the action is invoked. The user is created by CreateAsync(TUser) on the object:\n\nWith the default templates, the user is redirected to the where they can select a link to have the account confirmed. The default is used only for testing, automatic account verification should be disabled in a production app.\n\nTo require a confirmed account and prevent immediate login at registration, set in :\n\nThe Login form is displayed when:\n• The Log in link is selected.\n• A user attempts to access a restricted page that they aren't authorized to access or when they haven't been authenticated by the system.\n\nWhen the form on the Login page is submitted, the action is called. is called on the object.\n\nFor information on how to make authorization decisions, see Introduction to authorization in ASP.NET Core.\n\nThe Log out link invokes the action.\n\nIn the preceding code, the code needs to be a redirect so that the browser performs a new request and the identity for the user gets updated.\n\nPost is specified in the :\n\nThe default web project templates allow anonymous access to the home pages. To test Identity, add :\n\nIf you are signed in, sign out. Run the app and select the Privacy link. You are redirected to the login page.\n\nTo explore Identity in more detail:\n• Examine the source of each page and step through the debugger.\n\nAll the Identity-dependent NuGet packages are included in the ASP.NET Core shared framework.\n\nThe primary package for Identity is Microsoft.AspNetCore.Identity. This package contains the core set of interfaces for ASP.NET Core Identity, and is included by .\n\nFor more information and guidance on migrating your existing Identity store, see Migrate Authentication and Identity.\n\nSee Configuration for a sample that sets the minimum password requirements.\n\nAddDefaultIdentity was introduced in ASP.NET Core 2.1. Calling is similar to calling the following:\n\nSee AddDefaultIdentity source for more information.\n\nTo prevent publishing static Identity assets (stylesheets and JavaScript files for Identity UI) to the web root, add the following property and target to the app's project file:\n• How to work with Roles in ASP.NET Core Identity\n• See this GitHub issue for information on configuring Identity using SQLite.\n• Create an ASP.NET Core app with user data protected by authorization\n• Add, download, and delete user data to Identity in an ASP.NET Core project"
    },
    {
        "link": "https://medium.com/@ravipatel.it/a-beginners-guide-to-asp-net-core-identity-for-authentication-and-authorization-with-net-8-e6c8deb612f4",
        "document": "Let’s walk through the steps to integrate ASP.NET Core Identity into your .NET 8 web application for user authentication and authorization.\n\nStart by creating a new ASP.NET Core Web App using the .NET CLI or Visual Studio.\n\nIf your project doesn’t include Identity, you can install the required NuGet packages:\n\nThis package includes everything needed to work with ASP.NET Core Identity and Entity Framework for managing users and roles in a database.\n\nIn your file, you need to configure services for Identity:\n• AddDbContext configures the database using Entity Framework Core. The is the context class for Identity.\n• AddDefaultIdentity sets up the Identity services, including user registration, login, and roles.\n• UseAuthentication and UseAuthorization enable the app to authenticate users and authorize their actions.\n\nYou’ll need to define an class that integrates Identity with Entity Framework.\n\nThis class inherits from , which provides the necessary structure for Identity tables (like users, roles, and claims).\n\nTo save time, you can scaffold Identity pages like registration, login, and logout.\n\nIn Visual Studio, right-click on your project and select Add > New Scaffolded Item. Then, choose Identity and select the relevant pages (e.g., Register, Login, etc.).\n\nAlternatively, you can manually create your Razor Pages for login and registration.\n\nNow, let’s create the database that will store Identity information (like user credentials and roles).\n\nRun Entity Framework Core Migrations to set up the Identity schema in the database:\n\nThese commands will create all the necessary Identity tables in your database (such as , , , etc.)."
    },
    {
        "link": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social?view=aspnetcore-9.0",
        "document": "This tutorial demonstrates how to build an ASP.NET Core app that enables users to sign in using OAuth 2.0 with credentials from external authentication providers.\n\nFacebook, Twitter, Google, and Microsoft providers are covered in the following sections and use the starter project created in this article. Other providers are available in third-party packages such as OpenIddict, AspNet.Security.OAuth.Providers and AspNet.Security.OpenId.Providers.\n\nEnabling users to sign in with their existing credentials:\n• Is convenient for the users.\n• Shifts many of the complexities of managing the sign-in process onto a third party.\n• Run the app and select the Register link.\n• Enter the email and password for the new account, and then select Register.\n\nIf the app is deployed behind a proxy server or load balancer, some of the original request information might be forwarded to the app in request headers. This information usually includes the secure request scheme ( ), host, and client IP address. Apps don't automatically read these request headers to discover and use the original request information.\n\nThe scheme is used in link generation that affects the authentication flow with external providers. Losing the secure scheme ( ) results in the app generating incorrect insecure redirect URLs.\n\nUse Forwarded Headers Middleware to make the original request information available to the app for request processing.\n\nFor more information, see Configure ASP.NET Core to work with proxy servers and load balancers.\n\nUse SecretManager to store tokens assigned by login providers\n\nSocial login providers assign Application Id and Application Secret tokens during the registration process. The exact token names vary by provider. These tokens represent the credentials your app uses to access their API. The tokens constitute the \"user secrets\" that can be linked to your app configuration with the help of Secret Manager. User secrets are a more secure alternative to storing the tokens in a configuration file, such as .\n\nFollow the steps in Safe storage of app secrets in development in ASP.NET Core topic to store tokens assigned by each login provider below.\n\nUse the following topics to configure your application to use the respective providers:\n\nWhen the app requires multiple providers, chain the provider extension methods from AddAuthentication:\n\nWhen you register with an external login provider, you don't have a password registered with the app. This alleviates you from creating and remembering a password for the site, but it also makes you dependent on the external login provider. If the external login provider is unavailable, you won't be able to sign in to the web site.\n\nTo create a password and sign in using your email that you set during the sign in process with external providers:\n• Select the Hello <email alias> link at the top-right corner to navigate to the Manage view.\n• Set a valid password and you can use this to sign in with your email.\n• Sign in with Apple Example Integration\n• See this GitHub issue for information on how to customize the login buttons.\n• Persist additional data about the user and their access and refresh tokens. For more information, see Persist additional claims and tokens from external providers in ASP.NET Core."
    },
    {
        "link": "https://code-maze.com/user-registration-aspnet-core-identity",
        "document": "With ASP.NET Core Identity fully registered we can learn how to perform user registration actions in our project.\n\nUser registration is the process of registering users in our application by saving their credentials in the database. So, in this article, we are going to learn how to implement user registration actions in our project. Additionally, we are going to learn about different identity options that could help us in the process.\n\nTo navigate through the entire series, visit the ASP.NET Core Identity series page.\n\nIn this class, we have a couple of properties the user populates in the registration form. As you can see the and properties are required and the property must match the property.\n\nWith this in place, let’s create a new MVC controller with two actions inside:\n\nSo, we have the controller with two actions (GET and POST). We are going to use the first one to show the view and the second one for the user registration logic.\n\nWith that in place, let’s create a view for the GET Register action:\n\nSo basically, we have all the input fields from our model in this view. Of course, clicking the Create button will direct us to the POST Register method with the populated.\n\nNow, let’s install the AutoMapper library, so we could map the to the class:\n\nAfter we execute this command, AutoMapper will be installed. We are going to use it in a moment.\n\nWe’ve added a partial view, but we have to create it as well. To do that, let’s create a new view file in the folder:\n\nIf we start our application, we are going to see the link in the upper-right corner. After we click on it, the view will appear.\n\nTo start with the user registration logic, we have to inject our AutoMapper and UserManager class in the Account controller:\n\nThe class comes from the namespace and it provides a set of helper methods to help us manage a user in our application.\n\nBefore we continue, let’s register AutoMapper in the method in the class:\n\nIf you are using .NET 6 or later, the code is a bit different because we have to modify the Program class:\n\nNow, we can modify the action:\n\nAs you can see, the action is async now because the UserManager’s helper methods are async as well. Inside the action, we check for the model validity and if it is invalid, we just return the same view with the invalid model.\n\nIf that check passes, we map the registration model to the user.\n\nAdditionally, we use the method to register the user. But this method does more for us. It hashes a password, executes an additional user checks and returns a result.\n\nIf the result is successful, we just attach the default role to the user, again with the UserManager’s help, and redirect the user to the Index page.\n\nBut if the registration fails, we loop through all the errors and add them to the .\n\nFinally, we have to create the class:\n\nYou can see that we map email to the username because we are not using the username in the registration form.\n\nYou can see the model validation is working just fine. The method validates the password-related errors too.\n\nIf a user enters valid values in our form, the user registration process will complete successfully and they will be redirected to the Index page:\n\nNow, let’s dive a bit into the ASP.NET Core Identity configuration.\n\nAs you could see in the testing example, our user registration process requires a password to fulfill certain rules. These rules can be found and adjusted in the settings.\n\nRight now, the password requires at least 6 characters, upper and lower case letters, etc.\n\nLet’s play around a bit with these values.\n\nWe are going to modify the method in the method for .NET 5 and previous versions:\n\nIn .NET 6 and later, we have to modify the Program class:\n\nSo, we override the default password configuration by setting the required password length to 7 instead of 6 characters, which is the default value. Additionally, we state that digits and upper case letters are not required.\n\nIf we test this with the „test“ password:\n\nWe can see that there are no more alerts for digits and uppercase letters, and the required length is now 7 characters.\n\nIn our example, we are using an email as a user name. By default, email is not required to be unique, but we can change that:\n\nIf we try to register with an already registered email address:\n\nOf course, pay attention that showing a message like this to a user could be a potential security risk.\n\nThat’s because, if this is a user who tries to hack our account, we have just reviled this email that already exists in our system and allowed them to focus only on the passwords.\n\nA better solution would be to send an email message to the owner of this account, with the information that the account already exists.\n\nBy doing this, we don’t narrow down hacking possibilities for the malicious user and our regular user could proactively change the password or contact the system administrator to report a possible account breach.\n\nThere are a lot more settings we can play with, but for now, this is enough.\n\nIn articles to come, we are going to modify IdentityOptions settings even more. But feel free to explore it by yourself. As you can see, the names are pretty self-explanatory.\n\nIn the next article, we are going to learn about Login and Logout functionalities with ASP.NET Core Identity."
    },
    {
        "link": "https://stackoverflow.com/questions/75991569/how-to-login-with-either-username-or-email-in-an-asp-net-core-6-0",
        "document": "I am working on an ASP.NET Core 6.0 project. I have added the Identity library which added Razor pages.\n\nThe Register and Login work fine as long as the UserName and the Email are the same. However, I would like to have a UserName as a plain string and the email as a typical email and the user could log in with either the Username or the Email.\n\nI have customized the Register page wherein I collect both the UserName and Email. I don't see any sample code where it could be achieved. I see a few sample codes that don't collect the UserName from the user. Instead in the code, UserName is saved as the Email. Essentially both values will be identical."
    }
]