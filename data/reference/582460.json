[
    {
        "link": "https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/block/BlockPlaceEvent.html",
        "document": "Gets the value whether the player would be allowed to build here.\n\nGets the block that this block was placed against\n\nClarity method for getting the placed block.\n\nGets the BlockState for the block which was replaced.\n\nGets the hand which placed the block\n\nGets the item in the player's hand when they placed the block.\n\nGets the player who placed the block involved in this event.\n\nGets the cancellation state of this event.\n\nSets the canBuild state of this event.\n\nSets the cancellation state of this event."
    },
    {
        "link": "https://bukkit.org/threads/block-place-event.284990",
        "document": "Please replace the code you use to get the direction with the code I showed in my previous post, as yours won't work"
    },
    {
        "link": "https://bukkit.org/threads/solved-block-settype-material-and-blockplaceevent.75791",
        "document": "well, you would have to fire a new blockPlaceEvent every time you place a block, but that will cause a lot of problems, since you can't have a player to pass. You can try and find a way to have a virtual player, maybe?"
    },
    {
        "link": "https://helpch.at/docs/1.8/index.html?org/bukkit/event/block/BlockPlaceEvent.html",
        "document": "JavaScript is disabled on your browser.\n\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. Link to Non-frame version."
    },
    {
        "link": "https://bukkit.fandom.com/wiki/Event_API_Reference",
        "document": "Events are how the CraftBukkit server tells your plugin that something has happened in the world. Bukkit defines many events, in multiple categories; e.g. player actions (player logged in, player clicked a block, player died, player respawned...), block events (block placed, block broken, block's neighbour changed...), entity events (a mob targeted you, a creeper exploded...), world-wide events (a world loaded or unloaded, a chunk loaded or unloaded), and many more. Due to unknown reasons there is no longer any links to official Javadocs as they have all been taken off line.\n\nTo keep this section simple, we're going to only work with PlayerLoginEvent. Lets start with setting up the method\n\nIn order for your plugin to handle an event call, you need to create a method for it:\n\nBefore this method can be invoked by Bukkit when the \"PlayerLoginEvent\" is fired, we need to annotate it. We do this with EventHandlers.\n\nThe \"@EventHandler\" class is an Annotation, which goes just above your method. It looks like this:\n\nThis marks your method as an EventHandler with the EventPriority as NORMAL.\n\nThe EventHandler can take an EventPriority to specify the priority of the method, like so:\n\nHere's what it would look like in your class:\n\nIn order for Bukkit to be able to register your EventHandler's, the class which contains your event handling methods must implement the Listener (org.bukkit.event.Listener) interface, e.g.:\n\nThe name of the method (onLogin in the above example) does not matter; you may call the method anything you like inside your listener.\n\nYou may be wondering.. \"How does Bukkit know which event to listen to?\" It knows that by the event parameter you specify in the method's signature - in the above example: .\n\nYour main plugin class (i.e. the class which extends JavaPlugin) can also be an event listener, and this might make sense if your plugin is very small. E.g.:\n\nThe @EventHandler annotation can take parameters to further define how the event handler behaves. At the moment you can specify:\n\nThere are six priorities in Bukkit:\n\nEvery plugin gets a say in what happens, and every plugin must get a chance to know the outcome of an event. So, we pass events to plugins even after they've been cancelled. A plugin can actually uncancel an event after another plugin cancelled it. This is where priorities become really important. When changing values of an event the changes of one with the higher priority will override any changes done before by a listener with a lower priority so that in the end the one with the highest priority can have the final say in the actually outcome. To achieve this priority order listeners are called from the ones with the lowest to the ones with the highest priority. Any listener with the MONITOR priority is called last.\n\nIf you want to change the outcome of an event, choose very carefully from LOWEST to HIGHEST. Suggested generalized protection plugins on lowest, more specific plugins on normal, and override plugins on high.\n\nIf you want to act when an event happens, but not change the outcome, use MONITOR. It's really really important that you use MONITOR, or an event might get cancelled after you've acted on it, and it's even more important that you don't change the outcome of the event on MONITOR or it'll break other plugins.\n\nThe lowest priority listener is called to get its say in whether it should be cancelled or not. Then the low priority listener is called to see if it wants to override the lowest, etc. Eventually it hits monitor, and at this point nothing should change the outcome of the event. Monitor should be used to see the outcome of an event, without changing any aspect of it. If we have three plugins enabled; one is a basic area protection plugin, one is a fancy plugin using signs, and another is a logging plugin. The protection plugin listens on EventPriority.LOWEST. It says they can't place blocks in this area, and cancels the event. The fancy sign plugin listens on EventPriority.NORMAL. It says they can place signs here, and uncancels the event. The log plugin listens on EventPriority.MONITOR. It sees that the event was actually allowed, and logs it.\n\nTo register your methods, the class containing the EventHandler(s) must implement the Listener interface.\n\nYou only need to provide a plugin and a listener to register them in the PluginManager.\n\nThis listener contains two EventHandlers. One listening on HIGH, and one on NORMAL.\n\nThe registerEvents method requires a listener and a plugin. Luckily, we already have our LoginListener. Now for the LoginPlugin!\n\nYou could even have the events in the main class, for example:\n\nThere are many ways to register your events. Here's an example where you register them in your listener class.\n\nThe LoginPlugin would look like this:\n\nYou can un-register individual events, entire listener classes or all events registered by your plugin or even by other plugins!\n\nEach event class has the getHandlerList() static method, call that and then you can use .unregister() method. Example:\n\nNow you know why you'll need the getHandlerList() in your custom events.\n\nUsing the HandlerList class and its unregisterAll() static method you can easily unregister events from listener classes or plugins. Example:\n\nCreating custom events is very simple, you can use the same system that Bukkit uses without ruining performance.\n\nThere are two (2) things to keep in mind when you create a Custom Event. They are \"extend Event\" and \"static handlers.\" With static handlers, you must input the following code into your custom event:\n\nThis block of code makes the EventHandlers contained inside your own event, keeping any unrelated events completely separated.\n\nThe following example shows how easy it is to create your own \"CustomEvent.\"\n\nYou are in control of creating and calling your events, where you call it is completely up to you. Here's an example\n\nRemember: You are in control of your events. If you don't call it, and act upon it, it doesn't happen!\n\nHow do you listen to a custom event you say? Simple, the same way as listening to a normal event!\n\nIf you ever want to make your event cancellable, remember one thing: \"implements Cancellable.\" Just like you would import Listener. It's really that simple, let me show you an example!\n\nAfterwards, you would check if a plugin had cancelled the event in your code, before processing normally"
    },
    {
        "link": "https://bukkit.org/threads/tutorial-create-a-inventory-menu.173571",
        "document": "\n• None // The first parameter, is the inventory owner. I make it null to let everyone use it.\n• None //The second parameter, is the slots in a inventory. Must be a multiple of 9. Can be up to 54.\n• None //The third parameter, is the inventory name. This will accept chat colors.\n• None //The first parameter, is the slot that is assigned to. Starts counting at 0\n• None Player player Player event. // The player that clicked the item\n• None ItemStack clicked event. // The item that was clicked\n• None Inventory inventory event. // The inventory that was clicked in\n• None Player player Player event. // The player that clicked the item\n• None ItemStack clicked event. // The item that was clicked\n• None Inventory inventory event. // The inventory that was clicked in\n• None Player player Player event. // The player that clicked the item\n• None ItemStack clicked event. // The item that was clicked\n• None Inventory inventory event. // The inventory that was clicked in\n• None inventory. . myInventory. // The inventory is our custom Inventory\n• None clicked. Material. // The item that the player clicked it dirt\n• None event. // Make it so the dirt is back in its original spot"
    },
    {
        "link": "https://spigotmc.org/threads/best-practice-for-registering-listeners.215400",
        "document": ""
    },
    {
        "link": "https://bukkit.org/threads/help-instant-soup.128812",
        "document": "Also Instead of making a new JavaPlugin can I just make a new class add that? Link it with the main class?"
    },
    {
        "link": "https://spigotmc.org/threads/register-too-many-listeners.526932",
        "document": ""
    },
    {
        "link": "https://bukkit.org/threads/itemstacks-and-how-to-use-them.460216",
        "document": ": What is an ItemStack? ​\n\nNow, you might be asking: How can I give it more things? That's so boring mate!\n\n The answer is: We need to use an ItemMeta.\n\n\n\n\n\n Part III: What is an ItemMeta? ​\n\nAn ItemMeta is what holds the information of the ItemStack. ItemMetas can hold names, lores, enchantments, etc.\n\n ItemMetas are very easy to use, and that will be covered now.\n\n\n\n\n\n Part IV: Creating an ItemMeta & giving the ItemStack a custom name ​\n\nNote: Before getting into this part, I assume you know ArrayLists and how to use them. If you do not know what ArrayLists are, I suggest you to do so, to avoid the \"I don't know what I am doing, but it's working\".\n\n \n\n First, we will create an ArrayList to store the text in the lore in. To do so:\n\n Fantastic! We've just created an ArrayList. Now, we will need to add the lore. We will store them inside the ArrayList.\n\n You can add more than 1-line lore, just by repeating the above line and changing the text. First, we will create an ArrayList to store the text in the lore in. To do so:Fantastic! We've just created an ArrayList. Now, we will need to add the lore. We will store them inside the ArrayList.You can add more than 1-line lore, just by repeating the above line and changing the text.\n\n\n\n If you ever watched the Harry Potter movie, you'd know what does that mean xD\n\n\n\nItemStack, we give it to the ItemMeta.\n\n To do so, we use: \n\n Fantastic! Now the ItemStack has that lore. Beautiful, huh?\n\n Okay, all good now. There is a lore, but we did not give this lore to the ItemStack. We do not give it to the, we give it to theTo do so, we use:Fantastic! Now the ItemStack has that lore. Beautiful, huh?\n\n\n\n ItemStacks also give you the ability to add enchantments to them. Cool, don't you think so?\n• The method name is shorter\n• You don't need to check if the enchantment is safe or unsafe\n• Gives you the ability to use ItemFlags (those will be covered in further parts)\n\n\n\n Part VII: What is an ItemFlag and how to use it ​\n\n\n\n An ItemFlag is an addon to ItemMetas. ItemFlags give you the ability to hide specific flags in the ItemStack, such as:\n• Hide the enchantments of the ItemStack\n• None Hide the attributes of the ItemStack\n• None Hide the potion effects of the ItemStack\n• None More (can be found in Javadocs)\n\nAmazing! Now, we have finished the ItemStack and gave it a lot of nice things. But, where do we get this ItemStack from? Well, that's up to you! You can define this ItemStack wherever you want (in events/commands/methods), and then give it to the player."
    }
]