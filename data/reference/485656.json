[
    {
        "link": "https://dev.streamelements.com/docs/api-docs/775038fd4f4a9-stream-elements-custom-widgets",
        "document": ""
    },
    {
        "link": "https://docs.streamelements.com/overlays/custom-widget",
        "document": "This is the most powerful tool in SE Overlay editor. You can do a lot of things within this widget using HTML/CSS/JavaScript and accessing variables\n\nThis article requires you to have an Overlay created with a Custom Widget added there. To do so, follow the steps in the Before Starting article.\n\nThe Custom Code Editor is a powerful tool that allows you to write custom code in the Overlay Editor. For more information about the Custom Code Editor, please refer to the Widget Structure article.\n\nSE_API is a set of functions that provide access to various personalized features for custom widgets. You can check the ones available below:\n• .store - A key-value store where objects can be saved globally in a permanent way. The stored data is accessible to other custom widgets under the same account.\n• .counters - Retrieves the value of a specific counter.\n• .getOverlayStatus - Gets the status of the overlay.\n• .setField - Sets a value for . This does not save the value and works only in the Overlay Editor.\n\nStores an object in the database under the specified keyName ( can be any alphanumeric string).\n\nNote 1: Setting a value will completely overwrite any existing data stored under the same key. Ensure you send the full object, as partial updates are not supported.\n\nNote 2: Keys cannot be removed once created. You can update their values as often as needed, but deletion is not possible so far.\n\nIt emits an event for every custom widget. Example payload:\n\nRetrieves the contents stored under the specified \"keyName\" key. The returned obj is the full object stored in the database.\n\nGets the value of a counter. Your counters can be found at https://streamelements.com/dashboard/bot/counters\n\nFor example, if you have a counter named \"test\" with a value of \"15\":\n\nFor example, if the word \"vulgarWord\" is marked as a bad word (configured in Tipping Settings) and the filter is set to \"Replace bad words with emotes\":\n\nSets a value for . It works only in the Overlay Editor itself and does not save the value. The third parameter is an optional boolean that indicates whether the overlay should be reloaded after the value is set. The default is true.\n\nThe property defines the maximum event queue hold time (execution time of widget) by widget in seconds (default is 0). For example, if you want to show animations by this widget and don’t want them to overlap, instead of building your own queue, you can use this. This property is defined in JSON (as mentioned above). Premature queue resume can be called by\n\nThe best way to explain this is through an example:"
    },
    {
        "link": "https://docs.streamelements.com/overlays/custom-widget-events",
        "document": "Widget receives few types of native events during lifetime. They are:\n• onWidgetLoad - Triggers when the widget is loaded or refreshed.\n• onEventReceived - Triggers on every event like a chat message, new tip, new follower, subscriber, etc.\n• onSessionUpdate - Similar to , but it handles session events, like latest subscriber, goals, etc. Does not include chat messages.\n\nEvent received upon widget is loaded. Contains information about fieldData (fields values), channel information (including apiKey) and session data.\n\nIn this scope has every information you could need to use. For better readibility, Let’s assign it:\n• - An array of top tip in past week\n• - An array of top tip in past month\n• - An array of top tip all time\n• - An array of top tipper since session start\n• - An array of top tip in past week\n• - An array of top tip in past month\n• - An array of top tip all time\n• - Sum of all donations since session start\n• - Sum of all donations this week\n• - Sum of all donations this month\n• - Sum of all donations this all time\n• - an array of\n• - Name of latest sub\n• - If it was a gift, here’s a gifter\n• - If it was a gift, here’s a gifted\n• an array of\n• - Name of latest new sub\n• - Number of new subs during session\n• - Subscriber points (used for unlocking additional channel emotes - more info on Twitch Partner Emoticon Guide)\n• - Number of viewers in latest host (can be 0)\n• - An array of top cheer in past week\n• - An array of top cheer in past month\n• - An array of top cheer all time\n• - An array of top cheerer since session start\n• - An array of top cheerer in past week\n• - An array of top cheerer in past month\n• - An array of top cheer all time\n\nOBS: Youtube member is used to be called sponsor, that's the reason the key is called \"sponsor\"\n• - An array of latest member events with each element structure as in\n• - An array of latest superchat events with each element structure as in\n\nThere is a difference between:\n\nstands for cumulative amount of all events by this user.\n\nExample for better understanding:\n\nThen calling each scope will result:\n\nRecent events: You can access recent events of each type by calling:\n\nEach of them is an array (number indexes 0-24), and every subarray contains:\n\nDepending on type there can be also:\n\nThere is also a list in chronological order of last 25 events (so if you want to make list of all events - use this one) - variable initialized one line after variable .\n\nIt is an array of elements (each of them is array) with the same elements as in The last element of is currency, which contains:\n• - currency name (for example \"U.S. Dollar)\n\nIn the example above you have obj forwarded to that function, which has two interesting scopes within :\n• : Will provide you information about event type. This value is a string. Possible values:\n• : Will provide you information about event details. It contains few keys. For events it is:\n• - if this is a gift event for viewer\n• - if it was a gift, a gifter (for community and single gifts)\n• - if it is INITIAL event of community gift ( )\n• - if it is one of community gifts train ( ${event.sender} gifted ${event.name} a sub as part of random giveaway! )\n• - if the event was played as part of \"cumulative sub bomb alert\"\n• there is also for donations, you can use it (if initialized by ). For example:\n\nSo expanding our sample code above you can have\n\nFor message events, there is an additional object that's accessible at , which looks like this:\n\nEvery emote displayed on chat is within array of objects with start/end index of you can replace with image NOTE: if you are creating chat widget, remember to store and of each message (for example ) for message deletion events handling.\n\nWhen user message is removed by channel moderator there is an event emited either:\n• - with msgId of message to be removed\n• - with userId of user whose messages have to be removed This functionality is to prevent abusive content displayed in chat widget.\n\nContains two elements counter name ( ) and current value ( )\n\nContains two elements - field name ( ) and value ( ). Example below will send simplified event to test your chat widget\n\nThis event is triggered every time a session data is updated (new tip/cheer/follower), basically most of the scenarios can be covered by , but provides a lot of more data you can use. The biggest advantage of using this is that you can check if top donator (not donation) changed. Also it is the recommended option for goal widgets.\n\nis the same as in so every property is listed in section above."
    },
    {
        "link": "https://support.getgrist.com/widget-custom",
        "document": "The Custom widget allows a user to insert almost anything in their document. To create a custom widget currently requires knowledge of web development, and access to a public web server (for example, GitHub Pages).\n\nA good use for custom widgets is to view records or tables in new ways. Using Grist as your data model and modern HTML/CSS/JS as your view is very powerful.\n\nTo demonstrate to a web developer how custom widgets work, there is a minimal working example at:\n\nThe example shows a table with some random data (names for pets), and two custom widgets, one showing the selected row in the table as JSON, and the other showing all rows of the table as JSON. If you change data in the table, or move the cursor, the custom widgets update as appropriate.\n\nThe source code for the widgets is at:\n\nIt is stripped down to the essentials. Here is the full source code of the widget that shows one row of data:\n\nThe “Grist” parts of this are:\n• Including to get the Grist API.\n• Calling to let Grist know the widget is ready to go.\n• Calling to subscribe to the current row of the table.\n\nAfter that, everything else is regular HTML/CSS/JS. Once you have data coming in, you can render it any way you like, using React, Vue.js, or your favorite framework. For example, you could render records as a printable invoice, or use some obscure chart format that Grist doesn’t currently support.\n\nTo add a custom widget that reads from a table, click on , then . Then:\n• For choose to get a Custom Widget.\n• For choose the table you want the widget to read data from.\n• Optionally, choose to control the selected data further (read Linking Page Widgets for the possibilities).\n\nThe custom widget is initially blank. To configure it, click the three-dots button on the top right of the custom widget, and select “Widget options”.\n\nIn the settings section where it says , put the link to your custom widget. Here is a test widget to simply show table data in JSON:\n\nAnd here’s one to show the selected row only (make sure “Select By” is set for the custom widget):\n\nWhen you put a link to a custom webpage it will be immediately rendered inside the section. Now you have the option to grant that webpage access to data in your document. The following access levels are available:\n• No document access: the webpage is shown in the widget, but it has no access to the Grist document containing the widget.\n• Read selected table: the webpage is shown in the widget, and is given read access to the table the widget is configured to select data from.\n• Full document access: the webpage is shown in the widget, and has full access to read and modify the Grist document containing the widget.\n\nThe webpage should be owned and controlled by you or someone you trust. With permissions, a widget could send the data it accesses to a third party. With permissions, a widget could send all the document data to a third party, and modify your document in any way.\n\nIf you are writing your own custom widget you can specify what access level it needs as part of the initial ready message. Possible values are: , and .\n\nThis directs Grist to request the desired access level from the user. Your widget will be reloaded with the appropriate access level if the user approves the request.\n\nIf you wish to get notified of the access level, you can subscribe to the event that is sent to the widget after it tells Grist it is ready:\n\nFor now, just skip the parameter (it will be described in Widget options section). The current access level is part of the second parameter, which describes how Grist will interact with your widget.\n\nThe minimal example above showed records as plain JSON, but the widget can get as fancy as you like. Here is an example of showing a record as a printable invoice:\n\nYou can read the details of how to use this widget in our Invoice preparation example. The invoice widget is hosted at:\n\nAnd the source HTML/CSS/JS can be browsed at:\n\nIt uses Vue.js and .\n\nAs you saw, writing a simple widget that uses data from a table is very easy. First, you need to tell Grist that you are ready and then subscribe to one of the available events: , or .\n\nLet’s say you want to build a custom widget that will show an image from a URL and optionally a single line of text below as the image title. You will need to read two values from two columns: and .\n\nYou could access those columns directly using literal column names in your script. Here is a complete example of widget source code that will do the job:\n\nWhen getting started, this is a good approach, but it has two significant drawbacks. Every time you rename a column, you will also have to change your widget’s source. Moreover, using this widget on a different table or sharing it with your friends can be difficult as column names might be different. To help with this, Grist offers the column mapping API.\n\nInstead of using column names directly, you can ask the user to pick which column to use as a and . The list of expected columns can be sent to Grist as part of the ready call:\n\nUsing this information, in the creator panel, Grist will hide the regular “Visible” columns section and display specialized column pickers.\n\nYour widget will receive this mapping configuration as part of or event in the second parameter. You can use this configuration to do the mappings yourself or use the helper function to do it for you.\n\nNow, if you rename one of the columns, the widget will still work. You can also use this widget in any other table or share with a friend, as it doesn’t depend on your table structure and can be easily configured.\n\nIn the configuration used above, we told Grist that all the columns are required, and the user can pick any column even if the column doesn’t contain a text value. To be more precise, we can include more options in the request. For example:\n\nThe setting is important for correct operation of the helper. This helper will return a mapped record only when all required (not optional) columns are picked.\n\nBy default Grist will allow the user to pick any type of column. To allow only a column of a specific type, you need to set a property. Here are all valid types:\n\nThe default value of is , so Grist will allow the user to pick any column type. You can also specify a list of types, for example . In that case, Grist will allow the user to pick any column that matches one of the types in the list.\n\nUse and fields to help your users understand what is the purpose of the column. The will be displayed just below the column name, and the will be used as a column label. Both are optional and you can put there any text you want.\n\nIf you need to map multiple columns (for example in a custom chart widget), you can use option. This will allow your users to pick a set of columns that will be returned as list of mapped table column names. The helper will then return an array of mapped column values in a single field.\n\nSuppose the user deletes a column or changes its type so that it will no longer match the type requested by the widget. In that case, Grist will automatically remove this column from the mapping.\n\nIf your widget needs to store some options, Grist offers a simple key-value storage API for you to use. Here are some JavaScript code snippets that show how to interact with this API:\n\nYou can experiment with this yourself. Here is a test widget that demonstrates how to use this API:\n\nWhen your widget saves or edits some options, the icon on top of the section gets highlighted in green. You can either apply those options to the widget or revert that modification.\n\nThis allows viewers (users with read-only access) or collaborators to configure your widget without overwriting original settings. This behavior should look familiar to you and others, as this works like sorting and filtering on table or card views.\n\nSaving current options you will apply them to the widget and make them available to others. Using this menu, you can also clear all options to revert the widget to its initial state. To do this, press the little trash icon and then .\n\nGrist will also trigger an event, every time the options are changed (or cleared). Here is how you can subscribe to this event.\n\nIf you are building your own widget, you generally should not read options directly (using ). A better pattern is to apply them all when they are changed. Using the handler will make your widget easier to change and understand later.\n\nThere is one more scenario to cover. Suppose your widget has some kind of custom configuration screen. In that case, you probably need some button or other UI element that the user can use to show it. This additional UI element will likely be rarely used by you or your collaborators, so it doesn’t make sense to show it all the time. To help with this, Grist offers an additional interaction option you can send as part of the ready message:\n\nThis will tell Grist to display an additional button in the creator panel and the section menu. When clicked, it will trigger your handler, which you can use to show your own custom configuration screen.\n\nCustom widgets can also be used as a source of linking (see Linking widgets). All you need to do is inform Grist that your widget supports linking by passing an additional option to the call (see Widget API):\n\nThis will enable the option in the widget configuration panel. Now you can use your widget to control the cursor position in linked widgets. To do this, you need to call the function:\n\nAdd a custom widget to your Grist document by adding a new widget to the page and selecting ‘Custom’ as your widget.\n\nAfter clicking the green ‘Add to Page’ button, you will be prompted to select from a list of premade widgets.\n\nYou also have the option to add your own widget using the Custom URL selection.\n\nMany premade custom widgets will require some configuration once added to your document. Click the green vertical bar in the upper-right corner of the page to open the Creator Panel. Under the ‘Custom’ tab, you will configure ‘Access Level’ and map any necessary columns. Note that the widget will prompt you to accept the required level of access.\n\nIt can also be useful to link your custom widget to an existing widget on the same page so it only shows data related to a single, selected record. When adding a widget to the page, be sure to ‘Select By’ your selector widget. Learn more about linking widgets.\n\nThe Advanced Charts custom widget gives you more power and flexibility than Grist’s built-in charts, offering a wide variety of chart types as well as increased control over styling and layout. It’s a version of Plotly’s Chart Studio, see their tutorials for more detailed help.\n\nYou’ll need to set the access level to ‘Full document access’.\n\nDon’t worry, the widget only reads data from the selected table, doesn’t send it to any servers, and doesn’t write or otherwise make changes back to your document.\n\nThis is what you should see:\n\nClick the big blue ‘+ Trace’ button to get started. This will add a panel like the following:\n\nClick ‘Scatter’ to choose a different chart type such as Bar or Line. Then click the X and Y dropdowns to select the columns you want to plot.\n\nYou can add multiple traces to overlay different plots. Try different panels from the sidebar to customize the chart further. For example, go to Style > Axes > Titles to add a label to each axis. See the chart studio tutorials to learn more.\n\nAs you customize the widget, remember to regularly click the ‘Save’ button above the widget to keep your configuration.\n\nCopy to clipboard copies a value from the specified column of the selected record. When configuring the widget, you will need to select which column you wish to copy data from.\n\nNote that you can also copy data from a selected cell by using the keyboard shortcut on Windows or on Mac. To paste, use or .\n\nYou can find an example of the copy to clipboard button in our Webinar 7 (Custom Widgets) template. You can also watch a video walkthrough from our Custom Widgets Webinar.\n\nWith this widget, it’s useful to link it to another widget on the page. When selecting the data table that contains the dropbox links, be sure to ‘Select By’ that same table.\n\nTo configure, allow access to read the selected table. Then, under ‘Dropbox Link’, select the column that contains your dropbox links.\n\nYou can create links to folders or specific files in Dropbox. Click ‘Share’ then set permissions for the link. You can choose to allow anyone with the link to view or edit. Create, then copy the link. Paste this link into your Dropbox Link column in Grist. Note that users cannot edit directly in the custom widget even if edit permissions are granted. To edit, select the object in the Dropbox Embedder and it will open in a new tab where it can be edited directly in Dropbox.\n\nYou can check out an example of the Dropbox Embedder in our Hurricane Preparedness template.\n\nEmbed videos from online sources like YouTube, Vimeo, Facebook Video, Google Drive and more.\n\nYou will need to add a new column in your table to store your video URLs. Select this column under the ‘URL’ dropdown when configuring your custom widget.\n\nFor most online videos, including YouTube videos and videos stored on Google Drive, you can simply click the ‘Share’ option and copy the URL.\n\nFor some other videos, you may see this error:\n\nIf this happens, you’ll need to take the URL from the Embed code.\n\nAfter clicking the share option on the video, click the option to ‘Embed’.\n\nThen, click to copy the code.\n\nThe code it gives you will look something like this:\n\nCopy the URL that is found between quotes following . The highlighted portion in the screenshot below is what you would copy for this particular Facebook video.\n\nPaste this URL into your URL column in Grist and the video will now appear in the Grist Video Player custom widget.\n\nFor text-editing widgets, check out our Markdown and Notepad custom widgets.\n\nYou will need a text column in your table where you will write the text and HTML formatting.\n\nWhen configuring your custom widget, allow access to read the selected table. Under ‘HTML’, select the text column that contains your HTML.\n\nYour HTML will be viewable in the custom widget.\n\nFor help on HTML formatting, check out this guide from W3 Schools: HTML Text Formatting\n\nYou can find an example of the HTML Viewer in our Webinar 7 (Custom Widgets) template. You can also watch a video walkthrough from our Custom Widgets Webinar.\n\nYour table will need to include a column to store the URL for your image.\n\nTo configure, allow access to read the selected table. Under ‘Image URL’, select the column that contains the URLs for your images.\n\nTo copy the URL for an image, right click on the photo then ‘Copy image address’. This copies the URL to your clipboard. Paste this URL into your specified column in Grist.\n\nAdditionally, you can add multiple images for a specific record by adding multiple image URLs, separated by a space or new line, into a single cell.\n\nPlease note that a comma will not work to separate the links.\n\nWhen multiple image URLs are present, the image viewer custom widget will function as a carousel. Click the arrows to view additional images.\n\nFor an example of the Image Viewer custom widget, check out our U.S. National Park Database, and add a park review while you’re there!\n\nYou can also check out our Meme Generator template for another great example.\n\nFor a video walkthrough, be sure to watch our Custom Widgets Webinar!\n\nThis widget lets you run custom Python code in JupyterLite, a version of JupyterLab running entirely in the browser. You can use the full custom widget plugin API and access or modify any data in the document (subject to Access Rules), unlocking nearly unlimited possibilities for advanced users.\n\nYou’ll be presented with a notebook where you can enter and run Python code, e.g:\n\nAfter typing code in a cell, click the play button or press Shift+Enter to run that cell.\n\nUnlike formulas, code isn’t saved automatically. You must press the usual ‘Save’ button above the widget (outside the notebook) to persist the code within your Grist document. On the other hand, changes to settings within the notebook (e.g. keyboard shortcuts) are saved in your browser’s local storage, so they’re not shared with other users of the document.\n\nA special object called is automatically available to use in Python code, which mirrors many common methods of the usual JS plugin API. Note that many of these methods are asynchronous, so you should use before calling them.\n• : returns the data of the table backing the notebook widget.\n• : returns a record of the table backing the notebook widget. If is specified, returns the record at that row. Otherwise, returns the record at the current cursor position in a widget linked to the notebook widget.\n• : returns the data of the specified table. Note that this differs from (even for the same table) in several ways:\n• The widget must have full document access.\n• All columns are included, whereas excludes columns that are hidden in the widget configuration.\n• All rows are included, whereas takes widget filters and ‘SELECT BY’ into account.\n• The data is not sorted according to the widget’s configuration.\n• The data is fetched from the server, so the method may be slower.\n• The values for reference columns are row IDs of the referenced table, whereas returns the values displayed based on the ‘SHOW COLUMN’ configuration.\n• : registers a callback function to run when the cursor moves in a widget linked to the notebook widget, i.e. the widget chosen from the “SELECT BY” dropdown in the Data section of the widget configuration. The callback function will be passed the record at the current cursor position. You can also use this as a decorator, i.e. .\n• : similar to , but runs when the source data of the widget changes. The callback function will be passed the same data as returned by .\n• : returns a class similar to the interface in the usual JS plugin API for performing CRUD-style operations on a table. See the plugin API documentation for details on the parameters. The class has the following methods:\n\nYou can also use for direct access to the plugin API, e.g. . This may return raw cell values which you can decode with .\n\nYou can use many (but not all) third-party libraries in your notebook such as . Many will be installed automatically when they’re imported. Others will require running in a cell, e.g. . Note that it’s and not as in a regular Jupyter notebook.\n\nThe custom map widget allows you to display locations using latitude and longitude coordinates. If your data is an address, rather than in lat-long format, Grist can convert the address into lat-long coordinates.\n\nIf using existing lat-long coordinates, you will need three columns; Name, Longitude and Latitude.\n\nIf using an address, you will need six columns; Name, Address, Geocode, Longitude, Latitude, and Geocoded Address.\n\nGeocode is a toggle type column that should be set to true for any record you wish to convert from address to lat-long coordinates to be shown on the map.\n\nIf you wish to convert all records, you can make Geocode a formula column with the formula = . This will mark all records as True.\n\nTo configure, set the appropriate access level for the widget.\n\nIf you already have lat-long coordinates, you can set your access level to Read selected table.\n\nIf you are using an address and that needs to be converted into lat-long coordinates, you will need to set your access level to Full document access because the widget needs permission to write to your document in order to add lat-long coordinates.\n\nMap all required columns. Note that Name, Longitude and Latitude are labeled as required. Geocode, Address and Geocoded Address are listed as optional. If you are using addresses and need Grist to convert these to lat-long coordinates, you must map all six columns.\n\nAfter mapping the necessary columns and selecting the appropriate Access Level, the map widget will populate.\n\nYou can configure the map to show only the selected location by clicking the ‘Open Configuration’ option in the creator panel. Then, uncheck ‘All Locations’. Click the green check mark at the top of the widget to save the updated configuration settings.\n\nCheck out our Mapping Locations template or our Crowdsourced List for two great examples!\n\nFor a video walkthrough, check out our Custom Widgets Webinar.\n\nThe Markdown custom widget allows you to format text using Markdown while displaying the formatted text in an editable widget.\n\nFor other text-editing widgets, check out our HTML and Notepad custom widgets.\n\nYou table will need to include a text column where your Markdown-formatted text will be stored.\n\nConfigure the Markdown custom widget by allowing Full document access. Because the widget is also an editor, it needs permission to write directly to the document.\n\nUnder ‘Content’, select the text column that contains Markdown formatting.\n\nAny Markdown formatting in the specified text column will apply and be viewable and editable in the custom widget.\n\nTo edit the text directly in the widget, click the edit icon. The text will revert to display Markdown syntax that can be edited directly in the widget. When in edit mode, the edit icon will be replaced with the save icon. Be sure to click the save icon to save any changes and return to viewing the formatted text.\n\nFor help on Markdown formatting, check out the Markdown Guide for basic syntax. This guide is also accessible in the Markdown widget by clicking the information icon at the top of the widget. The guide will open in a new tab of your browser for easy reference.\n\nYou can find an example of the Markdown editor in our Webinar 7 (Custom Widgets) template and check out this video walkthrough from our Custom Widgets Webinar.\n\nIf you prefer to see your text formatted directly in the table, you can use the Markdown cell format.\n\nThe Notepad custom widget allows you to format text using a rich text editor.\n\nFor other text-editing widgets, check out our HTML and Markdown custom widgets.\n\nThe underlying data table will need to include a column where the formatted text will be stored.\n\nWhen configuring, allow Full document access. Because the widget is also an editor, it needs permission to write to the document.\n\nUnder ‘Content’, select the column created to store the formatted text.\n\nIf the text column you chose under Content has existing text, that text will appear in the Notepad widget, ready to be formatted.\n\nUse any of the options shown here to format your text.\n\nAs you can see in the screenshot below, the code for the formatted text is not useful to see in your table. You will edit text directly in the Notepad widget so you can hide this column from your data table.\n\nCheck out our U.S. National Park Database or our 🛒 Grocery List + Meal Planner for two great Notepad examples!\n\nYou can also check out this video walkthrough from our Custom Widgets Webinar.\n\nThe Print Labels custom widget allows you to customize and print labels directly from Grist.\n\nYour table should include a column that will contain the text for the label. Optionally, you can add a second column to specify a label count, allowing you to print more than one of the same label without having to create duplicate records.\n\nTo configure, allow access to read the selected table. Under ‘Label’, select the column that contains the text to include on the labels. If you wish to print more than one of any labels, select the column that contains the number of labels for each record you wish to print.\n\nYou can select from standard sheet sizes under the dropdown in the upper left of the widget. Be sure to save any changes by clicking the green check mark at the upper right of the widget.\n\nTo leave any blank labels at the beginning of the sheet, click the settings icon then specify how many labels should be left blank. This is especially helpful if a portion of your label sheet has already been used. You can skip the used labels and begin printing on your first unused label.\n\nCheck out our Print Mailing Labels template and our Treasure Hunt template for two great examples!\n\nYou can also check out this video walkthrough from our Custom Widgets Webinar."
    },
    {
        "link": "https://reddit.com/r/learnjavascript/comments/1etskkw/my_streamelements_custom_widget_does_not",
        "document": "I am a Twitch streamer and I created a StreamElements Custom Widget which fetches my current follow count, updates my follow goal accordingly and should automatically update my current follow count when it changes. While the initialization of the widget functions perfectly, the automatic update when my current follow count changes does not unless I manually refresh the respective browser source in OBS (which is technically a re-initialization, not an update).\n\nHere is the respective JavaScript code:\n\nI would highly appreciate your support :)"
    },
    {
        "link": "https://expressjs.com/en/api.html",
        "document": "Creates an Express application. The function is a top-level function exported by the module.\n\nThe object conventionally denotes the Express application. Create it by calling the top-level function exported by the Express module:\n\nThe object has methods for\n• Routing HTTP requests; see for example, app.METHOD and app.param.\n\nIt also has settings (properties) that affect how the application behaves; for more information, see Application settings.\n\nAdd callback triggers to route parameters, where is the name of the parameter or an array of them, and is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order. If is an array, the trigger is registered for each parameter declared in it, in the order in which they are declared. Furthermore, for each declared parameter except the last one, a call to inside the callback will call the callback for the next declared parameter. For the last parameter, a call to will call the next middleware in place for the route currently being processed, just like it would if were just a string. For example, when is present in a route path, you may map user loading logic to automatically provide to the route, or perform validations on the parameter input. // try to get the user details from the User model and attach it to the request object Param callback functions are local to the router on which they are defined. They are not inherited by mounted apps or routers, nor are they triggered for route parameters inherited from parent routers. Hence, param callbacks defined on will be triggered only by route parameters defined on routes. All param callbacks will be called before any handler of any route in which the param occurs, and they will each be called only once in a request-response cycle, even if the parameter is matched in multiple routes, as shown in the following examples. On , the following is printed: CALLED ONLY ONCE although this matches and this matches too On , the following is printed: CALLED ONLY ONCE with 42 CALLED ONLY ONCE with 3 although this matches and this matches too The following section describes , which is deprecated as of v4.11.0. The behavior of the method can be altered entirely by passing only a function to . This function is a custom implementation of how should behave - it accepts two parameters and must return a middleware. The first parameter of this function is the name of the URL parameter that should be captured, the second parameter can be any JavaScript object which might be used for returning the middleware implementation. The middleware returned by the function decides the behavior of what happens when a URL parameter is captured. In this example, the signature is modified to . Instead of accepting a name and a callback, will now accept a name and a number. In this example, the signature remains the same, but instead of a middleware callback, a custom data type checking function has been defined to validate the data type of the user id. The ‘ ’ character can’t be used to capture a character in your capturing regexp. For example you can’t use to capture , use or instead (as in . // captures '1-a_6' and '543-az(ser\"-sder' but not '5-a s'\n\nThe object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on. In this documentation and by convention, the object is always referred to as (and the HTTP response is ) but its actual name is determined by the parameters to the callback function in which you’re working.\n\nBut you could just as well have:\n\nThe object is an enhanced version of Node’s own request object and supports all built-in fields and methods.\n\nThe object represents the HTTP response that an Express app sends when it gets an HTTP request.\n\nIn this documentation and by convention, the object is always referred to as (and the HTTP request is ) but its actual name is determined by the parameters to the callback function in which you’re working.\n\nBut you could just as well have:\n\nThe object is an enhanced version of Node’s own response object and supports all built-in fields and methods."
    },
    {
        "link": "https://expressjs.com/en/4x/api.html",
        "document": "Creates an Express application. The function is a top-level function exported by the module.\n\nThe object conventionally denotes the Express application. Create it by calling the top-level function exported by the Express module:\n\nThe object has methods for\n• Routing HTTP requests; see for example, app.METHOD and app.param.\n\nIt also has settings (properties) that affect how the application behaves; for more information, see Application settings.\n\nAdd callback triggers to route parameters, where is the name of the parameter or an array of them, and is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order. If is an array, the trigger is registered for each parameter declared in it, in the order in which they are declared. Furthermore, for each declared parameter except the last one, a call to inside the callback will call the callback for the next declared parameter. For the last parameter, a call to will call the next middleware in place for the route currently being processed, just like it would if were just a string. For example, when is present in a route path, you may map user loading logic to automatically provide to the route, or perform validations on the parameter input. // try to get the user details from the User model and attach it to the request object Param callback functions are local to the router on which they are defined. They are not inherited by mounted apps or routers, nor are they triggered for route parameters inherited from parent routers. Hence, param callbacks defined on will be triggered only by route parameters defined on routes. All param callbacks will be called before any handler of any route in which the param occurs, and they will each be called only once in a request-response cycle, even if the parameter is matched in multiple routes, as shown in the following examples. On , the following is printed: CALLED ONLY ONCE although this matches and this matches too On , the following is printed: CALLED ONLY ONCE with 42 CALLED ONLY ONCE with 3 although this matches and this matches too The following section describes , which is deprecated as of v4.11.0. The behavior of the method can be altered entirely by passing only a function to . This function is a custom implementation of how should behave - it accepts two parameters and must return a middleware. The first parameter of this function is the name of the URL parameter that should be captured, the second parameter can be any JavaScript object which might be used for returning the middleware implementation. The middleware returned by the function decides the behavior of what happens when a URL parameter is captured. In this example, the signature is modified to . Instead of accepting a name and a callback, will now accept a name and a number. In this example, the signature remains the same, but instead of a middleware callback, a custom data type checking function has been defined to validate the data type of the user id. The ‘ ’ character can’t be used to capture a character in your capturing regexp. For example you can’t use to capture , use or instead (as in . // captures '1-a_6' and '543-az(ser\"-sder' but not '5-a s'\n\nThe object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on. In this documentation and by convention, the object is always referred to as (and the HTTP response is ) but its actual name is determined by the parameters to the callback function in which you’re working.\n\nBut you could just as well have:\n\nThe object is an enhanced version of Node’s own request object and supports all built-in fields and methods.\n\nThe object represents the HTTP response that an Express app sends when it gets an HTTP request.\n\nIn this documentation and by convention, the object is always referred to as (and the HTTP request is ) but its actual name is determined by the parameters to the callback function in which you’re working.\n\nBut you could just as well have:\n\nThe object is an enhanced version of Node’s own response object and supports all built-in fields and methods."
    },
    {
        "link": "https://expressjs.com.cn/4x/api.html",
        "document": ""
    },
    {
        "link": "https://expressjs.com/en/guide/routing.html",
        "document": "Routing refers to how an application’s endpoints (URIs) respond to client requests. For an introduction to routing, see Basic routing.\n\nYou define routing using methods of the Express object that correspond to HTTP methods; for example, to handle GET requests and to handle POST requests. For a full list, see app.METHOD. You can also use app.all() to handle all HTTP methods and app.use() to specify middleware as the callback function (See Using middleware for details).\n\nThese routing methods specify a callback function (sometimes called “handler functions”) called when the application receives a request to the specified route (endpoint) and HTTP method. In other words, the application “listens” for requests that match the specified route(s) and method(s), and when it detects a match, it calls the specified callback function.\n\nIn fact, the routing methods can have more than one callback function as arguments. With multiple callback functions, it is important to provide as an argument to the callback function and then call within the body of the function to hand off control to the next callback.\n\nThe following code is an example of a very basic route.\n\nA route method is derived from one of the HTTP methods, and is attached to an instance of the class.\n\nThe following code is an example of routes that are defined for the and the methods to the root of the app.\n\nExpress supports methods that correspond to all HTTP request methods: , , and so on. For a full list, see app.METHOD.\n\nThere is a special routing method, , used to load middleware functions at a path for all HTTP request methods. For example, the following handler is executed for requests to the route whether using , , , , or any other HTTP request method supported in the http module.\n\nRoute paths, in combination with a request method, define the endpoints at which requests can be made. Route paths can be strings, string patterns, or regular expressions.\n\nThis route path will match requests to the root route, .\n\nThis route path will match requests to .\n\nThis route path will match requests to .\n\nThis route path will match and .\n\nThis route path will match , , , and so on.\n\nThis route path will match , , , , and so on.\n\nThis route path will match and .\n\nThis route path will match anything with an “a” in it.\n\nThis route path will match and , but not , , and so on.\n\nRoute parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the object, with the name of the route parameter specified in the path as their respective keys.\n\nTo define routes with route parameters, simply specify the route parameters in the path of the route as shown below.\n\nSince the hyphen ( ) and the dot ( ) are interpreted literally, they can be used along with route parameters for useful purposes.\n\nTo have more control over the exact string that can be matched by a route parameter, you can append a regular expression in parentheses ( ):\n\nYou can provide multiple callback functions that behave like middleware to handle a request. The only exception is that these callbacks might invoke to bypass the remaining route callbacks. You can use this mechanism to impose pre-conditions on a route, then pass control to subsequent routes if there’s no reason to proceed with the current route.\n\nRoute handlers can be in the form of a function, an array of functions, or combinations of both, as shown in the following examples.\n\nA single callback function can handle a route. For example:\n\nMore than one callback function can handle a route (make sure you specify the object). For example:\n\nAn array of callback functions can handle a route. For example:\n\nA combination of independent functions and arrays of functions can handle a route. For example:\n\nThe methods on the response object ( ) in the following table can send a response to the client, and terminate the request-response cycle. If none of these methods are called from a route handler, the client request will be left hanging.\n\nYou can create chainable route handlers for a route path by using . Because the path is specified at a single location, creating modular routes is helpful, as is reducing redundancy and typos. For more information about routes, see: Router() documentation.\n\nHere is an example of chained route handlers that are defined by using .\n\nUse the class to create modular, mountable route handlers. A instance is a complete middleware and routing system; for this reason, it is often referred to as a “mini-app”.\n\nThe following example creates a router as a module, loads a middleware function in it, defines some routes, and mounts the router module on a path in the main app.\n\nCreate a router file named in the app directory, with the following content:\n\nThen, load the router module in the app:\n\nThe app will now be able to handle requests to and , as well as call the middleware function that is specific to the route.\n\nBut if the parent route has path parameters, it will not be accessible by default from the sub-routes. To make it accessible, you will need to pass the option to the Router constructor reference."
    },
    {
        "link": "https://stackoverflow.com/questions/41701071/nodejs-express-defining-custom-routes",
        "document": "This is probably a really basic concept that I'm not understanding but in my NodeJS application I am trying to define a custom route.\n\nmy directory structure is as follows\n\nWhich I am happy with because I want to keep the routes and views in a 1 to 1 relationship because I will eventually end up with something like\n\nSo I don't want to end up with a /routes/index.js file with a hideous amount of routing code inside.\n\nIt seems to work while my app.js file is as follows\n\nAlthough I can see this is going to end up looking like\n\nSo I don't really want to have that many requires but doing it like the following doesn't seem to work and I'm not sure why"
    }
]