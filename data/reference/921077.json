[
    {
        "link": "https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html",
        "document": "In the Java programming language, arrays are objects (§4.3.1), are dynamically created, and may be assigned to variables of type (§4.3.2). All methods of class may be invoked on an array.\n\nAn array object contains a number of variables. The number of variables may be zero, in which case the array is said to be empty. The variables contained in an array have no names; instead they are referenced by array access expressions that use non-negative integer index values. These variables are called the components of the array. If an array has n components, we say n is the length of the array; the components of the array are referenced using integer indices from 0 to n - 1, inclusive.\n\nAll the components of an array have the same type, called the component type of the array. If the component type of an array is T, then the type of the array itself is written T .\n\nThe value of an array component of type is always an element of the float value set (§4.2.3); similarly, the value of an array component of type is always an element of the double value set. It is not permitted for the value of an array component of type to be an element of the float-extended-exponent value set that is not also an element of the float value set, nor for the value of an array component of type to be an element of the double-extended-exponent value set that is not also an element of the double value set.\n\nThe component type of an array may itself be an array type. The components of such an array may contain references to subarrays. If, starting from any array type, one considers its component type, and then (if that is also an array type) the component type of that type, and so on, eventually one must reach a component type that is not an array type; this is called the element type of the original array, and the components at this level of the data structure are called the elements of the original array.\n\nThere are some situations in which an element of an array can be an array: if the element type is or or , then some or all of the elements may be arrays, because any array object can be assigned to any variable of these types.\n\nArray types are used in declarations and in cast expressions (§15.16). An array type is written as the name of an element type followed by some number of empty pairs of square brackets . The number of bracket pairs indicates the depth of array nesting. An array's length is not part of its type. The element type of an array may be any type, whether primitive or reference. In particular:\n• Arrays with an interface type as the element type are allowed. An element of such an array may have as its value a null reference or an instance of any type that implements the interface.\n• Arrays with an class type as the element type are allowed. An element of such an array may have as its value a null reference or an instance of any subclass of the class that is not itself . The supertypes of an array type are specified in §4.10.3. The direct superclass of an array type is . Every array type implements the interfaces and .\n\nA variable of array type holds a reference to an object. Declaring a variable of array type does not create an array object or allocate any space for array components. It creates only the variable itself, which can contain a reference to an array. However, the initializer part of a declarator (§8.3, §9.3, §14.4.1) may create an array, a reference to which then becomes the initial value of the variable. int[] ai; // array of int short[][] as; // array of array of short short s, // scalar short aas[][]; // array of array of short Object[] ao, // array of Object otherAo; // array of Object Collection<?>[] ca; // array of Collection of unknown type The declarations above do not create array objects. The following are examples of declarations of array variables that do create array objects: Exception ae[] = new Exception[3]; Object aao[][] = new Exception[2][3]; int[] factorial = { 1, 1, 2, 6, 24, 120, 720, 5040 }; char ac[] = { 'n', 'o', 't', ' ', 'a', ' ', 'S', 't', 'r', 'i', 'n', 'g' }; String[] aas = { \"array\", \"of\", \"String\", }; \n\n The may appear as part of the type at the beginning of the declaration, or as part of the declarator for a particular variable, or both. This declaration is equivalent to: In a variable declaration (§8.3, §8.4.1, §9.3, §14.14, §14.20) except for a variable arity parameter, the array type of a variable is denoted by the array type that appears at the beginning of the declaration, followed by any bracket pairs that follow the variable's Identifier in the declarator. For example, the local variable declaration: is equivalent to the series of declarations: Brackets are allowed in declarators as a nod to the tradition of C and C++. The general rules for variable declaration, however, permit brackets to appear on both the type and in declarators, so that the local variable declaration: is equivalent to the series of declarations: We do not recommend \"mixed notation\" in an array variable declaration, where brackets appear on both the type and in declarators. Once an array object is created, its length never changes. To make an array variable refer to an array of different length, a reference to a different array must be assigned to the variable. A single variable of array type may contain references to arrays of different lengths, because an array's length is not part of its type. If an array variable has type A , where A is a reference type, then can hold a reference to an instance of any array type B , provided B can be assigned to A (§5.2). This may result in a run-time exception on a later assignment; see §10.5 for a discussion.\n\nA component of an array is accessed by an array access expression (§15.13) that consists of an expression whose value is an array reference followed by an indexing expression enclosed by and , as in . All arrays are -origin. An array with length n can be indexed by the integers to n-1. class Gauss { public static void main(String[] args) { int[] ia = new int[101]; for (int i = 0; i < ia.length; i++) ia[i] = i; int sum = 0; for (int e : ia) sum += e; System.out.println(sum); } } The program declares a variable that has type array of , that is, . The variable is initialized to reference a newly created array object, created by an array creation expression (§15.10). The array creation expression specifies that the array should have components. The length of the array is available using the field , as shown. The program fills the array with the integers from to , sums these integers, and prints the result. \n\n Arrays must be indexed by values; , , or values may also be used as index values because they are subjected to unary numeric promotion (§5.6.1) and become values. An attempt to access an array component with a index value results in a compile-time error. All array accesses are checked at run time; an attempt to use an index that is less than zero or greater than or equal to the length of the array causes an to be thrown.\n\nFor an array whose type is A , where A is a reference type, an assignment to a component of the array is checked at run time to ensure that the value being assigned is assignable to the component. If the type of the value being assigned is not assignment-compatible (§5.2) with the component type, an is thrown. If the component type of an array were not reifiable (§4.7), the Java Virtual Machine could not perform the store check described in the preceding paragraph. This is why an array creation expression with a non-reifiable element type is forbidden (§15.10). One may declare a variable of an array type whose element type is non-reifiable, but assignment of the result of an array creation expression to the variable will necessarily cause an unchecked warning (§5.1.9). class Point { int x, y; } class ColoredPoint extends Point { int color; } class Test { public static void main(String[] args) { ColoredPoint[] cpa = new ColoredPoint[10]; Point[] pa = cpa; System.out.println(pa[1] == null); try { pa[0] = new Point(); } catch (ArrayStoreException e) { System.out.println(e); } } } The variable has type and the variable has as its value a reference to an object of type . A can be assigned to a ; therefore, the value of can be assigned to . A reference to this array , for example, testing whether is , will not result in a run-time type error. This is because the element of the array of type is a , and every can stand in for a , since is the superclass of . On the other hand, an assignment to the array can result in a run-time error. At compile time, an assignment to an element of is checked to make sure that the value assigned is a . But since holds a reference to an array of , the assignment is valid only if the type of the value assigned at run time is, more specifically, a . The Java Virtual Machine checks for such a situation at run time to ensure that the assignment is valid; if not, an is thrown. \n\n\n\nAn array initializer may be specified in a declaration (§8.3, §9.3, §14.4), or as part of an array creation expression (§15.10), to create an array and provide some initial values. The following is repeated from §8.3 to make the presentation here clearer: An array initializer is written as a comma-separated list of expressions, enclosed by braces and . A trailing comma may appear after the last expression in an array initializer and is ignored. Each variable initializer must be assignment-compatible (§5.2) with the array's component type, or a compile-time error occurs. It is a compile-time error if the component type of the array being initialized is not reifiable (§4.7). The length of the array to be constructed is equal to the number of variable initializers immediately enclosed by the braces of the array initializer. Space is allocated for a new array of that length. If there is insufficient space to allocate the array, evaluation of the array initializer completes abruptly by throwing an . Otherwise, a one-dimensional array is created of the specified length, and each component of the array is initialized to its default value (§4.12.5). The variable initializers immediately enclosed by the braces of the array initializer are then executed from left to right in the textual order they occur in the source code. The n'th variable initializer specifies the value of the n-1'th array component. If execution of a variable initializer completes abruptly, then execution of the array initializer completes abruptly for the same reason. If all the variable initializer expressions complete normally, the array initializer completes normally, with the value of the newly initialized array. If the component type is an array type, then the variable initializer specifying a component may itself be an array initializer; that is, array initializers may be nested. In this case, execution of the nested array initializer constructs and initializes an array object by recursive application of the algorithm above, and assigns it to the component. before causing a in trying to index the second component of the array , which is a null reference."
    },
    {
        "link": "https://stackoverflow.com/questions/3426843/what-is-the-default-initialization-of-an-array-in-java",
        "document": "So I'm declaring and initializing an int array: ... will print to standard out. Also, if I do this: ... will print to standard out. So how is Java initializing my array by default? Is it safe to assume that the default initialization is setting the array indices to which would mean I don't have to loop through the array and initialize it?"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-initialize-an-array-in-java",
        "document": "An array in Java is a data structure used to store multiple values of the same data type. Each element in an array has a unique index value. It makes it easy to access individual elements. In an array, we have to declare its size first because the size of the array is fixed. In an array, we can store elements of different data types like integer, string, date, etc. In this article, we will discuss different ways to declare and initialize an array in Java.\n\nIn Java, an array is declared by specifying its data type, and identifier, and adding brackets to indicate it is an array.\n• None : The type of elements the array will hold (e.g.,\n• None : The name of an array.\n\nHere, size of the array is not mentioned because a reference of an array is created in the memory. It can be also known as a memory address of an array.\n\nAfter declaring an array we have to initialize it with values as we have to do it with other variables. In an array, we have to assign multiple values, so the initializing process is not as simple as variables. We will cover the different ways to initialize arrays below.\n\n1. Initialize an Array with a Fixed Size and Default Values\n\nIn Java, an array can be initialized by default values when the size of the array is declared with rectangular brackets [ ].\n\nWe can specify the size of an array at the time of initialization. When we created this way, each element gets a default value (0 for integers, for boolean, and for objects).\n\nWhen we know the values and we want to store it, we can initialize the array with specific values directly.\n\nAn array can also be initialized by using curly braces where we don’t have to declare the size of the array. All the non-default values are initialized in the curly braces which are separated by a comma.\n\nIn the above example, a string-type array is initialized with non-default values using curly braces.\n\nIn Java, we can also initialize an array with particular values. For that, we need to initialize each value one by one. But this method is only useful for small sizes of arrays not for arrays having large sizes. For large-size arrays, we have to use a loop to initialize non-default values.\n\nIn the above example, an integer type array of size 4 is declared and then 4 non-default values are initialized in it.\n\nWe can also use loops to initialize array elements with specific values. This method is specially useful for larger arrays.\n\nIf the size of the array is unknown but we want to fill it dynamically, we can initialize it first with a fixed size and add values later or use a data structure like . Some common operations are mentioned below:\n\nWe can access and manipulate array elements by referring to their index.\n\nWe can use the property to return the number of elements in an array.\n\nAn array can be initialized by using a stream interface. The interface in Java offers additional ways to initialize arrays with sequential or predefined values. Below are three instream interfaces that are used to initialize an integer type array.\n\nIt is used to initialize an array of integers within a given range.\n• None The first parameter is the starting element.\n• None And the second parameter defines the upper limit (exclusive).\n• None It means the array will include elements greater than or equal to the first parameter but less than the second one.\n\nIt creates an array within a range (inclusive of the end).\n\nIt directly initializes an array with specified values.\n\nBelow is a simple program demonstrating different ways of initializing an array."
    },
    {
        "link": "https://stackoverflow.com/questions/36312406/initializing-an-object-in-an-array-with-a-default-value-java",
        "document": "Is there a way to define a default value for an object in array to be initialized with?\n\nIn the same way that primitive types are initialized when declaring an array of them:\n\nI'd like to declare an array of objects of a type that I've defined, and have them automatically initialize in a similar fashion. I suppose this would mean I'd like to run for each index in the array (with the default constructor).\n\nI haven't been able to find anything relevant online, the closest I got was to use after initializing the array (which actually just creates one object and fills the array with pointers to it), or just using a loop to go over the array and initialize each cell.\n\nEDIT: I realized this is relevant not just to arrays, but for declaring objects in general and having them default to a value / initialize automatically."
    },
    {
        "link": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html",
        "document": "The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't take advantage of improvements introduced in later releases and might use technology no longer available. See Dev.java for updated tutorials taking advantage of the latest releases. See Java Language Changes for a summary of updated language features in Java SE 9 and subsequent releases. See JDK Release Notes for information about new features, enhancements, and removed or deprecated options for all JDK releases.\n\nAn array is a container object that holds a fixed number of values of a single type. The length of an array is established when the array is created. After creation, its length is fixed. You have seen an example of arrays already, in the method of the \"Hello World!\" application. This section discusses arrays in greater detail.\n\nEach item in an array is called an element, and each element is accessed by its numerical index. As shown in the preceding illustration, numbering begins with 0. The 9th element, for example, would therefore be accessed at index 8.\n\nThe following program, , creates an array of integers, puts some values in the array, and prints each value to standard output.\n\nThe output from this program is:\n\nIn a real-world programming situation, you would probably use one of the supported looping constructs to iterate through each element of the array, rather than write each line individually as in the preceding example. However, the example clearly illustrates the array syntax. You will learn about the various looping constructs ( , , and ) in the Control Flow section.\n\nDeclaring a Variable to Refer to an Array\n\nThe preceding program declares an array (named ) with the following line of code:\n\nLike declarations for variables of other types, an array declaration has two components: the array's type and the array's name. An array's type is written as , where is the data type of the contained elements; the brackets are special symbols indicating that this variable holds an array. The size of the array is not part of its type (which is why the brackets are empty). An array's name can be anything you want, provided that it follows the rules and conventions as previously discussed in the naming section. As with variables of other types, the declaration does not actually create an array; it simply tells the compiler that this variable will hold an array of the specified type.\n\nSimilarly, you can declare arrays of other types:\n\nYou can also place the brackets after the array's name:\n\nHowever, convention discourages this form; the brackets identify the array type and should appear with the type designation.\n\nOne way to create an array is with the operator. The next statement in the program allocates an array with enough memory for 10 integer elements and assigns the array to the variable.\n\nIf this statement is missing, then the compiler prints an error like the following, and compilation fails:\n\nThe next few lines assign values to each element of the array:\n\nEach array element is accessed by its numerical index:\n\nAlternatively, you can use the shortcut syntax to create and initialize an array:\n\nHere the length of the array is determined by the number of values provided between braces and separated by commas.\n\nYou can also declare an array of arrays (also known as a multidimensional array) by using two or more sets of brackets, such as . Each element, therefore, must be accessed by a corresponding number of index values.\n\nIn the Java programming language, a multidimensional array is an array whose components are themselves arrays. This is unlike arrays in C or Fortran. A consequence of this is that the rows are allowed to vary in length, as shown in the following program:\n\nThe output from this program is:\n\nFinally, you can use the built-in property to determine the size of any array. The following code prints the array's size to standard output:\n\nThe class has an method that you can use to efficiently copy data from one array into another:\n\nThe two arguments specify the array to copy from and the array to copy to. The three arguments specify the starting position in the source array, the starting position in the destination array, and the number of array elements to copy.\n\nThe following program, , declares an array of elements. It uses the method to copy a subsequence of array components into a second array:\n\nThe output from this program is:\n\nArrays are a powerful and useful concept used in programming. Java SE provides methods to perform some of the most common manipulations related to arrays. For instance, the example uses the method of the class instead of manually iterating through the elements of the source array and placing each one into the destination array. This is performed behind the scenes, enabling the developer to use just one line of code to call the method.\n\nFor your convenience, Java SE provides several methods for performing array manipulations (common tasks, such as copying, sorting and searching arrays) in the class. For instance, the previous example can be modified to use the method of the class, as you can see in the example. The difference is that using the method does not require you to create the destination array before calling the method, because the destination array is returned by the method:\n\nAs you can see, the output from this program is the same, although it requires fewer lines of code. Note that the second parameter of the method is the initial index of the range to be copied, inclusively, while the third parameter is the final index of the range to be copied, exclusively. In this example, the range to be copied does not include the array element at index 9 (which contains the string ).\n\nSome other useful operations provided by methods in the class are:\n• None Searching an array for a specific value to get the index at which it is placed (the method).\n• None Comparing two arrays to determine if they are equal or not (the method).\n• None Filling an array to place a specific value at each index (the method).\n• None Sorting an array into ascending order. This can be done either sequentially, using the method, or concurrently, using the method introduced in Java SE 8. Parallel sorting of large arrays on multiprocessor systems is faster than sequential array sorting.\n• None Creating a stream that uses an array as its source (the method). For example, the following statement prints the contents of the array in the same way as in the previous example: See Aggregate Operations for more information about streams.\n• None Converting an array to a string. The method converts each element of the array to a string, separates them with commas, then surrounds them with brackets. For example, the following statement converts the array to a string and prints it: This statement prints the following:"
    },
    {
        "link": "https://geeksforgeeks.org/array-index-out-of-bounds-exception-in-java",
        "document": "In Java, ArrayIndexOutOfBoundsException is a Runtime Exception thrown only at runtime. The Java Compiler does not check for this error during the compilation of a program. It occurs when we try to access the element out of the index we are allowed to, i.e. index >= size of the array.\n\nJava supports the creation and manipulation of arrays as a data structure. The index of an array is an integer value that has a value in the interval [0, n-1], where n is the size of the array. If a request for a negative or an index greater than or equal to the size of the array is made, then Java throws an ArrayIndexOutOfBounds Exception. This is unlike C/C++, where no index of the bound check is done.\n\nExample 1: Here, we are trying to access the index which is greater than or equal to the array length.\n\nHere if you carefully see, the array is of size 5. Therefore while accessing its element using for loop, the maximum index value can be 4, but in our program, it is going till 5 and thus the exception.\n\nExample 2: Here, we are trying to access the index of array which is negative.\n\nTo handle ArrayIndexOutOfBoundsException, make sure that index of array is within the valid range. You can also use the enhanced for-loop to automatically handle this exception.\n\nExample 1: Here, we are checking whether the index is valid or not by taking array length with in the index range i.e. [0, n-1]\n\nExample 2: Here, we are using enhanced for loop that automatically handles the accessing of array’s index\n\nExample 3: Consider enclosing your code inside a try-catch statement and manipulate the exception accordingly. As mentioned, Java won’t let you access an invalid index and will definitely throw an ArrayIndexOutOfBoundsException. However, we should be careful inside the block of the catch statement because if we don’t handle the exception appropriately, we may conceal it and thus, create a bug in your application.\n\nHere in the above example, you can see that till index 4 (value 5), the loop printed all the values, but as soon as we tried to access the a[5], the program threw an exception which is caught by the catch block, and it printed the “Exception Caught” statement."
    },
    {
        "link": "https://stackoverflow.com/questions/16467325/how-to-handle-arrayindexoutofboundsexception",
        "document": "I am getting from my . I get this exception, how to handle this exception so that i can avoid any integer which does not match my .\n\nFor instance if my Array Holds four items.\n\nIf my getting either -1 or any value greater than 3, how can i handle them."
    },
    {
        "link": "https://nkamphoa.com/how-to-fix-arrayindexoutofboundsexception-in-java",
        "document": "When dealing with arrays in Java, ArrayIndexOutOfBoundsException is an exception you’ll most probably encounter. In this article, you’ll learn how to fix this exception. You’ll also learn some best practices for avoiding the ArrayIndexOutOfBoundsException.\n\n2. What Java Says about ArrayIndexOutOfBoundsException\n\nAccording to the Javadoc, an ArrayIndexOutOfBoundsException is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.\n\nLet’s consider the following code which creates an integers array of size 5:\n\nArrays in Java are zero-indexed, meaning that the first element is at index 0 and the last element is at index . Any attempt to access an index out of this range will result in an ArrayIndexOutOfBoundsException.\n\nRunning the above code snippet will print the following to the console:\n\nTo fix the exception, you should make sure that the index is between 0 and 4 (which is 5 – 1).\n\nAlways ensure that the index of the element you are trying to access is within the range [0, yourArray.length – 1].\n\nWhen iterating an array using a loop, make sure that the start and end conditions of your loop are within the range of the array’s indexes.\n\nWhenever possible, prefer using the enhanced for-loop. This way, you don’t have to worry about index boundaries.\n\nIn this brief tutorial, you learned about the ArrayIndexOutOfBoundsException and how to fix it.\n\nYou can find the complete code of this article here in GitHub"
    },
    {
        "link": "https://fusion-reactor.com/blog/how-to-fix-an-array-index-out-of-bounds-exception-in-java",
        "document": "How to fix an Array Index Out Of Bounds Exception in Java\n\nIn this article, we will look at An Array Index Out Of Bounds Exception in Java, which is the common exception you might come across in a stack trace. An array Index Out Of Bounds Exception is thrown when a program attempts to access an element at an index that is outside the bounds of the array. This typically occurs when a program tries to access an element at an index that is less than 0 or greater than or equal to the length of the array.\n\nWhat causes an ArrayIndexOutOfBoundsException\n\nThis can happen if the index is negative or greater than or equal to the size of the array. It indicates that the program is trying to access an element at an index that does not exist. This can be caused by a bug in the code, such as a off-by-one error, or by user input that is not properly validated.\n\nHere is an example in Java\n\nIn this example, the array numbers has a length of 5, but the program is trying to access the element at index 5, which does not exist. The try block contains the code that may throw the exception and the catch block contains the code that will handle the exception if it is thrown. In this case, it will print the message “Error: Index is out of bounds.”\n\nIn this example, the variable index is assigned -1 and when we use it to access the element of the array, it will throw an exception because the index is negative and not valid.\n\nIt’s important to note that, this kind of exception can also be thrown when working with other Java collection classes like ArrayList, Vector, etc.\n\nHow to fix an ArrayIndexOutOfBoundsException\n\nThere are several ways to fix an ArrayIndexOutOfBoundsException:\n• Validate user input: If the exception is caused by user input, make sure to validate the input to ensure that it is within the valid range of indices for the array. For example, in the second example I provided above, you can check if the index is greater than or equal to 0 and less than the size of the array before trying to access the element.\n• Use a for loop with the size of the array: Instead of using a traditional for loop with a fixed number of iterations, you can use a for loop that iterates over the array based on its size. This way, the loop will not try to access an element that does not exist.\n• 3: Use a try-catch block: If you are unable to validate the input or change the loop, you can use a try-catch block to catch the exception and handle it in your code. For example, you can display an error message, or set a default value for the variable.try {\n\nIt’s also important to note that you should always check if the array is null before trying to access its elements. If you reference an array element that is out of bounds, it can cause a NullPointerException. Additionally, it’s good practice to always validate the user input and the index of the array before trying to access the elements to avoid this kind of exception."
    },
    {
        "link": "https://stackoverflow.com/questions/25936890/try-catch-arrayindexoutofboundsexception",
        "document": "My project consists of a little icon moving over a grid with dimensions 25 by 20. I know I can do this easily with a few if/else blocks, but I want to learn more about error handling.\n\nWhat I was thinking was using a try catch, but it doesn't catch the array index out of bounds exception or any at all: it does not return \"error\" or the positions, so it never goes to the catch block.\n\nI was thinking something like this pseudocode:"
    }
]