[
    {
        "link": "https://vuejs.org/guide/introduction",
        "document": "Vue (pronounced /vjuː/, like view) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.\n\nHere is a minimal example:\n\nThe above example demonstrates the two core features of Vue:\n• None Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.\n• None Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.\n\nYou may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.\n\nVue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:\n• Embedding as Web Components on any page\n• Targeting desktop, mobile, WebGL, and even the terminal\n\nIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.\n\nIf you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue.\n\nDespite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.\n\nIn most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as files, abbreviated as SFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:\n\nSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup. You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.\n\nVue components can be authored in two different API styles: Options API and Composition API.\n\nWith Options API, we define a component's logic using an object of options such as , , and . Properties defined by options are exposed on inside functions, which points to the component instance:\n\n// and will be exposed on `this`. // Methods are functions that mutate state and trigger updates. // They can be bound as event handlers in templates. // Lifecycle hooks are called at different stages // This function will be called when the component is mounted.\n\nTry it in the Playground\n\nWith Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with . The attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in are directly usable in the template.\n\nHere is the same component, with the exact same template, but using Composition API and instead:\n\nTry it in the Playground\n\nBoth API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.\n\nThe Options API is centered around the concept of a \"component instance\" ( as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.\n\nThe Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.\n\nYou can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ.\n\nIf you are new to Vue, here's our general recommendation:\n• None For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n• None\n• None Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n• None Go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nYou don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar.\n\nDifferent developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!"
    },
    {
        "link": "https://vuejs.org",
        "document": "Builds on top of standard HTML, CSS and JavaScript with intuitive API and world-class documentation."
    },
    {
        "link": "https://medium.com/@johnidouglasmarangon/my-journey-to-read-the-vue-js-3-official-documentation-0d2dd50f965c",
        "document": "What is Vue.js and Why You Should Use It\n\nVue.js 3 is a JavaScript framework designed to build user interfaces and single-page applications with a declarative, component-based approach. It extends standard HTML, CSS, and JavaScript by providing a flexible and efficient way to manage state, handle user interactions, and create reusable components.\n\nWhy Consider Learning and Using Vue.js 3?\n• Simplicity and Ease of Use: Vue.js has a gentle learning curve, making it accessible even to developers who are new to JavaScript frameworks.\n• Reactivity System: Vue's reactivity system automatically updates the DOM when the underlying data changes, minimizing the need for manual DOM manipulation.\n• Component-Based Architecture: Encourages code reusability and better organization by encapsulating functionality within components.\n• Performance Improvements: Vue.js 3 boasts significant performance enhancements over its predecessor, thanks to the new reactivity system and compiler optimizations.\n• TypeScript Support: Enhanced TypeScript integration for better type checking and tooling support.\n• Strong Community and Ecosystem: A rich collection of libraries, tools, and a supportive community make developing with Vue.js a delightful experience.\n\nWhether you’re building a small application or scaling a large enterprise solution, Vue.js 3 provides the tools and flexibility to meet your needs.\n\nTo get started with a new Vue.js 3 project, you can use Vite, a build tool that provides a fast and lean development experience.\n\nEnsure you have Node.js installed on your machine. Open you terminal and run:\n\nNavigate to the project directory, install dependencies, and run the development server:\n\nYour application will be accessible at .\n\nThe Composition API is a new way of building components in Vue.js 3, introduced as an alternative to the traditional Options API. Take a look at Composition API FAQ section to gain detailed understanding of the differences between both.\n\nHere is a basic example of using Composition API:\n• Function-based Syntax: Instead of defining methods, data, and lifecycle hooks in separate properties, the Composition API uses functions to organize logic.\n• Better Code Structure: It encourages a more modular and composable approach to building components.\n• Reusability: Functions can be extracted into reusable units called composables, making it easier to share logic across multiple components.\n\nAt the heart of Vue.js is its reactivity system, which allows the UI to automatically update when the underlying state changes. The Reactive API in Vue.js 3 provides functions to create reactive state:\n• : Used to make an entire object reactive.\n• : Used for primitive values or when you need a mutable reference to a single values.\n• : Creates a reactive value that automatically updates when its dependencies change.\n\nThese functions are used to respond to changes in reactive state. immediately executes and re-executes whenever its dependencies change. is more configurable, allowing you to specify exactly which data you’re watching and what to do when it changes.\n\nBoth and are reactivity APIs used to respond to reactive state changes. However, they work differently and have distinct use cases.\n\nSingle-File Components (SFCs) are files that encapsulate the template, logic, and styles of a component in a single file. This encapsulation promotes better organization and reusability.\n\nHere’s an example of an SFC in Composition API:\n• : Contains the HTML structure of the component.\n\nAS you can see, Vue Single-File Components (a.k.a. *.vue files) extend the classic trio combination of HTML, CSS, and Java Script.\n\nVue.js uses an HTML-based template syntax that allows you to declaratively bind data to the DOM. Vue.js template syntax is a declarative way to bind data to the DOM using a special syntax within HTML templates. It allows you to dynamically render content, handle events, and apply directives to manipulate the DOM efficiently.\n\nYou can embed dynamic content within double curly braces (mustache syntax) .\n\nDirective are special attributes with the prefix to apply dynamic behavior. Built-in directives include: , , , , , , , , , , , .\n\nCustom directives provide a way to directly manipulate the DOM when needed by adding specific behaviors to elements.\n\nComponents are the building blocks of Vue.js applications. They allow you to break down complex UIs into smaller, reusable pieces.\n\nHere’s an example of a Single File Component (SFC) Approach (Recommended)\n\nIf you want to register a component globally, it allows you to use anywhere in your app without explicitly importing it.\n• Reusability: Components can be reused across multiple parts of your application.\n• Modularity: They make your code more organized and easier to maintain.\n• Testability: Individual components can be tested in isolation.\n\nComposable components allow you to reuse logic across different components by creating custom composable functions. Example of a composable component for manage a counter:\n\nHow Components Can Communicate with Each Other?\n\nCommunication between components is essential in any application. Vue.js provides several mechanisms for passing data and events between components.\n\nProps are custom attributes you can register on a component. When a value is passed to a prop, it becomes a property on that component instance.\n\nChild components can emit events to send information back to the parent.\n\nThe directive can create a two-way data binding between parent and child components.\n\nThese functions allow ancestor components to provide data or methods that descendant components can inject, no matter how deep the component tree.\n\nVue.js provides for two-way data binding in forms making it easier work with form inputs.\n\nLet’s create an example of fetching data from an external API using the API and display a list of todos.\n\nVue.js 3 allows you to create simple routing without external libraries. We can create a simple router using dynamic components to render different components based on the URL hash.\n\nEmbarking on my journey through the Vue.js 3 official documentation was incredible. Whether you're new to JavaScript frameworks or looking to expand your toolkit, Vue.js 3 offers a blend of simplicity and sophistication features that caters to projects of any scale.\n\nVue.js 3 has robust features, flexibility, and intuitive API make it a powerful tool for building modern web applications. It’s a powerful and versatile framework well worth exploring.\n\nI encourage you to dive into the official documentation and explore the endless possibilities Vue.js 3 has to offer. Hopefully, this post has inspired you to embark on your own Vue.js 3 learning adventure!"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Frameworks_libraries/Vue_getting_started",
        "document": "Now let's introduce Vue, the third of our frameworks. In this article we'll look at a little bit of Vue background, learn how to install it and create a new project, study the high-level structure of the whole project and an individual component, see how to run the project locally, and get it prepared to start building our example. Familiarity with the core HTML, CSS, and JavaScript languages, knowledge of the terminal/command line. Vue components are written as a combination of JavaScript objects that manage the app's data and an HTML-based template syntax that maps to the underlying DOM structure. For installation, and to use some of the more advanced features of Vue (like Single File Components or render functions), you'll need a terminal with node + npm installed. To setup a local Vue development environment, create a starter app, and understand the basics of how it works. Note: This tutorial targets Vue version 3.4.21 using 3.10.2 (with Node.js version ) and was last revised in May 2024.\n\nVue is a modern JavaScript framework that provides useful facilities for progressive enhancement — unlike many other frameworks, you can use Vue to enhance existing HTML. This lets you use Vue as a drop-in replacement for a library like jQuery. That being said, you can also use Vue to write entire Single Page Applications (SPAs). This allows you to create markup managed entirely by Vue, which can improve developer experience and performance when dealing with complex applications. It also allows you to take advantage of libraries for client-side routing and state management when you need to. Additionally, Vue takes a \"middle ground\" approach to tooling like client-side routing and state management. While the Vue core team maintains suggested libraries for these functions, they are not directly bundled into Vue. This allows you to select a different routing/state management library if they better fit your application. In addition to allowing you to progressively integrate Vue into your applications, Vue also provides a progressive approach to writing markup. Like most frameworks, Vue lets you create reusable blocks of markup via components. Most of the time, Vue components are written using a special HTML template syntax. When you need more control than the HTML syntax allows, you can write JSX or plain JavaScript functions to define your components. As you work through this tutorial, you might want to keep the Vue guide and API documentation open in other tabs, so you can refer to them if you want more information on any sub topic.\n\nTo use Vue in an existing site, you can drop one of the following elements onto a page. This allows you to start using Vue on existing sites, which is why Vue prides itself on being a progressive framework. This is a great option when migrating an existing project using a library like jQuery to Vue. With this method, you can use a lot of the core features of Vue, such as the attributes, custom components, and data-management.\n• Development Script (not optimized, but includes console warnings which is great for development.)\n• Production Script (Optimized version, minimal console warnings. It is recommended that you specify a version number when including Vue on your site so that any framework updates do not break your live site without you knowing.) However, this approach has some limitations. To build more complex apps, you'll want to use the Vue npm package. This will let you use advanced features of Vue and use tools like Vite or webpack. To make building apps with Vue easier, there is a CLI scaffolding tool create-vue to streamline the development process. To use you will need: Note: If you don't have the above installed, find out more about installing npm and Node.js here. To install Vue and initialize a new project, run the following command in your terminal: Or if you'd prefer to use yarn: This command will give you a list of project configurations you can use. There are a few defaults, but you may pick your own project-specific settings. These options let you configure things like TypeScript, linting, vue-router, testing, and more. We'll step through the options in the initialization steps below.\n\nTo explore various features of Vue, we will be building up a sample todo list app. We'll begin by using to build a new scaffold for our app. In terminal, to where you'd like to create your sample app, then run (or if you prefer Yarn). The interactive tool let's you choose some options and you can proceed by pressing . For this project, we'll use the following configuration: ✔ Project name: … todo-vue ✔ Add TypeScript? … No ✔ Add JSX Support? … No ✔ Add Vue Router for Single Page Application development? … No ✔ Add Pinia for state management? … No ✔ Add Vitest for Unit Testing? … No ✔ Add an End-to-End Testing Solution? › No ✔ Add ESLint for code quality? … Yes ? Add Prettier for code formatting? › Yes After choosing these options, your project structure is now configured and dependencies are defined in a file. The next steps are to install the dependencies and start the server, and the tool conveniently prints out the commands you need to do this: Scaffolding project in /path/to/todo-vue... Done. Now run: cd todo-vue npm install npm run format npm run dev\n\nIf everything went successfully, the CLI should have created a series of files and directories for your project. The most significant ones are as follows:\n• : This file contains the list of dependencies for your project, as well as some metadata and configuration.\n• : If you chose as your package manager, this file will be generated with a list of all the dependencies and sub-dependencies that your project needs.\n• : This is a config file for Visual Studio Code and gives context for VS Code on your project structure and assists auto-completion.\n• : This is the configuration file for the Vite development server that builds and serves your project on your local machine. The Vite server watches source files for changes and can hot-reload the project while you make changes.\n• : This directory contains static assets that are published during build.\n• : This is the favicon for your app. Currently, it's the Vue logo.\n• : Your Vue app is run from this HTML page.\n• : This directory contains the core of your Vue app.\n• : this is the entry point to your application. Currently, this file initializes your Vue application and signifies which HTML element in the file your app should be attached to. This file is often where you register global components or additional Vue libraries.\n• : this is the top-level component in your Vue app. See below for more explanation of Vue components.\n• : this directory is where you keep your components. Currently, it just has one example component.\n• : this directory is for storing static assets like CSS and images. Because these files are in the source directory, they can be processed by webpack. This means you can use pre-processors like Sass/SCSS or Stylus. Note: Depending on the options you select when creating a new project, there might be other directories present (for example, if you choose a router, you will also have a directory).\n\nLike in many front-end frameworks, components are a central part of building apps in Vue. These components let you break a large application into discrete building blocks that can be created and managed separately, and transfer data between each other as required. These small blocks can help you reason about and test your code. While some frameworks encourage you to separate your template, logic, and styling code into separate files, Vue takes the opposite approach. Using Single File Components (SFC), Vue lets you group your templates, corresponding script, and CSS all together in a single file ending in . These files are processed by a JS build tool (such as Vite or webpack), which means you can take advantage of build-time tooling in your project. This allows you to use tools like Babel, TypeScript, SCSS and more to create more sophisticated components. Let's look inside the folder in the project we created with the CLI and inspect your first file: .\n\nOpen your file — you'll see that it has three parts: , , and , which contain the component's template, scripting, and styling information. All Single File Components share this same basic structure. contains all the markup structure and display logic of your component. Your template can contain any valid HTML, as well as some Vue-specific syntax that we'll cover later. Note: By setting the attribute on the tag, you can use Pug template syntax instead of standard HTML — . We'll stick to standard HTML through this tutorial, but it is worth knowing that this is possible. contains all of the non-display logic of your component. Most importantly, your tag is where you locally register components, define component inputs (props), handle local state, define methods, and more. Your build step will process this object and transform it (with your template) into a Vue component with a function. In the case of , two components and are registered by means of imports. When you register a component in this way, you're registering it locally. Locally registered components can only be used inside the components that register them, so you need to import and register them in every component file that uses them. This is useful for Tree shaking (not loading unused code) and bundle splitting (only loading code when needed) because not every page in your app necessarily needs every component. Note: If you want to use TypeScript syntax, you need to set the attribute on the tag to signify to the compiler that you're using TypeScript — . is where you write your CSS for the component. If you add a attribute — — Vue will scope the styles to the contents of your SFC. This works similar to CSS-in-JS solutions, but allows you to just write plain CSS. Note: If you select a CSS pre-processor when creating the project via the CLI, you can add a attribute to the tag so that the contents can be processed at build time. For example, will allow you to use SCSS syntax in your styling information.\n\nThe tool comes with Vite as a built-in development server. This allows you to run your app locally so you can test it easily without needing to configure a server from scratch. The CLI adds commands to the project's file as npm scripts so you can easily run them. In your terminal, try running (or if you prefer yarn). Your terminal should output something like the following: VITE v5.0.11 ready in 312 ms ➜ Local: http://localhost:5173/ ➜ Network: use --host to expose ➜ press h + enter to show help If you navigate to the \"localhost\" address in a new browser tab you should see your app (this address should be as stated above, but may vary based on your setup). Right now, the app should contain a welcome message, a link to the Vue documentation, links to the plugins you added when you initialized the app with your CLI, and some other useful links to the Vue community and ecosystem."
    },
    {
        "link": "https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3",
        "document": "Building Real world Web Applications with Vue.js 3 This is the code repository for Building Real world Web Applications with Vue.js 3, published by Packt.\n\nThis book shows how you can leverage Vue to develop impressive apps quickly. You’ll discover various new tools and features in the Vue ecosystem, including Vitest and Vuetify, and use Vue 3 to develop web apps that interact well with APIs. This book covers the following exciting features:\n• Use VueRouter and manage state with Pinia\n\nIf you feel this book is for you, get your here today!\n\nAll of the files is organized into folders. For example, 01.\n\nFollowing is what you need for this book:\n\nThis book explores a project-based approach to help you develop the required skills to build real-world apps using Vue 3. Each project is designed to teach you the fundamental concepts of web development and how to apply them in practical ways. The projects are built with the help of step-by-step instructions with the complexity of projects increasing gradually as you progress.\n\nWith the following software and hardware list you can run all code files present in the book (Chapter 2-9).\n\nJoran Quinten's passion involves getting people to love technology and getting technology to play nice. With over a decade of experience in developing and designing software, he has built up a broad background in development and architecture. He loves sharing knowledge and has been invited to speak at several tech events. Joran graduated from Fontys University of Applied Sciences, Eindhoven in 2010. Currently, he works for Jumbo Supermarkten, a national grocery chain where he is the technical lead of the design system team and acts as an ambassador for the tech department. He is passionate about mentoring and coaching junior developers. Joran lives close to Eindhoven with his wife, son and daughter."
    },
    {
        "link": "https://tailwindcss.com/docs",
        "document": "Tailwind CSS works by scanning all of your HTML files, JavaScript components, and any other templates for class names, generating the corresponding styles and then writing them to a static CSS file.\n\nIt's fast, flexible, and reliable — with zero-runtime.\n\nInstalling Tailwind CSS as a Vite plugin is the most seamless way to integrate it with frameworks like Laravel, SvelteKit, React Router, Nuxt, and SolidJS. Add the plugin to your Vite configuration. Add an to your CSS file that imports Tailwind CSS. Run your build process with or whatever command is configured in your file. Start using Tailwind in your HTML Make sure your compiled CSS is included in the (your framework might handle this for you), then start using Tailwind’s utility classes to style your content. Are you stuck? Setting up Tailwind with Vite can be a bit different across different build tools. Check our framework guides to see if we have more specific instructions for your particular setup."
    },
    {
        "link": "https://tailwindcss.com/docs/installation/framework-guides",
        "document": "Tailwind CSS works by scanning all of your HTML files, JavaScript components, and any other templates for class names, generating the corresponding styles and then writing them to a static CSS file.\n\nIt's fast, flexible, and reliable — with zero-runtime."
    },
    {
        "link": "https://v3.tailwindcss.com/docs/installation",
        "document": "Tailwind CSS works by scanning all of your HTML files, JavaScript components, and any other templates for class names, generating the corresponding styles and then writing them to a static CSS file.\n\nIt's fast, flexible, and reliable — with zero-runtime."
    },
    {
        "link": "https://htmlallthethings.com/blog-posts/how-to-get-started-with-tailwindcss",
        "document": "Tired of spending hours writing and managing custom CSS? Wish there was a faster way to get your project shipped? That’s where CSS frameworks like Tailwind CSS can make a difference.\n\nTailwind CSS is a utility-first CSS framework to quickly and consistently help you build applications. Let’s go over some of the reasons why this popular framework might be a good fit for your project.\n• How do you install Tailwind CSS?\n\nTailwind CSS is a utility-first CSS framework. What does that mean? Utility classes are dedicated classes that can be added to html elements. Each utility class does something specific such as changing background colors, adjusting margins, increasing padding, and so on. For example, in Tailwind I can use “text-3xl” to change the font size or “underline” to add an underline to my <h1>. It’s that simple!\n\nAlternatively, Bootstrap uses pre-designed components that help speed up development time and make it easy to use for beginners. It’s a great option if you’re looking to build fast without spending hours on styling.\n\nFor example, in Bootstrap, I can create a button just by starting with the “btn” class and then styling with the class btn-primary to make it blue. In the example below, I also used ms-5 to add a margin to the left side of the button and mt-2 to add a margin to the top of the button. For a closer look at what’s possible, you can read through the Bootstrap documentation for a more in depth explanation.\n\nAs you can see, Bootstrap’s component-based approach is different from Tailwind’s utility-first approach. Tailwind doesn’t come out of the box with components like buttons and navbars, instead you’re responsible for developing that yourself with Tailwind’s library of utility classes.\n\nTailwind comes with an extensive library of utility classes that allow developers to get up and running with their CSS quickly. Familiarizing yourself with the utility classes can be a learning curve but the documentation will be your best friend as you start building with this framework. \n\n\n\nIf the official documentation is overwhelming, try searching for Tailwind cheat sheets. Flowbite’s Tailwind CSS Cheat Sheet and Nerdcave’s Tailwind Cheat Sheet are two that I’ve been playing around with recently. I like how these one-page resources are less cluttered than the official docs and focus solely on classes. These aren’t the only cheat sheets so definitely do your own research and find what’s best for you.\n\nFrameworks like Tailwind come with many benefits such as:\n\nTailwind comes out of the box with a vast library of utility classes that already have predefined names. That means worrying about a naming structure is taken off your plate and frees you up to focus on other areas of your application.\n\nIf you use Visual Studio Code, there’s an extension called Tailwind CSS IntelliSense that comes with features such as autocomplete and linting. It also comes with a hover preview that shows you the CSS behind the Tailwind class name. For example, looking back at the first example, if I wanted to know the complete CSS behind text-3xl, I could hover over the class name and the Tailwind CSS IntelliSense would show me.\n\nTailwind will get rid of unused CSS when building for production and leave only the CSS you’re actually going to use in your project. The Tailwind documentation states that “most Tailwind projects ship less than 10kb of CSS to the client”. The Optimizing for Production page recommends minifying CSS with a tool like ccsnano, and compressing with Brotli for the smallest possible production.\n\nNow that you know what Tailwind is and why it’s used, let’s take a look at how to install Tailwind CSS. We’ll cover how to install Tailwind with the Tailwind CLI. The Tailwind CLI offers a quick and easy way to start using Tailwind CSS. This is ideal for small projects or if you want to quickly test something without a full project setup. The Framework-specific guides give you step-by-step instructions on how to implement Tailwind with a number of environments such as Next.js, SvelteKit, Remix, and more.\n\nFor this Tailwind tutorial, we’ll be using the official documentation as a guide. The goal of this beginner friendly Tailwind CSS tutorial is to hopefully give some added context around each step.\n• Open your terminal and navigate to your project. I’ve started a project called “blog” and I’m creating a fresh index.html file.\n• After that, I’ll type “code .” to open Visual Studio Code, my preferred editor, from terminal.\n\nI want to create a very simple test file so I’m going to just add an <h1> for now, but you can add anything you’d like to your test file. When I personalize tutorials, I find that I learn faster and retain information better, as it makes the concepts more relatable and easier to understand.\n• Now that I have my html file set up, let’s install Tailwind via npm and create a tailwind.config.js. For this, I’m going to move back to my terminal and enter the following.\n\nYou should see something similar to this when you run npm install -D tailwindcss.\n\nYou should see something similar to this when you run npx tailwindcss init.\n• Now that you have the tailwind.config.js file, the documentation says we need to add paths to our template files. This means we need to tell Tailwind where to look for our utility classes in your project. If we look at the example from the official documentation, this is telling Tailwind to look in the “src” folder for any files with .html or .js extensions.\n• ./src/ tells tailwind where to look\n• **/* will match all your files in the src folder\n• {html,js} limits the search to .html or .js files only\n\nThis is how the folder structure would look like if you follow the above example.\n• Next, we need to add the directives for Tailwind’s layers into our main CSS file. The documentation says to add it to an “input.css” file, but you can name it whatever you’d like. These directives allow Tailwind to handle generating CSS based on what’s in our .html and .js files. This is also where you would include any custom CSS.\n• Next, we need to run the CLI tool so it can scan our files for classes and build our CSS. Run the following in your terminal.\n\nIf you’ve been following along, you’ll notice there’s a warning message. This is expected because we haven’t added any Tailwind classes yet. We’ll do that in the next step.\n• We’re finally ready to start adding Tailwind utility classes to our project. Go into your .html file and start playing around. I recommend pulling up the documentation or using one of the cheat sheets mentioned above as your starting add the classes.\n\nI’m going to use the Live Server extension to check my progress.\n\nI took screenshots of the before (top) and after (bottom) <h1>. Looks good on my end!\n\nTailwind gives you the power to customize designs quickly and easily to make your designs stand out. If you’re just starting your CSS journey, it’s recommended to learn the fundamentals before diving into a framework like Tailwind. In this Mastering CSS Fundamentals blog, Matt Lawrence and Mike Karan cover the fundamentals needed before moving to a framework.\n\nLooking to break into web development? Already here? The HTML All The Things podcast covers a variety of topics to help keep you up to date with web development. Here’s a couple of my favorites around CSS:\n• Tech We Love as Web Developers: SvelteKit, Vercel, Supermaven, and More‍\n• Is Vanilla Tech Just for Juniors? Exploring the Role of HTML, CSS, and JS in 2024"
    },
    {
        "link": "https://medium.com/@likeur.off/title-getting-started-with-tailwind-css-a-quick-guide-to-installation-and-best-practices-c57bb1839aed",
        "document": "Tailwind CSS is a popular utility-first CSS framework that allows developers to rapidly build modern and responsive user interfaces. In this article, we will guide you through the process of setting up a Tailwind CSS project, including installation and highlighting some best practices for development. So, let’s get started!\n\nTo begin, create a new project directory and navigate to it in your terminal. You can use any package manager you prefer, but for this guide, we will use npm.\n\nRun the following command to initialize a new npm project:\n\nStep 3: Installing Tailwind CSS\n\nNext, install Tailwind CSS and its dependencies by running the following command:\n\nThis will create a tailwind.config.js file in your project directory.\n\nOpen the tailwind.config.js file and add the following path in the content section :\n\nthis specify all your html and js file , and customize the configuration according to your project’s requirements. You can modify colors, fonts, breakpoints, and more.\n\nCreate a new CSS file, for example, styles.css, and import Tailwind CSS by adding the following line:\n\nIn your terminal, run the following command to compile your CSS file:\n\nThis will generate a compiled output.css file that includes all the styles defined in your styles.css file. don’t forget to give the absolutely path to your input file here (styles.css)\n\nInclude the generated output.css file in your HTML file by adding the following line within the <head> tag:\n\n\n\n<link rel=”stylesheet” href=”output.css”>\n\n1. Use utility classes: Tailwind CSS encourages the use of utility classes for styling. Leverage the extensive range of predefined classes to apply styles directly in your markup.\n\n2. Keep your HTML clean: Avoid excessive nesting and use utility classes to keep your HTML clean and semantic.\n\n3. Customize your configuration: Tailwind CSS provides a highly customizable configuration file. Take advantage of it to tailor the framework to your project’s specific needs.\n\n4. Optimize for production: When deploying your project, make sure to remove unused CSS by purging your stylesheets. This can significantly reduce file size and improve performance.\n\n5. Follow responsive design principles: Utilize Tailwind CSS’s responsive utilities to create responsive layouts that adapt to different screen sizes.\n\nIn this brief guide, we explored the process of setting up a Tailwind CSS project from scratch, covering installation, configuration, and best practices. By following these steps, you can quickly start building beautiful and responsive user interfaces using Tailwind CSS. Happy coding!\n\nNote: This article provides a general overview of getting started with Tailwind CSS. For more detailed information and advanced features, refer to the official Tailwind CSS documentation Tailwind CSS — Rapidly build modern websites without ever leaving your HTML.\n\nthanks for reading this: my email address : likeur.off@gmail.com"
    }
]