[
    {
        "link": "https://css-tricks.com/snippets/css/a-guide-to-flexbox",
        "document": "The (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”). The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow. Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.). Note: Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.\n\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”). If “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout. Items will be laid out following either the (from to ) or the cross axis (from to ).\n• main axis – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the property (see below).\n• main-start | main-end – The flex items are placed within the container starting from main-start and going to main-end.\n• main size – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.\n• cross axis – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.\n• cross-start | cross-end – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.\n• cross size – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.\n\nThis defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children. Note that CSS columns have no effect on a flex container. \n\nThis establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.\n• (default): left to right in ; right to left in\n• : right to left in ; left to right in\n• : same as but top to bottom\n• : same as but bottom to top By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.\n• (default): all flex items will be on one line\n• : flex items will wrap onto multiple lines, from top to bottom.\n• : flex items will wrap onto multiple lines from bottom to top. There are some visual demos of here. This is a shorthand for the and properties, which together define the flex container’s main and cross axes. The default value is . \n\nThis defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.\n• (default): items are packed toward the start of the flex-direction.\n• : items are packed toward the end of the flex-direction.\n• : items are packed toward the start of the direction.\n• : items are packed toward the end of the direction.\n• : items are packed toward left edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are packed toward right edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are centered along the line\n• : items are evenly distributed in the line; first item is on the start line, last item on the end line\n• : items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.\n• : items are distributed so that the spacing between any two items (and the space to the edges) is equal. Note that that browser support for these values is nuanced. For example, never got support from some versions of Edge, and start/end/left/right aren’t in Chrome yet. MDN has detailed charts. The safest values are , , and . There are also two additional keywords you can pair with these values: and . Using ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”). \n\nThis defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the version for the cross-axis (perpendicular to the main-axis).\n• / / : items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the rules or the rules.\n• / / : items are placed at the end of the cross axis. The difference again is subtle and is about respecting rules vs. rules.\n• : items are centered in the cross-axis\n• : items are aligned such as their baselines align The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. \n\nThis aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how aligns individual items within the main-axis. Note: This property only takes effect on multi-line flexible containers, where is set to either or ). A single-line flexible container (i.e. where is set to its default value, ) will not reflect .\n• (default): items are packed in their default position as if no value was set.\n• / : items packed to the start of the container. The (more supported) honors the while honors the direction.\n• / : items packed to the end of the container. The (more support) honors the while end honors the direction.\n• : items evenly distributed; the first line is at the start of the container while the last one is at the end\n• : items evenly distributed with equal space around each line\n• : items are evenly distributed with equal space around them\n• : lines stretch to take up the remaining space The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. The property explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. The behavior could be thought of as a minimum gutter, as if the gutter is bigger somehow (because of something like ) then the gap will only take effect if that space would end up smaller. It is not exclusively for flexbox, works in grid and multi-column layout as well. \n\nBy default, flex items are laid out in the source order. However, the property controls the order in which they appear in the flex container. Items with the same revert to source order. \n\nThis defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. If all items have set to , the remaining space in the container will be distributed equally to all children. If one of the children has a value of , that child would take up twice as much of the space as either one of the others (or it will try, at least). This defines the ability for a flex item to shrink if necessary. This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The keyword means “look at my width or height property” (which was temporarily done by the keyword until deprecated). The keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren , , and do. If set to , the extra space around content isn’t factored in. If set to , the extra space is distributed based on its value. See this graphic. This is the shorthand for and combined. The second and third parameters ( and ) are optional. The default is , but if you set it with a single number value, like , that changes the to 0%, so it’s like setting . It is recommended that you use this shorthand property rather than set the individual properties. The shorthand sets the other values intelligently. \n\nThis allows the default alignment (or the one specified by ) to be overridden for individual flex items. Please see the explanation to understand the available values. Note that , and have no effect on a flex item.\n\nFlexbox requires some vendor prefixing to support the most browsers possible. It doesn’t just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an “old”, “tweener”, and “new” versions. Perhaps the best way to handle this is to write in the new (and final) syntax and run your CSS through Autoprefixer, which handles the fallbacks very well. Alternatively, here’s a Sass to help with some of the prefixing, which also gives you an idea of what kind of things need to be done:\n\nLet’s start with a very very simple example, solving an almost daily problem: perfect centering. It couldn’t be any simpler if you use flexbox. .parent { display: flex; height: 300px; /* Or whatever */ } .child { width: 100px; /* Or whatever */ height: 100px; /* Or whatever */ margin: auto; /* Magic! */ } This relies on the fact a margin set to in a flex container absorb extra space. So setting a margin of will make the item perfectly centered in both axes. Now let’s use some more properties. Consider a list of 6 items, all with fixed dimensions, but can be auto-sized. We want them to be evenly distributed on the horizontal axis so that when we resize the browser, everything scales nicely, and without media queries. .flex-container { /* We first create a flex layout context */ display: flex; /* Then we define the flow direction and if we allow the items to wrap * Remember this is the same as: * flex-direction: row; * flex-wrap: wrap; */ flex-flow: row wrap; /* Then we define how is distributed the remaining space */ justify-content: space-around; } Done. Everything else is just some styling concern. Below is a pen featuring this example. Be sure to go to CodePen and try resizing your windows to see what happens. Let’s try something else. Imagine we have a right-aligned navigation element on the very top of our website, but we want it to be centered on medium-sized screens and single-columned on small devices. Easy enough. /* Large */ .navigation { display: flex; flex-flow: row wrap; /* This aligns items to the end line on main-axis */ justify-content: flex-end; } /* Medium screens */ @media all and (max-width: 800px) { .navigation { /* When on medium sized screens, we center it by evenly distributing empty space around items */ justify-content: space-around; } } /* Small screens */ @media all and (max-width: 500px) { .navigation { /* On small screens, we are no longer using row direction but column */ flex-direction: column; } } Let’s try something even better by playing with flex items flexibility! What about a mobile-first 3-columns layout with full-width header and footer. And independent from source order. .wrapper { display: flex; flex-flow: row wrap; } /* We tell all items to be 100% width, via flex-basis */ .wrapper > * { flex: 1 100%; } /* We rely on source order for mobile-first approach * in this case: * 1. header * 2. article * 3. aside 1 * 4. aside 2 * 5. footer */ /* Medium screens */ @media all and (min-width: 600px) { /* We tell both sidebars to share a row */ .aside { flex: 1 auto; } } /* Large screens */ @media all and (min-width: 800px) { /* We invert order of first sidebar and main * And tell the main element to take twice as much width as the other two sidebars */ .main { flex: 3 0px; } .aside-1 { order: 1; } .main { order: 2; } .aside-2 { order: 3; } .footer { order: 4; } }"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox",
        "document": "The flexible box layout module (usually referred to as flexbox) is a one-dimensional layout model for distributing space between items and includes numerous alignment capabilities. This article gives an outline of the main features of flexbox, which we will explore in more detail in the rest of these guides. When we describe flexbox as being one-dimensional we are describing the fact that flexbox deals with layout in one dimension at a time — either as a row or as a column. This can be contrasted with the two-dimensional model of CSS Grid Layout, which controls columns and rows together.\n\nAnother vital area of understanding is how flexbox makes no assumption about the writing mode of the document. Flexbox doesn't just assume that all lines of text start at the top left of a document and run towards the right-hand side, with new lines appearing one under the other. Rather, it supports all writing modes, like other logical properties and values. You can read more about the relationship between flexbox and writing modes in a later article; however, the following description should help explain why we do not talk about left and right and top and bottom when we describe the direction that our flex items flow in. If the is and I am working in English, then the start edge of the main axis will be on the left, the end edge on the right. If I were to work in Arabic, then the start edge of my main axis would be on the right and the end edge on the left. In both cases the start edge of the cross-axis is at the top of the flex container and the end edge at the bottom, as both languages have a horizontal writing mode. After a while, thinking about start and end rather than left and right becomes natural, and will be useful to you when dealing with other layout methods such as CSS Grid Layout which follow the same patterns.\n\nWhile flexbox is a one dimensional model, it is possible to make flex items wrap across multiple lines. If you do this, you should consider each line as a new flex container. Any space distribution will happen across each line, without reference to the previous or subsequent lines. To cause wrapping behavior add the property with a value of . Now, if your items are too large to all display in one line, they will wrap onto another line. The live sample below contains items that have been given a . The total width of the items is too wide for the flex container. As is set to , the items wrap across multiple lines. If you set it to , which is the initial value, they will shrink to fit the container. They shrink because they are using initial flexbox values, including , that allows items to shrink. Using would cause an overflow if the items were not able to shrink, or could not shrink small enough to fit. Find out more about wrapping flex items in the guide Mastering wrapping of flex items.\n\nTo control the inline-size of each flex item, we target them directly via three properties: We will take a brief look at these properties below, but if you want more comprehensive information, take a look at the Controlling ratios of flex items on the main axis guide. Before we can make sense of these properties we need to consider the concept of available space. What we are doing when we change the value of these flex properties is to change the way that available space is distributed amongst our items. This concept of available space is also important when we come to look at aligning items. If we have three 100 pixel-wide items in a container which is 500 pixels wide, then the space we need to lay out our items is 300 pixels. This leaves 200 pixels of available space. If we don't change the initial values then flexbox will put that space after the last item. If we instead would like the items to grow and fill the space, then we need to have a method of distributing the leftover space between the items. The properties that we apply to the items themselves, enable dictating how that available space should be distributed among the sibling flex items.\n\nWith the property set to a positive integer, if there is available space, the flex item can grow along the main axis from its . Whether the item stretches to take up all the available space on that axis, or just a portion of the available space depends on if the other items are allowed to grow too and the value of their properties. Each item with a positive value consumes a portion of any available space based on their value. If we gave all of our items in the example above a value of 1 then the available space in the flex container would be equally shared between our items and they would stretch to fill the container on the main axis. If we give our first item a value of 2, and the other items a value of 1 each, there are a total of 4 parts; 2 parts of the available space will be given to the first item (100px out of 200px in the case of the example above) and 1 part each the other two (50px each out of the 200px total).\n\nWhere the property deals with adding space in the main axis, the property controls how it is taken away. If we do not have enough space in the container to lay out our items, and is set to a positive integer, then the item can become smaller than the . As with , different values can be assigned in order to cause one item to shrink faster than others — an item with a higher value set for will shrink faster than its siblings that have lower values. An item can shrink down to its size. This minimum size is taken into account while working out the actual amount of shrinkage that will happen, which means that has the potential to appear less consistent than in behavior. We'll therefore take a more detailed look at how this algorithm works in the article Controlling ratios of items along the main axis. Note: These values for and are proportions. Typically if we had all of our items set to and then wanted one item to grow at twice the rate, we would set that item to . However you could also use and if you wanted.\n\nYou will very rarely see the , , and properties used individually; instead they are combined into the shorthand. The shorthand allows you to set the three values in this order — , , . The live sample below allows you to test out the different values of the flex shorthand; remember that the first value is . Giving this a positive value means the item can grow. The second is — with a positive value the items can shrink, but only if their total values overflow the main axis. The final value is ; this is the value the items are using as their base value to grow and shrink from. .box > * { border: 2px solid rgb(96 139 168); border-radius: 5px; background-color: rgb(96 139 168 / 0.2); } .box { border: 2px dotted rgb(96 139 168); display: flex; } .one { flex: 1 1 auto; } .two { flex: 1 1 auto; } .three { flex: 1 1 auto; } There are also some predefined shorthand values which cover most of the use cases. You will often see these used in tutorials, and in many cases these are all you will need to use. The predefined values are as follows: The value is a CSS-wide value that represents the initial value for a property. Setting resets the item to the initial values of the three longhand properties, which is the same as . The initial value of is , so items will not grow larger than their size. The initial value of is , so items can shrink if they need to rather than overflowing. The initial value of is . Items will either use any size set on the item in the main dimension, or they will get their size from the content size. Using is the same as using ; this is similar to , except that the items can grow and fill the container as well as shrink if needed. Using will create fully inflexible flex items. It is as if you wrote . The items cannot grow or shrink and will be laid out using flexbox with a of . The shorthand you often see in tutorials is or and so on. This is the same as writing or and so on, respectively. The items get minimum size due to and then proportionally grow to fill the available space. In this case, the value of is redundant because the items start with minimum size — they're not given any size that could cause them to overflow the flex container. Try these shorthand values in the live sample below. .box > * { border: 2px solid rgb(96 139 168); border-radius: 5px; background-color: rgb(96 139 168 / 0.2); } .box { border: 2px dotted rgb(96 139 168); display: flex; } .one { flex: 1; } .two { flex: 1; } .three { flex: 1; }"
    },
    {
        "link": "https://w3schools.com/css/css3_flexbox.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Aligning_items_in_a_flex_container",
        "document": "Flexbox provides several properties to control alignment and spacing, with and being fundamental for centering elements. To center an element, we use the property to align the item on the cross axis, which in this case is the block axis running vertically. We use to align the item on the main axis, which in this case is the inline axis running horizontally. Change the size of the container or nested element in the code example below. The nested element always remains centered.\n\nThe property, set on the flex container, and the property, set on flex items, control the alignment of flex items on the cross axis. The cross axis runs down the columns if is and along the rows if is . In this basic flex example, we're using cross-axis alignment. When we add to a container, the child items become flex items arranged in a row. By default, they will all stretch to match the height of the tallest item, as that item defines the height of the items on the cross axis. If the flex container has a height set, the items will stretch to that height, regardless of how much content is in each item. The reason the items become the same height is that the initial value of , the property that controls alignment on the cross axis, is set to . We can use other values to control how the items align: In the example below, the value of is . Try the other values and see how the items align against each other in the flex container.\n\nThe property sets the property on all of the flex items as a group. This means you can explicitly declare the property to target a single item. The property accepts all of the same values as , plus a value of , which resets the value to that defined on the flex container. In this next live example, the flex container has , which means the items are all aligned to the start of the cross axis. Using the selector, the first item is set to . Another item with the class has set. Change the value of or change the values of on the individual items to see how this works.\n\nThus far, we have looked at alignment behavior when the defaults to while working in a language written top to bottom, with a horizontal main axis and vertical cross axis. Keeping the same writing mode, when the is changed to , the and properties will align the items to the left and right instead of top and bottom; these properties are still aligning items along the cross axis, but the cross axis is now horizontal! You can try this out in the example below, which has a flex container with yet otherwise is exactly the same as the previous example.\n\nAligning content on the cross axis with the property So far, we have focused on aligning items or individual items inside the area defined by a flex container containing a single line of flex items. When flex items are allowed to wrap across multiple lines, the property can be used to control the distribution of space between the lines, also known as packing flex lines. For to have an effect, the cross axis dimension (the height in this case) of the flex container must be greater than needed to display the items. It then works on all the items as a set. The values dictate what happens with the extra available space and the alignment of the entire set of items within it. The property takes the following values: In the live example below, the flex container has a height of , which is more than needed to display our items. The value of is , which means that the available space is shared out between the flex lines, which are placed flush with the start and end of the container on the cross axis. Try out the other values to see how the property works. Once again we can switch our to in order to see how this property behaves when we are working by column. As before, we need enough space in the cross axis to have some free space after displaying all of the items.\n\nNow that we have seen how alignment works on the cross axis, we can take a look at the main axis. Here we only have one property available to us — . This is because we are only dealing with items as a group on the main axis. With we control what happens with available space, should there be more space than is needed to display the items. In our initial example with on the container, the items display as a row and all line up at the start of the container. This is due to the initial value of being , which behaves as . Any available space is placed at the end of the items. The values aren't relevant in this dimension. Otherwise, the property accepts the same values as . In the example below, the value of is . The available space after displaying the items is distributed between the items. The left and right item line up flush with the start and end. If the main axis is in the block direction because is set to , then will distribute space between items in that dimension as long as there is space in the flex container to distribute.\n\nRemember that with all of these alignment methods, the values of and are writing mode-aware. If the value of is and the writing mode is left-to-right, as in English, the items will align starting at the left side of the container. However if the writing mode is right-to-left as in Arabic, the items will line up starting at the right side of the container. The live example below has the property set to to force a right-to-left flow for our items. You can remove this, or change the values of to see how flexbox behaves when the start of the inline direction is on the right.\n\nThe direction of of the line will also change if you change the property — for example, using instead of . In this next example, and define the direction and location of the items within the flex container. In a left to right language, the items line up on the left. Try changing to . You will see that the items now move to the right-hand side, and the visual order of the items is reversed. While this may all seem a little confusing, the rule to remember is that unless you do something to change it, flex items lay themselves out in the direction that words are laid out in the language of your document along the inline, row axis. and will be where the beginning of a sentence of text would start. You can switch them to display in the block direction for the language of your document by selecting . Then, and will be where the top of your first paragraph of text would start. If you change to one of the reverse values, they will lay themselves out from the end axis and in the reverse order to the way words are written in the language of your document. Then, and will change to the end of that axis — so to the location where your lines would wrap if working in rows, or at the end of your last paragraph of text in the block direction.\n\nWe don't have a or property available to us on the main axis as our items are treated as a group on that axis. However it is possible to do some individual alignment in order to separate an item or a group of items from others by using auto margins along with flexbox. A common pattern is a navigation bar where some key items are aligned to the right, with the main group on the left. You might think that this should be a use case for a property. However, consider the image below. As an example, take the following image with three items on one side and two on the other. If were to work on flex items and was set on item d, it would also change the alignment of item e that follows, which may or may not be what is intended. Instead, the d item can be pushed over using CSS margins. In this live example, item 4 is separated from the first three items by setting to , which consumes all the space it can in its axis. This is how centering a block with auto left and right works. Each side tries to take as much space as it can, and so the block is pushed into the middle. In this live example, the flex items are arranged in a row with the basic flex values, and the class , set on the fourth item, applies to that item. Try removing the class on the fourth item or adding the class to a different item to see how it works.\n\nTo create a gap between flex items, use the , , and properties. The property creates gaps between items in a row. The property creates gaps between flex lines when you have set to . The property is a shorthand that sets both and . The gaps between flex items or flex lines depend on the direction. If the property creates rows, the first value defines the gap between flex lines, and the second value defines the gap between items within each line. With columns (when is set to or ), the first value defines the gap between flex items, and the second value defines the gaps between flex lines."
    },
    {
        "link": "https://stackoverflow.com/questions/67242984/how-do-i-align-multiple-images-and-text-elements-in-a-flex-container",
        "document": "Newbie web developer here working on a practice project. I'm trying to use flexbox to create a layout like this.\n\nSo far, here's my code:\n\nThe issues I'm having are:\n• The image in the \"left\" div isn't resizing to 60% of the container div.\n• I don't know how to get the text to align to the right of the images in the \"right\" div.\n\nI know I'm having trouble with the margins also but I figured that I can probably resolve those issues once I sort out what's going on with the flexbox layout.\n\nWhat am I doing wrong? Apologies if it's obvious but as I say I'm a newbie. Any and all help would be much appreciated, thank you!"
    },
    {
        "link": "https://w3schools.com/html/html_responsive.asp",
        "document": "Responsive web design is about creating web pages that look good on all devices!\n\nA responsive web design will automatically adjust for different screen sizes and viewports.\n\nResponsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones):\n\nTry it Yourself »\n\nTo create a responsive website, add the following tag to all your web pages:\n\nThis will set the viewport of your page, which will give the browser instructions on how to control the page's dimensions and scaling.\n\nHere is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:\n\nResponsive images are images that scale nicely to fit any browser size.\n\nIf the CSS property is set to 100%, the image will be responsive and scale up and down:\n\nNotice that in the example above, the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the property instead.\n\nIf the property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size:\n\nThe HTML element allows you to define different images for different browser window sizes.\n\nResize the browser window to see how the image below changes depending on the width:\n\nThe text size can be set with a \"vw\" unit, which means the \"viewport width\".\n\nThat way the text size will follow the size of the browser window:\n\nIn addition to resize text and images, it is also common to use media queries in responsive web pages.\n\nWith media queries you can define completely different styles for different browser sizes.\n\nExample: resize the browser window to see that the three div elements below will display horizontally on large screens and stack vertically on small screens:\n\nA responsive web page should look good on large desktop screens and on small mobile phones.\n\nTry it Yourself »\n\nThey are free, and easy to use.\n\nW3.CSS is a modern CSS framework with support for desktop, tablet, and mobile design by default.\n\nW3.CSS is smaller and faster than similar CSS frameworks.\n\nW3.CSS is designed to be independent of jQuery or any other JavaScript library.\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>W3.CSS</title>\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n\n</head>\n\n<body>\n\n\n\n<div class=\"w3-container w3-green\">\n\n <h1>W3Schools Demo</h1> \n\n <p>Resize this responsive page!</p> \n\n</div>\n\n\n\n<div class=\"w3-row-padding\">\n\n <div class=\"w3-third\">\n\n <h2>London</h2>\n\n <p>London is the capital city of England.</p>\n\n <p>It is the most populous city in the United Kingdom,\n\n with a metropolitan area of over 13 million inhabitants.</p>\n\n </div>\n\n\n\n <div class=\"w3-third\">\n\n <h2>Paris</h2>\n\n <p>Paris is the capital of France.</p> \n\n <p>The Paris area is one of the largest population centers in Europe,\n\n with more than 12 million inhabitants.</p>\n\n </div>\n\n\n\n <div class=\"w3-third\">\n\n <h2>Tokyo</h2>\n\n <p>Tokyo is the capital of Japan.</p>\n\n <p>It is the center of the Greater Tokyo Area,\n\n and the most populous metropolitan area in the world.</p>\n\n </div>\n\n</div>\n\n\n\n</body>\n\n </html> Try it Yourself »\n\nTo learn more about W3.CSS, read our W3.CSS Tutorial.\n\nTo learn more about Bootstrap, go to our Bootstrap Tutorial."
    },
    {
        "link": "https://cloudinary.com/guides/responsive-images/responsive-images-in-html-a-practical-guide",
        "document": "Before diving into the specifics of responsive images, it’s important to understand the basics of adding and manipulating images in HTML. To insert an image, the tag is used, which is an “empty element” and does not require a closing tag. Key attributes of this tag include:\n• : Adds alternate text for the image, which is crucial for accessibility and SEO.\n• : Sets the width of the image.\n• : Sets the height of the image.\n\nTo add an image, follow these steps:\n• Upload the image file to your server or hosting.\n• Access the theme or HTML folder where your web page is located.\n• Add the tag to your HTML and set the attribute to point to the image location.\n• Optionally, set the and attributes to define the image size.\n• Always add an attribute to describe the image.\n• Save the changes to your HTML file.\n\nIn addition to these basics, images in HTML can be used in various interactive ways, such as creating an image button by placing the tag inside a tag, creating a clickable image link with and tags together, or overlaying text on an image by using a with a class named “image-container” and adding an image within it.\n\nBy dynamically adapting to changes in screen resolution, screen size, or other differences among client devices, responsive images are part of a RWD [responsive web design] process that ensures that a site can accommodate environmental constraints: display dimensions and quality, connectivity and network conditions, available input types. You can place responsive images in various locations, including website content, headers, and backgrounds.\n\nResponsive images must render at different pixel ratios on different devices to reflect the pixel depth of the viewing device. In addition, a responsive or fluid layout must be able to squeeze or stretch to cater to changes in screen size. All that requires multiple images being available in several resolutions to appropriately scale the screen across various sizes.\n• Why Should You Create Responsive Images in HTML?\n• How Do You Create Responsive Images in HTML?\n• How Do You Create Responsive Images in HTML With Cloudinary?\n\nWhy Should You Create Responsive Images in HTML?\n\nAccording to Statista, more than 90% of internet users worldwide access the web on mobile devices. Since most webpages contain images, let alone that search engines measure web performance through image metrics, responsive images help achieve optimal performance and deliver a positive user experience.\n\nGenerally, browsers preload images before parsing CSS, i.e., before the site’s JavaScript detects the viewport width based on which to modify images. That’s why HTML is a more ideal choice than CSS for coding responsive images.\n\nFor more details, see responsive image CSS.\n\nHow Do You Create Responsive Images in HTML?\n\nYou can create responsive images in HTML in the three ways below.\n\nAs an alternative to the and attributes, HTML’s element enables you to define breakpoints, which are critical points at which a page’s design changes for an enhanced user experience. You can display a different image at each breakpoint, a technique known as art-directing images.\n\nThe sample code below provides three options for displaying the image of a house:\n• A zoomed-out image that shows the house and its surroundings\n• A regular image that shows only the house\n• A zoomed-in image that shows the important elements of the house\n• If the screen size is less than 1,200 px., which is too small to show the entire image, switch the image to .\n• If the screen size is less than 800 px., show the zoomed-in version so that viewers can still see the important elements of the house even on small screens.\n\nTo learn how to automate tasks related to responsive images, see the documentation on combining responsive automation with other Cloudinary features.\n\nSwitching an image’s resolution enables viewing of that image on different devices. Typically, you specify multiple versions of the image and display the one that is most appropriate to the user’s current display.\n\nBefore, you could specify only one source file with HTML’s element for the browser. Now you can add more source images with hints in the and attributes to help the browser choose the right image.\n\nBelow is an example:\n\nBoth and contain a comma-separated list of values:\n• srcset specifies the absolute sizes of the images as choices for the browser.\n\n The syntax is as follows:\n\nThe image’s file name, a space, the image size with the w unit\n\nThe value of w denotes the intrinsic size of the image in storage—not pixels, which denote the size of the image as displayed on the screen.\n• sizes defines the media conditions, such as the screen width, and specifies the optimal image size to select for a specific media condition. Here’s a list of all the available media features.The syntax is as follows:The name of the media feature, a colon, the condition to look for, a space, the width the image fills if the media condition is true.\n\nSetting and with triggers the following browser process:\n• The browser looks up the width of the device.\n• The browser identifies the first media condition in the sizes attribute that is true.\n• The browser looks up the slot size specified in the media query.\n• The browser loads an image with the same size, if available; and, if not, the first image that is larger than the selected slot size.\n\nHere are the related scenarios:\n• If a user accesses the page with a viewport of width 500, because the media condition is true (width of less than 600), the browser loads the image with size 480w, saving . significant bandwidth for users with smaller screens.\n• If a user accesses the page with a viewport of width 700, the browser loads the larger image of 800w.\n• If a user accesses the page with an old browser that does not support media queries, the browser complies with the settings of the regular src attribute and loads the 800w image—regardless of screen size.\n\nNew image formats like WebP, replete with small file size and high quality, are widely used and supported by all modern browsers. Google’s website-performance guidelines now explicitly require that websites adopt modern image formats when possible.\n\nTo switch image format according to browser capabilities, add the element. The following example shows various image formats to switch to, depending on the MIME type supported by the browser.\n\nThe first option is the most lightweight SVG. If the browser does not accept it, the next option is WebP. And if the browser rejects both, it loads the traditional PNG format.\n\nAs in the previous code examples, a comma-separated list of the and properties denotes the multiple image sizes for each format.\n\nHow Do You Create Responsive Images in HTML With Cloudinary?\n\nA cloud-based service for managing images and videos, Cloudinary offers a generous free-forever subscription plan. While on that platform, you can upload images and apply built-in effects, filters, and modifications. You can also create image effects that are difficult or impossible to produce with just CSS.\n\nCloudinary makes it simple to deliver responsive images by doing the following:\n• Dynamically transform images — Generates transformed (e.g., resized or cropped) versions of images on the fly with Cloudinary dynamic URLs. This capability is especially useful in conjunction with the HTML srcset attribute and <picture> element, enabling the browser to choose which image version to display.\n• Automating responsive images with JavaScript front-end frameworks (client side) — Programmatically sets the <img> src URL to a Cloudinary dynamic URL that delivers the optimal image for the available image width.\n• Automating responsive images with the cloudinary-core JS library (client side) — Programmatically sets the <img> src URL to a Cloudinary dynamic URL that delivers the optimal image for the available image width and the device’s DPR.\n• Automating responsive images with Client Hints (mobile Chrome only) — Delivers the optimal image for the available width and the device’s DPR as specified in the Client Hints request header.\n• Combining responsive automation with other Cloudinary features — Implements advanced RWD and art-directed, responsive images by leveraging Cloudinary’s other automation features."
    },
    {
        "link": "https://stackoverflow.com/questions/8429058/responsive-web-design-tips-best-practices-and-dynamic-image-scaling-techniques",
        "document": "As @Tak mentioned the answers here is 'Progressive Enhancement' and 'Graceful degradation'. However the definitions he gave are not quite right. Here are the proper ones:\n\n'Progressive enhacement' (see link) means that you code for the old browser first (IE6/7 with/without JavaScript is a good starting point) using tried-and-tested technologies such as HTML4 and CSS1, then add enhacement as you progress through testing on more modern browsers down to Chome and Safari on mobile devices which support CSS3 and most of HTML5. This way, you aim to provide any browser with the best possible combination of features supported in it (its never going to be perfect by the way so bear in mind the 80/20 rule to avoid running project into the ground).\n\n'Graceful degradation' (see link) is kinda the same thing but backwards, its a more lazy way of doing it. You start building your site against a modern browser and then apply 'patches' and 'fixes' until its acceptable on older browsers. This ends up creating a lot more work than planning it properly from the start and what generally tends to happen with this approach is that the developer/stakeholder will give up at some point (ie. what the hell? its too much work to get this working in IE6/7 - I'll just de-scope them)\n\n2. Best way to standardise the layout\n\nPersonally, my suggestion is that if you want a standard layout across mobile and desktop devices I suggest you use a combination of BIG fonts (so they are visible in a tiny mobile screen) and small ones (so people that have a Desktop browser can read all the detail) on a Desktop-size 900-1000px width.\n\nThis site is an example:\n\nWhen I open it in my Desktop browser I see a lot of detail, but when I'm on the go and use my Smartphone all the critical information (ie should I BUY or SELL a share?) is displayed on a very big font that appears legible in my tiny screen.\n\nThis part of the question has now effectively changed to 'Whats the best way to implement the layout?'.\n\nAt the moment (and for the last few years of widely available CSS3 support) the standard approach for cross-device layout design is to use a so called 'Responsive' layout based on media queries. There are many CSS frameworks available to get users started with mobile-friendly layouts.\n\nThe basic principle for 'Responsive' design is that scrolling on mobiles devices makes vertical space virtually endless so you are only limited by horizontal space. Thus you have to ensure that as the screen gets smaller you let the page flow to fill up all the available horizontal space, and any navigation bars or horizontal elements are folded over vertically so that items are stacked on top of each other rather than using space horizontally.\n\nThe standard way to test a site's 'responsiveness' is by dragging the side of your browser window to reduce available width.\n\nThe better way is using Developer Tools, for example Chrome has a button to toggle device mode, here is an example using Stackoverflow:\n\nAn example of a media query to specify a layout for the element on desktop and mobile screens would be as follows:\n\n3. How is dynamic image scaling done?\n\nThe mobile device does a lot of this for you so generally you just need an understanding of how it works. Basically, when the first mobile browsers came out they had to make sure that the sites that were already out there working for desktop browsers worked on a mobile too (otherwise nobody would use their smartphone to browse the web) so they had to come up with clever ways to detect the width of the site and resize it to the screen resolution that they had available.\n\nFor example my site 'www.desalasworks.com' is coded to 900px width, but it works fine by getting down-scaled on a small 320px screen (images on the page are automatically resampled using a variety of methods - such as nearest-neighbour sampling and bicubic interpolation, and the fonts replaced with native fonts wherever possible). As far as the image sampling goes, if you have ever pinched a photo on your smartphone to 'zoom in' and 'zoom out' you know what I'm talking about.\n\nYou generally dont need to worry about CSS to get your images to resample properly, I noticed that sometimes they are a bit funny when using percentage widths so stick to pixels if thats the case to make it easier for the browser to tell where items are in relation to one another. Note that you CAN specifically detect the mobile browser and set the width of your site to 320px and everything in it to fall in-line accordingly but in reality this is not necessary to have a working site on a mobile device and doing this will force you to maintain 2 sites, a mobile site and a desktop site (which some companies are happy to do).\n\nPersonally I tend to use fixed width centered on a screen (using CSS margin: 0px auto), I haven't used percentage widths for a LONG time, mostly because its a bit of a nightmare to standardise the layout. If you do use percentage widths you'll basically have to do a lot more testing so I would tend to veer away from them.\n\nBear in mind this is just my opinion, some 'reponsive web' gurus will swear by percentage widths on just about everything, I'm just not sold on the idea of sacrificing predictability of the layout for what I see as marginal benefit. But then I come from a background of building desktop webapps, I'd probably think differently if I was just focused on mobile web (where horizontal space is at a premium and layouts tend to be simpler)."
    },
    {
        "link": "https://cloudinary.com/guides/responsive-images/what-are-responsive-images-and-6-useful-techniques",
        "document": "What Are Responsive Images and 6 Useful Techniques\n\nResponsive images are images that are designed to adjust their size and resolution based on the size of the device or screen they are being viewed on. This allows images to look sharp and clear on any screen, whether it’s a small smartphone screen or a large desktop monitor. This is achieved by using different versions of the same image with varying resolutions, and using CSS or JavaScript to determine which version to serve based on the screen size.\n\nThis is part of an extensive series of guides about front-end development.\n\nResponsive images are a part of responsive web design, which is a design approach aimed at creating websites that provide an optimal viewing experience across a wide range of devices and screen sizes. In responsive web design, the layout, content, and images of a website are flexible and adjust to the size of the device being used, allowing the website to be easily viewed on any device without the need for scrolling or zooming. Responsive images play a critical role in ensuring that images on a website look good on all devices and do not slow down the website’s loading time.\n\nBy using responsive images, website developers can ensure that images are appropriately sized for the device they are being viewed on, resulting in a better user experience.\n\nWhy Should You Use Responsive Images?\n\nResponsive images are useful for websites for several reasons:\n• Increased loading speed: They help to increase the loading speed of a website by serving optimized images that are appropriate for the size and resolution of the device being used. This means that images are smaller in size, which results in faster loading times and a better user experience.\n• Better user experience: They provide a better user experience by ensuring that images look good and are easily readable on any device. This is particularly important for mobile users, who are more likely to leave a website if it takes too long to load or if images are not optimized for their device.\n• Stronger SEO: Responsive images can also help to improve a website’s search engine optimization (SEO) by reducing the bounce rate (the number of visitors who leave a website after only viewing one page). Search engines use the bounce rate as a metric for measuring the quality of a website, so a lower bounce rate can result in higher search engine rankings.\n\nResponsive Images in HTML and CSS: 6 Useful Techniques\n\nThe and attributes are HTML attributes that are used to specify different versions of an image to be used based on the screen size and resolution of the device being used to view the website.\n\nThe attribute is used to specify a list of different versions of an image and their respective widths, and it is used in conjunction with the attribute. For example:\n\nIn this example, the attribute specifies three different versions of the image: , , and . The attribute specifies the maximum width of the screen that each version of the image is intended for.\n\nThe browser will choose the most appropriate image to display based on the size and resolution of the device being used to view the website. This helps to ensure that images are optimized for the device being used, resulting in faster loading times and a better user experience.\n\nWe will use the following images for testing:\n\nThe output should look like this: when tested with the browser, we can check see it is automatically resized per the selected device.\n\nMedia queries are used in CSS to apply different styles to a web page based on the size and resolution of the device being used to view the website. They can be included in HTML by adding CSS rules within media query blocks in the stylesheet.\n\nHere is an example of how to include media queries in a CSS stylesheet:\n\nIn the following output image, you can see the image is automatically resized depending on the device’s resolution.\n\nIn this example, the default styles are applied to all devices, and the media queries are used to override these styles for specific screen sizes:\n• The first media query sets styles for small screens (with a maximum width of 320 pixels),\n• The second media query sets styles for medium screens (with a minimum width of 321 pixels and a maximum width of 640 pixels)\n• The third media query sets styles for large screens (with a minimum width of 641 pixels)\n\nIn this way, media queries allow you to create responsive designs that adapt to the size and resolution of the device being used to view the website, resulting in a better user experience for all users.\n\nLearn more in our detailed guide to responsive images with CSS.\n\nBreakpoints are the specific width values that are used in media queries to apply different styles to a web page based on the size of the device being used to view the website. A breakpoint is the point at which the layout of a web page changes to accommodate the different screen size.\n\nBreakpoints are typically defined in pixels, and they are used to create a responsive design that adjusts to different screen sizes. Here are some examples of common breakpoints:\n• 320px: This is a popular option for small screens, such as those used on smartphones.\n• 640px: Commonly used for medium-sized screens, such as tablets.\n• 960px: Commonly used for large screens, such as desktop computers.\n• 1200px: Commonly used for extra-large screens, such as wide-screen monitors.\n\nThe property is a CSS property that sets the maximum width of an element. It can be used to prevent an element from becoming too wide when viewed on larger screens, which can help to ensure that the layout of a web page remains consistent and readable on all devices.\n\nIn this example, the property is used to set the maximum width of all elements on the page to 100% of the width of their parent container. This means that the images will be resized to fit within the available space, but they will never become wider than the parent container.\n\nLazy loading is a technique for optimizing the loading of images on a web page. In the context of responsive images, lazy loading means that images are only loaded when they are needed, and not when the page first loads.\n\nWith lazy loading, images are only loaded when they are in or near the viewport, which is the portion of the web page that is currently visible on the screen. This can significantly improve the loading time of a web page, especially on mobile devices, where network speeds are often slower.\n\nHere is an example of how to implement lazy loading for images in HTML using JavaScript:\n\nIn this example, the attribute is used to store the URL of the image, and the class is used to select all images that need to be lazy loaded.\n\nThe IntersectionObserver API is used to detect when an image enters the viewport, and the attribute is updated with the URL of the image. This means that the image is only loaded when it is needed, and not when the page first loads.\n\nA responsive image background is an image that is set as the background of an element on a web page, and is designed to adjust its size and appearance based on the size of the device or screen being used to view the page. This means that the background image will scale and adjust its position to fit the available screen space, providing an optimal viewing experience for the user regardless of the device they are using.\n\nResponsive image backgrounds are often set using CSS, and may use media queries to serve different versions of the same image based on the size of the device. The goal of a responsive image background is to provide a seamless and visually appealing design, regardless of the device being used to view the web page. By using responsive image backgrounds, website developers can ensure that the background images on their pages look good on all devices and do not slow down the website’s loading time.\n\nImplementing responsive images in WordPress is relatively straightforward. WordPress automatically generates several different sizes of each image that is uploaded to the media library. These sizes can be used to serve optimized images based on the size and resolution of the device being used to view the website.\n\nThe available image sizes can be configured in the WordPress settings, and they can also be added or modified using custom code. By default, the large image version will have maximum dimensions of 1024 pixels, while the smallest (thumbnail) image size will have maximum dimensions of 150 pixels.\n\nIn WordPress, the attribute is generated automatically for each image that is uploaded to the media library, and it can be used to serve optimized images based on the size and resolution of the device being used to view the website.\n\nHere is an example of how to implement responsive images in WordPress. Please note that this example requires that the image has the string ‘ ’ in its filename.\n\nIn this example, the function is used to get the URL of the full-sized image, and the function is used to get the attribute for the image. The attribute is used to specify the maximum width of the screen that each version of the image is intended for.\n\nRelated content: Read our blog on how to create responsive image for WordPress.\n\nBootstrap is a popular front-end framework for developing responsive, mobile-first websites. It provides a set of CSS and JavaScript-based components and tools that make it easy to create responsive designs that look good on a variety of devices.\n\nIn Bootstrap, responsive images can be implemented using the class. This class is used to make images scalable and responsive, so that they will automatically adjust their size and resolution based on the size and resolution of the device being used to view the website.\n\nHere is an example of how to implement responsive images in Bootstrap:\n\nIn this example, the element is given the class, which makes the image scalable and responsive. The attribute is used to provide a text description of the image for accessibility purposes.\n\nA cloud-based service for managing images and videos, Cloudinary offers a generous free-forever subscription plan. While on that platform, you can upload images and apply built-in effects, filters, and modifications. You can also create image effects that are difficult or impossible to produce with just CSS.\n\nCloudinary makes it simple to deliver responsive images by doing the following:\n• Dynamically transform images — Generates transformed (e.g., resized or cropped) versions of images on the fly with Cloudinary dynamic URLs. This capability is especially useful in conjunction with the HTML attribute and element, enabling the browser to choose which image version to display.\n• Automating responsive images with JavaScript front-end frameworks (client side) — Programmatically sets the URL to a Cloudinary dynamic URL that delivers the optimal image for the available image width.\n• Automating responsive images with the cloudinary-core JS library (client side) — Programmatically sets the <img> src URL to a Cloudinary dynamic URL that delivers the optimal image for the available image width and the device’s DPR.\n• Automating responsive images with Client Hints (mobile Chrome only) — Delivers the optimal image for the available width and the device’s DPR as specified in the Client Hints request header.\n• Combining responsive automation with other Cloudinary features — Implements advanced RWD and art-directed, responsive images by leveraging Cloudinary’s other automation features.\n\nTogether with our content partners, we have authored in-depth guides on several other topics that can also be useful as you explore the world of front-end development.\n• The Five Most Popular Web-Video Formats and Streaming Protocols\n• The Popular Video Codes, Their Pros and Cons, and Related File Formats\n• How the AV1 Codec Compresses Video for Efficient and High-Quality Delivery\n• Creative Uses for CSS Inner Border and 3 Ways to Set a Border\n• \n• UGC in Marketing: An Authentic Marketing Component in the Digital Age"
    },
    {
        "link": "https://w3schools.com/css/css_rwd_images.asp",
        "document": "If the property is set to a percentage and the property is set to \"auto\", the image will be responsive and scale up and down:\n\nNotice that in the example above, the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the property instead.\n\nIf the property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size:\n\nAdd an Image to The Example Web Page\n\nBackground images can also respond to resizing and scaling.\n\nHere we will show three different methods:\n\n1. If the property is set to \"contain\", the background image will scale, and try to fit the content area. However, the image will keep its aspect ratio (the proportional relationship between the image's width and height):\n\nHere is the CSS code:\n\n2. If the property is set to \"100% 100%\", the background image will stretch to cover the entire content area:\n\nHere is the CSS code:\n\n3. If the property is set to \"cover\", the background image will scale to cover the entire content area. Notice that the \"cover\" value keeps the aspect ratio, and some part of the background image may be clipped:\n\nHere is the CSS code:\n\nDifferent Images for Different Devices\n\nA large image can be perfect on a big computer screen, but useless on a small device. Why load a large image when you have to scale it down anyway? To reduce the load, or for any other reasons, you can use media queries to display different images on different devices.\n\nHere is one large image and one smaller image that will be displayed on different devices:\n\nYou can use the media query , instead of , which checks the device width, instead of the browser width. Then the image will not change when you resize the browser window:\n\nThe HTML element gives web developers more flexibility in specifying image resources.\n\nThe most common use of the element will be for images used in responsive designs. Instead of having one image that is scaled up or down based on the viewport width, multiple images can be designed to more nicely fill the browser viewport.\n\nThe element works similar to the and elements. You set up different sources, and the first source that fits the preferences is the one being used:\n\nThe attribute is required, and defines the source of the image.\n\nThe attribute is optional, and accepts the media queries you find in CSS @media rule.\n\nYou should also define an element for browsers that do not support the element."
    }
]