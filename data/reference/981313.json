[
    {
        "link": "https://docs.python.org/3/library/itertools.html",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/python-itertools-permutations",
        "document": "Itertool is a module provided by Python for creating iterators for efficient looping. It also provides various features or functions that work with iterators to produce complex iterators and help us to solve problems easily and efficiently in terms of time as well as memory. Itertools module provides us various ways to manipulate the sequence that we are traversing through.\n\nDifferent types of iterators provided by this module are:\n\nNote: For more information, refer to Python Itertools\n\nItertools.permutation() function falls under the Combinatoric Generators. The recursive generators that are used to simplify combinatorial constructs such as permutations, combinations, and Cartesian products are called combinatoric iterators. As understood by the word “Permutation” it refers to all the possible combinations in which a set or string can be ordered or arranged. Similarly here itertool.permutations() method provides us with all the possible arrangements that can be there for an iterator and all elements are assumed to be unique on the basis of their position and not by their value or category. All these permutations are provided in lexicographical order. The function itertool.permutations() takes an iterator and ‘r’ (length of permutation needed) as input and assumes ‘r’ as default length of iterator if not mentioned and returns all possible permutations of length ‘r’ each. Syntax:\n\nTime Complexity: O(n!) where n is the size of the string.\n\nAuxiliary Space: O(n*n!)"
    },
    {
        "link": "https://docs.python.org/2.7/library/itertools.html?highlight=permutations",
        "document": ""
    },
    {
        "link": "https://docs.python.org/3.6/library/itertools.html",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/11840187/getting-permutations-in-python-itertools",
        "document": "The code in the documentation explains how the function is implemented, not how to use it. You want to do this:\n\nYou can print them all out by converting it to a list ( ), but you can just iterate over them in a loop if you want to do something else with them - eg,"
    },
    {
        "link": "https://note.nkmk.me/en/python-gcd-lcm",
        "document": "This article explains how to find the greatest common divisor (GCD) and least common multiple (LCM) in Python.\n\nNote that the specifications of functions provided in the standard library differ depending on the Python version.\n• Python 3.9 or later\n• GCD: (Supports three or more arguments)\n• LCM: (Supports three or more arguments)\n\nAll sample code in this article assumes that the module has been imported.\n\nThe function was added to the module in Python 3.5.\n\nNote that in Python 3.4 or earlier, the function is located in the module, not the module. Therefore, you need to import and use .\n\nThe function was added to the module in Python 3.9.\n\nIn Python 3.8 or earlier, is not provided, but it can be calculated using .\n\nNote that the function provided in the example above does not check if the arguments are integers.\n\nGCD and LCM of three or more numbers\n\nIn Python 3.9 or later, both and support an arbitrary number of arguments.\n\nIf you want to find the GCD and LCM of the elements within a list, use to unpack the list as arguments.\n• Unpack and pass list, tuple, dict to function arguments in Python\n\nIn Python 3.8 or earlier, supports only two arguments.\n\nTo find the GCD and LCM of three or more integers, just calculate them cumulatively.\n\nUse the function of the module.\n\nWhen called without arguments, returns , and returns .\n\nThe functions defined above raise an error without arguments.\n\nTo get the same result as and , specify the third argument of ."
    },
    {
        "link": "https://programiz.com/python-programming/examples/lcm",
        "document": "The least common multiple (L.C.M.) of two numbers is the smallest positive integer that is perfectly divisible by the two given numbers.\n\nFor example, the L.C.M. of 12 and 14 is 84.\n\nNote: To test this program, change the values of and .\n\nThis program stores two number in and respectively. These numbers are passed to the function. The function returns the L.C.M of two numbers.\n\nIn the function, we first determine the greater of the two numbers since the L.C.M. can only be greater than or equal to the largest number. We then use an infinite while loop to go from that number and beyond.\n\nIn each iteration, we check if both the numbers perfectly divide our number. If so, we store the number as L.C.M. and break from the loop. Otherwise, the number is incremented by 1 and the loop continues.\n\nThe above program is slower to run. We can make it more efficient by using the fact that the product of two numbers is equal to the product of the least common multiple and greatest common divisor of those two numbers.\n\nHere is a Python program to implement this.\n\nThe output of this program is the same as before. We have two functions and . We require G.C.D. of the numbers to calculate its L.C.M.\n\nSo, calls the function to accomplish this. G.C.D. of two numbers can be calculated efficiently using the Euclidean algorithm."
    },
    {
        "link": "https://geeksforgeeks.org/python-program-to-find-the-gcd-of-two-numbers",
        "document": "Python Program to Find the Gcd of Two Numbers\n\nThe task of finding the GCD (Greatest Common Divisor) of two numbers in Python involves determining the largest number that divides both input values without leaving a remainder. For example, if a = 60 and b = 48, the GCD is 12, as 12 is the largest number that divides both 60 and 48 evenly.\n\nEuclidean algorithm repeatedly replaces the larger number with the remainder of the division until the remainder is zero. The last non-zero divisor is the GCD.\n\nExplanation: while loop runs until b becomes 0. In each iteration, a is updated to b and b is updated to a % b. When b becomes 0, the value of a is the GCD .\n\nmath.gcd() function is a built-in function in python hence an efficient way to find the GCD of two numbers in Python, internally using the Euclidean algorithm.\n\nExplanation: math.gcd(a, b) takes and as arguments and returns their GCD. when it is called, it computes the GCD and directly returns the result.\n\nThis method repeatedly subtracts the smaller number from the larger one until both numbers become equal, resulting in the GCD.\n\nExplanation: while loop runs until a becomes equal to b. In each iteration, if a is greater than b, b is subtracted from a otherwise, a is subtracted from b. When both values become equal, that value is the GCD."
    },
    {
        "link": "https://docs.vultr.com/python/examples/find-lcm",
        "document": "Calculating the Lowest Common Multiple (LCM) of two numbers is a fundamental problem in mathematics that often finds applications in solving more complex arithmetic operations and programming scenarios. The LCM is the smallest non-zero number that is a multiple of two or more integers. Understanding how to compute the LCM can be critically valuable in areas such as number theory, algorithms, and computer applications that require optimization of resources or scheduling.\n\nIn this article, you will learn how to efficiently compute the LCM of two numbers using Python. Through practical examples, explore the implementation of a function to find the LCM, understand its workings with simple Python code examples, and observe how to apply this function in different scenarios.\n\nThe LCM of two numbers can be easily calculated if you know the Greatest Common Divisor (GCD) of those numbers.\n\nPython provides a built-in function to find the GCD in the module, which can be leveraged to find the LCM as follows:\n• None Import the function from the module.\n• None Within , compute the absolute product of the two numbers.\n• None Utilize the function to divide the product by the GCD of the two numbers.\n• \"LCM of 12 and 18 is:\" This code defines a function that computes the LCM of two integers using the formula based on GCD. It uses the function to simplify the calculation, ensuring efficiency.\n\nIn scenarios dealing with more than two numbers, modify the approach to compute the LCM iteratively:\n• None Start with the LCM of the first two numbers.\n• None Use the obtained LCM with the next number in a cumulative fashion until all numbers are processed.\n• None Implement this approach in a function by looping over a list of numbers. # Example with a list of numbers This snippet illustrates a method to compute the LCM of a list of integers. It processes each number incrementally, updating the LCM based on the previously computed value.\n\nHaving learned how to compute the LCM using Python, apply this knowledge to various problems that require common multiples, such as in scheduling tasks or reducing fractions. The ability to compute the LCM efficiently using Python's built-in functionalities not only simplifies development but also enhances the performance of applications involving numerical calculations and optimizations. Use these techniques to maintain clear, optimized, and effective code when dealing with common multiple-based scenarios."
    },
    {
        "link": "https://medium.com/data-science/pythonic-tips-tricks-finding-the-gcd-and-lcm-34b08b6e232b",
        "document": "The Way of the Serpent\n\nFor a lot of us, finding the greatest common denominator between numbers was a common exercise in grade school math. However, in the real world finding GCDs can form an integral part of our algorithms and analysis. In this article we shall go over how to get GCDs under different scenarios.\n\nSounds simple enough, let’s see a typical algorithm that find the GCD of two integers. A common algorithm is the one below:\n\nThis is a fairly straightforward algorithm and does give us the GCD. However, there are better ways and more efficient ways to structure the algorithm. For starters let’s see how many iterations it takes for the algorithm to find the GCD.\n\nWe can see that the algorithm will go through 20 iterations before the GCD is found. If we were to run this algorithm over a much larger dataset then high number of iterations would definitely be an issue.\n\nInstead, let us try a much simpler algorithm.\n\nThe second function is significantly cleaner than the first. We also make use of the % or modular operator. What it does is essentially return the remained between two numbers. If the first number is perfectly divisible by the second number then the operation will return 0.\n\nNow let us check how many iterations our second GCD Function has to go through before it returns the GCD.\n\nAmazing! We can see that this algorithm will get us the GCD in only 2 iterations. This is much more efficient than our first function. We can actually make one more improvement to our function. The line num2 != 0 is actually superfluous. We can shorten it to simply while (num2). Our resulting function will then be as follows.\n\nExcellent, we have found a pretty efficient algorithm to allow us to search for the GCD. From here we can actually find the Least Common Multiplier (LCM).\n\nPut simply, the Least Common Multiplier is the smallest number that is evenly divisible by two or more numbers. To construct a function that can search for it we can make use of our GCD function.\n\nWe can see that the Least Common Multiple function is able to retrieve the correct numbers. Now let us generalize our functions so that they will be able to work with any quantity of numbers.\n\nTo be able to do this we must import the reduce function from the functools library.\n\nNice, we were able to generate a function that can take a list and generate the GCD and LCM.\n\nIn this article, we were able to successfully create functions to find the GCD and LCM of a list of integers. Both values are quite useful for data scientists as they allow us to get a better idea of the data we are handling. Though this article was rather general, in future articles we shall go over the many uses of these statistics and apply them to real world data. For now, I hope that you were able to find this information useful for your current task."
    }
]