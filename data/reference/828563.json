[
    {
        "link": "https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html",
        "document": "\n• Returns a string whose value is this string, with incidental white space removed from the beginning and end of every line. Incidental white space is often present in a text block to align the content with the opening delimiter. For example, in the following code, dots represent incidental white space: This method treats the incidental First, the individual lines of this string are extracted. A line is a sequence of zero or more characters followed by either a line terminator or the end of the string. If the string has at least one line terminator, the last line consists of the characters between the last terminator and the end of the string. Otherwise, if the string has no terminators, the last line is the start of the string to the end of the string, in other words, the entire string. A line does not include the line terminator. This method treats the incidental white space as indentation to be stripped, producing a string that preserves the relative indentation of the content. Using | to visualize the start of each line of the string:First, the individual lines of this string are extracted. Ais a sequence of zero or more characters followed by either a line terminator or the end of the string. If the string has at least one line terminator, the last line consists of the characters between the last terminator and the end of the string. Otherwise, if the string has no terminators, the last line is the start of the string to the end of the string, in other words, the entire string. A line does not include the line terminator. Then, the minimum indentation (min) is determined as follows:\n• None For each non-blank line (as defined by ), the leading white space characters are counted.\n• None The leading white space characters on the last line are also counted even if blank. The min value is the smallest of these counts. For each non-blank line, min leading white space characters are removed, and any trailing white space characters are removed. Blank lines are replaced with the empty string. Finally, the lines are joined into a new string, using the LF character (U+000A) to separate lines. This method's primary purpose is to shift a block of lines as far as possible to the left, while preserving relative indentation. Lines that were indented the least will thus have no leading white space. The result will have the same number of line terminators as this string. If this string ends with a line terminator then the result will end with a line terminator. This method treats all white space characters as having equal width. As long as the indentation on every line is consistently composed of the same character sequences, then the result will be as described above."
    },
    {
        "link": "https://cs.usfca.edu/~cs272/javadoc/api/java.base/java/lang/String.html",
        "document": ""
    },
    {
        "link": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
        "document": "\n• Returns the length of this string. The length is equal to the number of Unicode code units in the string. the length of the sequence of characters represented by this object.\n• if, and only if, . Returnsif, and only if, is if is , otherwise\n• value at the specified index. An index ranges from to . The first value of the sequence is at index , the next at index , and so on, as for array indexing. Returns thevalue at the specified index. An index ranges fromto. The firstvalue of the sequence is at index, the next at index, and so on, as for array indexing. If the value specified by the index is a surrogate, the surrogate value is returned. - the index of the value. the value at the specified index of this string. The first value is at index . - if the argument is negative or not less than the length of this string.\n• values (Unicode code units) and ranges from to . Returns the character (Unicode code point) at the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value specified at the given index is in the high-surrogate range, the following index is less than the length of this , and the value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the value at the given index is returned. - the index to the values the code point value of the character at the - if the argument is negative or not less than the length of this string.\n• values (Unicode code units) and ranges from to Returns the character (Unicode code point) before the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value at is in the low-surrogate range, is not negative, and the value at is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the value at is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned. - the index following the code point that should be returned the Unicode code point value before the given index. - if the argument is less than 1 or greater than the length of this string.\n• Returns the number of Unicode code points in the specified text range of this . The text range begins at the specified and extends to the at index . Thus the length (in s) of the text range is . Unpaired surrogates within the text range count as one code point each. - the index to the first of the text range. - the index after the last of the text range. the number of Unicode code points in the specified text range - if the is negative, or is larger than the length of this , or is larger than .\n• Returns the index within this that is offset from the given by code points. Unpaired surrogates within the text range given by and count as one code point each. - the index to be offset the index within this - if is negative or larger then the length of this , or if is positive and the substring starting with has fewer than code points, or if is negative and the substring before has fewer than the absolute value of code points.\n• Copies characters from this string into the destination character array. The first character to be copied is at index ; the last character to be copied is at index (thus the total number of characters to be copied is ). The characters are copied into the subarray of starting at index and ending at index: - index of the first character in the string to copy. - index after the last character in the string to copy. - the start offset in the destination array. - If any of the following is true:\n• is greater than the length of this string\n• Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in any way. The first character to be copied is at index ; the last character to be copied is at index . The total number of characters to be copied is . The characters, converted to bytes, are copied into the subarray of starting at index and ending at index: - Index of the first character in the string to copy - Index after the last character in the string to copy - The start offset in the destination array - If any of the following is true:\n• is greater than the length of this String\n• into a sequence of bytes using the named charset, storing the result into a new byte array. Encodes thisinto a sequence of bytes using the named charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the given charset is unspecified. The class should be used when more control over the encoding process is required. - The name of a supported charset - If the named charset is not supported\n• into a sequence of bytes using the given Encodes thisinto a sequence of bytes using the given charset , storing the result into a new byte array. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array. The class should be used when more control over the encoding process is required. - The Charset to be used to encode the\n• into a sequence of bytes using the platform's default charset, storing the result into a new byte array. Encodes thisinto a sequence of bytes using the platform's default charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the default charset is unspecified. The class should be used when more control over the encoding process is required.\n• Compares this string to the specified object. The result is if and only if the argument is not and is a object that represents the same sequence of characters as this object. - The object to compare this against if the given object represents a equivalent to this string, otherwise\n• Compares this string to the specified . The result is if and only if this represents the same sequence of characters as the specified . This method synchronizes on the . - The to compare this against if this represents the same sequence of characters as the specified , otherwise\n• Compares this string to the specified . The result is if and only if this represents the same sequence of char values as the specified sequence. Note that if the is a then the method synchronizes on it. - The sequence to compare this against if this represents the same sequence of char values as the specified sequence, otherwise\n• to another , ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Compares thisto another, ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Two characters and are considered the same ignoring case if at least one of the following is true:\n• The two characters are the same (as compared by the operator)\n• Applying the method to each character produces the same result\n• Applying the method to each character produces the same result - The to compare this against if the argument is not and it represents an equivalent ignoring case; otherwise\n• object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this object lexicographically precedes the argument string. The result is a positive integer if this object lexicographically follows the argument string. The result is zero if the strings are equal; returns exactly when the . Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by thisobject is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if thisobject lexicographically precedes the argument string. The result is a positive integer if thisobject lexicographically follows the argument string. The result is zero if the strings are equal;returnsexactly when the method would return This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let k be the smallest such index; then the string whose character at position k has the smaller value, as determined by using the < operator, lexicographically precedes the other string. In this case, returns the difference of the two character values at position in the two string -- that is, the value: If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, returns the difference of the lengths of the strings -- that is, the value: If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case,returns the difference of the lengths of the strings -- that is, the value: - the to be compared. the value if the argument string is equal to this string; a value less than if this string is lexicographically less than the string argument; and a value greater than if this string is lexicographically greater than the string argument.\n• with normalized versions of the strings where case differences have been eliminated by calling on each character. Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of callingwith normalized versions of the strings where case differences have been eliminated by callingon each character. Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The java.text package provides collators to allow locale-sensitive ordering. - the to be compared. a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this String, ignoring case considerations.\n• Tests if two string regions are equal. A substring of this object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this object to be compared begins at index and has length . The substring of other to be compared begins at index and has length . The result is if and only if at least one of the following is true:\n• is greater than the length of this object.\n• is greater than the length of the other argument.\n• There is some nonnegative integer k less than such that: k k - the starting offset of the subregion in this string. - the starting offset of the subregion in the string argument. - the number of characters to compare. if the specified subregion of this string exactly matches the specified subregion of the string argument; otherwise.\n• Tests if two string regions are equal. A substring of this object is compared to a substring of the argument . The result is if these substrings represent character sequences that are the same, ignoring case if and only if is true. The substring of this object to be compared begins at index and has length . The substring of to be compared begins at index and has length . The result is if and only if at least one of the following is true:\n• is greater than the length of this object.\n• is greater than the length of the other argument.\n• is and there is some nonnegative integer k less than such that:\n• is and there is some nonnegative integer k less than such that: and: - the starting offset of the subregion in this string. - the starting offset of the subregion in the string argument. - the number of characters to compare. if the specified subregion of this string matches the specified subregion of the string argument; otherwise. Whether the matching is exact or case insensitive depends on the argument.\n• Tests if the substring of this string beginning at the specified index starts with the specified prefix. - where to begin looking in this string. if the character sequence represented by the argument is a prefix of the substring of this object starting at index ; otherwise. The result is if is negative or greater than the length of this object; otherwise the result is the same as the result of the expression\n• Tests if this string starts with the specified prefix. if the character sequence represented by the argument is a prefix of the character sequence represented by this string; otherwise. Note also that will be returned if the argument is an empty string or is equal to this object as determined by the method.\n• Tests if this string ends with the specified suffix. if the character sequence represented by the argument is a suffix of the character sequence represented by this object; otherwise. Note that the result will be if the argument is the empty string or is equal to this object as determined by the method.\n• object is computed as using arithmetic, where is the ith character of the string, is the length of the string, and indicates exponentiation. (The hash value of the empty string is zero.) Returns a hash code for this string. The hash code for aobject is computed asusingarithmetic, whereis theth character of the string,is the length of the string, andindicates exponentiation. (The hash value of the empty string is zero.) a hash code value for this object.\n• occurs in the character sequence represented by this object, then the index (in Unicode code units) of the first such occurrence is returned. For values of in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: is true. For other values of , it is the smallest value k such that: is true. In either case, if no such character occurs in this string, then is returned. Returns the index within this string of the first occurrence of the specified character. If a character with valueoccurs in the character sequence represented by thisobject, then the index (in Unicode code units) of the first such occurrence is returned. For values ofin the range from 0 to 0xFFFF (inclusive), this is the smallest valuesuch that:is true. For other values of, it is the smallest valuesuch that:is true. In either case, if no such character occurs in this string, thenis returned. the index of the first occurrence of the character in the character sequence represented by this object, or if the character does not occur.\n• Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index. If a character with value occurs in the character sequence represented by this object at an index no smaller than , then the index of the first such occurrence is returned. For values of in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: is true. For other values of , it is the smallest value k such that: is true. In either case, if no such character occurs in this string at or after position , then is returned. is true. For other values of, it is the smallest valuesuch that:is true. In either case, if no such character occurs in this string at or after position, thenis returned. There is no restriction on the value of . If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: is returned. All indices are specified in values (Unicode code units). - the index to start the search from. the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to , or if the character does not occur.\n• in the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest value k such that: is true. For other values of , it is the largest value k such that: is true. In either case, if no such character occurs in this string, then is returned. The is searched backwards starting at the last character. Returns the index within this string of the last occurrence of the specified character. For values ofin the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest valuesuch that:is true. For other values of, it is the largest valuesuch that:is true. In either case, if no such character occurs in this string, thenis returned. Theis searched backwards starting at the last character. the index of the last occurrence of the character in the character sequence represented by this object, or if the character does not occur.\n• in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value k such that: is true. For other values of , it is the largest value k such that: is true. In either case, if no such character occurs in this string at or before position , then is returned. Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. For values ofin the range from 0 to 0xFFFF (inclusive), the index returned is the largest valuesuch that:is true. For other values of, it is the largest valuesuch that:is true. In either case, if no such character occurs in this string at or before position, thenis returned. All indices are specified in values (Unicode code units). - the index to start the search from. There is no restriction on the value of . If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned. the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to , or if the character does not occur before that point.\n• Returns the index within this string of the first occurrence of the specified substring. The returned index is the smallest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. the index of the first occurrence of the specified substring, or if there is no such occurrence.\n• Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The returned index is the smallest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. - the index from which to start the search. the index of the first occurrence of the specified substring, starting at the specified index, or if there is no such occurrence.\n• . Returns the index within this string of the last occurrence of the specified substring. The last occurrence of the empty string \"\" is considered to occur at the index value The returned index is the largest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. the index of the last occurrence of the specified substring, or if there is no such occurrence.\n• Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index. The returned index is the largest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. - the index to start the search from. the index of the last occurrence of the specified substring, searching backward from the specified index, or if there is no such occurrence.\n• Returns a string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string. - if is negative or larger than the length of this object.\n• and extends to the character at index . Thus the length of the substring is . Returns a string that is a substring of this string. The substring begins at the specifiedand extends to the character at index. Thus the length of the substring is - if the is negative, or is larger than the length of this object, or is larger than .\n• Returns a character sequence that is a subsequence of this sequence. An invocation of this method of the form behaves in exactly the same way as the invocation behaves in exactly the same way as the invocation This method is defined so that the class can implement the interface. - if or is negative, if is greater than , or if is greater than\n• Concatenates the specified string to the end of this string. If the length of the argument string is , then this object is returned. Otherwise, a object is returned that represents a character sequence that is the concatenation of the character sequence represented by this object and the character sequence represented by the argument string. - the that is concatenated to the end of this . a string that represents the concatenation of this object's characters followed by the string argument's characters.\n• in this string with . Returns a string resulting from replacing all occurrences ofin this string with If the character does not occur in the character sequence represented by this object, then a reference to this object is returned. Otherwise, a object is returned that represents a character sequence identical to the character sequence represented by this object, except that every occurrence of is replaced by an occurrence of . \"mesquite in your cellar\".replace('e', 'o') returns \"mosquito in your collar\" \"the war of baronets\".replace('r', 'y') returns \"the way of bayonets\" \"sparring with a purple porpoise\".replace('p', 't') returns \"starring with a turtle tortoise\" \"JonL\".replace('q', 'x') returns \"JonL\" (no change) a string derived from this string by replacing every occurrence of with .\n• Tells whether or not this string matches the given regular expression An invocation of this method of the form str regex yields exactly the same result as the expression - the regular expression to which this string is to be matched if, and only if, this string matches the given regular expression - if the regular expression's syntax is invalid\n• Returns true if and only if this string contains the specified sequence of char values. - the sequence to search for true if this string contains , false otherwise\n• Replaces the first substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str regex repl yields exactly the same result as the expression Note that backslashes ( ) and dollar signs ( ) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see . Use to suppress the special meaning of these characters, if desired. - the regular expression to which this string is to be matched - the string to be substituted for the first match - if the regular expression's syntax is invalid\n• Replaces each substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str regex repl yields exactly the same result as the expression Note that backslashes ( ) and dollar signs ( ) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see . Use to suppress the special meaning of these characters, if desired. - the regular expression to which this string is to be matched - the string to be substituted for each match - if the regular expression's syntax is invalid\n• Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in \"ba\" rather than \"ab\". - The sequence of char values to be replaced\n• Splits this string around matches of the given regular expression The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string. When there is a positive-width match at the beginning of this string then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring. The parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit n is greater than zero then the pattern will be applied at most n - 1 times, the array's length will be no greater than n, and the array's last entry will contain all input beyond the last matched delimiter. If n is non-positive then the pattern will be applied as many times as possible and the array can have any length. If n is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded. The string , for example, yields the following results with these parameters: An invocation of this method of the form str. regex n yields the same result as the expression - the result threshold, as described above the array of strings computed by splitting this string around matches of the given regular expression - if the regular expression's syntax is invalid\n• Splits this string around matches of the given regular expression This method works as if by invoking the two-argument method with the given expression and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. The string , for example, yields the following results with these expressions: the array of strings computed by splitting this string around matches of the given regular expression - if the regular expression's syntax is invalid\n• joined together with a copy of the specified . Note that if an element is null, then is added. Returns a new String composed of copies of thejoined together with a copy of the specifiedNote that if an element is null, thenis added. - the delimiter that separates each element - the elements to join together. a new that is composed of the separated by the - If or is\n• composed of copies of the joined together with a copy of the specified . For example, List<String> strings = new LinkedList<>(); strings.add(\"Java\");strings.add(\"is\"); strings.add(\"cool\"); String message = String.join(\" \", strings); //message returned is: \"Java is cool\" Set<String> strings = new LinkedHashSet<>(); strings.add(\"Java\"); strings.add(\"is\"); strings.add(\"very\"); strings.add(\"cool\"); String message = String.join(\"-\", strings); //message returned is: \"Java-is-very-cool\" Note that if an individual element is , then is added. Returns a newcomposed of copies of thejoined together with a copy of the specifiedNote that if an individual element is, thenis added. - a sequence of characters that is used to separate each of the in the resulting - an that will have its joined together. a new that is composed from the argument - If or is\n• to lower case using the rules of the given . Case mapping is based on the Unicode Standard version specified by the may be a different length than the original . Converts all of the characters in thisto lower case using the rules of the given. Case mapping is based on the Unicode Standard version specified by the class. Since case mappings are not always 1:1 char mappings, the resultingmay be a different length than the original Examples of lowercase mappings are in the following table: - use the case transformation rules for this locale\n• to lower case using the rules of the default locale. This is equivalent to calling . Converts all of the characters in thisto lower case using the rules of the default locale. This is equivalent to calling Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, in a Turkish locale returns , where '\\u0131' is the LATIN SMALL LETTER DOTLESS I character. To obtain correct results for locale insensitive strings, use .\n• to upper case using the rules of the given . Case mapping is based on the Unicode Standard version specified by the may be a different length than the original . Converts all of the characters in thisto upper case using the rules of the given. Case mapping is based on the Unicode Standard version specified by the class. Since case mappings are not always 1:1 char mappings, the resultingmay be a different length than the original Examples of locale-sensitive and 1:M case mappings are in the following table. - use the case transformation rules for this locale\n• to upper case using the rules of the default locale. This method is equivalent to . Converts all of the characters in thisto upper case using the rules of the default locale. This method is equivalent to Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, in a Turkish locale returns , where '\\u0130' is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To obtain correct results for locale insensitive strings, use .\n• Returns a string whose value is this string, with any leading and trailing whitespace removed. If this object represents an empty character sequence, or the first and last characters of character sequence represented by this object both have codes greater than (the space character), then a reference to this object is returned. Otherwise, if there is no character with a code greater than in the string, then a object representing an empty string is returned. Otherwise, let k be the index of the first character in the string whose code is greater than , and let m be the index of the last character in the string whose code is greater than . A object is returned, representing the substring of this string that begins with the character at index k and ends with the character at index m-that is, the result of . This method may be used to trim whitespace (as defined above) from the beginning and end of a string. A string whose value is this string, with any leading and trailing white space removed, or this string if it has no leading or trailing white space.\n• This object (which is already a string!) is itself returned.\n• Converts this string to a new character array. a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string.\n• Returns a formatted string using the specified format string and arguments. The locale always used is the one returned by . - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by . The behaviour on a argument depends on the conversion. - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification.\n• Returns a formatted string using the specified locale, format string, and arguments. - The locale to apply during formatting. If is then no localization is applied. - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by . The behaviour on a argument depends on the conversion. - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification\n• Returns the string representation of the argument. if the argument is , then a string equal to ; otherwise, the value of is returned.\n• Returns the string representation of the array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the returned string. a that contains the characters of the character array.\n• array argument. Returns the string representation of a specific subarray of thearray argument. The argument is the index of the first character of the subarray. The argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string. a that contains the characters of the specified subarray of the character array. - if is negative, or is negative, or is larger than .\n• a that contains the characters of the specified subarray of the character array. - if is negative, or is negative, or is larger than .\n• a that contains the characters of the character array.\n• Returns the string representation of the argument. if the argument is , a string equal to is returned; otherwise, a string equal to is returned.\n• Returns the string representation of the argument. a string of length containing as its single character the argument .\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• A pool of strings, initially empty, is maintained privately by the class . When the intern method is invoked, if the pool already contains a string equal to this object as determined by the method, then the string from the pool is returned. Otherwise, this object is added to the pool and a reference to this object is returned. It follows that for any two strings and , is if and only if is . All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the . a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings."
    },
    {
        "link": "https://freedocs.mi.hdm-stuttgart.de/doc/openjdk-17-doc/api/java.base/java/lang/String.html",
        "document": "\n• Returns a string whose value is this string, with incidental white space removed from the beginning and end of every line. Incidental white space is often present in a text block to align the content with the opening delimiter. For example, in the following code, dots represent incidental white space: This method treats the incidental First, the individual lines of this string are extracted. A line is a sequence of zero or more characters followed by either a line terminator or the end of the string. If the string has at least one line terminator, the last line consists of the characters between the last terminator and the end of the string. Otherwise, if the string has no terminators, the last line is the start of the string to the end of the string, in other words, the entire string. A line does not include the line terminator. This method treats the incidental white space as indentation to be stripped, producing a string that preserves the relative indentation of the content. Using | to visualize the start of each line of the string:First, the individual lines of this string are extracted. Ais a sequence of zero or more characters followed by either a line terminator or the end of the string. If the string has at least one line terminator, the last line consists of the characters between the last terminator and the end of the string. Otherwise, if the string has no terminators, the last line is the start of the string to the end of the string, in other words, the entire string. A line does not include the line terminator. Then, the minimum indentation (min) is determined as follows:\n• None For each non-blank line (as defined by ), the leading white space characters are counted.\n• None The leading white space characters on the last line are also counted even if blank. The min value is the smallest of these counts. For each non-blank line, min leading white space characters are removed, and any trailing white space characters are removed. Blank lines are replaced with the empty string. Finally, the lines are joined into a new string, using the LF character (U+000A) to separate lines. This method's primary purpose is to shift a block of lines as far as possible to the left, while preserving relative indentation. Lines that were indented the least will thus have no leading white space. The result will have the same number of line terminators as this string. If this string ends with a line terminator then the result will end with a line terminator. This method treats all white space characters as having equal width. As long as the indentation on every line is consistently composed of the same character sequences, then the result will be as described above."
    },
    {
        "link": "https://stackoverflow.com/questions/3450604/why-is-there-no-string-empty-in-java",
        "document": "Closed. This question is . This question is opinion-based . It is not currently accepting answers. Want to improve this question? Update the question so it can be answered with facts and citations by editing this post. The community reviewed whether to reopen this question 3 years ago and left it closed: I understand that every time I type the string literal , the same String object is referenced in the string pool. But why doesn't the String API include a , so I could use references to ? It would save on compile time, at the very least, since the compiler would know to reference the existing String, and not have to check if it had already been created for reuse, right? And personally I think a proliferation of string literals, especially tiny ones, in many cases is a \"code smell\". So was there a Grand Design Reason behind no String.Empty, or did the language creators simply not share my views?"
    },
    {
        "link": "https://stackoverflow.com/questions/70994407/java-stringbuilder-argument-performance",
        "document": "I came across the following code:\n\nMy question is what the performance/memory differences would be to use the following code instead:\n\nI saw a lot of questions/answers showing that using: is wasteful (essentially creating a new StringBuilder on every loop iteration), but didn't see any direct answers regarding the above situation. I have also seen that the length of the strings matters, and would be interested in seeing how the following code would compare:\n\nI expect the second loop will be fastest (chaining .append), but am interested if there's some hidden details. Looking forward to see what others find or know!"
    },
    {
        "link": "https://geeksforgeeks.org/stringbuilder-class-in-java-with-examples",
        "document": "In Java, StringBuilder class is a part of the package that provides a mutable sequence of characters. Unlike , which creates a new object for every modification, StringBuilder allows in-place changes, making it memory-efficient and faster for large or frequent string manipulations.\n• None in Java creates an immutable sequence of characters, whereas StringBuilder creates a mutable sequence of characters, offering an alternative.\n• None Functionality of StringBuilder is similar to the StringBuffer class, as both provide mutable sequences of characters.\n• None StringBuilder is designed as a drop-in replacement for StringBuffer in scenarios where StringBuffer is used by a single thread.\n• None StringBuilder is faster than StringBuffer in most implementations.\n• None StringBuilder is not thread-safe and should not be used in multi-threaded environments. If thread safety is required, it is recommended to use StringBuffer instead.\n• None StringBuilder is high in performance but lacks thread-safety compared to StringBuffer.\n\nExample: Here, you can see all Type of methods which included , , , , , etc. in StringBuilder class.\n• None The code demonstrates the usage of multiple StringBuilder methods , , , , ,\n• “GeeksforGeeks” is used the operations to make the examples."
    },
    {
        "link": "https://stackify.com/dos-and-donts-of-java-strings",
        "document": "Today we’re going to be talking about Strings in Java.\n\nIf you write Java often, you know that a String is considered a first-class object, even though it is not one of the eight primitive types. What you may not know is how to handle Strings in production applications best. From handling internationalization and localization to optimizing performance for large-scale applications, understanding how to work with Strings can significantly improve code quality and maintainability.\n\nLet’s dive into how to handle Strings in your Java projects best, ensuring both efficiency and clarity.\n\nWhen working with large-scale Strings in Java, understanding best practices is crucial to avoid common performance pitfalls. Since Java Strings are immutable, any modification creates new objects, which can lead to memory overhead and slower execution when handling large data sets. For efficient string operations, especially in production-grade applications, adopting approaches like using StringBuilder ensures better performance and optimized resource utilization.\n\nThis immutability is essential to understand when dealing with large-scale operations on Strings. Improper handling, like frequent concatenation, can result in excessive memory usage and poor performance. Let’s dive into best practices for managing large Strings efficiently.\n\nBut you have to remember that the second assignment actually creates a String (the value “green”), and reassigns favoriteColor (the reference) to that value. The old String (the value “red”) is orphaned and will eventually be garbage collected.\n\nThis is why concatenating Strings many, many, many times is a bad idea. Each time you concatenate, your application takes the hit of implicitly making a new String. Let’s look at an example where we want to read in the long file of HTML colors, named “colorNames.dat”:\n\nThe ColorList class reads each line of this file and makes one long String, complete with newline characters.\n\nNote that the line inside of the for loop is actually creating four new Strings: One for the contents of the line, one for the newline character, one that combines them both, and one that appends that String to the current contents of retVal. To make matters worse, the old contents of retVal are then thrown away and replaced with this new String. No bueno!\n\nThis process results in excessive memory usage and performance degradation, especially for large files. The solution to this kind of problem is to use StringBuffer – or the newer, similarly-named StringBuilder.\n\nBoth define themselves as “a mutable sequence of characters”, which solves the immutability problem.\n• StringBuffer: StringBuffer has existed since Java 1.0 and is thread-safe, meaning that threads sharing a “consistent and unchanging view of the source” can safely access and operate on the StringBuffer object. To keep things simple, and generally more performant, the documentation recommends using StringBuilder instead.\n• StringBuilder: Introduced in Java 1.5, StringBuilder has the same interface as its predecessor but is not thread-safe because it doesn’t guarantee synchronization. Assuming you’re trying to build a very large String from a single source (such as a file or database), it’s usually sufficient to assign that job to a thread and walk away. StringBuilder is perfectly suitable for that job, and we prefer to use it over StringBuffer when we can.\n\nIf we crank the number of lines in our colorNames.dat file up to about 122,000 and then compare the concatenate and StringBuilder approaches from the main method:\n\nWe see that the concatenate approach takes about 50 seconds to execute, while the StringBuilder approach comes in at 0.7 seconds. That performance saving is huuuuge!\n\nThis is a simple and easy-to-measure example. If you’re looking to get a handle on your entire application’s performance problems, check out some beefier performance tools for Java applications.\n\nTo Concatenate or Not to Concatenate?\n\nLet’s suppose we want to factor the user’s favorite color into the system’s response, so that it tells the user, “Oh yes, ____ is also my favorite color!” You might break this up into two strings: “Oh yes, “ and “is also my favorite color!”. The result would look something like this:\n\nBut this is bad news for i18n/l10n, because different languages often rearrange the order of nouns, verbs, and adjectives. Some portions of the message may vary depending on the gender of a noun, the [past/present/future] tense in question, or is receiving the message. It’s best to keep messages contiguous and succinct, replacing values only when needed. You can use one of String’s replace functions, but String. format is mainly for this purpose:\n\nConcatenation is perfectly fine when used to build Strings meant for computer consumption. Building huge Strings? You’re going to need something better than concatenation there, too.\n\nThis is a simple and easy-to-measure example. If you’re looking to get a handle on your entire application’s performance problems, check out some beefier performance tools for Java applications.\n\nUnderstanding string equality is vital for writing efficient and error-free Java programs. Since Java Strings are immutable, comparing strings involves evaluating their values rather than their references in memory.\n\nBest practices dictate always using the .equals method for value comparison to avoid unexpected outcomes, especially when algorithms for searching or sorting rely on this method.\n\nIn this section, you will explore how Java handles string equality, its nuances, and how to implement custom comparison logic when default methods fall short. Let’s recall this classic piece of Java wisdom:\n\nAlthough s1 and s2 are different variables, Java (in an effort to be efficient and helpful) realizes that s2 contains the same value as s1, so it points it to the same place in memory. This is why it considers them to be the same reference. By contrast, s4 has the same value as s3 but explicitly allocates a new location in memory for this value. When the time comes to see if they have the same reference, we see that they do not.\n\nHow Java manages its Strings’ references is generally best left to the compiler, but we must remain aware of it nonetheless. This is why, when we care about two Strings’ respective , we must always use .equals, remembering that algorithms that search or sort Strings will rely on this method as well.\n\nConsider the following example, containing two strings whose values represent “dark blue” in French:\n\nThe .equals method compares character-by-character and notices that s1 and s2 are not equal due to the case. The String class offers a convenient method called .equalsIgnoreCase that we can use to ignore the discrepancy. But what happens when we realize that there should actually be an accent on the final character (the correct word in French is “foncé”) but we want to continue accepting the old value and consider them both equal?\n\nOnce again, these Strings are not equal because of the accent character and the whitespace. In this case, we need to specify a way to compare the Strings with a Comparator.\n\nComparators are particularly useful when you want to normalize Strings in a certain way before comparing them, but you don’t want that logic littered throughout your code.\n\nFirst, we make a class that implements Comparator, which gives the equality logic a nice home. This particular Comparator does everything the default String Comparator would do, except it trims the Strings and compares them case-insensitively.\n\nThen we change the main method to use the Comparator:\n\nOnly one problem remains. Running the code above will still fail to consider these two Strings equal because of the accent character. Here’s where collation comes in.\n\nWhen and How to Internationalize/Localize a Java String\n\nInternationalization (i18n) is the process of process of providing human-readable Strings in different languages, whereas localization (l10n) takes further geographical and cultural concerns into account.\n\nInternationalization is coarse whereas localization is granular. For example, the Strings “Choose your favorite color” and “Choose your favourite colour” are both English (i18n). But the former is used in the United States (en-US) and the latter is used in Great Britain (en-GB). (These codes are defined in “Tags for Identifying Languages”, as outlined in RFC 5646.)\n\nBeyond standard messaging, i18n/l10n is also extremely important when representing dates/times and currency. The result of translating Strings into lengthier languages – say, German – can cause even the most meticulously think-out UI to be a complete revision while adding support for double-byte character sets (i.e. Chinese, Japanese, Korean) can often require impactful changes throughout your entire stack.\n\nThat said, it obviously isn’t necessary to translate every String in your application – only the ones that humans will see.\n\nIf, for example, you have a server-side RESTful API written in Java, you would either a) look for an Accept-Language header on requests, apply settings as needed, then return a localized response or b) return a generally unaltered response, except for error cases that return an error code (that the front-end then uses to look up a translated String to show to the user). You’d choose b if the front end is known and within your control. You’d choose a if the raw response (even error responses) will be presented wholesale to the user. Or if your API is available to unknown consumers and you aren’t sure how the responses will be used.\n\nJava applications that present Strings directly to potentially non-English-speaking humans will, of course, need to be translated. Consider again the example where a user is asked to enter his or her favorite color:\n\nThe Java IDE I use, Eclipse, provides a nice way to extract the Strings from the Interviewer class.\n\n…and get them into a .properties file that I adjust to look like this:\n\nUnfortunately, this process makes the Strings no longer constant as far as the switch statement is concerned.\n\nThis is a bit unfortunate, but also an opportunity for us to anticipate that this application may – at some point in the future – need to handle more than just three colors. In the Messages class that Eclipse made for me, I add a method that will return any key/value pair given a prefix:\n\nAnd the Interviewer class uses this to more dynamically look up the user’s response and act on it:\n\nThe result is that the application can be easily translated. Based on some condition (like an environment variable or user request), you can use Java’s ResourceBundle to load a different properties file that serves up locale-specific messages.\n\nCollation is the process of determining order (and thus, equality) given a particular ruleset. You may have heard the term collation used in the context of databases, where there may be a setting to establish the default collation for strings, money, or dates therein.\n\nIn Java, Collator is an abstract class that implements Comparator. That means that we could replace the Comparator Code in the main method. But I’ve opted to keep that interface intact and change the implementation of the compare method instead:\n\nA few noteworthy changes here:\n• The .trim and the .compareToIgnoreCase have been removed\n• I’ve hard-coded a Locale for illustration purposes – normally this would be based on some condition (like an environment variable or user request)\n• The strength of the Collator is set to PRIMARY\n\nThe strength part is important. Collator provides four strengths from which to choose: PRIMARY, SECONDARY, TERTIARY, and IDENTICAL. The PRIMARY strength indicates that both whitespace and case can be ignored, and that – for comparison purposes – the difference between e and é can also be ignored. Experiment with different locales and strengths to learn more about how collation works.\n\nAlso, check out Oracle’s Internationalization tutorial for a walk-through on Locales, Collators, Unicode, and more.\n\nUse Charset for Encoding and Decoding Strings\n\nWhen working with strings that need to be encoded (e.g., for network transmission) or decoded (e.g., from external sources), always specify the character set explicitly. Java’s java.nio.charset.Charset ensures predictable behavior across platforms.\n\nIn Java, it’s easy to take Strings for granted because whatever we want to do “just works”. But can it work… ? ? Everywhere in the world ?! The answer, of course, is yes, yes, and yes! It just takes a little bit of experimenting to more thoroughly understand how Strings work. That understanding will help you be ready for whatever String-related requirements come your way in Java land.\n\nReady to take your Java development to the next level? Schedule a demo with Stackify to explore how our tools can help you optimize and monitor your applications effectively."
    },
    {
        "link": "https://stackoverflow.com/questions/75540485/which-string-concatenation-is-best-for-performance-pairstring-string-vs-strin",
        "document": "I am new to using Apache Commons pair. I need some advice what the best approach is when performance and optimization is priority.\n\nIf I want to concatenate str1 and str2, I can choose from the following approaches\n\nSo I thought, maybe would be best?\n\nThe newStr is not within a loop. A colleague told me about possible HeapMemory issue when Strings are stored at runtime."
    },
    {
        "link": "https://medium.com/@murat.bilal/optimizing-string-operations-in-java-with-stringbuilder-985d6bfccb83",
        "document": "A mutable sequence of characters. This class provides an API compatible with , but with no guarantee of synchronization. This class is designed for use as a drop-in replacement for in places where the string buffer was being used by a single thread (as is generally the case). Where possible, it is recommended that this class be used in preference to as it will be faster under most implementations.(Source: https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html)\n\nThe principal operations on a are the and methods, which are overloaded so as to accept data of any type. Each effectively converts a given datum to a string and then appends or inserts the characters of that string to the string builder. The method always adds these characters at the end of the builder; the method adds the characters at a specified point.\n\nThe StringBuilder class provides a mutable alternative to strings, allowing you to efficiently modify strings without creating new objects.\n\nStrings in Java are immutable. This means that every time you modify a string, a new string object is created in memory. If you’re modifying a string repeatedly within a loop, as in the DNA transcription example(below example), this can lead to significant performance overhead due to the constant creation and garbage collection of string objects.\n\n, on the other hand, is designed for efficient string modification. It operates on a mutable character array, allowing you to modify the string in place without creating new objects. This can result in substantial performance improvements.\n\nprovides various methods for manipulating strings, including , , , , and more.\n\nBy using , you can avoid the overhead of creating new objects for each modification, leading to improved performance, especially when dealing with large or frequently changing strings.\n\nIn DNA transcription, the genetic information stored in DNA is copied into RNA. This process involves replacing certain nucleotides with their complementary counterparts. For example:\n• Guanine (G) is replaced with Cytosine (C)\n\nPlease see original example from https://exercism.org/tracks/java/exercises/rna-transcription\n\nUsing String Builder Here is My Solution:\n• Create StringBuilder: A object ( ) is created to hold the modified DNA sequence.\n• Iterate through DNA: The code iterates through each character ( ) in the original DNA strand.\n• Replace Nucleotides: Inside the loop, a statement determines the appropriate replacement for each nucleotide:\n• If is 'C', replace it with 'G'.\n• If is 'G', replace it with 'C'.\n• If is 'T', replace it with 'A'.\n• If is 'A', replace it with 'U'.\n\n4. Return RNA Strand: After all replacements are made, the method of is used to convert the modified sequence back to a String, representing the transcribed RNA strand.\n• Efficiency: By using , we avoid creating numerous intermediate objects when modifying the DNA sequence. This significantly improves performance, especially for longer DNA strands.\n• Readability: The code is more concise and easier to understand compared to using multiple concatenations.\n\nI also added tests in here where you can also find in https://exercism.org/tracks/java/exercises/rna-transcription\n• You need to modify strings frequently.\n• You are concatenating strings within loops.\n• You are working with large strings.\n\nBy using in these situations, you can improve the performance and efficiency of your Java code."
    }
]