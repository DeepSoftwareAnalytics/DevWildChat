[
    {
        "link": "https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE-SEQUENCE.html",
        "document": "Use the statement to create a sequence, which is a database object from which multiple users may generate unique integers. You can use sequences to automatically generate primary key values. When a sequence number is generated, the sequence is incremented, independent of the transaction committing or rolling back. If two users concurrently increment the same sequence, then the sequence numbers each user acquires may have gaps, because sequence numbers are being generated by the other user. One user can never acquire the sequence number generated by another user. After a sequence value is generated by one user, that user can continue to access that value regardless of whether the sequence is incremented by another user. Sequence numbers are generated independently of tables, so the same sequence can be used for one or for multiple tables. It is possible that individual sequence numbers will appear to be skipped, because they were generated and used in a transaction that ultimately rolled back. Additionally, a single user may not realize that other users are drawing from the same sequence. After a sequence is created, you can access its values in SQL statements with the pseudocolumn, which returns the current value of the sequence, or the pseudocolumn, which increments the sequence and returns the new value.\n• Pseudocolumns for more information on using the and\n• \"How to Use Sequence Values\" for information on using sequences\n• ALTER SEQUENCE or DROP SEQUENCE for information on modifying or dropping a sequence\n\nSpecify the name of the sequence to be created. The name must satisfy the requirements listed in \"Database Object Naming Rules\". If you specify none of the clauses through , then you create an ascending sequence that starts with 1 and increases by 1 with no upper limit. Specifying only -1 creates a descending sequence that starts with ‐1 and decreases with no lower limit.\n• To create a sequence that increments without bound, for ascending sequences, omit the parameter or specify . For descending sequences, omit the parameter or specify the .\n• To create a sequence that stops at a predefined limit, for an ascending sequence, specify a value for the parameter. For a descending sequence, specify a value for the parameter. Also specify . Any attempt to generate a sequence number once the sequence has reached its limit results in an error.\n• To create a sequence that restarts after reaching a predefined limit, specify values for both the and parameters. Also specify .\n\nThis clause applies only when creating a sequence in an application root. This type of sequence is called an application common object and it can be shared with the application PDBs that belong to the application root. To determine how the sequence is shared, specify one of the following sharing attributes:\n• - A metadata link shares the sequence’s metadata, but its data is unique to each container. This type of sequence is referred to as a metadata-linked application common object.\n• - A data link shares the sequence, and its data is the same for all containers in the application container. Its data is stored only in the application root. This type of sequence is referred to as a data-linked application common object.\n• - The sequence is not shared. If you omit this clause, then the database uses the value of the initialization parameter to determine the sharing attribute of the sequence. If the initialization parameter does not have a value, then the default is . You cannot change the sharing attribute of a sequence after it is created.\n• Oracle Database Reference for more information on the initialization parameter\n\nSpecify the interval between sequence numbers. This integer value can be any positive or negative integer, but it cannot be 0. This value can have 28 or fewer digits for an ascending sequence and 27 or fewer digits for a descending sequence. The absolute of this value must be less than the difference of and . If this value is negative, then the sequence descends. If the value is positive, then the sequence ascends. If you omit this clause, then the interval defaults to 1.\n\nSpecify the first sequence number to be generated. Use this clause to start an ascending sequence at a value greater than its minimum or to start a descending sequence at a value less than its maximum. For ascending sequences, the default value is the minimum value of the sequence. For descending sequences, the default value is the maximum value of the sequence. This integer value can have 28 or fewer digits for positive values and 27 or fewer digits for negative values. This value is not necessarily the value to which an ascending or descending cycling sequence cycles after reaching its maximum or minimum value, respectively.\n\nSpecify how many values of the sequence the database preallocates and keeps in memory for faster access. This integer value can have 28 or fewer digits. The minimum value for this parameter is 2. For sequences that cycle, this value must be less than the number of values in the cycle. You cannot cache more values than will fit in a given cycle of sequence numbers. Therefore, the maximum value allowed for must be less than the value determined by the following formula: If a system failure occurs, then all cached sequence values that have not been used in committed DML statements are lost. The potential number of lost values is equal to the value of the parameter. Oracle recommends using the setting to enhance performance if you are using sequences in an Oracle Real Application Clusters environment."
    },
    {
        "link": "https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE-SEQUENCE.html",
        "document": "A sequence is a database object used to produce unique integers, which are commonly used to populate a synthetic primary key column in a table. The sequence number always increases, typically by 1, and each new entry is placed on the right-most leaf block of the index. Use the statement to create a sequence to automatically generate primary key values. When a sequence number is generated, the sequence is incremented, independent of the transaction committing or rolling back. If two users concurrently increment the same sequence, then the sequence numbers each user acquires may have gaps, because sequence numbers are being generated by the other user. One user can never acquire the sequence number generated by another user. After a sequence value is generated by one user, that user can continue to access that value regardless of whether the sequence is incremented by another user. Sequence numbers are generated independently of tables, so the same sequence can be used for one or for multiple tables. It is possible that individual sequence numbers will appear to be skipped, because they were generated and used in a transaction that ultimately rolled back. Additionally, a single user may not realize that other users are drawing from the same sequence. After a sequence is created, you can access its values in SQL statements with the pseudocolumn, which returns the current value of the sequence, or the pseudocolumn, which increments the sequence and returns the new value.\n• Pseudocolumns for more information on using the and\n• \"How to Use Sequence Values\" for information on using sequences\n• ALTER SEQUENCE or DROP SEQUENCE for information on modifying or dropping a sequence\n\nSpecify the name of the sequence to be created. The name must satisfy the requirements listed in \"Database Object Naming Rules\". If you specify none of the clauses through , then you create an ascending sequence that starts with 1 and increases by 1 with no upper limit. Specifying only -1 creates a descending sequence that starts with ‐1 and decreases with no lower limit.\n• To create a sequence that increments without bound, for ascending sequences, omit the parameter or specify . For descending sequences, omit the parameter or specify the .\n• To create a sequence that stops at a predefined limit, for an ascending sequence, specify a value for the parameter. For a descending sequence, specify a value for the parameter. Also specify . Any attempt to generate a sequence number once the sequence has reached its limit results in an error.\n• To create a sequence that restarts after reaching a predefined limit, specify values for both the and parameters. Also specify .\n\nThis clause applies only when creating a sequence in an application root. This type of sequence is called an application common object and it can be shared with the application PDBs that belong to the application root. To determine how the sequence is shared, specify one of the following sharing attributes:\n• - A metadata link shares the sequence’s metadata, but its data is unique to each container. This type of sequence is referred to as a metadata-linked application common object.\n• - A data link shares the sequence, and its data is the same for all containers in the application container. Its data is stored only in the application root. This type of sequence is referred to as a data-linked application common object.\n• - The sequence is not shared. If you omit this clause, then the database uses the value of the initialization parameter to determine the sharing attribute of the sequence. If the initialization parameter does not have a value, then the default is . You cannot change the sharing attribute of a sequence after it is created.\n• Oracle Database Reference for more information on the initialization parameter\n\nSpecify the interval between sequence numbers. This integer value can be any positive or negative integer, but it cannot be 0. This value can have 28 or fewer digits for an ascending sequence and 27 or fewer digits for a descending sequence. The absolute of this value must be less than the difference of and . If this value is negative, then the sequence descends. If the value is positive, then the sequence ascends. If you omit this clause, then the interval defaults to 1.\n\nSpecify the first sequence number to be generated. Use this clause to start an ascending sequence at a value greater than its minimum or to start a descending sequence at a value less than its maximum. For ascending sequences, the default value is the minimum value of the sequence. For descending sequences, the default value is the maximum value of the sequence. This integer value can have 28 or fewer digits for positive values and 27 or fewer digits for negative values. This value is not necessarily the value to which an ascending or descending cycling sequence cycles after reaching its maximum or minimum value, respectively.\n\nSpecify how many values of the sequence the database preallocates and keeps in memory for faster access. This integer value can have 28 or fewer digits. The minimum value for this parameter is 2. For sequences that cycle, this value must be less than the number of values in the cycle. You cannot cache more values than will fit in a given cycle of sequence numbers. Therefore, the maximum value allowed for must be less than the value determined by the following formula: If a system failure occurs, then all cached sequence values that have not been used in committed DML statements are lost. The potential number of lost values is equal to the value of the parameter. Oracle recommends using the setting to enhance performance if you are using sequences in an Oracle Real Application Clusters environment.\n\nSpecify to create a session sequence, which is a special type of sequence that is specifically designed to be used with global temporary tables that have session visibility. Unlike the existing regular sequences (referred to as \"global\" sequences for the sake of comparison), a session sequence returns a unique range of sequence numbers only within a session, but not across sessions. Another difference is that session sequences are not persistent. If a session goes away, so does the state of the session sequences that were accessed during the session. Session sequences must be created by a read-write database but can be accessed on any read-write or read-only databases (either a regular database temporarily open read-only or a standby database). The , , , or clauses are ignored when specified with the clause. Oracle Data Guard Concepts and Administration for more information on session sequences"
    },
    {
        "link": "https://techonthenet.com/oracle/sequences.php",
        "document": "This Oracle tutorial explains how to create and drop sequences in Oracle with syntax and examples.\n\nIn Oracle, you can create an autonumber field by using sequences. A sequence is an object in Oracle that is used to generate a number sequence. This can be useful when you need to create a unique number to act as a primary key.\n\nYou may wish to create a sequence in Oracle to handle an autonumber field.\n\nThe syntax to create a sequence in Oracle is:\n\nLet's look at an example of how to create a sequence in Oracle.\n\nThis would create a sequence object called supplier_seq. The first sequence number that it would use is 1 and each subsequent number would increment by 1 (ie: 2,3,4,...}. It will cache up to 20 values for performance.\n\nIf you omit the MAXVALUE option, your sequence will automatically default to:\n\nSo you can simplify your CREATE SEQUENCE command as follows:\n\nNow that you've created a sequence object to simulate an autonumber field, we'll cover how to retrieve a value from this sequence object. To retrieve the next value in the sequence order, you need to use nextval.\n\nThis would retrieve the next value from supplier_seq. The nextval statement needs to be used in a SQL statement. For example:\n\nThis insert statement would insert a new record into the suppliers table. The supplier_id field would be assigned the next number from the supplier_seq sequence. The supplier_name field would be set to Kraft Foods."
    },
    {
        "link": "https://geeksforgeeks.org/sql-sequences",
        "document": "SQL sequences are an essential feature of relational database management systems (RDBMS) used to generate unique numeric values in a sequential order. These values are widely used for generating primary keys, unique keys, and other numeric identifiers in databases. SQL sequences offer flexibility, performance, and ease of use, making them indispensable in managing and organizing data in large-scale applications.\n\nIn this article, we will explain SQL sequences in-depth, explaining how they work, their advantages, syntax, and real-world use cases.\n\nSQL sequences are user-defined database objects designed to generate a series of numeric values. Unlike identity columns, which are tightly bound to specific tables, sequences are independent objects and can be used across multiple tables. They allow applications to retrieve the next number in a sequence whenever needed, offering a simple and efficient way to generate unique numbers on demand.\n\nThe values in a sequence can be configured to be generated in ascending or descending order, and the sequence can be set to restart (cycle) once the maximum value is exceeded. This makes SQL sequences particularly useful in scenarios where there is a need for continuous, unique values, such as generating primary keys or serial numbers.\n• Automatic Primary Key Generation : Sequences automatically generate unique values that can be used for primary or unique keys in database tables.\n• Ascending or Descending Order : Sequences can be configured to generate numbers in either ascending or descending order.\n• Multiple Table Usage : A single sequence can be used to generate values for multiple tables, making it flexible and reusable.\n• Independent of Tables : Unlike identity columns, sequences are independent and can be used across different tables.\n• Efficient : Sequences reduce the complexity and overhead of manually generating unique values, which saves time and reduces application code.\n\nWhen creating a sequence, we specify the starting point, the increment (how much the sequence increases with each step), and optionally the minimum and maximum values. Sequences can be set to cycle, which means they restart from the beginning when they reach the maximum value.\n\nThe above query will create a sequence named sequence_1. The sequence will start from 1 and will be incremented by 1 having maximum value of 100. The sequence will repeat itself from the start value after exceeding 100.\n\nThe above query will create a sequence named sequence_2. The sequence will start from 100 and should be less than or equal to a maximum value and will be incremented by -1 having a minimum value of 1.\n\nOnce a sequence is created, it can be used across multiple tables to generate unique values, such as primary key identifiers or serial numbers. This allows for consistent, efficient value generation, reducing the need for manual input and ensuring uniqueness across different rows and tables.\n\nExample: Using a Sequence to Insert Values\n\nLet’s create a table and use the sequence to automatically generate unique student IDs. In this example, the function is used to retrieve the next value in the sequence ( ) and insert it into the column for each student.\n\nTo enhance performance, SQL Server employs cache management for sequence numbers. The argument pre-allocates a set number of sequence values in memory, which reduces disk access during normal operations.\n\nFor instance, if a sequence starts at with a cache size of , SQL Server will allocate values in memory. When the 15th value is used, a new cache with values is allocated.\n\nIn the event of a server restart, the next sequence number will be the first unused value in the cache. This approach ensures that sequence numbers are generated quickly but may cause gaps in the sequence after a server crash, which is normal.\n\nIf we want to avoid gaps, we can set the sequence to , though this might reduce performance as it requires constant disk access.\n\nSequences are commonly used to generate unique primary key values for database tables. This is especially useful in applications where a large volume of records needs to be inserted into a table, and each record requires a unique identifier.\n\nSQL sequences can be used to generate serial numbers for products or order IDs in e-commerce systems, ensuring that each order has a unique identifier.\n\nSequences are also useful for tracking events or transactions that require unique identifiers, such as logging system activities or generating unique reference numbers for transactions.\n• Efficiency : Sequences simplify the process of generating unique values without requiring complex application logic.\n• Independence : Sequences can be used across multiple tables, ensuring that unique values are consistently generated without tying them to a specific table.\n• Performance : By using the feature, sequences can enhance performance by reducing disk access during value generation.\n• Flexibility : SQL sequences can be configured to generate values in ascending or descending order and can be set to cycle when reaching the maximum value.\n\nSQL sequences are a fundamental tool for generating unique numeric values in databases, offering simplicity, flexibility, and improved performance. Whether we need to generate primary keys, serial numbers, or unique transaction IDs, sequences provide a reliable and efficient solution. Understanding how to create and manage sequences, along with optimizing cache settings, can significantly enhance the performance of your database operations.\n\nWhat are the advantages of using SQL sequences?"
    },
    {
        "link": "https://oracle-base.com/articles/misc/oracle-sequences",
        "document": "This article demonstrates the common ways sequences can be used to generate synthetic or surrogate keys.\n\nThis section will focus on basic management of sequences, including creating, modifying and removing sequences.\n\nThe system privilege allows a user to create, alter and drop sequences defined in their own schema.\n\nThe following system privileges are also available, but they should not be granted as they allow the grantee to manipulate objects in all schemas, including built-in schemas.\n\nThe owner of a sequence has full privileges on the sequence. Another user can be given access to the sequence by granting the SELECT object privilege.\n\nA sequence is a database object that is used to generate a unique integer, which is often used to populate a synthetic key. Sequences are created using the command. The vast majority of the time you will just specify a sequence name and use the defaults values for all sequence attributes, or maybe increase the attribute above the default value of 20 to improve performance. If the schema isn't specified explicitly, it assumes you mean a sequence in the current schema.\n\nThe CREATE SEQUENCE documentation lists all the available sequence attributes. The example below uses to set the starting point of the sequence, to set the end point of the sequence, to tell it to go back to the start once all available sequences are used and to make it increase in steps of 10. The queries show the impact of this.\n\nBy default a sequence is global, so its value is maintained across all sessions, from any user that has privilege to select from it. From Oracle 12c onward sequences can be defined as session-specific, so their current value is only relevant to the current session, and effectively reset for each new session.\n\nMany of the sequence attributes can be altered after creation using the command. The full list of sequence attributes that can be altered are listed in the ALTER SEQUENCE documentation. If the schema isn't specified explicitly, it assumes you mean a sequence in the current schema. The following example alters some of the attributes of a sequence created in the previous section.\n\nA sequence is dropped using the command. If the schema isn't specified explicitly, it assumes you mean a sequence in the current schema.\n\nThe views are used to display information about sequences defined in the database.\n• : All Sequences owned by the current user.\n• : All sequences owned by the current user plus those the current user has privileges on.\n• : All sequences in the database, or the current container in the multitenant architecture.\n• : Displays all sequences in all containers when queried from the root container. Acts the same as the view when queries from any other container.\n\nCreate a new sequence for some tests.\n\nThe pseudocolumn displays the next available value for the sequence. Once a sequence number is selected, the session can access the current value repeatedly using the pseudocolumn.\n\nIt's safe to use the sequence repeatedly in an SQL statement.\n\nA sequence can be used directly in a DML statement. The following example uses the sequence in an insert statement to populate a column in the table.\n\nYou can select the sequence value into a variable, allowing you to reference the value multiple times.\n\nFrom Oracle 11g onward sequences can be used in assigned in PL/SQL. Under the hood there is still a query from dual, but it makes the code look neater.\n\nRemember, we could have used rather than storing the value.\n\nYou can see some examples of using sequences to populate primary key and foreign key columns in master-detail relationships here.\n\nIn database versions prior to Oracle 12c you had to mimic autonumber or identity column functionality using database triggers, as described here.\n\nFrom Oracle 12c onward you can define proper identity columns, which under the hood use sequences. You can also use sequences as the default value for table columns.\n\nFor more information see:"
    },
    {
        "link": "https://docs.oracle.com/cd/B28359_01/server.111/b28310/views002.htm",
        "document": "This section describes aspects of managing sequences, and contains the following topics:\n\nSequences are database objects from which multiple users can generate unique integers. The sequence generator generates sequential numbers, which can help to generate unique primary keys automatically, and to coordinate keys across multiple rows or tables. Without sequences, sequential values can only be produced programmatically. A new primary key value can be obtained by selecting the most recently produced value and incrementing it. This method requires a lock during the transaction and causes multiple users to wait for the next value of the primary key; this waiting is known as serialization. If developers have such constructs in applications, then you should encourage the developers to replace them with access to sequences. Sequences eliminate serialization and improve the concurrency of an application. for an overview of sequences for an overview of sequences\n\nTo create a sequence in your schema, you must have the system privilege. To create a sequence in another user's schema, you must have the privilege. Create a sequence using the statement. For example, the following statement creates a sequence used to generate employee numbers for the column of the table: Notice that several parameters can be specified to control the function of sequences. You can use these parameters to indicate whether the sequence is ascending or descending, the starting point of the sequence, the minimum and maximum values, and the interval between sequence values. The option indicates that the sequence cannot generate more values after reaching its maximum or minimum value. The clause preallocates a set of sequence numbers and keeps them in memory so that sequence numbers can be accessed faster. When the last of the sequence numbers in the cache has been used, the database reads another set of numbers into the cache. The database might skip sequence numbers if you choose to cache a set of sequence numbers. For example, when an instance abnormally shuts down (for example, when an instance failure occurs or a statement is issued), sequence numbers that have been cached but not used are lost. Also, sequence numbers that have been used but not saved are lost as well. The database might also skip cached sequence numbers after an export and import. See Oracle Database Utilities for details.\n• Oracle Real Application Clusters Deployment and Performance Guide for information about how caching sequence numbers improves performance in an Oracle Real Application Clusters environment\n\nTo alter a sequence, your schema must contain the sequence, or you must have the system privilege. You can alter a sequence to change any of the parameters that define how it generates sequence numbers except the sequence starting number. To change the starting point of a sequence, drop the sequence and then re-create it. Alter a sequence using the statement. For example, the following statement alters the : statement for syntax and additional information about thestatement for syntax and additional information about thestatement\n\nTo use a sequence, your schema must contain the sequence or you must have been granted the object privilege for another user's sequence. Once a sequence is defined, it can be accessed and incremented by multiple users (who have object privilege for the sequence containing the sequence) with no waiting. The database does not wait for a transaction that has incremented a sequence to complete before that sequence can be incremented again. The examples outlined in the following sections show how sequences can be used in master/detail table relationships. Assume an order entry system is partially comprised of two tables, (master table) and (detail table), that hold information about customer orders. A sequence named is defined by the following statement: A sequence is referenced in SQL statements with the and pseudocolumns; each new sequence number is generated by a reference to the sequence pseudocolumn , while the current sequence number can be repeatedly referenced using the pseudo-column . and are not reserved words or keywords and can be used as pseudocolumn names in SQL statements such as , , or . To generate and use a sequence number, reference seq_name. . For example, assume a customer places an order. The sequence number can be referenced in a values list. For example: Or, the sequence number can be referenced in the clause of an statement. For example: The sequence number can also be referenced outermost of a query or subquery. For example: As defined, the first reference to returns the value 1. Each subsequent statement that references generates the next sequence number (2, 3, 4,. . .). The pseudo-column can be used to generate as many new sequence numbers as necessary. However, only a single sequence number can be generated for each row. In other words, if is referenced more than once in a single statement, then the first reference generates the next number, and all subsequent references in the statement return the same number. Once a sequence number is generated, the sequence number is available only to the session that generated the number. Independent of transactions committing or rolling back, other users referencing obtain unique values. If two users are accessing the same sequence concurrently, then the sequence numbers each user receives might have gaps because sequence numbers are also being generated by the other user. To use or refer to the current sequence value of your session, reference seq_name. . can only be used if seq_name. has been referenced in the current user session (in the current or a previous transaction). can be referenced as many times as necessary, including multiple times within the same statement. The next sequence number is not generated until is referenced. Continuing with the previous example, you would finish placing the customer's order by inserting the line items for the order: Assuming the statement given in the previous section generated a new sequence number of 347, both rows inserted by the statements in this section insert rows with order numbers of 347. Uses and Restrictions of NEXTVAL and CURRVAL and can be used in the following places:\n• The clause of an statement and cannot be used in these places:\n• A statement that is combined with another statement with the , or set operator\n• value of a column in a or statement Sequence numbers can be kept in the sequence cache in the System Global Area (SGA). Sequence numbers can be accessed more quickly in the sequence cache than they can be read from disk. The sequence cache consists of entries. Each entry can hold many sequence numbers for a single sequence. Follow these guidelines for fast access to all sequence numbers:\n• Be sure the sequence cache can hold all the sequences used concurrently by your applications.\n• Increase the number of values for each sequence held in the sequence cache. The Number of Entries in the Sequence Cache When an application accesses a sequence in the sequence cache, the sequence numbers are read quickly. However, if an application accesses a sequence that is not in the cache, then the sequence must be read from disk to the cache before the sequence numbers are used. If your applications use many sequences concurrently, then your sequence cache might not be large enough to hold all the sequences. In this case, access to sequence numbers might often require disk reads. For fast access to all sequences, be sure your cache has enough entries to hold all the sequences used concurrently by your applications. The Number of Values in Each Sequence Cache Entry When a sequence is read into the sequence cache, sequence values are generated and stored in a cache entry. These values can then be accessed quickly. The number of sequence values stored in the cache is determined by the parameter in the statement. The default value for this parameter is 20. This statement creates the sequence so that 50 values of the sequence are stored in the cache: The first 50 values of can then be read from the cache. When the 51st value is accessed, the next 50 values will be read from disk. Choosing a high value for lets you access more successive sequence numbers with fewer reads from disk to the sequence cache. However, if there is an instance failure, then all sequence values in the cache are lost. Cached sequence numbers also could be skipped after an export and import if transactions continue to access the sequence numbers while the export is running. If you use the option in the statement, then the values of the sequence are not stored in the sequence cache. In this case, every access to the sequence requires a disk read. Such disk reads slow access to the sequence. This statement creates the sequence so that its values are never stored in the cache:\n\nYou can drop any sequence in your schema. To drop a sequence in another schema, you must have the system privilege. If a sequence is no longer required, you can drop the sequence using the statement. For example, the following statement drops the sequence: When a sequence is dropped, its definition is removed from the data dictionary. Any synonyms for the sequence remain, but return an error when referenced. statement for syntax and additional information about thestatement for syntax and additional information about thestatement"
    },
    {
        "link": "https://docs.oracle.com/database/apex-18.1/AEUTL/managing-sequences.htm",
        "document": "A sequence generates a serial list of unique numbers for numeric columns of a database table. You can create, browse, drop, alter a sequence and view a report.\n\nDatabase sequences are generally used to populate table primary keys."
    },
    {
        "link": "https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE-SEQUENCE.html",
        "document": "Use the statement to create a sequence, which is a database object from which multiple users may generate unique integers. You can use sequences to automatically generate primary key values. When a sequence number is generated, the sequence is incremented, independent of the transaction committing or rolling back. If two users concurrently increment the same sequence, then the sequence numbers each user acquires may have gaps, because sequence numbers are being generated by the other user. One user can never acquire the sequence number generated by another user. After a sequence value is generated by one user, that user can continue to access that value regardless of whether the sequence is incremented by another user. Sequence numbers are generated independently of tables, so the same sequence can be used for one or for multiple tables. It is possible that individual sequence numbers will appear to be skipped, because they were generated and used in a transaction that ultimately rolled back. Additionally, a single user may not realize that other users are drawing from the same sequence. After a sequence is created, you can access its values in SQL statements with the pseudocolumn, which returns the current value of the sequence, or the pseudocolumn, which increments the sequence and returns the new value.\n• Pseudocolumns for more information on using the and\n• \"How to Use Sequence Values\" for information on using sequences\n• ALTER SEQUENCE or DROP SEQUENCE for information on modifying or dropping a sequence\n\nSpecify the name of the sequence to be created. The name must satisfy the requirements listed in \"Database Object Naming Rules\". If you specify none of the clauses through , then you create an ascending sequence that starts with 1 and increases by 1 with no upper limit. Specifying only -1 creates a descending sequence that starts with ‐1 and decreases with no lower limit.\n• To create a sequence that increments without bound, for ascending sequences, omit the parameter or specify . For descending sequences, omit the parameter or specify the .\n• To create a sequence that stops at a predefined limit, for an ascending sequence, specify a value for the parameter. For a descending sequence, specify a value for the parameter. Also specify . Any attempt to generate a sequence number once the sequence has reached its limit results in an error.\n• To create a sequence that restarts after reaching a predefined limit, specify values for both the and parameters. Also specify .\n\nThis clause applies only when creating a sequence in an application root. This type of sequence is called an application common object and it can be shared with the application PDBs that belong to the application root. To determine how the sequence is shared, specify one of the following sharing attributes:\n• - A metadata link shares the sequence’s metadata, but its data is unique to each container. This type of sequence is referred to as a metadata-linked application common object.\n• - A data link shares the sequence, and its data is the same for all containers in the application container. Its data is stored only in the application root. This type of sequence is referred to as a data-linked application common object.\n• - The sequence is not shared. If you omit this clause, then the database uses the value of the initialization parameter to determine the sharing attribute of the sequence. If the initialization parameter does not have a value, then the default is . You cannot change the sharing attribute of a sequence after it is created.\n• Oracle Database Reference for more information on the initialization parameter\n\nSpecify the interval between sequence numbers. This integer value can be any positive or negative integer, but it cannot be 0. This value can have 28 or fewer digits for an ascending sequence and 27 or fewer digits for a descending sequence. The absolute of this value must be less than the difference of and . If this value is negative, then the sequence descends. If the value is positive, then the sequence ascends. If you omit this clause, then the interval defaults to 1.\n\nSpecify the first sequence number to be generated. Use this clause to start an ascending sequence at a value greater than its minimum or to start a descending sequence at a value less than its maximum. For ascending sequences, the default value is the minimum value of the sequence. For descending sequences, the default value is the maximum value of the sequence. This integer value can have 28 or fewer digits for positive values and 27 or fewer digits for negative values. This value is not necessarily the value to which an ascending or descending cycling sequence cycles after reaching its maximum or minimum value, respectively.\n\nSpecify how many values of the sequence the database preallocates and keeps in memory for faster access. This integer value can have 28 or fewer digits. The minimum value for this parameter is 2. For sequences that cycle, this value must be less than the number of values in the cycle. You cannot cache more values than will fit in a given cycle of sequence numbers. Therefore, the maximum value allowed for must be less than the value determined by the following formula: If a system failure occurs, then all cached sequence values that have not been used in committed DML statements are lost. The potential number of lost values is equal to the value of the parameter. Oracle recommends using the setting to enhance performance if you are using sequences in an Oracle Real Application Clusters environment."
    },
    {
        "link": "https://geeksforgeeks.org/sql-sequences",
        "document": "SQL sequences are an essential feature of relational database management systems (RDBMS) used to generate unique numeric values in a sequential order. These values are widely used for generating primary keys, unique keys, and other numeric identifiers in databases. SQL sequences offer flexibility, performance, and ease of use, making them indispensable in managing and organizing data in large-scale applications.\n\nIn this article, we will explain SQL sequences in-depth, explaining how they work, their advantages, syntax, and real-world use cases.\n\nSQL sequences are user-defined database objects designed to generate a series of numeric values. Unlike identity columns, which are tightly bound to specific tables, sequences are independent objects and can be used across multiple tables. They allow applications to retrieve the next number in a sequence whenever needed, offering a simple and efficient way to generate unique numbers on demand.\n\nThe values in a sequence can be configured to be generated in ascending or descending order, and the sequence can be set to restart (cycle) once the maximum value is exceeded. This makes SQL sequences particularly useful in scenarios where there is a need for continuous, unique values, such as generating primary keys or serial numbers.\n• Automatic Primary Key Generation : Sequences automatically generate unique values that can be used for primary or unique keys in database tables.\n• Ascending or Descending Order : Sequences can be configured to generate numbers in either ascending or descending order.\n• Multiple Table Usage : A single sequence can be used to generate values for multiple tables, making it flexible and reusable.\n• Independent of Tables : Unlike identity columns, sequences are independent and can be used across different tables.\n• Efficient : Sequences reduce the complexity and overhead of manually generating unique values, which saves time and reduces application code.\n\nWhen creating a sequence, we specify the starting point, the increment (how much the sequence increases with each step), and optionally the minimum and maximum values. Sequences can be set to cycle, which means they restart from the beginning when they reach the maximum value.\n\nThe above query will create a sequence named sequence_1. The sequence will start from 1 and will be incremented by 1 having maximum value of 100. The sequence will repeat itself from the start value after exceeding 100.\n\nThe above query will create a sequence named sequence_2. The sequence will start from 100 and should be less than or equal to a maximum value and will be incremented by -1 having a minimum value of 1.\n\nOnce a sequence is created, it can be used across multiple tables to generate unique values, such as primary key identifiers or serial numbers. This allows for consistent, efficient value generation, reducing the need for manual input and ensuring uniqueness across different rows and tables.\n\nExample: Using a Sequence to Insert Values\n\nLet’s create a table and use the sequence to automatically generate unique student IDs. In this example, the function is used to retrieve the next value in the sequence ( ) and insert it into the column for each student.\n\nTo enhance performance, SQL Server employs cache management for sequence numbers. The argument pre-allocates a set number of sequence values in memory, which reduces disk access during normal operations.\n\nFor instance, if a sequence starts at with a cache size of , SQL Server will allocate values in memory. When the 15th value is used, a new cache with values is allocated.\n\nIn the event of a server restart, the next sequence number will be the first unused value in the cache. This approach ensures that sequence numbers are generated quickly but may cause gaps in the sequence after a server crash, which is normal.\n\nIf we want to avoid gaps, we can set the sequence to , though this might reduce performance as it requires constant disk access.\n\nSequences are commonly used to generate unique primary key values for database tables. This is especially useful in applications where a large volume of records needs to be inserted into a table, and each record requires a unique identifier.\n\nSQL sequences can be used to generate serial numbers for products or order IDs in e-commerce systems, ensuring that each order has a unique identifier.\n\nSequences are also useful for tracking events or transactions that require unique identifiers, such as logging system activities or generating unique reference numbers for transactions.\n• Efficiency : Sequences simplify the process of generating unique values without requiring complex application logic.\n• Independence : Sequences can be used across multiple tables, ensuring that unique values are consistently generated without tying them to a specific table.\n• Performance : By using the feature, sequences can enhance performance by reducing disk access during value generation.\n• Flexibility : SQL sequences can be configured to generate values in ascending or descending order and can be set to cycle when reaching the maximum value.\n\nSQL sequences are a fundamental tool for generating unique numeric values in databases, offering simplicity, flexibility, and improved performance. Whether we need to generate primary keys, serial numbers, or unique transaction IDs, sequences provide a reliable and efficient solution. Understanding how to create and manage sequences, along with optimizing cache settings, can significantly enhance the performance of your database operations.\n\nWhat are the advantages of using SQL sequences?"
    },
    {
        "link": "https://oracle-base.com/articles/misc/oracle-sequences",
        "document": "This article demonstrates the common ways sequences can be used to generate synthetic or surrogate keys.\n\nThis section will focus on basic management of sequences, including creating, modifying and removing sequences.\n\nThe system privilege allows a user to create, alter and drop sequences defined in their own schema.\n\nThe following system privileges are also available, but they should not be granted as they allow the grantee to manipulate objects in all schemas, including built-in schemas.\n\nThe owner of a sequence has full privileges on the sequence. Another user can be given access to the sequence by granting the SELECT object privilege.\n\nA sequence is a database object that is used to generate a unique integer, which is often used to populate a synthetic key. Sequences are created using the command. The vast majority of the time you will just specify a sequence name and use the defaults values for all sequence attributes, or maybe increase the attribute above the default value of 20 to improve performance. If the schema isn't specified explicitly, it assumes you mean a sequence in the current schema.\n\nThe CREATE SEQUENCE documentation lists all the available sequence attributes. The example below uses to set the starting point of the sequence, to set the end point of the sequence, to tell it to go back to the start once all available sequences are used and to make it increase in steps of 10. The queries show the impact of this.\n\nBy default a sequence is global, so its value is maintained across all sessions, from any user that has privilege to select from it. From Oracle 12c onward sequences can be defined as session-specific, so their current value is only relevant to the current session, and effectively reset for each new session.\n\nMany of the sequence attributes can be altered after creation using the command. The full list of sequence attributes that can be altered are listed in the ALTER SEQUENCE documentation. If the schema isn't specified explicitly, it assumes you mean a sequence in the current schema. The following example alters some of the attributes of a sequence created in the previous section.\n\nA sequence is dropped using the command. If the schema isn't specified explicitly, it assumes you mean a sequence in the current schema.\n\nThe views are used to display information about sequences defined in the database.\n• : All Sequences owned by the current user.\n• : All sequences owned by the current user plus those the current user has privileges on.\n• : All sequences in the database, or the current container in the multitenant architecture.\n• : Displays all sequences in all containers when queried from the root container. Acts the same as the view when queries from any other container.\n\nCreate a new sequence for some tests.\n\nThe pseudocolumn displays the next available value for the sequence. Once a sequence number is selected, the session can access the current value repeatedly using the pseudocolumn.\n\nIt's safe to use the sequence repeatedly in an SQL statement.\n\nA sequence can be used directly in a DML statement. The following example uses the sequence in an insert statement to populate a column in the table.\n\nYou can select the sequence value into a variable, allowing you to reference the value multiple times.\n\nFrom Oracle 11g onward sequences can be used in assigned in PL/SQL. Under the hood there is still a query from dual, but it makes the code look neater.\n\nRemember, we could have used rather than storing the value.\n\nYou can see some examples of using sequences to populate primary key and foreign key columns in master-detail relationships here.\n\nIn database versions prior to Oracle 12c you had to mimic autonumber or identity column functionality using database triggers, as described here.\n\nFrom Oracle 12c onward you can define proper identity columns, which under the hood use sequences. You can also use sequences as the default value for table columns.\n\nFor more information see:"
    }
]