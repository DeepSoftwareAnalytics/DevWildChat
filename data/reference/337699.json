[
    {
        "link": "https://support.microsoft.com/en-us/office/address-function-d0c26c0d-3991-446b-8de4-ab46431d4f89",
        "document": "This article describes the formula syntax and usage of the ADDRESS function in Microsoft Excel. For information about working with mailing addresses or creating mailing labels, go to Create and print mailing labels for an address list in Excel.\n\nYou can use the ADDRESS function to obtain the address of a cell in a worksheet, given specified row and column numbers. For example, ADDRESS(2,3) returns $C$2. As another example, ADDRESS(77,300) returns $KN$77. You can use other functions, such as the ROW and COLUMN functions, to provide the row and column number arguments for the ADDRESS function.\n\nThe ADDRESS function syntax has the following arguments:\n• row_num Required. A numeric value that specifies the row number to use in the cell reference.\n• column_num Required. A numeric value that specifies the column number to use in the cell reference.\n• abs_num Optional. A numeric value that specifies the type of reference to return.\n• A1 Optional. A logical value that specifies the A1 or R1C1 reference style. In A1 style, columns are labeled alphabetically, and rows are labeled numerically. In R1C1 reference style, both columns and rows are labeled numerically. If the A1 argument is TRUE or omitted, the ADDRESS function returns an A1-style reference; if FALSE, the ADDRESS function returns an R1C1-style reference. Note: To change the reference style that Excel uses, click the File tab, click Options, and then click Formulas. Under Working with formulas, select or clear the R1C1 reference style check box.\n• sheet_text Optional. A text value that specifies the name of the worksheet to be used as the external reference. For example, the formula =ADDRESS(1,1,,,\"Sheet2\") returns Sheet2!$A$1. If the sheet_text argument is omitted, no sheet name is used, and the address returned by the function refers to a cell on the current sheet.\n\nCopy the example data in the following table, and paste it in cell A1 of a new Excel worksheet. For formulas to show results, select them, press F2, and then press Enter. If you need to, you can adjust the column widths to see all the data. Absolute reference to another workbook and worksheet"
    },
    {
        "link": "https://ablebits.com/office-addins-blog/excel-address-function",
        "document": "The tutorial gives a brief introduction to the ADDRESS function syntax and shows how to use it to return an Excel cell address and more.\n\nTo create a cell reference in Excel, you can type the column and row coordinates manually. Alternatively, you can get an Excel cell address from the row and column numbers supplied to the ADDRESS function. Almost pointless on its own, in combination with other functions this technique can be the only solution in situations when it is not possible to refer to a cell directly.\n\nThe ADDRESS function is designed to get a cell address in Excel based on the specified row and column numbers. A cell address is returned as a text string, not an actual reference. The function is available in all versions of Excel for Microsoft 365 - Excel 2007. The syntax of the ADDRESS function is as follows: The first two arguments are required: row_num - the row number to use in the cell reference. column_num - the column number to build the cell reference. The last three arguments, which specify the cell reference format, are optional: abs_num - the reference type, absolute or relative. It can take any of the below numbers; the default is absolute. a1 - the reference style, A1 or R1C1. If omitted, the default A1 style is used.\n• 1 or TRUE or omitted - returns the cell address in the A1 reference style where columns are letters and rows are numbers.\n• 0 or FALSE - returns the cell address in the R1C1 reference style where rows and columns are represented by numbers. sheet_text - the name of the worksheet to include in the external reference. The sheet name should be supplied as a text string and enclosed in quotation marks, e.g. \"Sheet2\". If omitted, no worksheet name is used, and the address defaults to the current sheet. - returns the address of the first cell (i.e. the cell at the intersection of the first row and first column) as an absolute cell reference $A$1. - returns the address of the first cell as a relative cell reference A1.\n\n In the following table, you will find a few more reference types that can be returned by ADDRESS formulas.\n\nHow to use ADDRESS function in Excel - formula examples The below examples show how to use the ADDRESS function inside bigger formulas to accomplish more difficult tasks. Return a cell value in a given row and column If your goal is to get a value from a specific cell based on its row and column numbers, use the ADDRESS function together with INDIRECT: The ADDRESS function outputs the cell address as text. The INDIRECT function turns that text into a normal reference and returns the value from the corresponding cell. For example, to get a cell value based on the row number in E1 and the column number in E2, use this formula: Get the address of a cell with the highest or lowest value In this example, we'll first find the highest and lowest values in the range B2:B7 by using the MAX and MIN functions and output those values into special cells: And then, we'll use ADDRESS in combination with the MATCH function to get the cell addresses. In case you do not want the highest and lowest values in separate cells, you can nest the MAX/MIN function in the first argument of MATCH. For example: Cell with the highest value: Cell with the lowest value: To find the row number, you use the MATCH(lookup_value, lookup_array, [match_type]) function that returns a relative position of lookup_value in lookup_array. In our formula, the lookup value is the number returned by the MAX or MIN function, and the lookup array is the entire column. Consequently, a relative position of the lookup value in the array exactly matches the row number on the sheet. To find the column number, you use the COLUM function. Of course, nothing prevents you from typing the number directly in the formula, but COLUMN saves the trouble of manual counting in case the target column is in the middle of the sheet.\n\n To turn any given number into a column letter, use the ADDRESS function inside of SUBSTITUTE: As an example, let's find the column letter corresponding to the number in A2: Looking at the results below, we can say that the first column on the sheet is A, which is obvious; the 10th column is J, the 50th column is AX, and the 100th column is CV:\n\n For starters, set up the ADDRESS function to return a relative reference to the first cell in the target column:\n• For the row number, use 1.\n• For the column number, supply the reference to the cell containing the number, A2 in our example. As the result, ADDRESS(1,A2,4) would return A1. To get rid of the row coordinate, wrap the above formula in the SUBSTITUTE function and replace \"1\" with an empty string (\"\"). Done!\n\n Get the address of a named range To find the address of a named range in Excel, you will first need to obtain the first and last cell references, and then join them together. This works a bit differently in pre-dynamic Excel (2019 and older) and Dynamic Array Excel (Office 365 and Excel 2021). The below examples are for Excel 2019 - Excel 2007. The instructions for Excel 365 and Excel 2021 are here. How to get address of the first cell in a range To return a reference to the first cell in a named range, use this generic formula: Assuming the range is named \"Sales\", the real formula goes as follows: And returns the address of the upper left cell in the range:\n\n In this formula, the ROW and COLUMN functions return an array of all the row and column numbers in the range, respectively. Based on those numbers, the ADDRESS function builds an array of cell addresses. But because the formula is entered in a single cell, only the first item of the array is displayed, which corresponds to the first cell in the range.\n\n How to get address of the last cell in a range To find the address of the last cell in a named range, use this generic formula: Applied to our range named \"Sales\", the formula takes the following shape: And returns the reference to the bottom right cell of the range:\n\n This time, we need a bit more complex calculations to work out the row number. Like in the previous example, the ROW function gives us an array of all the row numbers in the range, {4;5;6;7} in our case. We need to \"shift\" these numbers by the total row count minus 1, so that the first item in the array becomes the last row number. To find the total row count, we employ the ROWS function and subtract 1 from its result: (4-1=3). Then, we add 3 to each element of the initial array to do the required shift: {4;5;6;7} + 3 = {7;8;9;10}. The column number is calculated in a similar manner: {2,3,4}+3-1 = {4,5,6} From the above arrays of row and column numbers, the ADDRESS function assembles an array of cell addresses, but returns only the first one corresponding to the last cell in the range. The same result can also be achieved by picking the maximum values from the arrays of the row and column numbers. However, this only works in an array formula, which requires pressing Ctrl + Shift + Enter to be completed correctly: How to get full address of a named range To return the complete address of a named range, you just need to concatenate the two formulas from the previous examples and insert the range operator (:) in-between. To make it work for our sample data set, we replace the generic \"range\" with the real range name \"Sales\": And get the complete range address as an absolute reference $B$4:$D$7:\n\n To return the range address as a relative reference (without the $ sign, like B4:D7), set the abs_num argument in both ADDRESS functions to 4: Naturally, the same changes can be made in individual formulas for the first and last cell, and the result will look similar to this:\n\n \n\n How to get the address of a named range in Excel 365 and Excel 2021 Unlike the traditional \"one formula - one cell\" behavior in older versions, in new Excel, any formula that can potentially return multiple values, does this automatically. Such behavior is called spilling. For example, instead of returning the address of the first cell, the below formula outputs the addresses of each and every cell in a named range: To get the address of the first cell only, you need to enable implicit intersection, which is triggered by default in Excel 2019 and older. For this, put the @ symbol (implicit intersection operator) before the range names: In a similar manner, you can fix other formulas. To get last cell in the range: To get the address of a named range: The below screenshot shows the results:\n\n Tip. When opening a worksheet with formulas created in an older version in dynamic array Excel, an implicit intersection operator is inserted by Excel automatically.\n\nThat's how you return a cell address in Excel. To have closer look at all the formulas discussed in this tutorial, you are welcome to download our sample workbook below. I thank you for reading and hope to see you on our blog next week!"
    },
    {
        "link": "https://stackoverflow.com/questions/59339917/how-do-i-return-an-address-from-a-range-of-cells-in-excel-based-on-dynamically",
        "document": "I am trying to return a specific cell address from a range of cells, where the cell address I need contains specific data.\n\nSo in my range ( ) my user types in a number. I check to see if that number appears in the range, and want the cell address returned. So far I have this:\n\nis the cell which contains the text I want to search for in the range. This returns the value of the cell I have the formula typed into. I tried another way in which I added in the range to the Row and Column functions. In this case I get the first cell in the range, whether or not the data is there:\n\nIdeally I would be able to repeat this formula so that it can recognise the numbers 1-30 in the range of cells, and tell me which cell each number is in.\n\nHow do I get the exact cell address returned?"
    },
    {
        "link": "https://support.microsoft.com/en-us/office/excel-functions-that-return-ranges-or-arrays-7d1970e2-cbaa-4279-b59c-b9dd3900fc69",
        "document": "In September, 2018 we announced that Dynamic Array support would be coming to Excel. This allows formulas to spill across multiple cells if the formula returns multi-cell ranges or arrays. This new dynamic array behavior can also affect earlier functions that have the ability to return a multi-cell range or array.\n\nBelow is a list of functions that could return multi-cell ranges or arrays in what we refer to as pre-dynamic array Excel. If these functions were used in workbooks predating dynamic arrays, and returned a multi-cell range or array to the grid (or a function that did not expect them), then silent implicit intersection would have occurred. Dynamic array Excel indicates where implicit intersection could occur using the @ operator, and as a result, these functions may be prepended with an @ if they were originally authored in a pre-dynamic array version of Excel. Additionally, if authored on dynamic array Excel, these functions may appear as legacy array formulas in pre-dynamic array Excel unless prepended with @."
    },
    {
        "link": "https://superuser.com/questions/1038746/using-address-function-to-create-array-excel",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://ablebits.com/office-addins-blog/excel-indirect-function",
        "document": "This Excel INDIRECT tutorial explains the function's syntax, basic uses and provides a number of formula examples that demonstrate how to use INDIRECT in Excel.\n\nA great lot of functions exist in Microsoft Excel, some being easy-to-understand, other requiring a long learning curve, and the former being used more often than the latter. And yet, Excel INDIRECT is one of the kind. This Excel function does not perform any calculations, nor does it evaluate any conditions or logical tests.\n\nWell then, what is the INDIRECT function in Excel and what do I use it for? This is a very good question and hopefully you will get a comprehensive answer in a few minutes when you've finished reading this tutorial.\n\nAs its name suggests, Excel INDIRECT is used to indirectly reference cells, ranges, other sheets or workbooks. In other words, the INDIRECT function lets you create a dynamic cell or range reference instead of hard-coding them. As a result, you can change a reference within a formula without changing the formula itself. Moreover, these indirect references won't change when some new rows or columns are inserted in the worksheet or when you delete any existing ones. All this may be easier to understand from an example. However, to be able to write a formula, even the simplest one, you need to know the function's arguments, right? So, let's have a quick look at Excel INDIRECT syntax first. The INDIRECT function in Excel returns a cell reference from a text string. It has two arguments, the first is required and the second is optional: ref_text - is a cell reference, or a reference to a cell in the form of a text string, or a named range. a1 - is a logical value that specifies what type of reference is contained in the ref_text argument:\n• If TRUE or omitted, ref_text is interpreted as an A1-style cell reference.\n• If FALSE, ref_text is treated as a R1C1 reference. While the R1C1 reference type might be useful in certain situations, you'll probably want to use the familiar A1 references most of the time. Anyway, nearly all INDIRECT formulas in this tutorial will use A1 references, so we will be omitting the second argument.\n\n Basic use of the INDIRECT function To get into the function's insight, let's write a simple formula that demonstrates how you use INDIRECT in Excel. Suppose, you have number 3 in cell A1, and text A1 in cell C1. Now, put the formula in any other cell and see what happens:\n• The INDIRECT function refers to the value in cell C1, which is A1.\n• The function is routed to cell A1 where it picks the value to return, which is number 3. So, what the INDIRECT function actually does in this example is converting a text string into a cell reference. If you think this still has very little practical sense, please bear with me and I will show you some more formulas that reveal the real power of the Excel INDIRECT function.\n\n\n\nHow to use INDIRECT in Excel - formula examples As demonstrated in the above example, you can use the Excel INDIRECT function to put the address of one cell into another as a usual text string, and get the value of the 1st cell by referencing the 2nd. However, that trivial example is no more than a hint at the INDIRECT capabilities. When working with real data, the INDIRECT function can turn any text string into a reference including very complex strings that you build using the values of other cells and results returned by other Excel formulas. But let's not put the cart before the horse, and run through several Excel Indirect formulas, one at a time. As you remember, the Excel INDIRECT function allows for A1 and R1C1 reference styles. Usually, you cannot use both styles in a single sheet at a time, you can only switch between the two reference types via File > Options > Formulas > R1C1 check box. This is the reason why Excel users rarely consider using R1C1 as an alternative referencing approach. In an INDIRECT formula, you can use either reference type on the same sheet if you want to. Before we move any further, you may want to know the difference between A1 and R1C1 reference styles. A1 style is the usual reference type in Excel that refers to a column followed by a row number. For example, B2 refers to the cell at the intersection of column B and row 2. R1C1 style is the opposite reference type - rows followed by columns, which does take some time getting used to : ) For example, R4C1 refers to cell A4 which is in row 4, column 1 in a sheet. If no number comes after the letter, then you are referring to the same row or column. And now, let's see how the INDIRECT function handles A1 and R1C1 references: As you see in the screenshot above, three different Indirect formulas return the same result. Have you already figured out why? I bet you have : ) This is the easiest one. The formula refers to cell C1, fetches its value - text string A2, converts it into a cell reference, heads over to cell A2 and returns its value, which is 222. FALSE in the 2nd argument indicates that the referred value (C3) should be treated like a R1C1 cell reference, i.e. a row number followed by a column number. Therefore, our INDIRECT formula interprets the value in cell C3 (R2C1) as a reference to the cell at the conjunction of row 2 and column 1, which is cell A2.\n\n Similarly to how we created references from cell values, you can combine a text string and a cell reference within your INDIRECT formula, tied together with the concatenation operator (&). In the following example, the formula: =INDIRECT(\"B\"&C2) returns a value from cell B2 based on the following logical chain: The INDIRECT function concatenates the elements in the ref_text argument - text B and the value in cell C2 -> the value in cell C2 is number 2, which makes a reference to cell B2 -> the formula goes to cell B2 and returns its value, which is number 10. Using the INDIRECT function with named ranges Apart from making references from cell and text values, you can get the Excel INDIRECT function to refer to named ranges. Suppose, you have the following named ranges in your sheet: To create an Excel dynamic reference to any of the above named ranges, just enter its name in some cell, say G1, and refer to that cell from an Indirect formula . And now, you can take a step further and imbed this INDIRECT formula into other Excel functions to calculate the sum and average of the values in a given named range, or find the maximum / minimum value within the rage: Now that you've got the general idea of how to use the INDIRECT function in Excel, we can experiment with more powerful formulas.\n\n INDIRECT formula to dynamically refer to another worksheet The usefulness of the Excel INDIRECT function is not limited to building \"dynamic\" cell references. You can also utilize it to refer to cells in other worksheets \"on the fly\", and here's how. Suppose, you have some important data in Sheet 1, and you want to pull that data in Sheet 2. The following screenshot demonstrates how an Excel Indirect formula can handle this task: Let's break apart the formula you see in the screenshot and understand. As you know, the usual way to reference another sheet in Excel is writing the sheet's name followed by the exclamation mark and a cell / range reference, like SheetName!Range. Since a sheet name often contains a space(s), you'd better enclose it (the name, not a space : ) in single quotes to prevent an error, for example 'My Sheet!'$A$1. And now, all you have to do is to enter the sheet name in one cell, the cell address in another, concatenate them in a text string, and feed that string to the INDIRECT function. Remember that in a text string, you have to enclose each element other than a cell address or number in double quotes and link all elements together using the concatenation operator (&). Given the above, we get the following pattern: INDIRECT(\"'\" & Sheet's name & \"'!\" & Cell to pull data from) Going back to our example, you put the sheet's name in cell A1, and type the cell addresses in column B, as demonstrated in the screenshot above. As the result, you get the following formula: Also, please pay attention that if you are copying the formula into multiple cells, you have to lock the reference to the sheet's name using the absolute cell references like $A$1.\n• If either of the cells that contain the 2nd sheet's name and cell address (A1 and B1 in the above formula) is empty, your Indirect formula will return an error. To prevent this, you can wrap the INDIRECT function in the IF function:\n• For the INDIRECT formula that refers to another sheet to work correctly, the referred sheet should be open, otherwise the formula will return a #REF error. To avoid the error, you can use the IFERROR function, which will display an empty string, whatever error occurs: Creating an Excel dynamic reference to another workbook The Indirect formula that refers to a different Excel workbook is based on the same approach as a reference to another spreadsheet. You just have to specify the workbook's name is addition to the sheet name and cell address. To make things easier, let's start with making a reference to another book in the usual way (apostrophes are added in case your book and/or sheet names contain spaces):\n\n '[Book_name.xlsx]Sheet_name'!Range Assuming that the book name is in cell A2, the sheet name is in B2, and the cell address is in C2, we get the following formula: Since you don't want the cells containing the book's and sheet's names to change when copying the formula to other cells, you lock them by using absolute cell references, $A$2 and $B$2, respectively. And now, you can easily write your own dynamic reference to another Excel workbook by using the following pattern: Note. The workbook your formula refers to should always be open, otherwise the INDIRECT function will throw a #REF error. As usual, the IFERROR function can help you avoid it: Normally, Microsoft Excel changes cell references when you insert new or delete existing rows or columns in a sheet. To prevent this from happening, you can use the INDIRECT function to work with cell references that should remain intact in any case. To illustrate the difference, please do the following:\n• Enter any value in any cell, say, number 20 in cell A1.\n• Refer to A1 from two other cells in different ways: and See what happens? The cell with the equal to logical operator still returns 20, because its formula has been automatically changed to =A2. The cell with the INDIRECT formula now returns 0, because the formula was not changed when a new row was inserted and it still refers to cell A1, which is currently empty: After this demonstration, you may be under the impression that the INDIRECT function is more a nuisance than help. Okay, let's try it another way. Suppose, you want to sum the values in cells A2:A5, and you can easily do this using the SUM function: However, you want the formula to remain unchanged, no matter how many rows are deleted or inserted. The most obvious solution - the use of absolute references - won't help. To make sure, enter the formula in some cell, insert a new row, say at row 3, and… find the formula converted to . Of course, such courtesy of Microsoft Excel will work fine in most cases. Nevertheless, there may be scenarios when you don't want the formula to get changed automatically. The solution is to use the INDIRECT function, like this: Since Excel perceives \"A1:A5\" as a mere text string rather than a range reference, it won't make any changes when you insert or delete a row(s).\n\n Using INDIRECT with other Excel functions Apart from SUM, INDIRECT is frequently used with other Excel functions such as ROW, COLUMN, ADDRESS, VLOOKUP, SUMIF, to name a few. Quite often, the ROW function is used in Excel to return an array of values. For example, you can use the following array formula (remember it requires pressing Ctrl + Shift + Enter) to return the average of the 3 smallest numbers in the range A1:A10: However, if you insert a new row in your worksheet, anywhere between rows 1 and 3, the range in the ROW function will get changed to ROW(1:4) and the formula will return the average of the 4 smallest numbers instead of 3. To prevent this from happening, nest INDIRECT in the ROW function and your array formula will always remain correct, no matter how many rows are inserted or deleted: Here's a couple more examples of using INDIRECT and ROW in conjunction with the LARGE function: How to sum N largest numbers in a range.\n\n You can use Excel INDIRECT together with the ADDRESS function to get a value in a certain cell on the fly. As you may remember, the ADDRESS function is used in Excel to get a cell address by the row and column numbers. For example, the formula returns the string $C$1 since C1 is the cell at the intersection of the 1st row and 3rd column. To create an indirect cell reference, you simply embed the ADDRESS function into an INDIRECT formula like this: Of course, this trivial formula only demonstrates the technique. And here are a few examples that may prove really useful:\n• INDIRECT ADDRESS formula - how to switch rows and columns.\n• VLOOKUP and INDIRECT - how to dynamically pull data from different sheets.\n• INDIRECT with INDEX / MATCH - how to bring a case-sensitive VLOOKUP formula to perfection.\n• Excel INDIRECT and COUNTIF - how to use the COUNTIF function on a non-contiguous range or a selection of cells. Using INDIRECT with Data Validation in Excel You can use the Excel INDIRECT function with Data Validation to create cascading drop down lists that display different choices depending on what value the user selected in the first dropdown. A simple dependent drop-down list is really easy to make. All it takes is a few named ranges to store the dropdown's items and a simple formula where A2 is the cell displaying your first drop-down list. To make more complex 3-level menus or drop-downs with multi-word entries, you will need a bit more complex INDIRECT formula with a nested SUBSTITUTE function. For the detailed step-by-step guidance on how to use INDIRECT with Excel Data Validation, please check out this tutorial: How to make a dependent drop down list in Excel.\n\n\n\nAs demonstrated in the above examples, the INDIRECT function is quite helpful when dealing with cell and range references. However, not all Excel users eagerly embrace it mostly because extensive use of INDIRECT in Excel formulas results in lack of transparency. The INDIRECT function is difficult to review since the cell it refers to is not the ultimate location of the value used in the formula, which is pretty confusing indeed, especially when working with large complex formulas. In addition to the above said, like any other Excel function, INDIRECT may throw an error if you misuse the function's arguments. Here's a list of most typical mistakes: Most often, the INDIRECT function returns a #REF! error in three cases:\n• ref_text is not a valid cell reference. If the ref_text parameter in your Indirect formula is not a valid cell reference, the formula will result in the #REF! error value. To avoid possible issues, please check the INDIRECT function's arguments.\n• Range limit is exceeded. If the ref_text argument of your Indirect formula refers to a range of cells beyond the row limit of 1,048,576 or the column limit of 16,384, you will also get the #REF error in Excel 2007, 2010 and Excel 2013. Earlier Excel versions ignore the exceeded limit and do return some value, though often not the one you'd expect.\n• The referred sheet or workbook is closed. If your Indirect formula refers to another Excel workbook or worksheet, that other workbook / spreadsheet must be open, otherwise INDIRECT returns the #REF! error. This is the most obvious case, implying that there is some error in the function's name, which leads us to the next point : )\n\n Using the INDIRECT function in non-English locales You may be curious to know that the English name of the INDIRECT function has been translated into 14 languages, including: If you are interested to get the full list, please check out this page. A common problem with non-English localizations is not the INDIRECT function's name, but rather different Regional Settings for the List Separator. In the standard Windows configuration for North America and some other countries, the default List Separator is a comma. While in European countries, the comma is reserved as the Decimal Symbol and the List Separator is set to semicolon. As a result, when copying a formula between two different Excel locales, you may get the error message \"We found a problem with this formula…\" because the List separator used in the formula is different from what is set on your machine. If you run into this error when copying some INDIRECT formula from this tutorial into your Excel, simply replace all commas (,) with semicolons (;) to get it fixed. To check which List Separator and Decimal Symbol are set on your machine, open the Control Panel, and go to Region and Language > Additional Settings.\n\n\n\nHopefully, this tutorial has shed some light on using INDIRECT in Excel. Now that you know its strengths and limitations, it's time to give it a shot and see how the INDIRECT function can simplify your Excel tasks. Thank you for reading!"
    },
    {
        "link": "https://support.microsoft.com/en-us/office/indirect-function-474b3a3a-8a26-4f44-b491-92b6306fa261",
        "document": "Returns the reference specified by a text string. References are immediately evaluated to display their contents. Use INDIRECT when you want to change the reference to a cell within a formula without changing the formula itself.\n\nThe INDIRECT function syntax has the following arguments:\n• Ref_text Required. A reference to a cell that contains an A1-style reference, an R1C1-style reference, a name defined as a reference, or a reference to a cell as a text string. If ref_text is not a valid cell reference, INDIRECT returns the #REF! error value.\n• If ref_text refers to another workbook (an external reference), the other workbook must be open. If the source workbook is not open, INDIRECT returns the #REF! error value. Note: External references are not supported in Excel Web App.\n• If ref_text refers to a cell range outside the row limit of 1,048,576 or the column limit of 16,384 (XFD), INDIRECT returns a #REF! error.\n• A1 Optional. A logical value that specifies what type of reference is contained in the cell ref_text.\n• If a1 is TRUE or omitted, ref_text is interpreted as an A1-style reference.\n• If a1 is FALSE, ref_text is interpreted as an R1C1-style reference.\n\nCopy the example data in the following table, and paste it in cell A1 of a new Excel worksheet. For formulas to show results, select them, press F2, and then press Enter. If you need to, you can adjust the column widths to see all the data. Value of the reference in cell A2. The reference is to cell B2, which contains the value 1.333. Value of the reference in cell A3. The reference is to cell B3, which contains the value 45. Because cell B4 has the defined name \"George,\" the reference to that defined name is to cell B4, which contains the value 10. Combines \"B\" with the value in A5, which is 5. This, in turn, refers to cell B5, which contains the value 62."
    },
    {
        "link": "https://stackoverflow.com/questions/64505923/using-indirect-function-with-dynamic-array-formula-syntax-excel-o365",
        "document": "I am using the new dynamic array functions introduced in Excel in 2018 (e.g. SEQUENCE, UNIQUE etc. functions). I have a list of cell references that are generated dynamically and would like to apply the INDIRECT function to these list items. A simplified example: \n\n cell A1: (results in rows column A values 1,2,3,4,5 as expected)\n\n cell B1: (results in rows column B values A1, A2, A3, A4, A5 as expected)\n\n cell C1: this should give me rows in column C values 1,2,3,4,5, but in fact gives me #VALUE ,#VALUE ,#VALUE ,#VALUE ,#VALUE So the formula properly recognizes the number of rows of the original dynamic array, but for some reason does not dereference the cells properly. The strings seem to be of the proper format - a simple string function such as LEN also works: setting C1 to results in 5 rows of the value 2.\n\n\n\nThe syntax per se seems to be OK.. for the special case of in cell A1 everything works as intended. I tried the R1C1 reference format also, same result\n\n\n\nEDIT Overall I am trying to achieve the following\n• import a list form a non-Excel data source - list is not a dynamic array, it's just a TSV import. I don't know beforehand how many items are in this list, and it can vary a lot\n• do several different calculations on values of this list.\n• so far my approach was to use the function to determine the number of items in the imported list, and then use that to create the second list using and to retrieve values.\n• the problem arises for some calculations where the data contains references to other rows so I have to use indirect addressing to get at that data"
    },
    {
        "link": "https://corporatefinanceinstitute.com/resources/excel/excel-indirect",
        "document": "What is the Excel INDIRECT Function?\n\nThe Excel INDIRECT Function[1] returns a reference to a range. The INDIRECT function does not evaluate logical tests or conditions. Also, it will not perform calculations. Basically, this function helps lock the specified cell in a formula. Due to this, we can change a cell reference within a formula without changing the formula itself.\n\nOne advantage of this function is that the indirect references won’t change even when new rows or columns are inserted in the worksheet. Similarly, references won’t change when we delete existing ones.\n\nEnter your name and email in the form below and download the free template now!\n\nref_text is the reference supplied as text\n\na1 is the logical value\n\nThe type of reference, contained in the ref_text argument, is specified by a1.\n\nWhen a1 is TRUE or is omitted, then ref_text is interpreted as an A1-style cell reference.\n\nWhen a1 is FALSE, then ref_text is treated as an R1C1 reference.\n\nA1 style is the usual reference type in Excel. It is preferable to use A1 references. In this style, a column is followed by a row number.\n\nR1C1 style is completely opposite of A1 style. Here, rows are followed by columns. For example, R2C1 refers to cell A2 which is in row 2, column 1 in a sheet. If there is no number after the letter, then it means Excel is referring to the same row or column.\n\nTo learn more, launch our free Excel crash course now!\n\nExample of Excel INDIRECT in action\n\nLet’s understand the formula through an example. Suppose A1 = 32 and using the INDIRECT function, we give reference A1 as shown below:\n\nIn the above example, the INDIRECT function converted a text string into a cell reference. The INDIRECT function helps us put the address of one cell (A1 in our example) into another as a usual text string, and then get the value of the first cell by acknowledging the second.\n\nHow is the INDIRECT function useful to Excel users?\n\nINDIRECT can be a very a useful function. Let’s take a few examples to understand the merits of the INDIRECT function.\n\nFor an array of numbers:\n\nGiven the formula INDIRECT( “D”&4 ), the function will return 8. This is because the INDIRECT formula reduces to D4 and returns the data in cell D4.\n\nLet’s look at combining INDIRECT with the ROW function. The ROW function returns the reference to the current row number (i.e., 3), and uses this to form part of the cell reference. Therefore, the INDIRECT formula returns the value from cell E3.\n\nWith the formula SUM( INDIRECT( “C4:E4” ) ), the INDIRECT function returns a reference to the range C4:E4, and then passes this to Excel’s SUM function. The SUM function, therefore, returns the sum of cells C4, D4, and E4, that is (4 + 8 + 9).\n\nSimilarly, we can use the formula AVERAGE ( INDIRECT( “C5:E5” ) ). The INDIRECT function returns a reference to the range C5:E5, and then passes this to Excel’s AVERAGE function.\n\nThe usefulness of Excel’s INDIRECT function is not just limited to building “dynamic” cell references. In addition, it can also be used to refer to cells in other worksheets.\n\nINDIRECT may also be useful when referencing multiple sheets in a workbook:\n\nKeep in mind that when referencing a different worksheet a single quote (‘) and the exclamation point (!) will need to be concatenated to get the proper sheet reference. The single quote is necessary if the worksheet name in question has a space in the name (e.g., Project 1 has a space between Project and 1). The above formula in cell D5 reduces to ‘Project 1!’D5 + ‘Project 2!’D5. More advanced formulations of this basic example are possible as well.\n\nTo learn more, launch our free Excel crash course now!\n\nHow to lock a cell reference using INDIRECT function\n\nGenerally, when we add or delete rows or columns in Excel, the cell references change automatically. If you wish to prevent this from happening, the INDIRECT function is quite useful.\n\nIn the screenshot below, we used the INDIRECT function for A2 and gave a plain reference for A3.\n\nWhat will happen when we insert a new column? The cell equal to the logical operator still returns 20, as its formula was automatically changed to =B3.\n\nHowever, the cell with the INDIRECT formula now returns 0, because the formula was not changed when a new row was inserted and it still refers to cell A2, which is currently empty:\n\nSo the Excel INDIRECT function would be useful in a scenario when we don’t want the formula to get changed automatically.\n\nTo keep learning about Excel functions and developing your skills, check out our Free Excel Crash Course! Learn how to create more sophisticated financial analysis and modeling to become a successful financial analyst.\n\nThanks for reading CFI’s guide to the important Excel INDIRECT function! By taking the time to learn and master these functions, you’ll significantly speed up your financial analysis. To learn more, check out these additional CFI resources:\n• Advanced Excel Formulas You Must Know"
    },
    {
        "link": "https://exceljet.net/functions/indirect-function",
        "document": "The INDIRECT function returns a valid cell reference from a given text string. INDIRECT is useful when you need to build a text value by concatenating separate text strings that can then be interpreted as a valid cell reference.\n\nINDIRECT takes two arguments, ref_text and a1. Ref_text is the text string to evaluate as a reference. A1 indicates the reference style for the incoming text value. When a1 is TRUE (the default value), INDIRECT evaluates ref_text as an \"A1\" style reference. When a1 is FALSE, INDIRECT evaluates ref_text as an \"R1C1\" style reference. For example:\n\nNote: the a1 argument only changes the way INDIRECT evaluates ref_text, not the result.\n\nOut of all Excel's many functions, INDIRECT might be the most confusing to new users. The purpose of INDIRECT at first seems baffling — why would you use text for a reference when you can simply provide a normal reference? One reason is that you already have a reference as text (perhaps in a cell) and you need a way to make Excel understand it as a reference. Another reason is that you want to assemble a reference in a formula using different bits of information. With text, you can easily hardcode some values, pick up other values from the worksheet, and join the values together using concatenation. The challenge however is that once you have created a reference as text, Excel won't recognize it as a reference. To Excel, it's just a text value. You can think of the INDIRECT function as a magic wand that converts the text to an actual reference.\n\nThings to know about INDIRECT\n\nHere are some things you should know about the INDIRECT function:\n• The input to INDIRECT is text. You can create this text any way you like.\n• INDIRECT will evaluate the text and convert it into a valid reference.\n• If INDIRECT can't understand the text as a reference, it will return a #REF error.\n• INDIRECT can cause performance problems in large or complex worksheets. Use with care.\n\nHere are a few ways you can use the INDIRECT function in a formula:\n• Create a formula that uses a sheet name entered in a cell.\n• A formula that can assemble a cell reference from bits of text\n• Create a fixed reference that will not change even when rows or columns are deleted\n• Create numeric arrays with the ROW function in older versions of Excel.\n\nExample 1 - the basic idea of INDIRECT\n\nThe worksheet below shows the basic idea of the INDIRECT function. The text entered in column E represents different ranges. However, if we try to use the text directly in the SUM function as a range, SUM returns zero:\n\nThis happens because SUM doesn't see the text value as a reference; it simply sees a text string:\n\nThe solution is to add the INDIRECT function, which converts the text values into actual ranges:\n\nNotice in the second line below we still have a text value, but in the third line we have the range C5:C6, and SUM now returns 9:\n\nIn the example shown below, INDIRECT is set up to use a variable sheet name. The formula in cell C5 is:\n\nThe formula in C5 concatenates the text in B5 to the string \"!A1\" and returns the result to INDIRECT. The INDIRECT function then evaluates the text and converts it to a valid reference. As the formula is copied down, it returns the value in cell A1 for each of the 5 sheets listed in column B.\n\nThe formula is dynamic and responds to the sheet names in column B. If the sheet names are changed, the formula will automatically recalculate.\n\nIf the sheet names in your worksheet include spaces or punctuation, use the formula below:\n\nUsing the same approach explained in the example above, we can allow a user to select a sheet name from a dropdown list, and then construct a reference to cell A1 on the selected sheet with INDIRECT. The formula in cell C5 is the same:\n\nWhen a different sheet name is selected, the formula will recalculate and INDIRECT will fetch the value from cell A1 in the selected sheet. Note that cell A1 is used only as an example, you can change the cell reference as desired.\n\nIn the worksheet below, VLOOKUP is used to get costs for two vendors, A and B. Using the vendor indicated in column F, VLOOKUP automatically uses the correct table:\n\nThe formula in G5 is:\n\nNormally, a reference like A1:A100 will change if rows or columns are deleted. For example, if a row is deleted in this range, the reference will become A1:A99. To create a reference that will not change, you can use the INDIRECT function like this:\n\nBecause the text value is static, the reference created by INDIRECT will not change even when cells, rows, or columns are inserted or deleted. The formula below will always refer to the first 100 rows of column A.\n\nThe INDIRECT function can easily be used with named ranges. The worksheet below contains two named ranges: Group1 (B5:B12) and Group2 (C5:C12). When \"Group1\" or \"Group2\" is entered in cell F5, the formula in cell F6 sums the appropriate range using INDIRECT like this:\n\nThe value in F5 is text, but INDIRECT converts the text into a valid range.\n\nA specific example of this approach is using named ranges to make dependent dropdown lists.\n\nA more advanced use of INDIRECT is to create a numeric array with the ROW function like this:\n\nOne use case is explained in this formula, which sums the bottom n values in a range. You may also run into the ROW + INDIRECT approach in more complex formulas that need to assemble a numeric array \"on the fly\". One example is this formula, designed to strip numeric characters from a string.\n\nWorking with the INDIRECT function can be tricky because you can't actually see the reference it returns. Instead, you just see the value at the reference when it works, or an error if the reference is invalid. Here are some troubleshooting tips:\n• Be sure you have a good understanding of How to concatenate in Excel. Many INDIRECT problems are caused by text values that can't be coerced into valid reference.\n• Be sure to include single quotes when referencing sheet names that contain space or punctuation (i.e. 'Sheet 1'!A1).\n• Debug the text string being delivered to INDIRECT with the F9 key to confirm it meets expectations.\n• Work in small steps to make sure INDIRECT is returning the reference you expect before plugging it into a more complex formula.\n• References created by INDIRECT are evaluated in real-time and the value at the reference is returned.\n• When ref_text is an external reference to another workbook, the workbook must be open.\n• When a1 is TRUE (the default value), INDIRECT evaluates ref_text as an \"A1\" style reference.\n• When a1 is FALSE, INDIRECT evaluates ref_text as an \"R1C1\" style reference.\n• INDIRECT is a volatile function and can cause performance issues in large or complex worksheets."
    }
]