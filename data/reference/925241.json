[
    {
        "link": "https://medium.com/@info_82002/a-beginners-guide-to-encryption-and-decryption-in-python-12d81f6a9eac",
        "document": "In today’s digital age, ensuring the security of sensitive information is crucial. Encryption and decryption are fundamental techniques used to protect data from unauthorized access. Python, with its extensive libraries, makes it relatively straightforward to implement these techniques. In this blog, we’ll explore how to implement encryption and decryption in Python using different libraries and methods.\n\n1. Symmetric Encryption with Fernet (from the library)\n\nFernet is a part of the library and provides symmetric encryption. Symmetric encryption means the same key is used for both encryption and decryption.\n\nFirst, install the library if you haven't already:\n• : Generates a random 32-byte key used for encryption and decryption.\n• : Creates a Fernet cipher object using the generated key. This object will be used for encryption and decryption operations.\n• : Defines the message to be encrypted. Note the prefix indicates a byte string, which is necessary for cryptographic operations.\n• : Encrypts the message using the object and stores the result in . The encrypted data is returned as a byte string.\n• : Decrypts the using the same object and stores the result in .\n• : Decodes the decrypted byte string into a human-readable string and prints it.\n• Symmetric Encryption: Fernet uses symmetric encryption, meaning the same key is used for both encryption and decryption.\n• Key Security: The generated key is crucial for security. It should be kept secret and never shared.\n• Fernet: Provides a high-level interface for symmetric encryption, simplifying the process.\n\nAsymmetric encryption uses a pair of keys — a public key for encryption and a private key for decryption.\n• : Provides functions for generating and managing RSA key pairs.\n• : Generates a new RSA key pair with a key size of 2048 bits (common for security).\n• : Exports the private key in a format suitable for storage or transmission.\n• : Exports the public key, which can be safely shared with others for encryption.\n• : Imports the public key from its exported format for use in encryption.\n• : Encrypts the message with the public key using PKCS1_OAEP padding. The result ( ) is encrypted data that can only be decrypted with the corresponding private key.\n• : Decrypts the using the private key and PKCS1_OAEP padding. The result ( ) is the original message.\n• RSA: An asymmetric encryption algorithm where a public key pair is used. Public key for encryption, private key for decryption.\n• PKCS1_OAEP: A secure padding scheme that adds randomness to the message before encryption, improving security over plain RSA.\n• Key Security: The private key must be kept secret. Sharing the private key compromises the security of all messages encrypted with the corresponding public key.\n\nHashing is a one-way function that converts data into a fixed-size string of characters, which is typically a hash code. It’s commonly used for verifying data integrity.\n• : Converts the message string into a byte string, as hash functions operate on byte data.\n• : Calculates the hash of the message and returns it as a hexadecimal string.\n• Hashing is one-way: It’s computationally infeasible to determine the original message from its hash.\n• Hashing for Integrity: Hashes are used to verify data integrity. If the hash of a message changes, it means the message has been altered.\n• Hashing for Security: Hashes are used in password storage, digital signatures, and other security applications.\n\nAES (Advanced Encryption Standard) is a symmetric encryption algorithm widely used across the globe.\n\nImplementing encryption and decryption in Python is quite manageable with the help of various libraries. This article covered basic examples of symmetric encryption with Fernet, asymmetric encryption with RSA, hashing with SHA-256, and symmetric encryption with AES. These techniques are foundational in safeguarding data and ensuring its integrity in any application."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-encrypt-and-decrypt-strings-in-python",
        "document": "How to Encrypt and Decrypt Strings in Python?\n\nIn this article, we will learn about Encryption, Decryption and implement them with Python.\n\nEncryption is the process of encoding the data. i.e converting plain text into ciphertext. This conversion is done with a key called an encryption key.\n\nDecryption is the process of decoding the encoded data. Converting the ciphertext into plain text. This process requires a key that we used for encryption.\n\nWe require a key for encryption. There are two main types of keys used for encryption and decryption. They are Symmetric-key and Asymmetric-key.\n\nIn symmetric-key encryption, the data is encoded and decoded with the same key. This is the easiest way of encryption, but also less secure. The receiver needs the key for decryption, so a safe way need for transferring keys. Anyone with the key can read the data in the middle.\n\nInstall the python cryptography library with the following command.\n• None Then generate an encryption key, that can be used for encryption and decryption.\n• None Convert the string to a byte string, so that it can be encrypted.\n• None Instance the Fernet class with the encryption key.\n• None Then encrypt the string with the Fernet instance.\n• None Then it can be decrypted with Fernet class instance and it should be instanced with the same key used for encryption.\n\nIn Asymmetric-key Encryption, we use two keys a public key and a private key. The public key is used to encrypt the data and the private key is used to decrypt the data. By the name, the public key can be public (can be sent to anyone who needs to send data). No one has your private key, so no one in the middle can read your data.\n\nInstall the python rsa library with the following command.\n• None Then encrypt the byte string with the public key.\n• None Then the encrypted string can be decrypted with the private key.\n• None The public key can only be used for encryption and the private can only be used for decryption.\n\nHow to Encrypt and Decrypt Strings in Python? – FAQs\n\nHow to Encrypt and Decrypt a Message in Python\n\nWhat is the Best Encryption and Decryption Algorithm in Python?\n\nHow to Decrypt a Password in Python\n\nDecrypting a password implies that the password was encrypted and stored rather than hashed. For sensitive information like passwords, it’s recommended to use hashing (which is a one-way process) rather than encryption (which is reversible). If you have a legitimate need to decrypt information (not typically passwords but other secure data), you would use the same decryption method as you used to encrypt, such as the Fernet example shown above.\n\nHow to Encode a Message in Python\n\nEncrypting a Python file (or any file) can be done using the library. Here’s how you might encrypt and decrypt a file: This example demonstrates how to read a file, encrypt its contents, and write the encrypted data back to a new file. The decryption process reverses these steps to restore the original file. Be sure to securely manage the encryption keys used in your applications"
    },
    {
        "link": "https://reddit.com/r/Python/comments/qn9x33/basic_encryptiondecryption_program",
        "document": "Hello everyone, I hope you're having a good day.\n\nToday when going through some old programs in my files, I stumbled upon an encryption and decryption program that I made. It was quite simple, you enter some text into the program and it changes each character in the sentence to a different one. Here's the link to the code:\n\nThe original code for this was very long since I was still getting the hang of loops and thought it was difficult to implement, but I've added the original code to the repository nonetheless for the sake of comparing the improvement in the code (if you get triggered by the code, don't worry, I don't code like that anymore).\n\nMy next move for the code is to try and make it encrypt entire files, and hopefully generate a random key to encrypt the file as well for better security and save the time on making large lists to encrypt it for me. If you happen to have an idea on how to do this, or any idea or critic at all, I'd love to know!\n\nHopefully I can make this program more powerful at its purpose, but for now it's there to simply show how encryption and decryption works."
    },
    {
        "link": "https://medium.com/@danushidk507/cryptography-algorithms-in-python-3fe41cab9457",
        "document": "In Python, several cryptographic techniques are available to secure data, ranging from symmetric and asymmetric encryption to hashing and digital signatures. These techniques are implemented using various libraries, with popular ones like , , and . Here's an overview of the common cryptography techniques in Python:\n\nWorking Principle: In symmetric encryption, the same key is used for both encryption (turning plaintext into ciphertext) and decryption (turning ciphertext back into plaintext). The key must be kept secret between the sender and the receiver.\n• Encryption: Plaintext is combined with a secret key to produce scrambled data (ciphertext).\n• Decryption: The ciphertext and the same secret key are used to revert the scrambled data back to the original plaintext.\n\nAES (Advanced Encryption Standard) is a widely used symmetric encryption algorithm because it’s fast and secure. It encrypts data in fixed block sizes (128-bit blocks) and uses different key lengths (128, 192, or 256 bits).\n\nExample Scenario: If you send a message to a friend, both you and your friend have the same key. You use the key to scramble the message (encryption), and your friend uses the same key to unscramble it (decryption).\n\nSymmetric encryption uses a single key for both encryption and decryption. The most popular algorithm is AES (Advanced Encryption Standard).\n• : Provides high-level and low-level interfaces for encryption.\n\nExample with AES (using ):\n\nWorking Principle: Asymmetric encryption uses a pair of keys — a public key and a private key. The public key is shared openly, while the private key is kept secret. Data encrypted with the public key can only be decrypted with the private key, and vice versa.\n• Encryption: The sender uses the recipient’s public key to encrypt the message.\n• Decryption: The recipient uses their private key to decrypt the message.\n\nRSA (Rivest-Shamir-Adleman) is a popular asymmetric encryption algorithm, widely used for securing data transmissions, especially in secure websites (HTTPS).\n\nECC (Elliptic Curve Cryptography) is a more modern version of asymmetric encryption. It achieves the same security as RSA but with shorter keys, making it faster and more efficient.\n\nExample Scenario: When you visit a secure website, the website provides its public key to your browser. Your browser encrypts your credit card info using this public key, and only the website’s private key can decrypt it.\n\nAsymmetric encryption uses a public key for encryption and a private key for decryption. RSA and ECC (Elliptic Curve Cryptography) are commonly used algorithms.\n• : Provides RSA and other asymmetric algorithms.\n\nExample with RSA (using ):\n\nWorking Principle: Hashing converts data into a fixed-length string (a hash) that is unique to that data. Hashes are typically one-way, meaning you can’t reverse the process to get back the original data.\n• Hashing: A mathematical function is applied to the input data (e.g., a file or message), creating a unique hash (a fixed-length string).\n• Integrity check: If even one character of the original data changes, the hash will change completely, allowing the detection of tampering.\n\nSHA (Secure Hash Algorithm) and MD5 (Message Digest Algorithm) are common hashing algorithms. SHA-256, for example, produces a 256-bit hash.\n\nExample Scenario: When you download software, the website provides a hash of the file. After downloading, you compute the hash of your copy. If the hash matches the one provided, you know the file hasn’t been tampered with.\n\nHashing transforms data into a fixed-size string of characters, which is typically irreversible. SHA-256, SHA-512, and MD5 are popular hashing algorithms.\n\nExample using SHA-256 (using ):\n\nWorking Principle: Key derivation functions take a password and convert it into a cryptographically secure key, often used to encrypt data. This process makes it harder for attackers to guess passwords using brute force attacks.\n• Process: The key derivation function applies many rounds of hashing to the password and salt, making it computationally expensive to guess passwords.\n• Output: A derived key, which can then be used for encryption or authentication.\n\nPBKDF2 (Password-Based Key Derivation Function 2), Scrypt, and Argon2 are algorithms used to slow down password cracking attempts by making each guess computationally expensive.\n\nExample Scenario: When you create an account on a website, your password is not stored directly. Instead, the website uses PBKDF2 to hash and store a version of your password, which it compares when you log in.\n\nKey derivation functions are used to derive a cryptographic key from a password.\n\nWorking Principle: Digital signatures provide authenticity and integrity. They allow the recipient of a message to verify that the message came from the sender and was not altered during transmission.\n• Signing: The sender hashes the message and encrypts the hash using their private key, creating a signature.\n• Verification: The recipient decrypts the signature using the sender’s public key and compares the resulting hash with the hash of the message they received. If the hashes match, the message is authentic.\n\nRSA and ECDSA (Elliptic Curve Digital Signature Algorithm) are commonly used for digital signatures.\n\nExample Scenario: When a software company releases an update, they include a digital signature. Before installing the update, your computer verifies the signature to ensure that the update came from the company and hasn’t been tampered with.\n\nDigital signatures ensure the authenticity and integrity of a message. RSA and ECDSA are commonly used algorithms for signing data.\n• : Provides RSA and ECDSA for digital signatures.\n\nExample using RSA Digital Signature (using ):\n\nWorking Principle: HMAC (Hash-based Message Authentication Code) ensures data integrity and authenticity using a secret key and a hashing function.\n• Authentication: The sender hashes the message with a secret key, creating a HMAC.\n• Verification: The recipient, who also has the secret key, hashes the received message and compares the HMAC. If the values match, the message is authentic.\n\nExample Scenario: When two systems communicate (e.g., a client and server), they can use HMAC to ensure that the messages exchanged haven’t been modified during transmission.\n\nHMAC provides both data integrity and authenticity using a cryptographic hash function and a secret key.\n\nExample using HMAC (using ):\n\nWorking Principle: Steganography hides secret data within another file (such as an image, audio, or video file) without visibly altering the original file. Unlike encryption, which makes the data unreadable, steganography conceals the very existence of the data.\n• Hiding: Secret data is embedded into the least noticeable parts of the file (for example, in the least significant bits of an image).\n• Extraction: The secret data is extracted from the original file without anyone else noticing it was there.\n\nExample Scenario: You might hide a secret message within an image file by slightly altering some pixel values. To a viewer, the image looks the same, but with the right tool, the secret message can be revealed.\n\nSteganography hides data within another medium, such as images or audio files. While not a core cryptography technique, it’s often used for covert communication.\n\nExample using Stegano (hiding text in an image):\n• Symmetric Encryption (AES): Same key for encryption and decryption, fast and secure, widely used.\n• Asymmetric Encryption (RSA, ECC): Public key for encryption, private key for decryption, secure for communication.\n• Hashing (SHA, MD5): One-way transformation of data to a fixed-length value, ensures data integrity.\n• Steganography: Hides data inside another file to conceal its existence."
    },
    {
        "link": "https://linkedin.com/posts/theintect_a-beginners-guide-to-encryption-and-decryption-activity-7226553945643474945-V_NA",
        "document": "🔐 Learning Classic Encryption with Caesar Cipher! 🔢🔒 I recently worked on an exciting project where I implemented the Caesar Cipher algorithm using Python. The Caesar Cipher is one of the most well-known encryption techniques, where each letter in the text is shifted by a certain number of positions in the alphabet. This hands-on task helped me better understand basic encryption concepts and gave me a new appreciation for the foundations of cryptography. Here are a few key takeaways: Understanding Classical Encryption: The Caesar Cipher might be a simple technique, but it’s the building block of more complex encryption methods. Learning how this substitution cipher works gave me insight into the history and evolution of encryption. Algorithm Design: Implementing the cipher in Python required careful handling of both encryption and decryption processes. The challenge was to ensure that characters wrap around the alphabet and that non-alphabetic characters remain unchanged. Shift Values and Reversibility: I realized how important the shift value is, as it dictates how much each letter is transformed. A positive shift encodes the message, and reversing it with a negative shift decrypts it back to the original. Practical Applications: Even though this method is basic and not used for modern security, it introduces important concepts like key-based encryption, which is fundamental in today’s cryptography. I thoroughly enjoyed building this and look forward to diving into more complex encryption techniques! #Python #Cryptography #Programming #Encryption #TechLearning #Cybersecurity #ProgrammingProjects #ProdigyInfoTech"
    },
    {
        "link": "https://stackoverflow.com/questions/9594125/salt-and-hash-a-password-in-python",
        "document": "Based on the other answers to this question, I've implemented a new approach using bcrypt.\n\nIf I understand correctly, the argument to use over is that is designed to be slow. also has an option to adjust how slow you want it to be when generating the hashed password for the first time:\n\nSlow is desirable because if a malicious party gets their hands on the table containing hashed passwords, then it is much more difficult to brute force them.\n\nI was able to install the library pretty easily in a linux system using:\n\nHowever, I had more trouble installing it on my windows systems. It appears to need a patch. See this Stack Overflow question: py-bcrypt installing on win 7 64bit python"
    },
    {
        "link": "https://medium.com/top-python-libraries/hashing-passwords-using-the-top-5-python-libraries-5ec530973b17",
        "document": "In contemporary society, protecting data such as user passwords is important in the modern world. The first technique of securing passwords is known as hashing. Hashing is a one-way cryptographic process that converts a password into a string of characters of a fixed length that looks random. This string is then safely stored. The password the user enters when trying to sign in is hashed once more and compared to the original hash to check their authenticity.\n\nIn this blog let us understand how we can hash passwords using the first five commonly used libraries in Python. These libraries are widely used in the industry for password hashing.\n\nIn this tutorial, a thorough introduction to the libraries will be provided, as well as their usage and usage of the libraries and a demonstration of how the password is hashed using libraries to show how they are similar."
    },
    {
        "link": "https://geeksforgeeks.org/hashing-passwords-in-python-with-bcrypt",
        "document": "In this article, we will see how to hash passwords in Python with BCrypt. Storing passwords in plain text is a bad practice as it is vulnerable to various hacking attempts. That’s why it is recommended to keep them in a hashed form.\n\nIt’s a process of converting one string to another using a hash function. There are various types of hash functions but there are some basic similarities that are satisfied by all of them is that hashing is an irreversible process. i.e. conversion should be only one way, the length of hash should be fixed, and an input string should uniquely correspond with a hash so that we can compare them later, this makes it ideal for passwords and authentication.\n\nBcrypt is a password hashing function designed by Nelis Provos and David Mazières. Bcrypt uses strong cryptography to hash and salts password based on the Blowfish cipher. To make encryption stronger we can increase the “cost factor” so it can be increased as computers become faster. It is also intended to be slow, to make the brute force attacks slower and harder.\n\nTo install Bcrypt use the command –\n\nThe functions in Bcrypt used –\n• bcrypt.gensalt() – It is used to generate salt. Salt is a pseudorandom string that is added to the password. Since hashing always gives the same output for the same input so if someone has access to the database, hashing can be defeated. for that salt is added at end of the password before hashing. It doesn’t need any arguments and returns a pseudorandom string.\n• bcrypt.hashpw() – It is used to create the final hash which is stored in a database.\n• Arguments – We can pass Salt and Password in form of bytecode.\n• Return value – If hashing is successful, it returns a hash string.\n\nTo use bcrypt, you’ll need to import bcrypt module, After that the bcrypt.hashpw() function takes 2 arguments: A string (bytes) and Salt. Salt is random data used in the hashing function. Let’s hash a password and print it in the following examples.\n\nNow let’s just change the input password a little bit to see the behavior of hashing.\n\nThe following example checks a password against a hashed value.\n\nHere we will check whether the user has entered the correct password or not, for that we can use bcrypt.checkpw(password, hash). At first, let’s assume the user entered the wrong password.\n\nNow let’s see what happens when passwords are matched:"
    },
    {
        "link": "https://reddit.com/r/Python/comments/17j4lbz/hash_passwords_using_bcrypt_library_in_python",
        "document": "Web-based services and websites store hashed versions of your passwords, which means your actual password isn’t visible or stored in their database instead a string of fixed-length characters is stored.\n\nHashing is a security technique used to secure your passwords or texts stored in databases. A hash function is used to generate a string of unique fixed-length characters from the provided password by the user.\n\nLet’s see how the hashing is done. In this article, you’ll use the bcrypt library to hash the user’s password and then compare that hashed password to the actual password in Python."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-hash-passwords-in-python",
        "document": "In this article, we are going to know how to hash passwords in python.\n\nA strong password provides safety. Plain text passwords are extremely insecure, so we need to strengthen the passwords by hashing the password. Hashing passwords is a cheap and secure method that keeps the passwords safe from malicious activity. Password hashing generates a unique password for every text, even if the plaintext password is the same.\n\nWhy do we need to Hash a Password?\n\nHashing is used mainly to protect a password from hackers. Suppose, if a website is hacked, cybercriminals don’t get access to your password. Instead, they just get access to the encrypted “hash” created by the method of hashing.\n\nWhat is salt in hashing?\n\nIn cryptography, a salt is random data used as an additional input to a one-way function that hashes data, such as a password. Salts are used to keep passwords safe while they are being stored. Historically, only the password’s cryptographic hash function was maintained on a system, but over time, additional precautions were developed to prevent the identification of duplicate or common passwords. One such prevention is salting.\n\nEncryption: Encryption is the process of encoding plain text or any information in such a way that only authorized people can read it with a corresponding key so that confidential data can be protected from unauthorized persons.\n\nHashing: Hashing converts any amount of data into a fixed-length hash that cannot be reversed. It is widely used in cryptography. The hash allows us to validate if the input has changed even slightly, if it is changed the resulting hash will be different. In this article, we are going to learn the Salted Password Hashing technique. It includes converting an algorithm to map data of any size to a fixed length.\n\nThe BCrypt Algorithm is used to hash and salt passwords in a secure way. BCrypt enables the creation of a password protection layer that can develop local hardware innovation in order to protect against long-term hazards or threats, such as attackers having the computational capacity to guess passwords twice as efficiently.\n\nExample: In this Program, we will be hashing the password using bcrypt.\n\nHere we are using “GeekPassword” as an input to be converted to a hash.\n\nThe Python hashlib module is an interface for easily hashing messages. This contains many methods that will handle hashing any raw message into an encrypted format. The main purpose of this module is to use a hash function on a string and encrypt it so that it is very difficult to decrypt it. hash library: It is used to create a hash table. The hash table is a data structure that is designed for searching through a set of entries, each of which is identified by a unique key.\n\nExample 2: In this Program, we will be hashing the password using hashlib.\n\nHere we are using “GeekPassword” as an input to be converted to a hash.\n\nOne approach that is not mentioned in the provided article is using the Argon2 algorithm to hash passwords in Python. Argon2 is a password-hashing function that was selected as the winner of the Password Hashing Competition (PHC) in 2015. It is designed to be resistant to attacks such as dictionary attacks, brute-force attacks, and precomputation attacks.\n\nTo use Argon2 to hash passwords in Python, you can use the argon2-cffi library. Install using pip install argon2-cffi .Here is an example of how to use the argon2-cffi library to hash a password:"
    }
]