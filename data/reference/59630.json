[
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/how-to-set-up-vehicles-in-unreal-engine",
        "document": "The individual assets that make up a vehicle are as follows.\n• One or more Wheel Blueprints\n\nThese are the same no matter whether you are creating an automobile or a motorcycle. This document will guide you through the process of setting up a Vehicle.\n• Creating an Animation Blueprint with the Wheel Controller node.\n\nBefore using Chaos Vehicles, the Chaos Plugin needs to be enabled.\n• Click the Physics category and enable the ChaosVehiclesPlugin.\n\nThe wheel Blueprint is where the configuration for a Wheel / Suspension / Brakes combination is set up.\n\nIn most cases, you will require at least two wheel types per vehicle. A wheel (or axle) that is affected by the steering / engine / handbrake, and one that is not. Also, this may be the case for having differently sized wheels for the front or the back, in which case, you have full control over setting the differing radii, mass, width, handbrake effect, suspension, and many other properties to give your vehicle the handling you desire.\n\nThere is no limit on the number of wheels that a vehicle may have. It is possible for multiple vehicles to share the same Wheel Blueprints, but this strategy is only valid if the wheel dimensions and suspension limits are the same.\n• In the Content Browser, right-click and select Blueprint Class from the Create Basic Asset section.\n• In the Pick Parent Class window, under All Classes, search for \"wheel\" and select ChaosVehicleWheel. Click Select to create the asset.\n• The new asset will be created in the Content Browser. Give it a recognizable name so that you can easily locate it later (for example, 'BP_ChaosFrontWheel').\n• (Optional Step) Repeat these steps again so that you have a front and rear wheel type. Think of each as a setup per axle.\n\nDouble-click the assets in the Content Browser to open them in the Blueprint Editor, where there are options to edit the wheels.\n\nTo start, there are five properties that need to change for each wheel, as the rest of the properties depend on how the vehicle performs (and should be tweaked later on) during testing.\n\nExample Class Defaults for the Chaos Wheel Blueprint.\n\nFor the buggy example, set the Wheel Radius to 58 for both front and back wheel Blueprints.\n\nThe torque curve represents the amount of torque output from the engine at a given RPM. The graph's X axis represents the engine RPM (revolutions per minute) with a range from 0 to the engine max RPM. The Y axis represents the engine Torque output in NM (Newton Meters). A typical torque curve is an inverted U shape with the torque peaking near the middle of the rev range, and trailing off either side.\n\nTo create your torque curve, follow these steps:\n• In the Content Browser, right-click and select Miscellaneous > Curve. Select the Curve Float type and click the Select button to create the asset.\n• In the Content Browser, double-click TorqueCurve to open it in the Curve Editor. Add points to create the curve shape to your liking.\n\nThis guide uses the Buggy vehicle mesh from the Vehicle Game sample project. In the Epic Games Launcher click the Learn tab to find the project.\n\nAfter importing a vehicle mesh to your project, follow these steps to view the mesh in the Physics Asset Editor.\n• In the Content Browser, double-click the vehicle Skeletal Mesh to open it.\n• Click the Physics tab to open the Physics Asset Editor.\n\nIf you have a skeletal mesh that does not have an associated physics asset, then you can create a physics asset by following these steps:\n• In the Content Browser, right-click the skeletal mesh asset and select Create > Physics Asset > Create and Assign.\n• Click the Primitive Type dropdown and select Single Convex Hull. Click Create Asset to create a new physics asset. This will generate a physics asset with default collision shapes for each of the bones. The initial collision setup will most likely not be ideal since it will use the same primitive type to represent all of the bones in the physics asset.\n• In the Content Browser, right-click the physics asset to open it in the Physics Asset Editor.\n• Inside the Physics Asset Editor you can adjust the collision primitives used on each bone to better suit the vehicle mesh.\n• In the Skeleton Tree window, click the gear icon and select Show Primitives.\n• Select all the wheel bones inside the Skeleton Tree window.\n• Go to the Tools window and under the Body Creation section, click the Primitive Type dropdown and select Sphere. Click Re-generate Bodies.\n• You can now see the Sphere primitives on each of the wheels.\n• Select the suspension bones inside the Skeleton Tree window. Right-click and select Collision > No Collision to remove collision from the vehicle suspension.\n\nCreating an Animation Blueprint with the Wheel Controller node\n\nAnimation Blueprints are used to control Vehicle Skeletal Mesh animations specific to that vehicle, such as spinning tires, suspension, handbrakes, and steering animations. To offload a lot of the work in creating these types of animations, you can use the Wheel Controller Node to drive the animations.\n\nWhere an Animation Blueprint is used to get and control animations for the vehicle, the Wheel Controller node makes controlling all of the animations for the vehicle straightforward with little to no additional setup.\n\nThe node gets the necessary information from the wheels (such as \"How fast is it spinning?\" or \"Is it affected by the Handbrake?\" or \"What are the suspension settings for this wheel?\"), and translates the query results to an animation on the bone that the wheel is associated with.\n• In the Content Browser, right-click and select Animation > Animation Blueprint.\n• In the Create Animation Blueprint window, select the VehicleAnimationInstance parent class and select the vehicle Skeleton from the list. Click Create to create a new Animation Blueprint asset.\n• In the Content Browser, double-click the animation Blueprint to open it.\n• Right-click in the Anim Graph and search for then select Mesh Space Ref Pose.\n• Right-click in the Anim Graph and search for then select Wheel Controller for WheeledVehicle. Connect the Mesh Space Ref Pose node to the Wheel Controller node.\n• Right-click in the Anim Graph and search for then select Component To Local. Connect the Wheel Controller node to the Component To Local node. Connect the Component To Local node to the Output Pose node.\n• (Optional Step) If you have additional struts or other suspension needs (like the sample Buggy from Vehicle Game), you will need additional nodes in the Animation Graph to handle the joints that affect those polygons. For example, in the Buggy, the extra joints are used to control the axle connections to the wheels. These are driven by Look At nodes, which, when given the wheel joints, will be driven by the Wheel Controller node. The Look At nodes will ensure the suspension stays attached to the wheels, as demonstrated in the following example.\n\nThe Buggy uses the following Look At node composition:\n\nIn this section, you will create the Vehicle Blueprint that uses all the assets created in the previous sections.\n• In the Content Browser, right-click and select Blueprint Class from the Create Basic Asset category.\n• In the Pick Parent Class window, expand the All Classes section and search for and select WheeledVehiclePawn. Click Select to create the new Blueprint asset.\n• In the Content Browser, double-click the Vehicle Blueprint to open it.\n• In the Components window, click the Mesh Skeletal Mesh Component. Go to the Details panel and under the Mesh section click the Skeletal Mesh dropdown. Select your vehicle's Skeletal Mesh asset.\n• In the Details panel, scroll to the Animation section and click the Anim Class dropdown. Select your vehicle's Animation Blueprint.\n• In the Details panel, scroll to the Physics section and enable the Simulate Physics checkbox.\n• From the Components window, click Add Component, and search for then select Spring Arm.\n• With the Spring Arm component selected, click Add Component, and search for then select Camera.\n• In the Viewport select the Camera and position it to your liking.\n• Select the Camera component and go to the Details panel. Scroll to the Camera Settings section and verify that Use Pawn Control Rotation is disabled. This ensures that the camera is locked to its view direction rather than the Player Controller's view direction.\n• Select the Vehicle Movement Component in the Components window.\n• Go to the Details panel and scroll to the Vehicle Setup section. Expand the arrow next to Wheel Setups and set the following for each wheel:\n• Set the Wheel Class to the Wheel Blueprint(s) you created.\n• Set the Bone Name to the name of the joint that should be controlled by the wheel. The order you assign the wheels has no bearing on whether it is a front or a rear wheel, only the Bone Name and Wheel Class have any effect. For organizational purposes, we recommend keeping the wheels in the same order for each new vehicle (for example: FL, FR, BL, BR). Keeping a standard helps when you access wheel data by wheel index (the index in the Wheel Setup array). If the vehicle requires more than 4 wheels, click the + icon next to the Wheel Setups property to add more, or conversely remove wheels as needed.\n• Select the Vehicle Movement Component in the Components window and go to the Details panel. Scroll down to the Mechanical Setup section and expand the Engine Setup category. Expand the Torque Curve category and add the torque curve asset to the External Curve dropdown.\n• Go to the Input category and set up control inputs for steering, throttle, brake, and handbrake. The image below shows the inputs for the Buggy in the Vehicle Game.\n• In the Content Browser, double-click the Vehicle Blueprint to open it.\n• Drag the Vehicle Movement Component to the Event Graph to create a node.\n• Drag from the Vehicle Movement Component node and search for then select Set Throttle Input.\n• Right-click in the Event Graph and search for then select Throttle to add your Throttle input event.\n• Connect the InputAxis Throttle node to the Set Throttle Input node. Connect the Axis Value pin from the InputAxis Throttle node to the Throttle pin of the Set Throttle Input node.\n• Follow the steps above and add the nodes for Set Brake Input and Set Steering Input, and connect them with their corresponding input events.\n• Follow the steps above and add the nodes for Set Pitch Input, Set Roll Input and Set Yaw Input, and connect them with their corresponding input events.\n• Follow the steps above and add the nodes for Set Change Up Input and Set Change Down Input, and connect them with their corresponding input events.\n• Enable the New Gear Up checkbox on the Set Change Up Input node.\n• Enable the New Gear Down checkbox on the Set Change Down Input node.\n• Follow the steps above and add the node for Set Handbrake Input twice, and connect each node to the Pressed and Released pins of the InputAction Handbrake node. Enable the New Handbrake checkbox on the Set Handbrake Input node connected to the Pressed pin.\n• In the Content Browser, right-click and select Blueprint Class from the Create Basic Asset category.\n• In the Pick Parent Class window, select Game Mode Base to create the Game Mode Blueprint.\n• In the Content Browser, double-click the new Game Mode Blueprint to open it.\n• Go to the Details panel and scroll to the Classes section. Click the Default Pawn Class dropdown and select your Vehicle Blueprint.\n• Click Compile and Save, then close the window.\n• In the Main Viewport window, click Window > World Settings to open the World Settings panel.\n• Go to the World Settings panel and scroll down to the Game Mode section.\n• Click the GameMode Override dropdown and select your Game Mode Blueprint.\n\nIf you have an existing PhysX vehicle that you want to convert to Chaos, follow the PhysX to Chaos Vehicle Conversion guide."
    },
    {
        "link": "https://dev.epicgames.com/community/learning/tutorials/ZeKz/unreal-engine-setting-up-the-chaos-vehicles-plugin",
        "document": ""
    },
    {
        "link": "https://forums.unrealengine.com/t/vehicle-arcade-physics-with-chaos-physics/761615",
        "document": "I’m rather new to game-development. First dabbled a bit with Godot, but it was/is too heavy with having to program nearly everything, which resulted in progressing at a snails pace and even not getting any further. So I switched to Unreal Engine, first time dipping my toes in it with 4.26/4.27 (Chaos).\n\n Since I’m in the very beginnings of my game, it’s better for me to use UE5.1 and fiddle with all the new stuff, instead of learning the things that will be obsolete/deprecated after awhile. So I’m focusing on the Chaos physics, and my programming skills are just so-so, I want to be able to get the majority done with the properties provided and blueprints. It was easy to set up the Chaos physics and control to get the car moving. Plenty of documentation and tutorials about that. I’m no car-mechanic either and there are so many properties that I get lost in them.\n\n I want to create an arcade-racer like Split Second: Velocity (although most are from in Godot, here you can see what I’m trying to develop). So I generally need my cars to be ‘planted’ to the ground, certainly not tip over, gain speed quickly and maintaining most of it even during turning, but also be able to put into a drift a control it easily. I’ve already done some basic stuff, like increasing the Friction Force Multiplier of front and rear wheels, (which helped getting up to speed more quickly), changed the center of mass on the Z-axis to a negative value (keeping the car more grounded and not so prone to rolling over, although it still can). Also trying to get more drift by setting the center of mass more to the back of the car, but that also gives various results. What properties should I look at, to get more ‘arcade-physics’ out of the Chaos physics?\n\n In the Vehicle Movement Component details, I also see something of ‘Arcade control’, divided into ‘Torque control’, ‘Target Rotation Control’ and ’ Stabalize Control’. Can that help to get more arcadey physics?\n\n Will using exaggerated values help or just make things more difficult down the road? (no pun intended ) Btw, I hope I’m in the right section of the forum for these questions.\n\nThanks for sharing your Youtube channel. Welcome to the Forums! Great questions, I would love to see a extensive breakdown of all these ‘knobs and switches’ that drive Chaos Vehicles. But I’m not aware of any yet. It would be a bit like deciphering hieroglyphics for me, but looking at the C++ code that drives these settings could be one aspect in getting a better understanding. Lowering the center of mass for stability was a good idea. Another idea is to enable the debug/telemetry data. This is tangential, but I’d love to see something like a ‘Chaos Vehicles Tuners Club’ where people share their vehicles/settings and there is some standardized race tracks to test the vehicles on. It still feels like ‘early days’ for Chaos Vehicles. (In 5.1 the plugin is tagged as ‘Experimental’…) So I’m expecting better tutorials/documentation as the systems solidify.\n\nI have a feeling Chaos Vehicles has most things covered. I’m coming accross different solutions and sometimes opposite opinions on the matter. Raycasts seem to be popular for arcade physics. They refer to the suspensions I guess. But then I see that the Chaos wheels are by default Raycast.\n\n This seems to be a popular reference: https://www.youtube.com/watch?v=LG1CtlFRmpU , where I do understand the logic, but nobody is showing ‘me’ how to do it. That’s the main problem: everybody is showing stuff, but vague about how to actually apply it and show how it’s done, like other tutorials are done.\n\n I’m not scared of learning these things, but it’s hard to learn if they don’t show you the information. Every link I click, it’s more explanation without showing anything. Very frustrating for someone who’s new to the syntax and blueprints.\n\n I’ve also come accross a blueprint site where you can copy them, but they don’t work as they are from UE 5.0 and it seems UE5.1 doesn’t have things like ‘Chaos Wheeled Vehicle Component’ anymore. And I also don’t like to just copy/past things, as I won’t learn anything by doing that. I rather have a step by step tutorial that explains what and why they are doing the things they are doing. As much information I’ve already found about it, Chaos seems to have it all implemented, so it would be ridiculous for me to “reinvent the wheel”. Lower center of mass, raycast suspension, friction wheels, velocity/torque, … . This is all in Chaos, I just need to find a way to manipulate to what I need.\n\n I’ve found some old official tutorials, but some of those properties don’t exist anymore (https://www.youtube.com/watch?v=6vFZ9alQKqI). The ‘Lat Stiff’ and ‘Long Stiff’ values are gone, and I think they are replaced with the ‘Lateral Slip graph’, but I can’t find anything on how to set that up.\n\n Actually, most properties I try to google, I come up empty handed. I’ve tried the ‘Arcade Control’ section in the ‘Vehicle Movement Component’. My hunch was atleast right and they seem make it easier to set the physics up to have a more arcade handling. The only one I’ve figured out up till now is the ‘Stabilize Control’ section. By the visual debugs, I’ve figured out that these create an opposite force to what the Chaos physics are creating, to make sure the car isn’t sliding too easily ‘Position Hold XY’ (which I had to lower a lot from the default value) or coming of the ground too easily ‘Altitude Hold Z’ (which I had increase a lot from the default value, yet with the default gravity of -980, still had that floaty balloon feel when jumping from higher to lower ground).\n\n The ‘Stabilize Control’ has made the handling better and if I use the handbrake, it will drift… but just a bit. It still loses speed and it’s still a short sim-like drift with little control over it. So I know I need forward and/or lateral velocity for it (as explained by some youtube video’s). Which I think might be what the ‘Torque Control’ and ‘Target Rotation Control’ under ‘Arcade Control’ are for, but experimenting with them as yielded nothing so far, even with the visual debugs on I don’t have a qlue. Then I saw you can disable ‘Mechanical Sim’, which makes the car not move at all. Probably so I can make it move through custom BluePrint code(?). Not that I currently know how to set that up. I first found something about ‘Simple Wheeled Vehicle Component’, but that doesn’t appear to exist in UE5.1 either anymore. Seems like everything is converted to Chaos. Seems like the major problem is that important information isn’t available. Information that is known, people seem to keep for themselves and are very vaque about. So basically, nowhere is concrete information to be found, just the “magic numbers” excuse. With so many arcade-racers made (in UE), I find it hard to believe it’s this difficult to find information or help about the subject.\n\n It constantly feels like 2 steps forward, 5 steps back. A bit off-topic, but how can I find the topics where I’m part of? Either where I’m the topic-starter or a replier?\n\nI’m trying to get a sphere to roll, but with the purpose of controlling a car. Apparently, such a method is used to get more of an arcade control to the cars. So maybe that way I can disable the Mechanical Sim and keep the rest of the Chaos Vehicle. No problem getting a sphere to roll forward and backward, or even left or right (with add force or torque). Problem is that left and right are achieved with applying that torque or force, while I need to it to rotate the direction of the forward/backward force/torque. All the tutorials I find for controlling a sphere, they use all the directions to apply force/torque. I tried the link in this thread also, but doesn’t work for me either. I’m trying to achieve something like this:\n\n Building an arcade racer: Part 2\n\n Problem for me is:\n• It’s in programming language and since I’m new to this all, not good at converting (unknown) code Blueprints.\n\nI experience the same problems as you are: mainly a lack of useful information to find.\n\n I’m an UE beginner, though i have lots of programming experience, i am only using BluePrints right now.\n\n Meanwhile i have 3 UE versions installed and tried out vehicles in all version (PhysX and Chaos). It appears to be difficult to even make the same car(behavior) in the different editor versions… and seeing by the lack of good videos and/or tutorials, i am not alone having that problem.\n\n It is a struggle with different settings (in different editor versions) and physical materials (and what more) to make a car do what you want (or even get close to what you want).\n\n Car Physics for games\n\nYeah, I’m surprised that most tutorials don’t go beyond the basic setup. And others that just want to sell their Blueprint setup.\n\n Which is quite hard to believe, since there are so many racing games made in Unreal. I’m still working with the UE5.1 Chaos Vehicle, but switched off those arcade controls, as I don’t know what they do and by using a Lateral SlipGraph for the rear wheels I got here: Unreal 5 Conversion - Switchboard Studios Documentation , together with increased gravity (3000) and low center of mass, it’s a stable car now.\n\n Although, still not what I want, as maintaining a drift is really hard. But atleast now I can test the length of my track and the speed of the car. I’m actually surprised, with such a common and popular game-engine, beyond the popular tutorials, there really isn’t much to no help from others. With Godot, there were atleast some people that tried to help as much as they could. With Unreal, you seem to only get help if it’s for views or for monetary gain."
    },
    {
        "link": "https://neutroniogames.wordpress.com/2024/01/17/the-ultimate-chaos-vehicle-guide",
        "document": "Anyone who worked with chaos vehicles knows that getting a Chaos Vehicle right can be more frustrating than fun. The learning curve is steep and one will spend hours just trying to find out what is wrong. I found that there is insufficient information to do effective trouble shooting as you have to squeeze out a few key infos from hours of different tutorials. I wrote this article as summary of my findings.\n\nIn this concise guide you will learn to understand, identify and quickly solve common problems with rigging your own vehicles using the Chaos Vehicle Plugin, applicable for Unreal Engine 5.3.2.\n\nTo rig a functioning chaos vehicle, pay close attention to a few important guidelines. Getting just one wrong will lead to undesired behavior guaranteed. These are the ones I figured out during my research.\n• the front side of each wheel has to face X-Axis\n• the front side of the vehicle has to face X-Axis\n• all wheels need to be their own object\n• wheels need their object center in the center of their geometry\n• all wheel centers/axles need to sit directly on X-Axis and Y-Axis\n• all wheel bones need to have the proper rotation, with X-Axis as front, Y-Axis as right side, Z-Axis as top.\n• both mesh and armature need to be exported\n\nWhen exporting a vehicle rig, the armature and all its mesh components need to be selected during export. With the below shown export setting, any unit adjustment should be superfluous as of Unreal 5.3.2. If this ever makes issues, the scaling unit of your 3D program needs to be adjusted to Unreal Engine.\n\nChaos Vehicle Wheels aren’t rotating in the right direction\n\nThis happens when the wheels do not to touch the ground properly where they normally create forward motion. Instead, the wheels clip through terrain, with your vehicle resting on its car body.\n• wheel bones are not properly aligned during export.\n• vehicle is not properly aligned during export\n• for wheels, in your 3D program: rotate armature and/or bones until wheel front is facing towards X-Axis. To double check whether you did everything right, import the model into Unreal Engine, go to its Physics Asset and open Physics Asset Editor\n• for vehicle, in your 3D program: rotate your vehicle as follows: X = front, Y = side, Z = up\n• make sure the axis alignment is also reflected in the export settings in both cases\n• make sure all bones have the following hierarchy once imported into unreal:\n\nChaos Vehicle keeps moving as if it’s sitting on a hidden sphere\n\nYour vehicle’s wheel centers are most likely off.\n• this is not visible from standard UE debug collision view, as Chaos Vehicles appear to have their own collision shapes\n• I suspect that problems with wheel centers can be caused e.g. by older versions of blender, where the .fbx export plugin does not properly apply wheel transforms and spawns them at origin instead\n• unlikely but possible: in UE, check the radius configured in wheel blueprint and turn it down\n• in UE, turn down the wheel radius of your wheel blueprints\n• If issue still persists, define each wheel offset manually (copy wheel transform from 3D program into UE -> Vehicle Pawn -> Details -> Wheel Setup) as workaround\n\nHere I want to honor a few handy tutorials that helped me understand Chaos Vehicles and compile this guide as a result.\n• How to rig vehicle in Blender 2.8 for UE4 on continuebreak.com"
    },
    {
        "link": "https://forums.unrealengine.com/t/how-do-i-start-developing-a-mud-tries-series-type-of-vehicle-mechanics/1718110",
        "document": "Hi everyone,\n\n want to know how and where do i start developing vehicle mechanics like mud-tries or snow-runner series in unreal 5.3 using chaos vehicle plugin.\n\n So i not new to chaos vehicle plugin but still I need to understand how to limit the max speed just mud-tries series\n\nDeveloping vehicle mechanics with mud-tyres or snow-runner-like features in Unreal Engine 5.3 using the Chaos Vehicle Plugin involves a combination of physics settings, materials, and custom scripting. To limit the maximum speed specifically for mud-tyres, you might want to focus on adjusting the friction and handling characteristics\n• Make sure you have the Chaos Vehicle Plugin enabled in your Unreal Engine project.\n• In the Chaos Vehicle Setup, adjust the vehicle’s mass, wheel properties, and suspension settings to simulate realistic behavior on different terrains.\n• Create a custom physical material for the mud-tyres to simulate the reduced friction on muddy terrain. This material can be assigned to the tyre mesh.\n• Adjust the friction settings in the material to represent the slippery nature of mud.\n• Utilize the Chaos Vehicle Plugin’s surface type settings to define different terrains. For mud, create a specific surface type.\n• In the vehicle blueprint, you can add custom script logic to limit the maximum speed based on the surface type.\n• Use the event graph to detect the current surface type the vehicle is on, and adjust the vehicle’s maximum speed accordingly.\n• Test your vehicle on different terrains to ensure the mud-tyre behavior is as expected.\n• Adjust the friction properties, vehicle mass, and speed limiting values until you achieve the desired result.\n• Explore additional parameters in the Chaos Vehicle Plugin to fine-tune the behavior, such as wheel slip, suspension stiffness, and damping. Remember to refer to the Unreal Engine documentation and Chaos Vehicle Plugin documentation for specific details on the available settings and functionalities. By customizing the physical properties and scripting the behavior based on terrain types, you can create a more immersive mud-tyre experience in your Unreal Engine project\n\nSorry for the late update, I was out for my Cousin wedding. so here is basic set up I have done do, if you something better then this please let post it here. \n\n So this two picture are for basic throttle setting. Here is the pictures for the setting in Vehicle Movement Component(VehicleMovementComp). \n\n \n\n \n\n \n\n \n\n \n\n Here is the picture for front tires.\n\n \n\n \n\n \n\n Here is the picture for back tires.\n\n \n\n \n\n \n\n I haven’t touched Lateral Slip as of now.\n\nThanks for the reply and the effort of uploading the screenshots. I’m not that far from what you have, the main difference is I’m not using “Legacy Wheel Position”, and I have different values for the spring rate and preload. I got my values from the formulas discussed in this post. My guess is the difference might be in your vehicle model/rig and the center of mass values make the vehicle wobble more realistically or something. Anyway thanks for sharing your work.\n\nSorry I had taken few day off from developing.\n\n Yes, that is true one of the 3d artist made the vehicle with it custom COM(center of mass) and we also tweak it in unreal I might posted the screenshot let me know if it is there."
    },
    {
        "link": "https://forums.unrealengine.com/t/arcade-drift-vehicle-system-code-and-game-logic/121664",
        "document": "Hey everyone!\n\n After trying to use Unreal’s default vehicle system without luck I’ve made my own and it should be available on the marketplace soon (hopefully).\n\nSo what is it?\n• A simple and flexible vehicle system for Arcade like driving games.\n• Fast and easy to setup. Quickly add new vehicles, no complex materials or physics stuff to tweak for hours, just the needed parameters.\n• Blueprint friendly, all state/data exposed, Blueprint implementable events for all state changes (DriftStart/End, BrakeStart/End, ReadyToDrift etc…)\n• Debug tools (lot of info in ShowDebug command and a custom visualizer class to show suspensions, forces etc…)\n• UI Game HUD, Main Menu, Pause Menu with Resume and Restart Options. Result Menu. All UI supports Gamepad control\n\nAs a Mario Kart / oldschool racing game fan, I’ve found that getting something that feels right is actually super tricky. Getting the right amount of acceleration, adherence, turning angles, suspension feel as well as the right track/vehicle size ratio is really not easy.\n\n I’ve tried to make this system easily configurable by getting the minimum possible number of settings while decoupling them as much as possible from one another. This means that wanting a slighly faster car does not mean spending 3 days tweaking a ton of settings and debalancing the whole game.\n\nRight now I’m still working on cleaning up the code, fine tuning everything and improving the assets (I know the lighting sucks in the video…). If there’s anything that you see missing or would have wanted to see in this kind of system do not hesitate and tell me!\n\nAlso if you have any implementation related question, feel free to ask, I’ve spend -way too- much time on this and I’d be happy to share what I’ve leaned \n\n https://forums.unrealengine.com/core/image/gif;base64\n\n ​"
    },
    {
        "link": "https://forums.unrealengine.com/t/vehicle-arcade-physics-with-chaos-physics/761615",
        "document": "I’m rather new to game-development. First dabbled a bit with Godot, but it was/is too heavy with having to program nearly everything, which resulted in progressing at a snails pace and even not getting any further. So I switched to Unreal Engine, first time dipping my toes in it with 4.26/4.27 (Chaos).\n\n Since I’m in the very beginnings of my game, it’s better for me to use UE5.1 and fiddle with all the new stuff, instead of learning the things that will be obsolete/deprecated after awhile. So I’m focusing on the Chaos physics, and my programming skills are just so-so, I want to be able to get the majority done with the properties provided and blueprints. It was easy to set up the Chaos physics and control to get the car moving. Plenty of documentation and tutorials about that. I’m no car-mechanic either and there are so many properties that I get lost in them.\n\n I want to create an arcade-racer like Split Second: Velocity (although most are from in Godot, here you can see what I’m trying to develop). So I generally need my cars to be ‘planted’ to the ground, certainly not tip over, gain speed quickly and maintaining most of it even during turning, but also be able to put into a drift a control it easily. I’ve already done some basic stuff, like increasing the Friction Force Multiplier of front and rear wheels, (which helped getting up to speed more quickly), changed the center of mass on the Z-axis to a negative value (keeping the car more grounded and not so prone to rolling over, although it still can). Also trying to get more drift by setting the center of mass more to the back of the car, but that also gives various results. What properties should I look at, to get more ‘arcade-physics’ out of the Chaos physics?\n\n In the Vehicle Movement Component details, I also see something of ‘Arcade control’, divided into ‘Torque control’, ‘Target Rotation Control’ and ’ Stabalize Control’. Can that help to get more arcadey physics?\n\n Will using exaggerated values help or just make things more difficult down the road? (no pun intended ) Btw, I hope I’m in the right section of the forum for these questions.\n\nThanks for sharing your Youtube channel. Welcome to the Forums! Great questions, I would love to see a extensive breakdown of all these ‘knobs and switches’ that drive Chaos Vehicles. But I’m not aware of any yet. It would be a bit like deciphering hieroglyphics for me, but looking at the C++ code that drives these settings could be one aspect in getting a better understanding. Lowering the center of mass for stability was a good idea. Another idea is to enable the debug/telemetry data. This is tangential, but I’d love to see something like a ‘Chaos Vehicles Tuners Club’ where people share their vehicles/settings and there is some standardized race tracks to test the vehicles on. It still feels like ‘early days’ for Chaos Vehicles. (In 5.1 the plugin is tagged as ‘Experimental’…) So I’m expecting better tutorials/documentation as the systems solidify.\n\nI have a feeling Chaos Vehicles has most things covered. I’m coming accross different solutions and sometimes opposite opinions on the matter. Raycasts seem to be popular for arcade physics. They refer to the suspensions I guess. But then I see that the Chaos wheels are by default Raycast.\n\n This seems to be a popular reference: https://www.youtube.com/watch?v=LG1CtlFRmpU , where I do understand the logic, but nobody is showing ‘me’ how to do it. That’s the main problem: everybody is showing stuff, but vague about how to actually apply it and show how it’s done, like other tutorials are done.\n\n I’m not scared of learning these things, but it’s hard to learn if they don’t show you the information. Every link I click, it’s more explanation without showing anything. Very frustrating for someone who’s new to the syntax and blueprints.\n\n I’ve also come accross a blueprint site where you can copy them, but they don’t work as they are from UE 5.0 and it seems UE5.1 doesn’t have things like ‘Chaos Wheeled Vehicle Component’ anymore. And I also don’t like to just copy/past things, as I won’t learn anything by doing that. I rather have a step by step tutorial that explains what and why they are doing the things they are doing. As much information I’ve already found about it, Chaos seems to have it all implemented, so it would be ridiculous for me to “reinvent the wheel”. Lower center of mass, raycast suspension, friction wheels, velocity/torque, … . This is all in Chaos, I just need to find a way to manipulate to what I need.\n\n I’ve found some old official tutorials, but some of those properties don’t exist anymore (https://www.youtube.com/watch?v=6vFZ9alQKqI). The ‘Lat Stiff’ and ‘Long Stiff’ values are gone, and I think they are replaced with the ‘Lateral Slip graph’, but I can’t find anything on how to set that up.\n\n Actually, most properties I try to google, I come up empty handed. I’ve tried the ‘Arcade Control’ section in the ‘Vehicle Movement Component’. My hunch was atleast right and they seem make it easier to set the physics up to have a more arcade handling. The only one I’ve figured out up till now is the ‘Stabilize Control’ section. By the visual debugs, I’ve figured out that these create an opposite force to what the Chaos physics are creating, to make sure the car isn’t sliding too easily ‘Position Hold XY’ (which I had to lower a lot from the default value) or coming of the ground too easily ‘Altitude Hold Z’ (which I had increase a lot from the default value, yet with the default gravity of -980, still had that floaty balloon feel when jumping from higher to lower ground).\n\n The ‘Stabilize Control’ has made the handling better and if I use the handbrake, it will drift… but just a bit. It still loses speed and it’s still a short sim-like drift with little control over it. So I know I need forward and/or lateral velocity for it (as explained by some youtube video’s). Which I think might be what the ‘Torque Control’ and ‘Target Rotation Control’ under ‘Arcade Control’ are for, but experimenting with them as yielded nothing so far, even with the visual debugs on I don’t have a qlue. Then I saw you can disable ‘Mechanical Sim’, which makes the car not move at all. Probably so I can make it move through custom BluePrint code(?). Not that I currently know how to set that up. I first found something about ‘Simple Wheeled Vehicle Component’, but that doesn’t appear to exist in UE5.1 either anymore. Seems like everything is converted to Chaos. Seems like the major problem is that important information isn’t available. Information that is known, people seem to keep for themselves and are very vaque about. So basically, nowhere is concrete information to be found, just the “magic numbers” excuse. With so many arcade-racers made (in UE), I find it hard to believe it’s this difficult to find information or help about the subject.\n\n It constantly feels like 2 steps forward, 5 steps back. A bit off-topic, but how can I find the topics where I’m part of? Either where I’m the topic-starter or a replier?\n\nI’m trying to get a sphere to roll, but with the purpose of controlling a car. Apparently, such a method is used to get more of an arcade control to the cars. So maybe that way I can disable the Mechanical Sim and keep the rest of the Chaos Vehicle. No problem getting a sphere to roll forward and backward, or even left or right (with add force or torque). Problem is that left and right are achieved with applying that torque or force, while I need to it to rotate the direction of the forward/backward force/torque. All the tutorials I find for controlling a sphere, they use all the directions to apply force/torque. I tried the link in this thread also, but doesn’t work for me either. I’m trying to achieve something like this:\n\n Building an arcade racer: Part 2\n\n Problem for me is:\n• It’s in programming language and since I’m new to this all, not good at converting (unknown) code Blueprints.\n\nI experience the same problems as you are: mainly a lack of useful information to find.\n\n I’m an UE beginner, though i have lots of programming experience, i am only using BluePrints right now.\n\n Meanwhile i have 3 UE versions installed and tried out vehicles in all version (PhysX and Chaos). It appears to be difficult to even make the same car(behavior) in the different editor versions… and seeing by the lack of good videos and/or tutorials, i am not alone having that problem.\n\n It is a struggle with different settings (in different editor versions) and physical materials (and what more) to make a car do what you want (or even get close to what you want).\n\n Car Physics for games\n\nYeah, I’m surprised that most tutorials don’t go beyond the basic setup. And others that just want to sell their Blueprint setup.\n\n Which is quite hard to believe, since there are so many racing games made in Unreal. I’m still working with the UE5.1 Chaos Vehicle, but switched off those arcade controls, as I don’t know what they do and by using a Lateral SlipGraph for the rear wheels I got here: Unreal 5 Conversion - Switchboard Studios Documentation , together with increased gravity (3000) and low center of mass, it’s a stable car now.\n\n Although, still not what I want, as maintaining a drift is really hard. But atleast now I can test the length of my track and the speed of the car. I’m actually surprised, with such a common and popular game-engine, beyond the popular tutorials, there really isn’t much to no help from others. With Godot, there were atleast some people that tried to help as much as they could. With Unreal, you seem to only get help if it’s for views or for monetary gain."
    },
    {
        "link": "https://reddit.com/r/unrealengine/comments/13d3dwg/wip_drifting_mechanic_skulls_and_wheels_dev_update",
        "document": "Archived post. New comments cannot be posted and votes cannot be cast."
    },
    {
        "link": "https://forums.unrealengine.com/t/vehicle-jumping/463521",
        "document": "imagine a fun game that you press space bar and your vehicle jumps. what do you do to make it with blueprints? which blueprint you use? velocity, impulse, teleport and why? what setting in wheeled vehicle you change?\n\n thanks for your help and patience ; )\n\n oh i almost forgot, its important that vehicle lands on the wheels\n\nIf you’d like to set up a simple, fun vehicle and bypass the (maybe) complex built-in vehicle setup… here is a REALLY good overview of the main concepts Space Dust Racing UE4 Arcade Vehicle Physics Tour - YouTube If you combine it with this one… UE4 How to make Car Vehicle Wheel with Suspension using Physics in Unreal Engine 4 Tutorial - YouTube… you may have something really fun to play To jump, use something like a jump event triggered by the space bar and use AddImpulse in the upward (or upward combined with forward direction/velocity) of the vehicle. If you’d like to get really elegant, driven by a timeline, you could charge your jump by compressing your suspension and AddForce driven over a short period\n\nHonestly, I’d maybe suggest making sure it works locally first… physics in multiplayer adds another layer of complexity and unknown factors. I’m literally doing exactly this myself on my own project. Try lowering your Center of Mass offset in the component that is simulating physics… (1 unit = 1 centimeter, maybe start with -100 cm in Z) a lower center of mass will help your vehicle to right itself in the air yet still look alright (GTA style). I’d also reduce the Linear and Angular Damping settings there too (it will slow down momentum speed and spinning). For a start, set both to 1 or 2. I’m fairly sure that using GetActorLocation will likely give you incorrect results. Depending on your game design, you might consider your actor’s GetForwardVector, or GetUpVector or some kind of combination. AddForce, AddImpulse and AddTorque all usually need BIG numbers (starting at like, 10000) to make a difference… because they include the mass of the actor. (on the physics simulating component)… unless you tick VelChange on the BP node. The above nodes act on the center of mass (or maybe the pivot) honestly, I forget which. Also, I’d advise that you check the location of the center of mass (UE4 might’ve calculated it to be off-center if your simulating component collision is asymmetrical. Also, maybe don’t use AddForceAtLocation unless you really know why you are using it\n\nthanks to aNorthStar i created it and its like this so when i hit space bar its calling vehicle jump event (it runs on server because of multiplayer replication stuff). its working but still has a little spinning in air and lands on the roof one of ten times. (lands on wheels 9 times too). i locked x and y axis in vehicle mesh and it worked but that seemed so terrible so is there any other way?\n\nhey pal sorry for late, i created it with a combine of GetUpVector and GetForwardVector and 25 vectors of the Z axis. and it worked better but there was spinning when the car was steering around and i’ve been pressing space bar. so i changed center of mass and that got harder (the vehicle was dancing great) so i changed many other things and it didnt work. then i went to blender to see the model and measure dimensions to calculate the center of mass and finally it really worked nice on Z axis -40 , thank you so much for the help, cheers."
    },
    {
        "link": "https://reddit.com/r/unrealengine/comments/xifnwx/how_to_stabilize_a_hover_vehicle_and_make_it_more",
        "document": "So, I am currently in the middle of testing out some methods of making a hover vehicle, and I have come across two distinct problems (though they might be related).\n\nSome background about my project: I am using line/sphere traces from the bottom of my vehicle, using that to determine suspension force, damping coefficients, etc to drive my add force at locations (or just adding force to the main body, still don't know which way I want to go with that). All of that is more or less working alright. My problems, however, are thus:\n\nMy first problem is that my vehicle is a bit prone to doing somersaults and/or backflips when going over the end of a ramp.\n\nThe core of it is that it feels too needy of the ground to determine its rotation/stability, and thus feels a lot like a car with big invisible suspension rather than a hover vehicle. (I mean, that makes sense as it IS a big vehicle with invisible suspension, but I'd rather it didn't feel that way!).\n\nFor solutions, I've thought maybe turning off any trace/suspension that isn't hitting ground and slowly dialing down the force from the previous amount that was valid (though that solution has been finicky and very frustrating to try to work though).\n\nThe second problem is that, when going over bumps, it bounces down too hard/fast (like it is just a car with invisible wheels (again!)), and thus doesn't have much of a feel like a REAL hover vehicle.\n\nAgain, I feel the issue is that it is too dependent on the ground to determine how it should move. I am fine with it gaining height off the ground from the suspension forces, but a hover vehicle should feel like it's hovering allows it to catch some air on the way down, and not go down as quick as it would with just gravity.\n\nI haven't been able to think of any solutions for this one.\n\nFor solutions, I know I want to stay away from Linear and Angular dampening (the actual built in application of such, maybe not a suggested way if there is such). And because I am using blueprints only in this project, I would like to keep it to a blueprint only solution.\n\nIf anyone can give me some advice, I would love to hear it.\n\nEdit: Forgot to add in an example of the feel I was hoping for, though this example is a bit faster than what I was intending for my project. This is an excellent example of a hover vehicle I found while researching: https://www.youtube.com/watch?v=o62wEBBHDj0"
    }
]