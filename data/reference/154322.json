[
    {
        "link": "https://stackoverflow.com/questions/20618355/how-to-write-a-countdown-timer-in-javascript",
        "document": "Just wanted to ask how to create the simplest possible countdown timer.\n\nThere'll be a sentence on the site saying:\n\nSo, what I want to do is to create a simple js countdown timer that goes from \"05:00\" to \"00:00\" and then resets to \"05:00\" once it ends.\n\nI was going through some answers before, but they all seem too intense (Date objects, etc.) for what I want to do."
    },
    {
        "link": "https://stackoverflow.com/questions/56569124/countdown-timer-in-vanilla-javascript-without-using-a-function",
        "document": "I have a project where I need to do a countdown timer, However no function can be used. I know that this can be done with a setInterval, however, most of the documentation I have found shows a function being used in conjunction. W3schools has a great example, however, it used a function. I know how I would do it with\n\nI have already written some code, and was able to display the minutes and seconds, however, cannot get it to actually count down. is there a way to do this without a function?\n\nThis shows the minutes and seconds, but without the setInterval or setTimeOut it wont count down like a normal countdown timer. For the project it needs to count down from ten minutes and at the end alert the user that is is expired and that they will need to refresh the page."
    },
    {
        "link": "https://w3schools.com/howto/howto_js_countdown.asp",
        "document": "Learn how to create a countdown timer with JavaScript.\n\n<!-- Display the countdown timer in an element -->\n\n<p id=\"demo\"></p>\n\n\n\n<script>\n\n// Set the date we're counting down to\n\n var countDownDate = new Date(\"Jan 5, 2030 15:37:25\").getTime();\n\n\n\n// Update the count down every 1 second\n\nvar x = setInterval(function() {\n\n \n\n // Get today's date and time\n\n var now = new Date().getTime();\n\n \n\n // Find the distance between now and the count down date\n\n var distance = countDownDate - now;\n\n\n\n // Time calculations for days, hours, minutes and seconds\n\n var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n\n var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n\n var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n\n\n // Display the result in the element with id=\"demo\"\n\n document.getElementById(\"demo\").innerHTML = days + \"d \" + hours + \"h \"\n\n + minutes + \"m \" + seconds + \"s \";\n\n\n\n // If the count down is finished, write some text \n\n if (distance < 0) {\n\n clearInterval(x);\n\n document.getElementById(\"demo\").innerHTML = \"EXPIRED\";\n\n }\n\n}, 1000);\n\n </script>"
    },
    {
        "link": "https://sitepoint.com/build-javascript-countdown-timer-no-dependencies",
        "document": "Sometimes, you’re going to need to build a JavaScript countdown clock. You may have an event, a sale, a promotion, or a game. You can build a clock in raw JavaScript rather than reaching for the nearest plugin. While there are many great clock plugins, here are the benefits you’ll get from using raw JavaScript:\n• Your code will be lightweight because it will have zero dependencies.\n• Your website will perform better. You won’t need to load external scripts and stylesheets.\n• You’ll have more control. You will have built the clock to behave exactly the way you want it to (rather than trying to bend a plugin to your will).\n\nSo, without further ado, here’s how to make your own countdown clock in a mere 18 lines of JavaScript.\n\nFor in-depth JavaScript knowledge, read our book, JavaScript: Novice to Ninja, 2nd Edition.\n• You can build a lightweight and efficient countdown clock in JavaScript with zero dependencies, providing better performance and control, without the need to load external scripts and stylesheets.\n• The process includes setting a valid end date, calculating the time remaining, converting the time to a usable format, outputting the clock data as a reusable object, and displaying the clock on the page, stopping it when it reaches zero.\n• You can refine the clock before display by removing the initial delay, making the script more efficient by updating only the numbers in the clock, and adding leading zeros as desired.\n• The clock can be expanded for certain use cases, such as scheduling the clock automatically, setting a timer for a certain amount of time from when the user arrives, and maintaining clock progress across pages by saving the clock’s end time in a cookie.\n• An important caveat to remember is that JavaScript dates and times are taken from the user’s computer, meaning the user can affect a JavaScript clock by changing the time on their machine. In super sensitive cases, it may be necessary to get the time from the server.\n\nHere’s a quick outline of the steps involved in creating a basic clock:\n• Display the clock on the page, and stop the clock when it reaches zero.\n\nFirst, you’ll need to set a valid end date. This should be a string in any of the formats understood by JavaScript’s Date.parse() method. For example:\n\nEach of these formats allows you to specify an exact time and a time zone (or an offset from UTC in the case of ISO dates). For example:\n\nYou can read more about date formatting in JavaScript in this article.\n\nThe next step is to calculate the time remaining. We need to write a function that takes a string representing a given end time (as outlined above). We then calculate the difference between that time and the current time. Here’s what that looks like:\n\nFirst, we’re creating a variable , to hold the remaining time until the deadline. The function converts a time string into a value in milliseconds. This allows us to subtract two times from each other and get the amount of time in between.\n\nNow we want to convert the milliseconds to days, hours, minutes, and seconds. Let’s use seconds as an example:\n\nLet’s break down what’s going on here.\n• Divide milliseconds by 1000 to convert to seconds:\n• Divide the total seconds by 60 and grab the remainder. You don’t want all of the seconds, just those remaining after the minutes have been counted:\n• Round this down to the nearest whole number. This is because you want complete seconds, not fractions of seconds:\n\nRepeat this logic to convert the milliseconds to minutes, hours, and days.\n\nWith the days, hours, minutes, and seconds prepared, we’re now ready to return the data as a reusable object:\n\nThis object allows you to call your function and get any of the calculated values. Here’s an example of how you’d get the remaining minutes:\n\nDisplay the Clock and Stop It When It Reaches Zero\n\nNow that we have a function that spits out the days, hours, minutes, and seconds remaining, we can build our clock. First we’ll create the following HTML element to hold our clock:\n\nThen we’ll write a function that outputs the clock data inside our new div:\n\nThis function takes two parameters. These are the id of the element that contains our clock, and the countdown’s end time. Inside the function, we’ll declare a variable and use it to store a reference to our clock container div. This means we don’t have to keep querying the DOM.\n\nNext, we’ll use to execute an anonymous function every second. This function will do the following:\n• Output the remaining time to our div.\n• If the remaining time gets to zero, stop the clock.\n\nAt this point, the only remaining step is to run the clock like so:\n\nCongratulations! You now have a basic clock in just 18 lines of JavaScript.\n\nBefore styling the clock, we’ll need to refine things a little.\n• Remove the initial delay so your clock shows up immediately.\n• Make the clock script more efficient so it doesn’t continuously rebuild the whole clock.\n\nIn the clock, we’ve used to update the display every second. This is fine most of the time, except in the beginning when there will be a one-second delay. To remove this delay, we’ll have to update the clock once before the interval starts.\n\nLet’s move the anonymous function that we’re passing to into its own separate function. We can name this function . Call the function once outside of , and then call it again inside . This way, the clock shows up without the delay.\n\nIn your JavaScript, replace this:\n\nWe need to make the clock script more efficient. We’ll want to update only the numbers in the clock instead of rebuilding the entire clock every second. One way to accomplish this is to put each number inside a tag and only update the content of those spans.\n\nNow let’s get a reference to those elements. Add the following code right after where the variable is defined\n\nNext, we need to alter the function to update only the numbers. The new code will look like this:\n\nNow that the clock is no longer rebuilding every second, we have one more thing to do: add leading zeros. For example, instead of having the clock show 7 seconds, it would show 07 seconds. One simple way to do this is to add a string of ‘0′ to the beginning of a number and then slice off the last two digits.\n\nFor example, to add a leading zero to the “seconds” value, you’d change this:\n\nIf you’d like, you can add leading zeros to the minutes and hours as well. If you’ve come this far, congratulations! Your clock is now ready for display.\n\nNote: You may have to click “Rerun” in the CodePen for the countdown to start.\n\nSee the Pen \n\nStyled JavaScript Countdown Clock by SitePoint (@SitePoint)\n\non CodePen.\n\nThe following examples demonstrate how to expand the clock for certain use cases. They are all based on the basic example seen above.\n\nLet’s say we want the clock to show up on certain days but not others. For example, we might have a series of events coming up and don’t want to manually update the clock each time. Here’s how to schedule things in advance.\n\nHide the clock by setting its property to in the CSS. Then add the following to the function (after the line that begins with ). This will cause the clock to only display once the function is called:\n\nNext we can specify the dates between which the clock should show up. This will replace the variable:\n\nEach element in the array represents a start date and an end date. As noted above, it is possible to include times and time zones, but I used plain dates here to keep the code readable.\n\nFinally, when a user loads the page, we need to check if we are within any of the specified time frames. This code should replace the previous call to the function.\n\nNow you can schedule your clock in advance without having to update it by hand. You may shorten the code if you wish. I made mine verbose for the sake of readability.\n\nSet Timer for 10 Minutes from When the User Arrives\n\nIt may be necessary to set a countdown for a given amount of time after the user arrives or starts a specific task. We’ll set a timer for 10 minutes here, but you can use any amount of time you want.\n\nAll we need to do here is replace the variable with this:\n\nThis code takes the current time and adds ten minutes. The values are converted into milliseconds, so they can be added together and turned into a new deadline.\n\nNow we have a clock that counts down ten minutes from when the user arrives. Feel free to play around and try different lengths of time.\n\nSometimes it’s necessary to preserve the state of the clock for more than just the current page. If we wanted to set a 10-minute timer across the site, we wouldn’t want it to reset when the user goes to a different page.\n\nOne solution is to save the clock’s end time in a cookie. That way, navigating to a new page won’t reset the end time to ten minutes from now.\n• If a deadline was recorded in a cookie, use that deadline.\n• If the cookie isn’t present, set a new deadline and store it in a cookie.\n\nTo implement this, replace the variable with the following:\n\nThis code makes use of cookies and regular expressions, both of which are separate topics in their own right. For that reason, I won’t go into too much detail here. The one important thing to note is that you’ll need to change to your actual domain.\n\nJavaScript dates and times are taken from the user’s computer. That means the user can affect a JavaScript clock by changing the time on their machine. In most cases, this won’t matter. But in the case of something super sensitive, it will be necessary to get the time from the server. That can be done with a bit of PHP or Ajax, both of which are beyond the scope of this tutorial.\n\nAfter getting the time from the server, we can work with it using the same techniques from this tutorial.\n\nAfter working through the examples in this article, you now know how to create your own countdown timer with just a handful of lines of vanilla JavaScript code! We’ve looked at how to make a basic countdown clock and display it efficiently. We’ve also covered adding some useful additional functionality, including scheduling, absolute versus relative times, and preserving state between pages and site visits with cookies.\n\nPlay around with your clock code. Try adding some creative styles, or new features (such as pause and resume buttons). After that, if you come up with any cool clock examples you’d like to share, let us know on the forums."
    },
    {
        "link": "https://forum.freecodecamp.org/t/can-someone-please-tell-me-how-can-i-write-code-for-counting-seconds-in-js-without-using-date-inbuilt-object/456197",
        "document": "I tried but the thing is it is going infinite loop,\n\n as it will never go to stop function definition when it is running in while loop,\n\n I don’t know where to put the stop function\n\n any suggestion please, Any suggestions?? function Stopwatch(){ let startcount=0; let stopcount=0; let flag=true; let i=0; this.start= function(){ if(startcount===1){ throw new Error(\"stop watch already started\"); } startcount=1; while(flag){ i++ } } stop= function(){ if(stopcount===1){ throw new Error(\"stop watch already stopped\"); } stopcount=1; } let duration=i/1000; Object.defineProperty(this,'duration',{ get:function(){ stopcount=0; startcount=0; return duration; } }) this.reset=function(){ startcount=0; stopcount=0; } } k=new Stopwatch(); k.start() k.stop() console.log(k.duration)\n\nShort answer: You need multi-threading to implement a stopwatch like functionality. Longer answer: As you pointed out, once you call the start function, it goes into an infinite loop, because there’s nothing there to stop the while (flag) loop. You need some kind of interrupt to stop that whole loop process. Multithreading is one way to achieve it You have one thread to handle the counting and another thread to handle the logic for stopping. For example, you start one thread to start counting. Then you start another thread to monitor the mouse click on the stop button. When the second thread detects the mouse click, it sets the variable to false. The first thread is faithfully counting up in the while (flag) loop. But this execution is interrupted momentarily by the second thread executing When the first thread restart counting after the interrupt, the flag is false, so the looping stops. I’m missing a lot of details, but this is the gist of multithreading. You can look up Javascript multithreading for details. Depending on what you need to achieve, you may not need multithreading. setTimeout / clearTimeout may do the trick.\n\nYeah, multithreading is getting a little advanced. As mentioned, there are things like setTimeout and setInterval, which hook into the browsers timer thread (assuming we’re in a browser for this. There may be libraries to make it easier. I could see using setTimeout or setInterval to handle the display (if you want a stopwatch on the screen) and then using the Date timestamps to get the final. But there is a certain level of imprecision in these - things like setInterval will sometimes take ever so slightly longer than expected. I think I did one once where I fired it off every 1/10th of a second. The number displayed was still driven by Date, but it updated every 1/10th of a second - that way even if it was updated a little late, the problem would not compound. There may also be libraries that help with a lot of these.\n\nMy short answer was not accurate. If it is purely a stopwatch functionality, setTimeout or setInterval should do the work. You said “counting seconds.” If you want some action to be taken (just once) at some later time, then you use setTimeout and specify the function to call and the time delay. If you want to display a value every second, for example, then you use setInterval and specify the function to call and the time interval of 1 second (1000 milliseconds). This is probably the most likely scenario you’re looking for, like you have a quiz question on the page and want to display a countdown timer. Here’s a straight JS that starts a countdown timer when the start button is pressed and stops the timer when the timer value becomes 0 or the stop button is pressed. I put everything in a single html with no css to keep it focused on JS part. Notice that I’m disabling the start button when the timer starts. If I don’t do this, then the user can keep on clicking the start button and initiates multiple timers. <!DOCTYPE html> <html> <head> <script> const start = 30; const tick = 1000; // 1000 millisec == 1 sec let count = start; let timer_func = null; function startTimer() { count = start; document.getElementById(\"clock\").innerHTML = count; document.getElementById(\"start_btn\").disabled = true; timer_func = setInterval(countdown, tick); //calls countdown every 'tick' millisecs } function countdown() { count--; document.getElementById(\"clock\").innerHTML = count; if (count==0) { stopTimer(); } } function stopTimer() { clearInterval(timer_func); //disables timer_func, i.e., stops the count down timer_func = null; document.getElementById(\"start_btn\").disabled = false; } </script> </head> <body> <h1>A simple countdown timer</h1> <h1 id=\"clock\">timer</h1> <button onclick=\"startTimer()\" id=\"start_btn\">Start</button> <button onclick=\"stopTimer()\">Stop</button> </body> </html>"
    },
    {
        "link": "https://forum.freecodecamp.org/t/using-setinterval-to-build-a-countdown/667262",
        "document": "I am working on a self directed project to practice the skills I’ve learned so far (I’ve finished the first 3 projects in the Javascript beta course. My program is a “Simon Says” game that flashes a pattern of colors in one box and the player has to select that pattern of colors on the provided square. I want a count down timer to change the text of a centered element in the flash box so that the browser displays 3… 2… 1 with 1 second between each dynamic update of the html content. I tried to accomplish this with setInterval, passing in a custom function that successfully updates the textContent of the desired element, however, the program does not appear to pause like the documentation says setInterval should. I put setInterval into a loop that breaks at the appropriate time so it gets called the right number of times, but there is no delay, it just races through to 0 instantly. Any help much appreciated! // VARIABLES const startButton = document.getElementById('start-button'); const simonBox = document.getElementsByClassName('simon'); const counter = document.getElementById('countdown'); // FUNCTIONS console.log(counter) const countDown = (count) => { counter.textContent = count.toString(); } const beginCountDown = () => { let count = 3; while (count > 0) { setInterval(countDown(count), 1000); count--; } } const startGame = () => { startButton.style.display = 'none'; counter.style.display = 'block'; beginCountDown(); } // LISTENERS startButton.addEventListener('click', startGame)\n\ntakes a callback, but you are calling the function. If you need to pass the callback function arguments you can wrap it inside an anonymous function. I would however suggest that the callback function given to is where your countdown logic should be. You do not need a loop because will act as a loop.\n• Create two top-level variables, one for the count and one for the id setInterval returns.\n• Inside the onclick handler save the setInterval id and call with the callback\n• Inside the callback check the value of count and call using the saved id if the is , otherwise, set the textContent to and decrement it. If you do not want to be a top-level variable you can create a function that uses a closure. It has to return a function that will become the callback function given to and you must provide the starting number for the counter.\n\nI have probably made an error, but for me this code holds on the number 3 but does not count down. I revisited the documentation for setInterval() and have a vague sense of the intervalId value: that it’s necessary to keep track of the intervals. When you say takes a callback do you mean that I’m including the parenthesis when I pass set interval the function as an argument? If I’m understanding right, you’re saying I should hand setInterval a function that returns a decreasing value on each execution of the interval, correct? setInterval(function-that-returns 3 on first iteration, 2 on second, 1…, [millisecond wait time between intervals]) I think I am confused on how to get that anonymous function an initial value and then a different value on each successive iteration (unless the return value somehow becomes the next argument on the next interval’s call of the anonymous function). Am I making any sense? Thank you for taking the time to write up a response to my initial question! **** Update: I got the countdown working! BUT, my clearInterval call doesn’t seem to work to stop setInterval from firing\n\nI see now it has something to do with setting intervalID to the return of setInterval(). I’ll try to see if I can figure out how this works. If anyone knows of any article links that may clarify many thanks!"
    },
    {
        "link": "http://vaidehijoshi.github.io/blog/2015/01/06/the-final-countdown-using-javascripts-setinterval-plus-clearinterval-methods",
        "document": "It’s a brand new year, and with that comes a renewed sense of self. Also: a rather lengthy todo list. Enter #technicaltuesdays, or my attempt at beefing up my technical chops by posting a blog post every week — specifically on Tuesdays, in case it wasn’t obvious. (Sorry, Thursday, you were a close second, but you just didn’t make the cut.)\n\nSo, what’s on the menu this week? JavaScript! New year = new me, you guys. Actually, some of my technical interviews have been a bit JavaScript-heavy, so I’ve been stepping up my curly bracket game.\n\nIn honor of the new year, I wanted to use JavaScript to create a quick “New Year’s Countdown” function. Suffice it to say, it was neither quick nor easy. But I learned about two cool timing events in JavaScript – setInterval and clearInterval – and now you can learn about them, too!\n\nOkay, so what exactly was my goal with this function? I wanted to it to countdown from 10 to 1 and then print out “Happy New Year!”. JavaScript has a couple different time events, but the trick is figuring out which one works best for your purposes.\n\nI first started off trying to use the setTimeout() method, which waits a certain amount of time before executing the function that you pass it as a parameter. I was stuck for a long time trying to figure out how to get my code to execute again after every second. I quickly realized that this method wasn’t the best tool for the job.\n\nLuckily, one method did just the trick: setInterval(). The setInterval method executes a function that you pass in as a parameter at a deteremined interval. The interval is also a parameter, and is passed in as milliseconds. Protip: 1000 milliseconds = 1 second. A generic setInterval method might look something like .\n\nThis was perfect for my countdown function, which needed to do the same thing – namely, count down from ten to zero – every one second.\n\nHere’s what my function looked like in the first iteration:\n\nI first created a variable, which I logged to the console, and then decremented by one each time the function ran. I passed in the two parameters that setInterval requires: a function to execute (in my case, an anonymous, unnamed function), and an interval at which it should be executed (every one second). I also added a conditional to log “Happy New Year!” once the counter hit zero.\n\nSo, did it work? YES! But also, NO. This code does count down from 10, and prints out “HAPPY NEW YEAR!!” when it hits zero. But now, there was another problem: it just WOULD. NOT. STOP.\n\nThe setInterval method is great and all, until you hit an infinite loop and your code runs forever and ever and ever and – you get the idea. This method on its own doesn’t do much more than loop by default. But, when it’s combined with its twin method clearInterval(), which – you guessed it – clears the function at a certain interval, you it can acutally be quite handy.\n\nSo, how does clearInterval work? Well, it takes just one parameter: the function that you want to clear. This is important for remember for two reasons:\n• You have to save your setInterval method to a variable\n• This variable must be accessible (in scope) by the clearInterval method\n\nA clearInterval method might look something like , where .\n\nHere’s what the second iteration of my function looked like:\n\nI saved my function to variable called , and then passed that variable in as a parameter to my clearInterval method, which will only fire when the variable is set to zero. When is set to zero, a couple things will happen:\n• The string will be logged to the console\n\nAnd this is what will be printed out:\n\nMaybe my next blog post should be figuring out how to change that gif from “2012” to “2015”…\n\nHope you had a wonderful New Year’s! Here’s to 2015 and many more Technical Tuesdays! (I hope.)\n• The setInterval method takes a function to execute and a interval in milliseconds.\n• The clearInterval method takes an in-scope variable which points to the setInterval method.\n• Both of these timing events work together as a pair.\n• Want to read more about timing events in JavaScript? Check out setInterval + clearInterval’s cousins, setTimeout and clearTimeout."
    },
    {
        "link": "https://stackoverflow.com/questions/1191865/code-for-a-simple-javascript-countdown-timer",
        "document": "For the sake of performances, we can now safely use requestAnimationFrame for fast looping, instead of setInterval/setTimeout.\n\nWhen using setInterval/setTimeout, if a loop task is taking more time than the interval, the browser will simply extend the interval loop, to continue the full rendering. This is creating issues. After minutes of setInterval/setTimeout overload, this can freeze the tab, the browser or the whole computer.\n\nInternet devices have a wide range of performances, so it's quite impossible to hardcode a fixed interval time in milliseconds!\n\nUsing the Date object, to compare the start Date Epoch and the current. This is way faster than everything else, the browser will take care of everything, at a steady 60FPS (1000 / 60 = 16.66ms by frame) -a quarter of an eye blink- and if the task in the loop is requiring more than that, the browser will drop some repaints.\n\nThis allow a margin before our eyes are noticing (Human = 24FPS => 1000 / 24 = 41.66ms by frame = fluid animation!)"
    },
    {
        "link": "https://stackoverflow.com/questions/30427882/make-a-timer-using-setinterval",
        "document": "I'm trying to make a timer in javascirpt and jQuery using the function. The timer should count down from 90 to zero (seconds).\n\nThe code that I'm using for this:\n\nin this sets the var (started on 90) -1, this action has to happen once every second. My problem is that I don't get how to let this action happen 90 times; I tried using a for loop but then the counter counts from 90 to 0 in 1 second.\n\nDoes anyone knows a better alternative?"
    },
    {
        "link": "https://w3schools.com/js/js_timing.asp",
        "document": "The object allows execution of code at specified time intervals.\n\nThe two key methods to use with JavaScript are:\n• )\n\nExecutes a function, after waiting a specified number of milliseconds.\n• )\n\nSame as setTimeout(), but repeats the execution of the function continuously.\n\nThe method can be written without the window prefix.\n\nThe first parameter is a function to be executed.\n\nThe second parameter indicates the number of milliseconds before execution.\n\nHow to Stop the Execution?\n\nThe method stops the execution of the function specified in setTimeout().\n\nThe method can be written without the window prefix.\n\nThe method uses the variable returned from :\n\nIf the function has not already been executed, you can stop the execution by calling the method:\n\nThe method repeats a given function at every given time-interval.\n\nThe method can be written without the window prefix.\n\nThe first parameter is the function to be executed.\n\nThe second parameter indicates the length of the time-interval between each execution.\n\nThis example executes a function called \"myTimer\" once every second (like a digital watch).\n\nHow to Stop the Execution?\n\nThe method stops the executions of the function specified in the setInterval() method.\n\nThe method can be written without the window prefix.\n\nThe method uses the variable returned from :"
    }
]