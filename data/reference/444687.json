[
    {
        "link": "https://stackoverflow.com/questions/8746306/styling-wpf-combobox-items",
        "document": "I have a very simple WPF application which displays a ComboBox which binds to a list of classes which represent people. Each 'Person' object has a Name string field, and a Sex enum. I would like the ComboBox to display a drop-down of the various people's Name field, but for each line to be styled according to the Sex field, for example, blue for males, pink for females. Can anyone tell me what I am doing wrong?\n\nHere is the XML:\n\nAnd here is the C#:\n\nMany thanks in advance"
    },
    {
        "link": "https://learn.microsoft.com/en-us/answers/questions/644866/when-itemscontrol-itemcontainerstyle-is-specified",
        "document": "If ItemContainerStyle is defined, we need to use ContentTemplateSelector in ContentPresenter with DataTemplateSelector. \n\n According to the display logic of ContentPresenter\n\nIf the ContentTemplateSelector property on the ContentPresenter is set, the ContentPresenter applies the appropriate DataTemplate to the Content property and the resulting UIElement and its child elements, if any, are displayed.\n\nGets or sets the DataTemplateSelector, which allows the application writer to provide custom logic for choosing the template that is used to display the content of the control.\n\nIf the response is helpful, please click \"Accept Answer\" and upvote it. \n\n Note: Please follow the steps in our [documentation][5] to enable e-mail notifications if you want to receive the related email notification for this thread."
    },
    {
        "link": "https://stackoverflow.com/questions/62577326/the-height-of-the-combobox-changes-when-i-select-an-item",
        "document": "I have a combobox that binds to a collection in which I want to collapse some of them according to a condtion.\n\nThe problem is that if in my view model I select an item that it is collapsed in my view, still is displayed the text of the DisplayMemeberPath, so I am trying to set the text of the texblock to an empty string.\n\nI think that I get it, the problem with my solution it is that the hight of the combobx changes when I select and item, so the height it is very few and I can't see the combobox completely.\n\nThe code that I am using is this:\n\nPerhaps there are better ways to achieve, so I could accept another solutions, how to set the text of the text block in the case the selected item is one of the items collapsed in the combobox."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/desktop/wpf/controls/combobox-styles-and-templates?view=netframeworkdesktop-4.8",
        "document": "This topic describes the styles and templates for the ComboBox control. You can modify the default ControlTemplate to give the control a unique appearance. For more information, see Create a template for a control.\n\nThe following table lists the named parts for the ComboBox control.\n\nWhen you create a ControlTemplate for a ComboBox, your template might contain an ItemsPresenter within a ScrollViewer. (The ItemsPresenter displays each item in the ComboBox; the ScrollViewer enables scrolling within the control). If the ItemsPresenter is not the direct child of the ScrollViewer, you must give the ItemsPresenter the name, .\n\nThe following table lists the states for the ComboBox control.\n\nThe ComboBoxItem control does not have any named parts.\n\nThe following table lists the states for the ComboBoxItem control.\n\nThe following example shows how to define a ControlTemplate for the ComboBox control and associated types.\n\nThe preceding example uses one or more of the following resources.\n\nFor the complete sample, see Styling with ControlTemplates Sample."
    },
    {
        "link": "https://docs.telerik.com/devtools/wpf/controls/radcombobox/features/autocomplete",
        "document": "AutoComplete is a feature provided by many browsers, programs and controls. It involves the program predicting a word or phrase that the user wants to type without the user actually typing it in completely. RadComboBox has full autocomplete support - while you type into the input area, the combobox returns the relative match for the currently typed text.\n\nThe purpose of this tutorial is to show you how to configure the autocomplete feature.\n\nIn the simplest scenario your data source will be a list of strings. In this case you don't need to perform any additional work to enable or configure the autocomplete.\n\nNow, if you type only \"down\", the combo will complete your result with the first matching item.\n\nNote that in the previous example the IsEditable property is set to True. If your RadComboBox is non-editable, you could still benefit from the autocomplete feature, but instead of autocomplete your items will be auto-selected.\n\nHaving RadComboBox populated with a list of strings is the simplest scenario. However, in most of the cases you will have a RadComboBox populated with a collection of business objects. If your data source is more complex and your data objects are not single values but rather more complicated classes that have multiple properties, you can specify which value you want to see in the Selection Box of the control. To accomplish this you are required to configure the DisplayMemberPath to point out to the property you want to make use of AutoComplete.\n\nFor example, if you set the DisplayMemberPath to Name as you suppose that your data object has such property, RadComboBox will try to auto complete your entry with some of the matching name values. Here is an example of how to set DisplayMemberPath and use AutoComplete in case your data context associated with this control has a property called Name.\n\nNote that you have also set the IsEditable property to True in order to better distinguish the benefit of AutoComplete. If you are not using IsEditable property you can still benefit from this feature, but instead of AutoComplete your items will be AutoSelected.\n\nNow, if you type only \"New\", the combo will complete your result with the first matching item.\n\nIn the previous example, the actual data source declaration and initialization are omitted for better clarity. For more information, take a look at the Binding to Object topic.\n\nThings are getting more complicated in the cases when you are using ItemTemplate that defines your item layout. For example, if you have an ItemTemplate like the one shown below, there is no straight-forward logic what DisplayMemberPath should match as there are multiple members that are displayed.\n\nTo overcome this issue the RadComboBox's API supports an attached property TextSearch.TextPath in which you have to specify which value you want to use for AutoComplete and AutoSelect.\n\nThe following example shows you how to use the TextSearch.TextPath property.\n\nThe TextSearch class exposes a static property named AutoCompleteTimeout which allows you to configure the autocomplete timeout. Use this property when you want to set the timeout after that the typed text for the autocomplete is reset. Its default value is 800ms.\n\nThe following example shows how to set TextSearch.AutoCompleteTimeout property.\n\nBy default the autocomplete feature of RadComboBox is always enabled. In order to disable it, you need to set the RadComboBox's IsTextSearchEnabled property to False.\n\nThe RadComboBox control exposes the property which specifies whether typing a text in a RadComboBox should change the selection or not.\n\nBy default, the value of the property is which means that typing some characters will only select an item if the property is set to .\n\nYou can, however, manually set the property to if the control should change its selection when the user types text or to when the selection should not be changed until this occurs explicitly.\n\nAs of R1 2023 the RadComboBox control exposes a property which indicates whether selection via autocomplete is performed when a partial or a full match is found. It is an enum which has two possible values:\n• : Items are selected even if they only partially match the typed text. This is the default value.\n• : Items are selected only if they exactly match the typed text.\n\nThe next examples demonstrate how to set the AutoCompleteSelectionMode property so that items are only selected if they exactly match the typed text.\n\nSet the AutoCompleteSelectionMode in code behind"
    },
    {
        "link": "https://stackoverflow.com/questions/26129400/wpf-c-sharp-combobox-with-multiple-lines-and-accepting-returns",
        "document": "Is there an easy way to do a multiline combobox in WPF C#? What do I mean by this? I mean a textbox that supports multiple lines and carriage returns; where it word wraps... It needs to have a scrollbar so that if the text in the box is taller than the height of the combobox, the user can scroll down.\n\nIn addition, because its a combobox, it needs to have a dropdown button so that the user can quickly swap between groups of text. I've tried googling for this, but I can't find anyone talking about such a combobox."
    },
    {
        "link": "https://stackoverflow.com/questions/6247142/multiline-combobox-in-wpf",
        "document": "If we want show Textbox in ComboBox we can override the ItemTemplate of ComboBox. And to display multiline text we can set AcceptReturn=\"True\" for TextBox.\n\nIs this what you need or am I missing something?"
    },
    {
        "link": "https://matthiasshapiro.com/how-do-i-wrap-text-in-the-combobox",
        "document": "I’ve been spending the past several days fighting with the ComboBox in an attempt to make it so something very simple: Wrap text inside the combo box. I’ve finally figured it out, so I thought I’d share.\n\nOK, first of all, make sure that your ComboBox is hooked up to something, even if that something is some random RSS feed. I have a post that can help you with that over here. Bind your comboBox to the “Items” part of the New York Times RSS feed.\n\nYou need to do this because, if you do not, you will have to set the same data template to every single ComboBoxItem that you add to the ComboBox. And that’s just no fun.\n\nStarting out, your ComboBox should look something like this:\n\nRight click on your ComboBox and select “Edit Other Templates -> Edit Generated Items (ItemTemplate)-> Create Empty…” Give your new data template a name and Blend will take you into the Data Template design.\n\nPut a Grid in your data template and a TextBlock inside that. Set the TextWrapping in your TextBlock to “Wrap” and set your binding. You can set the binding visually by clicking on the little box to the right of the “Text” property in the TextBlock and going to the “DataBinding” option.\n\nIn the resulting binding screen, go to the Explicit Data Context tab and click on whatever you want. I chose “description” because it is generally long enough to wrap in almost all cases.\n\nMy DataTemplate is shown below for reference.\n\nIf you’re trying to give your text ellipses, ignore the TextWrapping property and make your TextBlock property to one of the following:\n\nYour combo box should now look something like this:\n\nThis is good. This is progress. But when you open it, it looks like this:\n\nAs you can see, it just keeps going and going. Let’s fix that.\n\nRight click on your comboBox and go to “Edit Control Parts (Template) -> Edit a Copy…”\n\nGo down to the ScrollViewer that holds the ItemsPresenter.\n\nTake note… this is an important WPF lesson. Some layouts stretch to contain the items inside them. Unless you put limits on the stretching, they’ll just go on and on forever. This is really, really bad if you’re trying to make your text wrap or give your text ellipses because the text element is looking for something that will give it a hard border and an expansive layout won’t.\n\nThis is what has happened here. Because the ScrollViewer HorizontalScrollBarVisibility default is “Auto”, the ScrollViewer thinks it has all the space in the world and decides to take advantage of your real-estate generosity. Lay the smack-down on that insolent ScrollViewer: set the “HorizontalScrollBarVisibility” to “Disabled”.\n\nNow, that alone has done exactly nothing. Why? Because the popup that it is placed in still thinks it has all the space in the world. So go to the popup (named PART_Popup) and click on the box next to the “Width” property and go to “DataBinding”. When the data binding window opens, select the “Element Property” tab, then select the fourth item down in the left hand pane and “ActualWidth” in the right hand pane.\n\nThis will make your comboBox look like this:\n\nYou can see that the ScrollViewer is slightly cut off… which is irksome. We’ll solve this by giving our ScrollViewer a “Margin” of “0,0,4,0”.\n\nIf this is all you want to do… you’re done. Me? I can’t stand the fact that all this text runs together so much.\n\nThe easiest way to deal with is to do some styling back in the DataTemplate we created. The best way to deal with this is to go into the ItemContainerStyle for the ComboBox, which I deal with in my post, “Styling ComboBox Items”."
    },
    {
        "link": "https://wpf-tutorial.com/list-controls/combobox-control",
        "document": "The ComboBox control is in many ways like the ListBox control, but takes up a lot less space, because the list of items is hidden when not needed. The ComboBox control is used many places in Windows, but to make sure that everyone knows how it looks and works, we'll jump straight into a simple example:\n\nIn the screenshot, I have activated the control by clicking it, causing the list of items to be displayed. As you can see from the code, the ComboBox, in its simple form, is very easy to use. All I've done here is manually add some items, making one of them the default selected item by setting the IsSelected property on it.\n\nIn the first example we only showed text in the items, which is pretty common for the ComboBox control, but since the ComboBoxItem is a ContentControl, we can actually use pretty much anything as content. Let's try making a slightly more sophisticated list of items:\n\nFor each of the ComboBoxItem's we now add a StackPanel, in which we add an Image and a TextBlock. This gives us full control of the content as well as the text rendering, as you can see from the screenshot, where both text color and image indicates a color value.\n\nAs you can see from the first examples, manually defining the items of a ComboBox control is easy using XAML, but you will likely soon run into a situation where you need the items to come from some kind of data source, like a database or just an in-memory list. Using WPF data binding and a custom template, we can easily render a list of colors, including a preview of the color:\n\nIt's actually quite simple: In the Code-behind, I obtain a list of all the colors using a Reflection based approach with the Colors class. I assign it to the ItemsSource property of the ComboBox, which then renders each color using the template I have defined in the XAML part.\n\nEach item, as defined by the ItemTemplate, consists of a StackPanel with a Rectangle and a TextBlock, each bound to the color value. This gives us a complete list of colors, with minimal effort - and it looks pretty good too, right?\n\nIn the first examples, the user was only able to select from our list of items, but one of the cool things about the ComboBox is that it supports the possibility of letting the user both select from a list of items or enter their own value. This is extremely useful in situations where you want to help the user by giving them a pre-defined set of options, while still giving them the option to manually enter the desired value. This is all controlled by the IsEditable property, which changes the behavior and look of the ComboBox quite a bit:\n\nAs you can see, I can enter a completely different value or pick one from the list. If picked from the list, it simply overwrites the text of the ComboBox.\n\nAs a lovely little bonus, the ComboBox will automatically try to help the user select an existing value when the user starts typing, as you can see from the next screenshot, where I just started typing \"Co\":\n\nBy default, the matching is not case-sensitive but you can make it so by setting the IsTextSearchCaseSensitive to True. If you don't want this auto complete behavior at all, you can disable it by setting the IsTextSearchEnabled to False.\n\nA key part of using the ComboBox control is to be able to read the user selection, and even control it with code. In the next example, I've re-used the data bound ComboBox example, but added some buttons for controlling the selection. I've also used the SelectionChanged event to capture when the selected item is changed, either by code or by the user, and act on it.\n\nThe interesting part of this example is the three event handlers for our three buttons, as well as the SelectionChanged event handler. In the first two, we select the previous or the next item by reading the SelectedIndex property and then subtracting or adding one to it. Pretty simple and easy to work with.\n\nIn the third event handler, we use the SelectedItem to select a specific item based on the value. I do a bit of extra work here (using .NET reflection), because the ComboBox is bound to a list of properties, each being a color, instead of a simple list of colors, but basically it's all about giving the value contained by one of the items to the SelectedItem property.\n\nIn the fourth and last event handler, I respond to the selected item being changed. When that happens, I read the selected color (once again using Reflection, as described above) and then use the selected color to create a new background brush for the Window. The effect can be seen on the screenshot.\n\nIf you're working with an editable ComboBox (IsEditable property set to true), you can read the Text property to know the value the user has entered or selected."
    },
    {
        "link": "https://telerik.com/forums/multi-line-combo-box-wrapped-when-closed",
        "document": "Check out Telerik Trainer , the state of the art learning tool for Telerik products."
    }
]