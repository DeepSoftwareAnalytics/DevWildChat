[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.worksheet.change",
        "document": "Occurs when cells on the worksheet are changed by the user or by an external link.\n\nThis event does not occur when cells change during a recalculation. Use the Calculate event to trap a sheet recalculation.\n\nThe following code example changes the color of changed cells to blue.\n\nThe following code example verifies that, when a cell value changes, the changed cell is in column A, and if the changed value of the cell is greater than 100. If the value is greater than 100, the adjacent cell in column B is changed to the color red.\n\nThe following code example sets the values in the range A1:A10 to be uppercase as the data is entered into the cell.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://reddit.com/r/excel/comments/yjfm2o/vba_how_to_work_with_workbook_sheet_change_event",
        "document": "The title is enough lol. Here is the link for the specific event I want:\n\nMy problem is how to use the object parameter, I would like to see some examples to apply the workbook sheet change event."
    },
    {
        "link": "https://stackoverflow.com/questions/10474356/vba-worksheet-change-event",
        "document": "I am trying to use the Worksheet Change Event in Excel VBA, but it doesn't seem to work.\n\nFrom what I gather, it is enough to just define the handling function \"Worksheet_Change\" as I have done here:\n\nThe problem is that I am not sure exactly where I am supposed to define it. I have just put it in \"module1\" which was automatically generated when I made my first macro. Is this correct? I am quite new to VBA, so I don't know much about it yet."
    },
    {
        "link": "https://mrexcel.com/board/threads/calling-worksheet-change-event-directly-from-vba.805922",
        "document": "The other routine calls 3 other routines. But the routines are not relevant since these same routines are called by the Worksheet Change event.You see whether I change the date manually or use a spinner to change the date, it results in the same validation and routines being called. What I cannot figure out is why a manual change works just fine and a Spin Event triggers 20 Change Events.If the Routine when called by the Spin Event triggers 20 changes also triggered 20 changes when called by the Change Event, I would suspect there is something wrong with the Routine. But since the routine is the same, the problem must lie with the Spin Event?I have also notice that sometimes when I click the Spin button once, it will trigger the Spin Button Click Events 2 to 5 times. I have a debug.print every time the Sub is called and for no apparent reason it machine gun fires 2-5 Button Click Events per click.This is why I suspect there may be a glitch in the button.Are the ActiveX buttons known to have problems?"
    },
    {
        "link": "https://stackoverflow.com/questions/71074592/create-excel-sheet-with-worksheet-change-code",
        "document": "You can create a class module with the event and hook that to your worksheets. So you can add a hidden sheet with all workbook names that you want to add that event to.\n\nSo if you programmatically add a new sheet you just need to add its name to that list.\n\nSo first add a sheet named (you can make it hidden so no user sees it). And add some sheet names there:\n\nSo this means we want to run your event in and only.\n\nThis is the event we want to run. It just shows a message box which cell was changed. You need to adjust that to your wishes.\n\nFinally we need to hook those events to the worksheets. So we add a normal module (non-class module) :\n\nSo now we just need to make sure that the procedure is called everytime the workbook opens. So we add the following into :\n\nAfter running the event runs in every sheet that is listed in .\n\nIf you now add a new worksheet that you want to add the event to, you just need to add it to the list in and run again. Therefore we can add a small helper procedure to our module:\n\nSo now we can use the following code\n\nto add a new worksheet and add the event to it.\n\nYou may want to add some error checking if a worksheet in the list of does not exist anymore (was deleted) so your code does not thorw an unhandled exception in this case. I left this out to have the above explanation more clear.\n\nIf all your sheets have someting common in their name you don't need to maintain that list. So for example if all the sheets you want to add the event to start with you just need to loop over all sheets in the procedure and check if they start with to add them to the array then. Resizing that array may be a bit more complicated then."
    },
    {
        "link": "https://stackoverflow.com/questions/15522538/set-formula-to-a-range-of-cells",
        "document": "this is simple demo of what i want to do. I want to set a formula to a range of cells(eg. C1 to C10).\n\nbut how to make formula use dynamic cells like this:\n\nso in reality it is like,\n\nhow to change RHS of this formula to make above working:"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-create-dynamic-range-based-on-cell-value-in-excel-vba",
        "document": "Dynamic ranges in excel VBA provide us with the flexibility to define ranges beyond the specific values. The dynamic range enables the program to perform transformation and data management steps with ease without the worry of changing the range of the data set. The dynamic range in excel VBA promotes code reusability and does not make the programming logic to be redundant. By utilizing the range object and cells object, the dynamic ranges in Excel VBA can be defined and created. There are many ways in which dynamic ranges can be created. Following are the methods listed below:\n• Variable initialization to the range and cell object.\n• Create a Dynamic range passed as the value in another excel cell.\n\nThe following examples help in illustrating the above methods,\n\nWith the change in the size of the data, it would be useful if the range object that is used to refer to the ranges can be modified. The following code helps in counting the last row and column in an excel as shown below\n\nThe above code can be used along with the combination of range and cell object to create a dynamic range. Following is the code for Dynamic range as shown below\n\nWhen the above code is executed in the VBA, following is the result:\n\nCreate a Dynamic Range Passed as Value in Another Excel Cell\n\nLet us take another example where we take the below data set and select multiple rows for the below data set, we have an empty cell value to assign the ranges with the value\n\nlet us assign the range value as 3. The below VBA codes take a value from the active sheet and assign it to the range object to create a dynamic range.\n\nFollowing would be the output as shown below,\n\nLet us take another example where we take the below data set and select multiple rows for the below data set using two cell values instead of one cell, we have an empty cell value to assign the ranges with the value.\n\nLet us assign the range value as Starting range as A1 and the ending range as B4. The below VBA codes take a value from the active sheet and assign it to the range object to create a dynamic range.\n\nFollowing would be the output as shown below,\n• The above codes help in understanding how to create a dynamic range in VBA.\n• Dynamic range helps in boosting code reusability and helps in effective data management."
    },
    {
        "link": "https://stackoverflow.com/questions/37308598/excel-vba-using-formula-with-dynamic-ranges",
        "document": "I'm trying to average some data sets which are in their own columns. The number of data sets may change, so the number of columns I average needs to be dynamic.\n\nAlso, I have multiple sets of data sets on each sheet, and because the data sets are dynamic, I add columns to the sheet earlier in the code, so I can't hardcode the starting point for the data set. In other words, I can't just say...\n\n... because I can't know for sure that the data sets start at H5. It might start at F5, or G5, etc.\n\nSo I'm trying pass the a starting point as an argument in an As Range variable, but I don't know how interface this with a .formula.\n\nThe following code doesn't work. I'm guessing because I can't put a range variable in a string like this.\n\nIs there any way to use ranges with excel formulas like this?"
    },
    {
        "link": "https://excelandaccess.com/blog/named-ranges-simplify-excel-programming",
        "document": "One of the most underutilized advanced features of Microsoft Excel is Named Ranges. Properly using Named Ranges makes programming Microsoft Excel much easier. They make understanding Excel functions, and what they are trying to calculate, more understandable. Efficiently using Named Ranges in Excel simplifies Excel programming, we suggest that you use them.\n\nData Visualization: Named Ranges allow you to visualize your data/function. They allow you to instantly make sense of the complex function you are reading. Named ranges are a tool you want in your Excel toolbox; learn to use dynamic named ranges to simplify your Excel consulting work.\n\nWhat is a Named Range in Microsoft Excel?\n\nA “Named Range” in Excel is one or more cells, that have formally been given a formal name ( reference ). A named range can be a single cell, or range of cells. There are static named ranges and dynamic named ranges.\n\nA dynamic named range grows and shrinks with the data, and it is usually the preferred method, when naming a continuous range of cells. That said, it does not take more effort to create. Simply use one of the new Dynamic Array Functions in Office 365.\n\nExpert’s note: With the use of the new Dynamic Array Functions you name just the first cell of the Spill Range, and you can then use that thought-out file.\n• A Named Range can be a range of connected cells.\n• A Named Range can be a discounted range of cells, on different sheets even.\n\nNamed Ranges are Most Often Used:\n\nExcel’s Dynamic Named Ranges allow you to reference your data by name, but they also grow and shrink with the data, such as in an Excel Table. As such, when possible, use Excel’s Dynamic Named Ranges, and use Excel Tables.\n\nUser Friendly Note: Named Ranges make it easier for the person coming after you, to understand your files and your work. If you do not use them, you need to start.\n\nA Word: If you look at an Excel Function, and if you see a word being used, such as ‘Sales’, you can be pretty sure they are using named ranges. The word ‘Sales‘ in the formula is referencing the Sales column in an Excel Table, by name, instead of using $A$12:$Z$500.\n\nYou can see that the Sales Table is being referenced, by name, and it instantly makes sense. Named Ranges simplify Excel programming because they make Excel make sense.\n\nWhich Formulas Makes More Sense to the User?\n\nOne is a combination of numbers, letters and other characters, and the other is a recognizable name. The name just makes much more sense. Added benefit, named ranges are often dynamic; absolute references are not.\n\nIf you learn nothing else from this post, learn to use named ranges in your functions:\n\nThere are many ways to use Named Ranges. But the best use of them is in functions\n\nOther than the Sum, and the range, you do not know what this function is totaling. Is it sales, expenses, units, or profits?\n\nNamed Ranges Say Something to the User\n\nHow does Effectively using Named Ranges in Excel Programming? Named Ranges say something extra to the user. Sure, both methods of programming ultimately do the same thing, but which is easier, one can be dynamic, and one is a named range. The name describes the data the range contains: Budget, Forecast, Actual, Sales, Expenses, Units, FTE, etc.\n\nExpert’s Advice: Simplify your Excel files, and use Named Ranges as much as necessary. They communicate more effectively, more intuitively.\n\nWhat Can you do with Named Ranges – Examples\n\nNamed Ranges used in Excel Functions – Example\n\nThe formulas in the example below make sense. Even if you never see the file, you can see what the formulas are doing. This is the number one reason to use Named Ranges in Excel.\n\nThe named ranges in this example, all mean something. Amount, Year, Department. Use Dynamic Named Ranges to really simplify Excel programming. Either way, as you can see, when effectively used, named ranges can simplify Excel programming.\n\nHow often do you see an Excel formula with a hard-coded value in it? Say =$H$6*1.035. That is terrible, never do that!\n\nWhen working with Excel formulas, make sure to not place hard-coded values in them. Instead, place these values, in a cell, and name the cell. You can now reference that cell in your formulas.\n\nExpert’s Advice: Place your variables on an Input Sheet. Give them a name, and when needed, reference that name in your formulas. When you need to change the amount, change it in the Input cell, and all of your formulas work as normal.\n\nUsing named ranges in your Excel code is one of the nicest things you can do, for those that need to edit it. It is almost one of the most useful things you can do. Sure, add comments, but also use named ranges, they make understanding your vba that much easier.\n\nOne of the most common uses of dynamic names ranges would be for drop-down lists. aka Validation Controls, ComboBoxes, and ListBoxes. Doctor’s Name, Region, Product Category, etc., are the type of items you would see listed in a drop-down list.\n\nUsers can make a selection in the Validation Control, and the formulas and code in the file, would reference the selection made.\n\nIn the example below, the Validation Control uses a named range that has the # symbol on the end. This shows that the validation control is referencing the first cell of a Spill Range, based on a dynamic array function.\n\nIn an Validation Control, you can use a formula, or you can reference a Named Range.\n\nTraditional Named Ranges do not have the # symbol associated with them. You use the # symbol when pointing to a dynamic Spill Range Cell. Doing so, to an Excel XLookup or SumIf will make the function dynamic, to the adjacent dataset. Place the function in the first row, it will grow and shrink as needed.\n\nThat Little ‘#’ Sign makes all the difference. If you use “=Regions” you will only get the first item in the list. If you use “=Regions#“ you will get the full, dynamic list. Your named range here is actually a named cell, the first cell of the Spill Range.\n\nValidation Controls are a great method of collecting inputs from a user. If you want to take this up a notch, use Cascading Validation Controls. Here, your selection in one list, feeds another list, and so on.\n• In this setup, you make a selection from the first Validation Control (Pick a Country).\n• Your choice populates the second Validation Control ( Pick a State ).\n• Your choice populates the third Validation Control ( Pick a City ).\n• There you make your final selection, and the formulas and macros reference the selection you made.\n\nIn this method, we used the Indirect Function, to pull the data, based on a named range.\n\nConditional Formatting is a powerful feature in Microsoft Excel. It is widely used. With it you can quickly visualize what your data is trying to tell you.\n\nUse Conditional Formatting for example to show patient records that are 15 days past due. Simple, shows up red.\n\nUse named ranges when you create the conditional formatting, and it will be easier to follow. See the example below.\n\nExcel UserForms are vba heavy, meaning that there is a lot of VBA code required in order to make them function. This code should as much as possible, work with named ranges.\n\nExcel UserForms do not use Validation Controls. Instead, they use ComboBoxes and ListBoxes. These drop-down lists can be based on a named range as well as cell references.\n\nLike Validation Controls, in Excel UserForms, you can determine if they are restricted to items in the ComboBox List, or if they are free to type anything they want.\n\nUserForms are a powerful user-friendly tool for file manipulation and for controlled data entry. Named Ranges, used in vba, simply programming of Excel UserForms. We recommend that you use dynamic named ranges whenever possible.\n\nThe best way to use dynamic named ranges is via the new Dynamic Array Functions, based on Excel Tables, and using the # Symbol. In this method you name just one cell, the first cell of the Spill Range. You can reference it anywhere.\n\nThe data in that range can grow and shrink as needed, programmatically populating your Validation Control, via a Named Range (cell).\n\nSimilarly, you can use the new Unique function to pull a unique list of regions from the Excel Table, and do the same thing with that data.\n\nThis is very powerful, this is how you might do it.\n• On your Lists Tab, use the Transpose Function to pull the Table Headers from your tblSales Table.\n• Name the cell that contains the dynamic array Transpose Function.\n• Name just that cell. Name it ColumnsList.\n• In your Validation Control, select List and type “=ColumnsList#”\n• Go to your Validation Control, and select the Column from the list.\n\nMake Excel Easier use the Name Box\n\nThe Name Box should be your friend. Use it to find the source of the data you are seeking. Select the name of interest, from the drop-down list, and tada, you are instantly taken their, unless it is hidden/protected.\n\nExcel Experts Note: If the Dynamic Named Range is created using the Offset/CountA Function Combo, the range will not be listed in the Name Box. But you can see it in the Name Manager. Excel has its issues.\n\nUsing Named Ranges in your Excel functions, vba code, Validation Controls, Conditional Formatting, and Pivot Tables will simplify your Excel programming. An added benefit, it will also make it easier for others to understand what you have done.\n\nThe majority of Excel experts use Named Ranges in their Excel files, you should consider doing so as well. When possible, use dynamic named ranges based on the new dynamic array functions, and Excel Tables.\n\nThe two examples below clearly show why you would want to use named ranges in your Excel files. They just make Excel make sense.\n\nThis is Clearly Meaningless:\n\nThis Clearly Means Something:\n\n=Regions# will return the list of Unique Regions, from the tblSampleData Excel Table, as seen below.\n\nExpert’s Closing: Microsoft Excel should be easy to use. Using named ranges in Excel, helps to make it so. Use named ranges in your functions, macros, and Validation Controls, they will simply how you program Excel.\n\nOur team of professional Excel Consultants can teach you how effectively using Named Ranges in Excel Programming. We can walk you through all of the options. Our consultants can show you the strengths and weaknesses of each. We will teach you best practices.\n\nWe Offer programming and training services in Microsoft Excel, Access, SQL Server, and Azure. Free 45-minute Zoom consultations are available to discuss your needs live."
    },
    {
        "link": "https://mrexcel.com/board/threads/populate-cells-using-dynamic-named-range-vba.581142",
        "document": "I have a sheet containing 2 lists of categories for income and expenses. These lists are named inc and exp, respectively, and are contained in a sheet called \"Lists.\" They are dynamic ranges, meaning every time a value is added, the named range adjusts itself to include the new value(s). [=OFFSET(Lists!$A$1,0,0,COUNTA(Lists!$A:$A),1)]\n\n \n\n I have 2 tables summarizing 12 months of data. The tables use sumif to find all occurrences of each category and sum them. There's 1 table for income, 1 for expenses. Each is a 2 column table, with all the categories for income in column A and their total for 12 months in column B. Same for Expenses in D & E. \n\n \n\n To populate the categories in column A & D, I am currently using the simple =Lists!A1 =Lists!A2 (inc range), =Lists!B1 =Lists!B2 (exp range) and so on... the problem is when a value is added to either list, while the named range adjusts, I have to manually drag the formulas in Column A & B down 1 more cell to include the new value.\n\n \n\n How can I use VBA to look for the inc and exp ranges (which will change in size), then populate each table with the most recent categories?\n\n \n\n Thanks in advance for responses."
    }
]