[
    {
        "link": "https://docs.constructor.com/docs/integrating-with-constructor-behavioral-tracking-data-driven-event-tracking",
        "document": "Behavioral tracking plays an important role in utilizing Constructor's full potential. The behavioral data we capture helps us generate learnings and is used to re-rank and personalize results for the end user.\n\nWe have observed that utilizing a data-driven approach helps to insulate from breakage when compared to using more traditional CSS selectors. This also ensures easy observability of what data is being utilized by Constructor to inform our ML platform.\n\nThe following sections outline the different data attributes that need to be surfaced for each product to take advantage of all of Constructor's beacon tracking features.\n\nPlease surface the following data attributes for the elements specified below:\n\nAdd the following data attribute to the form element that is the parent of the input element where the user types their search query:\n\nAdd the following data attribute to the input element where the user types their search query:\n\nAdd the following data attribute to the element (typically a button) that submits the user's search query:\n\nAdd the following data attribute to the parent container housing autocomplete results:\n\nAdd the following data attributes to each suggestion result item within the autocomplete container:\n• Section names pertain to the different sections within an index (case sensitive). For example, \"Search Suggestions\" or \"Products\"\n• is not applicable to results from the \"Search Suggestions\" section and should otherwise not be included\n• is only applicable to \"Search in Category\" results and should otherwise not be included\n• Item names and IDs should match with the values being supplied within the catalog files being supplied to Constructor.\n\nPlease surface the following data attributes for the elements specified below:\n\nAdd the following data attribute to the element that contains all of the search result items:\n\nAdd the following data attributes to the element that contains all of the browse result items:\n• and values are only applicable when results are powered by Constructor and can be omitted otherwise.\n• contains the filter name being used in the browse request to power the product listing page. Possible values are: \"group_id,\" \"collection_id,\" or \"[facet_name]\" where the facet name corresponds with a facet defined within the catalog files. For example, \"brand.\"\n• contains filter value that's being used in the browse request to power the product listing page. For example, \"men-jeans.\"\n• The values defined for filter name and filter value should correspond exactly to the values being supplied with browse requests to Constructor. An browse request URL typically follows the pattern: , ex:\n\nAdd the following data attributes to each result item within the search or browse result container:\n• should be populated only if there is a face out variation shown or selected.\n• For results that display swatches (that is, colors), this value should be updated accordingly if the product URL the user would be redirected to changes when interacting with swatches.\n• If results are powered by Constructor, this value should default to the surfaced on the result level - located within the response at .\n• should be populated only if there is a conversion / call to action button available for interaction (such as add to cart, add to wishlist, etc.). The value should be numeric - the minimum between the sale price (if available) and the retail (or MSRP) price.\n• should be populated only if the item is a part of a sponsored listing campaign. This ID can be within the response at\n• should be populated only if the item is a part of a sponsored listing campaign. This information can be found within the response at\n\nAdd the following data attributes to any conversion or call to action buttons within the result item container:\n\nIf the product has multiple variations that can be selected, please make sure to update to reflect the correct variation when the user updates their selection.\n\nIn addition to the data attributes preceding, when Constructor is powering search or browse results, the object and the from Constructor's API response should be surfaced on the product listing pages as a JSON string within a script tag.\n\nThis script tag should only be surfaced on search or browse product listing pages where results are powered by Constructor and not supplied on any other pages.\n\nPlease surface the following data attributes for the elements specified below:\n\nAdd the following data attributes to the element that contains the recommendations results:\n• The pod ID for is available in Constructor's API response under and also defined within the Customer Dashboard. For example,\n• The result ID for is available on the top level data in Constructor's API response.\n• should contain the total number of results returned from Constructor's API response.\n\nAdd the following data attributes to each result item within the recommendations results container:\n• should be populated only if there is a face out variation shown or selected.\n• For results that display swatches (that is, colors), this value should be updated accordingly if the product URL the user would be redirected to changes when interacting with swatches.\n• If results are powered by Constructor, this value should default to the surfaced on the result level - located within the response at .\n• The strategy ID for is available in Constructor's API response under . For example, .\n• should be populated only if there is a conversion / call to action button available for interaction (such as add to cart, add to wishlist, etc.). The value should be numeric - the minimum between the sale price (if available) and the retail (or MSRP) price.\n\nAdd the following data attributes to any conversion or call to action buttons within the result item container:\n\nIf the item has multiple variations that can be selected, please make sure to update to reflect the correct variation when the user updates their selection.\n\nProduct detail pages can take many forms, including things such as \"Quick Shop,\" \"Quick View\" linked from product listing pages. Please surface the following data attributes for the elements specified below for all product detail views:\n\nAdd the following data attributes to the element containing the product details:\n• should be populated only if there is a face out variation shown or selected.\n• For results that display swatches (that is, colors), this value should be updated accordingly if the product URL the user would be redirected to changes when interacting with swatches.\n• If results are powered by Constructor, this value should default to the surfaced on the result level - located within the response at .\n• should be populated only if there is a conversion / call to action button available for interaction (such as add to cart, add to wishlist, etc.) - this is generally the case on most product detail pages. The value should be numeric - the minimum between the sale price (if available) and the retail (or MSRP) price.\n\nAdd the following data attributes to any conversion or call to action buttons within the result item container:\n\nIf the item has multiple variations that can be selected, please make sure to update to reflect the correct variation when the user updates their selection.\n\nInformation about the order should be surfaced on the order details (purchase confirmation) page in either a variable in the browser object, or a tag. If using the object, the data should be scoped under the variable and surfaced as follows:\n• should only be included if a specific item variation was purchased.\n• should be a numeric value that represents either the purchase subtotal or the total amount including taxes, discounts, etc. It should match what is tracked within any relevant analytics platforms.\n\nAccess to a QA, development, or production environment along with a test account and payment info will be needed to set up tracking.\n\nPlease surface the following data attributes for the elements specified below:\n\nAdd the following data attribute to the element that contains all of the quizzes result items:\n• should contain the total number of results returned from Constructor's API response and can be located at within the Quizzes API response.\n\nAdd the following data attributes to each result item within the quizzes results container:\n• should be populated only if there is a face out variation shown or selected.\n• For results that display swatches (that is, colors), this value should be updated accordingly if the product URL the user would be redirected to changes when interacting with swatches.\n• If results are powered by Constructor, this value should default to the surfaced on the result level - located within the response at .\n• should be populated only if there is a conversion / call to action button available for interaction (such as add to cart, add to wishlist, etc.). The value should be numeric - the minimum between the sale price (if available) and the retail (or MSRP) price.\n\nAdd the following data attributes to any conversion or call to action buttons within the result item container:\n\nPlease surface the following data attributes for the elements specified below:\n\nAdd the following data attributes to the ASA result container:\n• should contain the intent (query) of the ASA request.\n• \n• Can be retrieved from the field of each data segment\n• should contain the number of different search query results loaded.\n• ASA responses contain results for multiple different queries (terms). This attribute should be the number of distinct query results loaded, not the number of items loaded per query.\n\nAdd the following data attributes to each ASA search result list container:\n• \n• Can be retrieved from the field of each data segment\n• \n• The total number of results (items) returned for this search query result.\n\nAdd the following data attributes to each result item within the Assistant search result container\n• should be populated only if there is a face out variation shown or selected.\n• For results that display swatches (that is, colors), this value should be updated accordingly if the product URL the user would be redirected to changes when interacting with swatches.\n• If results are powered by Constructor, this value should default to the surfaced on the result level - located within the response at .\n• should be populated only if there is a conversion / call to action button available for interaction (such as add to cart, add to wishlist, etc.). The value should be numeric - the minimum between the sale price (if available) and the retail (or MSRP) price.\n\nAdd the following data attributes to any conversion or call to action buttons within the result item container:\n\nConstructor’s product discovery service can be configured to accept user IDs to enable omnichannel personalization. With this technique, users who are logged into a website or app will receive consistent personalization across search, browse, recommendations, and other Constructor products as they change between mobile and desktop devices.\n\nTo protect our end users’ privacy, Constructor strives to avoid collecting any personally identifiable information (PII) across all its products. Therefore, we encourage our customers to obfuscate the user IDs they pass to us so that there’s no way for Constructor to be able to personally identify the users. We also do PII detection in our tracking beacon to ensure no personally identifying data is sent in our tracking calls.\n\nFor logged in users, the user ID should be exposed in the browser's window object under the object as indicated below for the Constructor beacon to use for behavioral tracking calls. If the user is not logged in, this value should be omitted.\n\nWhen running an A/B test with Constructor, information about the test cell (that is, the experience or experiment) the user is in should be accessible on all pages through the browser's window object. If the user is not part of an active A/B test, this value should not be set.\n\nWhen running an A/B test, possible values are:\n\nWhen running an AA/BB test, possible values are:"
    },
    {
        "link": "https://docs.metarouter.io/docs/analyticsjs-overview",
        "document": "Analytics.js is the MetaRouter-recommended standardized event tracking format for website and mobile app events. The Analytics.js version MetaRouter uses is based on the Segment-style, open-sourced version of Analytics.js , and has been modified to meet the specific needs of the MetaRouter platform.\n\nWhile Analytics.js is the recommended event tracking library for our users, MetaRouter can ingest and integrate other types of event streams as well. Please see the Non-Analytics.js page for more information.\n\nIn order to get started with Analytics.js for web tracking, visit the AJS File Builder page. This will provide instructions for how to build, host and deploy your file so you can begin tracking events from your website.\n\nFor mobile tracking, visit the following pages:\n\nThe Analytics.js library contains five key event types that can track most actions taken on your website:\n• Page: What website page is a user on?\n• Track: What actions is a user taking on a web page or app?\n• Identify: Who is the user?\n• Group: What organization or account does the user belong to?\n\nIn addition, these industry tracking specs offer the most straight-forward way to capture event data in specific industries. We recommend using these specs where possible, as they simplify the process of building integration playbooks.\n\nWe've built a spreadsheet that you can get started with here. Please fill out as best as you can and share with your MetaRouter Customer Success Manager. This will help us understand what events you will track, what properties will those events have (global as well as per event) and the types of values those properties will be."
    },
    {
        "link": "https://ladder.io/blog/event-tracking",
        "document": "In this guide, you’ll learn how to write your own event tracking implementation plan. Yes, actually write the code and instructions that you can pass on to your developer to implement or even implement yourself.\n• What is an event?\n• What kind of hits does Google Analytics tracks?\n• How to name events?\n• Where should the analytics tracking code be placed for data collection?\n• What can’t be collected by the default analytics tracking code?\n• When does the event tracking code send an event hit to Google Analytics?\n• How to set up event tracking in Google Analytics?\n\nAnalytics is truly a case of garbage in, garbage out.\n\nIf you don’t have an event tracking set up, you won’t know much about what your users are doing on your website or mobile app. That means you’ll struggle to make the kinds of decisions that can grow your business.\n\nIf you can’t trust your tracking setup, you can’t trust your data. If you can’t trust your data, you can’t make decisions. Or worse, you’ll make the wrong decisions.\n\nAnalytics tools were traditionally used by statisticians or developers. Many of the platforms are not too far removed from writing code yourself. Some of the more advanced platforms, like Mode Analytics, actually do require you to write code.\n\nWhen you’re a non-technical user, finding the data you need is just too hard. Even if you’re lucky enough to have an analyst on your team or in your company, it’s like going to a car mechanic and trying to imitate that noise you heard your car making.\n\nAnalytics is like a foreign language and you don’t even know the right way to ask for what you need.\n\nIt doesn’t help that as B2B software sold primarily to the numerically gifted, well, I guess it’s no surprise that the platforms tend to look ugly.\n\nLike anything else that’s ugly and complicated, it gets ignored or pushed to the end of the list.\n\nBut you can’t do that. Analytics is too important.\n\nHere are some real-world examples where analytics has helped me grow one of the 70+ businesses I’ve worked with:\n• Cut AdWords budget by 20% without affecting revenue after finding over 1,000 keywords that had never driven a sale.\n• Proved that the CEO writing blog content was not profitable for user acquisition, even assuming he earned minimum wage (he didn’t).\n• Scaled Facebook Ads budget to $2m a year after discovering that, despite being lower quality overall, the significantly lower cost made it ROI-positive.\n• Found over 70 affiliate sites that had given us links to broken product pages – poor user experience and thousands of dollars in lost commission.\n• Switched to pushing product demos rather than free trials after finding subsequent product engagement justified the cost of running the demos.\n\nI couldn’t have done any of the above without a solid analytics tracking setup. Data is the lifeblood of any business that wants to grow.\n\nBecause we know how frustrating event tracking can be, we documented the best possible way to deal with it. And this guide has quickly become the most invaluable resource we have.\n\nNow, we’re sharing it with you.\n\nLet’s start with the basics – what’s event tracking, what to track, and why. If you’re a more advanced analyst who already knows this stuff, feel free to skip straight to the code implementation.\n\nEvent tracking is following what a user does on your website. This provides you with valuable insight into every single step of your prospect and if there are any obstacles on their way to finalize their process.\n\nSo, if you don’t have event tracking parameters set up properly, you’ll miss on that data, thus struggling to make decisions that can grow your business.\n\nBack in the old days of the web, if the user wanted to do something, anything at all, they had to load a new web page. Adding a product to your shopping cart? New web page. Purchasing a product? New web page. Signing up to an email list? New web page.\n\nAll of the analytics providers that grew up in this era were built on this premise; they recorded ‘page views’. To see how many purchases or email signups they got, they’d just simply check how many people visited the page that came after those actions, the ‘confirmation page’.\n\nThis no longer works for most businesses.\n\nYou can add a product to the cart on Walmart.com without going to the cart confirmation page. You can sign up for a newsletter on Men’s Health without redirecting too. Sites with Stripe integration even allow you to pay for goods without reloading the page. And on mobile, it’s a whole different story: mobile-first analytics platforms like Mixpanel don’t even record page views, they record ‘events’.\n\nWhat is an event on your website?\n\nAn event shown on analytics is any interaction occurring on a website or mobile app that is triggered by a user’s action. This includes a whole bunch of things from clicking a button to signing up for a newsletter to buying a product. Even page views themselves are events!\n\nWhat kinds of traffic does Google Analytics track?\n\nThere are a few common hits that Google Analytics track:\n• Page(view) – all instances when a user loads or reloads a page in the browser;\n• Event – user’s interactions with the page, i.e. downloads, ad clicks, etc.;\n• eCommerce – events with basic purchase information, such as transaction and item data;\n• Enhanced eCommerce – you can use it instead of eCommerce tracking. This one hit will present you with data about events connected to internal promotions, checkout processes, impressions, purchases, etc.\n• Social interactions – all completed interaction with an embedded social button or widget on the website;\n• User timing – a period of time the user spent on completing a specific action;\n• App/screen – specific screens users view when using an app;\n• Exception – all errors and crashes that happened during a user’s visit.\n\nHow to name events when setting up event tracking?\n\nYou can call your events and variables whatever you want. However, please remember that this is a Garbage In, Garbage Out situation, just like we discussed with UTM parameters. Misspellings and mistakes can’t be corrected afterward; your data for that time will be forever corrupted. If you don’t name your events in a useful way, you’ll struggle to pull the right types of reports, you might miss data or overinflate it.\n\nInternally at Ladder, we try to stick to this naming convention:\n• eventCategory – an object the user interacted with or group of actions performed by the user, for example, scrolling, internal links, buttons, videos, etc;\n• eventAction – what the user just did, i.e. scroll down, scroll up, click, view, submit a form;\n• eventLabel – custom labels for particular events that you want to keep track of, for example, if there are different variations, such as Header Test Variant A, Page X Image B, or Video Header Test.\n• eventValue – how much is this action worth? If you have a basic estimate, at least you can more easily combine all ‘value’ generated across different conversion types together to see an aggregate of how traffic is performing.\n\nNote: If you’re tracking an eCommerce transaction, you can leave this blank. Use the Revenue in your Ecommerce reports to see how much action is worth.\n• event – Adding a name to an event to make it unique and understandable, you can use the same name as the event category (capitalized) plus ‘Event’. Best to keep documentation for the team to later know what name creation rules there are and what they mean.\n\nNote: Parameters from eventCategory, eventAction, eventLabel (optional, but recommended), and eventValue (optional) will be displayed in your reports. That’s why a consistent naming is a key here.\n\nSo, it looks like this:\n\nFor example, if you fire one signup event as:\n\nAnd a different one as:\n\nYou’ll have to remember to include both ‘Submit’ and ‘Complete’ actions in your weekly signups report. You might have used ‘submit’ for your Contact Us form, which isn’t signup and would inflate your numbers. As your marketing gets more complex and you have team members come and go, this knowledge (and therefore the data) can easily get lost.\n\nThe best practice is to use the same convention for the same (or similar) actions. This way, for example, you can easily look in Google Analytics and pull a report of all similar actions aggregated. For example, selecting the ‘click’ eventAction and reporting on clicks by eventLabel. Or select the ‘variation 1’ eventLabel and seeing all the eventActions associated.\n\nThen, within Google Tag Manager, you can set this up so that the values get passed into Google Analytics and any other tag that you need to set up.\n\nThere are a couple more cool features of Google Tag Manager you can explore:\n• Preview mode to see what’s firing and where\n• Rollback to previous versions that were working\n• Conditional tag firing (fire this one THEN this one)\n\nTo keep all your naming conventions consistent, and make sure you haven’t forgotten to track any key actions, I find it helpful to create what I call a ‘CRUDS map’.\n\nThese are the fundamental building blocks of any object on a website. So, for example, an ‘Account’ is an object, which can be created, read (viewed), updated, deleted, or searched for.\n\nThe main product you’re selling on your site will also tend to have these properties, for example on AirBnB a listing can be created (a host adds a property), read (someone views the property page), updated (they update the details of the listing) or deleted (the listing gets removed).\n\nEven a ‘Session’ can be thought of as having been created and deleted, though there won’t always be a perfect mapping. For example, here is a CRUDS map for the Ladder Planner.\n\nThere are a million ways you can choose to name your events, and your needs will naturally evolve as your marketing gets more complex. This is not a ‘one and done’ type of task; you’ll always be improving it.\n\nMy advice is: don’t overthink it. To paraphrase General George S. Patton: a good tracking plan violently executed today is better than a perfect tracking plan executed next month.\n\nWhere should the analytics tracking code be placed for data collection?\n\nCopy and paste the analytics tracking code into the ‘head’ section of your website. It has to go on every page of your site. If that sounds complicated, don’t worry – it isn’t. All modern websites are built using templates (which means the developer just has to copy and paste it once).\n\nThe important part is this bit:\n\nWhen you copy code from within Google Analytics, you’ll have your ID there. This is what tells Google that it’s your website that’s sending the information.\n\nWhat can’t be collected by the default analytics tracking code?\n\nYou won’t be able to collect any personally identifiable information like favorite websites, phone numbers, names, etc. Also, if you won’t turn on the option to collect data about demographics (which Google Analytics recommends to do by default), you won’t receive this information as well.\n\nWhen does event tracking code send an event hit to Google Analytics?\n\nWhenever someone visits your website, it sends an event hit to Google Analytics. Then, every time a user interacts with content on your domain i.e. clicks on a button, scrolls down or up, fills a form, goes to a subpage, etc., Google Analytics records them as hits.\n\nHow to set up event tracking in Google Analytics?\n\nIf you want to set up event tracking on Google Analytics, this is what you'll need to do. When someone visits your website, a snippet of JavaScript code on your website ‘fires’; sending that information to your analytics platform. That piece of code will look something like this:\n\nThis bit of code is important as it shows Google the domain that’s sending the information:\n\nAnd this bit tells Google Analytics that someone viewed a page:\n\nThis basic code gives you a lot of functionality. It allows you to segment your users by all the following variables:\n\nAll of that is recorded automatically by Google Analytics.\n\nIt also allows you to set up pageview-based goals; if your users land on a ‘confirmation’ page after purchasing, you can designate that page as a ‘goal’ and work out the conversion rate.\n\nHowever, not every important action happens on a specific ‘confirmation’ page. For that, we need an event tag that fires after the head tag.\n\nGo to your website, take each important action a user would take on your site. Which ones didn’t drop you on a new page? To track those actions, you need to add an event tag.\n\nThe code to track these events is below:\n\nThis first event tells Google Analytics that someone played the fall campaign video. The second one tells you someone completed the checkout process, (i.e. made a purchase) and you made 37 bucks. So far, so good; you (or your developer) just need to add this code to the handful of events in your funnel stage, and you’re tracking your whole funnel in Google Analytics.\n\nHowever, life is never that simple.\n\nWhat if you start advertising on Google Ads and Facebook, and need to add their tracking code to your website? Google Ads just needs the event tag, but Facebook needs the head and the event tag. Now, your setup looks like this:\n\nIt’s a little bit more complicated, but not too difficult so long as your developer set them all up correctly to fire at the same time, and doesn’t accidentally miss a one-off when making changes to that page.\n\nSo, Facebook and Google Ads are working well, and you want to expand to Twitter and Bing ads…\n\n…plus your buddy told you to try Pinterest ads\n\n…then a sales rep at Adroll sold you on retargeting but you want to test it versus Perfect Audience\n\n…and you read in a blog post that SumoMe works to collect emails\n\n…and you heard that Mixpanel was a better tool than Google Analytics.\n\n..but you’re also interested in collecting qualitative information with something like Hotjar or Qualaroo\n\n…and you need to add Klaviyo code to your website for email retargeting.\n\nBefore you know it, you end up with this set up:\n\nWhat are the chances that your developer sets all this correctly? Will they all be firing off the same rules? How likely is it that they won’t miss one tag off accidentally next time they edit this page? How will firing all these tags slow down your page loading speed? Could one of these tags misfire and stop your page from loading?\n\nAll these problems only get worse as you grow and your marketing gets more sophisticated.\n\nRather than hand-code every single tag that you need, you only have to add the tag manager code once in the head and fire the event tag once when something happens. Google Tag Manager will then send that information to all of the other tags that you need to send it to.\n\nAs well as making things easier for the developer, who now only has to remember one tag when they make changes to the page, it makes it easier for you too. You can now add new tags that fire off the same rules as the other tags, and you can do it yourself, instantly, without a developer, product manager, or product release in sight.\n\nThe code for this is really similar to the code you need to set up Google Analytics:\n\nThe event code is similar as well:\n\nNote: the attributes part is fully customizable; you’re not limited to using eventAction, eventLabel, etc used in the Google Analytics tag (though it would help, if you’re planning to push this information into Google Analytics via Tag Manager).\n\nIf you haven’t read our post on Marketing Funnel Analysis, I recommend it at this point. Once you read it, you’ll know that successful analysis relies on the ability to segment your users. This can get very advanced, particularly for larger enterprises, however, we only need to start with one segment: the stage in the buying cycle.\n\nMarketing funnels help you make sense of a big mass of user data, showing the worth of a user on each stage of your funnel.\n\nIt’s simple enough; to build a model like this, you need to fire events for each of these funnel stages. Then you can track the number of people who reach each stage, work out the conversion rate between stages, and then work backward to derive how much a user at each stage is worth to you.\n\nIt seems pretty basic, but 90% of businesses I talk to do not have a good model of their business like the one above. It’s essential to make any marketing decision confidently, so let’s walk through how to set this up.\n\nIt’s easy to get carried away here. I get it, you want to track everything. My advice is to start with a minimum viable tracking solution first (i.e. the bare minimum to track your funnel), then build on that solid foundation over time as needed. Otherwise, you risk spending hours of your time (and developers time) and getting half-baked, over-complicated solution that your team will rarely look at.\n\nTracking is never a ‘one and done’ activity; it’s a process that will evolve as you grow and get more sophisticated.\n\nSo how do you decide what funnel stages to track?\n\nThis isn’t possible to track (at least not in your analytics package) because it happens on other sites. When you run ads you get an ‘impression’ and ‘reach’ count, and Google even gives you the numbers for SEO, but you should ignore it for this guide.\n\nThis one is really easy; every analytics platform tracks the number of people who visit your site or app by default. No additional tracking is required though you may want to store additional variables/attributes regarding this user for more advanced segmentation (we’ll cover this later on).\n\nThis is the most important stage to get right. This is the first sign of intent from the user, and most marketing activity will be focused on driving people to this goal. Most commonly, it’s a collection of an email address or creation of an account, but can also be a view of a key page on the site (i.e. a product or pricing page).\n\nThis can mean a lot of different things depending on your business, but it should only relate to the event where people pay you money, or you’ll get in trouble with this metric. If that event happens offline (for example a B2B business with a long sales cycle), there are ways to link it back (which we’ll discuss later). If it doesn’t happen at all (i.e. you’re a startup that isn’t focused on revenue right now) I suggest you make a strong assumption to use as a placeholder.\n\nFor advertising based startups, this is easy: how many people come back and allow you to show ads? For B2B, also easy – it’s the upsell revenue minus the lost revenue from customers that churned. For e-commerce and other business models, this number might be very low. But it’s still important to measure so you can work out your lifetime value. For example, printer companies lose money on the sale of the printer but make it back when they sell you ink every few months. If they weren’t tracking retention, they wouldn’t be able to afford their user acquisition costs. Depending on your product, this may or may not be possible to track within analytics, but you do want to have a good estimate of this number.\n\nIt’s probably the hardest metric to track. You’re probably getting a ton more referrals than it’s possible to measure by conventional means. My best recommendation is to focus on a tangible action (like sharing on social) and then make a best guess estimate of what that share is worth (based on how much traffic you get from social shares, and how much that traffic is worth to you). I’ll explain this more in detail later.\n\nThe important thing is that you only track economically meaningful events, and that precede each other. Meaning that if a user can skip a funnel stage, that stage shouldn’t be in your funnel (or should be combined with another action).\n\nFor example, on AirBnB the main action on the home page is to search. However, I can scroll down and click into one of their content pages, and choose a listing from there, without searching. Or maybe I came in from SEO directly to a destination page. If AirBnB included the ‘search’ action in their funnel, their numbers would be off; some users would book without searching, so the numbers would be skewed.\n\nA better ‘activation’ metric for AirBnB would be creating an account, as you have to do that to make your first booking; you can’t skip that step like you can search. Alternatively, a view of a listing page could also work; this is particularly useful as it’s a more meaningful metric when looking at existing user engagement (who created an account maybe years ago).\n\nNow I’m not saying AirBnB shouldn’t track searches; searches are a great indication someone is interested in the product, and it’s economically valuable. I’m just saying that it shouldn’t be the first thing they track or part of the main funnel model they build. It’s likely they have a separate funnel just for people who search, but that’s a level of complexity you won’t need at first.\n\nAs discussed, apps are more dynamic than websites and therefore aren’t typically built around ‘pages’ that you can deep link into. Therefore, mobile analytics packages are typically built more around ‘events’ than pages. Though Google Analytics does work with events and on mobile, mobile app developers tend to use mobile-focused analytics vendors.\n\nNote: inserting code into an app should be done by a developer. The app or its newest version will go live only once you update it in the App Store/Google Play, not like with the website where it’s live the second you put it to the production version.\n\nEven if you do have deep link pages within your app, the Apple app store doesn’t pass referrer information or UTM parameters! This means you can’t see what campaigns drove your app users or how users coming from different marketing campaigns behave. You also can’t drop a user directly into a deep link page. Even if someone shared a specific page with them, once they install the app, they land on the generic homepage with no context as to how to get to the page they needed. As well as being bad for tracking, it’s poor user experience.\n\nThere are several different tools that solve one or both of these problems, but we’ve seen the most success with Branch.io. The tool ‘fingerprints’ (records information about) a user that clicks on a marketing link, and then recognizes that user once they install and open the app. They can then push that information into an analytics platform (for example Localytics) and/or land a user on the right deep-link page (for example, if they came via a friend sharing a link to a specific page).\n\nIt’s time to dig into the code that you’ll need to implement to set up event tracking. I’ll focus specifically on walking through the most popular use cases we’ve run into; from the most basic setup (Unbounce page) to the most advanced (Mobile app – coming soon).\n\nIf you aren’t familiar with the basics of JavaScript, this guide may seem a little alien to you. However, you should just be able to send this guide to your developer and they’ll know what to do. If you do want to learn a bit more about doing it yourself, Codecademy’s course on how to build an interactive website should teach you enough of the basics.\n\nLet’s start with the easiest example; a simple Unbounce landing page.\n\nThis is easier than most tracking implementations because there are only two actions to track:\n• The user visited the site (just a single page, really)\n• The user only takes one action (signup)\n\nI’m going to assume you already have a page (or multiple pages) ready to track. If you don’t know how to build a page, I’d recommend you check out this Unbounce workshop.\n\nFor this guide, I’ll use the minimalist Boxee Green template.\n\nOnce you log in, you’ll see your ID (GTM-XXXXXX) in the top navigation bar, click it to get your code.\n\nPaste in the Google Tag Manager code. Change ‘Placement’ to ‘Head’. Name the script ‘Google Tag Manager’. Save the Code.\n\nStep 3 – Go back and click on the Form Confirmation Dialog page.\n\nStep 4 – Click JavaScripts and do the same.\n\nStep 6 – Click into Tags and add a new tag.\n\nStep 7 – Name the tag, add a Universal Analytics tag, and fill in your Google Analytics ID. Now, add a Page View Track Type and a trigger on ‘All Pages’.\n\nUnbounce automatically does the rest for you. Even though no actual new URL loads when someone submits their email, Unbounce pushes a ‘virtual’ page view when the Form Confirmation Dialog page pops up. We’ll see this in a second.\n\nTo put this live and check it’s working, publish both the Unbounce page and the Google Tag Manager changes. Then visit the page. If you head to Google Analytics and click into the ‘Real Time’ section, you can see yourself surfing the site!\n\nJust to double-check, you can also try out ‘Preview’ mode in Google Tag Manager, by clicking the down arrow next to ‘Publish’ and click Preview.\n\nYou can see what is firing from Google Tag Manager on the bottom of the page.\n\nTo test the form, you can add a plus sign after your Gmail address (but before the @gmail.com) and sign up with a unique email (if you have a welcome email set up, it’ll still go through to your normal email inbox).\n\nEven though the formatting isn’t great, you can see the tag firing in preview mode on the Form Dialogue page there too.\n\nFinally, if you go to Real-Time > Content you can see the actual page URL you were on. This is the ‘virtual’ pageview we were talking about earlier.\n\nThe full URL path looks like this:\n\nSo to track this as a ‘Goal’ in Google Analytics, it would contain ‘form_confirmation’.\n\nYou could have just added the Google Analytics tracking code directly in the Unbounce script editor (which in itself, is a kind of tag management system).\n\nHowever, that approach doesn’t scale. If you now want to add Mixpanel, Intercom, SumoMe, HotJar, Facebook Conversion tracking, and many other tools and analytics pixels, you’d have to add them all one by one into Unbounce.\n\nThis wouldn’t be too much of a problem, but what if you’re also using these scripts on your main website, blog, and in several other places? You might forget a tag or make a mistake.\n\nKeeping everything in Google Tag Manager makes it easier to see what’s firing (and why), and it decreases the chances of a mistake.\n\nTo add a new pixel, say for example the Facebook Website Retargeting code, it’s as easy as adding another tag off the same ‘all pages’ trigger (this time as a ‘Custom HTML’ tag).\n\nYou don’t even have to log into Unbounce – you can publish it live to the site directly from Google Tag Manager.\n\nSure, this doesn’t look like that great of a benefit considering how easy it is to publish within Unbounce. But for those who need an IT ticket, approval from a product manager, an hour of developer’s time, and a release date window two to12 weeks in the future to get something live on your site, this ability is mind-bogglingly useful!\n\nThe in-built capabilities of Google Tag Manager are pretty powerful.\n\nSay you don’t want to add a tag to every page of the site, but ONLY to the Form Confirmation Dialogue page. For example, adding a ‘conversion’ event, in this example for Facebook. You can do that pretty easily, just by modifying the trigger.\n\nThis is what the Facebook conversion event looks like:\n\nThere are a lot of different options, and you can even create your custom ones, but ‘Lead’ will do for now.\n\nIn Tag Manager, you need to add a custom HTML tag as you did before, but this time, filter the trigger so that instead of ALL pages, it only shows on the ‘form_confirmation’ page (just like you saw in the live content report, and set up in Google Analytics Goals).\n\nStep 2 – add the custom HTML to fire on that trigger.\n\nStep 3 – Publishing and hitting preview again, you can check if it worked the same way you did before.\n\nYour Facebook Retargeting pixel is working, but the Conversion event isn’t firing. Good start.\n\nFacebook Lead Conversion is firing on the popup as expected.\n\nWhat if you didn’t have a confirmation page at all? For example, you wanted to track clicks on the social share buttons.\n\nStep 1 – find the element ID. Right-click on the button and click ‘inspect’.\n\nThis might not mean too much to you if you don’t code, but it’s not that difficult if you ignore all but the one piece you need: the ID.\n\nHere you can see that the button has a unique ID – “lp-pom-button-37”.\n\nStep 2 – add click id targeting to Tag Manager, by going to ‘Variables’ clicking ‘Configure’ and adding ‘Click ID’.\n\nStep 3 – set up a trigger that fires when that ID is clicked.\n\nNote: you check this via Google Analytics Real-Time, because this click refreshes the page, and therefore you don’t see the event happen quick enough in Google Tag Manager preview mode to check it’s working.\n\nThis doesn’t just work for the social buttons, but you can also use it on the main CTA button or any button for that matter. You just need the ID:\n\n…and you don’t even need the ID.\n\nYou can also use the Text of the button, in this case, “GET NOTIFIED”, the URL (i.e. track all clicks that lead to a certain domain), or even the element class (all buttons with the ‘lp-pom-button’ class). Be careful with that last one that you’re not firing events off clicks on buttons you don’t want to track, that have the same class.\n\nWhat you’ve learned so far is pretty powerful. Using a combination of only these methods, you can add pretty much any JavaScript tool, analytics software, or track any event you need.\n\nYou saw earlier how Unbounce was making it easier for you by pushing a ‘virtual’ pageview when the Form Confirmation Dialogue page was popped up. What if they weren’t? You’d have to find another way to fire the conversion event.\n\nThis is how you can do this:\n\nYou need to go back to Unbounce, to the Form Confirmation Dialogue page, and add this. Even though this is extra work, it’s the only way to be 100% sure your event will fire.\n\nThis method, rather than relying on pageviews, is what most modern web developers use to fire their analytics events – particularly those working on websites where the majority of user interactions DON’T reload the page.\n\nIt’s pretty easy to add a trigger for these events. Just create a ‘custom event’ trigger and match the name to what you added to Unbounce (or your developer added to your site).\n\nFrom there, you can add your event tag as normal.\n\nYou kept this simple and just fired a simple event name, then added more context for the event manually in Google Tag Manager. What if you wanted that context to be added at the code level and pushed through Google Tag Manager into your other tags?\n\nFor example, Unbounce is built for A/B testing. What if you want to know which variation was shown to the user before they signed up?\n\nLuckily, Unbounce provides this as a variable on the page that we can access. If you (after clicking ‘inspect element’) click on ‘console’ and type ‘window.ub’, you can see the variables Unbounce pushes to the page.\n\nYou’re interested in variationID, and you can pull that info into the event, as a variable.\n\nIf you go into Variables within Google Tag Manager, and pick ‘JavaScript variable’ and type in “window.ub.page.variantId”, you now have this as a resource to add to your tags.\n\nTo use this in a tag, you just need to put it in curly brackets, like this “{{Unbounce Variant ID}}”.\n\nAnd voila – you’re tracking the variant ID directly from the page.\n\nAgain, this looks like extra work right now, but if you were A/B testing 10s or 100s of variations, you’d very much like to not have to code each one manually.\n\nOf course, this is just the beginning.\n\nYou could, for example, push any of the other Unbounce variables into our tags, like page name.\n\nYou could push the URL into your tag:\n\nOr really anything your developers can hard code for you.\n\nYou can take a couple of actions to avoid repeatedly adding these scripts every time.\n\nFor example, you could drop the eventCategory and eventAction down to the code level, rather than having multiple triggers in Google Tag Manager.\n\nNote: when adding multiple variables, each but the last needs to have a comma after.\n\nAdd the right code (plus values) into Unbounce.\n\nNote: these are both ‘dataLayer’ variables because you’re ‘pushing’ them to the dataLayer.\n\nNow, you never have to set up another event in Google Tag Manager again for Unbounce. You can just fire the Google Tag Manager tag with the naming convention you want, and it’ll pass through Google Tag Manager to Google Analytics (and the other tags you have set up). This is a good practice to adopt, particularly when working with more complex, self-hosted websites and working with your developers.\n\nWe’ll go into more detail here when we talk about eCommerce stores, but common use of ‘variables’ is to pass the transaction value whenever someone makes a purchase. That’s something you couldn’t possibly hard code yourself unless you can pull it from the page.\n\nTo never forget your Google Analytics ID, you can store this as a ‘constant’ variable!\n\nUse the variable to fill in your Tracking ID.\n\nAnother time-saving feature is Unbounce’s Script Manager. It allows you to automatically fire the right events on the right pages, based on domain.\n\nThere are also more direct integrations with Google Tag Manager and Google Analytics to save you more time.\n\nThe major benefit I’ve found is not forgetting to add your script to that new page you launched. If it’s on the same domain, it’s automatically added.\n\nCombined with the power of Variables, you can save yourself a lot of duplication and time.\n\nProTip 1 – Capturing UTM parameters along with email as hidden form fields.\n\nAlthough Google Analytics can show you which marketing channels drove leads, it can’t tell you what leads specifically it drove. It’s against Google’s guidelines to record any personally identifiable information about those leads (i.e. email address) in your analytics.\n\nAdditionally, if you have a long sales cycle, particularly if much of it happens offline, you’ll struggle to attribute the final sale you make to the right marketing channel.\n\nTo solve this, you need to capture the UTM parameters when a user signs up using the hidden form fields feature in Unbounce.\n\nStep 1 – click on the email input and click ‘edit form fields’ on the right.\n\nStep 2 – click on ‘hidden field’ and change the name to (exactly) ‘utm_source’.\n\nStep 3 – add utmmedium and utmcampaign in the same way, then hit done, save the page, and republish.\n\n…and that’s it. Unbounce makes it easy for you by automatically looking into the URL for the UTM parameters, then adding them to a hidden form field. This means they’re captured alongside the email in the database when the user submits.\n\nYou can test this by adding your made-up values for UTM parameters to the link when you visit the page and seeing if they end up in the database.\n\nFrom Unbounce you can push that information into any CRM (via WebHooks and Zapier if you don’t see the one you use here).\n\nThis is a great way to build trust between marketing and sales. Seeing the marketing source right alongside those leads in the database, makes it hard to argue about who drove that lead.\n\nI mentioned earlier that Unbounce automatically pulls the parameters from the URL and adds them to the form for you. If you aren’t using Unbounce, pass this post along to your developer and they should be able to figure out how to code this behavior on your site.\n\nIf your website has multiple pages, or a user comes back multiple times, you’ll lose the UTM information. The solution is to store the UTMs in a cookie or local browser storage, until the user finally signs up, at which point pull the data back out and use the hidden fields trick.\n\nAgain, this will take some development work, but the flexibility to be able to use your own attribution rules and being 100% confident in the data is quite valuable.\n\nRegardless of what blogging platform you use, the process will largely be the same.\n\nStep 2 – click into ‘code injection’ and paste your Google Tag Manager code.\n\nIf you read the first step-by-step guide in this post on Unbounce Pages, you’ll notice this section looks like a simplified version of Unbounce’s script manager. Almost every CMS or platform has its own space where you can add tracking code. You just need to find it or override it if there are limitations (which we’ll see in the Shopify guide).\n\nNice and simple, just like adding it to Unbounce.\n\nAny professional blogger will tell you that building an email list is key. It allows you to continually communicate with your audience, remind them to come back for new content, and helps you build your traffic over time. Naturally, you’ll want to track how many signups you’re getting.\n\nA tool called SumoMe offers, among other things, ‘List Builder’ and ‘Scroll Box’ which are excellent ways to increase your email conversion rate.\n\nTo implement, it’s as simple as adding one line of code.\n\nTo track signups, just like Unbounce and Ghost, they’re giving you a place to put your tracking code. However, it’s a little clunky as you have to add it for every single individual popup. Below is an example.\n\nYou’ll notice there’s a place for when the popup is shown, as well as one for when someone submits their email. This is helpful because you can work out your show rate (% of people who see the popup) as well as your conversion rate (% who submit their email when shown the popup). To differentiate these, I pushed the events as ‘sm-show’ and ‘sm-signup’.\n\nTo add a bit more context, I also pushed two variables, ‘sm-label’, the name of the popup, and ‘sm-app’, so I could compare for example whether List Builder or Scroll Box is more effective.\n\nThe next step, if you’re following along, is to add those variables in Google Tag Manager so you can use them.\n\nNext, you create the trigger that will fire on email submit.\n\nThanks to this setup, rather than create a different Tag for every single new email popup, you can just pass those variables into one.\n\nI’d repeat the above for ‘sm-show’ and as long as I remember my Google Tag Manager code when making new popups, I should never have to modify my Google Tag Manager setup for SumoMe again.\n\n…wait there’s just one issue. One of my SumoMe tools, Smart Bar, doesn’t capture email addresses, it drives clicks out to my website. How do I track that?\n\nIf we remember back to the Unbounce guide, we can track clicks on an element, given its ID, Class, or Text. Well, if we right-click on the button, and click ‘inspect element’, we can see that the button has a ‘class’ of ‘sumome-smartbar-button’.\n\nI didn’t see an ID, and rather than use the text, which can change, this class looks like a surefire bet to track all Smart Bar button clicks.\n\nJust like before, you should pull in the click class variable, then only firing the tag when it matches.\n\nAgain, you can do the same to track social shares, another SumoMe app.\n\nTriggering based on the sumome-share-client-share class seems to be best.\n\nSet up the tag. Push the ‘text’ as a variable so you can see what CTAs work best.\n\nWhy stop at shares and clicks to your website? Why not track all outbound clicks. It’s very useful to see:\n• How much traffic you’re sending to other websites\n• What websites you’re sending the most traffic to\n• How much traffic you send back to your main site\n• How much traffic you’re sending to your affiliates\n• What blog posts send the most outbound traffic\n\nTo do this with Google Tag Manager, it’s pretty easy.\n\nStep 1 – set up a trigger on all link clicks.\n\nNote: Avoid ‘waiting for tags’ unless you must measure 100% of clicks because it can significantly slow down loading times and hurt user experience.\n\nStep 3 – add the Google Analytics event firing off the click-out trigger you created.\n\nBy adding the click-out URL in the Event Label, you can track which URLs you’re sending the most traffic to. Additionally, add a value of 1 to the firing of this event, which will automatically allow you to see how many events you’ve fired in the ‘event value’ field.\n\nIf outbound clicks are worth something to your business, you might want to dynamically add this value via a hard-coded variable. You could also incorporate a lookup table to stop competitors from prying sensitive information like how much your affiliates pay you per outbound click.\n\nIt can also be helpful to track how far someone reads down a page. While we haven’t implemented this on our blog yet, Optimize Smart put together a few good solutions for doing this, which your developer should hopefully be able to understand.\n\nIt’s important to understand that any event you fire decreases your bounce rate. This is a good thing. Normally, you have no idea what percentage of those ‘bounces’ were true bounces, i.e. they left without doing anything. By tracking clicks out to other sites and tracking scroll depth, you can see how many engaged with your site, and adjust your content/traffic strategy accordingly. If you don’t want these events to count against bounce rate, simply set ‘non-interaction hit’ to True in the Tag configuration.\n\nWhat if you want to provide some context about a user’s behavior, but it didn’t necessarily want to fire an event every time? For example, if a user has shared on social in the past.\n\nThat’s where Custom Dimensions come in.\n\nFirst, you have to set one up in Google Analytics. It can be at the ‘hit’ (pageview) level, or per session or user.\n\nYou then make a note of the dimension index, in this case, 2 (you only get 20, so use sparingly).\n\nIt’s as simple as adding our custom dimension to our SM-Share event, and you’re golden. Now, you’ll be able to split any of our traffic in Google Analytics reports by whether they have shared or not.\n\nIt’s not all about quantitative tools. Google Tag Manager can help you add qualitative tools too. For example, running surveys, seeing where people click or scroll, and even recording their screens. SumoMe has its heatmaps (see where people click) and Content Analytics (see how far they scroll) tools.\n\nIt’s pretty much the same process to install any such tools. Here’s how to install Hotjar, another tool with heatmaps, surveys, screen recording, and more.\n\nThis is how polls look like in Hotjar.\n\nIf you’re interested in surveys/polls specifically, check out our post on Qualaroo, which is a more advanced tool we recommend in this space.\n\nIf you’re savvy, you’ll notice the UTM system isn’t perfect. If you come through a Google Ads campaign, but then you share your URL with someone (complete with UTM parameters), Google Analytics will attribute both of you to Ads, inflating the marketing numbers. This is a big issue when you’re seeing a lot of share activity on your site. Luckily, it can be solved by wiping the referral information once you’re done with it.\n\nNote: Buzzfeed, the king of shareable content, does something similar to the basis for their proprietary Pound analytics tool.\n\nWordPress is the most popular CMS in the world. If you’re looking to add tracking to a WP blog, I’d first recommend you read the above Ghost guide we put together, as 90% will be the same.\n\nFor almost any major marketing technique, tool, or platform, there’s a WordPress plugin. Installing Google Tag Manager is as easy as installing this plugin by DuracellTomi.\n\nRight out of the box, it not only adds the Google Tag Manager code to every page of your WordPress site, but it also builds a basic Data Layer for you.\n• post count on the current page + in the current category/tag/taxonomy\n• logged in user ID (to track cross-device behavior in Google Analytics)\n\nWant something a little more customizable? Try Header and Footer, a script injection plugin.\n\nSumoMe? One-click integration with the plugin they built for WordPress Users.\n\nThe point is that whatever you need to accomplish in WordPress, there’s probably a plugin out there that helps you do it.\n\nIf not, you can always edit the theme manually. If you go this route, make sure you know what you’re doing – it’s really easy to screw up your site by changing the wrong thing. I’d recommend finding a good midrange WP developer on Upwork to make any manual changes.\n\nIf you want more flexibility than Header and Footer, but without the risk of messing up your site by coding it manually in the theme, try something like the Code Snippets plugin instead.\n\nIf you read the Unbounce, Ghost, and WordPress guides above, you’ll already know 80% of what you need to know for a Shopify Tag Manager implementation! Even better, the other 20% is done for you by Shopify.\n\nJust like the other platforms, it has a place to paste your tracking code on the conversion page.\n\nBut, you don’t have to worry about that for Google Analytics has a direct integration (including advanced eCommerce tracking – though remember to turn it on in Google Analytics Admin).\n\nNote: you need a Shopify ‘Plus’ account to be able to track revenue.\n\nJust like WordPress, Shopify has its app store, which makes more advanced integrations (we recommend Google Shopping, Justuno, ReferralCandy, and Klaviyo) super easy.\n\nOne thing I would consider, however, is an A/B testing software. On Unbounce. this was built in, and on the blog platforms, there wasn’t much to test. However, with eCommerce, you can test changes that directly impact revenue and track those changes using Google Tag Manager. To learn more about A/B testing, check out this post on Shopify or read our A/B testing guide.\n\nOptimizely has direct integration with Shopify, but it’s not too difficult to implement manually.\n\nNote: it is not advised to implement Optimizely within Google Tag Manager as it can affect the performance of your tests by showing a visible ‘flicker’ as the content loads.\n\nThen, paste Optimizely in the ‘head’ part of the document. Just like SumoMe, it’s one simple line of code, example below:\n\nIn order to report on revenue in your tests, you can also push a revenue event into Optimizely. This can be done in Google Tag Manager, or in the ‘checkout’ space for tracking code in Shopify we saw earlier.\n\nI highlighted the piece in double curly brackets because if you follow along, you should recognize what this is by now: a variable. Yes, just like Google Tag Manager variables, Shopify has its own variables they make available on the page.\n\nYou can do the same thing to push revenue into Facebook, so you can report on revenue directly from your Facebook ads manager, saving you time digging around in Google Analytics.\n\nBut there’s more than just revenue. For example, you could reconstruct the entire advanced ecommerce tracking object and push it into Google Tag Manager, if you didn’t want to do it via Shopify’s integration. This would allow you to push that information into more than just Google Analytics, without relying on there being a native Shopify App integration with the platform you want to use.\n\nNow that might be pretty scary and complicated, but don’t worry. For a relatively small fee, you can find talented Shopify developers on Upwork that live and breathe this stuff and can do it for you. You only have to do it once and you’ll have solid data from then on, so it’s worth it.\n\nWhat if you don’t have a Shopify site with all these integrations and pre-baked variables?\n\nIf you have a custom eCommerce site, take a look at how Shopify does it first, then ask your developer (or an Upworker) to write their custom version for your website.\n\nSo long as they can make the variable values you need to track available on the page, it can be pushed into Google Tag Manager, and from there, into any other platform.\n\nWith the right combination of Variables and Events, you can truly track anything!\n\nWith a little knowledge of how websites work, a little knowledge of code, and a lot of trial and error, you can use Google Tag Manager to pull information right out of the web page and into your tags!\n\nDOM means ‘Document Object Model’, and it’s simply just a representation of how the website is put together. All you need to know is that every element on the page can be referenced by ID and Class. This was mentioned earlier in the Ghost guide for tracking Smart Bar clicks. You can also access whatever is in the URL, by pulling the document ‘window.location.href’, as you did earlier in the Unbounce guide.\n\nLet’s take the Best Buy website as an example.\n\nIf you take a look at this Acer Chromebook page, what do you notice?\n\nWell, the word Acer is right there in the URL.\n\nIs this a pattern? If it isn’t consistent, you won’t be able to use it.\n\nIt looks like it is: the brand name is always in-between “site/” and a dash “-”. Using regex*, you can pull that variable from the URL and use it as a variable in Google Tag Manager.\n\nNote: regex is a tough subject and I won’t cover it here, but you can usually hash something together by methodologically testing different combinations.\n\nWhat else can you see in the URL? There’s something called the “skuId” – that must be the product ID. This appears twice, and it’s harder to grab the one at the end with regex (unless you write it carefully, you’ll grab anything else at the end of the URL), so let’s go for the first one.\n\nYou can also see that, although they appear in different places in the URL depending on the brand name, the word ‘Chromebook’ is always there in the URL. This isn’t ideal, as you’d have to write a ‘contains X’ rule for every category you wanted to tag. However, if you’re doing a special Chromebook sale, this might be worthwhile.\n\nYou could also write a regex rule for memory, emmc flash, etc.\n\nYou’ve got quite a lot, and that’s just from the URL. What else can you get from the page itself?\n\nFor starters, the name helpfully has a unique id “sku-title”.\n\nPulling this out as a variable is very similar to the click text trick used in the Unbounce guide. However, you need to do a little more digging to get the value you need.\n\nTo get this value, switch over to the console and type the following code:\n\nHere it is.\n\nTo use this in Google Tag Manager, you just need to add a Custom JavaScript Variable, and you can then use that like any other variable in the tags.\n\nNote: you have to wrap the code in a function, and make sure it returns a value to make it work.\n\nURL also gives you anything with a unique ID.\n\nNote: the last two were classes rather than IDs, but they look unique so you should be fine. You need to modify the code to say getElementsByClassName(“example”)[0], which gets the first element with that class in the document (in case there are multiple).\n\nPretty powerful right? I’ll leave you with one last clever one.\n\nTo check if the user is logged in, just check what the text of the sign-in button says.\n\nThis approach isn’t perfect. All it takes is for one developer to change the ID or Class of an element and your tracking is broken. It could be days before you even notice and that data is lost forever if it isn’t captured at the moment.\n\nEven though it’s pretty satisfying to be able to work around the development team’s busy schedule, or save yourself some budget, it’s best to use this only as a temporary workaround.\n\nAs mentioned, this post is a work in progress. I hope you’ve enjoyed what we’re written so far – I’d be happy to take any feedback, changes, or additions you think would be valuable. I plan to keep adding new guides as I get the time to create them.\n\nSo far, these are the most requested:\n\nAny others you can think of? Dying to see one of the above? => Leave the comment below!\n\nIn this guide, you’ll learn how to write your own event tracking implementation plan. Yes, actually write the code and instructions that you can pass on to your developer to implement or even implement yourself."
    },
    {
        "link": "https://uxcam.com/blog/mobile-app-event-tracking",
        "document": "If you want to create apps that people enjoy using, you need to have a deep understanding of user behavior—the who, what, when, where, and why.\n\nBut these aren't always easy to track with run-of-the-mill analytics platforms. That's where setting up mobile app event tracking can come in handy.\n\nMobile app event tracking is the process of tracking usage data within a mobile app. It's a way to learn how your users interact with the app, which features they use most, and what areas need improvement.\n\nIf you're unsure how to get started with mobile app event tracking, you're in the right place. We've got a step-by-step guide to help you get up and running, plus an introduction to UXCam — a powerful mobile app experience analytics platform.\n\nLet's start with the basics—what is an event?\n\nAn event is any meaningful action within your mobile app—button clicks, purchases, sign-ups, page views, etc. Every time users do one of these actions, they trigger the event in question. Triggered events are meaningful because they give insight into how users interact with your app.\n\nBut how do you track these events and draw insights from them? That's where mobile app event tracking comes in.\n\nMobile event tracking is the process of collecting and analyzing data related to user behavior using a dedicated tool like UXCam. A mobile event tracking tool helps you turn event data into actionable insights. It gives you a better understanding of your users, so you can identify problems and opportunities in the user experience.\n\nA new innovation in mobile app event tracking is auto-capture. Auto-capture automatically tracks certain user events and behaviors within an app without the need for manual instrumentation. This leads to faster time-to-insights since everything is tracked automatically, so you don’t miss out if you forgot to track an event. Also, since there is no developer setup required for auto-capture, you can get started without involving stakeholders.\n\nYou can track various events within your app. Here are some examples that UXCam can help you log:\n\nProperties are the next remaining piece of the puzzle. You can think of properties like labels, categories, or tags that help you organize events into meaningful groups.\n\nLet’s examine some examples of properties below:\n\nHere are some examples of events that can be auto-captured without manual setup:\n\nWhy is mobile app event tracking so important?\n\nEvent tracking allows for more personalized and targeted engagement with users, leading to increased customer satisfaction and ultimately, better business results. Here are more arguments on why you need to pay attention to it:\n\nIt helps you understand your users\n\nMeasuring key events helps you identify your most valuable users and understand their behavior (i.e., what drives their behavior and how to encourage certain actions).\n\nYou can also use this to track which user segments stay the longest, visit most frequently, and purchase the most.\n\nThese insights allow you to figure out your “most valuable” users. These are the segments that you need to be targeting with special offers, discounts, and rewards.\n\nIt helps you assess the effectiveness of your product decisions\n\nProduct management isn't a one-size-fits-all endeavor—you are looking to please multiple stakeholders, and tying it all together can be tricky.\n\nMobile app event tracking is the answer. It helps you determine which changes are most effective by cross-referencing key metrics like conversion rate, time on app, and purchases. With this data, you can make informed decisions about where to focus your product efforts, whether it’s optimizing a single platform or experimenting with new ones.\n\nWith an improved understanding of user behavior, you can start to make data-driven decisions about changes or improvements that are needed.\n\nFor example, if you notice that a particular feature isn't used as much as others, it could indicate a usability issue or design flaw. By tracking events like button clicks and page views, you can gain insight into user behavior and make changes that improve the overall experience.\n\nHow to set up mobile app event tracking\n\nIn the following, we will provide you a guide for setting up mobile app event tracking, starting with choosing the questions to answer.\n\nStep 1: Choose the question(s) you want to answer\n\nMobile app event tracking is an experiment. And like any experiment, you need to begin with at least one hypothesis. If you don't, you risk becoming overwhelmed by the sheer amount of data available.\n\nStart by thinking about the questions you want to answer. Do you want to know how users interact with a particular feature? How successful a marketing campaign is? What drives purchases?\n\nThink logically—the better and more specific the question, the easier it’ll be to track it. Also, focus on the questions that will help you advance tangible product goals. For example, if your main goal is increasing your revenue, focus on questions that deal with mobile app conversions, purchases, and user satisfaction.\n\nNow that you have a list of questions, it's time to map them to the events and properties that will help you get the answers.\n\nFor each question, a list which events and properties are necessary to answer it. We can't tell you exactly what to track in order to get the answers you're looking for—this is something you'll need to figure out on your own.\n\nThat said, we can give you a few suggestions based on common goals:\n\nFor more tips and best practices for mapping events and properties to your goals, UXCam’s help resources are a great place to find guidance.\n\nStep 3: Find a tool that tracks the events and properties you've chosen\n\nThere are tons of mobile app analytics tools out there, but not all are equally capable when it comes to event tracking. Before you commit to any particular tool, check that it can track the events and properties listed in your question map. If it can, great! If not, you'll need to look for a tool that better meets your needs.\n\nUXCam is a great choice for mobile app event tracking, thanks to an intuitive interface and powerful features, like:\n• None Complete In-App Event Context: Gain complete visibility into user behavior by tracking customizable events and properties in real-time thanks to UXCam APIs.\n• None Advanced Filtering: Never get lost in the data with advanced filtering options that let you break down events and properties by app version, device type, session length, and more.\n• None Session Replays: Dive into the nitty-gritty details of individual sessions with replay videos that let you trace user steps.\n\nThe rationale behind this step is pretty simple. You don't want to realize there's a problem with your event tracking setup once it's too late. For example, if you find out that there's a tracking issue after a product or feature launch, you may be missing out on hundreds (if not thousands) of invaluable first impressions and data points.\n\nTo avoid this scenario, take the time to test your event tracking system before collecting data. Simulate user actions, interactions, and events and ensure the data is accurately recorded in your analytics tool. If you find any discrepancies, make the necessary adjustments until everything works as expected.\n\nOnce you're satisfied with your event tracking setup, it's time to go live!\n\nStep 5: Know when you have a big enough sample size to start analyzing\n\nOnce you've collected the data, it's time to start analyzing it.\n\nBut—to continue with the scientific experiment metaphor—you need to make sure you have enough data points to draw meaningful conclusions. In other words, don't make any assumptions until you have a big enough sample size.\n\nHow do you know when that is? The more data, the better. But beyond that, the ideal sample size depends on the size of the population you're trying to study (i.e., the number of users you have) and how confident you want to be in the results.\n\nFor exact figures, we recommend using an online calculator. But if you're looking for a quick answer, 100-400 data points are usually a good starting point.\n\nOnce you've verified that you have enough data to draw meaningful conclusions, it's time to start analyzing.\n\nIn this step, you'll use your event tracking and analytics tool to answer the questions you set out to answer at the start of this process. Look for trends and patterns in the data that can help you better understand user behavior, identify opportunities for improvement, and optimize your funnel.\n\nWith UXCam's powerful dashboards and reports, it's easy to start. You can quickly view the results of any query and create visualizations that make drawing insights from your data easier.\n\nEvent tracking and analytics are essential for optimizing the mobile user experience, but they're just the beginning. UXCam goes beyond traditional analytics tools, giving you the insights and data you need to take your app optimization efforts to the next level.\n\nWith UXCam, you can:\n• None Use Heatmaps to understand user interaction with app UI elements.\n• None Create beautiful, informative dashboards for easy access to your data.\n\nBy leveraging UXCam's powerful event tracking and analytics capabilities, you can make data-driven decisions that deliver a better app experience for your users.\n\nYou might also be interested in these; How to write a tracking plan for mobile app analytics\n\nWhat is mobile analytics? Definition, tools & best practices\n\nMobile app KPI dashboard examples and how to use them"
    },
    {
        "link": "https://stackoverflow.com/questions/21333665/google-analytics-event-tracking-code",
        "document": "I'm using Google Analytics, at the top level I can see who has come onto my site, however I cannot see track my event tracking for my social network buttons, I think I may have developed these wrong.\n\nThese events are not been tracked on my analytics account that I can see anyway if someone knows where they are kept that would be great.\n\nBut the code I've used is below as I'm not sure if I have implemented this correctly:\n\nIf someone can advise if this is correct will be great!\n\nAs per the answer below, I removed the double comma retested in the Events Overview section and no on click items have appeared...\n\nI've even added them as a goal in Google Analytics but this doesn't seem to work either."
    },
    {
        "link": "https://stackoverflow.com/questions/1390190/event-class-design-pattern-prototype",
        "document": "I've bumped up against this before and I need the help of someone smarter than me!\n\nHow can I attach an event of an element to a method of a class? More specifically, the same class? Is there a better way?\n\nUsing a Qt widget style approach, I've been trying to create self-contained \"widget\" objects in javascript. I'm using the Prototype javascript framework and building my widget as a class. Then, using Event.observe, I've tried to attach the event to a method of the class. But the Event assignment unbinds the assigned method. Here's an example of a simple table I'm trying to build that has clickable column headers:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
        "document": "In programming, inheritance refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using objects. Each object has an internal link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with as its prototype. By definition, has no prototype and acts as the final link in this prototype chain. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like static dispatching do not exist in JavaScript. JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is dynamic and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model — which is how classes are implemented. Although classes are now widely adopted and have become a new paradigm in JavaScript, classes do not bring a new inheritance pattern. While classes abstract most of the prototypal mechanism away, understanding how prototypes work under the hood is still useful.\n\nJavaScript objects are dynamic \"bags\" of properties (referred to as own properties). JavaScript objects have a link to a prototype object. When trying to access a property of an object, the property will not only be sought on the object but on the prototype of the object, the prototype of the prototype, and so on until either a property with a matching name is found or the end of the prototype chain is reached. Note: Following the ECMAScript standard, the notation is used to designate the prototype of . The internal slot can be accessed and modified with the and functions respectively. This is equivalent to the JavaScript accessor which is non-standard but de-facto implemented by many JavaScript engines. To prevent confusion while keeping it succinct, in our notation we will avoid using but use instead. This corresponds to . It should not be confused with the property of functions, which instead specifies the to be assigned to all instances of objects created by the given function when used as a constructor. We will discuss the property of constructor functions in a later section. There are several ways to specify the of an object, which are listed in a later section. For now, we will use the syntax for illustration. It's worth noting that the syntax is different from the accessor: the former is standard and not deprecated. In an object literal like , the value (which has to be either or another object) will become the of the object represented by the literal, while the other keys like and will become the own properties of the object. This syntax reads very naturally, since is just an \"internal property\" of the object. Here is what happens when trying to access a property: const o = { a: 1, b: 2, // __proto__ sets the [[Prototype]]. It's specified here // as another object literal. __proto__: { b: 3, c: 4, }, }; // o.[[Prototype]] has properties b and c. // o.[[Prototype]].[[Prototype]] is Object.prototype (we will explain // what that means later). // Finally, o.[[Prototype]].[[Prototype]].[[Prototype]] is null. // This is the end of the prototype chain, as null, // by definition, has no [[Prototype]]. // Thus, the full prototype chain looks like: // { a: 1, b: 2 } ---> { b: 3, c: 4 } ---> Object.prototype ---> null console.log(o.a); // 1 // Is there an 'a' own property on o? Yes, and its value is 1. console.log(o.b); // 2 // Is there a 'b' own property on o? Yes, and its value is 2. // The prototype also has a 'b' property, but it's not visited. // This is called Property Shadowing console.log(o.c); // 4 // Is there a 'c' own property on o? No, check its prototype. // Is there a 'c' own property on o.[[Prototype]]? Yes, its value is 4. console.log(o.d); // undefined // Is there a 'd' own property on o? No, check its prototype. // Is there a 'd' own property on o.[[Prototype]]? No, check its prototype. // o.[[Prototype]].[[Prototype]] is Object.prototype and // there is no 'd' property by default, check its prototype. // o.[[Prototype]].[[Prototype]].[[Prototype]] is null, stop searching, // no property found, return undefined. Setting a property to an object creates an own property. The only exception to the getting and setting behavior rules is when it's intercepted by a getter or setter. Similarly, you can create longer prototype chains, and a property will be sought on all of them. const o = { a: 1, b: 2, // __proto__ sets the [[Prototype]]. It's specified here // as another object literal. __proto__: { b: 3, c: 4, __proto__: { d: 5, }, }, }; // { a: 1, b: 2 } ---> { b: 3, c: 4 } ---> { d: 5 } ---> Object.prototype ---> null console.log(o.d); // 5\n\nThe power of prototypes is that we can reuse a set of properties if they should be present on every instance — especially for methods. Suppose we are to create a series of boxes, where each box is an object that contains a value which can be accessed through a function. A naive implementation would be: const boxes = [ { value: 1, getValue() { return this.value; } }, { value: 2, getValue() { return this.value; } }, { value: 3, getValue() { return this.value; } }, ]; This is subpar, because each instance has its own function property that does the same thing, which is redundant and unnecessary. Instead, we can move to the of all boxes: const boxPrototype = { getValue() { return this.value; }, }; const boxes = [ { value: 1, __proto__: boxPrototype }, { value: 2, __proto__: boxPrototype }, { value: 3, __proto__: boxPrototype }, ]; This way, all boxes' method will refer to the same function, lowering memory usage. However, manually binding the for every object creation is still very inconvenient. This is when we would use a constructor function, which automatically sets the for every object manufactured. Constructors are functions called with . // A constructor function function Box(value) { this.value = value; } // Properties all boxes created from the Box() constructor // will have Box.prototype.getValue = function () { return this.value; }; const boxes = [new Box(1), new Box(2), new Box(3)]; We say that is an instance created from the constructor function. is not much different from the object we created previously — it's just a plain object. Every instance created from a constructor function will automatically have the constructor's property as its — that is, . by default has one own property: , which references the constructor function itself — that is, . This allows one to access the original constructor from any instance. Note: If a non-primitive is returned from the constructor function, that value will become the result of the expression. In this case the may not be correctly bound — but this should not happen much in practice. The above constructor function can be rewritten in classes as: class Box { constructor(value) { this.value = value; } // Methods are created on Box.prototype getValue() { return this.value; } } Classes are syntax sugar over constructor functions, which means you can still manipulate to change the behavior of all instances. However, because classes are designed to be an abstraction over the underlying prototype mechanism, we will use the more-lightweight constructor function syntax for this tutorial to fully demonstrate how prototypes work. Because references the same object as the of all instances, we can change the behavior of all instances by mutating . function Box(value) { this.value = value; } Box.prototype.getValue = function () { return this.value; }; const box = new Box(1); // Mutate Box.prototype after an instance has already been created Box.prototype.getValue = function () { return this.value + 1; }; box.getValue(); // 2 A corollary is, re-assigning ( ) is a bad idea for two reasons:\n• The of instances created before the reassignment is now referencing a different object from the of instances created after the reassignment — mutating one's no longer mutates the other.\n• Unless you manually re-set the property, the constructor function can no longer be traced from , which may break user expectation. Some built-in operations will read the property as well, and if it is not set, they may not work as expected. is only useful when constructing instances. It has nothing to do with , which is the constructor function's own prototype, which is — that is, .\n\nSome literal syntaxes in JavaScript create instances that implicitly set the . For example: // Object literals (without the `__proto__` key) automatically // have `Object.prototype` as their `[[Prototype]]` const object = { a: 1 }; Object.getPrototypeOf(object) === Object.prototype; // true // Array literals automatically have `Array.prototype` as their `[[Prototype]]` const array = [1, 2, 3]; Object.getPrototypeOf(array) === Array.prototype; // true // RegExp literals automatically have `RegExp.prototype` as their `[[Prototype]]` const regexp = /abc/; Object.getPrototypeOf(regexp) === RegExp.prototype; // true We can \"de-sugar\" them into their constructor form. For example, \"array methods\" like are simply methods defined on , which is why they are automatically available on all array instances. Warning: There is one misfeature that used to be prevalent — extending or one of the other built-in prototypes. An example of this misfeature is, defining and then using on all array instances. This misfeature is called monkey patching. Doing monkey patching risks forward compatibility, because if the language adds this method in the future but with a different signature, your code will break. It has led to incidents like the SmooshGate, and can be a great nuisance for the language to advance since JavaScript tries to \"not break the web\". The only good reason for extending a built-in prototype is to backport the features of newer JavaScript engines, like . It may be interesting to note that due to historical reasons, some built-in constructors' property are instances themselves. For example, is a number 0, is an empty array, and is . Number.prototype + 1; // 1 Array.prototype.map((x) => x + 1); // [] String.prototype + \"a\"; // \"a\" RegExp.prototype.source; // \"(?:)\" Function.prototype(); // Function.prototype is a no-op function by itself However, this is not the case for user-defined constructors, nor for modern constructors like .\n\nLet's look at what happens behind the scenes in a bit more detail. In JavaScript, as mentioned above, functions are able to have properties. All functions have a special property named . Please note that the code below is free-standing (it is safe to assume there is no other JavaScript on the webpage other than the below code). For the best learning experience, it is highly recommended that you open a console, navigate to the \"console\" tab, copy-and-paste in the below JavaScript code, and run it by pressing the Enter/Return key. (The console is included in most web browser's Developer Tools. More information is available for Firefox Developer Tools, Chrome DevTools, and Edge DevTools.) function doSomething() {} console.log(doSomething.prototype); // It does not matter how you declare the function; a // function in JavaScript will always have a default // prototype property — with one exception: an arrow // function doesn't have a default prototype property: const doSomethingFromArrowFunction = () => {}; console.log(doSomethingFromArrowFunction.prototype); As seen above, has a default property, as demonstrated by the console. After running this code, the console should have displayed an object that looks similar to this. Note: The Chrome console uses to denote the object's prototype, following the spec's terms; Firefox uses . For consistency we will use . We can add properties to the prototype of , as shown below. We can now use the operator to create an instance of based on this prototype. To use the new operator, call the function normally except prefix it with . Calling a function with the operator returns an object that is an instance of the function. Properties can then be added onto this object. function doSomething() {} doSomething.prototype.foo = \"bar\"; // add a property onto the prototype const doSomeInstancing = new doSomething(); doSomeInstancing.prop = \"some value\"; // add a property onto the object console.log(doSomeInstancing); This results in an output similar to the following: As seen above, the of is . But, what does this do? When you access a property of , the runtime first looks to see if has that property. If does not have the property, then the runtime looks for the property in (a.k.a. ). If has the property being looked for, then that property on is used. Otherwise, if does not have the property, then is checked for the property. By default, the of any function's property is . So, (a.k.a. (a.k.a. )) is then looked through for the property being searched for. If the property is not found in , then is looked through. However, there is a problem: does not exist, because is . Then, and only then, after the entire prototype chain of 's is looked through, the runtime asserts that the property does not exist and conclude that the value at the property is . Let's try entering some more code into the console: function doSomething() {} doSomething.prototype.foo = \"bar\"; const doSomeInstancing = new doSomething(); doSomeInstancing.prop = \"some value\"; console.log(\"doSomeInstancing.prop: \", doSomeInstancing.prop); console.log(\"doSomeInstancing.foo: \", doSomeInstancing.foo); console.log(\"doSomething.prop: \", doSomething.prop); console.log(\"doSomething.foo: \", doSomething.foo); console.log(\"doSomething.prototype.prop:\", doSomething.prototype.prop); console.log(\"doSomething.prototype.foo: \", doSomething.prototype.foo); This results in the following:\n\nJavaScript may be a bit confusing for developers coming from Java or C++, as it's all dynamic, all runtime, and it has no static types at all. Everything is either an object (instance) or a function (constructor), and even functions themselves are instances of the constructor. Even the \"classes\" as syntax constructs are just constructor functions at runtime. All constructor functions in JavaScript have a special property called , which works with the operator. The reference to the prototype object is copied to the internal property of the new instance. For example, when you do , JavaScript (after creating the object in memory and before running function with defined to it) sets . When you then access properties of the instance, JavaScript first checks whether they exist on that object directly, and if not, it looks in . is looked at recursively, i.e. , , etc., until it's found or returns . This means that all properties defined on are effectively shared by all instances, and you can even later change parts of and have the changes appear in all existing instances. If, in the example above, you do , then would actually refer to — which is the same as the you defined, i.e. . It is essential to understand the prototypal inheritance model before writing complex code that makes use of it. Also, be aware of the length of the prototype chains in your code and break them up if necessary to avoid possible performance problems. Further, the native prototypes should never be extended unless it is for the sake of compatibility with newer JavaScript features."
    },
    {
        "link": "https://stackoverflow.com/questions/15605281/saving-instance-values-in-a-javascript-class-using-the-prototype-pattern",
        "document": "I'll admit I'm flailing around, cobbling code together from different authors in an attempt to figure out javascript prototypes.\n\nI'm new to the prototype concept, and would like to have some instance variables in my class that can be modified using a method.\n\nHere's what I'm trying, in essence. This was cribbed and modified from the web:\n\n...the point of all that is so I can call the method on an instance of and set properly:\n\nThis actually seems to work, but I'm not sure why the original author did things this way? For instance, what's the point of the bit at the beginning?\n\nIs it preferable to typing out:\n\nI also thought you'd do something like if you thought your class would be used in a callback function for example, but that doesn't appear to be the case here? (Happy to be shown wrong.)\n\nI'm not sure what the best practices are here and would like to know more."
    },
    {
        "link": "https://calibraint.com/blog/dynamic-prototype-pattern-javascript",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/js-prototype",
        "document": "In JavaScript, everything is an object, including functions, arrays, and strings, which are specialized types of objects. JavaScript follows a prototype-based system, where objects inherit properties and methods from other objects through prototypes. This prototype mechanism plays a key role in how JavaScript handles inheritance and object relationships.\n\nWhat is Prototype in JavaScript?\n\nIn JavaScript, the prototype is a container for methods and properties. When methods or properties are added to the prototype of a function, array, or string, they become shared by all instances of that particular object type. Prototype in general can be understood as a mould and all its instances can be considered as the car made from it.\n• None Every JavaScript object has a prototype, which contains shared methods and properties that all instances of that object can use. It’s like a template for objects.\n• None When you add a method or property to an object’s prototype, all instances of that object automatically have access to it.\n• None In this example, the print() method is added to , so any object (like b) can use it.\n• None Using prototypes helps you avoid repeating code. Instead of defining the same methods for each object, you define them once in the prototype, and all objects can use them. This makes your code more efficient.\n• None In JavaScript, each object has an internal [[Prototype]] property, which points to another object. This allows the object to inherit properties and methods from its prototype.\n• None When you access a property or method on an object, JavaScript first checks the object itself. If it’s not found, it looks in the object’s prototype and continues up the prototype chain until it either finds the property or reaches null.\n• None Functions in JavaScript have a prototype property. This is where you add properties or methods that you want to be available to all instances of objects created by that constructor function.\n• None Objects created using a constructor function inherit properties and methods from the constructor’s prototype. This allows for reusable code and shared behaviour across multiple objects.\n• None You can add new properties or methods to an object’s prototype, and all instances of that object will automatically have access to the new functionality. This is a common way to extend built-in objects like Array or Object.\n\nA constructor function in JavaScript is a special function used to create and initialize objects, typically using the new keyword. It sets up properties and methods on the newly created object, allowing for the creation of multiple instances with shared behavior.\n• None A constructor function is a special function used to create and initialize new objects. In this case, Person is a constructor that takes a name argument and assigns it to the name property of the new object using this.\n• None The sayHello method is added to the Person prototype, meaning all instances of Person will have access to this method, allowing them to say “Hello” with their name.\n• None The expression new Person(“Sheema”) creates a new object using the Person constructor, passing “Sheema” as the name argument. The new object is stored in the name variable.\n• None The sayHello() method is then called on the name object, which outputs “Hello, my name is Sheema.” to the console.\n\nThis code defines a sum method on the Array.prototype to calculate the sum of all elements in an array. It then calls this method on two different arrays, arr and arr2, and logs the results.\n• None The sum method is added to Array.prototype, so it can be used by any array to calculate the sum of its elements.\n• None Inside the sum method, this refers to the array the method is called on, allowing it to loop through and sum its elements.\n• None The sum() method is called on both a1 and a2, and it correctly computes and logs the sum for each array (15 for a1 and 35 for a2).\n\nThis code demonstrates prototype inheritance where the child constructor inherits from the parent constructor, allowing instances of child to access methods defined in parent’s prototype. It also adds a custom caste method in the child prototype.\n• None Animal is the parent class with a method speak.\n• None Dog is the child class, which inherits from Animal and overrides the speak method.\n• None Object.create(Animal.prototype) sets up the inheritance chain so that Dog objects can access Animal’s methods.\n\nIn JavaScript, you can extend built-in objects like Array, String, etc., by adding custom methods to their prototypes. This allows you to add new functionality to these objects without modifying the original class.\n• None The first method is added to , which allows every array in JavaScript to use this method.\n• None The first method returns the first element of the array (this[0]), providing a simple utility for arrays.\n• None After extending the prototype, we create an array numbers and call the first() method, which correctly returns the first element of the array (10).\n• None This approach does not modify the original Array class itself but adds functionality in a non-intrusive way, ensuring compatibility with other code and future updates.\n\nTo optimize performance in JavaScript, shared methods are added to prototypes, allowing multiple instances of objects to access the same method without duplicating it for each instance. This reduces memory usage and improves efficiency.\n• None The introduce method is added to the , meaning it’s shared across all instances of Person, saving memory by not duplicating the method.\n• None By using prototypes, the introduce method is stored only once, even though it’s accessible by all Person instances. This optimizes memory usage.\n• None Both person1 and person2 can access the same introduce method without each instance having its own copy, improving efficiency.\n• None The method is part of the prototype chain, which allows it to be inherited by all instances of Person, ensuring that all objects of that type share the same functionality.\n\nIn JavaScript, dynamic method assignment allows you to add or modify methods on objects or prototypes at runtime. This provides flexibility, enabling you to change or extend functionality dynamically as the program runs.\n• None The introduce method is added dynamically to the person1 object, allowing you to modify or extend the functionality of the object after it’s created.\n• None This flexibility lets you change or add methods to individual objects without modifying the entire constructor or class, enabling runtime customization.\n• None added introduce method only exists on person1, not on other instances of Person, allowing for instance-specific behavior.\n• None Since the method is added directly to person1, it’s not part of the Person prototype, so other instances of Person will not inherit it unless it’s added to them individually.\n• Memory Efficiency : Methods are shared across all instances, reducing memory usage since they’re not duplicated for each object.\n• Inheritance Support : Prototypes enable inheritance, allowing objects to inherit properties and methods from other objects.\n• Flexibility : Methods and properties can be added or modified dynamically at runtime, offering flexibility in extending functionality.\n• Performance Optimization : By sharing methods across instances, prototypes help optimize performance, especially for large numbers of objects.\n• Code Reusability : Prototypes allow common functionality to be reused across objects, promoting cleaner and more maintainable code.\n\nIn JavaScript, functions, arrays, and strings are all considered types of objects. They are just specialized forms of the general object type. The Object type acts as the parent or base for these different object types. All the other object type’s like array’s, functions and Strings are connected as a child to the Object through prototype.\n• None In this code we are able to see that the method named common is added to the top level hierarchy for the function’s , Array’s and String’s which are finally converted to object’s at the runtime .\n• None Each and Every thing in JavaScript is converted into an Object at run time, that’s why as soon as I added the method to the Object’s prototype it became accessible to all the other hierarchical children to the Object which are function’s, Array’s and String’s.\n• None This complete hierarchical structure which contain’s the Object as the parent and the function’s, Array’s and String’s as the children of it is called as the\n\nTo understand more follow the article on prototype chain\n\nJavaScript prototypes are key to inheritance, code reuse, and memory efficiency. They allow methods to be shared across instances, reducing redundancy and improving performance. Prototypes provide flexibility to extend or modify objects dynamically. Understanding them is essential for mastering JavaScript and creating efficient, maintainable applications."
    }
]